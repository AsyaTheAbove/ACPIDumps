
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20220331
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SPCR  0x00000050  0x01  "HP    "  "ProLiant"  0x20120202  "MSFT"   0x00000097
 02)  MCFG  0x0000003C  0x01  "HP    "  "ProLiant"  0x20120202  "MSFT"   0x00000097
 03)  EINJ  0x00000130  0x01  "HP    "  "HP__EINJ"  0x20120202  "MSFT"   0x00000097
 04)  APIC  0x0000015E  0x02  "HP    "  "ProLiant"  0x20120202  "MSFT"   0x00000097
 05)  SLIC  0x00000176  0x01  "HP    "  "ProLiant"  0x20120202  "MSFT"   0x00000097
 06)  SSDT  0x00002914  0x01  "HP    "  "ProLiant"  0x00000001  "AMD "   0x00000001
 07)  SLIT  0x0000003C  0x01  "HP    "  "F10     "  0x00000001  "HP  "   0x00000001
 08)  SPMI  0x00000041  0x05  "HP    "  "ProLiant"  0x20120202  "MSFT"   0x00000097
 09)  OEMB  0x00000072  0x01  "HP    "  "ProLiant"  0x20120202  "MSFT"   0x00000097
 10)  ERST  0x000001B0  0x01  "HP    "  "HP__ERST"  0x20120202  "MSFT"   0x00000097
 11)  DSDT  0x00005BF6  0x02  "HP    "  "ProLiant"  0x00000202  "INTL"   0x20051117
 12)  SRAT  0x00000220  0x02  "AMD   "  "AGESA   "  0x00000001  "AMD "   0x00000001
 13)  HEST  0x000000A8  0x01  "HP    "  "HP__HEST"  0x20120202  "MSFT"   0x00000097
 14)  BERT  0x00000030  0x01  "HP    "  "HP__BERT"  0x20120202  "MSFT"   0x00000097
 15)  FACP  0x000000F4  0x04  "HP    "  "ProLiant"  0x20120202  "MSFT"   0x00000097
 16)  SSDT  0x0000002A  0x01  "HP    "  "ProLiant"  0x00000001  "INTL"   0x20051117
 17)  HPET  0x00000038  0x01  "HP    "  "ProLiant"  0x20120202  "MSFT"   0x00000097
 18)  FACS  0x00000040  0x01

Found 18 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 15
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 20120202
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 10
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 11
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 12
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 13
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 14
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 15
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : 16
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : 17
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 09
[06Fh 0111   1]                Local Apic ID : 20
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 0A
[077h 0119   1]                Local Apic ID : 21
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0B
[07Fh 0127   1]                Local Apic ID : 22
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0C
[087h 0135   1]                Local Apic ID : 23
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0D
[08Fh 0143   1]                Local Apic ID : 24
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0E
[097h 0151   1]                Local Apic ID : 25
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0F
[09Fh 0159   1]                Local Apic ID : 26
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 10
[0A7h 0167   1]                Local Apic ID : 27
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 11
[0AFh 0175   1]                Local Apic ID : 90
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 12
[0B7h 0183   1]                Local Apic ID : 91
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 13
[0BFh 0191   1]                Local Apic ID : 92
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 14
[0C7h 0199   1]                Local Apic ID : 93
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 15
[0CFh 0207   1]                Local Apic ID : 94
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 16
[0D7h 0215   1]                Local Apic ID : 95
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 17
[0DFh 0223   1]                Local Apic ID : 96
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 18
[0E7h 0231   1]                Local Apic ID : 97
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 19
[0EFh 0239   1]                Local Apic ID : 98
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 1A
[0F7h 0247   1]                Local Apic ID : 99
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1B
[0FFh 0255   1]                Local Apic ID : 9A
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1C
[107h 0263   1]                Local Apic ID : 9B
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1D
[10Fh 0271   1]                Local Apic ID : 9C
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1E
[117h 0279   1]                Local Apic ID : 9D
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1F
[11Fh 0287   1]                Local Apic ID : 9E
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 20
[127h 0295   1]                Local Apic ID : 9F
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 01 [I/O APIC]
[12Dh 0301   1]                       Length : 0C
[12Eh 0302   1]                  I/O Apic ID : 00
[12Fh 0303   1]                     Reserved : 00
[130h 0304   4]                      Address : FEC00000
[134h 0308   4]                    Interrupt : 00000000

[138h 0312   1]                Subtable Type : 01 [I/O APIC]
[139h 0313   1]                       Length : 0C
[13Ah 0314   1]                  I/O Apic ID : 01
[13Bh 0315   1]                     Reserved : 00
[13Ch 0316   4]                      Address : FEC20000
[140h 0320   4]                    Interrupt : 00000018

[144h 0324   1]                Subtable Type : 02 [Interrupt Source Override]
[145h 0325   1]                       Length : 0A
[146h 0326   1]                          Bus : 00
[147h 0327   1]                       Source : 00
[148h 0328   4]                    Interrupt : 00000002
[14Ch 0332   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[14Eh 0334   1]                Subtable Type : 02 [Interrupt Source Override]
[14Fh 0335   1]                       Length : 0A
[150h 0336   1]                          Bus : 00
[151h 0337   1]                       Source : 09
[152h 0338   4]                    Interrupt : 00000009
[156h 0342   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[158h 0344   1]                Subtable Type : 04 [Local APIC NMI]
[159h 0345   1]                       Length : 06
[15Ah 0346   1]                 Processor ID : FF
[15Bh 0347   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[15Dh 0349   1]         Interrupt Input LINT : 01

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 02 15 48 50 20 20 20 20  // APIC^.....HP    
    0010: 50 72 6F 4C 69 61 6E 74 02 02 12 20 4D 53 46 54  // ProLiant... MSFT
    0020: 97 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 10  // ................
    0030: 01 00 00 00 00 08 02 11 01 00 00 00 00 08 03 12  // ................
    0040: 01 00 00 00 00 08 04 13 01 00 00 00 00 08 05 14  // ................
    0050: 01 00 00 00 00 08 06 15 01 00 00 00 00 08 07 16  // ................
    0060: 01 00 00 00 00 08 08 17 01 00 00 00 00 08 09 20  // ............... 
    0070: 01 00 00 00 00 08 0A 21 01 00 00 00 00 08 0B 22  // .......!......."
    0080: 01 00 00 00 00 08 0C 23 01 00 00 00 00 08 0D 24  // .......#.......$
    0090: 01 00 00 00 00 08 0E 25 01 00 00 00 00 08 0F 26  // .......%.......&
    00A0: 01 00 00 00 00 08 10 27 01 00 00 00 00 08 11 90  // .......'........
    00B0: 00 00 00 00 00 08 12 91 00 00 00 00 00 08 13 92  // ................
    00C0: 00 00 00 00 00 08 14 93 00 00 00 00 00 08 15 94  // ................
    00D0: 00 00 00 00 00 08 16 95 00 00 00 00 00 08 17 96  // ................
    00E0: 00 00 00 00 00 08 18 97 00 00 00 00 00 08 19 98  // ................
    00F0: 00 00 00 00 00 08 1A 99 00 00 00 00 00 08 1B 9A  // ................
    0100: 00 00 00 00 00 08 1C 9B 00 00 00 00 00 08 1D 9C  // ................
    0110: 00 00 00 00 00 08 1E 9D 00 00 00 00 00 08 1F 9E  // ................
    0120: 00 00 00 00 00 08 20 9F 00 00 00 00 01 0C 00 00  // ...... .........
    0130: 00 00 C0 FE 00 00 00 00 01 0C 01 00 00 00 C2 FE  // ................
    0140: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    0150: 00 09 09 00 00 00 0F 00 04 06 FF 00 00 01        // ..............


BERT
----
[000h 0000   4]                    Signature : "BERT"    [Boot Error Record Table]
[004h 0004   4]                 Table Length : 00000030
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EE
[00Ah 0010   6]                       Oem ID : "HP   "
[010h 0016   8]                 Oem Table ID : "HP__BERT"
[018h 0024   4]                 Oem Revision : 20120202
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]     Boot Error Region Length : 00000054
[028h 0040   8]    Boot Error Region Address : 00000000BFDBD470

Raw Table Data: Length 48 (0x30)

    0000: 42 45 52 54 30 00 00 00 01 EE 48 50 20 20 20 00  // BERT0.....HP   .
    0010: 48 50 5F 5F 42 45 52 54 02 02 12 20 4D 53 46 54  // HP__BERT... MSFT
    0020: 97 00 00 00 54 00 00 00 70 D4 DB BF 00 00 00 00  // ....T...p.......


DSDT
----
DefinitionBlock ("", "DSDT", 2, "HP    ", "ProLiant", 0x00000202)
{
    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ICMS,   8, 
        DCMS,   8
    }

    IndexField (ICMS, DCMS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        Offset (0x04), 
        Offset (0x08), 
        BS_A,   32
    }

    OperationRegion (CFGS, SystemMemory, BS_A, 0x80)
    Field (CFGS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x04), 
        PCIE,   32, 
        Offset (0x31), 
        TPMR,   1, 
        STHP,   1, 
        SHPG,   1, 
        OSCF,   1
    }

    OperationRegion (CMPT, SystemIO, 0x0C50, 0x03)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        CMID,   8, 
            ,   6, 
        GPCT,   2, 
        GP0I,   1, 
        GP1I,   1, 
        GP2I,   1, 
        GP3I,   1, 
        GP4I,   1, 
        GP5I,   1, 
        GP6I,   1, 
        GP7I,   1
    }

    OperationRegion (PCFG, SystemMemory, PCIE, 0x02000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x38078), 
        Offset (0x3807A), 
        PMS7,   1, 
        Offset (0x50078), 
        Offset (0x5007A), 
        PMSA,   1, 
        Offset (0x8800A), 
        STCL,   16, 
        Offset (0xA0004), 
        SMIE,   1, 
        SMME,   1, 
        Offset (0xA0008), 
        RVID,   8, 
        Offset (0xA0014), 
        SMB1,   32, 
        Offset (0xA0050), 
            ,   10, 
        GP51,   1, 
        Offset (0xA0056), 
            ,   11, 
        GP64,   1, 
        Offset (0xA0082), 
            ,   2, 
        G31O,   1, 
        Offset (0xA0090), 
        SM00,   16, 
        Offset (0xA00BA), 
            ,   4, 
        ESMP,   1, 
        Offset (0xA00BB), 
            ,   1, 
        HSMP,   1, 
        Offset (0xA00E1), 
            ,   6, 
        ACIR,   1, 
        Offset (0xA4004), 
        PCMD,   2
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        INPM,   8, 
        DAPM,   8
    }

    IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        TM1E,   1, 
        TM2E,   1, 
        Offset (0x01), 
            ,   1, 
        TM1S,   1, 
        TM2S,   1, 
        Offset (0x04), 
            ,   7, 
        SLPS,   1, 
        Offset (0x07), 
            ,   7, 
        CLPS,   1, 
        Offset (0x0D), 
        EV0S,   1, 
        EV1S,   1, 
        Offset (0x10), 
            ,   6, 
        PWDE,   1, 
        Offset (0x1C), 
            ,   3, 
        MKME,   1, 
        PI3E,   1, 
        PI2E,   1, 
        PI1E,   1, 
        PI0E,   1, 
            ,   3, 
        MKMS,   1, 
        PI3S,   1, 
        PI2S,   1, 
        PI1S,   1, 
        PI0S,   1, 
        Offset (0x20), 
        P1EB,   16, 
        Offset (0x36), 
            ,   6, 
        GV6P,   1, 
        GV7P,   1, 
        EV0C,   1, 
        EV1C,   1, 
            ,   1, 
        GM0P,   1, 
        GM1P,   1, 
        GM2P,   1, 
        GM3P,   1, 
        GM8P,   1, 
            ,   1, 
        GM4P,   1, 
        GM5P,   1, 
            ,   1, 
        GM6P,   1, 
        GM7P,   1, 
        Offset (0x3B), 
        GPX0,   1, 
        GPX4,   1, 
        GPX5,   1, 
        GPX1,   1, 
        GPX6,   1, 
        GPX7,   1, 
        GPX2,   1, 
        GPX3,   1, 
        Offset (0x55), 
        SPRE,   1, 
            ,   1, 
            ,   1, 
        EPNM,   1, 
        DPPF,   1, 
        FNGS,   1, 
        Offset (0x61), 
            ,   7, 
        R617,   1, 
        Offset (0x65), 
            ,   4, 
        RSTU,   1, 
        Offset (0x68), 
            ,   3, 
        TPDE,   1, 
            ,   1, 
        Offset (0x7C), 
            ,   2, 
        BLNK,   2, 
        Offset (0x84), 
        WPNE,   1, 
        WPAG,   1, 
        Offset (0x92), 
            ,   7, 
        GV7S,   1, 
        Offset (0x96), 
        GP8I,   1, 
        GP9I,   1, 
        Offset (0x9A), 
            ,   7, 
        HECO,   1, 
        Offset (0xA8), 
        PI4E,   1, 
        PI5E,   1, 
        PI6E,   1, 
        PI7E,   1, 
        Offset (0xA9), 
        PI4S,   1, 
        PI5S,   1, 
        PI6S,   1, 
        PI7S,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        If ((Arg0 == One))
        {
            BLNK = 0x02
        }

        If ((Arg0 == 0x02))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        CLPS = One
        SLPS = One
        If ((RVID <= 0x13))
        {
            PWDE = Zero
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        HECO = One
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        BLNK = 0x03
        PMS7 = One
        PMSA = One
    }

    Method (TRMD, 1, NotSerialized)
    {
        SPRE = Arg0
        TPDE = Arg0
    }

    Name (DP80, 0x80)
    Name (DP90, 0x90)
    Name (SPIO, 0x2E)
    Name (IOSB, 0x0A00)
    Name (IOSL, 0x80)
    Name (IOEB, 0x0A80)
    Name (IOEL, 0x04)
    Name (IOCB, 0x0A84)
    Name (IOCL, 0x02)
    Name (IOBB, 0x0A86)
    Name (IOBL, 0x08)
    Name (IOWB, 0x0A90)
    Name (IOWL, 0x10)
    Name (IOGB, 0x0F40)
    Name (IOGL, 0xFF)
    Name (APIC, One)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (SMB0, 0x0B00)
    Name (SMBB, 0x0B20)
    Name (SMBM, 0x10)
    Name (SMBL, 0x20)
    Name (PCIB, 0xE0000000)
    Name (PCIL, 0x10000000)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (SMIT, 0xB0)
    Name (CMRQ, 0xE0)
    Name (CMER, 0xE1)
    Name (CMOR, 0xE3)
    OperationRegion (BIOS, SystemMemory, 0xBFDC2064, 0xFF)
    Field (BIOS, ByteAcc, NoLock, Preserve)
    {
        SS1,    1, 
        SS2,    1, 
        SS3,    1, 
        SS4,    1, 
        Offset (0x01), 
        IOST,   16, 
        TOPM,   32, 
        ROMS,   32, 
        MG1B,   32, 
        MG1L,   32, 
        MG2B,   32, 
        MG2L,   32, 
        Offset (0x1C), 
        DMAX,   8, 
        HPTA,   32, 
        CPB0,   32, 
        CPB1,   32, 
        CPB2,   32, 
        CPB3,   32, 
        ASSB,   8, 
        AOTB,   8, 
        AAXB,   32, 
        SMIF,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        MPEN,   8, 
        TPMF,   8, 
        MG3B,   32, 
        MG3L,   32, 
        MH1B,   32, 
        MH1L,   32, 
        OSTP,   8
    }

    Method (RRIO, 4, NotSerialized)
    {
        Debug = "RRIO"
    }

    Method (RDMA, 3, NotSerialized)
    {
        Debug = "rDMA"
    }

    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        Name (TTT0, Zero)
        TTT0 = OSYS ()
        If ((TTT0 == One))
        {
            OSVR = 0x03
        }
        ElseIf ((TTT0 == 0x10))
        {
            OSVR = One
        }
        ElseIf ((TTT0 == 0x11))
        {
            OSVR = 0x02
        }
        ElseIf ((TTT0 == 0x12))
        {
            OSVR = 0x04
        }
        ElseIf ((TTT0 == 0x13))
        {
            OSVR = Zero
        }
        ElseIf ((TTT0 == 0x14))
        {
            OSVR = Zero
        }
        ElseIf ((TTT0 == 0x15))
        {
            OSVR = Zero
        }

        Return (OSVR) /* \OSVR */
    }

    Name (OSNV, Ones)
    Method (OSNF, 0, NotSerialized)
    {
        If ((OSNV != Ones))
        {
            Return (OSNV) /* \OSNV */
        }

        OSNV = One
        If (CondRefOf (_OSI, Local1))
        {
            If (_OSI ("Windows 2006"))
            {
                OSNV = Zero
            }

            If (_OSI ("Windows 2001.1 SP1"))
            {
                Local0 = (One << 0x0F)
                If ((IOST & Local0))
                {
                    OSNV = Zero
                }
            }
        }
        Else
        {
            OSNV = One
        }

        Return (OSNV) /* \OSNV */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, DP80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, DP90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Method (OSYS, 0, NotSerialized)
    {
        Local0 = 0x10
        If (CondRefOf (_OSI, Local1))
        {
            If (_OSI ("Windows 2000"))
            {
                Local0 = 0x12
            }

            If (_OSI ("Windows 2001"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001.1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2001.1 SP1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2006"))
            {
                Local0 = 0x15
            }
        }
        ElseIf (MCTH (_OS, "Microsoft Windows NT"))
        {
            Local0 = 0x12
        }
        ElseIf (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
        {
            Local0 = 0x11
        }

        Return (Local0)
    }

    Scope (_PR)
    {
        Processor (P001, 0x01, 0x00000810, 0x06){}
        Processor (P002, 0x02, 0x00000000, 0x00){}
        Processor (P003, 0x03, 0x00000000, 0x00){}
        Processor (P004, 0x04, 0x00000000, 0x00){}
        Processor (P005, 0x05, 0x00000000, 0x00){}
        Processor (P006, 0x06, 0x00000000, 0x00){}
        Processor (P007, 0x07, 0x00000000, 0x00){}
        Processor (P008, 0x08, 0x00000000, 0x00){}
        Processor (P009, 0x09, 0x00000000, 0x00){}
        Processor (P00A, 0x0A, 0x00000000, 0x00){}
        Processor (P00B, 0x0B, 0x00000000, 0x00){}
        Processor (P00C, 0x0C, 0x00000000, 0x00){}
        Processor (P00D, 0x0D, 0x00000000, 0x00){}
        Processor (P00E, 0x0E, 0x00000000, 0x00){}
        Processor (P00F, 0x0F, 0x00000000, 0x00){}
        Processor (P010, 0x10, 0x00000000, 0x00){}
        Processor (P011, 0x11, 0x00000000, 0x00){}
        Processor (P012, 0x12, 0x00000000, 0x00){}
        Processor (P013, 0x13, 0x00000000, 0x00){}
        Processor (P014, 0x14, 0x00000000, 0x00){}
        Processor (P015, 0x15, 0x00000000, 0x00){}
        Processor (P016, 0x16, 0x00000000, 0x00){}
        Processor (P017, 0x17, 0x00000000, 0x00){}
        Processor (P018, 0x18, 0x00000000, 0x00){}
        Processor (P019, 0x19, 0x00000000, 0x00){}
        Processor (P01A, 0x1A, 0x00000000, 0x00){}
        Processor (P01B, 0x1B, 0x00000000, 0x00){}
        Processor (P01C, 0x1C, 0x00000000, 0x00){}
        Processor (P01D, 0x1D, 0x00000000, 0x00){}
        Processor (P01E, 0x1E, 0x00000000, 0x00){}
        Processor (P01F, 0x1F, 0x00000000, 0x00){}
        Processor (P020, 0x20, 0x00000000, 0x00){}
        Alias (P001, CPU1)
        Alias (P002, CPU2)
        Alias (P003, CPU3)
        Alias (P004, CPU4)
        Alias (P005, CPU5)
        Alias (P006, CPU6)
        Alias (P007, CPU7)
        Alias (P008, CPU8)
        Alias (P009, CPU9)
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x32)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKG, 
                Zero
            }
        })
        Name (AR00, Package (0x32)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                One, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                One, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                Zero, 
                0x36
            }
        })
        Name (PR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x32
            }
        })
        Name (PR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKG, 
                Zero
            }
        })
        Name (AR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2E
            }
        })
        Name (PR1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00180001)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Device (RD8A)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (NB2, PCI_Config, Zero, 0x0100)
                Field (NB2, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    MI,     32, 
                    MD,     32, 
                    Offset (0x94), 
                    HI,     32, 
                    HD,     32, 
                    Offset (0xF8), 
                    API,    32, 
                    APD,    32
                }

                Device (NMEM)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y00)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y01)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.RD8A.NMEM._Y00._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.RD8A.NMEM._Y00._LEN, LEN1)  // _LEN: Length
                        MI = 0x3C
                        Local0 = MD /* \_SB_.PCI0.RD8A.MD__ */
                        If ((Local0 & 0x40))
                        {
                            MI = 0x3A
                            BAS1 = (MD & 0xFFFFFF00)
                            LEN1 = ((MD & 0xFF) << 0x17)
                        }

                        CreateDWordField (CRS, \_SB.PCI0.RD8A.NMEM._Y01._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.RD8A.NMEM._Y01._LEN, LEN2)  // _LEN: Length
                        API = Zero
                        Local1 = APD /* \_SB_.PCI0.RD8A.APD_ */
                        If ((Local1 & One))
                        {
                            LEN2 = 0x0100
                            API = One
                            BAS2 = (APD & 0xFFFFFF00)
                        }

                        Return (CRS) /* \_SB_.PCI0.RD8A.NMEM.CRS_ */
                    }
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                OperationRegion (NBF2, PCI_Config, Zero, 0x0100)
                Field (NBF2, AnyAcc, NoLock, Preserve)
                {
                    DID,    32, 
                    Offset (0x44), 
                    MBAS,   32
                }

                Device (UMEM)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x15)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y02)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.IOMA.UMEM._Y02._BAS, BAS3)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.IOMA.UMEM._Y02._LEN, LEN3)  // _LEN: Length
                        If ((DID != Ones))
                        {
                            LEN3 = 0x4000
                            BAS3 = (MBAS & 0xFFFFFF00)
                        }

                        Return (CRS) /* \_SB_.PCI0.IOMA.UMEM.CRS_ */
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SMBS, PCI_Config, Zero, 0x0100)
                Field (SMBS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    REV,    8
                }

                OperationRegion (WIDE, PCI_Config, 0xAD, One)
                Field (WIDE, AnyAcc, NoLock, Preserve)
                {
                    DUM1,   4, 
                    SOPT,   1
                }
            }

            Device (IDEC)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x5A, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    0x0F, 
                    Zero
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    Zero
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    Zero
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, AnyAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F)
                    Local1 = (Arg0 >> 0x04)
                    Return ((0x1E * ((Local0 + One) + (Local1 + One)
                        )))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, PIT1)
                    CreateByteField (Arg0, One, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateDWordField (BUF, Zero, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If ((PICX & One))
                    {
                        Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                    }

                    PIO0 = GETT (PIT0)
                    PIO1 = GETT (PIT1)
                    If ((UDCX & One))
                    {
                        FLAG |= One
                        DMA0 = DerefOf (UDMT [(UDMX & 0x0F)])
                    }
                    Else
                    {
                        DMA0 = GETT (MDT0)
                    }

                    If ((UDCX & 0x02))
                    {
                        FLAG |= 0x04
                        DMA1 = DerefOf (UDMT [(UDMX >> 0x04)])
                    }
                    Else
                    {
                        DMA1 = GETT (MDT1)
                    }

                    FLAG |= 0x1A
                    Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, Zero, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                    })
                    CreateByteField (BUF, Zero, PIT1)
                    CreateByteField (BUF, One, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Local0 = Match (PIOT, MLE, PIO0, MTR, Zero, Zero)
                    Local0 %= 0x05
                    Local1 = Match (PIOT, MLE, PIO1, MTR, Zero, Zero)
                    Local1 %= 0x05
                    PIMX = ((Local1 << 0x04) | Local0)
                    PIT0 = DerefOf (PITR [Local0])
                    PIT1 = DerefOf (PITR [Local1])
                    If ((FLAG & One))
                    {
                        Local0 = Match (UDMT, MLE, DMA0, MTR, Zero, Zero)
                        Local0 %= 0x07
                        UDMX |= Local0
                        UDCX |= One
                    }
                    ElseIf ((DMA0 != Ones))
                    {
                        Local0 = Match (MDMT, MLE, DMA0, MTR, Zero, Zero)
                        MDT0 = DerefOf (MDTR [Local0])
                    }

                    If ((FLAG & 0x04))
                    {
                        Local0 = Match (UDMT, MLE, DMA1, MTR, Zero, Zero)
                        Local0 %= 0x07
                        UDMX |= (Local0 << 0x04)
                        UDCX |= 0x02
                    }
                    ElseIf ((DMA1 != Ones))
                    {
                        Local0 = Match (MDMT, MLE, DMA1, MTR, Zero, Zero)
                        MDT1 = DerefOf (MDTR [Local0])
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.STM_.BUF_ */
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, Zero, MDT1)
                    CreateByteField (Arg1, One, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If ((Arg0 == 0xA0))
                    {
                        Local0 = (PIMX & 0x0F)
                        Local1 = MDT0 /* \_SB_.PCI0.IDEC.GTF_.MDT0 */
                        Local2 = (UDCX & One)
                        Local3 = (UDMX & 0x0F)
                    }
                    Else
                    {
                        Local0 = (PIMX >> 0x04)
                        Local1 = MDT1 /* \_SB_.PCI0.IDEC.GTF_.MDT1 */
                        Local2 = (UDCX & 0x02)
                        Local3 = (UDMX >> 0x04)
                    }

                    Name (BUF, Buffer (0x15)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xF5                     // .....
                    })
                    CreateByteField (BUF, One, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    CreateByteField (BUF, 0x13, CMDC)
                    CMDA = Arg0
                    CMDB = Arg0
                    CMDC = Arg0
                    PMOD = (Local0 | 0x08)
                    If (Local2)
                    {
                        DMOD = (Local3 | 0x40)
                    }
                    Else
                    {
                        Local4 = Match (MDMT, MLE, GETT (Local1), MTR, Zero, Zero)
                        If ((Local4 < 0x03))
                        {
                            DMOD = (0x20 | Local4)
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.GTF_.BUF_ */
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            VPIT = PPIT /* \_SB_.PCI0.IDEC.PPIT */
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIC = PPIC /* \_SB_.PCI0.IDEC.PPIC */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                        }
                        Else
                        {
                            VPIT = SPIT /* \_SB_.PCI0.IDEC.SPIT */
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIC = SPIC /* \_SB_.PCI0.IDEC.SPIC */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                        }

                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            PPIT = VPIT /* \_SB_.PCI0.IDEC.PRID._STM.VPIT */
                            PMDT = VMDT /* \_SB_.PCI0.IDEC.PRID._STM.VMDT */
                            PPIM = VPIM /* \_SB_.PCI0.IDEC.PRID._STM.VPIM */
                            PUDC = VUDC /* \_SB_.PCI0.IDEC.PRID._STM.VUDC */
                            PUDM = VUDM /* \_SB_.PCI0.IDEC.PRID._STM.VUDM */
                        }
                        Else
                        {
                            SPIT = VPIT /* \_SB_.PCI0.IDEC.PRID._STM.VPIT */
                            SMDT = VMDT /* \_SB_.PCI0.IDEC.PRID._STM.VMDT */
                            SPIM = VPIM /* \_SB_.PCI0.IDEC.PRID._STM.VPIM */
                            SUDC = VUDC /* \_SB_.PCI0.IDEC.PRID._STM.VUDC */
                            SUDM = VUDM /* \_SB_.PCI0.IDEC.PRID._STM.VUDM */
                        }
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }
                            Else
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }

                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }
                            Else
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }

                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            VPIT = SPIT /* \_SB_.PCI0.IDEC.SPIT */
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIC = SPIC /* \_SB_.PCI0.IDEC.SPIC */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                        }
                        Else
                        {
                            VPIT = PPIT /* \_SB_.PCI0.IDEC.PPIT */
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIC = PPIC /* \_SB_.PCI0.IDEC.PPIC */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                        }

                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            SPIT = VPIT /* \_SB_.PCI0.IDEC.SECD._STM.VPIT */
                            SMDT = VMDT /* \_SB_.PCI0.IDEC.SECD._STM.VMDT */
                            SPIM = VPIM /* \_SB_.PCI0.IDEC.SECD._STM.VPIM */
                            SUDC = VUDC /* \_SB_.PCI0.IDEC.SECD._STM.VUDC */
                            SUDM = VUDM /* \_SB_.PCI0.IDEC.SECD._STM.VUDM */
                        }
                        Else
                        {
                            PPIT = VPIT /* \_SB_.PCI0.IDEC.SECD._STM.VPIT */
                            PMDT = VMDT /* \_SB_.PCI0.IDEC.SECD._STM.VMDT */
                            PPIM = VPIM /* \_SB_.PCI0.IDEC.SECD._STM.VPIM */
                            PUDC = VUDC /* \_SB_.PCI0.IDEC.SECD._STM.VUDC */
                            PUDM = VUDM /* \_SB_.PCI0.IDEC.SECD._STM.VUDM */
                        }
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }
                            Else
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }

                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }
                            Else
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }

                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }

            Device (SBAZ)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, Zero, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x1B, 0x04))
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                OperationRegion (LPCS, PCI_Config, Zero, 0x0100)
                Field (LPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                        ,   7, 
                    ECEN,   1, 
                    Offset (0xA4), 
                    ECAD,   16
                }

                Name (ECIN, Zero)
                Mutex (ECMU, 0x00)
                Mutex (MLMU, 0x00)
                If (ECEN)
                {
                    ECIN = (ECAD & 0xFFFE)
                    OperationRegion (ECBP, SystemIO, ECIN, 0x02)
                    Field (ECBP, ByteAcc, NoLock, Preserve)
                    {
                        BPIO,   8
                    }

                    OperationRegion (ECIO, SystemIO, ECIN, 0x02)
                    Field (ECIO, ByteAcc, NoLock, Preserve)
                    {
                        IND,    8, 
                        DAT,    8
                    }

                    IndexField (IND, DAT, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDNM,   8, 
                        Offset (0x22), 
                        POW,    8, 
                        Offset (0x30), 
                        ACT,    1, 
                        Offset (0x60), 
                        IOBH,   8, 
                        IOBL,   8, 
                        Offset (0x70), 
                        INT,    4
                    }

                    Method (CFG, 1, NotSerialized)
                    {
                        BPIO = 0x5A
                        BPIO = 0x5A
                        LDNM = Arg0
                    }

                    Method (XCFG, 0, NotSerialized)
                    {
                        BPIO = 0xA5
                    }

                    Method (STA, 1, NotSerialized)
                    {
                        Acquire (ECMU, 0x5000)
                        CFG (Arg0)
                        Local1 = Zero
                        If (ACT)
                        {
                            Local1 = 0x0F
                        }

                        If ((IND == 0xFF))
                        {
                            Local1 = Zero
                        }

                        XCFG ()
                        Release (ECMU)
                        Return (Local1)
                    }

                    Method (RDMB, 1, NotSerialized)
                    {
                        Acquire (ECMU, 0x1388)
                        Acquire (MLMU, 0x1388)
                        CFG (0x05)
                        Name (IOBA, Zero)
                        IOBA = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                        IOBA <<= 0x08
                        IOBA |= IOBL /* \_SB_.PCI0.SBRG.IOBL */
                        OperationRegion (MLIO, SystemIO, IOBA, 0x02)
                        Field (MLIO, ByteAcc, NoLock, Preserve)
                        {
                            MLIN,   8, 
                            MLDA,   8
                        }

                        MLIN = Arg0
                        Return (MLDA) /* \_SB_.PCI0.SBRG.RDMB.MLDA */
                        Release (MLMU)
                        Release (ECMU)
                    }

                    Method (WRMB, 2, NotSerialized)
                    {
                        Acquire (ECMU, 0x1388)
                        Acquire (MLMU, 0x1388)
                        CFG (0x05)
                        Name (IOBA, Zero)
                        IOBA = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                        IOBA <<= 0x08
                        IOBA |= IOBL /* \_SB_.PCI0.SBRG.IOBL */
                        OperationRegion (MLIO, SystemIO, IOBA, 0x02)
                        Field (MLIO, ByteAcc, NoLock, Preserve)
                        {
                            MLIN,   8, 
                            MLDA,   8
                        }

                        MLIN = Arg0
                        MLDA = Arg1
                        Release (MLMU)
                        Release (ECMU)
                    }

                    Name (KBWF, One)
                    Name (MSWF, One)
                    Name (IRWF, One)
                    Device (PSKE)
                    {
                        Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = Zero
                            Local1 = STA (0x07)
                            Return (Local1)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        })
                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x03, 0x04))
                        }

                        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                        {
                            If (Arg0)
                            {
                                KBWF = One
                            }
                            Else
                            {
                                KBWF = Zero
                            }
                        }
                    }

                    Device (PSMS)
                    {
                        Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = Zero
                            Local1 = STA (0x07)
                            Return (Local1)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IRQNoFlags ()
                                {12}
                        })
                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x03, 0x04))
                        }

                        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                        {
                            If (Arg0)
                            {
                                MSWF = One
                            }
                            Else
                            {
                                MSWF = Zero
                            }
                        }
                    }

                    Method (KWEN, 0, NotSerialized)
                    {
                        WRMB (0x81, Zero)
                        WRMB (0x82, One)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Method (KWDS, 0, NotSerialized)
                    {
                        WRMB (0x81, Zero)
                        WRMB (0x82, Zero)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Method (MWEN, 0, NotSerialized)
                    {
                        WRMB (0x81, One)
                        WRMB (0x82, One)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Method (MWDS, 0, NotSerialized)
                    {
                        WRMB (0x81, One)
                        WRMB (0x82, Zero)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Device (ECIR)
                    {
                        Name (_HID, EisaId ("AMDC001"))  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = Zero
                            If ((OSTY == 0x06))
                            {
                                Local1 = STA (0x05)
                            }

                            Return (Local1)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (RSRC, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y03)
                                IRQNoFlags (_Y04)
                                    {}
                            })
                            CreateByteField (RSRC, \_SB.PCI0.SBRG.ECIR._CRS._Y03._MIN, IO1)  // _MIN: Minimum Base Address
                            CreateByteField (RSRC, 0x03, IO2)
                            CreateByteField (RSRC, \_SB.PCI0.SBRG.ECIR._CRS._Y03._MAX, IO3)  // _MAX: Maximum Base Address
                            CreateByteField (RSRC, 0x05, IO4)
                            CreateWordField (RSRC, \_SB.PCI0.SBRG.ECIR._CRS._Y04._INT, IRQV)  // _INT: Interrupts
                            Acquire (ECMU, 0x1388)
                            CFG (0x05)
                            If (ACT)
                            {
                                IO1 = IOBL /* \_SB_.PCI0.SBRG.IOBL */
                                IO2 = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                                IO3 = IOBL /* \_SB_.PCI0.SBRG.IOBL */
                                IO4 = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                                Local0 = One
                                IRQV = (Local0 << INT) /* \_SB_.PCI0.SBRG.INT_ */
                            }

                            XCFG ()
                            Release (ECMU)
                            Return (RSRC) /* \_SB_.PCI0.SBRG.ECIR._CRS.RSRC */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x0550,             // Range Minimum
                                    0x0550,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0650,             // Range Minimum
                                    0x0650,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0550,             // Range Minimum
                                    0x0550,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0650,             // Range Minimum
                                    0x0650,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {3}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IO1)
                            CreateByteField (Arg0, 0x03, IO2)
                            CreateWordField (Arg0, 0x09, IRQV)
                            Acquire (ECMU, 0x1388)
                            CFG (0x05)
                            IOBL = IO1 /* \_SB_.PCI0.SBRG.ECIR._SRS.IO1_ */
                            IOBH = IO2 /* \_SB_.PCI0.SBRG.ECIR._SRS.IO2_ */
                            FindSetRightBit (IRQV, Local0)
                            INT = (Local0 - One)
                            ACT = One
                            XCFG ()
                            Release (ECMU)
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x17, 0x04))
                        }

                        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                        {
                            If (Arg0)
                            {
                                IRWF = One
                            }
                            Else
                            {
                                IRWF = Zero
                            }
                        }

                        Method (IRCF, 2, NotSerialized)
                        {
                            Name (CONN, Zero)
                            If ((Arg0 == One))
                            {
                                CONN |= RVID /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                                CONN |= 0x00013200 /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                                Return (CONN) /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                            }

                            If ((Arg0 == 0x02))
                            {
                                CONN = (GP64 << One)
                                CONN |= GP51 /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                                Return (CONN) /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                            }

                            If ((Arg0 == 0x03))
                            {
                                If ((Arg1 == Zero))
                                {
                                    G31O = One
                                }
                                Else
                                {
                                    G31O = Zero
                                    Sleep (0x64)
                                    G31O = One
                                }
                            }

                            If ((Arg0 == 0x04))
                            {
                                If ((Arg1 == Zero))
                                {
                                    ACIR = Zero
                                }
                                Else
                                {
                                    ACIR = One
                                }
                            }

                            If (((Arg0 == Zero) || (Arg0 > 0x05)))
                            {
                                CONN = Ones
                            }

                            Return (CONN) /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                        }
                    }

                    Method (PPTS, 1, NotSerialized)
                    {
                        If (^PSKE._STA ())
                        {
                            If (KBWF)
                            {
                                KWEN ()
                            }
                            Else
                            {
                                KWDS ()
                            }
                        }

                        If (^PSMS._STA ())
                        {
                            If (MSWF)
                            {
                                MWEN ()
                            }
                            Else
                            {
                                MWDS ()
                            }
                        }
                    }

                    Method (WWAK, 1, NotSerialized)
                    {
                        If (^PSKE._STA ())
                        {
                            KWDS ()
                        }

                        If (^PSMS._STA ())
                        {
                            MWDS ()
                        }
                    }
                }

                Method (EPTS, 1, NotSerialized)
                {
                    If (ECEN)
                    {
                        PPTS (Arg0)
                    }
                }

                Method (EWAK, 1, NotSerialized)
                {
                    If (ECEN)
                    {
                        WWAK (Arg0)
                    }
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0C)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (M2R0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (M2R1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (M2R0) /* \_SB_.PCI0.SBRG.PS2M.M2R0 */
                        }
                        Else
                        {
                            Return (M2R1) /* \_SB_.PCI0.SBRG.PS2M.M2R1 */
                        }
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (UAR1)
                {
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, Zero)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (CMPR) /* \_SB_.PCI0.SBRG.UAR1.CMPR */
                    }

                    Name (CMPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (UAR2)
                {
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (One))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (One, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (DCRS (One, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, One)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (CMPR) /* \_SB_.PCI0.SBRG.UAR2.CMPR */
                    }

                    Name (CMPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (SIOR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Method (_UID, 0, NotSerialized)  // _UID: Unique ID
                    {
                        Return (SPIO) /* \SPIO */
                    }

                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y05)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y06)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y07)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y08)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y09)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0B)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SPIO != 0x03F0) && (SPIO > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y05._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y05._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y05._LEN, GPL1)  // _LEN: Length
                            GP10 = SPIO /* \SPIO */
                            GP11 = SPIO /* \SPIO */
                            GPL1 = 0x02
                        }

                        If (IOSB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y06._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y06._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y06._LEN, GPL2)  // _LEN: Length
                            GP20 = IOSB /* \IOSB */
                            GP21 = IOSB /* \IOSB */
                            GPL2 = IOSL /* \IOSL */
                        }

                        If (IOEB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y07._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y07._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y07._LEN, GPL3)  // _LEN: Length
                            GP30 = IOEB /* \IOEB */
                            GP31 = IOEB /* \IOEB */
                            GPL3 = IOEL /* \IOEL */
                        }

                        If (IOCB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y08._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y08._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y08._LEN, GPL4)  // _LEN: Length
                            GP40 = IOCB /* \IOCB */
                            GP41 = IOCB /* \IOCB */
                            GPL4 = IOCL /* \IOCL */
                        }

                        If (IOBB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y09._MIN, GP50)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y09._MAX, GP51)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y09._LEN, GPL5)  // _LEN: Length
                            GP50 = IOBB /* \IOBB */
                            GP51 = IOBB /* \IOBB */
                            GPL5 = IOBL /* \_SB_.PCI0.SBRG.IOBL */
                        }

                        If (IOWB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y0A._MIN, GP60)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y0A._MAX, GP61)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y0A._LEN, GPL6)  // _LEN: Length
                            GP60 = IOWB /* \IOWB */
                            GP61 = IOWB /* \IOWB */
                            GPL6 = IOWL /* \IOWL */
                        }

                        If (IOGB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y0B._MIN, GP70)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y0B._MAX, GP71)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y0B._LEN, GPL7)  // _LEN: Length
                            GP70 = IOGB /* \IOGB */
                            GP71 = IOGB /* \IOGB */
                            GPL7 = IOGL /* \IOGL */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIOR.CRS_ */
                    }
                }

                Name (DCAT, Package (0x16)
                {
                    0x02, 
                    One, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0x04, 
                    0x05, 
                    0x06, 
                    0x07, 
                    0x08, 
                    0x09, 
                    0x0A, 
                    0xFF
                })
                Mutex (MUT0, 0x00)
                Method (ENFG, 1, NotSerialized)
                {
                    Acquire (MUT0, 0x0FFF)
                    INDX = 0x5A
                    LDN = Arg0
                }

                Method (EXFG, 0, NotSerialized)
                {
                    INDX = 0xA5
                    Release (MUT0)
                }

                Name (KBFG, One)
                Name (MSFG, One)
                OperationRegion (WKBA, SystemIO, IOSB, 0x80)
                Field (WKBA, ByteAcc, NoLock, Preserve)
                {
                    WKS0,   8, 
                    WKS1,   8, 
                    WKE0,   8, 
                    WKE1,   8, 
                    CFG0,   8, 
                    CFG1,   8, 
                    WSMI,   8, 
                    Offset (0x08), 
                    WIRQ,   8, 
                    SWCT,   8, 
                    SWS0,   8, 
                    SWS1,   8, 
                    Offset (0x0E), 
                    O0S3,   8, 
                    O1S3,   8, 
                    O0S5,   8, 
                    O1S5,   8, 
                    P0S3,   8, 
                    P1S3,   8, 
                    P0S5,   8, 
                    P1S5,   8, 
                    KBWC,   4, 
                    MSWC,   3, 
                        ,   8, 
                    PSK0,   8, 
                    PSK1,   8, 
                    Offset (0x20), 
                    S0TY,   8, 
                    S1TY,   8, 
                    S2TY,   8, 
                    S3TY,   8, 
                    S4TY,   8, 
                    S5TY,   8, 
                    SLCF,   8, 
                    PCTL,   8
                }

                OperationRegion (PMEV, SystemIO, IOEB, 0x04)
                Field (PMEV, ByteAcc, NoLock, Preserve)
                {
                    PMSL,   8, 
                    PMSH,   8, 
                    PMEL,   8, 
                    PMEH,   8
                }

                OperationRegion (PMCN, SystemIO, IOCB, 0x02)
                Field (PMCN, ByteAcc, NoLock, Preserve)
                {
                    PMCL,   8, 
                    PMCH,   8
                }

                OperationRegion (GPEV, SystemIO, IOBB, 0x08)
                Field (GPEV, ByteAcc, NoLock, Preserve)
                {
                    GPS0,   8, 
                    GPS1,   8, 
                    Offset (0x04), 
                    GPR1,   1, 
                    GPR2,   1, 
                    GPKB,   1, 
                    GPMS,   1, 
                        ,   2, 
                    SFEV,   1
                }

                Method (PS2K._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    PMSH = 0xFF
                    GPS0 = 0xFF
                    If (!((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        If (Arg0)
                        {
                            KBFG = One
                        }
                        Else
                        {
                            KBFG = Zero
                        }
                    }
                }

                Method (PS2M._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    PMSH = 0xFF
                    GPS0 = 0xFF
                    If (!((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        If (Arg0)
                        {
                            MSFG = One
                        }
                        Else
                        {
                            MSFG = Zero
                        }
                    }
                }

                Method (SIOS, 1, NotSerialized)
                {
                    Debug = "SIOS"
                    If ((Arg0 == One))
                    {
                        KBWC = One
                        PSK0 = Zero
                        PSK1 = Zero
                        MSWC = One
                        GPKB = KBFG /* \_SB_.PCI0.SBRG.KBFG */
                        GPMS = MSFG /* \_SB_.PCI0.SBRG.MSFG */
                    }

                    PMSH = 0xFF
                    GPS0 = 0xFF
                }

                Method (SIOW, 1, NotSerialized)
                {
                    Debug = "SIOW"
                    PMSH = 0xFF
                    GPS0 = 0xFF
                    KBWC = Zero
                    MSWC = Zero
                    GPKB = Zero
                    GPMS = Zero
                }

                Method (SIOH, 0, NotSerialized)
                {
                    Debug = "SIOH"
                    If ((GPS0 & 0x08))
                    {
                        Notify (PS2M, 0x02) // Device Wake
                    }

                    If ((GPS0 & 0x04))
                    {
                        Notify (PS2K, 0x02) // Device Wake
                    }
                }

                OperationRegion (IOID, SystemIO, SPIO, 0x02)
                Field (IOID, ByteAcc, NoLock, Preserve)
                {
                    INDX,   8, 
                    DATA,   8
                }

                IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                    LDN,    8, 
                    Offset (0x23), 
                    OP23,   8, 
                    Offset (0x30), 
                    ACTR,   8, 
                    Offset (0x60), 
                    IOAH,   8, 
                    IOAL,   8, 
                    IOH2,   8, 
                    IOL2,   8, 
                    Offset (0x70), 
                    INTR,   8, 
                    Offset (0x74), 
                    DMCH,   8, 
                    Offset (0xF0), 
                    OPT0,   8, 
                    OPT1,   8, 
                    OPT2,   8
                }

                Method (CGLD, 1, NotSerialized)
                {
                    Return (DerefOf (DCAT [Arg0]))
                }

                Method (DSTA, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = ACTR /* \_SB_.PCI0.SBRG.ACTR */
                    EXFG ()
                    If ((Local0 == 0xFF))
                    {
                        Return (Zero)
                    }

                    Local0 &= One
                    IOST |= (Local0 << Arg0)
                    If (Local0)
                    {
                        Return (0x0F)
                    }
                    ElseIf (((One << Arg0) & IOST))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (DCNT, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local1 = (IOAH << 0x08)
                    Local1 |= IOAL
                    If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                    {
                        RDMA (Arg0, Arg1, Local1++)
                    }

                    ACTR = Arg1
                    RRIO (Arg0, Arg1, Local1, 0x08)
                    EXFG ()
                }

                Name (CRS1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y0C)
                    IRQNoFlags (_Y0D)
                        {}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y0E)
                        {}
                })
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y0C._MIN, IO11)  // _MIN: Minimum Base Address
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y0C._MAX, IO12)  // _MAX: Maximum Base Address
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y0C._LEN, LEN1)  // _LEN: Length
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y0D._INT, IRQM)  // _INT: Interrupts
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y0E._DMA, DMAM)  // _DMA: Direct Memory Access
                Name (CRS2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y0F)
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y10)
                    IRQNoFlags (_Y11)
                        {6}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y12)
                        {2}
                })
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y0F._MIN, IO21)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y0F._MAX, IO22)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y0F._LEN, LEN2)  // _LEN: Length
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y10._MIN, IO31)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y10._MAX, IO32)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y10._LEN, LEN3)  // _LEN: Length
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y11._INT, IRQE)  // _INT: Interrupts
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y12._DMA, DMAE)  // _DMA: Direct Memory Access
                Method (DCRS, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    IO11 = (IOAH << 0x08)
                    IO11 |= IOAL /* \_SB_.PCI0.SBRG.IO11 */
                    IO12 = IO11 /* \_SB_.PCI0.SBRG.IO11 */
                    Local0 = (FindSetRightBit (IO11) - One)
                    LEN1 = (One << Local0)
                    If (INTR)
                    {
                        IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.INTR */
                    }
                    Else
                    {
                        IRQM = Zero
                    }

                    If (((DMCH > 0x03) || (Arg1 == Zero)))
                    {
                        DMAM = Zero
                    }
                    Else
                    {
                        Local1 = (DMCH & 0x03)
                        DMAM = (One << Local1)
                    }

                    EXFG ()
                    Return (CRS1) /* \_SB_.PCI0.SBRG.CRS1 */
                }

                Method (DSRS, 2, NotSerialized)
                {
                    CreateWordField (Arg0, 0x02, IO11)
                    CreateWordField (Arg0, 0x09, IRQM)
                    CreateByteField (Arg0, 0x0C, DMAM)
                    ENFG (CGLD (Arg1))
                    Local1 = (IOAH << 0x08)
                    Local1 |= IOAL
                    RRIO (Arg1, Zero, Local1, 0x08)
                    RRIO (Arg1, One, IO11, 0x08)
                    IOAL = (IO11 & 0xFF)
                    IOAH = (IO11 >> 0x08)
                    If (IRQM)
                    {
                        FindSetRightBit (IRQM, Local0)
                        INTR = (Local0 - One)
                    }
                    Else
                    {
                        INTR = Zero
                    }

                    If (DMAM)
                    {
                        FindSetRightBit (DMAM, Local0)
                        DMCH = (Local0 - One)
                    }
                    Else
                    {
                        DMCH = 0x04
                    }

                    EXFG ()
                    DCNT (Arg1, One)
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y13)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.HPET._Y13._BAS, HPT)  // _BAS: Base Address
                        HPT = 0xFED00000
                        Return (CRS) /* \_SB_.PCI0.SBRG.HPET.CRS_ */
                    }
                }

                Device (^PCIE)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x11)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xE0000000,         // Address Base
                            0x10000000,         // Address Length
                            _Y14)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y14._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y14._LEN, LEN1)  // _LEN: Length
                        BAS1 = PCIB /* \PCIB */
                        LEN1 = PCIL /* \PCIL */
                        Return (CRS) /* \_SB_.PCI0.PCIE.CRS_ */
                    }
                }

                Device (OMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y15)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y16)
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y17)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y18)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (APIC)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y15._LEN, ML01)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y15._BAS, MB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y16._LEN, ML02)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y16._BAS, MB02)  // _BAS: Base Address
                            MB01 = 0xFEC00000
                            ML01 = 0x1000
                            MB02 = 0xFEE00000
                            ML02 = 0x1000
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y17._LEN, ML03)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y17._BAS, MB03)  // _BAS: Base Address
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y18._LEN, ML04)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y18._BAS, MB04)  // _BAS: Base Address
                            MB03 = 0xFEC00000
                            ML03 = 0x1000
                            MB04 = 0xFEE00000
                            ML04 = 0x1000
                        }

                        Local0 = (0x05 << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (CRS) /* \_SB_.PCI0.SBRG.OMSC.CRS_ */
                        }
                        Else
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.OMSC.CRS1 */
                        }
                    }
                }

                Device (^^RMEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x000A0000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y19)
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            _Y1A)
                        Memory32Fixed (ReadWrite,
                            0x00100000,         // Address Base
                            0x00000000,         // Address Length
                            _Y1B)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y1C)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.RMEM._Y19._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y19._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y1A._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y1A._LEN, LEN2)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y1B._LEN, LEN3)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y1C._BAS, BAS4)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y1C._LEN, LEN4)  // _LEN: Length
                        If (OSFL ()){}
                        Else
                        {
                            If (MG1B)
                            {
                                If ((MG1B > 0x000C0000))
                                {
                                    BAS1 = 0x000C0000
                                    LEN1 = (MG1B - BAS1) /* \_SB_.RMEM._CRS.BAS1 */
                                }
                            }
                            Else
                            {
                                BAS1 = 0x000C0000
                                LEN1 = 0x00020000
                            }

                            If (Local0 = (MG1B + MG1L) /* \MG1L */)
                            {
                                BAS2 = Local0
                                LEN2 = (0x00100000 - BAS2) /* \_SB_.RMEM._CRS.BAS2 */
                            }
                        }

                        LEN3 = (MG2B - 0x00100000)
                        BAS4 = MH1B /* \MH1B */
                        LEN4 = (Zero - BAS4) /* \_SB_.RMEM._CRS.BAS4 */
                        Return (CRS) /* \_SB_.RMEM.CRS_ */
                    }
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00B1,             // Range Minimum
                            0x00B1,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x040B,             // Range Minimum
                            0x040B,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0550,             // Range Minimum
                            0x0550,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C52,             // Range Minimum
                            0x0C52,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD2,             // Range Minimum
                            0x0CD2,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD4,             // Range Minimum
                            0x0CD4,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD6,             // Range Minimum
                            0x0CD6,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD8,             // Range Minimum
                            0x0CD8,             // Range Maximum
                            0x00,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1D)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y20)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y23)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y24)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1F)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1E)
                        IO (Decode16,
                            0x0900,             // Range Minimum
                            0x0900,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0910,             // Range Minimum
                            0x0910,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x00,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y22)
                        Memory32Fixed (ReadOnly,
                            0xFFB80000,         // Address Base
                            0x00080000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFEC10000,         // Address Base
                            0x00000020,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y1D._MIN, GP00)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y1D._MAX, GP01)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y1D._LEN, GP0L)  // _LEN: Length
                        GP00 = PMBS /* \PMBS */
                        GP01 = PMBS /* \PMBS */
                        GP0L = PMLN /* \PMLN */
                        If (SMBB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y1E._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y1E._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y1E._LEN, GP1L)  // _LEN: Length
                            GP10 = SMBB /* \SMBB */
                            GP11 = SMBB /* \SMBB */
                            GP1L = SMBL /* \SMBL */
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y1F._MIN, GPB0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y1F._MAX, GPB1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y1F._LEN, GPBL)  // _LEN: Length
                            GPB0 = SMB0 /* \SMB0 */
                            GPB1 = SMB0 /* \SMB0 */
                            GPBL = SMBM /* \SMBM */
                        }

                        If (GPBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y20._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y20._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y20._LEN, GP2L)  // _LEN: Length
                            GP20 = GPBS /* \GPBS */
                            GP21 = GPBS /* \GPBS */
                            GP2L = GPLN /* \GPLN */
                        }

                        Local0 = (One << 0x0A)
                        Local1 = (One << 0x0C)
                        Local0 = ((IOST & Local0) | (IOST & Local1))
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y21._LEN, KBL0)  // _LEN: Length
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y22._LEN, KBL1)  // _LEN: Length
                        If ((Local0 == Zero))
                        {
                            KBL0 = One
                            KBL1 = One
                        }

                        If ((OSNF () != Zero))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y23._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y23._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y23._LEN, GP3L)  // _LEN: Length
                            GP30 = 0x0CA2
                            GP31 = 0x0CA2
                            GP3L = 0x02
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y24._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y24._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y24._LEN, GP4L)  // _LEN: Length
                            GP40 = 0x0CA4
                            GP41 = 0x0CA4
                            GP4L = 0x02
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.RMSC.CRS_ */
                    }
                }

                Device (MI0)
                {
                    Name (_HID, EisaId ("IPI0001"))  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = Zero
                        If ((OSNF () == Zero))
                        {
                            Local0 = 0x0F
                        }

                        Return (Local0)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0CA2,             // Range Minimum
                            0x0CA2,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CA3,             // Range Minimum
                            0x0CA3,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Method (_IFT, 0, NotSerialized)  // _IFT: IPMI Interface Type
                    {
                        Return (One)
                    }

                    Method (_SRV, 0, NotSerialized)  // _SRV: IPMI Spec Revision
                    {
                        Return (0x0200)
                    }
                }

                Device (MI1)
                {
                    Name (_HID, EisaId ("HPQ000B"))  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = Zero
                        If ((OSNF () == Zero))
                        {
                            Local0 = 0x0F
                        }

                        Return (Local0)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0CA4,             // Range Minimum
                            0x0CA4,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CA5,             // Range Minimum
                            0x0CA5,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Method (_IFT, 0, NotSerialized)  // _IFT: IPMI Interface Type
                    {
                        Return (One)
                    }

                    Method (_SRV, 0, NotSerialized)  // _SRV: IPMI Spec Revision
                    {
                        Return (0x0200)
                    }
                }
            }

            Device (P0PC)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x04))
                }
            }

            Device (UHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC2)
            {
                Name (_ADR, 0x00120001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC3)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC5)
            {
                Name (_ADR, 0x00130001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC6)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC7)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                OperationRegion (SACS, PCI_Config, Zero, 0x40)
                Field (SACS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x24), 
                    STB5,   32
                }

                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                Field (BAR, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                        ,   2, 
                    SALP,   1
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                If ((STCL == 0x0101))
                {
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Device (PRID)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (PRIS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x120), 
                                    ,   7, 
                                PMBY,   1, 
                                Offset (0x128), 
                                PMS0,   4, 
                                Offset (0x129), 
                                PMS1,   4, 
                                Offset (0x220), 
                                    ,   7, 
                                PSBY,   1, 
                                Offset (0x228), 
                                PSS0,   4, 
                                Offset (0x229), 
                                PSS1,   4, 
                                Offset (0x2A0), 
                                    ,   7
                            }

                            If (((OSTY <= 0x15) && (OSTY >= 0x12)))
                            {
                                If (PMS1)
                                {
                                    Local0 = 0x32
                                    While (((PMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (PSS1)
                                {
                                    Local0 = 0x32
                                    While (((PSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            PRIS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            PRIS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (PRIS) /* \_SB_.PCI0.SATA.PRID.PRIS */
                        }

                        Device (P_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x128), 
                                    PMS0,   4, 
                                    Offset (0x129), 
                                    PMS1,   4
                                }

                                If (~(PMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x120), 
                                        ,   7, 
                                    PMBY,   1
                                }

                                Local0 = 0x32
                                While (((PMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D0.S12P */
                            }
                        }

                        Device (P_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x228), 
                                    PSS0,   4, 
                                    Offset (0x229), 
                                    PSS1,   4
                                }

                                If (~(PSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x220), 
                                        ,   7, 
                                    PSBY,   1
                                }

                                Local0 = 0x32
                                While (((PSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D1.S12P */
                            }
                        }
                    }

                    Device (SECD)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (SECS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x1A0), 
                                    ,   7, 
                                SMBY,   1, 
                                Offset (0x1A8), 
                                SMS0,   4, 
                                Offset (0x1A9), 
                                SMS1,   4, 
                                Offset (0x2A0), 
                                    ,   7, 
                                SSBY,   1, 
                                Offset (0x2A8), 
                                SSS0,   4, 
                                Offset (0x2A9), 
                                SSS1,   4, 
                                Offset (0x2AC)
                            }

                            If (((OSTY <= 0x15) && (OSTY >= 0x12)))
                            {
                                If (SMS1)
                                {
                                    Local0 = 0x32
                                    While (((SMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (SSS1)
                                {
                                    Local0 = 0x32
                                    While (((SSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            SECS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SECS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (SECS) /* \_SB_.PCI0.SATA.SECD.SECS */
                        }

                        Device (S_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A8), 
                                    SMS0,   4, 
                                    Offset (0x1A9), 
                                    SMS1,   4
                                }

                                If (~(SMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x1000)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A0), 
                                        ,   7, 
                                    SMBY,   1
                                }

                                Local0 = 0x32
                                While (((SMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D0.S12P */
                            }
                        }

                        Device (S_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A8), 
                                    SSS0,   4, 
                                    Offset (0x2A9), 
                                    SSS1,   4
                                }

                                If (~(SSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A0), 
                                        ,   7, 
                                    SSBY,   1
                                }

                                Local0 = 0x32
                                While (((SSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D1.S12P */
                            }
                        }
                    }
                }

                If ((STCL == 0x0106))
                {
                    Device (PRT0)
                    {
                        OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                        Field (BAR, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x120), 
                                ,   7, 
                            P0BY,   1, 
                            Offset (0x128), 
                            P0S0,   4, 
                            Offset (0x129), 
                            P0S1,   4
                        }

                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (~(P0S1 == Zero))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            If (P0S1)
                            {
                                Local0 = 0x32
                                While (((P0BY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.PRT0.S12P */
                        }
                    }

                    Device (PRT1)
                    {
                        OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                        Field (BAR, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x1A0), 
                                ,   7, 
                            P1BY,   1, 
                            Offset (0x1A8), 
                            P1S0,   4, 
                            Offset (0x1A9), 
                            P1S1,   4
                        }

                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (~(P1S1 == Zero))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            If (P1S1)
                            {
                                Local0 = 0x32
                                While (((P1BY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.PRT1.S12P */
                        }
                    }

                    Device (PRT2)
                    {
                        OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                        Field (BAR, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x220), 
                                ,   7, 
                            P2BY,   1, 
                            Offset (0x228), 
                            P2S0,   4, 
                            Offset (0x229), 
                            P2S1,   4
                        }

                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (~(P2S1 == Zero))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            If (P2S1)
                            {
                                Local0 = 0x32
                                While (((P2BY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.PRT2.S12P */
                        }
                    }

                    Device (PRT3)
                    {
                        OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                        Field (BAR, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x2A0), 
                                ,   7, 
                            P3BY,   1, 
                            Offset (0x2A8), 
                            P3S0,   4, 
                            Offset (0x2A9), 
                            P3S1,   4
                        }

                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (~(P3S1 == Zero))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            If (P3S1)
                            {
                                Local0 = 0x32
                                While (((P3BY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.PRT3.S12P */
                        }
                    }

                    Device (PRT4)
                    {
                        OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                        Field (BAR, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x320), 
                                ,   7, 
                            P4BY,   1, 
                            Offset (0x328), 
                            P4S0,   4, 
                            Offset (0x329), 
                            P4S1,   4
                        }

                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (~(P4S1 == Zero))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            If (P4S1)
                            {
                                Local0 = 0x32
                                While (((P4BY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.PRT4.S12P */
                        }
                    }

                    Device (PRT5)
                    {
                        OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                        Field (BAR, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x3A0), 
                                ,   7, 
                            P5BY,   1, 
                            Offset (0x3A8), 
                            P5S0,   4, 
                            Offset (0x3A9), 
                            P5S1,   4
                        }

                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (~(P5S1 == Zero))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            If (P5S1)
                            {
                                Local0 = 0x32
                                While (((P5BY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.PRT5.S12P */
                        }
                    }
                }
            }

            Device (PC02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12) /* \_SB_.AR12 */
                    }

                    Return (PR12) /* \_SB_.PR12 */
                }
            }

            Device (PC03)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (PC04)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PR14) /* \_SB_.PR14 */
                }
            }

            Device (PC05)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (PC06)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR16) /* \_SB_.AR16 */
                    }

                    Return (PR16) /* \_SB_.PR16 */
                }
            }

            Device (PC07)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (PC09)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (PC0A)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1A) /* \_SB_.AR1A */
                    }

                    Return (PR1A) /* \_SB_.PR1A */
                }
            }

            Device (PC0B)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1B) /* \_SB_.AR1B */
                    }

                    Return (PR1B) /* \_SB_.PR1B */
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.SBAZ, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.P0PC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.UHC1, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC2, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC3, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC5, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC6, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC7, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.PC02, 0x02) // Device Wake
                Notify (\_SB.PCI0.PC03, 0x02) // Device Wake
                Notify (\_SB.PCI0.PC04, 0x02) // Device Wake
                Notify (\_SB.PCI0.PC05, 0x02) // Device Wake
                Notify (\_SB.PCI0.PC06, 0x02) // Device Wake
                Notify (\_SB.PCI0.PC07, 0x02) // Device Wake
                Notify (\_SB.PCI0.PC09, 0x02) // Device Wake
                Notify (\_SB.PCI0.PC0A, 0x02) // Device Wake
                Notify (\_SB.PCI0.PC0B, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRS,   8, 
            Offset (0x09), 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (IRQC, 0, NotSerialized)
        {
            PIRA = Zero
            PIRB = Zero
            PIRC = Zero
            PIRD = Zero
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = Zero
            PIRF = Zero
            PIRG = Zero
            PIRH = Zero
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, Zero)
        Name (XNPT, One)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == Ones))
            {
                Return (Zero)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (One)
                }

                Return (Zero)
            }
        }
    }

    If (OSCF)
    {
        Scope (_SB.PCI0)
        {
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, Zero, CDW1)
                    CreateDWordField (Arg3, 0x04, CDW2)
                    CreateDWordField (Arg3, 0x08, CDW3)
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)){}
                        If ((CTRL & 0x04)){}
                        If ((CTRL & 0x10)){}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }
        }
    }

    Scope (_SB.PCI0.PC02)
    {
        Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
        {
            0x10, 
            0x20, 
            Zero, 
            Zero
        })
        Device (D0F0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_SUN, One)  // _SUN: Slot User Number
        }
    }

    Scope (_SB.PCI0.PC0B)
    {
        Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
        {
            0x10, 
            0x20, 
            Zero, 
            Zero
        })
        Device (D0F0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_SUN, 0x02)  // _SUN: Slot User Number
        }
    }

    Method (NPTS, 1, NotSerialized)
    {
    }

    Method (NWAK, 1, NotSerialized)
    {
    }

    Method (NB2S, 1, NotSerialized)
    {
    }

    Method (NB2W, 1, NotSerialized)
    {
    }

    Scope (_SB)
    {
        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            If ((Arg0 == ToUUID ("ed855e0c-6c90-47bf-a62a-26de0fc5ad5c") /* Unknown UUID */))
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                SUPP = CDW2 /* \_SB_._OSC.CDW2 */
                CTRL = CDW3 /* \_SB_._OSC.CDW3 */
                If ((SUPP & One))
                {
                    Return (Arg3)
                }

                Return ((SUPP | 0x04))
            }
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Name (CRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y25, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y26, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y27, AddressRangeMemory, TypeStatic)
            })
            CreateDWordField (CRS, \_SB.PCI0._Y25._MIN, MIN5)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y25._MAX, MAX5)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y25._LEN, LEN5)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y26._MIN, MIN6)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y26._MAX, MAX6)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y26._LEN, LEN6)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y27._MIN, MIN7)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y27._MAX, MAX7)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y27._LEN, LEN7)  // _LEN: Length
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = MG1L /* \MG1L */
                If (Local0)
                {
                    MIN5 = MG1B /* \MG1B */
                    LEN5 = MG1L /* \MG1L */
                    MAX5 = (MIN5 + Local0--)
                }

                MIN6 = MG2B /* \MG2B */
                LEN6 = MG2L /* \MG2L */
                Local0 = MG2L /* \MG2L */
                MAX6 = (MIN6 + Local0--)
                MIN7 = MG3B /* \MG3B */
                LEN7 = MG3L /* \MG3L */
                Local0 = MG3L /* \MG3L */
                MAX7 = (MIN7 + Local0--)
                Return (CRS) /* \_SB_.PCI0.CRS_ */
            }
        }
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        PTS (Arg0)
        WAKP [Zero] = Zero
        WAKP [One] = Zero
        If (((Arg0 == 0x04) && (OSFL () == 0x02)))
        {
            Sleep (0x0BB8)
        }

        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        OSTP = OSYS ()
        AAXB = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }

        Return (WAKP) /* \WAKP */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
        }
    }

    Scope (_SB.PCI0)
    {
        OperationRegion (TVID, SystemMemory, 0xFED40F00, 0x02)
        Field (TVID, WordAcc, NoLock, Preserve)
        {
            VIDT,   16
        }
    }

    Device (_SB.PCI0.SBRG.TPM)
    {
        Name (_HID, EisaId ("IFX0102"))  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_UID, One)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            IO (Decode16,
                0x004E,             // Range Minimum
                0x004E,             // Range Maximum
                0x01,               // Alignment
                0x02,               // Length
                )
            IO (Decode16,
                0x4700,             // Range Minimum
                0x4700,             // Range Maximum
                0x01,               // Alignment
                0x0C,               // Length
                )
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (TPMF)
            {
                If ((VIDT != 0x8086))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Device (_SB.PCI0.ITPM)
    {
        Name (_HID, "INTC0102")  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_UID, One)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (TPMF)
            {
                If ((VIDT == 0x8086))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.SBRG.TPM)
    {
        Name (TAAX, Zero)
        OperationRegion (MIPT, SystemIO, SMIT, One)
        Field (MIPT, ByteAcc, NoLock, Preserve)
        {
            PSMI,   8
        }

        Name (PPI1, Package (0x02)
        {
            Zero, 
            Zero
        })
        Name (PPI2, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        Name (MBUF, Buffer (0x04){})
        CreateByteField (MBUF, Zero, BUF0)
        CreateByteField (MBUF, One, BUF1)
        CreateByteField (MBUF, 0x02, BUF2)
        CreateByteField (MBUF, 0x03, BUF3)
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (TTT0, Zero)
                TTT0 = ToInteger (Arg2)
                If ((TTT0 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             // .
                    })
                }
                ElseIf ((TTT0 == One))
                {
                    Return ("1.0")
                }
                ElseIf ((TTT0 == 0x02))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (Zero)
                }
                ElseIf ((TTT0 == 0x03))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0x0F
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    PPI1 [Zero] = Zero
                    PPI1 [One] = Local3
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (PPI1) /* \_SB_.PCI0.SBRG.TPM_.PPI1 */
                }
                ElseIf ((TTT0 == 0x04))
                {
                    Return (0x02)
                }
                ElseIf ((TTT0 == 0x05))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = (BUF2 >> 0x04)
                    BUF0 = CMER /* \CMER */
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local6 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    Local4 = (CMER + One)
                    BUF0 = Local4
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local7 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    Local2 = (Local7 * 0x0100)
                    Local2 += Local6
                    PPI2 [Zero] = Zero
                    PPI2 [One] = Local3
                    If ((Local2 == 0xFFF0))
                    {
                        PPI2 [0x02] = 0xFFFFFFF0
                    }
                    ElseIf ((Local2 == 0xFFF1))
                    {
                        PPI2 [0x02] = 0xFFFFFFF1
                    }
                    Else
                    {
                        PPI2 [0x02] = Local2
                    }

                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (PPI2) /* \_SB_.PCI0.SBRG.TPM_.PPI2 */
                }
                ElseIf ((TTT0 == 0x06))
                {
                    Return (Zero)
                }
                Else
                {
                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Name (TTT1, Zero)
                TTT1 = ToInteger (Arg2)
                If ((TTT1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                ElseIf ((TTT1 == One))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMOR /* \CMOR */
                    BUF1 = 0xFE
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x0BB8)
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (Zero)
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.ITPM)
    {
        Name (TAAX, Zero)
        OperationRegion (MIPT, SystemIO, SMIT, One)
        Field (MIPT, ByteAcc, NoLock, Preserve)
        {
            PSMI,   8
        }

        Name (PPI1, Package (0x02)
        {
            Zero, 
            Zero
        })
        Name (PPI2, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        Name (MBUF, Buffer (0x04){})
        CreateByteField (MBUF, Zero, BUF0)
        CreateByteField (MBUF, One, BUF1)
        CreateByteField (MBUF, 0x02, BUF2)
        CreateByteField (MBUF, 0x03, BUF3)
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (TTT0, Zero)
                TTT0 = ToInteger (Arg2)
                If ((TTT0 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             // .
                    })
                }
                ElseIf ((TTT0 == One))
                {
                    Return ("1.0")
                }
                ElseIf ((TTT0 == 0x02))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (Zero)
                }
                ElseIf ((TTT0 == 0x03))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0x0F
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    PPI1 [Zero] = Zero
                    PPI1 [One] = Local3
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (PPI1) /* \_SB_.PCI0.ITPM.PPI1 */
                }
                ElseIf ((TTT0 == 0x04))
                {
                    Return (0x02)
                }
                ElseIf ((TTT0 == 0x05))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = (BUF2 >> 0x04)
                    BUF0 = CMER /* \CMER */
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local6 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    Local4 = (CMER + One)
                    BUF0 = Local4
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local7 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    Local2 = (Local7 * 0x0100)
                    Local2 += Local6
                    PPI2 [Zero] = Zero
                    PPI2 [One] = Local3
                    If ((Local2 == 0xFFF0))
                    {
                        PPI2 [0x02] = 0xFFFFFFF0
                    }
                    ElseIf ((Local2 == 0xFFF1))
                    {
                        PPI2 [0x02] = 0xFFFFFFF1
                    }
                    Else
                    {
                        PPI2 [0x02] = Local2
                    }

                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (PPI2) /* \_SB_.PCI0.ITPM.PPI2 */
                }
                ElseIf ((TTT0 == 0x06))
                {
                    Return (Zero)
                }
                Else
                {
                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Name (TTT1, Zero)
                TTT1 = ToInteger (Arg2)
                If ((TTT1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                ElseIf ((TTT1 == One))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMOR /* \CMOR */
                    BUF1 = 0xFE
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x0BB8)
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (Zero)
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x04, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            NPTS (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.SBRG.EPTS (Arg0)
            NB2S (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        NWAK (Arg0)
        SWAK (Arg0)
        \_SB.PCI0.SBRG.EWAK (Arg0)
        NB2W (Arg0)
    }
}



EINJ
----
[000h 0000   4]                    Signature : "EINJ"    [Error Injection Table]
[004h 0004   4]                 Table Length : 00000130
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 77
[00Ah 0010   6]                       Oem ID : "HP   "
[010h 0016   8]                 Oem Table ID : "HP__EINJ"
[018h 0024   4]                 Oem Revision : 20120202
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]      Injection Header Length : 0000000C
[028h 0040   1]                        Flags : 00
[029h 0041   3]                     Reserved : 000000
[02Ch 0044   4]        Injection Entry Count : 00000008

[030h 0048   1]                       Action : 00 [Begin Operation]
[031h 0049   1]                  Instruction : 03 [Write Register Value]
[032h 0050   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[033h 0051   1]                     Reserved : 00

[034h 0052  12]              Register Region : [Generic Address Structure]
[034h 0052   1]                     Space ID : 00 [SystemMemory]
[035h 0053   1]                    Bit Width : 08
[036h 0054   1]                   Bit Offset : 00
[037h 0055   1]         Encoded Access Width : 01 [Byte Access:8]
[038h 0056   8]                      Address : 00000000BFDD60C0

[040h 0064   8]                        Value : 0000000000000000
[048h 0072   8]                         Mask : 00000000000000FF

[050h 0080   1]                       Action : 01 [Get Trigger Table]
[051h 0081   1]                  Instruction : 00 [Read Register]
[052h 0082   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[053h 0083   1]                     Reserved : 00

[054h 0084  12]              Register Region : [Generic Address Structure]
[054h 0084   1]                     Space ID : 00 [SystemMemory]
[055h 0085   1]                    Bit Width : 40
[056h 0086   1]                   Bit Offset : 00
[057h 0087   1]         Encoded Access Width : 04 [QWord Access:64]
[058h 0088   8]                      Address : 00000000BFDD60C2

[060h 0096   8]                        Value : 0000000000000000
[068h 0104   8]                         Mask : FFFFFFFFFFFFFFFF

[070h 0112   1]                       Action : 02 [Set Error Type]
[071h 0113   1]                  Instruction : 02 [Write Register]
[072h 0114   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[073h 0115   1]                     Reserved : 00

[074h 0116  12]              Register Region : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 20
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 03 [DWord Access:32]
[078h 0120   8]                      Address : 00000000BFDD60CA

[080h 0128   8]                        Value : 0000000000000000
[088h 0136   8]                         Mask : 00000000FFFFFFFF

[090h 0144   1]                       Action : 03 [Get Error Type]
[091h 0145   1]                  Instruction : 00 [Read Register]
[092h 0146   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[093h 0147   1]                     Reserved : 00

[094h 0148  12]              Register Region : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 03 [DWord Access:32]
[098h 0152   8]                      Address : 00000000BFDD60D0

[0A0h 0160   8]                        Value : 0000000000000000
[0A8h 0168   8]                         Mask : 00000000FFFFFFFF

[0B0h 0176   1]                       Action : 04 [End Operation]
[0B1h 0177   1]                  Instruction : 03 [Write Register Value]
[0B2h 0178   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0B3h 0179   1]                     Reserved : 00

[0B4h 0180  12]              Register Region : [Generic Address Structure]
[0B4h 0180   1]                     Space ID : 00 [SystemMemory]
[0B5h 0181   1]                    Bit Width : 10
[0B6h 0182   1]                   Bit Offset : 00
[0B7h 0183   1]         Encoded Access Width : 02 [Word Access:16]
[0B8h 0184   8]                      Address : 0000000000000000

[0C0h 0192   8]                        Value : 0000000000000000
[0C8h 0200   8]                         Mask : 000000000000FFFF

[0D0h 0208   1]                       Action : 05 [Execute Operation]
[0D1h 0209   1]                  Instruction : 03 [Write Register Value]
[0D2h 0210   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0D3h 0211   1]                     Reserved : 00

[0D4h 0212  12]              Register Region : [Generic Address Structure]
[0D4h 0212   1]                     Space ID : 01 [SystemIO]
[0D5h 0213   1]                    Bit Width : 08
[0D6h 0214   1]                   Bit Offset : 00
[0D7h 0215   1]         Encoded Access Width : 01 [Byte Access:8]
[0D8h 0216   8]                      Address : 00000000000000B0

[0E0h 0224   8]                        Value : 0000000000000075
[0E8h 0232   8]                         Mask : 00000000000000FF

[0F0h 0240   1]                       Action : 06 [Check Busy Status]
[0F1h 0241   1]                  Instruction : 01 [Read Register Value]
[0F2h 0242   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0F3h 0243   1]                     Reserved : 00

[0F4h 0244  12]              Register Region : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 01 [Byte Access:8]
[0F8h 0248   8]                      Address : 00000000BFDD60CE

[100h 0256   8]                        Value : 0000000000000001
[108h 0264   8]                         Mask : 0000000000000001

[110h 0272   1]                       Action : 07 [Get Command Status]
[111h 0273   1]                  Instruction : 00 [Read Register]
[112h 0274   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[113h 0275   1]                     Reserved : 00

[114h 0276  12]              Register Region : [Generic Address Structure]
[114h 0276   1]                     Space ID : 00 [SystemMemory]
[115h 0277   1]                    Bit Width : 10
[116h 0278   1]                   Bit Offset : 00
[117h 0279   1]         Encoded Access Width : 02 [Word Access:16]
[118h 0280   8]                      Address : 00000000BFDD60CE

[120h 0288   8]                        Value : 0000000000000000
[128h 0296   8]                         Mask : 000000000000FFFE

Raw Table Data: Length 304 (0x130)

    0000: 45 49 4E 4A 30 01 00 00 01 77 48 50 20 20 20 00  // EINJ0....wHP   .
    0010: 48 50 5F 5F 45 49 4E 4A 02 02 12 20 4D 53 46 54  // HP__EINJ... MSFT
    0020: 97 00 00 00 0C 00 00 00 00 00 00 00 08 00 00 00  // ................
    0030: 00 03 00 00 00 08 00 01 C0 60 DD BF 00 00 00 00  // .........`......
    0040: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0050: 01 00 00 00 00 40 00 04 C2 60 DD BF 00 00 00 00  // .....@...`......
    0060: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0070: 02 02 00 00 00 20 00 03 CA 60 DD BF 00 00 00 00  // ..... ...`......
    0080: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0090: 03 00 00 00 00 20 00 03 D0 60 DD BF 00 00 00 00  // ..... ...`......
    00A0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    00B0: 04 03 00 00 00 10 00 02 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00  // ................
    00D0: 05 03 00 00 01 08 00 01 B0 00 00 00 00 00 00 00  // ................
    00E0: 75 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // u...............
    00F0: 06 01 00 00 00 08 00 01 CE 60 DD BF 00 00 00 00  // .........`......
    0100: 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    0110: 07 00 00 00 00 10 00 02 CE 60 DD BF 00 00 00 00  // .........`......
    0120: 00 00 00 00 00 00 00 00 FE FF 00 00 00 00 00 00  // ................


ERST
----
[000h 0000   4]                    Signature : "ERST"    [Error Record Serialization Table]
[004h 0004   4]                 Table Length : 000001B0
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0C
[00Ah 0010   6]                       Oem ID : "HP   "
[010h 0016   8]                 Oem Table ID : "HP__ERST"
[018h 0024   4]                 Oem Revision : 20120202
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]  Serialization Header Length : 0000000C
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   4]      Instruction Entry Count : 0000000C

[030h 0048   1]                       Action : 00 [Begin Write Operation]
[031h 0049   1]                  Instruction : 03 [Write Register Value]
[032h 0050   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[033h 0051   1]                     Reserved : 00

[034h 0052  12]              Register Region : [Generic Address Structure]
[034h 0052   1]                     Space ID : 00 [SystemMemory]
[035h 0053   1]                    Bit Width : 08
[036h 0054   1]                   Bit Offset : 00
[037h 0055   1]         Encoded Access Width : 01 [Byte Access:8]
[038h 0056   8]                      Address : 00000000BFDD60E0

[040h 0064   8]                        Value : 0000000000000071
[048h 0072   8]                         Mask : 00000000000000FF

[050h 0080   1]                       Action : 01 [Begin Read Operation]
[051h 0081   1]                  Instruction : 03 [Write Register Value]
[052h 0082   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[053h 0083   1]                     Reserved : 00

[054h 0084  12]              Register Region : [Generic Address Structure]
[054h 0084   1]                     Space ID : 00 [SystemMemory]
[055h 0085   1]                    Bit Width : 08
[056h 0086   1]                   Bit Offset : 00
[057h 0087   1]         Encoded Access Width : 01 [Byte Access:8]
[058h 0088   8]                      Address : 00000000BFDD60E0

[060h 0096   8]                        Value : 0000000000000072
[068h 0104   8]                         Mask : 00000000000000FF

[070h 0112   1]                       Action : 02 [Begin Clear Operation]
[071h 0113   1]                  Instruction : 03 [Write Register Value]
[072h 0114   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[073h 0115   1]                     Reserved : 00

[074h 0116  12]              Register Region : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000BFDD60E0

[080h 0128   8]                        Value : 0000000000000073
[088h 0136   8]                         Mask : 00000000000000FF

[090h 0144   1]                       Action : 03 [End Operation]
[091h 0145   1]                  Instruction : 03 [Write Register Value]
[092h 0146   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[093h 0147   1]                     Reserved : 00

[094h 0148  12]              Register Region : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 08
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 01 [Byte Access:8]
[098h 0152   8]                      Address : 00000000BFDD60E1

[0A0h 0160   8]                        Value : 0000000000000074
[0A8h 0168   8]                         Mask : 00000000000000FF

[0B0h 0176   1]                       Action : 04 [Set Record Offset]
[0B1h 0177   1]                  Instruction : 02 [Write Register]
[0B2h 0178   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0B3h 0179   1]                     Reserved : 00

[0B4h 0180  12]              Register Region : [Generic Address Structure]
[0B4h 0180   1]                     Space ID : 00 [SystemMemory]
[0B5h 0181   1]                    Bit Width : 20
[0B6h 0182   1]                   Bit Offset : 00
[0B7h 0183   1]         Encoded Access Width : 03 [DWord Access:32]
[0B8h 0184   8]                      Address : 00000000BFDD60E2

[0C0h 0192   8]                        Value : 0000000000000000
[0C8h 0200   8]                         Mask : 00000000FFFFFFFF

[0D0h 0208   1]                       Action : 05 [Execute Operation]
[0D1h 0209   1]                  Instruction : 03 [Write Register Value]
[0D2h 0210   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0D3h 0211   1]                     Reserved : 00

[0D4h 0212  12]              Register Region : [Generic Address Structure]
[0D4h 0212   1]                     Space ID : 01 [SystemIO]
[0D5h 0213   1]                    Bit Width : 08
[0D6h 0214   1]                   Bit Offset : 00
[0D7h 0215   1]         Encoded Access Width : 01 [Byte Access:8]
[0D8h 0216   8]                      Address : 00000000000000B0

[0E0h 0224   8]                        Value : 0000000000000070
[0E8h 0232   8]                         Mask : 00000000000000FF

[0F0h 0240   1]                       Action : 06 [Check Busy Status]
[0F1h 0241   1]                  Instruction : 01 [Read Register Value]
[0F2h 0242   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0F3h 0243   1]                     Reserved : 00

[0F4h 0244  12]              Register Region : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 01 [Byte Access:8]
[0F8h 0248   8]                      Address : 00000000BFDD60E6

[100h 0256   8]                        Value : 0000000000000001
[108h 0264   8]                         Mask : 00000000000000FF

[110h 0272   1]                       Action : 07 [Get Command Status]
[111h 0273   1]                  Instruction : 00 [Read Register]
[112h 0274   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[113h 0275   1]                     Reserved : 00

[114h 0276  12]              Register Region : [Generic Address Structure]
[114h 0276   1]                     Space ID : 00 [SystemMemory]
[115h 0277   1]                    Bit Width : 08
[116h 0278   1]                   Bit Offset : 00
[117h 0279   1]         Encoded Access Width : 01 [Byte Access:8]
[118h 0280   8]                      Address : 00000000BFDD60E8

[120h 0288   8]                        Value : 0000000000000000
[128h 0296   8]                         Mask : 00000000000000FF

[130h 0304   1]                       Action : 08 [Get Record Identifier]
[131h 0305   1]                  Instruction : 00 [Read Register]
[132h 0306   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[133h 0307   1]                     Reserved : 00

[134h 0308  12]              Register Region : [Generic Address Structure]
[134h 0308   1]                     Space ID : 00 [SystemMemory]
[135h 0309   1]                    Bit Width : 40
[136h 0310   1]                   Bit Offset : 00
[137h 0311   1]         Encoded Access Width : 04 [QWord Access:64]
[138h 0312   8]                      Address : 00000000BFDD60F0

[140h 0320   8]                        Value : 0000000000000000
[148h 0328   8]                         Mask : FFFFFFFFFFFFFFFF

[150h 0336   1]                       Action : 09 [Set Record Identifier]
[151h 0337   1]                  Instruction : 02 [Write Register]
[152h 0338   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[153h 0339   1]                     Reserved : 00

[154h 0340  12]              Register Region : [Generic Address Structure]
[154h 0340   1]                     Space ID : 00 [SystemMemory]
[155h 0341   1]                    Bit Width : 40
[156h 0342   1]                   Bit Offset : 00
[157h 0343   1]         Encoded Access Width : 04 [QWord Access:64]
[158h 0344   8]                      Address : 00000000BFDD60F8

[160h 0352   8]                        Value : 0000000000000000
[168h 0360   8]                         Mask : FFFFFFFFFFFFFFFF

[170h 0368   1]                       Action : 0A [Get Record Count]
[171h 0369   1]                  Instruction : 00 [Read Register]
[172h 0370   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[173h 0371   1]                     Reserved : 00

[174h 0372  12]              Register Region : [Generic Address Structure]
[174h 0372   1]                     Space ID : 00 [SystemMemory]
[175h 0373   1]                    Bit Width : 10
[176h 0374   1]                   Bit Offset : 00
[177h 0375   1]         Encoded Access Width : 02 [Word Access:16]
[178h 0376   8]                      Address : 00000000BFDD60EA

[180h 0384   8]                        Value : 0000000000000000
[188h 0392   8]                         Mask : 000000000000FFFF

[190h 0400   1]                       Action : 0B [Begin Dummy Write]
[191h 0401   1]                  Instruction : 03 [Write Register Value]
[192h 0402   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[193h 0403   1]                     Reserved : 00

[194h 0404  12]              Register Region : [Generic Address Structure]
[194h 0404   1]                     Space ID : 00 [SystemMemory]
[195h 0405   1]                    Bit Width : 08
[196h 0406   1]                   Bit Offset : 00
[197h 0407   1]         Encoded Access Width : 01 [Byte Access:8]
[198h 0408   8]                      Address : 00000000BFDD60E0

[1A0h 0416   8]                        Value : 0000000000000076
[1A8h 0424   8]                         Mask : 00000000000000FF

Raw Table Data: Length 432 (0x1B0)

    0000: 45 52 53 54 B0 01 00 00 01 0C 48 50 20 20 20 00  // ERST......HP   .
    0010: 48 50 5F 5F 45 52 53 54 02 02 12 20 4D 53 46 54  // HP__ERST... MSFT
    0020: 97 00 00 00 0C 00 00 00 00 00 00 00 0C 00 00 00  // ................
    0030: 00 03 00 00 00 08 00 01 E0 60 DD BF 00 00 00 00  // .........`......
    0040: 71 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // q...............
    0050: 01 03 00 00 00 08 00 01 E0 60 DD BF 00 00 00 00  // .........`......
    0060: 72 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // r...............
    0070: 02 03 00 00 00 08 00 01 E0 60 DD BF 00 00 00 00  // .........`......
    0080: 73 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // s...............
    0090: 03 03 00 00 00 08 00 01 E1 60 DD BF 00 00 00 00  // .........`......
    00A0: 74 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // t...............
    00B0: 04 02 00 00 00 20 00 03 E2 60 DD BF 00 00 00 00  // ..... ...`......
    00C0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    00D0: 05 03 00 00 01 08 00 01 B0 00 00 00 00 00 00 00  // ................
    00E0: 70 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // p...............
    00F0: 06 01 00 00 00 08 00 01 E6 60 DD BF 00 00 00 00  // .........`......
    0100: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0110: 07 00 00 00 00 08 00 01 E8 60 DD BF 00 00 00 00  // .........`......
    0120: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0130: 08 00 00 00 00 40 00 04 F0 60 DD BF 00 00 00 00  // .....@...`......
    0140: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0150: 09 02 00 00 00 40 00 04 F8 60 DD BF 00 00 00 00  // .....@...`......
    0160: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0170: 0A 00 00 00 00 10 00 02 EA 60 DD BF 00 00 00 00  // .........`......
    0180: 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00  // ................
    0190: 0B 03 00 00 00 08 00 01 E0 60 DD BF 00 00 00 00  // .........`......
    01A0: 76 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // v...............


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : FF
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 20120202
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]                 FACS Address : BFDC2000
[028h 0040   4]                 DSDT Address : BFDB0750
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 04 [Enterprise Server]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : E1
[035h 0053   1]           ACPI Disable Value : 1E
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : E2
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : E3
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000000A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 0E
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000BFDC2000
[08Ch 0140   8]                 DSDT Address : 00000000BFDB0750
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 20
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 20
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 20
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 04 FF 48 50 20 20 20 20  // FACP......HP    
    0010: 50 72 6F 4C 69 61 6E 74 02 02 12 20 4D 53 46 54  // ProLiant... MSFT
    0020: 97 00 00 00 00 20 DC BF 50 07 DB BF 01 04 09 00  // ..... ..P.......
    0030: B0 00 00 00 E1 1E 00 E2 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 E3  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 03 00 00  // e...........2...
    0070: A5 00 00 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 0E 00 00 00 00 20 DC BF 00 00 00 00 50 07 DB BF  // ..... ......P...
    0090: 00 00 00 00 01 20 00 00 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 20 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // . ..............
    00B0: 04 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 00 08 08 00 00 00 00 00 00 01 20 00 00  // . ........... ..
    00E0: 20 08 00 00 00 00 00 00 01 20 00 00 00 00 00 00  //  ........ ......
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HEST
----
[000h 0000   4]                    Signature : "HEST"    [Hardware Error Source Table]
[004h 0004   4]                 Table Length : 000000A8
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1D
[00Ah 0010   6]                       Oem ID : "HP   "
[010h 0016   8]                 Oem Table ID : "HP__HEST"
[018h 0024   4]                 Oem Revision : 20120202
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]           Error Source Count : 00000002

[028h 0040   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[02Ah 0042   2]                    Source Id : 0000
[02Ch 0044   2]            Related Source Id : FFFF
[02Eh 0046   1]                     Reserved : 03
[02Fh 0047   1]                      Enabled : 01
[030h 0048   4]       Records To Preallocate : 00000001
[034h 0052   4]      Max Sections Per Record : 00000001
[038h 0056   4]          Max Raw Data Length : 0000009D

[03Ch 0060  12]         Error Status Address : [Generic Address Structure]
[03Ch 0060   1]                     Space ID : 00 [SystemMemory]
[03Dh 0061   1]                    Bit Width : 20
[03Eh 0062   1]                   Bit Offset : 00
[03Fh 0063   1]         Encoded Access Width : 01 [Byte Access:8]
[040h 0064   8]                      Address : 00000000BFDD6110

[048h 0072  28]                       Notify : [Hardware Error Notification Structure]
[048h 0072   1]                  Notify Type : 04 [NMI]
[049h 0073   1]                Notify Length : 1C
[04Ah 0074   2]   Configuration Write Enable : 0000
[04Ch 0076   4]                 PollInterval : 00000000
[050h 0080   4]                       Vector : 00000002
[054h 0084   4]      Polling Threshold Value : 00000000
[058h 0088   4]     Polling Threshold Window : 00000000
[05Ch 0092   4]        Error Threshold Value : 00000000
[060h 0096   4]       Error Threshold Window : 00000000

[064h 0100   4]    Error Status Block Length : 0000009D

[068h 0104   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[06Ah 0106   2]                    Source Id : 0001
[06Ch 0108   2]            Related Source Id : FFFF
[06Eh 0110   1]                     Reserved : 03
[06Fh 0111   1]                      Enabled : 01
[070h 0112   4]       Records To Preallocate : 00000001
[074h 0116   4]      Max Sections Per Record : 00000001
[078h 0120   4]          Max Raw Data Length : 0000009D

[07Ch 0124  12]         Error Status Address : [Generic Address Structure]
[07Ch 0124   1]                     Space ID : 00 [SystemMemory]
[07Dh 0125   1]                    Bit Width : 20
[07Eh 0126   1]                   Bit Offset : 00
[07Fh 0127   1]         Encoded Access Width : 01 [Byte Access:8]
[080h 0128   8]                      Address : 00000000BFDD6320

[088h 0136  28]                       Notify : [Hardware Error Notification Structure]
[088h 0136   1]                  Notify Type : 00 [Polled]
[089h 0137   1]                Notify Length : 1C
[08Ah 0138   2]   Configuration Write Enable : 003E
[08Ch 0140   4]                 PollInterval : 00000000
[090h 0144   4]                       Vector : 00000002
[094h 0148   4]      Polling Threshold Value : 00000000
[098h 0152   4]     Polling Threshold Window : 00000000
[09Ch 0156   4]        Error Threshold Value : 00000000
[0A0h 0160   4]       Error Threshold Window : 00000000

[0A4h 0164   4]    Error Status Block Length : 0000009D

Raw Table Data: Length 168 (0xA8)

    0000: 48 45 53 54 A8 00 00 00 01 1D 48 50 20 20 20 00  // HEST......HP   .
    0010: 48 50 5F 5F 48 45 53 54 02 02 12 20 4D 53 46 54  // HP__HEST... MSFT
    0020: 97 00 00 00 02 00 00 00 09 00 00 00 FF FF 03 01  // ................
    0030: 01 00 00 00 01 00 00 00 9D 00 00 00 00 20 00 01  // ............. ..
    0040: 10 61 DD BF 00 00 00 00 04 1C 00 00 00 00 00 00  // .a..............
    0050: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 9D 00 00 00 09 00 01 00 FF FF 03 01  // ................
    0070: 01 00 00 00 01 00 00 00 9D 00 00 00 00 20 00 01  // ............. ..
    0080: 20 63 DD BF 00 00 00 00 00 1C 3E 00 00 00 00 00  //  c........>.....
    0090: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 9D 00 00 00                          // ........


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DF
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 20120202
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]            Hardware Block ID : 00008300

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 02
[035h 0053   2]          Minimum Clock Ticks : 0014
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 DF 48 50 20 20 20 20  // HPET8.....HP    
    0010: 50 72 6F 4C 69 61 6E 74 02 02 12 20 4D 53 46 54  // ProLiant... MSFT
    0020: 97 00 00 00 00 83 00 00 00 08 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 02 14 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 7F
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 20120202
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 7F 48 50 20 20 20 20  // MCFG<.....HP    
    0010: 50 72 6F 4C 69 61 6E 74 02 02 12 20 4D 53 46 54  // ProLiant... MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


OEMB
----


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EB
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 20120202
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036 338] Software Licensing Structure : 53 4C 49 43 76 01 00 00 01 EB 48 50 20 20 20 20 /* SLICv.....HP     */\
/* 034h 0052  16 */                            50 72 6F 4C 69 61 6E 74 02 02 12 20 4D 53 46 54 /* ProLiant... MSFT */\
/* 044h 0068  16 */                            97 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00 /* ................ */\
/* 054h 0084  16 */                            00 24 00 00 31 41 53 52 00 04 00 00 01 01 00 00 /* .$..1ASR........ */\
/* 064h 0100  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 074h 0116  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 084h 0132  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 094h 0148  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0A4h 0164  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0B4h 0180  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0C4h 0196  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0D4h 0212  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0E4h 0228  16 */                            01 00 00 00 B6 00 00 00 00 00 02 00 48 50 20 20 /* ............HP   */\
/* 0F4h 0244  16 */                            20 20 50 72 6F 4C 69 61 6E 74 57 49 4E 44 4F 57 /*   ProLiantWINDOW */\
/* 104h 0260  16 */                            53 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* S .............. */\
/* 114h 0276  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 124h 0292  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 134h 0308  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 144h 0324  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 154h 0340  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 164h 0356  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 174h 0372   2 */                            00 00                                           /* .. */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 EB 48 50 20 20 20 20  // SLICv.....HP    
    0010: 50 72 6F 4C 69 61 6E 74 02 02 12 20 4D 53 46 54  // ProLiant... MSFT
    0020: 97 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 31 41 53 52 00 04 00 00 01 01 00 00  // .$..1ASR........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 48 50 20 20  // ............HP  
    00D0: 20 20 50 72 6F 4C 69 61 6E 74 57 49 4E 44 4F 57  //   ProLiantWINDOW
    00E0: 53 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00                                // ......


SLIT
----
[000h 0000   4]                    Signature : "SLIT"    [System Locality Information Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 62
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "F10     "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   8]                   Localities : 0000000000000004
[02Ch 0044   4]                 Locality   0 : 0A 10 10 10
[030h 0048   4]                 Locality   1 : 10 0A 10 10
[034h 0052   4]                 Locality   2 : 10 10 0A 10
[038h 0056   4]                 Locality   3 : 10 10 10 0A

Raw Table Data: Length 60 (0x3C)

    0000: 53 4C 49 54 3C 00 00 00 01 62 48 50 20 20 20 20  // SLIT<....bHP    
    0010: 46 31 30 20 20 20 20 20 01 00 00 00 48 50 20 20  // F10     ....HP  
    0020: 01 00 00 00 04 00 00 00 00 00 00 00 0A 10 10 10  // ................
    0030: 10 0A 10 10 10 10 0A 10 10 10 10 0A              // ............


SPCR
----
[000h 0000   4]                    Signature : "SPCR"    [Serial Port Console Redirection Table]
[004h 0004   4]                 Table Length : 00000050
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2B
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 20120202
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   1]               Interface Type : 00
[025h 0037   3]                     Reserved : 000000

[028h 0040  12]         Serial Port Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 0000000000000000

[034h 0052   1]               Interrupt Type : 01
[035h 0053   1]          PCAT-compatible IRQ : 03
[036h 0054   4]                    Interrupt : 00000000
[03Ah 0058   1]                    Baud Rate : 03
[03Bh 0059   1]                       Parity : 00
[03Ch 0060   1]                    Stop Bits : 01
[03Dh 0061   1]                 Flow Control : 00
[03Eh 0062   1]                Terminal Type : 00
[04Ch 0076   1]                     Reserved : 00
[040h 0064   2]                PCI Device ID : FFFF
[042h 0066   2]                PCI Vendor ID : FFFF
[044h 0068   1]                      PCI Bus : 00
[045h 0069   1]                   PCI Device : 00
[046h 0070   1]                 PCI Function : 00
[047h 0071   4]                    PCI Flags : 00000000
[04Bh 0075   1]                  PCI Segment : 00
[04Ch 0076   4]                     Reserved : 00000000

Raw Table Data: Length 80 (0x50)

    0000: 53 50 43 52 50 00 00 00 01 2B 48 50 20 20 20 20  // SPCRP....+HP    
    0010: 50 72 6F 4C 69 61 6E 74 02 02 12 20 4D 53 46 54  // ProLiant... MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 01 03 00 00 00 00 03 00 01 00 00 00  // ................
    0040: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................


SPMI
----
[000h 0000   4]                    Signature : "SPMI"    [Server Platform Management Interface Table]
[004h 0004   4]                 Table Length : 00000041
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 35
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 20120202
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   1]               Interface Type : 02
[025h 0037   1]                     Reserved : 01
[026h 0038   2]            IPMI Spec Version : 0100
[028h 0040   1]               Interrupt Type : 00
[029h 0041   1]                   GPE Number : 00
[02Ah 0042   1]                     Reserved : 00
[02Bh 0043   1]              PCI Device Flag : 00
[02Ch 0044   4]                    Interrupt : 00000000

[030h 0048  12]                IPMI Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 00 [SystemMemory]
[031h 0049   1]                    Bit Width : 00
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 00 [Undefined/Legacy]
[034h 0052   8]                      Address : 0000000000000000

[03Ch 0060   1]                  PCI Segment : 00
[03Dh 0061   1]                      PCI Bus : 00
[03Eh 0062   1]                   PCI Device : 00
[03Fh 0063   1]                 PCI Function : 00
[040h 0064   1]                     Reserved : 00

Raw Table Data: Length 65 (0x41)

    0000: 53 50 4D 49 41 00 00 00 05 35 48 50 20 20 20 20  // SPMIA....5HP    
    0010: 50 72 6F 4C 69 61 6E 74 02 02 12 20 4D 53 46 54  // ProLiant... MSFT
    0020: 97 00 00 00 02 01 00 01 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00                                               // .


SRAT
----
[000h 0000   4]                    Signature : "SRAT"    [System Resource Affinity Table]
[004h 0004   4]                 Table Length : 00000220
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 48
[00Ah 0010   6]                       Oem ID : "AMD   "
[010h 0016   8]                 Oem Table ID : "AGESA   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]               Table Revision : 00000001
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 01 [Memory Affinity]
[031h 0049   1]                       Length : 28

[032h 0050   4]             Proximity Domain : 00000000
[036h 0054   2]                    Reserved1 : 0000
[038h 0056   8]                 Base Address : 0000000000000000
[040h 0064   8]               Address Length : 00000000000A0000
[048h 0072   4]                    Reserved2 : 00000000
[04Ch 0076   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[050h 0080   8]                    Reserved3 : 0000000000000000

[058h 0088   1]                Subtable Type : 01 [Memory Affinity]
[059h 0089   1]                       Length : 28

[05Ah 0090   4]             Proximity Domain : 00000000
[05Eh 0094   2]                    Reserved1 : 0000
[060h 0096   8]                 Base Address : 0000000000100000
[068h 0104   8]               Address Length : 000000007FF00000
[070h 0112   4]                    Reserved2 : 00000000
[074h 0116   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[078h 0120   8]                    Reserved3 : 0000000000000000

[080h 0128   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[081h 0129   1]                       Length : 10

[082h 0130   1]      Proximity Domain Low(8) : 00
[083h 0131   1]                      Apic ID : 10
[084h 0132   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[088h 0136   1]              Local Sapic EID : 00
[089h 0137   3]    Proximity Domain High(24) : 000000
[08Ch 0140   4]                 Clock Domain : 00000000

[090h 0144   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[091h 0145   1]                       Length : 10

[092h 0146   1]      Proximity Domain Low(8) : 00
[093h 0147   1]                      Apic ID : 11
[094h 0148   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[098h 0152   1]              Local Sapic EID : 00
[099h 0153   3]    Proximity Domain High(24) : 000000
[09Ch 0156   4]                 Clock Domain : 00000000

[0A0h 0160   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0A1h 0161   1]                       Length : 10

[0A2h 0162   1]      Proximity Domain Low(8) : 00
[0A3h 0163   1]                      Apic ID : 12
[0A4h 0164   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0A8h 0168   1]              Local Sapic EID : 00
[0A9h 0169   3]    Proximity Domain High(24) : 000000
[0ACh 0172   4]                 Clock Domain : 00000000

[0B0h 0176   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0B1h 0177   1]                       Length : 10

[0B2h 0178   1]      Proximity Domain Low(8) : 00
[0B3h 0179   1]                      Apic ID : 13
[0B4h 0180   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0B8h 0184   1]              Local Sapic EID : 00
[0B9h 0185   3]    Proximity Domain High(24) : 000000
[0BCh 0188   4]                 Clock Domain : 00000000

[0C0h 0192   1]                Subtable Type : 01 [Memory Affinity]
[0C1h 0193   1]                       Length : 28

[0C2h 0194   4]             Proximity Domain : 00000001
[0C6h 0198   2]                    Reserved1 : 0000
[0C8h 0200   8]                 Base Address : 0000000080000000
[0D0h 0208   8]               Address Length : 0000000040000000
[0D8h 0216   4]                    Reserved2 : 00000000
[0DCh 0220   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[0E0h 0224   8]                    Reserved3 : 0000000000000000

[0E8h 0232   1]                Subtable Type : 01 [Memory Affinity]
[0E9h 0233   1]                       Length : 28

[0EAh 0234   4]             Proximity Domain : 00000001
[0EEh 0238   2]                    Reserved1 : 0000
[0F0h 0240   8]                 Base Address : 0000000100000000
[0F8h 0248   8]               Address Length : 00000000C0000000
[100h 0256   4]                    Reserved2 : 00000000
[104h 0260   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[108h 0264   8]                    Reserved3 : 0000000000000000

[110h 0272   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[111h 0273   1]                       Length : 10

[112h 0274   1]      Proximity Domain Low(8) : 01
[113h 0275   1]                      Apic ID : 14
[114h 0276   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[118h 0280   1]              Local Sapic EID : 00
[119h 0281   3]    Proximity Domain High(24) : 000000
[11Ch 0284   4]                 Clock Domain : 00000000

[120h 0288   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[121h 0289   1]                       Length : 10

[122h 0290   1]      Proximity Domain Low(8) : 01
[123h 0291   1]                      Apic ID : 15
[124h 0292   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[128h 0296   1]              Local Sapic EID : 00
[129h 0297   3]    Proximity Domain High(24) : 000000
[12Ch 0300   4]                 Clock Domain : 00000000

[130h 0304   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[131h 0305   1]                       Length : 10

[132h 0306   1]      Proximity Domain Low(8) : 01
[133h 0307   1]                      Apic ID : 16
[134h 0308   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[138h 0312   1]              Local Sapic EID : 00
[139h 0313   3]    Proximity Domain High(24) : 000000
[13Ch 0316   4]                 Clock Domain : 00000000

[140h 0320   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[141h 0321   1]                       Length : 10

[142h 0322   1]      Proximity Domain Low(8) : 01
[143h 0323   1]                      Apic ID : 17
[144h 0324   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[148h 0328   1]              Local Sapic EID : 00
[149h 0329   3]    Proximity Domain High(24) : 000000
[14Ch 0332   4]                 Clock Domain : 00000000

[150h 0336   1]                Subtable Type : 01 [Memory Affinity]
[151h 0337   1]                       Length : 28

[152h 0338   4]             Proximity Domain : 00000002
[156h 0342   2]                    Reserved1 : 0000
[158h 0344   8]                 Base Address : 00000001C0000000
[160h 0352   8]               Address Length : 0000000100000000
[168h 0360   4]                    Reserved2 : 00000000
[16Ch 0364   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[170h 0368   8]                    Reserved3 : 0000000000000000

[178h 0376   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[179h 0377   1]                       Length : 10

[17Ah 0378   1]      Proximity Domain Low(8) : 02
[17Bh 0379   1]                      Apic ID : 24
[17Ch 0380   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[180h 0384   1]              Local Sapic EID : 00
[181h 0385   3]    Proximity Domain High(24) : 000000
[184h 0388   4]                 Clock Domain : 00000000

[188h 0392   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[189h 0393   1]                       Length : 10

[18Ah 0394   1]      Proximity Domain Low(8) : 02
[18Bh 0395   1]                      Apic ID : 25
[18Ch 0396   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[190h 0400   1]              Local Sapic EID : 00
[191h 0401   3]    Proximity Domain High(24) : 000000
[194h 0404   4]                 Clock Domain : 00000000

[198h 0408   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[199h 0409   1]                       Length : 10

[19Ah 0410   1]      Proximity Domain Low(8) : 02
[19Bh 0411   1]                      Apic ID : 26
[19Ch 0412   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1A0h 0416   1]              Local Sapic EID : 00
[1A1h 0417   3]    Proximity Domain High(24) : 000000
[1A4h 0420   4]                 Clock Domain : 00000000

[1A8h 0424   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1A9h 0425   1]                       Length : 10

[1AAh 0426   1]      Proximity Domain Low(8) : 02
[1ABh 0427   1]                      Apic ID : 27
[1ACh 0428   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1B0h 0432   1]              Local Sapic EID : 00
[1B1h 0433   3]    Proximity Domain High(24) : 000000
[1B4h 0436   4]                 Clock Domain : 00000000

[1B8h 0440   1]                Subtable Type : 01 [Memory Affinity]
[1B9h 0441   1]                       Length : 28

[1BAh 0442   4]             Proximity Domain : 00000003
[1BEh 0446   2]                    Reserved1 : 0000
[1C0h 0448   8]                 Base Address : 00000002C0000000
[1C8h 0456   8]               Address Length : 0000000100000000
[1D0h 0464   4]                    Reserved2 : 00000000
[1D4h 0468   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[1D8h 0472   8]                    Reserved3 : 0000000000000000

[1E0h 0480   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1E1h 0481   1]                       Length : 10

[1E2h 0482   1]      Proximity Domain Low(8) : 03
[1E3h 0483   1]                      Apic ID : 20
[1E4h 0484   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1E8h 0488   1]              Local Sapic EID : 00
[1E9h 0489   3]    Proximity Domain High(24) : 000000
[1ECh 0492   4]                 Clock Domain : 00000000

[1F0h 0496   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1F1h 0497   1]                       Length : 10

[1F2h 0498   1]      Proximity Domain Low(8) : 03
[1F3h 0499   1]                      Apic ID : 21
[1F4h 0500   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1F8h 0504   1]              Local Sapic EID : 00
[1F9h 0505   3]    Proximity Domain High(24) : 000000
[1FCh 0508   4]                 Clock Domain : 00000000

[200h 0512   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[201h 0513   1]                       Length : 10

[202h 0514   1]      Proximity Domain Low(8) : 03
[203h 0515   1]                      Apic ID : 22
[204h 0516   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[208h 0520   1]              Local Sapic EID : 00
[209h 0521   3]    Proximity Domain High(24) : 000000
[20Ch 0524   4]                 Clock Domain : 00000000

[210h 0528   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[211h 0529   1]                       Length : 10

[212h 0530   1]      Proximity Domain Low(8) : 03
[213h 0531   1]                      Apic ID : 23
[214h 0532   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[218h 0536   1]              Local Sapic EID : 00
[219h 0537   3]    Proximity Domain High(24) : 000000
[21Ch 0540   4]                 Clock Domain : 00000000

Raw Table Data: Length 544 (0x220)

    0000: 53 52 41 54 20 02 00 00 02 48 41 4D 44 20 20 20  // SRAT ....HAMD   
    0010: 41 47 45 53 41 20 20 20 01 00 00 00 41 4D 44 20  // AGESA   ....AMD 
    0020: 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 00 00 0A 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0060: 00 00 10 00 00 00 00 00 00 00 F0 7F 00 00 00 00  // ................
    0070: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 10 00 10 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 10 00 11 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 10 00 12 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 10 00 13 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 01 28 01 00 00 00 00 00 00 00 00 80 00 00 00 00  // .(..............
    00D0: 00 00 00 40 00 00 00 00 00 00 00 00 01 00 00 00  // ...@............
    00E0: 00 00 00 00 00 00 00 00 01 28 01 00 00 00 00 00  // .........(......
    00F0: 00 00 00 00 01 00 00 00 00 00 00 C0 00 00 00 00  // ................
    0100: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 10 01 14 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 10 01 15 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 10 01 16 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 10 01 17 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 01 28 02 00 00 00 00 00 00 00 00 C0 01 00 00 00  // .(..............
    0160: 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 10 02 24 01 00 00 00  // ...........$....
    0180: 00 00 00 00 00 00 00 00 00 10 02 25 01 00 00 00  // ...........%....
    0190: 00 00 00 00 00 00 00 00 00 10 02 26 01 00 00 00  // ...........&....
    01A0: 00 00 00 00 00 00 00 00 00 10 02 27 01 00 00 00  // ...........'....
    01B0: 00 00 00 00 00 00 00 00 01 28 03 00 00 00 00 00  // .........(......
    01C0: 00 00 00 C0 02 00 00 00 00 00 00 00 01 00 00 00  // ................
    01D0: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    01E0: 00 10 03 20 01 00 00 00 00 00 00 00 00 00 00 00  // ... ............
    01F0: 00 10 03 21 01 00 00 00 00 00 00 00 00 00 00 00  // ...!............
    0200: 00 10 03 22 01 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    0210: 00 10 03 23 01 00 00 00 00 00 00 00 00 00 00 00  // ...#............


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "ProLiant", 0x00000001)
{
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)
    External (_PR_.P003, DeviceObj)
    External (_PR_.P004, DeviceObj)
    External (_PR_.P005, DeviceObj)
    External (_PR_.P006, DeviceObj)
    External (_PR_.P007, DeviceObj)
    External (_PR_.P008, DeviceObj)
    External (_PR_.P009, DeviceObj)
    External (_PR_.P00A, DeviceObj)
    External (_PR_.P00B, DeviceObj)
    External (_PR_.P00C, DeviceObj)
    External (_PR_.P00D, DeviceObj)
    External (_PR_.P00E, DeviceObj)
    External (_PR_.P00F, DeviceObj)
    External (_PR_.P010, DeviceObj)

    Scope (\_PR.P001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P001.PPCV */
        }
    }

    Scope (\_PR.P002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P002.PPCV */
        }
    }

    Scope (\_PR.P003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P003.PPCV */
        }
    }

    Scope (\_PR.P004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P004.PPCV */
        }
    }

    Scope (\_PR.P005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P005.PPCV */
        }
    }

    Scope (\_PR.P006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P006.PPCV */
        }
    }

    Scope (\_PR.P007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P007.PPCV */
        }
    }

    Scope (\_PR.P008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P008.PPCV */
        }
    }

    Scope (\_PR.P009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000010, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P009.PPCV */
        }
    }

    Scope (\_PR.P00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000011, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00A.PPCV */
        }
    }

    Scope (\_PR.P00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000012, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00B.PPCV */
        }
    }

    Scope (\_PR.P00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000013, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00C.PPCV */
        }
    }

    Scope (\_PR.P00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000014, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00D.PPCV */
        }
    }

    Scope (\_PR.P00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000015, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00E.PPCV */
        }
    }

    Scope (\_PR.P00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000016, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00F.PPCV */
        }
    }

    Scope (\_PR.P010)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00002B93, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x00002224, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001BEE, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000173E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x0000139E, 
                0x00000005, 
                0x00000005, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000017, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P010.PPCV */
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "ProLiant", 0x00000001)
{
    Name (SSD0, Zero)
}



