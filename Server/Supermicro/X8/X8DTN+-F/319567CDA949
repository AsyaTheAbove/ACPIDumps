
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20160527-64
Copyright (c) 2000 - 2016 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   APIC   0x0000011E     0x02    "102811"  "APIC1447"   0x20111028    "MSFT"     0x00000097
   BERT   0x00000030     0x01    "AMIER "  "AMI_BERT"   0x20111028    "MSFT"     0x00000097
   DMAR   0x00000138     0x01    "AMI   "  "OEMDMAR "   0x00000001    "MSFT"     0x00000097
   DSDT   0x0000605F     0x02    "1060F "  "1060F000"   0x00000000    "INTL"     0x20051117
   EINJ   0x00000130     0x01    "AMIER "  "AMI_EINJ"   0x20111028    "MSFT"     0x00000097
   FACP   0x000000F4     0x04    "102811"  "FACP1447"   0x20111028    "MSFT"     0x00000097
   FACS   0x00000040
   ERST   0x000001B0     0x01    "AMIER "  "AMI_ERST"   0x20111028    "MSFT"     0x00000097
   HEST   0x000000A8     0x01    "AMIER "  "ABC_HEST"   0x20111028    "MSFT"     0x00000097
   HPET   0x00000038     0x01    "102811"  "OEMHPET "   0x20111028    "MSFT"     0x00000097
   MCFG   0x0000003C     0x01    "102811"  "OEMMCFG "   0x20111028    "MSFT"     0x00000097
   OEMB   0x00000092     0x01    "102811"  "OEMB1447"   0x20111028    "MSFT"     0x00000097
   SLIT   0x00000030     0x01    "102811"  "OEMSLIT "   0x20111028    "MSFT"     0x00000097
   SRAT   0x00000250     0x02    "102811"  "OEMSRAT "   0x00000001    "INTL"     0x00000001
   SSDT   0x00000363     0x01    "DpgPmm"  "CpuPm   "   0x00000012    "INTL"     0x20051117
   SSDT   0x000053DC     0x01    "DpgPmm"  "P001Ist "   0x00000011    "INTL"     0x20051117
   SSDT   0x00000C86     0x01    "PmRef "  "P001Cst "   0x00003001    "INTL"     0x20051117
   SSDT   0x00000A0A     0x01    "PmRef "  "Cpu0Tst "   0x00003000    "INTL"     0x20051117

Found 18 ACPI tables in /root/HW_PROBE/LATEST/hw.info/logs/acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000011E
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 69
[00Ah 0010   6]                       Oem ID : "102811"
[010h 0016   8]                 Oem Table ID : "APIC1447"
[018h 0024   4]                 Oem Revision : 20111028
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 10
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 12
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 14
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : 20
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : 22
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 09
[06Fh 0111   1]                Local Apic ID : 24
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 0A
[077h 0119   1]                Local Apic ID : 30
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0B
[07Fh 0127   1]                Local Apic ID : 32
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0C
[087h 0135   1]                Local Apic ID : 34
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0D
[08Fh 0143   1]                Local Apic ID : 01
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0E
[097h 0151   1]                Local Apic ID : 03
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0F
[09Fh 0159   1]                Local Apic ID : 05
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 10
[0A7h 0167   1]                Local Apic ID : 11
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 11
[0AFh 0175   1]                Local Apic ID : 13
[0B0h 0176   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 12
[0B7h 0183   1]                Local Apic ID : 15
[0B8h 0184   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 13
[0BFh 0191   1]                Local Apic ID : 21
[0C0h 0192   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 14
[0C7h 0199   1]                Local Apic ID : 23
[0C8h 0200   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 15
[0CFh 0207   1]                Local Apic ID : 25
[0D0h 0208   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 16
[0D7h 0215   1]                Local Apic ID : 31
[0D8h 0216   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 17
[0DFh 0223   1]                Local Apic ID : 33
[0E0h 0224   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 18
[0E7h 0231   1]                Local Apic ID : 35
[0E8h 0232   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[0ECh 0236   1]                Subtable Type : 01 [I/O APIC]
[0EDh 0237   1]                       Length : 0C
[0EEh 0238   1]                  I/O Apic ID : 06
[0EFh 0239   1]                     Reserved : 00
[0F0h 0240   4]                      Address : FEC00000
[0F4h 0244   4]                    Interrupt : 00000000

[0F8h 0248   1]                Subtable Type : 01 [I/O APIC]
[0F9h 0249   1]                       Length : 0C
[0FAh 0250   1]                  I/O Apic ID : 07
[0FBh 0251   1]                     Reserved : 00
[0FCh 0252   4]                      Address : FEC8A000
[100h 0256   4]                    Interrupt : 00000018

[104h 0260   1]                Subtable Type : 02 [Interrupt Source Override]
[105h 0261   1]                       Length : 0A
[106h 0262   1]                          Bus : 00
[107h 0263   1]                       Source : 00
[108h 0264   4]                    Interrupt : 00000002
[10Ch 0268   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[10Eh 0270   1]                Subtable Type : 02 [Interrupt Source Override]
[10Fh 0271   1]                       Length : 0A
[110h 0272   1]                          Bus : 00
[111h 0273   1]                       Source : 09
[112h 0274   4]                    Interrupt : 00000009
[116h 0278   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[118h 0280   1]                Subtable Type : 04 [Local APIC NMI]
[119h 0281   1]                       Length : 06
[11Ah 0282   1]                 Processor ID : FF
[11Bh 0283   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[11Dh 0285   1]         Interrupt Input LINT : 01

Raw Table Data: Length 286 (0x11E)

  0000: 41 50 49 43 1E 01 00 00 02 69 31 30 32 38 31 31  // APIC.....i102811
  0010: 41 50 49 43 31 34 34 37 28 10 11 20 4D 53 46 54  // APIC1447(.. MSFT
  0020: 97 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
  0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 04  // ................
  0040: 01 00 00 00 00 08 04 10 01 00 00 00 00 08 05 12  // ................
  0050: 01 00 00 00 00 08 06 14 01 00 00 00 00 08 07 20  // ............... 
  0060: 01 00 00 00 00 08 08 22 01 00 00 00 00 08 09 24  // .......".......$
  0070: 01 00 00 00 00 08 0A 30 01 00 00 00 00 08 0B 32  // .......0.......2
  0080: 01 00 00 00 00 08 0C 34 01 00 00 00 00 08 0D 01  // .......4........
  0090: 01 00 00 00 00 08 0E 03 01 00 00 00 00 08 0F 05  // ................
  00A0: 01 00 00 00 00 08 10 11 01 00 00 00 00 08 11 13  // ................
  00B0: 01 00 00 00 00 08 12 15 01 00 00 00 00 08 13 21  // ...............!
  00C0: 01 00 00 00 00 08 14 23 01 00 00 00 00 08 15 25  // .......#.......%
  00D0: 01 00 00 00 00 08 16 31 01 00 00 00 00 08 17 33  // .......1.......3
  00E0: 01 00 00 00 00 08 18 35 01 00 00 00 01 0C 06 00  // .......5........
  00F0: 00 00 C0 FE 00 00 00 00 01 0C 07 00 00 A0 C8 FE  // ................
  0100: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
  0110: 00 09 09 00 00 00 0D 00 04 06 FF 00 00 01        // ..............


BERT
----
[000h 0000   4]                    Signature : "BERT"    [Boot Error Record Table]
[004h 0004   4]                 Table Length : 00000030
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 03
[00Ah 0010   6]                       Oem ID : "AMIER"
[010h 0016   8]                 Oem Table ID : "AMI_BERT"
[018h 0024   4]                 Oem Revision : 20111028
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]     Boot Error Region Length : 00000054
[028h 0040   8]    Boot Error Region Address : 00000000BF77AA60

Raw Table Data: Length 48 (0x30)

  0000: 42 45 52 54 30 00 00 00 01 03 41 4D 49 45 52 00  // BERT0.....AMIER.
  0010: 41 4D 49 5F 42 45 52 54 28 10 11 20 4D 53 46 54  // AMI_BERT(.. MSFT
  0020: 97 00 00 00 54 00 00 00 60 AA 77 BF 00 00 00 00  // ....T...`.w.....


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping table]
[004h 0004   4]                 Table Length : 00000138
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 99
[00Ah 0010   6]                       Oem ID : "AMI"
[010h 0016   8]                 Oem Table ID : "OEMDMAR"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   1]           Host Address Width : 27
[025h 0037   1]                        Flags : 01
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0020

[034h 0052   1]                        Flags : 01
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FBFFE000

[040h 0064   1]            Device Scope Type : 03 [IOAPIC Device]
[041h 0065   1]                 Entry Length : 08
[042h 0066   2]                     Reserved : 0000
[044h 0068   1]               Enumeration ID : 06
[045h 0069   1]               PCI Bus Number : F0

[046h 0070   2]                     PCI Path : 1F,07


[048h 0072   1]            Device Scope Type : 03 [IOAPIC Device]
[049h 0073   1]                 Entry Length : 08
[04Ah 0074   2]                     Reserved : 0000
[04Ch 0076   1]               Enumeration ID : 07
[04Dh 0077   1]               PCI Bus Number : 00

[04Eh 0078   2]                     PCI Path : 13,00


[050h 0080   2]                Subtable Type : 0001 [Reserved Memory Region]
[052h 0082   2]                       Length : 0058

[054h 0084   2]                     Reserved : 0000
[056h 0086   2]           PCI Segment Number : 0000
[058h 0088   8]                 Base Address : 00000000000E5000
[060h 0096   8]          End Address (limit) : 00000000000E8FFF

[068h 0104   1]            Device Scope Type : 01 [PCI Endpoint Device]
[069h 0105   1]                 Entry Length : 08
[06Ah 0106   2]                     Reserved : 0000
[06Ch 0108   1]               Enumeration ID : 00
[06Dh 0109   1]               PCI Bus Number : 00

[06Eh 0110   2]                     PCI Path : 1D,00


[070h 0112   1]            Device Scope Type : 01 [PCI Endpoint Device]
[071h 0113   1]                 Entry Length : 08
[072h 0114   2]                     Reserved : 0000
[074h 0116   1]               Enumeration ID : 00
[075h 0117   1]               PCI Bus Number : 00

[076h 0118   2]                     PCI Path : 1D,01


[078h 0120   1]            Device Scope Type : 01 [PCI Endpoint Device]
[079h 0121   1]                 Entry Length : 08
[07Ah 0122   2]                     Reserved : 0000
[07Ch 0124   1]               Enumeration ID : 00
[07Dh 0125   1]               PCI Bus Number : 00

[07Eh 0126   2]                     PCI Path : 1D,02


[080h 0128   1]            Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129   1]                 Entry Length : 08
[082h 0130   2]                     Reserved : 0000
[084h 0132   1]               Enumeration ID : 00
[085h 0133   1]               PCI Bus Number : 00

[086h 0134   2]                     PCI Path : 1D,07


[088h 0136   1]            Device Scope Type : 01 [PCI Endpoint Device]
[089h 0137   1]                 Entry Length : 08
[08Ah 0138   2]                     Reserved : 0000
[08Ch 0140   1]               Enumeration ID : 00
[08Dh 0141   1]               PCI Bus Number : 00

[08Eh 0142   2]                     PCI Path : 1A,00


[090h 0144   1]            Device Scope Type : 01 [PCI Endpoint Device]
[091h 0145   1]                 Entry Length : 08
[092h 0146   2]                     Reserved : 0000
[094h 0148   1]               Enumeration ID : 00
[095h 0149   1]               PCI Bus Number : 00

[096h 0150   2]                     PCI Path : 1A,01


[098h 0152   1]            Device Scope Type : 01 [PCI Endpoint Device]
[099h 0153   1]                 Entry Length : 08
[09Ah 0154   2]                     Reserved : 0000
[09Ch 0156   1]               Enumeration ID : 00
[09Dh 0157   1]               PCI Bus Number : 00

[09Eh 0158   2]                     PCI Path : 1A,02


[0A0h 0160   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0A1h 0161   1]                 Entry Length : 08
[0A2h 0162   2]                     Reserved : 0000
[0A4h 0164   1]               Enumeration ID : 00
[0A5h 0165   1]               PCI Bus Number : 00

[0A6h 0166   2]                     PCI Path : 1A,07


[0A8h 0168   2]                Subtable Type : 0001 [Reserved Memory Region]
[0AAh 0170   2]                       Length : 0058

[0ACh 0172   2]                     Reserved : 0000
[0AEh 0174   2]           PCI Segment Number : 0000
[0B0h 0176   8]                 Base Address : 00000000BF7EC000
[0B8h 0184   8]          End Address (limit) : 00000000BF7FFFFF

[0C0h 0192   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0C1h 0193   1]                 Entry Length : 08
[0C2h 0194   2]                     Reserved : 0000
[0C4h 0196   1]               Enumeration ID : 00
[0C5h 0197   1]               PCI Bus Number : 00

[0C6h 0198   2]                     PCI Path : 1D,00


[0C8h 0200   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0C9h 0201   1]                 Entry Length : 08
[0CAh 0202   2]                     Reserved : 0000
[0CCh 0204   1]               Enumeration ID : 00
[0CDh 0205   1]               PCI Bus Number : 00

[0CEh 0206   2]                     PCI Path : 1D,01


[0D0h 0208   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0D1h 0209   1]                 Entry Length : 08
[0D2h 0210   2]                     Reserved : 0000
[0D4h 0212   1]               Enumeration ID : 00
[0D5h 0213   1]               PCI Bus Number : 00

[0D6h 0214   2]                     PCI Path : 1D,02


[0D8h 0216   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0D9h 0217   1]                 Entry Length : 08
[0DAh 0218   2]                     Reserved : 0000
[0DCh 0220   1]               Enumeration ID : 00
[0DDh 0221   1]               PCI Bus Number : 00

[0DEh 0222   2]                     PCI Path : 1D,07


[0E0h 0224   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0E1h 0225   1]                 Entry Length : 08
[0E2h 0226   2]                     Reserved : 0000
[0E4h 0228   1]               Enumeration ID : 00
[0E5h 0229   1]               PCI Bus Number : 00

[0E6h 0230   2]                     PCI Path : 1A,00


[0E8h 0232   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0E9h 0233   1]                 Entry Length : 08
[0EAh 0234   2]                     Reserved : 0000
[0ECh 0236   1]               Enumeration ID : 00
[0EDh 0237   1]               PCI Bus Number : 00

[0EEh 0238   2]                     PCI Path : 1A,01


[0F0h 0240   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0F1h 0241   1]                 Entry Length : 08
[0F2h 0242   2]                     Reserved : 0000
[0F4h 0244   1]               Enumeration ID : 00
[0F5h 0245   1]               PCI Bus Number : 00

[0F6h 0246   2]                     PCI Path : 1A,02


[0F8h 0248   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0F9h 0249   1]                 Entry Length : 08
[0FAh 0250   2]                     Reserved : 0000
[0FCh 0252   1]               Enumeration ID : 00
[0FDh 0253   1]               PCI Bus Number : 00

[0FEh 0254   2]                     PCI Path : 1A,07


[100h 0256   2]                Subtable Type : 0002 [Root Port ATS Capability]
[102h 0258   2]                       Length : 0038

[104h 0260   1]                        Flags : 00
[105h 0261   1]                     Reserved : 00
[106h 0262   2]           PCI Segment Number : 0000

[108h 0264   1]            Device Scope Type : 02 [PCI Bridge Device]
[109h 0265   1]                 Entry Length : 08
[10Ah 0266   2]                     Reserved : 0000
[10Ch 0268   1]               Enumeration ID : 00
[10Dh 0269   1]               PCI Bus Number : 00

[10Eh 0270   2]                     PCI Path : 01,00


[110h 0272   1]            Device Scope Type : 02 [PCI Bridge Device]
[111h 0273   1]                 Entry Length : 08
[112h 0274   2]                     Reserved : 0000
[114h 0276   1]               Enumeration ID : 00
[115h 0277   1]               PCI Bus Number : 00

[116h 0278   2]                     PCI Path : 03,00


[118h 0280   1]            Device Scope Type : 02 [PCI Bridge Device]
[119h 0281   1]                 Entry Length : 08
[11Ah 0282   2]                     Reserved : 0000
[11Ch 0284   1]               Enumeration ID : 00
[11Dh 0285   1]               PCI Bus Number : 00

[11Eh 0286   2]                     PCI Path : 05,00


[120h 0288   1]            Device Scope Type : 02 [PCI Bridge Device]
[121h 0289   1]                 Entry Length : 08
[122h 0290   2]                     Reserved : 0000
[124h 0292   1]               Enumeration ID : 00
[125h 0293   1]               PCI Bus Number : 00

[126h 0294   2]                     PCI Path : 07,00


[128h 0296   1]            Device Scope Type : 02 [PCI Bridge Device]
[129h 0297   1]                 Entry Length : 08
[12Ah 0298   2]                     Reserved : 0000
[12Ch 0300   1]               Enumeration ID : 00
[12Dh 0301   1]               PCI Bus Number : 00

[12Eh 0302   2]                     PCI Path : 08,00


[130h 0304   1]            Device Scope Type : 02 [PCI Bridge Device]
[131h 0305   1]                 Entry Length : 08
[132h 0306   2]                     Reserved : 0000
[134h 0308   1]               Enumeration ID : 00
[135h 0309   1]               PCI Bus Number : 00

[136h 0310   2]                     PCI Path : 09,00


Raw Table Data: Length 312 (0x138)

  0000: 44 4D 41 52 38 01 00 00 01 99 41 4D 49 00 00 00  // DMAR8.....AMI...
  0010: 4F 45 4D 44 4D 41 52 00 01 00 00 00 4D 53 46 54  // OEMDMAR.....MSFT
  0020: 97 00 00 00 27 01 00 00 00 00 00 00 00 00 00 00  // ....'...........
  0030: 00 00 20 00 01 00 00 00 00 E0 FF FB 00 00 00 00  // .. .............
  0040: 03 08 00 00 06 F0 1F 07 03 08 00 00 07 00 13 00  // ................
  0050: 01 00 58 00 00 00 00 00 00 50 0E 00 00 00 00 00  // ..X......P......
  0060: FF 8F 0E 00 00 00 00 00 01 08 00 00 00 00 1D 00  // ................
  0070: 01 08 00 00 00 00 1D 01 01 08 00 00 00 00 1D 02  // ................
  0080: 01 08 00 00 00 00 1D 07 01 08 00 00 00 00 1A 00  // ................
  0090: 01 08 00 00 00 00 1A 01 01 08 00 00 00 00 1A 02  // ................
  00A0: 01 08 00 00 00 00 1A 07 01 00 58 00 00 00 00 00  // ..........X.....
  00B0: 00 C0 7E BF 00 00 00 00 FF FF 7F BF 00 00 00 00  // ..~.............
  00C0: 01 08 00 00 00 00 1D 00 01 08 00 00 00 00 1D 01  // ................
  00D0: 01 08 00 00 00 00 1D 02 01 08 00 00 00 00 1D 07  // ................
  00E0: 01 08 00 00 00 00 1A 00 01 08 00 00 00 00 1A 01  // ................
  00F0: 01 08 00 00 00 00 1A 02 01 08 00 00 00 00 1A 07  // ................
  0100: 02 00 38 00 00 00 00 00 02 08 00 00 00 00 01 00  // ..8.............
  0110: 02 08 00 00 00 00 03 00 02 08 00 00 00 00 05 00  // ................
  0120: 02 08 00 00 00 00 07 00 02 08 00 00 00 00 08 00  // ................
  0130: 02 08 00 00 00 00 09 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "1060F", "1060F000", 0x00000000)
{
    External (PSTE, UnknownObj)
    External (TSTE, UnknownObj)

    Scope (_PR)
    {
        Processor (P001, 0x01, 0x00000810, 0x06) {}
        Alias (P001, CPU1)
        Processor (P002, 0x02, 0x00000000, 0x00) {}
        Alias (P002, CPU2)
        Processor (P003, 0x03, 0x00000000, 0x00) {}
        Alias (P003, CPU3)
        Processor (P004, 0x04, 0x00000000, 0x00) {}
        Alias (P004, CPU4)
        Processor (P005, 0x05, 0x00000000, 0x00) {}
        Alias (P005, CPU5)
        Processor (P006, 0x06, 0x00000000, 0x00) {}
        Alias (P006, CPU6)
        Processor (P007, 0x07, 0x00000000, 0x00) {}
        Alias (P007, CPU7)
        Processor (P008, 0x08, 0x00000000, 0x00) {}
        Alias (P008, CPU8)
        Processor (P009, 0x09, 0x00000000, 0x00) {}
        Alias (P009, CPU9)
        Processor (P010, 0x0A, 0x00000000, 0x00) {}
        Processor (P011, 0x0B, 0x00000000, 0x00) {}
        Processor (P012, 0x0C, 0x00000000, 0x00) {}
        Processor (P013, 0x0D, 0x00000000, 0x00) {}
        Processor (P014, 0x0E, 0x00000000, 0x00) {}
        Processor (P015, 0x0F, 0x00000000, 0x00) {}
        Processor (P016, 0x10, 0x00000000, 0x00) {}
        Processor (P017, 0x11, 0x00000000, 0x00) {}
        Processor (P018, 0x12, 0x00000000, 0x00) {}
        Processor (P019, 0x13, 0x00000000, 0x00) {}
        Processor (P020, 0x14, 0x00000000, 0x00) {}
        Processor (P021, 0x15, 0x00000000, 0x00) {}
        Processor (P022, 0x16, 0x00000000, 0x00) {}
        Processor (P023, 0x17, 0x00000000, 0x00) {}
        Processor (P024, 0x18, 0x00000000, 0x00) {}
        Processor (P025, 0x19, 0x00000000, 0x00) {}
        Processor (P026, 0x1A, 0x00000000, 0x00) {}
        Processor (P027, 0x1B, 0x00000000, 0x00) {}
        Processor (P028, 0x1C, 0x00000000, 0x00) {}
        Processor (P029, 0x1D, 0x00000000, 0x00) {}
        Processor (P030, 0x1E, 0x00000000, 0x00) {}
        Processor (P031, 0x1F, 0x00000000, 0x00) {}
        Processor (P032, 0x20, 0x00000000, 0x00) {}
    }

    Name (DP80, 0x80)
    Name (DP90, 0x90)
    Name (IOSB, Zero)
    Name (IOSL, 0x06)
    Name (SPIO, 0x164E)
    Name (IOGB, 0x0A00)
    Name (IOGL, 0x10)
    Name (SEIO, 0x2E)
    Name (IO1B, 0x0290)
    Name (IO1L, 0x10)
    Name (APIC, One)
    Name (SMIP, 0xB2)
    Name (PMBS, 0x0800)
    Name (PMLN, 0x80)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (SMBS, Zero)
    Name (SMBL, Zero)
    Name (PM30, 0x0830)
    Name (SUSW, 0xFF)
    Name (TPBA, 0xFED40000)
    Name (TPBL, 0x5000)
    Name (H2BS, 0xFED12000)
    Name (PCIB, 0xE0000000)
    Name (PCIL, 0x10000000)
    Name (PEHP, Zero)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (SMIT, 0xB2)
    Name (CMRQ, 0xE0)
    Name (CMER, 0xE1)
    Name (CMOR, 0xE3)
    OperationRegion (BIOS, SystemMemory, 0xBF77E064, 0xFF)
    Field (BIOS, ByteAcc, NoLock, Preserve)
    {
        SS1,    1, 
        SS2,    1, 
        SS3,    1, 
        SS4,    1, 
        Offset (0x01), 
        IOST,   16, 
        TOPM,   32, 
        ROMS,   32, 
        MG1B,   32, 
        MG1L,   32, 
        MG2B,   32, 
        MG2L,   32, 
        Offset (0x1C), 
        DMAX,   8, 
        HPTA,   32, 
        CPB0,   32, 
        CPB1,   32, 
        CPB2,   32, 
        CPB3,   32, 
        ASSB,   8, 
        AOTB,   8, 
        AAXB,   32, 
        SMIF,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        MPEN,   8, 
        TPMF,   8, 
        MG3B,   32, 
        MG3L,   32, 
        MH1B,   32, 
        MH1L,   32, 
        OSTP,   8, 
        M4BL,   32, 
        M4BH,   32, 
        M4LL,   32, 
        M4LH,   32, 
        DIOH,   8, 
        VGAR,   8, 
        B0SE,   8, 
        B0SU,   8, 
        B0IB,   16, 
        B0IL,   16, 
        B0MB,   32, 
        B0ML,   32
    }

    Method (RRIO, 4, NotSerialized)
    {
        Debug = "RRIO"
    }

    Method (RDMA, 3, NotSerialized)
    {
        Debug = "rDMA"
    }

    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If (OSVR != Ones)
        {
            Return (OSVR) /* \OSVR */
        }

        Name (TTT0, Zero)
        TTT0 = OSYS ()
        If (TTT0 == One)
        {
            OSVR = 0x03
        }
        ElseIf (TTT0 == 0x10)
        {
            OSVR = One
        }
        ElseIf (TTT0 == 0x11)
        {
            OSVR = 0x02
        }
        ElseIf (TTT0 == 0x12)
        {
            OSVR = 0x04
        }
        ElseIf (TTT0 == 0x13)
        {
            OSVR = Zero
        }
        ElseIf (TTT0 == 0x14)
        {
            OSVR = Zero
        }
        ElseIf (TTT0 == 0x15)
        {
            OSVR = Zero
        }
        ElseIf (TTT0 == 0x15)
        {
            OSVR = Zero
        }
        ElseIf (TTT0 == 0x16)
        {
            OSVR = Zero
        }
        ElseIf (TTT0 == 0x17)
        {
            OSVR = Zero
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If (SizeOf (Arg0) < SizeOf (Arg1))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If (DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                ))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If ((One << Arg1) & Local0)
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If ((OSFL () == One) || (OSFL () == 0x02))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, DP80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, DP90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Method (OSYS, 0, NotSerialized)
    {
        Local0 = 0x10
        If (CondRefOf (_OSI, Local1))
        {
            If (_OSI ("Windows 2000"))
            {
                Local0 = 0x12
            }

            If (_OSI ("Windows 2001"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001.1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2001.1 SP1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2006"))
            {
                Local0 = 0x15
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                Local0 = 0x15
            }

            If (_OSI ("Windows 2006.1"))
            {
                Local0 = 0x16
            }

            If (_OSI ("Windows 2009"))
            {
                Local0 = 0x17
            }
        }
        ElseIf (MCTH (_OS, "Microsoft Windows NT"))
        {
            Local0 = 0x12
        }
        ElseIf (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
        {
            Local0 = 0x11
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x38)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKC, 
                Zero
            }
        })
        Name (AR00, Package (0x37)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x12
            }
        })
        Name (PR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x24
            }
        })
        Name (PR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PR17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x26
            }
        })
        Name (PR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PR19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR01, Package (0x01)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKC, 
                Zero
            }
        })
        Name (AR01, Package (0x01)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x12
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Device (IOH)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadWrite,
                        0xFBF00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFC000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFD000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00C00000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEC8A000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED10000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Device (NPE3)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13) /* \_SB_.AR13 */
                    }

                    Return (PR13) /* \_SB_.PR13 */
                }
            }

            Device (NPE5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR15) /* \_SB_.AR15 */
                    }

                    Return (PR15) /* \_SB_.PR15 */
                }
            }

            Device (NPE7)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR17) /* \_SB_.AR17 */
                    }

                    Return (PR17) /* \_SB_.PR17 */
                }
            }

            Device (NPE8)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR18) /* \_SB_.AR18 */
                    }

                    Return (PR18) /* \_SB_.PR18 */
                }
            }

            Device (NPE9)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR19) /* \_SB_.AR19 */
                    }

                    Return (PR19) /* \_SB_.PR19 */
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Device (IELK)
                {
                    Name (_HID, "AWY0001")  // _HID: Hardware ID
                    OperationRegion (RXA0, PCI_Config, 0xA0, 0x20)
                    Field (RXA0, ByteAcc, NoLock, Preserve)
                    {
                            ,   9, 
                        PBLV,   1, 
                        Offset (0x10), 
                            ,   1, 
                        PBMS,   1, 
                            ,   1, 
                        PMCS,   1, 
                        ECNS,   1, 
                        Offset (0x11), 
                        ECT1,   16, 
                        ELEN,   1, 
                        Offset (0x14)
                    }

                    Method (\_GPE._L0A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
                    {
                        Notify (\_SB.PCI0.SBRG.IELK, 0x81) // Information Change
                        \_SB.PCI0.SBRG.IELK.PMCS = One
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (ELEN)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (SMOD, 1, NotSerialized)
                    {
                    }

                    Method (GPBS, 0, NotSerialized)
                    {
                        Return ((PBLV ^ One))
                    }
                }

                Method (SPTS, 1, NotSerialized)
                {
                    PS1S = One
                    PS1E = One
                    SLPS = One
                }

                Method (SWAK, 1, NotSerialized)
                {
                    SLPS = Zero
                    PS1E = Zero
                    If ((Arg0 == One) && RTCS) {}
                    ElseIf ((Arg0 == 0x03) && BRTC) {}
                    Else
                    {
                        Notify (PWRB, 0x02) // Device Wake
                    }
                }

                OperationRegion (APMP, SystemIO, SMIP, 0x02)
                Field (APMP, ByteAcc, NoLock, Preserve)
                {
                    APMC,   8, 
                    APMS,   8
                }

                Field (APMP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                        ,   1, 
                    BRTC,   1
                }

                OperationRegion (PMS0, SystemIO, PMBS, 0x04)
                Field (PMS0, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   4, 
                    WAKS,   1, 
                    Offset (0x03), 
                    PWBT,   1, 
                    Offset (0x04)
                }

                OperationRegion (SMIE, SystemIO, PM30, 0x08)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    PS1E,   1, 
                        ,   31, 
                    PS1S,   1, 
                    Offset (0x08)
                }

                Scope (\_SB)
                {
                    Name (SLPS, Zero)
                    Device (SLPB)
                    {
                        Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (SUSW != 0xFF)
                            {
                                Return (0x0F)
                            }

                            Return (Zero)
                        }

                        Method (SBEV, 0, NotSerialized)
                        {
                            If (SLPS)
                            {
                                Notify (SLPB, 0x02) // Device Wake
                            }
                            Else
                            {
                                Notify (SLPB, 0x80) // Status Change
                            }
                        }

                        Method (\_GPE._L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
                        {
                            \_SB.SLPB.SBEV ()
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (Package (0x02)
                            {
                                0x1B, 
                                0x04
                            })
                        }
                    }
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y00)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y01)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y02)
                        Memory32Fixed (ReadWrite,
                            0xFED1C000,         // Address Base
                            0x00004000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y03)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y04)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y00._MIN, GP00)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y00._MAX, GP01)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y00._LEN, GP0L)  // _LEN: Length
                        GP00 = PMBS /* \PMBS */
                        GP01 = PMBS /* \PMBS */
                        GP0L = PMLN /* \PMLN */
                        If (SMBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y01._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y01._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y01._LEN, GP1L)  // _LEN: Length
                            GP10 = SMBS /* \SMBS */
                            GP11 = SMBS /* \SMBS */
                            GP1L = SMBL /* \SMBL */
                        }

                        If (GPBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._LEN, GP2L)  // _LEN: Length
                            GP20 = GPBS /* \GPBS */
                            GP21 = GPBS /* \GPBS */
                            GP2L = GPLN /* \GPLN */
                        }

                        CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y03._LEN, TML1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y03._BAS, TMB1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y04._LEN, TML2)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y04._BAS, TMB2)  // _BAS: Base Address
                        TMB1 = 0xFED20000
                        TML1 = (TPBA - 0xFED20000)
                        If (TPMF)
                        {
                            TMB2 = (TPBA + TPBL) /* \TPBL */
                        }
                        Else
                        {
                            TMB2 = (TPBA + Zero)
                        }

                        TML2 = (0xFED90000 - TMB2) /* \_SB_.PCI0.SBRG.RMSC._CRS.TMB2 */
                        Return (CRS) /* \_SB_.PCI0.SBRG.RMSC.CRS_ */
                    }
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y05)
                    })
                    OperationRegion (^LPCR, SystemMemory, 0xFED1F404, 0x04)
                    Field (LPCR, AnyAcc, NoLock, Preserve)
                    {
                        HPTS,   2, 
                            ,   5, 
                        HPTE,   1, 
                        Offset (0x04)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (OSFL () == Zero)
                        {
                            If (HPTE)
                            {
                                Return (0x0F)
                            }
                        }
                        ElseIf (HPTE)
                        {
                            Return (0x0B)
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.HPET._Y05._BAS, HPT)  // _BAS: Base Address
                        Local0 = (HPTS * 0x1000)
                        HPT = (Local0 + 0xFED00000)
                        Return (CRS) /* \_SB_.PCI0.SBRG.HPET.CRS_ */
                    }
                }

                OperationRegion (RX80, PCI_Config, Zero, 0xFF)
                Field (RX80, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x80), 
                    LPCD,   16, 
                    LPCE,   16
                }

                Name (DBPT, Package (0x04)
                {
                    Package (0x08)
                    {
                        0x03F8, 
                        0x02F8, 
                        0x0220, 
                        0x0228, 
                        0x0238, 
                        0x02E8, 
                        0x0338, 
                        0x03E8
                    }, 

                    Package (0x08)
                    {
                        0x03F8, 
                        0x02F8, 
                        0x0220, 
                        0x0228, 
                        0x0238, 
                        0x02E8, 
                        0x0338, 
                        0x03E8
                    }, 

                    Package (0x03)
                    {
                        0x0378, 
                        0x0278, 
                        0x03BC
                    }, 

                    Package (0x02)
                    {
                        0x03F0, 
                        0x0370
                    }
                })
                Name (DDLT, Package (0x04)
                {
                    Package (0x02)
                    {
                        Zero, 
                        0xFFF8
                    }, 

                    Package (0x02)
                    {
                        0x04, 
                        0xFF8F
                    }, 

                    Package (0x02)
                    {
                        0x08, 
                        0xFCFF
                    }, 

                    Package (0x02)
                    {
                        0x0C, 
                        0xEFFF
                    }
                })
                Method (RRIO, 4, NotSerialized)
                {
                    If ((Arg0 <= 0x03) && (Arg0 >= Zero))
                    {
                        Local0 = Match (DerefOf (DBPT [Arg0]), MEQ, Arg2, MTR, Zero, 
                            Zero)
                        If (Local0 != Ones)
                        {
                            Local1 = DerefOf (DerefOf (DDLT [Arg0]) [Zero])
                            Local2 = DerefOf (DerefOf (DDLT [Arg0]) [One])
                            Local0 <<= Local1
                            LPCD &= Local2
                            LPCD |= Local0
                            WX82 (Arg0, Arg1)
                        }
                    }

                    If (Arg0 == 0x08)
                    {
                        If (Arg2 == 0x0200)
                        {
                            WX82 (0x08, Arg0)
                        }
                        ElseIf (Arg2 == 0x0208)
                        {
                            WX82 (0x09, Arg0)
                        }
                    }

                    If ((Arg0 <= 0x0D) && (Arg0 >= 0x0A))
                    {
                        WX82 (Arg0, Arg1)
                    }
                }

                Method (WX82, 2, NotSerialized)
                {
                    Local0 = (One << Arg0)
                    If (Arg1)
                    {
                        LPCE |= Local0
                    }
                    Else
                    {
                        Local0 = ~Local0
                        LPCE &= Local0
                    }
                }

                Method (RDMA, 3, NotSerialized)
                {
                }

                Device (^PCIE)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x11)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xE0000000,         // Address Base
                            0x10000000,         // Address Length
                            _Y06)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y06._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y06._LEN, LEN1)  // _LEN: Length
                        BAS1 = PCIB /* \PCIB */
                        LEN1 = PCIL /* \PCIL */
                        Return (CRS) /* \_SB_.PCI0.PCIE.CRS_ */
                    }
                }

                Device (OMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y07)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y08)
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y09)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0A)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (APIC)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y07._LEN, ML01)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y07._BAS, MB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y08._LEN, ML02)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y08._BAS, MB02)  // _BAS: Base Address
                            MB01 = 0xFEC00000
                            ML01 = 0x1000
                            MB02 = 0xFEE00000
                            ML02 = 0x1000
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y09._LEN, ML03)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y09._BAS, MB03)  // _BAS: Base Address
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y0A._LEN, ML04)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y0A._BAS, MB04)  // _BAS: Base Address
                            MB03 = 0xFEC00000
                            ML03 = 0x1000
                            MB04 = 0xFEE00000
                            ML04 = 0x1000
                        }

                        Local0 = (0x05 << 0x0A)
                        If (IOST & Local0)
                        {
                            Return (CRS) /* \_SB_.PCI0.SBRG.OMSC.CRS_ */
                        }
                        Else
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.OMSC.CRS1 */
                        }
                    }
                }

                Device (^^RMEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x000A0000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0B)
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            _Y0C)
                        Memory32Fixed (ReadWrite,
                            0x00100000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0D)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0E)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.RMEM._Y0B._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0B._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0C._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0C._LEN, LEN2)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0D._LEN, LEN3)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0E._BAS, BAS4)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0E._LEN, LEN4)  // _LEN: Length
                        If (OSFL ()) {}
                        ElseIf (MG1B)
                        {
                            If (MG1B > 0x000C0000)
                            {
                                BAS1 = 0x000C0000
                                LEN1 = (MG1B - BAS1) /* \_SB_.RMEM._CRS.BAS1 */
                            }
                        }
                        Else
                        {
                            BAS1 = 0x000C0000
                            LEN1 = 0x00020000
                        }

                        LEN3 = (MG2B - 0x00100000)
                        BAS4 = MH1B /* \MH1B */
                        LEN4 = (Zero - BAS4) /* \_SB_.RMEM._CRS.BAS4 */
                        Return (CRS) /* \_SB_.RMEM.CRS_ */
                    }
                }

                Device (UAR1)
                {
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, Zero)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (CMPR) /* \_SB_.PCI0.SBRG.UAR1.CMPR */
                    }

                    Name (CMPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Method (UAR1._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Device (UAR2)
                {
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (One))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (One, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (DCRS (One, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, One)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (CMPR) /* \_SB_.PCI0.SBRG.UAR2.CMPR */
                    }

                    Name (CMPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Method (UAR2._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0A)
                        If (IOST & Local0)
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Method (PS2K._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, One))
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0C)
                        If (IOST & Local0)
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (M2R0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (M2R1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = (One << 0x0A)
                        If (IOST & Local0)
                        {
                            Return (M2R0) /* \_SB_.PCI0.SBRG.PS2M.M2R0 */
                        }
                        Else
                        {
                            Return (M2R1) /* \_SB_.PCI0.SBRG.PS2M.M2R1 */
                        }
                    }
                }

                Method (PS2M._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, One))
                }

                Device (SIOR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Method (_UID, 0, NotSerialized)  // _UID: Unique ID
                    {
                        Return (SPIO) /* \SPIO */
                    }

                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0F)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y10)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((SPIO != 0x03F0) && (SPIO > 0xF0))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y0F._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y0F._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y0F._LEN, GPL1)  // _LEN: Length
                            GP10 = SPIO /* \SPIO */
                            GP11 = SPIO /* \SPIO */
                            GPL1 = 0x02
                        }

                        If (IOGB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y10._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y10._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y10._LEN, GPL2)  // _LEN: Length
                            GP20 = IOGB /* \IOGB */
                            GP21 = IOGB /* \IOGB */
                            GPL2 = IOGL /* \IOGL */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIOR.CRS_ */
                    }
                }

                Name (DCAT, Package (0x15)
                {
                    0x03, 
                    0x02, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0x06, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF
                })
                Mutex (MUT0, 0x00)
                Method (ENFG, 1, NotSerialized)
                {
                    Acquire (MUT0, 0x0FFF)
                    LDN = Arg0
                }

                Method (EXFG, 0, NotSerialized)
                {
                    Release (MUT0)
                }

                Method (UHID, 1, NotSerialized)
                {
                    Return (0x0105D041)
                }

                Method (SIOS, 1, NotSerialized)
                {
                    Debug = "SIOS"
                }

                Method (SIOW, 1, NotSerialized)
                {
                    Debug = "SIOW"
                }

                OperationRegion (IOID, SystemIO, SPIO, 0x02)
                Field (IOID, ByteAcc, NoLock, Preserve)
                {
                    INDX,   8, 
                    DATA,   8
                }

                IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                    LDN,    8, 
                    Offset (0x30), 
                    ACTR,   8, 
                    Offset (0x60), 
                    IOAH,   8, 
                    IOAL,   8, 
                    IOH2,   8, 
                    IOL2,   8, 
                    Offset (0x70), 
                    INTR,   8, 
                    Offset (0x74), 
                    DMCH,   8, 
                    Offset (0xF0)
                }

                Method (CGLD, 1, NotSerialized)
                {
                    Return (DerefOf (DCAT [Arg0]))
                }

                Method (DSTA, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = ACTR /* \_SB_.PCI0.SBRG.ACTR */
                    EXFG ()
                    If (Local0 == 0xFF)
                    {
                        Return (Zero)
                    }

                    Local0 &= One
                    Local1 = (IOST | (Local0 << Arg0))
                    If (Local0)
                    {
                        Return (0x0F)
                    }
                    ElseIf ((One << Arg0) & Local1)
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (DCNT, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local1 = (IOAH << 0x08)
                    Local1 |= IOAL
                    If ((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero))
                    {
                        RDMA (Arg0, Arg1, Local1++)
                    }

                    ACTR = Arg1
                    RRIO (Arg0, Arg1, Local1, 0x08)
                    EXFG ()
                }

                Name (CRS1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y13)
                    IRQNoFlags (_Y11)
                        {}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y12)
                        {}
                })
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y11._INT, IRQM)  // _INT: Interrupts
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y12._DMA, DMAM)  // _DMA: Direct Memory Access
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y13._MIN, IO11)  // _MIN: Minimum Base Address
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y13._MAX, IO12)  // _MAX: Maximum Base Address
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y13._LEN, LEN1)  // _LEN: Length
                Name (CRS2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y16)
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y17)
                    IRQNoFlags (_Y14)
                        {6}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y15)
                        {2}
                })
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y14._INT, IRQE)  // _INT: Interrupts
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y15._DMA, DMAE)  // _DMA: Direct Memory Access
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y16._MIN, IO21)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y16._MAX, IO22)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y16._LEN, LEN2)  // _LEN: Length
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y17._MIN, IO31)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y17._MAX, IO32)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y17._LEN, LEN3)  // _LEN: Length
                Method (DCRS, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    IO11 = (IOAH << 0x08)
                    IO11 |= IOAL /* \_SB_.PCI0.SBRG.IO11 */
                    IO12 = IO11 /* \_SB_.PCI0.SBRG.IO11 */
                    Local0 = (FindSetRightBit (IO11) - One)
                    LEN1 = (One << Local0)
                    If (INTR)
                    {
                        IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.INTR */
                    }
                    Else
                    {
                        IRQM = Zero
                    }

                    If ((DMCH > 0x03) | ((Local1 = (DMCH & 0x03)) == Zero))
                    {
                        DMAM = Zero
                    }
                    Else
                    {
                        Local1 = (DMCH & 0x03)
                        DMAM = (One << Local1)
                    }

                    EXFG ()
                    Return (CRS1) /* \_SB_.PCI0.SBRG.CRS1 */
                }

                Method (DSRS, 2, NotSerialized)
                {
                    CreateWordField (Arg0, 0x09, IRQM)
                    CreateByteField (Arg0, 0x0C, DMAM)
                    CreateWordField (Arg0, 0x02, IO11)
                    ENFG (CGLD (Arg1))
                    Local1 = (IOAH << 0x08)
                    Local1 |= IOAL
                    RRIO (Arg1, Zero, Local1, 0x08)
                    RRIO (Arg1, One, IO11, 0x08)
                    IOAL = (IO11 & 0xFF)
                    IOAH = (IO11 >> 0x08)
                    If (IRQM)
                    {
                        FindSetRightBit (IRQM, Local0)
                        INTR = (Local0 - One)
                    }
                    Else
                    {
                        INTR = Zero
                    }

                    If (DMAM)
                    {
                        FindSetRightBit (DMAM, Local0)
                        DMCH = (Local0 - One)
                    }
                    Else
                    {
                        DMCH = 0x04
                    }

                    EXFG ()
                    DCNT (Arg1, One)
                }

                Device (SIO2)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Method (_UID, 0, NotSerialized)  // _UID: Unique ID
                    {
                        Return (SEIO) /* \SEIO */
                    }
                }

                Method (ENF2, 1, NotSerialized)
                {
                    IN2D = 0x87
                    IN2D = 0x87
                    LDN2 = Arg0
                }

                Method (EXF2, 0, NotSerialized)
                {
                    IN2D = 0xAA
                }

                Name (KBF2, One)
                Name (MSF2, One)
                Method (PS2K._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (!((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        If (Arg0)
                        {
                            KBF2 = One
                        }
                        Else
                        {
                            KBF2 = Zero
                        }
                    }
                }

                Method (PS2M._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (!((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        If (Arg0)
                        {
                            MSF2 = One
                        }
                        Else
                        {
                            MSF2 = Zero
                        }
                    }
                }

                Method (IO2P, 1, NotSerialized)
                {
                    Debug = "IO2P"
                    If (Arg0 == One)
                    {
                        ENF2 (0x0A)
                        Local0 = CRE3 /* \_SB_.PCI0.SBRG.CRE3 */
                        CRE0 = Zero
                        CRE4 &= 0xF3
                        If (KBF2)
                        {
                            Local0 = (CRE0 & 0x30)
                            CRE0 = (Local0 | 0x41)
                        }

                        If (MSF2)
                        {
                            Local0 = (CRE0 & 0x41)
                            CRE0 = (Local0 | 0x30)
                        }

                        Local0 = CRE3 /* \_SB_.PCI0.SBRG.CRE3 */
                        CRE4 = 0x0C
                        EXF2 ()
                        ENF2 (0x09)
                        OPT3 &= 0x1F
                        OPT3 |= 0x80
                        EXF2 ()
                    }
                }

                Method (IO2W, 1, NotSerialized)
                {
                    Debug = "SIOW"
                    If (Arg0 == One)
                    {
                        ENF2 (0x0A)
                        CRE4 &= 0xFB
                        CRE0 = Zero
                        Local0 = CRE3 /* \_SB_.PCI0.SBRG.CRE3 */
                        Local0 &= 0x03
                        While (Local0)
                        {
                            Local0 = CRE3 /* \_SB_.PCI0.SBRG.CRE3 */
                        }

                        EXF2 ()
                        ENF2 (0x09)
                        OPT3 &= 0x1F
                        EXF2 ()
                    }
                }

                Method (SIOH, 0, NotSerialized)
                {
                    Debug = "SIOH"
                    ENF2 (0x0A)
                    If (OPT3 & 0x10)
                    {
                        Notify (PS2K, 0x02) // Device Wake
                    }

                    If (OPT3 & 0x20)
                    {
                        Notify (PS2M, 0x02) // Device Wake
                    }

                    EXF2 ()
                }

                OperationRegion (IO2D, SystemIO, SEIO, 0x02)
                Field (IO2D, ByteAcc, NoLock, Preserve)
                {
                    IN2D,   8, 
                    DAT2,   8
                }

                IndexField (IN2D, DAT2, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                    LDN2,   8, 
                    Offset (0x30), 
                    ACT2,   8, 
                    Offset (0x60), 
                    SEAH,   8, 
                    SEAL,   8, 
                    SEH2,   8, 
                    SEL2,   8, 
                    Offset (0x70), 
                    INT2,   8, 
                    Offset (0xE0), 
                    CRE0,   8, 
                    CRE1,   8, 
                    CRE2,   8, 
                    CRE3,   8, 
                    CRE4,   8, 
                    Offset (0xF0), 
                    OPT0,   8, 
                    OPT1,   8, 
                    OPT2,   8, 
                    OPT3,   8, 
                    Offset (0xF6), 
                    OPT6,   8, 
                    Offset (0xF9), 
                    OPT9,   8
                }
            }

            Device (SAT1)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
                Name (REGF, One)
                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If (Arg0 == 0x02)
                    {
                        REGF = Arg1
                    }
                }

                Name (TIM0, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x78, 
                        0xB4, 
                        0xF0, 
                        0x0384
                    }, 

                    Package (0x04)
                    {
                        0x23, 
                        0x21, 
                        0x10, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0B, 
                        0x09, 
                        0x04, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        0x78, 
                        0x5A, 
                        0x3C, 
                        0x28, 
                        0x1E, 
                        0x14
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        One, 
                        0x02, 
                        One, 
                        0x02, 
                        One
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        One, 
                        One, 
                        One
                    }, 

                    Package (0x04)
                    {
                        0x04, 
                        0x03, 
                        0x02, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        One, 
                        Zero, 
                        Zero
                    }
                })
                Name (TMD0, Buffer (0x14) {})
                CreateDWordField (TMD0, Zero, PIO0)
                CreateDWordField (TMD0, 0x04, DMA0)
                CreateDWordField (TMD0, 0x08, PIO1)
                CreateDWordField (TMD0, 0x0C, DMA1)
                CreateDWordField (TMD0, 0x10, CHNF)
                OperationRegion (CFG2, PCI_Config, 0x40, 0x20)
                Field (CFG2, DWordAcc, NoLock, Preserve)
                {
                    PMPT,   4, 
                    PSPT,   4, 
                    PMRI,   6, 
                    Offset (0x02), 
                    SMPT,   4, 
                    SSPT,   4, 
                    SMRI,   6, 
                    Offset (0x04), 
                    PSRI,   4, 
                    SSRI,   4, 
                    Offset (0x08), 
                    PM3E,   1, 
                    PS3E,   1, 
                    SM3E,   1, 
                    SS3E,   1, 
                    Offset (0x0A), 
                    PMUT,   2, 
                        ,   2, 
                    PSUT,   2, 
                    Offset (0x0B), 
                    SMUT,   2, 
                        ,   2, 
                    SSUT,   2, 
                    Offset (0x0C), 
                    Offset (0x14), 
                    PM6E,   1, 
                    PS6E,   1, 
                    SM6E,   1, 
                    SS6E,   1, 
                    PMCR,   1, 
                    PSCR,   1, 
                    SMCR,   1, 
                    SSCR,   1, 
                        ,   4, 
                    PMAE,   1, 
                    PSAE,   1, 
                    SMAE,   1, 
                    SSAE,   1
                }

                Name (GMPT, Zero)
                Name (GMUE, Zero)
                Name (GMUT, Zero)
                Name (GMCR, Zero)
                Name (GSPT, Zero)
                Name (GSUE, Zero)
                Name (GSUT, Zero)
                Name (GSCR, Zero)
                Device (CHN0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (PSCR << One)
                        Local0 = (PMCR | Local1)
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << One)
                        Local3 |= Local4
                        Local1 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << One)
                        Local3 |= Local4
                        Local2 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (PMRI, Local1, PMUT, PSRI, Local2, PSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << One)
                        Local3 |= Local4
                        Local0 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << One)
                        Local3 |= Local4
                        Local1 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local1 |= Local3
                        GMPT = PMRI /* \_SB_.PCI0.SAT1.PMRI */
                        GMUE = Local0
                        GMUT = PMUT /* \_SB_.PCI0.SAT1.PMUT */
                        GMCR = PMCR /* \_SB_.PCI0.SAT1.PMCR */
                        GSPT = PSRI /* \_SB_.PCI0.SAT1.PSRI */
                        GSUE = Local1
                        GSUT = PSUT /* \_SB_.PCI0.SAT1.PSUT */
                        GSCR = PSCR /* \_SB_.PCI0.SAT1.PSCR */
                        STM ()
                        PMRI = GMPT /* \_SB_.PCI0.SAT1.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.SAT1.GMUE */
                        PMUT = GMUT /* \_SB_.PCI0.SAT1.GMUT */
                        PMCR = GMCR /* \_SB_.PCI0.SAT1.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.SAT1.GSUE */
                        PSUT = GSUT /* \_SB_.PCI0.SAT1.GSUT */
                        PSCR = GSCR /* \_SB_.PCI0.SAT1.GSCR */
                        If (Local0 & One)
                        {
                            PM3E = One
                        }
                        Else
                        {
                            PM3E = Zero
                        }

                        If (Local0 & 0x02)
                        {
                            PM6E = One
                        }
                        Else
                        {
                            PM6E = Zero
                        }

                        If (Local0 & 0x04)
                        {
                            PMAE = One
                        }
                        Else
                        {
                            PMAE = Zero
                        }

                        If (Local1 & One)
                        {
                            PS3E = One
                        }
                        Else
                        {
                            PS3E = Zero
                        }

                        If (Local1 & 0x02)
                        {
                            PS6E = One
                        }
                        Else
                        {
                            PS6E = Zero
                        }

                        If (Local1 & 0x04)
                        {
                            PSAE = One
                        }
                        Else
                        {
                            PSAE = Zero
                        }

                        ATA0 = GTF (Zero, Arg1)
                        ATA1 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA0))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA1))
                        }
                    }
                }

                Device (CHN1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (SSCR << One)
                        Local0 = (SMCR | Local1)
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << One)
                        Local3 |= Local4
                        Local1 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << One)
                        Local3 |= Local4
                        Local2 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (SMRI, Local1, SMUT, SSRI, Local2, SSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << One)
                        Local3 |= Local4
                        Local0 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << One)
                        Local3 |= Local4
                        Local1 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local1 |= Local3
                        GMPT = SMRI /* \_SB_.PCI0.SAT1.SMRI */
                        GMUE = Local0
                        GMUT = SMUT /* \_SB_.PCI0.SAT1.SMUT */
                        GMCR = SMCR /* \_SB_.PCI0.SAT1.SMCR */
                        GSPT = SSRI /* \_SB_.PCI0.SAT1.SSRI */
                        GSUE = Local1
                        GSUT = SSUT /* \_SB_.PCI0.SAT1.SSUT */
                        GSCR = SSCR /* \_SB_.PCI0.SAT1.SSCR */
                        STM ()
                        SMRI = GMPT /* \_SB_.PCI0.SAT1.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.SAT1.GMUE */
                        SMUT = GMUT /* \_SB_.PCI0.SAT1.GMUT */
                        SMCR = GMCR /* \_SB_.PCI0.SAT1.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.SAT1.GSUE */
                        SSUT = GSUT /* \_SB_.PCI0.SAT1.GSUT */
                        SSCR = GSCR /* \_SB_.PCI0.SAT1.GSCR */
                        If (Local0 & One)
                        {
                            SM3E = One
                        }
                        Else
                        {
                            SM3E = Zero
                        }

                        If (Local0 & 0x02)
                        {
                            SM6E = One
                        }
                        Else
                        {
                            SM6E = Zero
                        }

                        If (Local0 & 0x04)
                        {
                            SMAE = One
                        }
                        Else
                        {
                            SMAE = Zero
                        }

                        If (Local1 & One)
                        {
                            SS3E = One
                        }
                        Else
                        {
                            SS3E = Zero
                        }

                        If (Local1 & 0x02)
                        {
                            SS6E = One
                        }
                        Else
                        {
                            SS6E = Zero
                        }

                        If (Local1 & 0x04)
                        {
                            SSAE = One
                        }
                        Else
                        {
                            SSAE = Zero
                        }

                        ATA2 = GTF (Zero, Arg1)
                        ATA3 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA2))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA3))
                        }
                    }
                }

                Method (GTM, 7, Serialized)
                {
                    PIO0 = Ones
                    PIO1 = Ones
                    DMA0 = Ones
                    DMA1 = Ones
                    CHNF = 0x10
                    If (REGF) {}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.SAT1.TMD0 */
                    }

                    If (Arg1 & 0x20)
                    {
                        CHNF |= 0x02
                    }

                    Local6 = Match (DerefOf (TIM0 [One]), MEQ, Arg0, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (DerefOf (TIM0 [Zero]) [Local6])
                    DMA0 = Local7
                    PIO0 = Local7
                    If (Arg4 & 0x20)
                    {
                        CHNF |= 0x08
                    }

                    Local6 = Match (DerefOf (TIM0 [0x02]), MEQ, Arg3, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (DerefOf (TIM0 [Zero]) [Local6])
                    DMA1 = Local7
                    PIO1 = Local7
                    If (Arg1 & 0x07)
                    {
                        Local5 = Arg2
                        If (Arg1 & 0x02)
                        {
                            Local5 += 0x02
                        }

                        If (Arg1 & 0x04)
                        {
                            Local5 += 0x04
                        }

                        DMA0 = DerefOf (DerefOf (TIM0 [0x03]) [Local5])
                        CHNF |= One
                    }

                    If (Arg4 & 0x07)
                    {
                        Local5 = Arg5
                        If (Arg4 & 0x02)
                        {
                            Local5 += 0x02
                        }

                        If (Arg4 & 0x04)
                        {
                            Local5 += 0x04
                        }

                        DMA1 = DerefOf (DerefOf (TIM0 [0x03]) [Local5])
                        CHNF |= 0x04
                    }

                    Debug = TMD0 /* \_SB_.PCI0.SAT1.TMD0 */
                    Return (TMD0) /* \_SB_.PCI0.SAT1.TMD0 */
                }

                Method (STM, 0, Serialized)
                {
                    If (REGF)
                    {
                        GMUE = Zero
                        GMUT = Zero
                        GSUE = Zero
                        GSUT = Zero
                        If (CHNF & One)
                        {
                            Local0 = Match (DerefOf (TIM0 [0x03]), MLE, DMA0, MTR, Zero, 
                                Zero)
                            If (Local0 > 0x05)
                            {
                                Local0 = 0x05
                            }

                            GMUT = DerefOf (DerefOf (TIM0 [0x04]) [Local0])
                            GMUE |= One
                            If (Local0 > 0x02)
                            {
                                GMUE |= 0x02
                            }

                            If (Local0 > 0x04)
                            {
                                GMUE &= 0xFD
                                GMUE |= 0x04
                            }
                        }
                        ElseIf ((PIO0 == Ones) | (PIO0 == Zero))
                        {
                            If ((DMA0 < Ones) & (DMA0 > Zero))
                            {
                                PIO0 = DMA0 /* \_SB_.PCI0.SAT1.DMA0 */
                                GMUE |= 0x80
                            }
                        }

                        If (CHNF & 0x04)
                        {
                            Local0 = Match (DerefOf (TIM0 [0x03]), MLE, DMA1, MTR, Zero, 
                                Zero)
                            If (Local0 > 0x05)
                            {
                                Local0 = 0x05
                            }

                            GSUT = DerefOf (DerefOf (TIM0 [0x04]) [Local0])
                            GSUE |= One
                            If (Local0 > 0x02)
                            {
                                GSUE |= 0x02
                            }

                            If (Local0 > 0x04)
                            {
                                GSUE &= 0xFD
                                GSUE |= 0x04
                            }
                        }
                        ElseIf ((PIO1 == Ones) | (PIO1 == Zero))
                        {
                            If ((DMA1 < Ones) & (DMA1 > Zero))
                            {
                                PIO1 = DMA1 /* \_SB_.PCI0.SAT1.DMA1 */
                                GSUE |= 0x80
                            }
                        }

                        If (CHNF & 0x02)
                        {
                            GMUE |= 0x20
                        }

                        If (CHNF & 0x08)
                        {
                            GSUE |= 0x20
                        }

                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIO0, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = DerefOf (DerefOf (TIM0 [One]) [Local0])
                        GMPT = Local1
                        If (Local0 < 0x03)
                        {
                            GMUE |= 0x50
                        }

                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIO1, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = DerefOf (DerefOf (TIM0 [0x02]) [Local0])
                        GSPT = Local1
                        If (Local0 < 0x03)
                        {
                            GSUE |= 0x50
                        }
                    }
                }

                Name (AT01, Buffer (0x07)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF         /* ....... */
                })
                Name (AT02, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90         /* ....... */
                })
                Name (AT03, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6         /* ....... */
                })
                Name (AT04, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91         /* ....... */
                })
                Name (ATA0, Buffer (0x1D) {})
                Name (ATA1, Buffer (0x1D) {})
                Name (ATA2, Buffer (0x1D) {})
                Name (ATA3, Buffer (0x1D) {})
                Name (ATAB, Buffer (0x1D) {})
                CreateByteField (ATAB, Zero, CMDC)
                Method (GTFB, 3, Serialized)
                {
                    Local0 = (CMDC * 0x38)
                    Local1 = (Local0 + 0x08)
                    CreateField (ATAB, Local1, 0x38, CMDX)
                    Local0 = (CMDC * 0x07)
                    CreateByteField (ATAB, (Local0 + 0x02), A001)
                    CreateByteField (ATAB, (Local0 + 0x06), A005)
                    CMDX = Arg0
                    A001 = Arg1
                    A005 = Arg2
                    CMDC++
                }

                Method (GTF, 2, Serialized)
                {
                    Debug = Arg1
                    CMDC = Zero
                    Name (ID49, 0x0C00)
                    Name (ID59, Zero)
                    Name (ID53, 0x04)
                    Name (ID63, 0x0F00)
                    Name (ID88, 0x0F00)
                    Name (IRDY, One)
                    Name (PIOT, Zero)
                    Name (DMAT, Zero)
                    If (SizeOf (Arg1) == 0x0200)
                    {
                        CreateWordField (Arg1, 0x62, IW49)
                        ID49 = IW49 /* \_SB_.PCI0.SAT1.GTF_.IW49 */
                        CreateWordField (Arg1, 0x6A, IW53)
                        ID53 = IW53 /* \_SB_.PCI0.SAT1.GTF_.IW53 */
                        CreateWordField (Arg1, 0x7E, IW63)
                        ID63 = IW63 /* \_SB_.PCI0.SAT1.GTF_.IW63 */
                        CreateWordField (Arg1, 0x76, IW59)
                        ID59 = IW59 /* \_SB_.PCI0.SAT1.GTF_.IW59 */
                        CreateWordField (Arg1, 0xB0, IW88)
                        ID88 = IW88 /* \_SB_.PCI0.SAT1.GTF_.IW88 */
                    }

                    Local7 = 0xA0
                    If (Arg0)
                    {
                        Local7 = 0xB0
                        IRDY = (CHNF & 0x08)
                        If (CHNF & 0x10)
                        {
                            PIOT = PIO1 /* \_SB_.PCI0.SAT1.PIO1 */
                        }
                        Else
                        {
                            PIOT = PIO0 /* \_SB_.PCI0.SAT1.PIO0 */
                        }

                        If (CHNF & 0x04)
                        {
                            If (CHNF & 0x10)
                            {
                                DMAT = DMA1 /* \_SB_.PCI0.SAT1.DMA1 */
                            }
                            Else
                            {
                                DMAT = DMA0 /* \_SB_.PCI0.SAT1.DMA0 */
                            }
                        }
                    }
                    Else
                    {
                        IRDY = (CHNF & 0x02)
                        PIOT = PIO0 /* \_SB_.PCI0.SAT1.PIO0 */
                        If (CHNF & One)
                        {
                            DMAT = DMA0 /* \_SB_.PCI0.SAT1.DMA0 */
                        }
                    }

                    If (((ID53 & 0x04) && (ID88 & 0xFF00)) && DMAT)
                    {
                        Local1 = Match (DerefOf (TIM0 [0x03]), MLE, DMAT, MTR, Zero, 
                            Zero)
                        If (Local1 > 0x05)
                        {
                            Local1 = 0x05
                        }

                        GTFB (AT01, (0x40 | Local1), Local7)
                    }
                    ElseIf ((ID63 & 0xFF00) && PIOT)
                    {
                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIOT, MTR, Zero, 
                            Zero) & 0x03)
                        Local1 = (0x20 | DerefOf (DerefOf (TIM0 [0x07]) [Local0]))
                        GTFB (AT01, Local1, Local7)
                    }

                    If (IRDY)
                    {
                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIOT, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = (0x08 | DerefOf (DerefOf (TIM0 [0x06]) [Local0]))
                        GTFB (AT01, Local1, Local7)
                    }
                    ElseIf (ID49 & 0x0400)
                    {
                        GTFB (AT01, One, Local7)
                    }

                    If ((ID59 & 0x0100) && (ID59 & 0xFF))
                    {
                        GTFB (AT03, (ID59 & 0xFF), Local7)
                    }

                    Debug = ATAB /* \_SB_.PCI0.SAT1.ATAB */
                    Return (ATAB) /* \_SB_.PCI0.SAT1.ATAB */
                }

                Method (RATA, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, CMDN)
                    Local0 = (CMDN * 0x38)
                    CreateField (Arg0, 0x08, Local0, RETB)
                    Debug = RETB /* \_SB_.PCI0.SAT1.RATA.RETB */
                    Return (Concatenate (RETB, FZTF))
                }
            }

            Device (USB0)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, One)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL () == One) || (OSFL () == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x03, 0x04))
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, One)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL () == One) || (OSFL () == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x04))
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, One)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL () == One) || (OSFL () == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0C, 0x04))
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, One)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL () == One) || (OSFL () == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x20, 0x04))
                }
            }

            Device (EUSB)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, One)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL () == One) || (OSFL () == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x001A0001)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, One)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL () == One) || (OSFL () == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x05, 0x04))
                }
            }

            Device (USB6)
            {
                Name (_ADR, 0x001A0002)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, One)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL () == One) || (OSFL () == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x20, 0x04))
                }
            }

            Device (USBE)
            {
                Name (_ADR, 0x001A0007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }
            }

            Device (P0P4)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }
            }

            Device (P0P5)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (P0P6)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (P0P7)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (P0P8)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (P0P9)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (HEC2)
            {
                Name (_ADR, 0x00120001)  // _ADR: Address
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadWrite,
                        0xFED12000,         // Address Base
                        0x00000010,         // Address Length
                        )
                })
                OperationRegion (HCSR, SystemMemory, H2BS, 0x10)
                Field (HCSR, DWordAcc, NoLock, Preserve)
                {
                    CBWW,   32, 
                    HIE,    1, 
                    HIS,    1, 
                    HIG,    1, 
                    HRD,    1, 
                    HRS,    1, 
                    Offset (0x05), 
                    HRP,    8, 
                    HWP,    8, 
                    HBD,    8, 
                    CBRW,   32, 
                    MIE,    1, 
                    MIS,    1, 
                    MIG,    1, 
                    MRD,    1, 
                    MRS,    1, 
                    Offset (0x0D), 
                    MRP,    8, 
                    MWP,    8, 
                    MBD,    8
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    WAK ()
                }

                Method (WAK, 0, Serialized)
                {
                    HRD = One
                    HIE = One
                    HIG = One
                }

                Method (PTS, 0, Serialized)
                {
                    HIE = Zero
                    HRD = Zero
                    HIG = One
                }

                Method (HSCI, 0, Serialized)
                {
                    If (HIS)
                    {
                        HIS = One
                        If (MRS)
                        {
                            HRS = One
                            HIG = One
                        }
                        Else
                        {
                            DBG8 = 0x77
                            If (MRD)
                            {
                                If (!HRD)
                                {
                                    HRS = Zero
                                    HRD = One
                                    HIG = One
                                }

                                If (MWP != MRP)
                                {
                                    Local0 = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                                    Local0 = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                                    If ((Local0 & 0xFF) == Zero)
                                    {
                                        PSTE = ((Local0 >> 0x10) & 0xFF)
                                        TSTE = ((Local0 >> 0x18) & 0xFF)
                                        Notify (\_PR.P001, 0x80) // Performance Capability Change
                                        Notify (\_PR.P001, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P002, 0x80) // Performance Capability Change
                                        Notify (\_PR.P002, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P003, 0x80) // Performance Capability Change
                                        Notify (\_PR.P003, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P004, 0x80) // Performance Capability Change
                                        Notify (\_PR.P004, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P005, 0x80) // Performance Capability Change
                                        Notify (\_PR.P005, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P006, 0x80) // Performance Capability Change
                                        Notify (\_PR.P006, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P007, 0x80) // Performance Capability Change
                                        Notify (\_PR.P007, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P008, 0x80) // Performance Capability Change
                                        Notify (\_PR.P008, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P009, 0x80) // Performance Capability Change
                                        Notify (\_PR.P009, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P010, 0x80) // Performance Capability Change
                                        Notify (\_PR.P010, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P011, 0x80) // Performance Capability Change
                                        Notify (\_PR.P011, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P012, 0x80) // Performance Capability Change
                                        Notify (\_PR.P012, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P013, 0x80) // Performance Capability Change
                                        Notify (\_PR.P013, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P014, 0x80) // Performance Capability Change
                                        Notify (\_PR.P014, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P015, 0x80) // Performance Capability Change
                                        Notify (\_PR.P015, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P016, 0x80) // Performance Capability Change
                                        Notify (\_PR.P016, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P017, 0x80) // Performance Capability Change
                                        Notify (\_PR.P017, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P018, 0x80) // Performance Capability Change
                                        Notify (\_PR.P018, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P019, 0x80) // Performance Capability Change
                                        Notify (\_PR.P019, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P020, 0x80) // Performance Capability Change
                                        Notify (\_PR.P020, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P021, 0x80) // Performance Capability Change
                                        Notify (\_PR.P021, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P022, 0x80) // Performance Capability Change
                                        Notify (\_PR.P022, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P023, 0x80) // Performance Capability Change
                                        Notify (\_PR.P023, 0x82) // Throttling Capability Change
                                        Notify (\_PR.P024, 0x80) // Performance Capability Change
                                        Notify (\_PR.P024, 0x82) // Throttling Capability Change
                                    }
                                }
                            }
                        }
                    }
                }

                Scope (\_GPE)
                {
                    OperationRegion (TCOS, SystemIO, 0x0864, 0x02)
                    Field (TCOS, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x01), 
                            ,   1, 
                        DSCI,   1
                    }

                    Method (_L06, 0, Serialized)  // _Lxx: Level-Triggered GPE
                    {
                        If (DSCI)
                        {
                            DSCI = One
                            \_SB.PCI0.HEC2.HSCI ()
                        }
                    }
                }
            }

            Device (NPE1)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Device (KWL1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PMCS, PCI_Config, 0x44, 0x02)
                    Field (PMCS, ByteAcc, NoLock, Preserve)
                    {
                        POST,   2
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        Stall (0x1E)
                        POST = Zero
                        Stall (0x1E)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        POST = 0x03
                    }
                }

                Device (KWL2)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PMCS, PCI_Config, 0x44, 0x02)
                    Field (PMCS, ByteAcc, NoLock, Preserve)
                    {
                        POST,   2
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        Stall (0x1E)
                        POST = Zero
                        Stall (0x1E)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        POST = 0x03
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PR11) /* \_SB_.PR11 */
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                Name (^NATA, Package (0x01)
                {
                    0x001F0002
                })
                Name (\FZTF, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         /* ....... */
                })
                Name (REGF, One)
                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If (Arg0 == 0x02)
                    {
                        REGF = Arg1
                    }
                }

                Name (TIM0, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x78, 
                        0xB4, 
                        0xF0, 
                        0x0384
                    }, 

                    Package (0x04)
                    {
                        0x23, 
                        0x21, 
                        0x10, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0B, 
                        0x09, 
                        0x04, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        0x78, 
                        0x5A, 
                        0x3C, 
                        0x28, 
                        0x1E, 
                        0x14
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        One, 
                        0x02, 
                        One, 
                        0x02, 
                        One
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        One, 
                        One, 
                        One
                    }, 

                    Package (0x04)
                    {
                        0x04, 
                        0x03, 
                        0x02, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        One, 
                        Zero, 
                        Zero
                    }
                })
                Name (TMD0, Buffer (0x14) {})
                CreateDWordField (TMD0, Zero, PIO0)
                CreateDWordField (TMD0, 0x04, DMA0)
                CreateDWordField (TMD0, 0x08, PIO1)
                CreateDWordField (TMD0, 0x0C, DMA1)
                CreateDWordField (TMD0, 0x10, CHNF)
                OperationRegion (CFG2, PCI_Config, 0x40, 0x20)
                Field (CFG2, DWordAcc, NoLock, Preserve)
                {
                    PMPT,   4, 
                    PSPT,   4, 
                    PMRI,   6, 
                    Offset (0x02), 
                    SMPT,   4, 
                    SSPT,   4, 
                    SMRI,   6, 
                    Offset (0x04), 
                    PSRI,   4, 
                    SSRI,   4, 
                    Offset (0x08), 
                    PM3E,   1, 
                    PS3E,   1, 
                    SM3E,   1, 
                    SS3E,   1, 
                    Offset (0x0A), 
                    PMUT,   2, 
                        ,   2, 
                    PSUT,   2, 
                    Offset (0x0B), 
                    SMUT,   2, 
                        ,   2, 
                    SSUT,   2, 
                    Offset (0x0C), 
                    Offset (0x14), 
                    PM6E,   1, 
                    PS6E,   1, 
                    SM6E,   1, 
                    SS6E,   1, 
                    PMCR,   1, 
                    PSCR,   1, 
                    SMCR,   1, 
                    SSCR,   1, 
                        ,   4, 
                    PMAE,   1, 
                    PSAE,   1, 
                    SMAE,   1, 
                    SSAE,   1
                }

                Name (GMPT, Zero)
                Name (GMUE, Zero)
                Name (GMUT, Zero)
                Name (GMCR, Zero)
                Name (GSPT, Zero)
                Name (GSUE, Zero)
                Name (GSUT, Zero)
                Name (GSCR, Zero)
                Device (CHN0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (PSCR << One)
                        Local0 = (PMCR | Local1)
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << One)
                        Local3 |= Local4
                        Local1 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << One)
                        Local3 |= Local4
                        Local2 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (PMRI, Local1, PMUT, PSRI, Local2, PSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << One)
                        Local3 |= Local4
                        Local0 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << One)
                        Local3 |= Local4
                        Local1 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local1 |= Local3
                        GMPT = PMRI /* \_SB_.PCI0.SATA.PMRI */
                        GMUE = Local0
                        GMUT = PMUT /* \_SB_.PCI0.SATA.PMUT */
                        GMCR = PMCR /* \_SB_.PCI0.SATA.PMCR */
                        GSPT = PSRI /* \_SB_.PCI0.SATA.PSRI */
                        GSUE = Local1
                        GSUT = PSUT /* \_SB_.PCI0.SATA.PSUT */
                        GSCR = PSCR /* \_SB_.PCI0.SATA.PSCR */
                        STM ()
                        PMRI = GMPT /* \_SB_.PCI0.SATA.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.SATA.GMUE */
                        PMUT = GMUT /* \_SB_.PCI0.SATA.GMUT */
                        PMCR = GMCR /* \_SB_.PCI0.SATA.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.SATA.GSUE */
                        PSUT = GSUT /* \_SB_.PCI0.SATA.GSUT */
                        PSCR = GSCR /* \_SB_.PCI0.SATA.GSCR */
                        If (Local0 & One)
                        {
                            PM3E = One
                        }
                        Else
                        {
                            PM3E = Zero
                        }

                        If (Local0 & 0x02)
                        {
                            PM6E = One
                        }
                        Else
                        {
                            PM6E = Zero
                        }

                        If (Local0 & 0x04)
                        {
                            PMAE = One
                        }
                        Else
                        {
                            PMAE = Zero
                        }

                        If (Local1 & One)
                        {
                            PS3E = One
                        }
                        Else
                        {
                            PS3E = Zero
                        }

                        If (Local1 & 0x02)
                        {
                            PS6E = One
                        }
                        Else
                        {
                            PS6E = Zero
                        }

                        If (Local1 & 0x04)
                        {
                            PSAE = One
                        }
                        Else
                        {
                            PSAE = Zero
                        }

                        ATA0 = GTF (Zero, Arg1)
                        ATA1 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA0))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA1))
                        }
                    }
                }

                Device (CHN1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (SSCR << One)
                        Local0 = (SMCR | Local1)
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << One)
                        Local3 |= Local4
                        Local1 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << One)
                        Local3 |= Local4
                        Local2 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (SMRI, Local1, SMUT, SSRI, Local2, SSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << One)
                        Local3 |= Local4
                        Local0 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << One)
                        Local3 |= Local4
                        Local1 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local1 |= Local3
                        GMPT = SMRI /* \_SB_.PCI0.SATA.SMRI */
                        GMUE = Local0
                        GMUT = SMUT /* \_SB_.PCI0.SATA.SMUT */
                        GMCR = SMCR /* \_SB_.PCI0.SATA.SMCR */
                        GSPT = SSRI /* \_SB_.PCI0.SATA.SSRI */
                        GSUE = Local1
                        GSUT = SSUT /* \_SB_.PCI0.SATA.SSUT */
                        GSCR = SSCR /* \_SB_.PCI0.SATA.SSCR */
                        STM ()
                        SMRI = GMPT /* \_SB_.PCI0.SATA.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.SATA.GMUE */
                        SMUT = GMUT /* \_SB_.PCI0.SATA.GMUT */
                        SMCR = GMCR /* \_SB_.PCI0.SATA.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.SATA.GSUE */
                        SSUT = GSUT /* \_SB_.PCI0.SATA.GSUT */
                        SSCR = GSCR /* \_SB_.PCI0.SATA.GSCR */
                        If (Local0 & One)
                        {
                            SM3E = One
                        }
                        Else
                        {
                            SM3E = Zero
                        }

                        If (Local0 & 0x02)
                        {
                            SM6E = One
                        }
                        Else
                        {
                            SM6E = Zero
                        }

                        If (Local0 & 0x04)
                        {
                            SMAE = One
                        }
                        Else
                        {
                            SMAE = Zero
                        }

                        If (Local1 & One)
                        {
                            SS3E = One
                        }
                        Else
                        {
                            SS3E = Zero
                        }

                        If (Local1 & 0x02)
                        {
                            SS6E = One
                        }
                        Else
                        {
                            SS6E = Zero
                        }

                        If (Local1 & 0x04)
                        {
                            SSAE = One
                        }
                        Else
                        {
                            SSAE = Zero
                        }

                        ATA2 = GTF (Zero, Arg1)
                        ATA3 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA2))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA3))
                        }
                    }
                }

                Method (GTM, 7, Serialized)
                {
                    PIO0 = Ones
                    PIO1 = Ones
                    DMA0 = Ones
                    DMA1 = Ones
                    CHNF = 0x10
                    If (REGF) {}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.SATA.TMD0 */
                    }

                    If (Arg1 & 0x20)
                    {
                        CHNF |= 0x02
                    }

                    Local6 = Match (DerefOf (TIM0 [One]), MEQ, Arg0, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (DerefOf (TIM0 [Zero]) [Local6])
                    DMA0 = Local7
                    PIO0 = Local7
                    If (Arg4 & 0x20)
                    {
                        CHNF |= 0x08
                    }

                    Local6 = Match (DerefOf (TIM0 [0x02]), MEQ, Arg3, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (DerefOf (TIM0 [Zero]) [Local6])
                    DMA1 = Local7
                    PIO1 = Local7
                    If (Arg1 & 0x07)
                    {
                        Local5 = Arg2
                        If (Arg1 & 0x02)
                        {
                            Local5 += 0x02
                        }

                        If (Arg1 & 0x04)
                        {
                            Local5 += 0x04
                        }

                        DMA0 = DerefOf (DerefOf (TIM0 [0x03]) [Local5])
                        CHNF |= One
                    }

                    If (Arg4 & 0x07)
                    {
                        Local5 = Arg5
                        If (Arg4 & 0x02)
                        {
                            Local5 += 0x02
                        }

                        If (Arg4 & 0x04)
                        {
                            Local5 += 0x04
                        }

                        DMA1 = DerefOf (DerefOf (TIM0 [0x03]) [Local5])
                        CHNF |= 0x04
                    }

                    Debug = TMD0 /* \_SB_.PCI0.SATA.TMD0 */
                    Return (TMD0) /* \_SB_.PCI0.SATA.TMD0 */
                }

                Method (STM, 0, Serialized)
                {
                    If (REGF)
                    {
                        GMUE = Zero
                        GMUT = Zero
                        GSUE = Zero
                        GSUT = Zero
                        If (CHNF & One)
                        {
                            Local0 = Match (DerefOf (TIM0 [0x03]), MLE, DMA0, MTR, Zero, 
                                Zero)
                            If (Local0 > 0x05)
                            {
                                Local0 = 0x05
                            }

                            GMUT = DerefOf (DerefOf (TIM0 [0x04]) [Local0])
                            GMUE |= One
                            If (Local0 > 0x02)
                            {
                                GMUE |= 0x02
                            }

                            If (Local0 > 0x04)
                            {
                                GMUE &= 0xFD
                                GMUE |= 0x04
                            }
                        }
                        ElseIf ((PIO0 == Ones) | (PIO0 == Zero))
                        {
                            If ((DMA0 < Ones) & (DMA0 > Zero))
                            {
                                PIO0 = DMA0 /* \_SB_.PCI0.SATA.DMA0 */
                                GMUE |= 0x80
                            }
                        }

                        If (CHNF & 0x04)
                        {
                            Local0 = Match (DerefOf (TIM0 [0x03]), MLE, DMA1, MTR, Zero, 
                                Zero)
                            If (Local0 > 0x05)
                            {
                                Local0 = 0x05
                            }

                            GSUT = DerefOf (DerefOf (TIM0 [0x04]) [Local0])
                            GSUE |= One
                            If (Local0 > 0x02)
                            {
                                GSUE |= 0x02
                            }

                            If (Local0 > 0x04)
                            {
                                GSUE &= 0xFD
                                GSUE |= 0x04
                            }
                        }
                        ElseIf ((PIO1 == Ones) | (PIO1 == Zero))
                        {
                            If ((DMA1 < Ones) & (DMA1 > Zero))
                            {
                                PIO1 = DMA1 /* \_SB_.PCI0.SATA.DMA1 */
                                GSUE |= 0x80
                            }
                        }

                        If (CHNF & 0x02)
                        {
                            GMUE |= 0x20
                        }

                        If (CHNF & 0x08)
                        {
                            GSUE |= 0x20
                        }

                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIO0, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = DerefOf (DerefOf (TIM0 [One]) [Local0])
                        GMPT = Local1
                        If (Local0 < 0x03)
                        {
                            GMUE |= 0x50
                        }

                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIO1, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = DerefOf (DerefOf (TIM0 [0x02]) [Local0])
                        GSPT = Local1
                        If (Local0 < 0x03)
                        {
                            GSUE |= 0x50
                        }
                    }
                }

                Name (AT01, Buffer (0x07)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF         /* ....... */
                })
                Name (AT02, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90         /* ....... */
                })
                Name (AT03, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6         /* ....... */
                })
                Name (AT04, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91         /* ....... */
                })
                Name (ATA0, Buffer (0x1D) {})
                Name (ATA1, Buffer (0x1D) {})
                Name (ATA2, Buffer (0x1D) {})
                Name (ATA3, Buffer (0x1D) {})
                Name (ATAB, Buffer (0x1D) {})
                CreateByteField (ATAB, Zero, CMDC)
                Method (GTFB, 3, Serialized)
                {
                    Local0 = (CMDC * 0x38)
                    Local1 = (Local0 + 0x08)
                    CreateField (ATAB, Local1, 0x38, CMDX)
                    Local0 = (CMDC * 0x07)
                    CreateByteField (ATAB, (Local0 + 0x02), A001)
                    CreateByteField (ATAB, (Local0 + 0x06), A005)
                    CMDX = Arg0
                    A001 = Arg1
                    A005 = Arg2
                    CMDC++
                }

                Method (GTF, 2, Serialized)
                {
                    Debug = Arg1
                    CMDC = Zero
                    Name (ID49, 0x0C00)
                    Name (ID59, Zero)
                    Name (ID53, 0x04)
                    Name (ID63, 0x0F00)
                    Name (ID88, 0x0F00)
                    Name (IRDY, One)
                    Name (PIOT, Zero)
                    Name (DMAT, Zero)
                    If (SizeOf (Arg1) == 0x0200)
                    {
                        CreateWordField (Arg1, 0x62, IW49)
                        ID49 = IW49 /* \_SB_.PCI0.SATA.GTF_.IW49 */
                        CreateWordField (Arg1, 0x6A, IW53)
                        ID53 = IW53 /* \_SB_.PCI0.SATA.GTF_.IW53 */
                        CreateWordField (Arg1, 0x7E, IW63)
                        ID63 = IW63 /* \_SB_.PCI0.SATA.GTF_.IW63 */
                        CreateWordField (Arg1, 0x76, IW59)
                        ID59 = IW59 /* \_SB_.PCI0.SATA.GTF_.IW59 */
                        CreateWordField (Arg1, 0xB0, IW88)
                        ID88 = IW88 /* \_SB_.PCI0.SATA.GTF_.IW88 */
                    }

                    Local7 = 0xA0
                    If (Arg0)
                    {
                        Local7 = 0xB0
                        IRDY = (CHNF & 0x08)
                        If (CHNF & 0x10)
                        {
                            PIOT = PIO1 /* \_SB_.PCI0.SATA.PIO1 */
                        }
                        Else
                        {
                            PIOT = PIO0 /* \_SB_.PCI0.SATA.PIO0 */
                        }

                        If (CHNF & 0x04)
                        {
                            If (CHNF & 0x10)
                            {
                                DMAT = DMA1 /* \_SB_.PCI0.SATA.DMA1 */
                            }
                            Else
                            {
                                DMAT = DMA0 /* \_SB_.PCI0.SATA.DMA0 */
                            }
                        }
                    }
                    Else
                    {
                        IRDY = (CHNF & 0x02)
                        PIOT = PIO0 /* \_SB_.PCI0.SATA.PIO0 */
                        If (CHNF & One)
                        {
                            DMAT = DMA0 /* \_SB_.PCI0.SATA.DMA0 */
                        }
                    }

                    If (((ID53 & 0x04) && (ID88 & 0xFF00)) && DMAT)
                    {
                        Local1 = Match (DerefOf (TIM0 [0x03]), MLE, DMAT, MTR, Zero, 
                            Zero)
                        If (Local1 > 0x05)
                        {
                            Local1 = 0x05
                        }

                        GTFB (AT01, (0x40 | Local1), Local7)
                    }
                    ElseIf ((ID63 & 0xFF00) && PIOT)
                    {
                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIOT, MTR, Zero, 
                            Zero) & 0x03)
                        Local1 = (0x20 | DerefOf (DerefOf (TIM0 [0x07]) [Local0]))
                        GTFB (AT01, Local1, Local7)
                    }

                    If (IRDY)
                    {
                        Local0 = (Match (DerefOf (TIM0 [Zero]), MGE, PIOT, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = (0x08 | DerefOf (DerefOf (TIM0 [0x06]) [Local0]))
                        GTFB (AT01, Local1, Local7)
                    }
                    ElseIf (ID49 & 0x0400)
                    {
                        GTFB (AT01, One, Local7)
                    }

                    If ((ID59 & 0x0100) && (ID59 & 0xFF))
                    {
                        GTFB (AT03, (ID59 & 0xFF), Local7)
                    }

                    Debug = ATAB /* \_SB_.PCI0.SATA.ATAB */
                    Return (ATAB) /* \_SB_.PCI0.SATA.ATAB */
                }

                Method (RATA, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, CMDN)
                    Local0 = (CMDN * 0x38)
                    CreateField (Arg0, 0x08, Local0, RETB)
                    Debug = RETB /* \_SB_.PCI0.SATA.RATA.RETB */
                    Return (Concatenate (RETB, FZTF))
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.NPE3, 0x02) // Device Wake
                Notify (\_SB.PCI0.NPE5, 0x02) // Device Wake
                Notify (\_SB.PCI0.NPE7, 0x02) // Device Wake
                Notify (\_SB.PCI0.NPE8, 0x02) // Device Wake
                Notify (\_SB.PCI0.NPE9, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P4, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P5, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P6, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P7, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P8, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P9, 0x02) // Device Wake
                Notify (\_SB.PCI0.NPE1, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                \_SB.PCI0.SBRG.SIOH ()
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                \_SB.PCI0.SBRG.SIOH ()
            }

            Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.USB0, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L20, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB6, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.EUSB, 0x02) // Device Wake
                Notify (\_SB.PCI0.USBE, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x08, 0x04))
            }
        }
    }

    OperationRegion (_SB.PCI0.SBRG.PIX0, PCI_Config, 0x60, 0x0C)
    Field (\_SB.PCI0.SBRG.PIX0, ByteAcc, NoLock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        Offset (0x08), 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8
    }

    Scope (_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        CreateWordField (BUFA, One, IRA0)
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRA & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRA & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRB & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRB & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRC & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRD & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRD & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRE & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRE & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRF & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRF & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRG & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRG & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRH & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRH & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, Zero)
        Name (XNPT, One)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If (Local1 == Ones)
            {
                Return (Zero)
            }
            Else
            {
                If (Local1 && 0x00010000)
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (One)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            CreateDWordField (Arg3, Zero, CDW1)
            CreateDWordField (Arg3, 0x04, CDW2)
            CreateDWordField (Arg3, 0x08, CDW3)
            If (Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            {
                SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                If ((SUPP & 0x16) != 0x16)
                {
                    CTRL &= 0x1E
                }

                If (!PEHP)
                {
                    CTRL &= 0x1E
                }

                If (!SHPC)
                {
                    CTRL &= 0x1D
                }

                If (!PEPM)
                {
                    CTRL &= 0x1B
                }

                If (!PEER)
                {
                    CTRL &= 0x17
                }

                If (!PECS)
                {
                    CTRL &= 0x0F
                }

                If (~(CDW1 & One))
                {
                    If (CTRL & One) {}
                    If (CTRL & 0x04) {}
                    If (CTRL & 0x10) {}
                }

                If (Arg1 != One)
                {
                    CDW1 |= 0x08
                }

                If (CDW3 != CTRL)
                {
                    CDW1 |= 0x10
                }

                CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                Return (Arg3)
            }
            Else
            {
                CDW1 |= 0x04
                Return (Arg3)
            }
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        OperationRegion (BMIO, SystemIO, 0x0CA2, One)
        Field (BMIO, ByteAcc, NoLock, Preserve)
        {
            BMCD,   8
        }

        OperationRegion (MIPT, SystemIO, SMIT, One)
        Field (MIPT, ByteAcc, NoLock, Preserve)
        {
            PSMI,   8
        }

        Device (IPMI)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0CA2,             // Range Minimum
                    0x0CA2,             // Range Maximum
                    0x00,               // Alignment
                    0x02,               // Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (BMCD == 0xFF)
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }
        }

        Method (BMCW, 1, NotSerialized)
        {
            PSMI = 0x30
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Name (CRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y18, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y19, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y1A, AddressRangeMemory, TypeStatic)
            })
            CreateDWordField (CRS, \_SB.PCI0._Y18._MIN, MIN5)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y18._MAX, MAX5)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y18._LEN, LEN5)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y19._MIN, MIN6)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y19._MAX, MAX6)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y19._LEN, LEN6)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y1A._MIN, MIN7)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y1A._MAX, MAX7)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y1A._LEN, LEN7)  // _LEN: Length
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = MG1L /* \MG1L */
                If (Local0)
                {
                    MIN5 = MG1B /* \MG1B */
                    LEN5 = MG1L /* \MG1L */
                    MAX5 = (MIN5 + Local0--)
                }

                MIN6 = MG2B /* \MG2B */
                LEN6 = MG2L /* \MG2L */
                Local0 = MG2L /* \MG2L */
                MAX6 = (MIN6 + Local0--)
                MIN7 = MG3B /* \MG3B */
                LEN7 = MG3L /* \MG3L */
                Local0 = MG3L /* \MG3L */
                MAX7 = (MIN7 + Local0--)
                Return (CRS) /* \_SB_.PCI0.CRS_ */
            }
        }
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        PTS (Arg0)
        WAKP [Zero] = Zero
        WAKP [One] = Zero
        If ((Arg0 == 0x04) && (OSFL () == 0x02))
        {
            Sleep (0x0BB8)
        }

        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        OSTP = OSYS ()
        AAXB = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        Notify (\_SB.PWRB, 0x02) // Device Wake
        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }

        Return (WAKP) /* \WAKP */
    }

    Scope (_SB.PCI0)
    {
        OperationRegion (TVID, SystemMemory, 0xFED40F00, 0x02)
        Field (TVID, WordAcc, NoLock, Preserve)
        {
            VIDT,   16
        }
    }

    Device (_SB.PCI0.SBRG.TPM)
    {
        Name (_HID, EisaId ("PNP0C31"))  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_UID, One)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (TPMF)
            {
                If (VIDT != 0x8086)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Device (_SB.PCI0.ITPM)
    {
        Name (_HID, "INTC0102")  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_UID, One)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (TPMF)
            {
                If (VIDT == 0x8086)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.SBRG.TPM)
    {
        Name (TAAX, Zero)
        OperationRegion (MIPT, SystemIO, SMIT, One)
        Field (MIPT, ByteAcc, NoLock, Preserve)
        {
            PSMI,   8
        }

        Name (PPI1, Package (0x02)
        {
            Zero, 
            Zero
        })
        Name (PPI2, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        Name (MBUF, Buffer (0x04) {})
        CreateByteField (MBUF, Zero, BUF0)
        CreateByteField (MBUF, One, BUF1)
        CreateByteField (MBUF, 0x02, BUF2)
        CreateByteField (MBUF, 0x03, BUF3)
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If (Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */)
            {
                Name (TTT0, Zero)
                TTT0 = ToInteger (Arg2)
                If (TTT0 == Zero)
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             /* . */
                    })
                }
                ElseIf (TTT0 == One)
                {
                    Return ("1.0")
                }
                ElseIf (TTT0 == 0x02)
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (Zero)
                }
                ElseIf (TTT0 == 0x03)
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0x0F
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    PPI1 [Zero] = Zero
                    PPI1 [One] = Local3
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (PPI1) /* \_SB_.PCI0.SBRG.TPM_.PPI1 */
                }
                ElseIf (TTT0 == 0x04)
                {
                    Return (0x02)
                }
                ElseIf (TTT0 == 0x05)
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = (BUF2 >> 0x04)
                    BUF0 = CMER /* \CMER */
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local6 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    Local4 = (CMER + One)
                    BUF0 = Local4
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local7 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    Local2 = (Local7 * 0x0100)
                    Local2 += Local6
                    PPI2 [Zero] = Zero
                    PPI2 [One] = Local3
                    If (Local2 == 0xFFF0)
                    {
                        PPI2 [0x02] = 0xFFFFFFF0
                    }
                    ElseIf (Local2 == 0xFFF1)
                    {
                        PPI2 [0x02] = 0xFFFFFFF1
                    }
                    Else
                    {
                        PPI2 [0x02] = Local2
                    }

                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (PPI2) /* \_SB_.PCI0.SBRG.TPM_.PPI2 */
                }
                ElseIf (TTT0 == 0x06)
                {
                    Return (Zero)
                }
                Else
                {
                }
            }
            ElseIf (Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d"))
            {
                Name (TTT1, Zero)
                TTT1 = ToInteger (Arg2)
                If (TTT1 == Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             /* . */
                    })
                }
                ElseIf (TTT1 == One)
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMOR /* \CMOR */
                    BUF1 = 0xFE
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x0BB8)
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (Zero)
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             /* . */
            })
        }
    }

    Scope (_SB.PCI0.ITPM)
    {
        Name (TAAX, Zero)
        OperationRegion (MIPT, SystemIO, SMIT, One)
        Field (MIPT, ByteAcc, NoLock, Preserve)
        {
            PSMI,   8
        }

        Name (PPI1, Package (0x02)
        {
            Zero, 
            Zero
        })
        Name (PPI2, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        Name (MBUF, Buffer (0x04) {})
        CreateByteField (MBUF, Zero, BUF0)
        CreateByteField (MBUF, One, BUF1)
        CreateByteField (MBUF, 0x02, BUF2)
        CreateByteField (MBUF, 0x03, BUF3)
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If (Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */)
            {
                Name (TTT0, Zero)
                TTT0 = ToInteger (Arg2)
                If (TTT0 == Zero)
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             /* . */
                    })
                }
                ElseIf (TTT0 == One)
                {
                    Return ("1.0")
                }
                ElseIf (TTT0 == 0x02)
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (Zero)
                }
                ElseIf (TTT0 == 0x03)
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0x0F
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    PPI1 [Zero] = Zero
                    PPI1 [One] = Local3
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (PPI1) /* \_SB_.PCI0.ITPM.PPI1 */
                }
                ElseIf (TTT0 == 0x04)
                {
                    Return (0x02)
                }
                ElseIf (TTT0 == 0x05)
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = (BUF2 >> 0x04)
                    BUF0 = CMER /* \CMER */
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local6 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    Local4 = (CMER + One)
                    BUF0 = Local4
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local7 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    Local2 = (Local7 * 0x0100)
                    Local2 += Local6
                    PPI2 [Zero] = Zero
                    PPI2 [One] = Local3
                    If (Local2 == 0xFFF0)
                    {
                        PPI2 [0x02] = 0xFFFFFFF0
                    }
                    ElseIf (Local2 == 0xFFF1)
                    {
                        PPI2 [0x02] = 0xFFFFFFF1
                    }
                    Else
                    {
                        PPI2 [0x02] = Local2
                    }

                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (PPI2) /* \_SB_.PCI0.ITPM.PPI2 */
                }
                ElseIf (TTT0 == 0x06)
                {
                    Return (Zero)
                }
                Else
                {
                }
            }
            ElseIf (Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d"))
            {
                Name (TTT1, Zero)
                TTT1 = ToInteger (Arg2)
                If (TTT1 == Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             /* . */
                    })
                }
                ElseIf (TTT1 == One)
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMOR /* \CMOR */
                    BUF1 = 0xFE
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x0BB8)
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (Zero)
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             /* . */
            })
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.SBRG.SIOS (Arg0)
            \_SB.PCI0.SBRG.IO2P (Arg0)
            \_SB.PCI0.NPTS (Arg0)
            \_SB.PCI0.SBRG.SPTS (Arg0)
            \_SB.PCI0.HEC2.PTS ()
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \_SB.PCI0.SBRG.SIOW (Arg0)
        \_SB.PCI0.SBRG.IO2W (Arg0)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.SBRG.SWAK (Arg0)
        \_SB.PCI0.SBRG.BMCW (Arg0)
        \_SB.PCI0.HEC2.WAK ()
    }
}



EINJ
----
[000h 0000   4]                    Signature : "EINJ"    [Error Injection table]
[004h 0004   4]                 Table Length : 00000130
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 44
[00Ah 0010   6]                       Oem ID : "AMIER"
[010h 0016   8]                 Oem Table ID : "AMI_EINJ"
[018h 0024   4]                 Oem Revision : 20111028
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]      Injection Header Length : 0000000C
[028h 0040   1]                        Flags : 00
[029h 0041   3]                     Reserved : 000000
[02Ch 0044   4]        Injection Entry Count : 00000008

[030h 0048   1]                       Action : 00 [Begin Operation]
[031h 0049   1]                  Instruction : 03 [Write Register Value]
[032h 0050   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[033h 0051   1]                     Reserved : 00

[034h 0052  12]              Register Region : [Generic Address Structure]
[034h 0052   1]                     Space ID : 00 [SystemMemory]
[035h 0053   1]                    Bit Width : 08
[036h 0054   1]                   Bit Offset : 00
[037h 0055   1]         Encoded Access Width : 01 [Byte Access:8]
[038h 0056   8]                      Address : 00000000BF799010

[040h 0064   8]                        Value : 0000000000000000
[048h 0072   8]                         Mask : 00000000000000FF

[050h 0080   1]                       Action : 01 [Get Trigger Table]
[051h 0081   1]                  Instruction : 00 [Read Register]
[052h 0082   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[053h 0083   1]                     Reserved : 00

[054h 0084  12]              Register Region : [Generic Address Structure]
[054h 0084   1]                     Space ID : 00 [SystemMemory]
[055h 0085   1]                    Bit Width : 40
[056h 0086   1]                   Bit Offset : 00
[057h 0087   1]         Encoded Access Width : 04 [QWord Access:64]
[058h 0088   8]                      Address : 00000000BF799012

[060h 0096   8]                        Value : 0000000000000000
[068h 0104   8]                         Mask : FFFFFFFFFFFFFFFF

[070h 0112   1]                       Action : 02 [Set Error Type]
[071h 0113   1]                  Instruction : 02 [Write Register]
[072h 0114   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[073h 0115   1]                     Reserved : 00

[074h 0116  12]              Register Region : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 20
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 03 [DWord Access:32]
[078h 0120   8]                      Address : 00000000BF79901A

[080h 0128   8]                        Value : 0000000000000000
[088h 0136   8]                         Mask : 00000000FFFFFFFF

[090h 0144   1]                       Action : 03 [Get Error Type]
[091h 0145   1]                  Instruction : 00 [Read Register]
[092h 0146   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[093h 0147   1]                     Reserved : 00

[094h 0148  12]              Register Region : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 03 [DWord Access:32]
[098h 0152   8]                      Address : 00000000BF799020

[0A0h 0160   8]                        Value : 0000000000000000
[0A8h 0168   8]                         Mask : 00000000FFFFFFFF

[0B0h 0176   1]                       Action : 04 [End Operation]
[0B1h 0177   1]                  Instruction : 03 [Write Register Value]
[0B2h 0178   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0B3h 0179   1]                     Reserved : 00

[0B4h 0180  12]              Register Region : [Generic Address Structure]
[0B4h 0180   1]                     Space ID : 00 [SystemMemory]
[0B5h 0181   1]                    Bit Width : 10
[0B6h 0182   1]                   Bit Offset : 00
[0B7h 0183   1]         Encoded Access Width : 02 [Word Access:16]
[0B8h 0184   8]                      Address : 0000000000000000

[0C0h 0192   8]                        Value : 0000000000000000
[0C8h 0200   8]                         Mask : 000000000000FFFF

[0D0h 0208   1]                       Action : 05 [Execute Operation]
[0D1h 0209   1]                  Instruction : 03 [Write Register Value]
[0D2h 0210   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0D3h 0211   1]                     Reserved : 00

[0D4h 0212  12]              Register Region : [Generic Address Structure]
[0D4h 0212   1]                     Space ID : 01 [SystemIO]
[0D5h 0213   1]                    Bit Width : 08
[0D6h 0214   1]                   Bit Offset : 00
[0D7h 0215   1]         Encoded Access Width : 01 [Byte Access:8]
[0D8h 0216   8]                      Address : 00000000000000B2

[0E0h 0224   8]                        Value : 0000000000000075
[0E8h 0232   8]                         Mask : 00000000000000FF

[0F0h 0240   1]                       Action : 06 [Check Busy Status]
[0F1h 0241   1]                  Instruction : 01 [Read Register Value]
[0F2h 0242   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0F3h 0243   1]                     Reserved : 00

[0F4h 0244  12]              Register Region : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 01 [Byte Access:8]
[0F8h 0248   8]                      Address : 00000000BF79901E

[100h 0256   8]                        Value : 0000000000000001
[108h 0264   8]                         Mask : 0000000000000001

[110h 0272   1]                       Action : 07 [Get Command Status]
[111h 0273   1]                  Instruction : 00 [Read Register]
[112h 0274   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[113h 0275   1]                     Reserved : 00

[114h 0276  12]              Register Region : [Generic Address Structure]
[114h 0276   1]                     Space ID : 00 [SystemMemory]
[115h 0277   1]                    Bit Width : 10
[116h 0278   1]                   Bit Offset : 00
[117h 0279   1]         Encoded Access Width : 02 [Word Access:16]
[118h 0280   8]                      Address : 00000000BF79901E

[120h 0288   8]                        Value : 0000000000000000
[128h 0296   8]                         Mask : 000000000000FFFE

Raw Table Data: Length 304 (0x130)

  0000: 45 49 4E 4A 30 01 00 00 01 44 41 4D 49 45 52 00  // EINJ0....DAMIER.
  0010: 41 4D 49 5F 45 49 4E 4A 28 10 11 20 4D 53 46 54  // AMI_EINJ(.. MSFT
  0020: 97 00 00 00 0C 00 00 00 00 00 00 00 08 00 00 00  // ................
  0030: 00 03 00 00 00 08 00 01 10 90 79 BF 00 00 00 00  // ..........y.....
  0040: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
  0050: 01 00 00 00 00 40 00 04 12 90 79 BF 00 00 00 00  // .....@....y.....
  0060: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
  0070: 02 02 00 00 00 20 00 03 1A 90 79 BF 00 00 00 00  // ..... ....y.....
  0080: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
  0090: 03 00 00 00 00 20 00 03 20 90 79 BF 00 00 00 00  // ..... .. .y.....
  00A0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
  00B0: 04 03 00 00 00 10 00 02 00 00 00 00 00 00 00 00  // ................
  00C0: 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00  // ................
  00D0: 05 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
  00E0: 75 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // u...............
  00F0: 06 01 00 00 00 08 00 01 1E 90 79 BF 00 00 00 00  // ..........y.....
  0100: 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
  0110: 07 00 00 00 00 10 00 02 1E 90 79 BF 00 00 00 00  // ..........y.....
  0120: 00 00 00 00 00 00 00 00 FE FF 00 00 00 00 00 00  // ................


ERST
----
[000h 0000   4]                    Signature : "ERST"    [Error Record Serialization Table]
[004h 0004   4]                 Table Length : 000001B0
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4D
[00Ah 0010   6]                       Oem ID : "AMIER"
[010h 0016   8]                 Oem Table ID : "AMI_ERST"
[018h 0024   4]                 Oem Revision : 20111028
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]  Serialization Header Length : 0000000C
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   4]      Instruction Entry Count : 0000000C

[030h 0048   1]                       Action : 00 [Begin Write Operation]
[031h 0049   1]                  Instruction : 03 [Write Register Value]
[032h 0050   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[033h 0051   1]                     Reserved : 00

[034h 0052  12]              Register Region : [Generic Address Structure]
[034h 0052   1]                     Space ID : 00 [SystemMemory]
[035h 0053   1]                    Bit Width : 08
[036h 0054   1]                   Bit Offset : 00
[037h 0055   1]         Encoded Access Width : 01 [Byte Access:8]
[038h 0056   8]                      Address : 00000000BF799030

[040h 0064   8]                        Value : 0000000000000071
[048h 0072   8]                         Mask : 00000000000000FF

[050h 0080   1]                       Action : 01 [Begin Read Operation]
[051h 0081   1]                  Instruction : 03 [Write Register Value]
[052h 0082   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[053h 0083   1]                     Reserved : 00

[054h 0084  12]              Register Region : [Generic Address Structure]
[054h 0084   1]                     Space ID : 00 [SystemMemory]
[055h 0085   1]                    Bit Width : 08
[056h 0086   1]                   Bit Offset : 00
[057h 0087   1]         Encoded Access Width : 01 [Byte Access:8]
[058h 0088   8]                      Address : 00000000BF799030

[060h 0096   8]                        Value : 0000000000000072
[068h 0104   8]                         Mask : 00000000000000FF

[070h 0112   1]                       Action : 02 [Begin Clear Operation]
[071h 0113   1]                  Instruction : 03 [Write Register Value]
[072h 0114   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[073h 0115   1]                     Reserved : 00

[074h 0116  12]              Register Region : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000BF799030

[080h 0128   8]                        Value : 0000000000000073
[088h 0136   8]                         Mask : 00000000000000FF

[090h 0144   1]                       Action : 03 [End Operation]
[091h 0145   1]                  Instruction : 03 [Write Register Value]
[092h 0146   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[093h 0147   1]                     Reserved : 00

[094h 0148  12]              Register Region : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 08
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 01 [Byte Access:8]
[098h 0152   8]                      Address : 00000000BF799031

[0A0h 0160   8]                        Value : 0000000000000074
[0A8h 0168   8]                         Mask : 00000000000000FF

[0B0h 0176   1]                       Action : 04 [Set Record Offset]
[0B1h 0177   1]                  Instruction : 02 [Write Register]
[0B2h 0178   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0B3h 0179   1]                     Reserved : 00

[0B4h 0180  12]              Register Region : [Generic Address Structure]
[0B4h 0180   1]                     Space ID : 00 [SystemMemory]
[0B5h 0181   1]                    Bit Width : 20
[0B6h 0182   1]                   Bit Offset : 00
[0B7h 0183   1]         Encoded Access Width : 03 [DWord Access:32]
[0B8h 0184   8]                      Address : 00000000BF799032

[0C0h 0192   8]                        Value : 0000000000000000
[0C8h 0200   8]                         Mask : 00000000FFFFFFFF

[0D0h 0208   1]                       Action : 05 [Execute Operation]
[0D1h 0209   1]                  Instruction : 03 [Write Register Value]
[0D2h 0210   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0D3h 0211   1]                     Reserved : 00

[0D4h 0212  12]              Register Region : [Generic Address Structure]
[0D4h 0212   1]                     Space ID : 01 [SystemIO]
[0D5h 0213   1]                    Bit Width : 08
[0D6h 0214   1]                   Bit Offset : 00
[0D7h 0215   1]         Encoded Access Width : 01 [Byte Access:8]
[0D8h 0216   8]                      Address : 00000000000000B2

[0E0h 0224   8]                        Value : 0000000000000070
[0E8h 0232   8]                         Mask : 00000000000000FF

[0F0h 0240   1]                       Action : 06 [Check Busy Status]
[0F1h 0241   1]                  Instruction : 01 [Read Register Value]
[0F2h 0242   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0F3h 0243   1]                     Reserved : 00

[0F4h 0244  12]              Register Region : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 01 [Byte Access:8]
[0F8h 0248   8]                      Address : 00000000BF799036

[100h 0256   8]                        Value : 0000000000000001
[108h 0264   8]                         Mask : 00000000000000FF

[110h 0272   1]                       Action : 07 [Get Command Status]
[111h 0273   1]                  Instruction : 00 [Read Register]
[112h 0274   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[113h 0275   1]                     Reserved : 00

[114h 0276  12]              Register Region : [Generic Address Structure]
[114h 0276   1]                     Space ID : 00 [SystemMemory]
[115h 0277   1]                    Bit Width : 08
[116h 0278   1]                   Bit Offset : 00
[117h 0279   1]         Encoded Access Width : 01 [Byte Access:8]
[118h 0280   8]                      Address : 00000000BF799038

[120h 0288   8]                        Value : 0000000000000000
[128h 0296   8]                         Mask : 00000000000000FF

[130h 0304   1]                       Action : 08 [Get Record Identifier]
[131h 0305   1]                  Instruction : 00 [Read Register]
[132h 0306   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[133h 0307   1]                     Reserved : 00

[134h 0308  12]              Register Region : [Generic Address Structure]
[134h 0308   1]                     Space ID : 00 [SystemMemory]
[135h 0309   1]                    Bit Width : 40
[136h 0310   1]                   Bit Offset : 00
[137h 0311   1]         Encoded Access Width : 04 [QWord Access:64]
[138h 0312   8]                      Address : 00000000BF799040

[140h 0320   8]                        Value : 0000000000000000
[148h 0328   8]                         Mask : FFFFFFFFFFFFFFFF

[150h 0336   1]                       Action : 09 [Set Record Identifier]
[151h 0337   1]                  Instruction : 02 [Write Register]
[152h 0338   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[153h 0339   1]                     Reserved : 00

[154h 0340  12]              Register Region : [Generic Address Structure]
[154h 0340   1]                     Space ID : 00 [SystemMemory]
[155h 0341   1]                    Bit Width : 40
[156h 0342   1]                   Bit Offset : 00
[157h 0343   1]         Encoded Access Width : 04 [QWord Access:64]
[158h 0344   8]                      Address : 00000000BF799048

[160h 0352   8]                        Value : 0000000000000000
[168h 0360   8]                         Mask : FFFFFFFFFFFFFFFF

[170h 0368   1]                       Action : 0A [Get Record Count]
[171h 0369   1]                  Instruction : 00 [Read Register]
[172h 0370   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[173h 0371   1]                     Reserved : 00

[174h 0372  12]              Register Region : [Generic Address Structure]
[174h 0372   1]                     Space ID : 00 [SystemMemory]
[175h 0373   1]                    Bit Width : 10
[176h 0374   1]                   Bit Offset : 00
[177h 0375   1]         Encoded Access Width : 02 [Word Access:16]
[178h 0376   8]                      Address : 00000000BF79903A

[180h 0384   8]                        Value : 0000000000000000
[188h 0392   8]                         Mask : 000000000000FFFF

[190h 0400   1]                       Action : 0B [Begin Dummy Write]
[191h 0401   1]                  Instruction : 03 [Write Register Value]
[192h 0402   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[193h 0403   1]                     Reserved : 00

[194h 0404  12]              Register Region : [Generic Address Structure]
[194h 0404   1]                     Space ID : 00 [SystemMemory]
[195h 0405   1]                    Bit Width : 08
[196h 0406   1]                   Bit Offset : 00
[197h 0407   1]         Encoded Access Width : 01 [Byte Access:8]
[198h 0408   8]                      Address : 00000000BF799030

[1A0h 0416   8]                        Value : 0000000000000076
[1A8h 0424   8]                         Mask : 00000000000000FF

Raw Table Data: Length 432 (0x1B0)

  0000: 45 52 53 54 B0 01 00 00 01 4D 41 4D 49 45 52 00  // ERST.....MAMIER.
  0010: 41 4D 49 5F 45 52 53 54 28 10 11 20 4D 53 46 54  // AMI_ERST(.. MSFT
  0020: 97 00 00 00 0C 00 00 00 00 00 00 00 0C 00 00 00  // ................
  0030: 00 03 00 00 00 08 00 01 30 90 79 BF 00 00 00 00  // ........0.y.....
  0040: 71 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // q...............
  0050: 01 03 00 00 00 08 00 01 30 90 79 BF 00 00 00 00  // ........0.y.....
  0060: 72 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // r...............
  0070: 02 03 00 00 00 08 00 01 30 90 79 BF 00 00 00 00  // ........0.y.....
  0080: 73 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // s...............
  0090: 03 03 00 00 00 08 00 01 31 90 79 BF 00 00 00 00  // ........1.y.....
  00A0: 74 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // t...............
  00B0: 04 02 00 00 00 20 00 03 32 90 79 BF 00 00 00 00  // ..... ..2.y.....
  00C0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
  00D0: 05 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
  00E0: 70 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // p...............
  00F0: 06 01 00 00 00 08 00 01 36 90 79 BF 00 00 00 00  // ........6.y.....
  0100: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
  0110: 07 00 00 00 00 08 00 01 38 90 79 BF 00 00 00 00  // ........8.y.....
  0120: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
  0130: 08 00 00 00 00 40 00 04 40 90 79 BF 00 00 00 00  // .....@..@.y.....
  0140: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
  0150: 09 02 00 00 00 40 00 04 48 90 79 BF 00 00 00 00  // .....@..H.y.....
  0160: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
  0170: 0A 00 00 00 00 10 00 02 3A 90 79 BF 00 00 00 00  // ........:.y.....
  0180: 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00  // ................
  0190: 0B 03 00 00 00 08 00 01 30 90 79 BF 00 00 00 00  // ........0.y.....
  01A0: 76 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // v...............


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : F6
[00Ah 0010   6]                       Oem ID : "102811"
[010h 0016   8]                 Oem Table ID : "FACP1447"
[018h 0024   4]                 Oem Revision : 20111028
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]                 FACS Address : BF77E000
[028h 0040   4]                 DSDT Address : BF7706A0
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : E1
[035h 0053   1]           ACPI Disable Value : 1E
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : E2
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000850
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : E3
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000000A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000BF77E000
[08Ch 0140   8]                 DSDT Address : 00000000BF7706A0
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 20
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 20
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

  0000: 46 41 43 50 F4 00 00 00 04 F6 31 30 32 38 31 31  // FACP......102811
  0010: 46 41 43 50 31 34 34 37 28 10 11 20 4D 53 46 54  // FACP1447(.. MSFT
  0020: 97 00 00 00 00 E0 77 BF A0 06 77 BF 01 01 09 00  // ......w...w.....
  0030: B2 00 00 00 E1 1E 00 E2 00 08 00 00 00 00 00 00  // ................
  0040: 04 08 00 00 00 00 00 00 50 08 00 00 08 08 00 00  // ........P.......
  0050: 20 08 00 00 00 00 00 00 04 02 01 04 10 00 00 E3  //  ...............
  0060: 65 00 E9 03 00 04 10 00 01 00 0D 00 32 03 00 00  // e...........2...
  0070: A5 00 00 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
  0080: 06 00 00 00 00 E0 77 BF 00 00 00 00 A0 06 77 BF  // ......w.......w.
  0090: 00 00 00 00 01 20 00 00 00 08 00 00 00 00 00 00  // ..... ..........
  00A0: 01 20 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // . ..............
  00B0: 04 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00D0: 01 20 00 00 08 08 00 00 00 00 00 00 01 40 00 00  // . ...........@..
  00E0: 20 08 00 00 00 00 00 00 01 20 00 00 00 00 00 00  //  ........ ......
  00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HEST
----
[000h 0000   4]                    Signature : "HEST"    [Hardware Error Source Table]
[004h 0004   4]                 Table Length : 000000A8
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 6F
[00Ah 0010   6]                       Oem ID : "AMIER"
[010h 0016   8]                 Oem Table ID : "ABC_HEST"
[018h 0024   4]                 Oem Revision : 20111028
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]           Error Source Count : 00000002

[028h 0040   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[02Ah 0042   2]                    Source Id : 0000
[02Ch 0044   2]            Related Source Id : FFFF
[02Eh 0046   1]                     Reserved : 03
[02Fh 0047   1]                      Enabled : 01
[030h 0048   4]       Records To Preallocate : 00000001
[034h 0052   4]      Max Sections Per Record : 00000001
[038h 0056   4]          Max Raw Data Length : 0000009D

[03Ch 0060  12]         Error Status Address : [Generic Address Structure]
[03Ch 0060   1]                     Space ID : 00 [SystemMemory]
[03Dh 0061   1]                    Bit Width : 20
[03Eh 0062   1]                   Bit Offset : 00
[03Fh 0063   1]         Encoded Access Width : 01 [Byte Access:8]
[040h 0064   8]                      Address : 00000000BF799060

[048h 0072  28]                       Notify : [Hardware Error Notification Structure]
[048h 0072   1]                  Notify Type : 04 [NMI]
[049h 0073   1]                Notify Length : 1C
[04Ah 0074   2]   Configuration Write Enable : 0000
[04Ch 0076   4]                 PollInterval : 00000000
[050h 0080   4]                       Vector : 00000002
[054h 0084   4]      Polling Threshold Value : 00000000
[058h 0088   4]     Polling Threshold Window : 00000000
[05Ch 0092   4]        Error Threshold Value : 00000000
[060h 0096   4]       Error Threshold Window : 00000000

[064h 0100   4]    Error Status Block Length : 0000009D

[068h 0104   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[06Ah 0106   2]                    Source Id : 0001
[06Ch 0108   2]            Related Source Id : FFFF
[06Eh 0110   1]                     Reserved : 03
[06Fh 0111   1]                      Enabled : 01
[070h 0112   4]       Records To Preallocate : 00000001
[074h 0116   4]      Max Sections Per Record : 00000001
[078h 0120   4]          Max Raw Data Length : 0000009D

[07Ch 0124  12]         Error Status Address : [Generic Address Structure]
[07Ch 0124   1]                     Space ID : 00 [SystemMemory]
[07Dh 0125   1]                    Bit Width : 20
[07Eh 0126   1]                   Bit Offset : 00
[07Fh 0127   1]         Encoded Access Width : 01 [Byte Access:8]
[080h 0128   8]                      Address : 00000000BF799270

[088h 0136  28]                       Notify : [Hardware Error Notification Structure]
[088h 0136   1]                  Notify Type : 00 [Polled]
[089h 0137   1]                Notify Length : 1C
[08Ah 0138   2]   Configuration Write Enable : 003E
[08Ch 0140   4]                 PollInterval : 00000000
[090h 0144   4]                       Vector : 00000002
[094h 0148   4]      Polling Threshold Value : 00000000
[098h 0152   4]     Polling Threshold Window : 00000000
[09Ch 0156   4]        Error Threshold Value : 00000000
[0A0h 0160   4]       Error Threshold Window : 00000000

[0A4h 0164   4]    Error Status Block Length : 0000009D

Raw Table Data: Length 168 (0xA8)

  0000: 48 45 53 54 A8 00 00 00 01 6F 41 4D 49 45 52 00  // HEST.....oAMIER.
  0010: 41 42 43 5F 48 45 53 54 28 10 11 20 4D 53 46 54  // ABC_HEST(.. MSFT
  0020: 97 00 00 00 02 00 00 00 09 00 00 00 FF FF 03 01  // ................
  0030: 01 00 00 00 01 00 00 00 9D 00 00 00 00 20 00 01  // ............. ..
  0040: 60 90 79 BF 00 00 00 00 04 1C 00 00 00 00 00 00  // `.y.............
  0050: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0060: 00 00 00 00 9D 00 00 00 09 00 01 00 FF FF 03 01  // ................
  0070: 01 00 00 00 01 00 00 00 9D 00 00 00 00 20 00 01  // ............. ..
  0080: 70 92 79 BF 00 00 00 00 00 1C 3E 00 00 00 00 00  // p.y.......>.....
  0090: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00A0: 00 00 00 00 9D 00 00 00                          // ........


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 58
[00Ah 0010   6]                       Oem ID : "102811"
[010h 0016   8]                 Oem Table ID : "OEMHPET "
[018h 0024   4]                 Oem Revision : 20111028
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]            Hardware Block ID : 8086A301

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 58 31 30 32 38 31 31  // HPET8....X102811
  0010: 4F 45 4D 48 50 45 54 20 28 10 11 20 4D 53 46 54  // OEMHPET (.. MSFT
  0020: 97 00 00 00 01 A3 86 80 00 08 00 00 00 00 D0 FE  // ................
  0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 42
[00Ah 0010   6]                       Oem ID : "102811"
[010h 0016   8]                 Oem Table ID : "OEMMCFG "
[018h 0024   4]                 Oem Revision : 20111028
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 42 31 30 32 38 31 31  // MCFG<....B102811
  0010: 4F 45 4D 4D 43 46 47 20 28 10 11 20 4D 53 46 54  // OEMMCFG (.. MSFT
  0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
  0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


OEMB
----
[000h 0000   4]                    Signature : "OEMB"    
[004h 0004   4]                 Table Length : 00000092
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 65
[00Ah 0010   6]                       Oem ID : "102811"
[010h 0016   8]                 Oem Table ID : "OEMB1447"
[018h 0024   4]                 Oem Revision : 20111028
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


**** OEM-defined ACPI table [OEMB], unknown contents


Raw Table Data: Length 146 (0x92)

  0000: 4F 45 4D 42 92 00 00 00 01 65 31 30 32 38 31 31  // OEMB.....e102811
  0010: 4F 45 4D 42 31 34 34 37 28 10 11 20 4D 53 46 54  // OEMB1447(.. MSFT
  0020: 97 00 00 00 09 03 00 00 00 00 C0 00 00 C0 FF 00  // ................
  0030: 00 0D 00 00 00 01 00 00 00 00 C0 00 00 00 20 00  // .............. .
  0040: 8B D0 FB 0E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0060: 00 00 00 00 F0 00 00 D9 0E 00 00 D9 FE 00 00 00  // ................
  0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0090: 00 00                                            // ..


SLIT
----
[000h 0000   4]                    Signature : "SLIT"    [System Locality Information Table]
[004h 0004   4]                 Table Length : 00000030
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : AF
[00Ah 0010   6]                       Oem ID : "102811"
[010h 0016   8]                 Oem Table ID : "OEMSLIT "
[018h 0024   4]                 Oem Revision : 20111028
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                   Localities : 0000000000000002
[02Ch 0044   2]                 Locality   0 : 0A 15
[02Eh 0046   2]                 Locality   1 : 15 0A

Raw Table Data: Length 48 (0x30)

  0000: 53 4C 49 54 30 00 00 00 01 AF 31 30 32 38 31 31  // SLIT0.....102811
  0010: 4F 45 4D 53 4C 49 54 20 28 10 11 20 4D 53 46 54  // OEMSLIT (.. MSFT
  0020: 97 00 00 00 02 00 00 00 00 00 00 00 0A 15 15 0A  // ................


SRAT
----
[000h 0000   4]                    Signature : "SRAT"    [System Resource Affinity Table]
[004h 0004   4]                 Table Length : 00000250
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 94
[00Ah 0010   6]                       Oem ID : "102811"
[010h 0016   8]                 Oem Table ID : "OEMSRAT "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]               Table Revision : 00000001
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[031h 0049   1]                       Length : 10

[032h 0050   1]      Proximity Domain Low(8) : 00
[033h 0051   1]                      Apic ID : 00
[034h 0052   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[038h 0056   1]              Local Sapic EID : 00
[039h 0057   3]    Proximity Domain High(24) : 000000
[03Ch 0060   4]                 Clock Domain : 00000000

[040h 0064   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[041h 0065   1]                       Length : 10

[042h 0066   1]      Proximity Domain Low(8) : 00
[043h 0067   1]                      Apic ID : 02
[044h 0068   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[048h 0072   1]              Local Sapic EID : 00
[049h 0073   3]    Proximity Domain High(24) : 000000
[04Ch 0076   4]                 Clock Domain : 00000000

[050h 0080   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[051h 0081   1]                       Length : 10

[052h 0082   1]      Proximity Domain Low(8) : 00
[053h 0083   1]                      Apic ID : 04
[054h 0084   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[058h 0088   1]              Local Sapic EID : 00
[059h 0089   3]    Proximity Domain High(24) : 000000
[05Ch 0092   4]                 Clock Domain : 00000000

[060h 0096   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[061h 0097   1]                       Length : 10

[062h 0098   1]      Proximity Domain Low(8) : 00
[063h 0099   1]                      Apic ID : 10
[064h 0100   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[068h 0104   1]              Local Sapic EID : 00
[069h 0105   3]    Proximity Domain High(24) : 000000
[06Ch 0108   4]                 Clock Domain : 00000000

[070h 0112   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[071h 0113   1]                       Length : 10

[072h 0114   1]      Proximity Domain Low(8) : 00
[073h 0115   1]                      Apic ID : 12
[074h 0116   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[078h 0120   1]              Local Sapic EID : 00
[079h 0121   3]    Proximity Domain High(24) : 000000
[07Ch 0124   4]                 Clock Domain : 00000000

[080h 0128   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[081h 0129   1]                       Length : 10

[082h 0130   1]      Proximity Domain Low(8) : 00
[083h 0131   1]                      Apic ID : 14
[084h 0132   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[088h 0136   1]              Local Sapic EID : 00
[089h 0137   3]    Proximity Domain High(24) : 000000
[08Ch 0140   4]                 Clock Domain : 00000000

[090h 0144   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[091h 0145   1]                       Length : 10

[092h 0146   1]      Proximity Domain Low(8) : 00
[093h 0147   1]                      Apic ID : 01
[094h 0148   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[098h 0152   1]              Local Sapic EID : 00
[099h 0153   3]    Proximity Domain High(24) : 000000
[09Ch 0156   4]                 Clock Domain : 00000000

[0A0h 0160   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0A1h 0161   1]                       Length : 10

[0A2h 0162   1]      Proximity Domain Low(8) : 00
[0A3h 0163   1]                      Apic ID : 03
[0A4h 0164   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0A8h 0168   1]              Local Sapic EID : 00
[0A9h 0169   3]    Proximity Domain High(24) : 000000
[0ACh 0172   4]                 Clock Domain : 00000000

[0B0h 0176   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0B1h 0177   1]                       Length : 10

[0B2h 0178   1]      Proximity Domain Low(8) : 00
[0B3h 0179   1]                      Apic ID : 05
[0B4h 0180   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0B8h 0184   1]              Local Sapic EID : 00
[0B9h 0185   3]    Proximity Domain High(24) : 000000
[0BCh 0188   4]                 Clock Domain : 00000000

[0C0h 0192   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0C1h 0193   1]                       Length : 10

[0C2h 0194   1]      Proximity Domain Low(8) : 00
[0C3h 0195   1]                      Apic ID : 11
[0C4h 0196   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0C8h 0200   1]              Local Sapic EID : 00
[0C9h 0201   3]    Proximity Domain High(24) : 000000
[0CCh 0204   4]                 Clock Domain : 00000000

[0D0h 0208   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0D1h 0209   1]                       Length : 10

[0D2h 0210   1]      Proximity Domain Low(8) : 00
[0D3h 0211   1]                      Apic ID : 13
[0D4h 0212   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0D8h 0216   1]              Local Sapic EID : 00
[0D9h 0217   3]    Proximity Domain High(24) : 000000
[0DCh 0220   4]                 Clock Domain : 00000000

[0E0h 0224   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0E1h 0225   1]                       Length : 10

[0E2h 0226   1]      Proximity Domain Low(8) : 00
[0E3h 0227   1]                      Apic ID : 15
[0E4h 0228   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0E8h 0232   1]              Local Sapic EID : 00
[0E9h 0233   3]    Proximity Domain High(24) : 000000
[0ECh 0236   4]                 Clock Domain : 00000000

[0F0h 0240   1]                Subtable Type : 01 [Memory Affinity]
[0F1h 0241   1]                       Length : 28

[0F2h 0242   4]             Proximity Domain : 00000000
[0F6h 0246   2]                    Reserved1 : 0000
[0F8h 0248   8]                 Base Address : 0000000000000000
[100h 0256   8]               Address Length : 00000000000A0000
[108h 0264   4]                    Reserved2 : 00000000
[10Ch 0268   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[110h 0272   8]                    Reserved3 : 0000000000000000

[118h 0280   1]                Subtable Type : 01 [Memory Affinity]
[119h 0281   1]                       Length : 28

[11Ah 0282   4]             Proximity Domain : 00000000
[11Eh 0286   2]                    Reserved1 : 0000
[120h 0288   8]                 Base Address : 0000000000100000
[128h 0296   8]               Address Length : 00000000BFF00000
[130h 0304   4]                    Reserved2 : 00000000
[134h 0308   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[138h 0312   8]                    Reserved3 : 0000000000000000

[140h 0320   1]                Subtable Type : 01 [Memory Affinity]
[141h 0321   1]                       Length : 28

[142h 0322   4]             Proximity Domain : 00000000
[146h 0326   2]                    Reserved1 : 0000
[148h 0328   8]                 Base Address : 0000000100000000
[150h 0336   8]               Address Length : 0000000B40000000
[158h 0344   4]                    Reserved2 : 00000000
[15Ch 0348   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[160h 0352   8]                    Reserved3 : 0000000000000000

[168h 0360   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[169h 0361   1]                       Length : 10

[16Ah 0362   1]      Proximity Domain Low(8) : 01
[16Bh 0363   1]                      Apic ID : 20
[16Ch 0364   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[170h 0368   1]              Local Sapic EID : 00
[171h 0369   3]    Proximity Domain High(24) : 000000
[174h 0372   4]                 Clock Domain : 00000000

[178h 0376   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[179h 0377   1]                       Length : 10

[17Ah 0378   1]      Proximity Domain Low(8) : 01
[17Bh 0379   1]                      Apic ID : 22
[17Ch 0380   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[180h 0384   1]              Local Sapic EID : 00
[181h 0385   3]    Proximity Domain High(24) : 000000
[184h 0388   4]                 Clock Domain : 00000000

[188h 0392   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[189h 0393   1]                       Length : 10

[18Ah 0394   1]      Proximity Domain Low(8) : 01
[18Bh 0395   1]                      Apic ID : 24
[18Ch 0396   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[190h 0400   1]              Local Sapic EID : 00
[191h 0401   3]    Proximity Domain High(24) : 000000
[194h 0404   4]                 Clock Domain : 00000000

[198h 0408   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[199h 0409   1]                       Length : 10

[19Ah 0410   1]      Proximity Domain Low(8) : 01
[19Bh 0411   1]                      Apic ID : 30
[19Ch 0412   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1A0h 0416   1]              Local Sapic EID : 00
[1A1h 0417   3]    Proximity Domain High(24) : 000000
[1A4h 0420   4]                 Clock Domain : 00000000

[1A8h 0424   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1A9h 0425   1]                       Length : 10

[1AAh 0426   1]      Proximity Domain Low(8) : 01
[1ABh 0427   1]                      Apic ID : 32
[1ACh 0428   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1B0h 0432   1]              Local Sapic EID : 00
[1B1h 0433   3]    Proximity Domain High(24) : 000000
[1B4h 0436   4]                 Clock Domain : 00000000

[1B8h 0440   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1B9h 0441   1]                       Length : 10

[1BAh 0442   1]      Proximity Domain Low(8) : 01
[1BBh 0443   1]                      Apic ID : 34
[1BCh 0444   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1C0h 0448   1]              Local Sapic EID : 00
[1C1h 0449   3]    Proximity Domain High(24) : 000000
[1C4h 0452   4]                 Clock Domain : 00000000

[1C8h 0456   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1C9h 0457   1]                       Length : 10

[1CAh 0458   1]      Proximity Domain Low(8) : 01
[1CBh 0459   1]                      Apic ID : 21
[1CCh 0460   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1D0h 0464   1]              Local Sapic EID : 00
[1D1h 0465   3]    Proximity Domain High(24) : 000000
[1D4h 0468   4]                 Clock Domain : 00000000

[1D8h 0472   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1D9h 0473   1]                       Length : 10

[1DAh 0474   1]      Proximity Domain Low(8) : 01
[1DBh 0475   1]                      Apic ID : 23
[1DCh 0476   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1E0h 0480   1]              Local Sapic EID : 00
[1E1h 0481   3]    Proximity Domain High(24) : 000000
[1E4h 0484   4]                 Clock Domain : 00000000

[1E8h 0488   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1E9h 0489   1]                       Length : 10

[1EAh 0490   1]      Proximity Domain Low(8) : 01
[1EBh 0491   1]                      Apic ID : 25
[1ECh 0492   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1F0h 0496   1]              Local Sapic EID : 00
[1F1h 0497   3]    Proximity Domain High(24) : 000000
[1F4h 0500   4]                 Clock Domain : 00000000

[1F8h 0504   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1F9h 0505   1]                       Length : 10

[1FAh 0506   1]      Proximity Domain Low(8) : 01
[1FBh 0507   1]                      Apic ID : 31
[1FCh 0508   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[200h 0512   1]              Local Sapic EID : 00
[201h 0513   3]    Proximity Domain High(24) : 000000
[204h 0516   4]                 Clock Domain : 00000000

[208h 0520   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[209h 0521   1]                       Length : 10

[20Ah 0522   1]      Proximity Domain Low(8) : 01
[20Bh 0523   1]                      Apic ID : 33
[20Ch 0524   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[210h 0528   1]              Local Sapic EID : 00
[211h 0529   3]    Proximity Domain High(24) : 000000
[214h 0532   4]                 Clock Domain : 00000000

[218h 0536   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[219h 0537   1]                       Length : 10

[21Ah 0538   1]      Proximity Domain Low(8) : 01
[21Bh 0539   1]                      Apic ID : 35
[21Ch 0540   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[220h 0544   1]              Local Sapic EID : 00
[221h 0545   3]    Proximity Domain High(24) : 000000
[224h 0548   4]                 Clock Domain : 00000000

[228h 0552   1]                Subtable Type : 01 [Memory Affinity]
[229h 0553   1]                       Length : 28

[22Ah 0554   4]             Proximity Domain : 00000001
[22Eh 0558   2]                    Reserved1 : 0000
[230h 0560   8]                 Base Address : 0000000C40000000
[238h 0568   8]               Address Length : 0000001200000000
[240h 0576   4]                    Reserved2 : 00000000
[244h 0580   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[248h 0584   8]                    Reserved3 : 0000000000000000

Raw Table Data: Length 592 (0x250)

  0000: 53 52 41 54 50 02 00 00 02 94 31 30 32 38 31 31  // SRATP.....102811
  0010: 4F 45 4D 53 52 41 54 20 01 00 00 00 49 4E 54 4C  // OEMSRAT ....INTL
  0020: 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  0030: 00 10 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  0040: 00 10 00 02 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  0050: 00 10 00 04 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  0060: 00 10 00 10 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  0070: 00 10 00 12 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  0080: 00 10 00 14 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  0090: 00 10 00 01 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  00A0: 00 10 00 03 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  00B0: 00 10 00 05 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  00C0: 00 10 00 11 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  00D0: 00 10 00 13 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  00E0: 00 10 00 15 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  00F0: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
  0100: 00 00 0A 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
  0110: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
  0120: 00 00 10 00 00 00 00 00 00 00 F0 BF 00 00 00 00  // ................
  0130: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  0140: 01 28 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // .(..............
  0150: 00 00 00 40 0B 00 00 00 00 00 00 00 01 00 00 00  // ...@............
  0160: 00 00 00 00 00 00 00 00 00 10 01 20 01 00 00 00  // ........... ....
  0170: 00 00 00 00 00 00 00 00 00 10 01 22 01 00 00 00  // ..........."....
  0180: 00 00 00 00 00 00 00 00 00 10 01 24 01 00 00 00  // ...........$....
  0190: 00 00 00 00 00 00 00 00 00 10 01 30 01 00 00 00  // ...........0....
  01A0: 00 00 00 00 00 00 00 00 00 10 01 32 01 00 00 00  // ...........2....
  01B0: 00 00 00 00 00 00 00 00 00 10 01 34 01 00 00 00  // ...........4....
  01C0: 00 00 00 00 00 00 00 00 00 10 01 21 01 00 00 00  // ...........!....
  01D0: 00 00 00 00 00 00 00 00 00 10 01 23 01 00 00 00  // ...........#....
  01E0: 00 00 00 00 00 00 00 00 00 10 01 25 01 00 00 00  // ...........%....
  01F0: 00 00 00 00 00 00 00 00 00 10 01 31 01 00 00 00  // ...........1....
  0200: 00 00 00 00 00 00 00 00 00 10 01 33 01 00 00 00  // ...........3....
  0210: 00 00 00 00 00 00 00 00 00 10 01 35 01 00 00 00  // ...........5....
  0220: 00 00 00 00 00 00 00 00 01 28 01 00 00 00 00 00  // .........(......
  0230: 00 00 00 40 0C 00 00 00 00 00 00 00 12 00 00 00  // ...@............
  0240: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "DpgPmm", "CpuPm", 0x00000012)
{
    External (_PR_.P001, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x03)
        {
            "CPU0IST ", 
            0xBF77E220, 
            0x000053DC
        })
        Name (CSDT, Package (0x03)
        {
            "CPU0CST ", 
            0xBF783600, 
            0x00000C86
        })
        Name (TSDT, Package (0x03)
        {
            "CPU0TST ", 
            0xBF784290, 
            0x00000A0A
        })
        Name (CFGD, 0x00600472)
        Name (NCPU, 0x00000018)
        Name (NPCP, 0x00000002)
        Name (PDC0, 0x80000000)
        Name (TBL0, 0x00)
        Name (CTB0, 0x00)
        Name (TTB0, 0x00)
        Name (PSTE, 0x00)
        Name (TSTE, 0x00)
        OperationRegion (PMRG, SystemIO, 0x0800, 0x50)
        Field (PMRG, ByteAcc, NoLock, Preserve)
        {
            Offset (0x41), 
            DEV4,   1, 
            DEV5,   1, 
            DEV6,   1, 
            DEV7,   1, 
            STS4,   1, 
            STS5,   1, 
            STS6,   1, 
            STS7,   1
        }
    }

    Scope (\_PR.P001)
    {
        Name (HI0, 0x00)
        Name (HC0, 0x00)
        Name (HT0, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If (Arg1 != 0x01)
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.P001._OSC.CAP0 */
            If ((((PDC0 & 0x09) == 0x09) && (TBL0 == Zero)) && 
                ((CFGD & 0x02) == 0x02))
            {
                TBL0 |= 0x01
                OperationRegion (GV00, SystemMemory, DerefOf (SSDT [0x01]), DerefOf (SSDT [0x02]))
                Load (GV00, HI0) /* \_PR_.P001.HI0_ */
            }

            If ((((PDC0 & 0x18) == 0x18) && (CTB0 == Zero)) && 
                ((CFGD & 0x20) == 0x20))
            {
                CTB0 |= 0x01
                OperationRegion (CT00, SystemMemory, DerefOf (CSDT [0x01]), DerefOf (CSDT [0x02]))
                Load (CT00, HC0) /* \_PR_.P001.HC0_ */
            }

            If ((((PDC0 & 0x04) == 0x04) && (TTB0 == Zero)) && 
                ((CFGD & 0x00400000) == 0x00400000))
            {
                TTB0 |= 0x01
                OperationRegion (TT00, SystemMemory, DerefOf (TSDT [0x01]), DerefOf (TSDT [0x02]))
                Load (TT00, HT0) /* \_PR_.P001.HT0_ */
            }

            Return (Arg3)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "DpgPmm", "P001Ist", 0x00000011)
{
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)
    External (_PR_.P003, DeviceObj)
    External (_PR_.P004, DeviceObj)
    External (_PR_.P005, DeviceObj)
    External (_PR_.P006, DeviceObj)
    External (_PR_.P007, DeviceObj)
    External (_PR_.P008, DeviceObj)
    External (_PR_.P009, DeviceObj)
    External (_PR_.P010, DeviceObj)
    External (_PR_.P011, DeviceObj)
    External (_PR_.P012, DeviceObj)
    External (_PR_.P013, DeviceObj)
    External (_PR_.P014, DeviceObj)
    External (_PR_.P015, DeviceObj)
    External (_PR_.P016, DeviceObj)
    External (_PR_.P017, DeviceObj)
    External (_PR_.P018, DeviceObj)
    External (_PR_.P019, DeviceObj)
    External (_PR_.P020, DeviceObj)
    External (_PR_.P021, DeviceObj)
    External (_PR_.P022, DeviceObj)
    External (_PR_.P023, DeviceObj)
    External (_PR_.P024, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)
    External (PSTE, IntObj)

    Scope (\_PR.P001)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P001.NPSS */
            }

            Return (SPSS) /* \_PR_.P001.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P002)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P002.NPSS */
            }

            Return (SPSS) /* \_PR_.P002.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P003)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P003.NPSS */
            }

            Return (SPSS) /* \_PR_.P003.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P004)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P004.NPSS */
            }

            Return (SPSS) /* \_PR_.P004.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P005)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P005.NPSS */
            }

            Return (SPSS) /* \_PR_.P005.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P006)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P006.NPSS */
            }

            Return (SPSS) /* \_PR_.P006.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P007)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P007.NPSS */
            }

            Return (SPSS) /* \_PR_.P007.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P008)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P008.NPSS */
            }

            Return (SPSS) /* \_PR_.P008.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P009)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P009.NPSS */
            }

            Return (SPSS) /* \_PR_.P009.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P010)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P010.NPSS */
            }

            Return (SPSS) /* \_PR_.P010.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P011)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P011.NPSS */
            }

            Return (SPSS) /* \_PR_.P011.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P012)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P012.NPSS */
            }

            Return (SPSS) /* \_PR_.P012.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P013)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P013.NPSS */
            }

            Return (SPSS) /* \_PR_.P013.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P014)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P014.NPSS */
            }

            Return (SPSS) /* \_PR_.P014.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P015)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P015.NPSS */
            }

            Return (SPSS) /* \_PR_.P015.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P016)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P016.NPSS */
            }

            Return (SPSS) /* \_PR_.P016.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P017)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P017.NPSS */
            }

            Return (SPSS) /* \_PR_.P017.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P018)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P018.NPSS */
            }

            Return (SPSS) /* \_PR_.P018.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P019)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P019.NPSS */
            }

            Return (SPSS) /* \_PR_.P019.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P020)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P020.NPSS */
            }

            Return (SPSS) /* \_PR_.P020.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P021)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P021.NPSS */
            }

            Return (SPSS) /* \_PR_.P021.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P022)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P022.NPSS */
            }

            Return (SPSS) /* \_PR_.P022.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P023)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P023.NPSS */
            }

            Return (SPSS) /* \_PR_.P023.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }

    Scope (\_PR.P024)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PSTE) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000900, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000902, // Address
                        ,)
                }
            })
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFE, 
                    0x0C
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09))
            {
                Return (NPSS) /* \_PR_.P024.NPSS */
            }

            Return (SPSS) /* \_PR_.P024.SPSS */
        }

        Name (SPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000AF0, 
                0x0001A9C8, 
                0x000000A0, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x000000A0, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x000000A0, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x000000A0, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x000000A0, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x000000A0, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x000000A0, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x000000A0, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x000000A0, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x000000A0, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
        Name (NPSS, Package (0x0A)
        {
            Package (0x06)
            {
                0x00000A6C, 
                0x0001A9C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000015, 
                0x00000015
            }, 

            Package (0x06)
            {
                0x00000A6B, 
                0x00017318, 
                0x0000000A, 
                0x0000000A, 
                0x00000014, 
                0x00000014
            }, 

            Package (0x06)
            {
                0x000009E5, 
                0x00013C68, 
                0x0000000A, 
                0x0000000A, 
                0x00000013, 
                0x00000013
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00010D88, 
                0x0000000A, 
                0x0000000A, 
                0x00000012, 
                0x00000012
            }, 

            Package (0x06)
            {
                0x000008DB, 
                0x0000E290, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x0000BB80, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009C40, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074B, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x00006590, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004E20, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }
        })
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "P001Cst", 0x00003001)
{
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)
    External (_PR_.P003, DeviceObj)
    External (_PR_.P004, DeviceObj)
    External (_PR_.P005, DeviceObj)
    External (_PR_.P006, DeviceObj)
    External (_PR_.P007, DeviceObj)
    External (_PR_.P008, DeviceObj)
    External (_PR_.P009, DeviceObj)
    External (_PR_.P010, DeviceObj)
    External (_PR_.P011, DeviceObj)
    External (_PR_.P012, DeviceObj)
    External (_PR_.P013, DeviceObj)
    External (_PR_.P014, DeviceObj)
    External (_PR_.P015, DeviceObj)
    External (_PR_.P016, DeviceObj)
    External (_PR_.P017, DeviceObj)
    External (_PR_.P018, DeviceObj)
    External (_PR_.P019, DeviceObj)
    External (_PR_.P020, DeviceObj)
    External (_PR_.P021, DeviceObj)
    External (_PR_.P022, DeviceObj)
    External (_PR_.P023, DeviceObj)
    External (_PR_.P024, DeviceObj)
    External (CFGD, UnknownObj)
    External (NCPU, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.P001)
    {
        Name (NOCS, 0x03)
        Name (NCS2, Package (0x03)
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x03, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x03,               // Access Size
                        )
                }, 

                0x03, 
                0xCD, 
                0x02EE
            }
        })
        Name (NCS3, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x03, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0xCD, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000020, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0xF5, 
                0x015E
            }
        })
        Name (NCS4, Package (0x05)
        {
            0x04, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x03, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x03,               // Access Size
                        )
                }, 

                0x03, 
                0xCD, 
                0x02EE
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000020, // Address
                        0x03,               // Access Size
                        )
                }, 

                0x03, 
                0xF5, 
                0x015E
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000030, // Address
                        0x03,               // Access Size
                        )
                }, 

                0x03, 
                0xF5, 
                0xC8
            }
        })
        Name (LCS2, Package (0x03)
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x03, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        ,)
                }, 

                0x03, 
                0xCD, 
                0x02EE
            }
        })
        Name (LCS3, Package (0x04)
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x03, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        ,)
                }, 

                0x02, 
                0xCD, 
                0x01F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000815, // Address
                        ,)
                }, 

                0x03, 
                0xF5, 
                0x015E
            }
        })
        Name (LCS4, Package (0x05)
        {
            0x04, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x03, 
                0x03E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        ,)
                }, 

                0x03, 
                0xCD, 
                0x02EE
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000815, // Address
                        ,)
                }, 

                0x03, 
                0xF5, 
                0x015E
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000816, // Address
                        ,)
                }, 

                0x03, 
                0xF5, 
                0xC8
            }
        })
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((NCPU > 0x01) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            If ((CFGD & 0x00200000) && (PDC0 & 0x0200))
            {
                If (NOCS == 0x04)
                {
                    Return (NCS4) /* \_PR_.P001.NCS4 */
                }

                If (NOCS == 0x03)
                {
                    Return (NCS3) /* \_PR_.P001.NCS3 */
                }

                If (NOCS == 0x02)
                {
                    Return (NCS2) /* \_PR_.P001.NCS2 */
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            If (CFGD & 0x00200000)
            {
                If (NOCS == 0x04)
                {
                    Return (LCS4) /* \_PR_.P001.LCS4 */
                }

                If (NOCS == 0x03)
                {
                    Return (LCS3) /* \_PR_.P001.LCS3 */
                }

                If (NOCS == 0x02)
                {
                    Return (LCS2) /* \_PR_.P001.LCS2 */
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x03, 
                    0x03E8
                }
            })
        }
    }

    Scope (\_PR.P002)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P003)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P004)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P005)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P006)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P007)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P008)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P009)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P010)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P011)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P012)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P013)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P014)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P015)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P016)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P017)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P018)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P019)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P020)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P021)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P022)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P023)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }

    Scope (\_PR.P024)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((CFGD & 0x01000000) && !(PDC0 & 0x10))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST ())
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Tst", 0x00003000)
{
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)
    External (_PR_.P003, DeviceObj)
    External (_PR_.P004, DeviceObj)
    External (_PR_.P005, DeviceObj)
    External (_PR_.P006, DeviceObj)
    External (_PR_.P007, DeviceObj)
    External (_PR_.P008, DeviceObj)
    External (_PR_.P009, DeviceObj)
    External (_PR_.P010, DeviceObj)
    External (_PR_.P011, DeviceObj)
    External (_PR_.P012, DeviceObj)
    External (_PR_.P013, DeviceObj)
    External (_PR_.P014, DeviceObj)
    External (_PR_.P015, DeviceObj)
    External (_PR_.P016, DeviceObj)
    External (_PR_.P017, DeviceObj)
    External (_PR_.P018, DeviceObj)
    External (_PR_.P019, DeviceObj)
    External (_PR_.P020, DeviceObj)
    External (_PR_.P021, DeviceObj)
    External (_PR_.P022, DeviceObj)
    External (_PR_.P023, DeviceObj)
    External (_PR_.P024, DeviceObj)
    External (TSTE, IntObj)

    Scope (\_PR.P001)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (NTSS) /* \_PR_.P001.NTSS */
        }

        Name (NTSS, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x02F8, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x0299, 
                0x00, 
                0x1E, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x023A, 
                0x00, 
                0x1C, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x01DB, 
                0x00, 
                0x1A, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x017C, 
                0x00, 
                0x18, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x011D, 
                0x00, 
                0x16, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0x00BE, 
                0x00, 
                0x14, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x005F, 
                0x00, 
                0x12, 
                0x00
            }
        })
    }

    Scope (\_PR.P002)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P003)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P004)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P005)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P006)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P007)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P008)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P009)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P010)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P011)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P012)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P013)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P014)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P015)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P016)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P017)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P018)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P019)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P020)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P021)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P022)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P023)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }

    Scope (\_PR.P024)
    {
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (TSTE) /* External reference */
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.P001.NTSS)
        }
    }
}



