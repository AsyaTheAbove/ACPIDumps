
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20150717-64
Copyright (c) 2000 - 2015 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   RSDP                          "MSI_NB"
   RSDT   0x00000044     0x01    "MSI_NB"  "MEGABOOK"   0x06222004    "MSFT"     0x00010013
   XSDT   0x00000064     0x01    "MSI_NB"  "MEGABOOK"   0x06222004    "MSFT"     0x00010013
   DSDT   0x00005788     0x01    "MSI_NB"  "MEGABOOK"   0x00000000    "INTL"     0x20051117
   FACS   0x00000040
   FACP   0x000000F4     0x04    "MSI_NB"  "MEGABOOK"   0x06222004    "MSFT"     0x00010013
   APIC   0x0000005C     0x02    "MSI_NB"  "MEGABOOK"   0x06222004    "MSFT"     0x00010013
   HPET   0x00000038     0x01    "A M I "  "ICH7HPET"   0x06222004    "AMI."     0x00000003
   MCFG   0x0000003C     0x01    "MSI_NB"  "MEGABOOK"   0x06222004    "MSFT"     0x00000097
   SLIC   0x00000176     0x01    "MSI_NB"  "MEGABOOK"   0x06222004    "MSFT"     0x00000097
   SSDT   0x000004CE     0x02    "PmRef "  "CpuPm   "   0x00003000    "INTL"     0x20051117
   SSDT   0x00000232     0x02    "PmRef "  "Cpu0Tst "   0x00003000    "INTL"     0x20051117
   SSDT   0x000000A0     0x02    "PmRef "  "Cpu1Tst "   0x00003000    "INTL"     0x20051117
   SSDT   0x00000253     0x02    "PmRef "  "Cpu0Ist "   0x00003000    "INTL"     0x20051117
   SSDT   0x00000653     0x02    "PmRef "  "Cpu0Cst "   0x00003001    "INTL"     0x20051117
   SSDT   0x000000D0     0x02    "PmRef "  "Cpu1Ist "   0x00003000    "INTL"     0x20051117
   SSDT   0x00000083     0x02    "PmRef "  "Cpu1Cst "   0x00003000    "INTL"     0x20051117

Found 17 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000005C
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : D3
[00Ah 0010   6]                       Oem ID : "MSI_NB"
[010h 0016   8]                 Oem Table ID : "MEGABOOK"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 01 [I/O APIC]
[03Dh 0061   1]                       Length : 0C
[03Eh 0062   1]                  I/O Apic ID : 02
[03Fh 0063   1]                     Reserved : 00
[040h 0064   4]                      Address : FEC00000
[044h 0068   4]                    Interrupt : 00000000

[048h 0072   1]                Subtable Type : 02 [Interrupt Source Override]
[049h 0073   1]                       Length : 0A
[04Ah 0074   1]                          Bus : 00
[04Bh 0075   1]                       Source : 00
[04Ch 0076   4]                    Interrupt : 00000002
[050h 0080   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[052h 0082   1]                Subtable Type : 02 [Interrupt Source Override]
[053h 0083   1]                       Length : 0A
[054h 0084   1]                          Bus : 00
[055h 0085   1]                       Source : 09
[056h 0086   4]                    Interrupt : 00000009
[05Ah 0090   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 92 (0x5C)

  0000: 41 50 49 43 5C 00 00 00 02 D3 4D 53 49 5F 4E 42  // APIC\.....MSI_NB
  0010: 4D 45 47 41 42 4F 4F 4B 04 20 22 06 4D 53 46 54  // MEGABOOK. ".MSFT
  0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
  0030: 01 00 00 00 00 08 02 01 01 00 00 00 01 0C 02 00  // ................
  0040: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
  0050: 00 00 02 0A 00 09 09 00 00 00 0D 00              // ............


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 1, "MSI_NB", "MEGABOOK", 0x00000000)
{
    Name (SP1O, 0x2E)
    Name (IOCE, 0x00)
    Name (IOCL, 0x00)
    Name (IO1B, 0x0A20)
    Name (IO1L, 0x20)
    Name (IOEC, 0x0A10)
    Name (IO4L, 0x80)
    Name (IO5L, 0x80)
    Name (IO2B, 0x0A00)
    Name (IO2L, 0x20)
    Name (IOPM, 0x0A00)
    Name (IO3B, 0x00)
    Name (IO3L, 0x10)
    Name (SI1P, 0x00)
    Name (MCHB, 0xFED14000)
    Name (MCHL, 0x4000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED18000)
    Name (DMIL, 0x1000)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (LAPB, 0xFEE00000)
    Name (SMBS, 0x1180)
    Name (SMBL, 0x20)
    Name (PMBS, 0x0400)
    Name (PMLN, 0x80)
    Name (SMIP, 0xB2)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x40)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (PM30, 0x0430)
    Name (SRCB, 0xFED20000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED23404)
    Name (ACPH, 0xDE)
    Name (ASSB, 0x00)
    Name (AOTB, 0x00)
    Name (AAXB, 0x00)
    Name (PEHP, 0x01)
    Name (SHPC, 0x00)
    Name (PEPM, 0x01)
    Name (PEER, 0x01)
    Name (PECS, 0x01)
    Name (ITKE, 0x00)
    Name (CMOS, 0x60)
    Method (RRIO, 4, NotSerialized)
    {
        Debug = "RRIO"
    }

    Method (RDMA, 3, NotSerialized)
    {
        Debug = "rDMA"
    }

    Name (PICM, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Method (OSXX, 0, NotSerialized)
    {
        If (\_OSI ("Windows 2009"))
        {
            Return (0x01)
        }
        Else
        {
            If (\_OSI ("Windows 2006"))
            {
                Return (0x01)
            }
            Else
            {
                Return (0x00)
            }
        }
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == 0x00))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x01
        If (CondRefOf (\_OSI, Local0))
        {
            If (\_OSI ("Linux"))
            {
                OSVR = 0x03
            }
            Else
            {
                If (\_OSI ("Windows 2001"))
                {
                    OSVR = 0x04
                }
                Else
                {
                    If (\_OSI ("Windows 2001.1"))
                    {
                        OSVR = 0x05
                    }
                    Else
                    {
                        If (\_OSI ("FreeBSD"))
                        {
                            OSVR = 0x06
                        }
                        Else
                        {
                            If (\_OSI ("HP-UX"))
                            {
                                OSVR = 0x07
                            }
                            Else
                            {
                                If (\_OSI ("OpenVMS"))
                                {
                                    OSVR = 0x08
                                }
                            }
                        }
                    }
                }
            }
        }
        Else
        {
            If (MCTH (\_OS, "Microsoft Windows NT"))
            {
                OSVR = 0x00
            }
            Else
            {
                If (MCTH (\_OS, "Microsoft Windows"))
                {
                    OSVR = 0x01
                }
                Else
                {
                    If (MCTH (\_OS, "Microsoft WindowsME: Millennium Edition"))
                    {
                        OSVR = 0x02
                    }
                    Else
                    {
                        If (MCTH (\_OS, "Linux"))
                        {
                            OSVR = 0x03
                        }
                        Else
                        {
                            If (MCTH (\_OS, "FreeBSD"))
                            {
                                OSVR = 0x06
                            }
                            Else
                            {
                                If (MCTH (\_OS, "HP-UX"))
                                {
                                    OSVR = 0x07
                                }
                                Else
                                {
                                    If (MCTH (\_OS, "OpenVMS"))
                                    {
                                        OSVR = 0x08
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + 0x01)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (Index (BUF0, Local0)) != DerefOf (Index (BUF1, Local0
                ))))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        Index (PRWP, 0x00) = Arg0
        Local0 = (SS1 << 0x01)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((0x01 << Arg1) & Local0))
        {
            Index (PRWP, 0x01) = Arg1
        }
        Else
        {
            Local0 >>= 0x01
            If (((OSFL () == 0x01) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, Index (PRWP, 0x01))
            }
            Else
            {
                FindSetRightBit (Local0, Index (PRWP, 0x01))
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, 0x80, 0x01)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, 0x01)
    Name (SS2, 0x00)
    Name (SS3, 0x01)
    Name (SS4, 0x01)
    Name (IOST, 0x4400)
    Name (TOPM, 0x3FFFFFFF)
    Name (ROMS, 0xFFE00000)
    Name (MG1B, 0x000C0000)
    Name (MG1L, 0x00040000)
    Name (MG2B, 0x40000000)
    Name (MG2L, 0xBFF00000)
    Scope (\_SB)
    {
        Name (PR00, Package (0x12)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKH, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }
        })
        Name (AR00, Package (0x12)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x10
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (0x00)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If (((OSFL () == 0x01) || (OSFL () == 0x02)))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Scope (\_SB)
            {
                Scope (PCI0)
                {
                    Device (MCH)
                    {
                        Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                        Name (_UID, 0x03B1)  // _UID: Unique ID
                        Name (_STA, 0x0F)  // _STA: Status
                        Name (MCHR, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000000,         // Address Length
                                _Y00)
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000000,         // Address Length
                                _Y01)
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000000,         // Address Length
                                _Y02)
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000000,         // Address Length
                                _Y03)
                        })
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            CreateDWordField (MCHR, \_SB.PCI0.MCH._Y00._LEN, ML)  // _LEN: Length
                            CreateDWordField (MCHR, \_SB.PCI0.MCH._Y00._BAS, MB)  // _BAS: Base Address
                            MB = \MCHB
                            ML = \MCHL
                            CreateDWordField (MCHR, \_SB.PCI0.MCH._Y01._LEN, EL)  // _LEN: Length
                            CreateDWordField (MCHR, \_SB.PCI0.MCH._Y01._BAS, EB)  // _BAS: Base Address
                            EB = \EGPB
                            EL = \EGPL
                            CreateDWordField (MCHR, \_SB.PCI0.MCH._Y02._LEN, DL)  // _LEN: Length
                            CreateDWordField (MCHR, \_SB.PCI0.MCH._Y02._BAS, DB)  // _BAS: Base Address
                            DB = \DMIB
                            DL = \DMIL
                            CreateDWordField (MCHR, \_SB.PCI0.MCH._Y03._LEN, PL)  // _LEN: Length
                            CreateDWordField (MCHR, \_SB.PCI0.MCH._Y03._BAS, PB)  // _BAS: Base Address
                            PB = \PEBS
                            PL = \PELN
                            Return (MCHR) /* \_SB_.PCI0.MCH_.MCHR */
                        }
                    }
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Device (P0P2)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PR02 */
                }

                Device (PEGP)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }
            }

            Device (IDE0)
            {
                Name (_ADR, 0x001F0001)  // _ADR: Address
                Name (\_SB.PCI0.NATA, Package (0x01)
                {
                    0x001F0001
                })
                Name (REGF, 0x01)
                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        REGF = Arg1
                    }
                }

                Name (TIM0, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x78, 
                        0xB4, 
                        0xF0, 
                        0x0384
                    }, 

                    Package (0x04)
                    {
                        0x23, 
                        0x21, 
                        0x10, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0B, 
                        0x09, 
                        0x04, 
                        0x00
                    }, 

                    Package (0x06)
                    {
                        0x70, 
                        0x49, 
                        0x36, 
                        0x27, 
                        0x19, 
                        0x0F
                    }, 

                    Package (0x06)
                    {
                        0x00, 
                        0x01, 
                        0x02, 
                        0x01, 
                        0x02, 
                        0x01
                    }, 

                    Package (0x06)
                    {
                        0x00, 
                        0x00, 
                        0x00, 
                        0x01, 
                        0x01, 
                        0x01
                    }, 

                    Package (0x04)
                    {
                        0x04, 
                        0x03, 
                        0x02, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        0x01, 
                        0x00, 
                        0x00
                    }
                })
                Name (TMD0, Buffer (0x14) {})
                CreateDWordField (TMD0, 0x00, PIO0)
                CreateDWordField (TMD0, 0x04, DMA0)
                CreateDWordField (TMD0, 0x08, PIO1)
                CreateDWordField (TMD0, 0x0C, DMA1)
                CreateDWordField (TMD0, 0x10, CHNF)
                OperationRegion (CFG2, PCI_Config, 0x40, 0x20)
                Field (CFG2, DWordAcc, NoLock, Preserve)
                {
                    PMPT,   4, 
                    PSPT,   4, 
                    PMRI,   6, 
                    Offset (0x02), 
                    SMPT,   4, 
                    SSPT,   4, 
                    SMRI,   6, 
                    Offset (0x04), 
                    PSRI,   4, 
                    SSRI,   4, 
                    Offset (0x08), 
                    PM3E,   1, 
                    PS3E,   1, 
                    SM3E,   1, 
                    SS3E,   1, 
                    Offset (0x0A), 
                    PMUT,   2, 
                        ,   2, 
                    PSUT,   2, 
                    Offset (0x0B), 
                    SMUT,   2, 
                        ,   2, 
                    SSUT,   2, 
                    Offset (0x0C), 
                    Offset (0x14), 
                    PM6E,   1, 
                    PS6E,   1, 
                    SM6E,   1, 
                    SS6E,   1, 
                    PMCR,   1, 
                    PSCR,   1, 
                    SMCR,   1, 
                    SSCR,   1, 
                        ,   4, 
                    PMAE,   1, 
                    PSAE,   1, 
                    SMAE,   1, 
                    SSAE,   1
                }

                Name (GMPT, 0x00)
                Name (GMUE, 0x00)
                Name (GMUT, 0x00)
                Name (GMCR, 0x00)
                Name (GSPT, 0x00)
                Name (GSUE, 0x00)
                Name (GSUT, 0x00)
                Name (GSCR, 0x00)
                Device (CHN0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (PSCR << 0x01)
                        Local0 = (PMCR | Local1)
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << 0x01)
                        Local3 |= Local4
                        Local1 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << 0x01)
                        Local3 |= Local4
                        Local2 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (PMRI, Local1, PMUT, PSRI, Local2, PSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << 0x01)
                        Local3 |= Local4
                        Local0 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << 0x01)
                        Local3 |= Local4
                        Local1 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local1 |= Local3
                        GMPT = PMRI /* \_SB_.PCI0.IDE0.PMRI */
                        GMUE = Local0
                        GMUT = PMUT /* \_SB_.PCI0.IDE0.PMUT */
                        GMCR = PMCR /* \_SB_.PCI0.IDE0.PMCR */
                        GSPT = PSRI /* \_SB_.PCI0.IDE0.PSRI */
                        GSUE = Local1
                        GSUT = PSUT /* \_SB_.PCI0.IDE0.PSUT */
                        GSCR = PSCR /* \_SB_.PCI0.IDE0.PSCR */
                        STM ()
                        PMRI = GMPT /* \_SB_.PCI0.IDE0.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.IDE0.GMUE */
                        PMUT = GMUT /* \_SB_.PCI0.IDE0.GMUT */
                        PMCR = GMCR /* \_SB_.PCI0.IDE0.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.IDE0.GSUE */
                        PSUT = GSUT /* \_SB_.PCI0.IDE0.GSUT */
                        PSCR = GSCR /* \_SB_.PCI0.IDE0.GSCR */
                        If ((Local0 & 0x01))
                        {
                            PM3E = 0x01
                        }
                        Else
                        {
                            PM3E = 0x00
                        }

                        If ((Local0 & 0x02))
                        {
                            PM6E = 0x01
                        }
                        Else
                        {
                            PM6E = 0x00
                        }

                        If ((Local0 & 0x04))
                        {
                            PMAE = 0x01
                        }
                        Else
                        {
                            PMAE = 0x00
                        }

                        If ((Local1 & 0x01))
                        {
                            PS3E = 0x01
                        }
                        Else
                        {
                            PS3E = 0x00
                        }

                        If ((Local1 & 0x02))
                        {
                            PS6E = 0x01
                        }
                        Else
                        {
                            PS6E = 0x00
                        }

                        If ((Local1 & 0x04))
                        {
                            PSAE = 0x01
                        }
                        Else
                        {
                            PSAE = 0x00
                        }

                        ATA0 = GTF (0x00, Arg1)
                        ATA1 = GTF (0x01, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA0))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA1))
                        }
                    }
                }

                Device (CHN1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (SSCR << 0x01)
                        Local0 = (SMCR | Local1)
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << 0x01)
                        Local3 |= Local4
                        Local1 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << 0x01)
                        Local3 |= Local4
                        Local2 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (SMRI, Local1, SMUT, SSRI, Local2, SSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << 0x01)
                        Local3 |= Local4
                        Local0 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << 0x01)
                        Local3 |= Local4
                        Local1 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local1 |= Local3
                        GMPT = SMRI /* \_SB_.PCI0.IDE0.SMRI */
                        GMUE = Local0
                        GMUT = SMUT /* \_SB_.PCI0.IDE0.SMUT */
                        GMCR = SMCR /* \_SB_.PCI0.IDE0.SMCR */
                        GSPT = SSRI /* \_SB_.PCI0.IDE0.SSRI */
                        GSUE = Local1
                        GSUT = SSUT /* \_SB_.PCI0.IDE0.SSUT */
                        GSCR = SSCR /* \_SB_.PCI0.IDE0.SSCR */
                        STM ()
                        SMRI = GMPT /* \_SB_.PCI0.IDE0.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.IDE0.GMUE */
                        SMUT = GMUT /* \_SB_.PCI0.IDE0.GMUT */
                        SMCR = GMCR /* \_SB_.PCI0.IDE0.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.IDE0.GSUE */
                        SSUT = GSUT /* \_SB_.PCI0.IDE0.GSUT */
                        SSCR = GSCR /* \_SB_.PCI0.IDE0.GSCR */
                        If ((Local0 & 0x01))
                        {
                            SM3E = 0x01
                        }
                        Else
                        {
                            SM3E = 0x00
                        }

                        If ((Local0 & 0x02))
                        {
                            SM6E = 0x01
                        }
                        Else
                        {
                            SM6E = 0x00
                        }

                        If ((Local0 & 0x04))
                        {
                            SMAE = 0x01
                        }
                        Else
                        {
                            SMAE = 0x00
                        }

                        If ((Local1 & 0x01))
                        {
                            SS3E = 0x01
                        }
                        Else
                        {
                            SS3E = 0x00
                        }

                        If ((Local1 & 0x02))
                        {
                            SS6E = 0x01
                        }
                        Else
                        {
                            SS6E = 0x00
                        }

                        If ((Local1 & 0x04))
                        {
                            SSAE = 0x01
                        }
                        Else
                        {
                            SSAE = 0x00
                        }

                        ATA2 = GTF (0x00, Arg1)
                        ATA3 = GTF (0x01, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA2))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA3))
                        }
                    }
                }

                Method (GTM, 7, Serialized)
                {
                    PIO0 = Ones
                    PIO1 = Ones
                    DMA0 = Ones
                    DMA1 = Ones
                    CHNF = 0x10
                    If (REGF) {}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.IDE0.TMD0 */
                    }

                    If ((Arg1 & 0x20))
                    {
                        CHNF |= 0x02
                    }

                    Local6 = Match (DerefOf (Index (TIM0, 0x01)), MEQ, Arg0, MTR, 0x00, 
                        0x00)
                    Local7 = DerefOf (Index (DerefOf (Index (TIM0, 0x00)), Local6))
                    DMA0 = Local7
                    PIO0 = Local7
                    If ((Arg4 & 0x20))
                    {
                        CHNF |= 0x08
                    }

                    Local6 = Match (DerefOf (Index (TIM0, 0x02)), MEQ, Arg3, MTR, 0x00, 
                        0x00)
                    Local7 = DerefOf (Index (DerefOf (Index (TIM0, 0x00)), Local6))
                    DMA1 = Local7
                    PIO1 = Local7
                    If ((Arg1 & 0x07))
                    {
                        Local5 = Arg2
                        If ((Arg1 & 0x02))
                        {
                            Local5 += 0x02
                        }

                        If ((Arg1 & 0x04))
                        {
                            Local5 += 0x04
                        }

                        DMA0 = DerefOf (Index (DerefOf (Index (TIM0, 0x03)), Local5))
                        CHNF |= 0x01
                    }

                    If ((Arg4 & 0x07))
                    {
                        Local5 = Arg5
                        If ((Arg4 & 0x02))
                        {
                            Local5 += 0x02
                        }

                        If ((Arg4 & 0x04))
                        {
                            Local5 += 0x04
                        }

                        DMA1 = DerefOf (Index (DerefOf (Index (TIM0, 0x03)), Local5))
                        CHNF |= 0x04
                    }

                    Debug = TMD0 /* \_SB_.PCI0.IDE0.TMD0 */
                    Return (TMD0) /* \_SB_.PCI0.IDE0.TMD0 */
                }

                Method (STM, 0, Serialized)
                {
                    If (REGF) {}
                    Else
                    {
                        GMUE = 0x00
                        GMUT = 0x00
                        GSUE = 0x00
                        GSUT = 0x00
                        If ((CHNF & 0x01))
                        {
                            Local0 = Match (DerefOf (Index (TIM0, 0x03)), MLE, DMA0, MTR, 0x00, 
                                0x00)
                            If ((Local0 > 0x05))
                            {
                                Local0 = 0x05
                            }

                            GMUT = DerefOf (Index (DerefOf (Index (TIM0, 0x04)), Local0))
                            GMUE |= 0x01
                            If ((Local0 > 0x02))
                            {
                                GMUE |= 0x02
                            }

                            If ((Local0 > 0x04))
                            {
                                GMUE &= 0xFD
                                GMUE |= 0x04
                            }
                        }
                        Else
                        {
                            If (((PIO0 == Ones) | (PIO0 == 0x00)))
                            {
                                If (((DMA0 < Ones) & (DMA0 > 0x00)))
                                {
                                    PIO0 = DMA0 /* \_SB_.PCI0.IDE0.DMA0 */
                                    GMUE |= 0x80
                                }
                            }
                        }

                        If ((CHNF & 0x04))
                        {
                            Local0 = Match (DerefOf (Index (TIM0, 0x03)), MLE, DMA1, MTR, 0x00, 
                                0x00)
                            If ((Local0 > 0x05))
                            {
                                Local0 = 0x05
                            }

                            GSUT = DerefOf (Index (DerefOf (Index (TIM0, 0x04)), Local0))
                            GSUE |= 0x01
                            If ((Local0 > 0x02))
                            {
                                GSUE |= 0x02
                            }

                            If ((Local0 > 0x04))
                            {
                                GSUE &= 0xFD
                                GSUE |= 0x04
                            }
                        }
                        Else
                        {
                            If (((PIO1 == Ones) | (PIO1 == 0x00)))
                            {
                                If (((DMA1 < Ones) & (DMA1 > 0x00)))
                                {
                                    PIO1 = DMA1 /* \_SB_.PCI0.IDE0.DMA1 */
                                    GSUE |= 0x80
                                }
                            }
                        }

                        If ((CHNF & 0x02))
                        {
                            GMUE |= 0x20
                        }

                        If ((CHNF & 0x08))
                        {
                            GSUE |= 0x20
                        }

                        Local0 = (Match (DerefOf (Index (TIM0, 0x00)), MGE, PIO0, MTR, 0x00, 
                            0x00) & 0x07)
                        Local1 = DerefOf (Index (DerefOf (Index (TIM0, 0x01)), Local0))
                        GMPT = Local1
                        If ((Local0 < 0x03))
                        {
                            GMUE |= 0x50
                        }

                        Local0 = (Match (DerefOf (Index (TIM0, 0x00)), MGE, PIO1, MTR, 0x00, 
                            0x00) & 0x07)
                        Local1 = DerefOf (Index (DerefOf (Index (TIM0, 0x02)), Local0))
                        GSPT = Local1
                        If ((Local0 < 0x03))
                        {
                            GSUE |= 0x50
                        }
                    }
                }

                Name (AT01, Buffer (0x07)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF         /* ....... */
                })
                Name (AT02, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90         /* ....... */
                })
                Name (AT03, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6         /* ....... */
                })
                Name (AT04, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91         /* ....... */
                })
                Name (ATA0, Buffer (0x1D) {})
                Name (ATA1, Buffer (0x1D) {})
                Name (ATA2, Buffer (0x1D) {})
                Name (ATA3, Buffer (0x1D) {})
                Name (ATAB, Buffer (0x1D) {})
                CreateByteField (ATAB, 0x00, CMDC)
                Method (GTFB, 3, Serialized)
                {
                    Local0 = (CMDC * 0x38)
                    Local1 = (Local0 + 0x08)
                    CreateField (ATAB, Local1, 0x38, CMDX)
                    Local0 = (CMDC * 0x07)
                    CreateByteField (ATAB, (Local0 + 0x02), A001)
                    CreateByteField (ATAB, (Local0 + 0x06), A005)
                    CMDX = Arg0
                    A001 = Arg1
                    A005 = Arg2
                    CMDC++
                }

                Method (GTF, 2, Serialized)
                {
                    Debug = Arg1
                    CMDC = 0x00
                    Name (ID49, 0x0C00)
                    Name (ID59, 0x00)
                    Name (ID53, 0x04)
                    Name (ID63, 0x0F00)
                    Name (ID88, 0x0F00)
                    Name (IRDY, 0x01)
                    Name (PIOT, 0x00)
                    Name (DMAT, 0x00)
                    If ((SizeOf (Arg1) == 0x0200))
                    {
                        CreateWordField (Arg1, 0x62, IW49)
                        ID49 = IW49 /* \_SB_.PCI0.IDE0.GTF_.IW49 */
                        CreateWordField (Arg1, 0x6A, IW53)
                        ID53 = IW53 /* \_SB_.PCI0.IDE0.GTF_.IW53 */
                        CreateWordField (Arg1, 0x7E, IW63)
                        ID63 = IW63 /* \_SB_.PCI0.IDE0.GTF_.IW63 */
                        CreateWordField (Arg1, 0x76, IW59)
                        ID59 = IW59 /* \_SB_.PCI0.IDE0.GTF_.IW59 */
                        CreateWordField (Arg1, 0xB0, IW88)
                        ID88 = IW88 /* \_SB_.PCI0.IDE0.GTF_.IW88 */
                    }

                    Local7 = 0xA0
                    If (Arg0)
                    {
                        Local7 = 0xB0
                        IRDY = (CHNF & 0x08)
                        If ((CHNF & 0x10))
                        {
                            PIOT = PIO1 /* \_SB_.PCI0.IDE0.PIO1 */
                        }
                        Else
                        {
                            PIOT = PIO0 /* \_SB_.PCI0.IDE0.PIO0 */
                        }

                        If ((CHNF & 0x04))
                        {
                            If ((CHNF & 0x10))
                            {
                                DMAT = DMA1 /* \_SB_.PCI0.IDE0.DMA1 */
                            }
                            Else
                            {
                                DMAT = DMA0 /* \_SB_.PCI0.IDE0.DMA0 */
                            }
                        }
                    }
                    Else
                    {
                        IRDY = (CHNF & 0x02)
                        PIOT = PIO0 /* \_SB_.PCI0.IDE0.PIO0 */
                        If ((CHNF & 0x01))
                        {
                            DMAT = DMA0 /* \_SB_.PCI0.IDE0.DMA0 */
                        }
                    }

                    If ((((ID53 & 0x04) && (ID88 & 0xFF00)) && DMAT))
                    {
                        Local1 = Match (DerefOf (Index (TIM0, 0x03)), MLE, DMAT, MTR, 0x00, 
                            0x00)
                        If ((Local1 > 0x05))
                        {
                            Local1 = 0x05
                        }

                        GTFB (AT01, (0x40 | Local1), Local7)
                    }
                    Else
                    {
                        If (((ID63 & 0xFF00) && PIOT))
                        {
                            Local0 = (Match (DerefOf (Index (TIM0, 0x00)), MGE, PIOT, MTR, 0x00, 
                                0x00) & 0x03)
                            Local1 = (0x20 | DerefOf (Index (DerefOf (Index (TIM0, 0x07)), Local0)))
                            GTFB (AT01, Local1, Local7)
                        }
                    }

                    If (IRDY)
                    {
                        Local0 = (Match (DerefOf (Index (TIM0, 0x00)), MGE, PIOT, MTR, 0x00, 
                            0x00) & 0x07)
                        Local1 = (0x08 | DerefOf (Index (DerefOf (Index (TIM0, 0x06)), Local0)))
                        GTFB (AT01, Local1, Local7)
                    }
                    Else
                    {
                        If ((ID49 & 0x0400))
                        {
                            GTFB (AT01, 0x01, Local7)
                        }
                    }

                    If (((ID59 & 0x0100) && (ID59 & 0xFF)))
                    {
                        GTFB (AT03, (ID59 & 0xFF), Local7)
                    }

                    Debug = ATAB /* \_SB_.PCI0.IDE0.ATAB */
                    Return (ATAB) /* \_SB_.PCI0.IDE0.ATAB */
                }

                Method (RATA, 1, NotSerialized)
                {
                    CreateByteField (Arg0, 0x00, CMDN)
                    Local0 = (CMDN * 0x38)
                    CreateField (Arg0, 0x08, Local0, RETB)
                    Debug = RETB /* \_SB_.PCI0.IDE0.RATA.RETB */
                    Return (RETB) /* \_SB_.PCI0.IDE0.RATA.RETB */
                }
            }

            Device (USB0)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, 0x01)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == 0x01) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = 0x00
                    }
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, 0x01)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == 0x01) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = 0x00
                    }
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, 0x01)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == 0x01) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = 0x00
                    }
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, 0x01)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == 0x01) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = 0x00
                    }
                }
            }

            Device (EHCI)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Scope (\_SB.PCI0.EHCI)
                {
                    Device (RHUB)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                        }

                        Device (PRT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                        }

                        Device (PRT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                        }
                    }
                }

                Scope (\_SB.PCI0.USB0)
                {
                    Device (RHUB)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                        }
                    }
                }

                Scope (\_SB.PCI0.USB1)
                {
                    Device (RHUB)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                        }
                    }
                }

                Scope (\_SB.PCI0.USB2)
                {
                    Device (RHUB)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                        }
                    }
                }

                Scope (\_SB.PCI0.USB3)
                {
                    Device (RHUB)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (0x00)
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (0x00)
                            }
                        }
                    }
                }
            }

            Device (MC97)
            {
                Name (_ADR, 0x001E0003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x05, 0x04))
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Method (SPTS, 1, NotSerialized)
                {
                    PS1S = One
                    PS1S = One
                    PS1E = One
                    If ((Arg0 == 0x04))
                    {
                        \_SB.PCI0.SBRG.EC.RSD3 = One
                    }

                    If ((Arg0 == 0x05))
                    {
                        \_SB.PCI0.SBRG.EC.RSD3 = Zero
                    }
                }

                Method (SWAK, 1, NotSerialized)
                {
                    PS1E = Zero
                    If ((Arg0 == 0x04))
                    {
                        Notify (\_SB.PWRB, 0x02) // Device Wake
                    }
                }

                OperationRegion (APMP, SystemIO, SMIP, 0x02)
                Field (APMP, ByteAcc, NoLock, Preserve)
                {
                    APMC,   8, 
                    APMS,   8
                }

                Field (APMP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                        ,   1, 
                    BRTC,   1
                }

                OperationRegion (PMS0, SystemIO, PMBS, 0x04)
                Field (PMS0, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   4, 
                    WAKS,   1, 
                    Offset (0x03), 
                    PWBT,   1, 
                    Offset (0x04)
                }

                OperationRegion (SMIE, SystemIO, PM30, 0x08)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    PS1E,   1, 
                        ,   31, 
                    PS1S,   1, 
                    Offset (0x08)
                }

                Scope (\_SB)
                {
                    Name (PWRS, 0x00)
                    Device (PWRB)
                    {
                        Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0B)
                        }
                    }
                }

                Scope (\_SB)
                {
                    Name (SLPS, 0x00)
                    Device (SLPB)
                    {
                        Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (ICH7)
                        {
                            Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                            Name (_UID, 0x01C7)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (ICHR, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y04)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y05)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y06)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y07)
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y08)
                                Memory32Fixed (ReadWrite,
                                    0xFFB00000,         // Address Base
                                    0x00100000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFC800400,         // Address Base
                                    0x00000C00,         // Address Length
                                    )
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (ICHR, \_SB.PCI0.ICH7._Y04._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (ICHR, \_SB.PCI0.ICH7._Y04._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (ICHR, \_SB.PCI0.ICH7._Y04._LEN, PML)  // _LEN: Length
                                PBB = \PMBS
                                PBH = \PMBS
                                PML = \PMLN
                                If (SMBS)
                                {
                                    CreateWordField (ICHR, \_SB.PCI0.ICH7._Y05._MIN, SMB)  // _MIN: Minimum Base Address
                                    CreateWordField (ICHR, \_SB.PCI0.ICH7._Y05._MAX, SMH)  // _MAX: Maximum Base Address
                                    CreateByteField (ICHR, \_SB.PCI0.ICH7._Y05._LEN, SML)  // _LEN: Length
                                    SMB = \SMBS
                                    SMH = \SMBS
                                    SML = \SMBL
                                }

                                If (GPBS)
                                {
                                    CreateWordField (ICHR, \_SB.PCI0.ICH7._Y06._MIN, IGB)  // _MIN: Minimum Base Address
                                    CreateWordField (ICHR, \_SB.PCI0.ICH7._Y06._MAX, IGH)  // _MAX: Maximum Base Address
                                    CreateByteField (ICHR, \_SB.PCI0.ICH7._Y06._LEN, IGL)  // _LEN: Length
                                    IGB = \GPBS
                                    IGH = \GPBS
                                    IGL = \GPLN
                                }

                                If (APCB)
                                {
                                    CreateDWordField (ICHR, \_SB.PCI0.ICH7._Y07._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (ICHR, \_SB.PCI0.ICH7._Y07._LEN, APL)  // _LEN: Length
                                    APB = \APCB
                                    APL = \APCL
                                }

                                CreateDWordField (ICHR, \_SB.PCI0.ICH7._Y08._BAS, RCB)  // _BAS: Base Address
                                CreateDWordField (ICHR, \_SB.PCI0.ICH7._Y08._LEN, RCL)  // _LEN: Length
                                RCB = \SRCB
                                RCL = \SRCL
                                Return (ICHR) /* \_SB_.PCI0.ICH7.ICHR */
                            }
                        }
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x00,               // Alignment
                            0x09,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (CRS) /* \_SB_.PCI0.SBRG.RMSC.CRS_ */
                    }
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            FixedIO (
                                0x0060,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0064,             // Address
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                }
            }

            Device (P0P4)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }

                Device (PSL0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (P0P5)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PR05 */
                }

                Device (PSL1)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (P0P6)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PR06 */
                }
            }

            Device (P0P7)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PR07 */
                }
            }

            Device (P0P8)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PR08) /* \_SB_.PR08 */
                }
            }

            Device (P0P9)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PR09) /* \_SB_.PR09 */
                }
            }

            Device (IGD)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    SWIT = Arg0
                }

                Name (_DOD, Package (0x02)  // _DOD: Display Output Devices
                {
                    0x00010100, 
                    0x00010410
                })
                Device (CRT)
                {
                    Name (_ADR, 0x0100)  // _ADR: Address
                    Name (_DCS, 0x1F)  // _DCS: Display Current Status
                    Name (_DGS, 0x00)  // _DGS: Display Graphics State
                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }
                }

                Device (LCD)
                {
                    Name (_ADR, 0x0410)  // _ADR: Address
                    Name (_DCS, 0x1F)  // _DCS: Display Current Status
                    Name (_DGS, 0x01)  // _DGS: Display Graphics State
                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                    }

                    Name (LCFG, 0x00)
                    Name (LCBF, 0x00)
                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        If ((Arg0 == 0x14))
                        {
                            Local0 = 0x00
                        }

                        If ((Arg0 == 0x1E))
                        {
                            Local0 = 0x01
                        }

                        If ((Arg0 == 0x28))
                        {
                            Local0 = 0x02
                        }

                        If ((Arg0 == 0x32))
                        {
                            Local0 = 0x03
                        }

                        If ((Arg0 == 0x3C))
                        {
                            Local0 = 0x04
                        }

                        If ((Arg0 == 0x46))
                        {
                            Local0 = 0x05
                        }

                        If ((Arg0 == 0x50))
                        {
                            Local0 = 0x06
                        }

                        If ((Arg0 == 0x5A))
                        {
                            Local0 = 0x07
                        }

                        If ((Arg0 == 0x64))
                        {
                            Local0 = 0x08
                        }

                        LCBF = Local0
                        \_SB.PCI0.SBRG.EC.BRLV = Local0
                    }

                    Name (PBCL, Package (0x0B)
                    {
                        0x50, 
                        0x14, 
                        0x14, 
                        0x1E, 
                        0x28, 
                        0x32, 
                        0x3C, 
                        0x46, 
                        0x50, 
                        0x5A, 
                        0x64
                    })
                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Return (PBCL) /* \_SB_.PCI0.IGD_.LCD_.PBCL */
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        If (LCFG)
                        {
                            Local0 = LCBF /* \_SB_.PCI0.IGD_.LCD_.LCBF */
                        }
                        Else
                        {
                            Local0 = \_SB.PCI0.SBRG.EC.BRLV
                            LCBF = Local0
                            LCFG = 0x01
                        }

                        Local0 += 0x02
                        Local1 = DerefOf (Index (PBCL, Local0))
                        Return (Local1)
                    }
                }

                Name (SWIT, 0x00)
                Name (GDCS, 0x02)
                Name (GDGS, 0x01)
                Name (GDTS, 0x00)
                Name (GDFG, 0x01)
            }
        }

        Scope (\_GPE)
        {
            Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.P0P2, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P2.PEGP, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P4, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P5, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P6, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P7, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P8, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P9, 0x02) // Device Wake
            }

            Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.MC97, 0x02) // Device Wake
            }

            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
            }
        }
    }

    OperationRegion (\_SB.PCI0.SBRG.PIX0, PCI_Config, 0x60, 0x0C)
    Field (\_SB.PCI0.SBRG.PIX0, ByteAcc, NoLock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        Offset (0x08), 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8
    }

    Scope (\_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, _Y09)
                {15}
        })
        CreateWordField (BUFA, \_SB._Y09._INT, IRA0)  // _INT: Interrupts
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRA & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRA & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRB & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRB & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRD & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRD & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRE & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRE & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRF & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRF & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRG & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRG & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRH & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRH & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (\_PR)
    {
        Processor (CPU0, 0x01, 0x00000410, 0x06) {}
        Processor (CPU1, 0x02, 0x00000410, 0x06) {}
    }

    Scope (\_SB)
    {
        Scope (PCI0)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
            }

            Name (CRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
            })
            CreateDWordField (CRS, \_SB.PCI0._Y0A._MIN, MIN5)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y0A._MAX, MAX5)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y0A._LEN, LEN5)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y0B._MIN, MIN6)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y0B._MAX, MAX6)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y0B._LEN, LEN6)  // _LEN: Length
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = MG1L /* \MG1L */
                If (Local0)
                {
                    MIN5 = MG1B /* \MG1B */
                    LEN5 = MG1L /* \MG1L */
                    MAX5 = (MIN5 + Local0--)
                }

                MIN6 = MG2B /* \MG2B */
                LEN6 = MG2L /* \MG2L */
                Local0 = MG2L /* \MG2L */
                MAX6 = (MIN6 + Local0--)
                Return (CRS) /* \_SB_.PCI0.CRS_ */
            }
        }
    }

    Name (WOTB, 0x00)
    Name (WSSB, 0x00)
    Name (WAXB, 0x00)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        PTS (Arg0)
        Index (WAKP, 0x00) = 0x00
        Index (WAKP, 0x01) = 0x00
        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        AAXB = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (Index (WAKP, 0x00)))
        {
            Index (WAKP, 0x01) = 0x00
        }
        Else
        {
            Index (WAKP, 0x01) = Arg0
        }

        Return (WAKP) /* \WAKP */
    }

    OperationRegion (PMS0, SystemIO, PMBS, 0x02)
    Field (PMS0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        PWBT,   1, 
            ,   1, 
        RTCS,   1, 
            ,   4, 
        WAKS,   1
    }

    OperationRegion (SMIE, SystemIO, PM30, 0x08)
    Field (SMIE, ByteAcc, NoLock, Preserve)
    {
            ,   4, 
        PS1E,   1, 
            ,   31, 
        PS1S,   1, 
        Offset (0x08)
    }

    Scope (\_SB)
    {
        Scope (PCI0)
        {
            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Name (CRS, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFED00000,         // Address Base
                        0x00000400,         // Address Length
                        _Y0C)
                })
                OperationRegion (HCNT, SystemMemory, \HPTC, 0x04)
                Field (HCNT, DWordAcc, NoLock, Preserve)
                {
                    HPTS,   2, 
                        ,   5, 
                    HPTE,   1
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((OSXX () == 0x01))
                    {
                        If (HPTE)
                        {
                            Return (0x0F)
                        }
                    }
                    Else
                    {
                        If (HPTE)
                        {
                            Return (0x0B)
                        }
                    }

                    Return (0x00)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (CRS, \_SB.PCI0.HPET._Y0C._BAS, HTBS)  // _BAS: Base Address
                    Local0 = (HPTS * 0x1000)
                    HTBS = (Local0 + 0xFED00000)
                    Return (CRS) /* \_SB_.PCI0.HPET.CRS_ */
                }
            }
        }
    }

    Scope (\_SB)
    {
        Scope (PCI0)
        {
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }
        }
    }

    Device (OMSC)
    {
        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
        Name (_UID, 0x0E11)  // _UID: Unique ID
    }

    Device (\_SB.RMEM)
    {
        Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
        Name (_UID, 0x01)  // _UID: Unique ID
    }

    Scope (\_SB.PCI0.SBRG)
    {
        OperationRegion (RTCA, SystemIO, 0x72, 0x02)
        Field (RTCA, ByteAcc, NoLock, Preserve)
        {
            RTCI,   8, 
            RTCD,   8
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            RTCI = CMOS /* \CMOS */
            RTCD = OSFL ()
        }
    }

    Scope (\_TZ)
    {
        Method (KELV, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFF)
            Local0 *= 0x0A
            Local0 += 0x0AAC
            Return (Local0)
        }

        ThermalZone (THRM)
        {
            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.SBRG.EC.MYEC)
                {
                    If (\_SB.PCI0.SBRG.EC.CTSD)
                    {
                        \_SB.PCI0.SBRG.EC.CTSD = 0x00
                        Return (KELV (0x6E))
                    }
                    Else
                    {
                        Local0 = \_SB.PCI0.SBRG.EC.CPUT
                        Local0 += 0x02
                        Return (KELV (Local0))
                    }
                }
                Else
                {
                    Return (KELV (0x2D))
                }
            }

            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Return (KELV (0x64))
            }
        }
    }

    Scope (\_SB.PCI0.SBRG)
    {
        Device (EC)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_GPE, 0x17)  // _GPE: General Purpose Events
            Name (CTID, 0x00)
            Name (MYEC, 0x01)
            Name (CTSD, 0x00)
            Name (\PTHR, 0x00)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    MYEC = Arg1
                    If ((Arg1 == 0x01))
                    {
                        If (\_OSI ("Windows 2009"))
                        {
                            OSVR = 0x03
                        }
                        Else
                        {
                            If (\_OSI ("Windows 2006"))
                            {
                                OSVR = 0x02
                            }
                            Else
                            {
                                If (\_OSI ("Windows 2001"))
                                {
                                    OSVR = 0x01
                                }
                                Else
                                {
                                    If (\_OSI ("Windows 2001 SP1"))
                                    {
                                        OSVR = 0x01
                                    }
                                    Else
                                    {
                                        If (\_OSI ("Windows 2001 SP2"))
                                        {
                                            OSVR = 0x01
                                        }
                                        Else
                                        {
                                            If (\_OSI ("Windows 2001 SP3"))
                                            {
                                                OSVR = 0x01
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                CTSD = 0x00
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            OperationRegion (EC, EmbeddedControl, 0x00, 0x0100)
            Field (EC, ByteAcc, NoLock, Preserve)
            {
                SMPR,   8, 
                SMST,   8, 
                SMAD,   8, 
                SMCM,   8, 
                SMD0,   264, 
                SMAA,   8, 
                Offset (0x2C), 
                HSTT,   1, 
                Offset (0x2D), 
                Offset (0x30), 
                POWS,   1, 
                LIDS,   1, 
                KBCS,   1, 
                Offset (0x31), 
                MBTS,   1, 
                MBCS,   1, 
                MBDS,   1, 
                MBFS,   1, 
                MBWS,   1, 
                MBLS,   1, 
                MBCL,   1, 
                MBFL,   1, 
                Offset (0x34), 
                HSKS,   3, 
                    ,   1, 
                OSVR,   4, 
                Offset (0x38), 
                MDCL,   8, 
                MDCH,   8, 
                MDVL,   8, 
                MDVH,   8, 
                MCAL,   8, 
                MCAH,   8, 
                MSTL,   8, 
                MSTH,   8, 
                MCCL,   8, 
                MCCH,   8, 
                MPOL,   8, 
                MPOH,   8, 
                MFCL,   8, 
                MFCH,   8, 
                MCUL,   8, 
                MCUH,   8, 
                MRCL,   8, 
                MRCH,   8, 
                MVOL,   8, 
                MVOH,   8, 
                MTEL,   8, 
                MTEH,   8, 
                RSV1,   8, 
                RSD2,   4, 
                RSD3,   1, 
                RSD4,   3, 
                SDCL,   8, 
                SDCH,   8, 
                SDVL,   8, 
                SDVH,   8, 
                SCAL,   8, 
                SCAH,   8, 
                SSTL,   8, 
                SSTH,   8, 
                SCCL,   8, 
                SCCH,   8, 
                SPOL,   8, 
                SPOH,   8, 
                SFCL,   8, 
                SFCH,   8, 
                SCUL,   8, 
                SCUH,   8, 
                SRCL,   8, 
                SRCH,   8, 
                SVOL,   8, 
                SVOH,   8, 
                STEL,   8, 
                STEH,   8, 
                Offset (0x68), 
                CPUT,   8, 
                Offset (0x7E), 
                RES1,   3, 
                CHET,   1, 
                Offset (0x80), 
                SYST,   8, 
                Offset (0xED), 
                SCIC,   8, 
                Offset (0xF1), 
                BRLV,   8, 
                Offset (0xFE), 
                DCBL,   8, 
                ACBL,   8
            }

            Device (ADP1)
            {
                Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                Name (BFLG, 0x01)
                Name (ACP, 0x01)
                Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                {
                    If (\_SB.PCI0.SBRG.EC.POWS)
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                {
                    \_SB
                })
            }

            Name (BIF0, Package (0x0D)
            {
                0x01, 
                0x1130, 
                0x1130, 
                0x01, 
                0x39D0, 
                0x00, 
                0x00, 
                0x01, 
                0x01, 
                "MS-N031", 
                "1", 
                "LION", 
                "MSI Corp."
            })
            Name (STAT, Package (0x04)
            {
                0x02, 
                0x0500, 
                0x0800, 
                0x03E8
            })
            Device (BAT1)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                {
                    \_SB
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (\_SB.PCI0.SBRG.EC.MYEC)
                    {
                        If (\_SB.PCI0.SBRG.EC.MBTS)
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                {
                    If (\_SB.PCI0.SBRG.EC.MYEC)
                    {
                        UPBI ()
                    }
                    Else
                    {
                        IVBI ()
                        DBG8 = 0x99
                        Sleep (0x03E8)
                    }

                    Return (BIF0) /* \_SB_.PCI0.SBRG.EC__.BIF0 */
                }

                Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                {
                    If (\_SB.PCI0.SBRG.EC.MYEC)
                    {
                        UPBS ()
                    }
                    Else
                    {
                        IVBS ()
                    }

                    Return (STAT) /* \_SB_.PCI0.SBRG.EC__.STAT */
                }

                Method (IVBI, 0, NotSerialized)
                {
                    Index (BIF0, 0x01) = 0xFFFFFFFF
                    Index (BIF0, 0x02) = 0xFFFFFFFF
                    Index (BIF0, 0x04) = 0xFFFFFFFF
                    Index (BIF0, 0x09) = "Wrong"
                    Index (BIF0, 0x0A) = " "
                    Index (BIF0, 0x0B) = "Wrong"
                    Index (BIF0, 0x0C) = "Wrong"
                }

                Method (IVBS, 0, NotSerialized)
                {
                    Index (STAT, 0x00) = 0x00
                    Index (STAT, 0x01) = 0xFFFFFFFF
                    Index (STAT, 0x02) = 0xFFFFFFFF
                    Index (STAT, 0x03) = 0x2710
                }

                Method (UPBI, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = 0x00
                    Local2 = 0x00
                    Local3 = 0x00
                    Local0 = MDCH /* \_SB_.PCI0.SBRG.EC__.MDCH */
                    Local1 = MDCL /* \_SB_.PCI0.SBRG.EC__.MDCL */
                    Local0 <<= 0x08
                    Local0 |= Local1
                    Index (BIF0, 0x01) = Local0
                    Local0 = MFCH /* \_SB_.PCI0.SBRG.EC__.MFCH */
                    Local1 = MFCL /* \_SB_.PCI0.SBRG.EC__.MFCL */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    Index (BIF0, 0x02) = Local1
                    Local0 = MDVH /* \_SB_.PCI0.SBRG.EC__.MDVH */
                    Local2 = MDVL /* \_SB_.PCI0.SBRG.EC__.MDVL */
                    Local0 <<= 0x08
                    Local2 |= Local0
                    Index (BIF0, 0x04) = Local2
                    Index (BIF0, 0x0A) = "\n"
                    Index (BIF0, 0x0B) = "LION\n"
                    Local0 = CTID /* \_SB_.PCI0.SBRG.EC__.CTID */
                    If ((Local0 == 0x00))
                    {
                        Index (BIF0, 0x09) = "MS-N031\n"
                        Index (BIF0, 0x0C) = "MSI Corp.\n"
                    }
                    Else
                    {
                        Index (BIF0, 0x09) = "?MODEL\n"
                        Index (BIF0, 0x0C) = "?CUSTOMER\n"
                    }
                }

                Method (UPBS, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = 0x00
                    Local2 = 0x00
                    Local3 = 0x00
                    Local4 = 0x00
                    Local7 = 0x00
                    Local0 = MBTS /* \_SB_.PCI0.SBRG.EC__.MBTS */
                    If ((Local0 == 0x01))
                    {
                        Local0 = POWS /* \_SB_.PCI0.SBRG.EC__.POWS */
                        If ((Local0 == 0x01))
                        {
                            Local1 = MBCS /* \_SB_.PCI0.SBRG.EC__.MBCS */
                            If ((Local1 == 0x01))
                            {
                                Local4 |= 0x02
                            }
                        }
                        Else
                        {
                            Local4 |= 0x01
                            Local0 = MBLS /* \_SB_.PCI0.SBRG.EC__.MBLS */
                            If ((Local0 == 0x01))
                            {
                                Local4 |= 0x04
                            }
                        }

                        Local0 = POWS /* \_SB_.PCI0.SBRG.EC__.POWS */
                        If ((Local0 == 0x01))
                        {
                            Local0 = MBCS /* \_SB_.PCI0.SBRG.EC__.MBCS */
                            If ((Local0 == 0x01))
                            {
                                Local0 = MCUH /* \_SB_.PCI0.SBRG.EC__.MCUH */
                                Local1 = MCUL /* \_SB_.PCI0.SBRG.EC__.MCUL */
                                Local0 <<= 0x08
                                Local1 |= Local0
                                If ((Local1 == 0xFFFF))
                                {
                                    Local1 = 0xFFFFFFFF
                                }

                                Index (STAT, 0x01) = Local1
                            }
                            Else
                            {
                                Index (STAT, 0x01) = 0x00
                            }
                        }
                        Else
                        {
                            Local0 = MCUH /* \_SB_.PCI0.SBRG.EC__.MCUH */
                            Local1 = MCUL /* \_SB_.PCI0.SBRG.EC__.MCUL */
                            Local0 <<= 0x08
                            Local1 |= Local0
                            Local1 ^= 0xFFFF
                            If ((Local1 == 0x00))
                            {
                                Local1 = 0xFFFFFFFF
                            }

                            Index (STAT, 0x01) = Local1
                        }

                        Local0 = MRCH /* \_SB_.PCI0.SBRG.EC__.MRCH */
                        Local2 = MRCL /* \_SB_.PCI0.SBRG.EC__.MRCL */
                        Local0 <<= 0x08
                        Local2 |= Local0
                        Index (STAT, 0x02) = Local2
                        Local0 = MVOH /* \_SB_.PCI0.SBRG.EC__.MVOH */
                        Local3 = MVOL /* \_SB_.PCI0.SBRG.EC__.MVOL */
                        Local0 <<= 0x08
                        Local3 |= Local0
                        Index (STAT, 0x03) = Local3
                        Index (STAT, 0x00) = Local4
                        Sleep (0x64)
                    }
                    Else
                    {
                        IVBS ()
                    }
                }
            }

            Device (LID0)
            {
                Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                {
                    If (\_SB.PCI0.SBRG.EC.MYEC)
                    {
                        Local0 = \_SB.PCI0.SBRG.EC.LIDS
                    }
                    Else
                    {
                        Local0 = 0x01
                    }

                    Return (Local0)
                }
            }

            Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x80
                DBG8 = 0x80
            }

            Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x81
                DBG8 = 0x81
                CHET = One
                \PTHR |= 0x01
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                Sleep (0x64)
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
            }

            Method (_Q82, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x82
                DBG8 = 0x82
                CHET = One
                \PTHR &= 0xFE
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                Sleep (0x64)
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
            }

            Method (_Q83, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x83
                DBG8 = 0x83
                Local0 = 0x00
                Local0 = POWS /* \_SB_.PCI0.SBRG.EC__.POWS */
                If ((Local0 == 0x01))
                {
                    \_SB.PCI0.SBRG.EC.ADP1.ACP = 0x01
                }
                Else
                {
                    \_SB.PCI0.SBRG.EC.ADP1.ACP = 0x00
                }

                Notify (\_SB.PCI0.SBRG.EC.ADP1, 0x80) // Status Change
                Sleep (0x64)
                If (\_OSI ("Windows 2006")) {}
                Else
                {
                    APMC = 0x8C
                }
            }

            Method (_Q84, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x84
                DBG8 = 0x84
                Notify (\_SB.PCI0.SBRG.EC.LID0, 0x80) // Status Change
            }

            Method (_QBD, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0xBD
                DBG8 = 0xBD
                Notify (\_SB.SLPB, 0x80) // Status Change
            }

            Method (_Q85, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x85
                DBG8 = 0x85
            }

            Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x86
                DBG8 = 0x86
            }

            Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x87
                DBG8 = 0x87
                Local0 = 0x00
                Local0 = MBTS /* \_SB_.PCI0.SBRG.EC__.MBTS */
                If ((Local0 == 0x01))
                {
                    \_SB.PCI0.SBRG.EC.ADP1.BFLG = 0x01
                    Notify (\_SB.PCI0.SBRG.EC.BAT1, 0x80) // Status Change
                }
                Else
                {
                    \_SB.PCI0.SBRG.EC.ADP1.BFLG = 0x00
                    Notify (\_SB.PCI0.SBRG.EC.BAT1, 0x81) // Information Change
                }

                Notify (\_SB.PCI0.SBRG.EC.ADP1, 0x80) // Status Change
            }

            Method (_Q77, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x77
                DBG8 = 0x77
                Local0 = 0x00
                Local0 = MBTS /* \_SB_.PCI0.SBRG.EC__.MBTS */
                If ((Local0 == 0x01))
                {
                    \_SB.PCI0.SBRG.EC.ADP1.BFLG = 0x01
                    Notify (\_SB.PCI0.SBRG.EC.BAT1, 0x80) // Status Change
                }
                Else
                {
                    \_SB.PCI0.SBRG.EC.ADP1.BFLG = 0x00
                    Notify (\_SB.PCI0.SBRG.EC.BAT1, 0x81) // Information Change
                }

                Notify (\_SB.PCI0.SBRG.EC.ADP1, 0x80) // Status Change
            }

            Method (_Q88, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x88
                DBG8 = 0x88
            }

            Method (_Q89, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x89
                DBG8 = 0x89
            }

            Method (_Q8A, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x8A
                DBG8 = 0x8A
                \_SB.PCI0.SBRG.EC.CTSD = 0x01
                Notify (\_TZ.THRM, 0x80) // Thermal Status Change
            }

            Method (_Q8B, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x8B
                DBG8 = 0x8B
            }

            Method (_Q8C, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x8C
                DBG8 = 0x8C
            }

            Method (_Q90, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0x90
                DBG8 = 0x90
            }

            Method (_QB4, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0xB4
                DBG8 = 0xB4
                If ((\_SB.PCI0.IGD.SWIT == 0x00))
                {
                    APMC = 0xB4
                    Local0 = APMS /* \_SB_.PCI0.SBRG.APMS */
                    DBG8 = Local0
                    If ((\_SB.PCI0.IGD.GDTS == 0x00))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((\_SB.PCI0.IGD.GDGS == 0x01))
                            {
                                \_SB.PCI0.IGD.LCD._DGS = 0x00
                                \_SB.PCI0.IGD.CRT._DGS = 0x01
                            }

                            If ((\_SB.PCI0.IGD.GDGS == 0x02))
                            {
                                \_SB.PCI0.IGD.LCD._DGS = 0x01
                                \_SB.PCI0.IGD.CRT._DGS = 0x01
                            }

                            If ((\_SB.PCI0.IGD.GDGS == 0x03))
                            {
                                \_SB.PCI0.IGD.LCD._DGS = 0x01
                                \_SB.PCI0.IGD.CRT._DGS = 0x00
                            }

                            If ((\_SB.PCI0.IGD.GDGS >= 0x03))
                            {
                                \_SB.PCI0.IGD.GDGS = 0x01
                            }
                            Else
                            {
                                \_SB.PCI0.IGD.GDGS += 0x01
                            }
                        }

                        Notify (\_SB.PCI0.IGD, 0x80) // Status Change
                    }
                }
            }

            Method (_QB5, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0xB5
                DBG8 = 0xB5
            }

            Method (_QB6, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0xB6
                DBG8 = 0xB6
            }

            Method (_QB7, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0xB7
                DBG8 = 0xB7
                If (\_OSI ("Windows 2006"))
                {
                    Notify (\_SB.PCI0.IGD.LCD, 0x87) // Device-Specific
                }
                Else
                {
                    If ((BRLV != 0x00))
                    {
                        Local0 = BRLV /* \_SB_.PCI0.SBRG.EC__.BRLV */
                        Local0--
                        BRLV = Local0
                    }
                }
            }

            Method (_QB8, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0xB8
                DBG8 = 0xB8
                If (\_OSI ("Windows 2006"))
                {
                    Notify (\_SB.PCI0.IGD.LCD, 0x86) // Device-Specific
                }
                Else
                {
                    If ((BRLV != 0x08))
                    {
                        Local0 = BRLV /* \_SB_.PCI0.SBRG.EC__.BRLV */
                        Local0++
                        BRLV = Local0
                    }
                }
            }

            Method (_QB9, 0, NotSerialized)  // _Qxx: EC Query
            {
                SCIC = 0xB9
                DBG8 = 0xB9
                \_SB.PCI0.SBRG.EC.HSTT = 0x00
            }

            OperationRegion (LP4D, SystemIO, 0x4D, 0x02)
            Field (LP4D, WordAcc, NoLock, Preserve)
            {
                IO4D,   16
            }

            OperationRegion (LP4F, SystemIO, 0x4F, 0x01)
            Field (LP4F, ByteAcc, NoLock, Preserve)
            {
                IO4F,   8
            }

            OperationRegion (IO, SystemIO, 0x62, 0x05)
            Field (IO, ByteAcc, Lock, Preserve)
            {
                DAT1,   8, 
                Offset (0x04), 
                CMD1,   8
            }

            Field (IO, ByteAcc, Lock, Preserve)
            {
                Offset (0x04), 
                OUTS,   1, 
                INPS,   1
            }

            Method (IRDY, 0, Serialized)
            {
                Return (!INPS)
            }

            Method (ORDY, 0, Serialized)
            {
                Return (OUTS) /* \_SB_.PCI0.SBRG.EC__.OUTS */
            }

            Method (WATI, 0, Serialized)
            {
                Local0 = 0x32
                While ((Local0 && !IRDY ()))
                {
                    Sleep (0x01)
                    Local0--
                }

                Return (IRDY ())
            }

            Method (WATO, 0, Serialized)
            {
                Local0 = 0x32
                While ((Local0 && !ORDY ()))
                {
                    Sleep (0x01)
                    Local0--
                }

                Return (ORDY ())
            }

            Method (CLRB, 0, Serialized)
            {
                While (WATO ())
                {
                    Local0 = DAT1 /* \_SB_.PCI0.SBRG.EC__.DAT1 */
                }
            }

            Method (RDEC, 1, Serialized)
            {
                If (WATI ())
                {
                    CMD1 = 0x80
                    If (WATI ())
                    {
                        DAT1 = Arg0
                        If (WATO ())
                        {
                            Return (DAT1) /* \_SB_.PCI0.SBRG.EC__.DAT1 */
                        }
                    }
                }

                Return (Zero)
            }

            Method (WREC, 2, Serialized)
            {
                Noop
            }

            Method (QREC, 0, Serialized)
            {
                Noop
            }

            Method (_QC0, 0, NotSerialized)  // _Qxx: EC Query
            {
                \_SB.PCI0.SBRG.EC.SCM0.TDED = 0xC0
                DBG8 = 0xC0
                Notify (SCM0, 0xC0) // Hardware-Specific
            }

            Device (SCM0)
            {
                Name (_HID, "pnp0c14")  // _HID: Hardware ID
                Name (_UID, 0x00)  // _UID: Unique ID
                Name (TDVR, 0x12)
                Name (_WDG, Buffer (0xC8)
                {
                    /* 0000 */  0x6A, 0x8D, 0x41, 0x24, 0x79, 0x0A, 0x4C, 0x52,  /* j.A$y.LR */
                    /* 0008 */  0x9A, 0xB1, 0x18, 0xB7, 0x8C, 0xA6, 0x8C, 0xE7,  /* ........ */
                    /* 0010 */  0x41, 0x41, 0x22, 0x01, 0x6B, 0xD5, 0xFB, 0x4A,  /* AA".k..J */
                    /* 0018 */  0x91, 0x9F, 0x49, 0x8F, 0x81, 0xF5, 0x99, 0x5B,  /* ..I....[ */
                    /* 0020 */  0xA7, 0x38, 0x22, 0xAF, 0x41, 0x42, 0x02, 0x01,  /* .8".AB.. */
                    /* 0028 */  0x6C, 0xBA, 0x3C, 0x2D, 0x9C, 0x1C, 0x41, 0x7F,  /* l.<-..A. */
                    /* 0030 */  0xB5, 0x4C, 0xF5, 0xD5, 0xD5, 0x80, 0xD4, 0x82,  /* .L...... */
                    /* 0038 */  0x41, 0x43, 0x01, 0x01, 0x6D, 0x02, 0xBA, 0x40,  /* AC..m..@ */
                    /* 0040 */  0x5D, 0x07, 0x4A, 0xCD, 0x97, 0x10, 0xF7, 0xC5,  /* ].J..... */
                    /* 0048 */  0x73, 0x47, 0xCA, 0xC9, 0x41, 0x44, 0x0F, 0x01,  /* sG..AD.. */
                    /* 0050 */  0x6E, 0xCF, 0xBC, 0x8D, 0xB4, 0x9D, 0x46, 0x0E,  /* n.....F. */
                    /* 0058 */  0xA3, 0xF2, 0x99, 0xAF, 0xAA, 0xA7, 0x7A, 0x7A,  /* ......zz */
                    /* 0060 */  0x41, 0x45, 0x0D, 0x01, 0x6F, 0x21, 0x2A, 0xBD,  /* AE..o!*. */
                    /* 0068 */  0xB9, 0x2F, 0x40, 0xA6, 0xB8, 0x07, 0xDD, 0xDB,  /* ./@..... */
                    /* 0070 */  0xAD, 0x65, 0x68, 0x91, 0x41, 0x46, 0x13, 0x01,  /* .eh.AF.. */
                    /* 0078 */  0x7A, 0xEC, 0xC3, 0x1E, 0x9B, 0x1E, 0x4A, 0xE7,  /* z.....J. */
                    /* 0080 */  0x90, 0x26, 0xCF, 0x12, 0x2B, 0x0B, 0xBD, 0x21,  /* .&..+..! */
                    /* 0088 */  0x41, 0x47, 0x12, 0x01, 0x7B, 0x3D, 0x75, 0xA1,  /* AG..{=u. */
                    /* 0090 */  0x21, 0xB6, 0x4A, 0xDE, 0xB4, 0x1A, 0x55, 0x71,  /* !.J...Uq */
                    /* 0098 */  0x6A, 0x0E, 0xCE, 0x7A, 0x41, 0x48, 0x15, 0x01,  /* j..zAH.. */
                    /* 00A0 */  0x7C, 0x3D, 0x75, 0xA1, 0x21, 0xB6, 0x4A, 0xDE,  /* |=u.!.J. */
                    /* 00A8 */  0xB4, 0x1A, 0x55, 0x71, 0x6A, 0x0E, 0xCE, 0x7A,  /* ..Uqj..z */
                    /* 00B0 */  0x41, 0x49, 0x08, 0x01, 0x8A, 0xC3, 0x3C, 0x5B,  /* AI....<[ */
                    /* 00B8 */  0xD9, 0x40, 0x45, 0x72, 0x8A, 0xE6, 0x11, 0x45,  /* .@Er...E */
                    /* 00C0 */  0xB7, 0x51, 0xBE, 0x3F, 0xC0, 0x00, 0x01, 0x09   /* .Q.?.... */
                })
                OperationRegion (EC, EmbeddedControl, 0x00, 0x0100)
                Field (EC, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x2D), 
                    T2D0,   1, 
                    T2D1,   4, 
                    T2D5,   3, 
                    TD2E,   8, 
                    TD2F,   8, 
                    TD30,   8, 
                    TD31,   8, 
                    TD32,   8, 
                    TD33,   8, 
                    Offset (0x35), 
                    TD35,   8, 
                    TD36,   8, 
                    Offset (0x38), 
                    TD38,   16, 
                    TD3A,   16, 
                    TD3C,   16, 
                    TD3E,   16, 
                    TD40,   16, 
                    TD42,   16, 
                    TD44,   16, 
                    TD46,   16, 
                    TD48,   16, 
                    TD4A,   16, 
                    TD4C,   16, 
                    Offset (0x50), 
                    TD50,   16, 
                    TD52,   16, 
                    TD54,   16, 
                    TD56,   16, 
                    TD58,   16, 
                    TD5A,   16, 
                    TD5C,   16, 
                    TD5E,   16, 
                    TD60,   16, 
                    TD62,   16, 
                    TD64,   16, 
                    Offset (0x68), 
                    TD68,   8, 
                    TD69,   8, 
                    TD6A,   8, 
                    TD6B,   8, 
                    TD6C,   8, 
                    TD6D,   8, 
                    TD6E,   8, 
                    TD6F,   8, 
                    TD70,   8, 
                    TD71,   8, 
                    TD72,   8, 
                    TD73,   8, 
                    TD74,   8, 
                    TD75,   8, 
                    TD76,   8, 
                    TD77,   8, 
                    TD78,   8, 
                    TD79,   8, 
                    Offset (0x80), 
                    TD80,   8, 
                    TD81,   8, 
                    TD82,   8, 
                    TD83,   8, 
                    TD84,   8, 
                    TD85,   8, 
                    TD86,   8, 
                    TD87,   8, 
                    TD88,   8, 
                    TD89,   8, 
                    TD8A,   8, 
                    TD8B,   8, 
                    TD8C,   8, 
                    TD8D,   8, 
                    TD8E,   8, 
                    TD8F,   8, 
                    TD90,   8, 
                    Offset (0xA0), 
                    TDA0,   8, 
                    TDA1,   8, 
                    TDA2,   8, 
                    TDA3,   8, 
                    TDA4,   8, 
                    TDA5,   8, 
                    TDA6,   8, 
                    TDA7,   8, 
                    TDA8,   8, 
                    TDA9,   8, 
                    TDAA,   8, 
                    TDAB,   8, 
                    TDAC,   8, 
                    TDAD,   8, 
                    TDAE,   8, 
                    TDAF,   8, 
                    TDB0,   8, 
                    TDB1,   8, 
                    TDB2,   8, 
                    TDB3,   8, 
                    TDB4,   8, 
                    TDB5,   8, 
                    TDB6,   8, 
                    TDB7,   8, 
                    TDB8,   8, 
                    TDB9,   8, 
                    TDBA,   8, 
                    TDBB,   8, 
                    Offset (0xC8), 
                    TDC8,   8, 
                    TDC9,   8, 
                    TDCA,   8, 
                    TDCB,   8, 
                    TDCC,   8, 
                    TDCD,   8, 
                    TDCE,   8, 
                    TDCF,   8, 
                    Offset (0xE0), 
                    TDE0,   8, 
                    Offset (0xE3), 
                    TDE3,   8, 
                    TE40,   3, 
                    TE43,   5, 
                    TDE5,   8, 
                    TDE6,   8, 
                    TDE7,   8, 
                    TDE8,   8, 
                    TDE9,   8, 
                    Offset (0xED), 
                    TDED,   8, 
                    TDEE,   8, 
                    Offset (0xF0), 
                    TDF0,   8, 
                    TDF1,   8, 
                    TDF2,   8, 
                    TDF3,   8, 
                    TDF4,   8, 
                    TDF5,   8, 
                    TDF6,   8, 
                    TDF7,   8, 
                    TDF8,   8, 
                    TDF9,   8, 
                    TDFA,   8, 
                    TDFB,   8, 
                    TDFC,   8, 
                    TDFD,   8, 
                    TDFE,   8, 
                    TDFF,   8
                }

                Method (WQAA, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = T2D0 /* \_SB_.PCI0.SBRG.EC__.SCM0.T2D0 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x01))
                    {
                        Local0 = T2D1 /* \_SB_.PCI0.SBRG.EC__.SCM0.T2D1 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 = TDEE /* \_SB_.PCI0.SBRG.EC__.SCM0.TDEE */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 = T2D5 /* \_SB_.PCI0.SBRG.EC__.SCM0.T2D5 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x04))
                    {
                        Local0 = TDE5 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE5 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x05))
                    {
                        Local0 = TDE6 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE6 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x06))
                    {
                        Local0 = TDA0 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA0 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x07))
                    {
                        Local0 = TDA1 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA1 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x08))
                    {
                        Local0 = TDA2 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA2 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x09))
                    {
                        Local0 = TDA3 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA3 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0A))
                    {
                        Local0 = TDA4 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA4 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0B))
                    {
                        Local0 = TDA5 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA5 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0C))
                    {
                        Local0 = TDA6 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA6 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0D))
                    {
                        Local0 = TDA7 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA7 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0E))
                    {
                        Local0 = TDA8 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA8 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0F))
                    {
                        Local0 = TDA9 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA9 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x10))
                    {
                        Local0 = TDAA /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAA */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x11))
                    {
                        Local0 = TDAB /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAB */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x12))
                    {
                        Local0 = TDAC /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAC */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x13))
                    {
                        Local0 = TDAD /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAD */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x14))
                    {
                        Local0 = TDAE /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAE */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x15))
                    {
                        Local0 = TDAF /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAF */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x16))
                    {
                        Local0 = TDB0 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB0 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x17))
                    {
                        Local0 = TDB1 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB1 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x18))
                    {
                        Local0 = TDB2 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB2 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x19))
                    {
                        Local0 = TDB3 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB3 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x1A))
                    {
                        Local0 = TDB4 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB4 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x1B))
                    {
                        Local0 = TDB5 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB5 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x1C))
                    {
                        Local0 = TDB6 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB6 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x1D))
                    {
                        Local0 = TDB7 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB7 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x1E))
                    {
                        Local0 = TDB8 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB8 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x1F))
                    {
                        Local0 = TDB9 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB9 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x20))
                    {
                        Local0 = TDBA /* \_SB_.PCI0.SBRG.EC__.SCM0.TDBA */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x21))
                    {
                        Local0 = TDBB /* \_SB_.PCI0.SBRG.EC__.SCM0.TDBB */
                        Return (Local0)
                    }
                }

                Method (WQAB, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local1 = TD2E /* \_SB_.PCI0.SBRG.EC__.SCM0.TD2E */
                        Return (Local1)
                    }

                    If ((Arg0 == 0x01))
                    {
                        Local1 = TD2F /* \_SB_.PCI0.SBRG.EC__.SCM0.TD2F */
                        Return (Local1)
                    }
                }

                Method (WQAC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local2 = TD30 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD30 */
                        Return (Local2)
                    }
                }

                Method (WQAD, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = TD31 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD31 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x01))
                    {
                        Local0 = TD38 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD38 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 = TD3A /* \_SB_.PCI0.SBRG.EC__.SCM0.TD3A */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 = TD3C /* \_SB_.PCI0.SBRG.EC__.SCM0.TD3C */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x04))
                    {
                        Local0 = TD3E /* \_SB_.PCI0.SBRG.EC__.SCM0.TD3E */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x05))
                    {
                        Local0 = TD40 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD40 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x06))
                    {
                        Local0 = TD42 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD42 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x07))
                    {
                        Local0 = TD44 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD44 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x08))
                    {
                        Local0 = TD46 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD46 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x09))
                    {
                        Local0 = TD48 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD48 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0A))
                    {
                        Local0 = TD4A /* \_SB_.PCI0.SBRG.EC__.SCM0.TD4A */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0B))
                    {
                        Local0 = TD4C /* \_SB_.PCI0.SBRG.EC__.SCM0.TD4C */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0C))
                    {
                        Local0 = TDE8 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE8 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0D))
                    {
                        Local0 = TD35 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD35 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0E))
                    {
                        Local0 = TD36 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD36 */
                        Return (Local0)
                    }
                }

                Method (WQAE, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = TD32 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD32 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x01))
                    {
                        Local0 = TD50 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD50 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 = TD52 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD52 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 = TD54 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD54 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x04))
                    {
                        Local0 = TD56 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD56 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x05))
                    {
                        Local0 = TD58 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD58 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x06))
                    {
                        Local0 = TD5A /* \_SB_.PCI0.SBRG.EC__.SCM0.TD5A */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x07))
                    {
                        Local0 = TD5C /* \_SB_.PCI0.SBRG.EC__.SCM0.TD5C */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x08))
                    {
                        Local0 = TD5E /* \_SB_.PCI0.SBRG.EC__.SCM0.TD5E */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x09))
                    {
                        Local0 = TD60 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD60 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0A))
                    {
                        Local0 = TD62 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD62 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0B))
                    {
                        Local0 = TD64 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD64 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0C))
                    {
                        Local0 = TDE9 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE9 */
                        Return (Local0)
                    }
                }

                Method (WQAF, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = TD33 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD33 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x01))
                    {
                        Local0 = TD68 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD68 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 = TD71 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD71 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 = TD70 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD70 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x04))
                    {
                        Local0 = TD69 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD69 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x05))
                    {
                        Local0 = TD6A /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6A */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x06))
                    {
                        Local0 = TD6B /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6B */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x07))
                    {
                        Local0 = TD6C /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6C */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x08))
                    {
                        Local0 = TD6D /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6D */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x09))
                    {
                        Local0 = TD6E /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6E */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0A))
                    {
                        Local0 = TD6F /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6F */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0B))
                    {
                        Local0 = TD72 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD72 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0C))
                    {
                        Local0 = TD73 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD73 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0D))
                    {
                        Local0 = TD74 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD74 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0E))
                    {
                        Local0 = TD75 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD75 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0F))
                    {
                        Local0 = TD76 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD76 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x10))
                    {
                        Local0 = TD77 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD77 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x11))
                    {
                        Local0 = TD78 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD78 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x12))
                    {
                        Local0 = TD79 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD79 */
                        Return (Local0)
                    }
                }

                Method (WQAG, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = TD33 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD33 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x01))
                    {
                        Local0 = TD80 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD80 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 = TD89 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD89 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 = TD88 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD88 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x04))
                    {
                        Local0 = TD81 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD81 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x05))
                    {
                        Local0 = TD82 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD82 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x06))
                    {
                        Local0 = TD83 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD83 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x07))
                    {
                        Local0 = TD84 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD84 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x08))
                    {
                        Local0 = TD85 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD85 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x09))
                    {
                        Local0 = TD86 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD86 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0A))
                    {
                        Local0 = TD87 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD87 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0B))
                    {
                        Local0 = TD8A /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8A */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0C))
                    {
                        Local0 = TD8B /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8B */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0D))
                    {
                        Local0 = TD8C /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8C */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0E))
                    {
                        Local0 = TD8D /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8D */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0F))
                    {
                        Local0 = TD8E /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8E */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x10))
                    {
                        Local0 = TD8F /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8F */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x11))
                    {
                        Local0 = TD90 /* \_SB_.PCI0.SBRG.EC__.SCM0.TD90 */
                        Return (Local0)
                    }
                }

                Method (WQAH, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = TE40 /* \_SB_.PCI0.SBRG.EC__.SCM0.TE40 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x01))
                    {
                        Local0 = TE43 /* \_SB_.PCI0.SBRG.EC__.SCM0.TE43 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 = TDE7 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE7 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 = TDF0 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF0 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x04))
                    {
                        Local0 = TDF1 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF1 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x05))
                    {
                        Local0 = TDFE /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFE */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x06))
                    {
                        Local0 = TDFF /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFF */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x07))
                    {
                        Local0 = TDF2 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF2 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x08))
                    {
                        Local0 = TDF3 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF3 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x09))
                    {
                        Local0 = TDF4 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF4 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0A))
                    {
                        Local0 = TDF5 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF5 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0B))
                    {
                        Local0 = TDF6 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF6 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0C))
                    {
                        Local0 = TDF7 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF7 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0D))
                    {
                        Local0 = TDF8 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF8 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0E))
                    {
                        Local0 = TDF9 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF9 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x0F))
                    {
                        Local0 = TDFA /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFA */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x10))
                    {
                        Local0 = TDFB /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFB */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x11))
                    {
                        Local0 = TDFC /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFC */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x12))
                    {
                        Local0 = TDFD /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFD */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x13))
                    {
                        Local0 = TDE0 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE0 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x14))
                    {
                        Local0 = TDE3 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE3 */
                        Return (Local0)
                    }
                }

                Method (WQAI, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = TDCF /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCF */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x01))
                    {
                        TDCE = TDVR /* \_SB_.PCI0.SBRG.EC__.SCM0.TDVR */
                        Local0 = TDCE /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCE */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 = TDCD /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCD */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 = TDCC /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCC */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x04))
                    {
                        Local0 = TDCB /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCB */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x05))
                    {
                        Local0 = TDCA /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCA */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x06))
                    {
                        Local0 = TDC9 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDC9 */
                        Return (Local0)
                    }

                    If ((Arg0 == 0x07))
                    {
                        Local0 = TDC8 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDC8 */
                        Return (Local0)
                    }
                }

                Method (WSAA, 2, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        T2D0 = Arg1
                        Return (T2D0) /* \_SB_.PCI0.SBRG.EC__.SCM0.T2D0 */
                    }

                    If ((Arg0 == 0x01))
                    {
                        T2D1 = Arg1
                        Return (T2D1) /* \_SB_.PCI0.SBRG.EC__.SCM0.T2D1 */
                    }

                    If ((Arg0 == 0x02))
                    {
                        TDEE = Arg1
                        Return (TDEE) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDEE */
                    }

                    If ((Arg0 == 0x03))
                    {
                        T2D5 = Arg1
                        Return (T2D5) /* \_SB_.PCI0.SBRG.EC__.SCM0.T2D5 */
                    }

                    If ((Arg0 == 0x04))
                    {
                        TDE5 = Arg1
                        Return (TDE5) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE5 */
                    }

                    If ((Arg0 == 0x05))
                    {
                        TDE6 = Arg1
                        Return (TDE6) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE6 */
                    }

                    If ((Arg0 == 0x06))
                    {
                        TDA0 = Arg1
                        Return (TDA0) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA0 */
                    }

                    If ((Arg0 == 0x07))
                    {
                        TDA1 = Arg1
                        Return (TDA1) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA1 */
                    }

                    If ((Arg0 == 0x08))
                    {
                        TDA2 = Arg1
                        Return (TDA2) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA2 */
                    }

                    If ((Arg0 == 0x09))
                    {
                        TDA3 = Arg1
                        Return (TDA3) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA3 */
                    }

                    If ((Arg0 == 0x0A))
                    {
                        TDA4 = Arg1
                        Return (TDA4) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA4 */
                    }

                    If ((Arg0 == 0x0B))
                    {
                        TDA5 = Arg1
                        Return (TDA5) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA5 */
                    }

                    If ((Arg0 == 0x0C))
                    {
                        TDA6 = Arg1
                        Return (TDA6) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA6 */
                    }

                    If ((Arg0 == 0x0D))
                    {
                        TDA7 = Arg1
                        Return (TDA7) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA7 */
                    }

                    If ((Arg0 == 0x0E))
                    {
                        TDA8 = Arg1
                        Return (TDA8) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA8 */
                    }

                    If ((Arg0 == 0x0F))
                    {
                        TDA9 = Arg1
                        Return (TDA9) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDA9 */
                    }

                    If ((Arg0 == 0x10))
                    {
                        TDAA = Arg1
                        Return (TDAA) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAA */
                    }

                    If ((Arg0 == 0x11))
                    {
                        TDAB = Arg1
                        Return (TDAB) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAB */
                    }

                    If ((Arg0 == 0x12))
                    {
                        TDAC = Arg1
                        Return (TDAC) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAC */
                    }

                    If ((Arg0 == 0x13))
                    {
                        TDAD = Arg1
                        Return (TDAD) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAD */
                    }

                    If ((Arg0 == 0x14))
                    {
                        TDAE = Arg1
                        Return (TDAE) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAE */
                    }

                    If ((Arg0 == 0x15))
                    {
                        TDAF = Arg1
                        Return (TDAF) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDAF */
                    }

                    If ((Arg0 == 0x16))
                    {
                        TDB0 = Arg1
                        Return (TDB0) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB0 */
                    }

                    If ((Arg0 == 0x17))
                    {
                        TDB1 = Arg1
                        Return (TDB1) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB1 */
                    }

                    If ((Arg0 == 0x18))
                    {
                        TDB2 = Arg1
                        Return (TDB2) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB2 */
                    }

                    If ((Arg0 == 0x19))
                    {
                        TDB3 = Arg1
                        Return (TDB3) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB3 */
                    }

                    If ((Arg0 == 0x1A))
                    {
                        TDB4 = Arg1
                        Return (TDB4) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB4 */
                    }

                    If ((Arg0 == 0x1B))
                    {
                        TDB5 = Arg1
                        Return (TDB5) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB5 */
                    }

                    If ((Arg0 == 0x1C))
                    {
                        TDB6 = Arg1
                        Return (TDB6) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB6 */
                    }

                    If ((Arg0 == 0x1D))
                    {
                        TDB7 = Arg1
                        Return (TDB7) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB7 */
                    }

                    If ((Arg0 == 0x1E))
                    {
                        TDB8 = Arg1
                        Return (TDB8) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB8 */
                    }

                    If ((Arg0 == 0x1F))
                    {
                        TDB9 = Arg1
                        Return (TDB9) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDB9 */
                    }

                    If ((Arg0 == 0x20))
                    {
                        TDBA = Arg1
                        Return (TDBA) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDBA */
                    }

                    If ((Arg0 == 0x21))
                    {
                        TDBB = Arg1
                        Return (TDBB) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDBB */
                    }
                }

                Method (WSAB, 2, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        TD2E = Arg1
                        Return (TD2E) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD2E */
                    }

                    If ((Arg0 == 0x01))
                    {
                        TD2F = Arg1
                        Return (TD2F) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD2F */
                    }
                }

                Method (WSAC, 2, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        TD30 = Arg1
                        Return (TD30) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD30 */
                    }
                }

                Method (WSAD, 2, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        TD31 = Arg1
                        Return (TD31) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD31 */
                    }

                    If ((Arg0 == 0x01))
                    {
                        TD38 = Arg1
                        Return (TD38) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD38 */
                    }

                    If ((Arg0 == 0x02))
                    {
                        TD3A = Arg1
                        Return (TD3A) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD3A */
                    }

                    If ((Arg0 == 0x03))
                    {
                        TD3C = Arg1
                        Return (TD3C) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD3C */
                    }

                    If ((Arg0 == 0x04))
                    {
                        TD3E = Arg1
                        Return (TD3E) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD3E */
                    }

                    If ((Arg0 == 0x05))
                    {
                        TD40 = Arg1
                        Return (TD40) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD40 */
                    }

                    If ((Arg0 == 0x06))
                    {
                        TD42 = Arg1
                        Return (TD42) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD42 */
                    }

                    If ((Arg0 == 0x07))
                    {
                        TD44 = Arg1
                        Return (TD44) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD44 */
                    }

                    If ((Arg0 == 0x08))
                    {
                        TD46 = Arg1
                        Return (TD46) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD46 */
                    }

                    If ((Arg0 == 0x09))
                    {
                        TD48 = Arg1
                        Return (TD48) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD48 */
                    }

                    If ((Arg0 == 0x0A))
                    {
                        TD4A = Arg1
                        Return (TD4A) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD4A */
                    }

                    If ((Arg0 == 0x0B))
                    {
                        TD4C = Arg1
                        Return (TD4C) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD4C */
                    }

                    If ((Arg0 == 0x0C))
                    {
                        TDE8 = Arg1
                        Return (TDE8) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE8 */
                    }

                    If ((Arg0 == 0x0D))
                    {
                        TD35 = Arg1
                        Return (TD35) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD35 */
                    }

                    If ((Arg0 == 0x0E))
                    {
                        TD36 = Arg1
                        Return (TD36) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD36 */
                    }
                }

                Method (WSAE, 2, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        TD32 = Arg1
                        Return (TD32) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD32 */
                    }

                    If ((Arg0 == 0x01))
                    {
                        TD50 = Arg1
                        Return (TD50) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD50 */
                    }

                    If ((Arg0 == 0x02))
                    {
                        TD52 = Arg1
                        Return (TD52) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD52 */
                    }

                    If ((Arg0 == 0x03))
                    {
                        TD54 = Arg1
                        Return (TD54) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD54 */
                    }

                    If ((Arg0 == 0x04))
                    {
                        TD56 = Arg1
                        Return (TD56) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD56 */
                    }

                    If ((Arg0 == 0x05))
                    {
                        TD58 = Arg1
                        Return (TD58) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD58 */
                    }

                    If ((Arg0 == 0x06))
                    {
                        TD5A = Arg1
                        Return (TD5A) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD5A */
                    }

                    If ((Arg0 == 0x07))
                    {
                        TD5C = Arg1
                        Return (TD5C) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD5C */
                    }

                    If ((Arg0 == 0x08))
                    {
                        TD5E = Arg1
                        Return (TD5E) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD5E */
                    }

                    If ((Arg0 == 0x09))
                    {
                        TD60 = Arg1
                        Return (TD60) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD60 */
                    }

                    If ((Arg0 == 0x0A))
                    {
                        TD62 = Arg1
                        Return (TD62) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD62 */
                    }

                    If ((Arg0 == 0x0B))
                    {
                        TD64 = Arg1
                        Return (TD64) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD64 */
                    }

                    If ((Arg0 == 0x0C))
                    {
                        TDE9 = Arg1
                        Return (TDE9) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE9 */
                    }
                }

                Method (WSAF, 2, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        TD33 = Arg1
                        Return (TD33) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD33 */
                    }

                    If ((Arg0 == 0x01))
                    {
                        TD68 = Arg1
                        Return (TD68) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD68 */
                    }

                    If ((Arg0 == 0x02))
                    {
                        TD71 = Arg1
                        Return (TD71) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD71 */
                    }

                    If ((Arg0 == 0x03))
                    {
                        TD70 = Arg1
                        Return (TD70) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD70 */
                    }

                    If ((Arg0 == 0x04))
                    {
                        TD69 = Arg1
                        Return (TD69) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD69 */
                    }

                    If ((Arg0 == 0x05))
                    {
                        TD6A = Arg1
                        Return (TD6A) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6A */
                    }

                    If ((Arg0 == 0x06))
                    {
                        TD6B = Arg1
                        Return (TD6B) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6B */
                    }

                    If ((Arg0 == 0x07))
                    {
                        TD6C = Arg1
                        Return (TD6C) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6C */
                    }

                    If ((Arg0 == 0x08))
                    {
                        TD6D = Arg1
                        Return (TD6D) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6D */
                    }

                    If ((Arg0 == 0x09))
                    {
                        TD6E = Arg1
                        Return (TD6E) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6E */
                    }

                    If ((Arg0 == 0x0A))
                    {
                        TD6F = Arg1
                        Return (TD6F) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD6F */
                    }

                    If ((Arg0 == 0x0B))
                    {
                        TD72 = Arg1
                        Return (TD72) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD72 */
                    }

                    If ((Arg0 == 0x0C))
                    {
                        TD73 = Arg1
                        Return (TD73) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD73 */
                    }

                    If ((Arg0 == 0x0D))
                    {
                        TD74 = Arg1
                        Return (TD74) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD74 */
                    }

                    If ((Arg0 == 0x0E))
                    {
                        TD75 = Arg1
                        Return (TD75) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD75 */
                    }

                    If ((Arg0 == 0x0F))
                    {
                        TD76 = Arg1
                        Return (TD76) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD76 */
                    }

                    If ((Arg0 == 0x10))
                    {
                        TD77 = Arg1
                        Return (TD77) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD77 */
                    }

                    If ((Arg0 == 0x11))
                    {
                        TD78 = Arg1
                        Return (TD78) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD78 */
                    }

                    If ((Arg0 == 0x12))
                    {
                        TD79 = Arg1
                        Return (TD79) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD79 */
                    }
                }

                Method (WSAG, 2, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        TD33 = Arg1
                        Return (TD33) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD33 */
                    }

                    If ((Arg0 == 0x01))
                    {
                        TD80 = Arg1
                        Return (TD80) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD80 */
                    }

                    If ((Arg0 == 0x02))
                    {
                        TD89 = Arg1
                        Return (TD89) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD89 */
                    }

                    If ((Arg0 == 0x03))
                    {
                        TD88 = Arg1
                        Return (TD88) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD88 */
                    }

                    If ((Arg0 == 0x04))
                    {
                        TD81 = Arg1
                        Return (TD81) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD81 */
                    }

                    If ((Arg0 == 0x05))
                    {
                        TD82 = Arg1
                        Return (TD82) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD82 */
                    }

                    If ((Arg0 == 0x06))
                    {
                        TD83 = Arg1
                        Return (TD83) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD83 */
                    }

                    If ((Arg0 == 0x07))
                    {
                        TD84 = Arg1
                        Return (TD84) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD84 */
                    }

                    If ((Arg0 == 0x08))
                    {
                        TD85 = Arg1
                        Return (TD85) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD85 */
                    }

                    If ((Arg0 == 0x09))
                    {
                        TD86 = Arg1
                        Return (TD86) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD86 */
                    }

                    If ((Arg0 == 0x0A))
                    {
                        TD87 = Arg1
                        Return (TD87) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD87 */
                    }

                    If ((Arg0 == 0x0B))
                    {
                        TD8A = Arg1
                        Return (TD8A) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8A */
                    }

                    If ((Arg0 == 0x0C))
                    {
                        TD8B = Arg1
                        Return (TD8B) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8B */
                    }

                    If ((Arg0 == 0x0D))
                    {
                        TD8C = Arg1
                        Return (TD8C) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8C */
                    }

                    If ((Arg0 == 0x0E))
                    {
                        TD8D = Arg1
                        Return (TD8D) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8D */
                    }

                    If ((Arg0 == 0x0F))
                    {
                        TD8E = Arg1
                        Return (TD8E) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8E */
                    }

                    If ((Arg0 == 0x10))
                    {
                        TD8F = Arg1
                        Return (TD8F) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD8F */
                    }

                    If ((Arg0 == 0x11))
                    {
                        TD90 = Arg1
                        Return (TD90) /* \_SB_.PCI0.SBRG.EC__.SCM0.TD90 */
                    }
                }

                Method (WSAH, 2, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        TE40 = Arg1
                        Return (TE40) /* \_SB_.PCI0.SBRG.EC__.SCM0.TE40 */
                    }

                    If ((Arg0 == 0x01))
                    {
                        TE43 = Arg1
                        Return (TE43) /* \_SB_.PCI0.SBRG.EC__.SCM0.TE43 */
                    }

                    If ((Arg0 == 0x02))
                    {
                        TDE7 = Arg1
                        Return (TDE7) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE7 */
                    }

                    If ((Arg0 == 0x03))
                    {
                        TDF0 = Arg1
                        Return (TDF0) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF0 */
                    }

                    If ((Arg0 == 0x04))
                    {
                        TDF1 = Arg1
                        Return (TDF1) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF1 */
                    }

                    If ((Arg0 == 0x05))
                    {
                        TDFE = Arg1
                        Return (TDFE) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFE */
                    }

                    If ((Arg0 == 0x06))
                    {
                        TDFF = Arg1
                        Return (TDFF) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFF */
                    }

                    If ((Arg0 == 0x07))
                    {
                        TDF2 = Arg1
                        Return (TDF2) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF2 */
                    }

                    If ((Arg0 == 0x08))
                    {
                        TDF3 = Arg1
                        Return (TDF3) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF3 */
                    }

                    If ((Arg0 == 0x09))
                    {
                        TDF4 = Arg1
                        Return (TDF4) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF4 */
                    }

                    If ((Arg0 == 0x0A))
                    {
                        TDF5 = Arg1
                        Return (TDF5) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF5 */
                    }

                    If ((Arg0 == 0x0B))
                    {
                        TDF6 = Arg1
                        Return (TDF6) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF6 */
                    }

                    If ((Arg0 == 0x0C))
                    {
                        TDF7 = Arg1
                        Return (TDF7) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF7 */
                    }

                    If ((Arg0 == 0x0D))
                    {
                        TDF8 = Arg1
                        Return (TDF8) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF8 */
                    }

                    If ((Arg0 == 0x0E))
                    {
                        TDF9 = Arg1
                        Return (TDF9) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF9 */
                    }

                    If ((Arg0 == 0x0F))
                    {
                        TDFA = Arg1
                        Return (TDFA) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFA */
                    }

                    If ((Arg0 == 0x10))
                    {
                        TDFB = Arg1
                        Return (TDFB) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFB */
                    }

                    If ((Arg0 == 0x11))
                    {
                        TDFC = Arg1
                        Return (TDFC) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFC */
                    }

                    If ((Arg0 == 0x12))
                    {
                        TDFD = Arg1
                        Return (TDFD) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDFD */
                    }

                    If ((Arg0 == 0x13))
                    {
                        TDE0 = Arg1
                        Return (TDE0) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE0 */
                    }

                    If ((Arg0 == 0x14))
                    {
                        TDE3 = Arg1
                        Return (TDE3) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDE3 */
                    }
                }

                Method (WSAI, 2, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        TDCF = Arg1
                        Return (TDCF) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCF */
                    }

                    If ((Arg0 == 0x01))
                    {
                        TDCE = Arg1
                        Return (TDCE) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCE */
                    }

                    If ((Arg0 == 0x02))
                    {
                        TDCD = Arg1
                        Return (TDCD) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCD */
                    }

                    If ((Arg0 == 0x03))
                    {
                        TDCC = Arg1
                        Return (TDCC) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCC */
                    }

                    If ((Arg0 == 0x04))
                    {
                        TDCB = Arg1
                        Return (TDCB) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCB */
                    }

                    If ((Arg0 == 0x05))
                    {
                        TDCA = Arg1
                        Return (TDCA) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDCA */
                    }

                    If ((Arg0 == 0x06))
                    {
                        TDC9 = Arg1
                        Return (TDC9) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDC9 */
                    }

                    If ((Arg0 == 0x07))
                    {
                        TDC8 = Arg1
                        Return (TDC8) /* \_SB_.PCI0.SBRG.EC__.SCM0.TDC8 */
                    }
                }

                Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
                {
                    If ((Arg0 == 0xC0))
                    {
                        Name (EVRT, Buffer (0x02)
                        {
                             0x00, 0x00                                       /* .. */
                        })
                        Name (TMPB, 0x00)
                        TMPB = TDEE /* \_SB_.PCI0.SBRG.EC__.SCM0.TDEE */
                        Index (EVRT, 0x00) = TMPB /* \_SB_.PCI0.SBRG.EC__.SCM0._WED.TMPB */
                        If ((TMPB == 0x08))
                        {
                            Index (EVRT, 0x01) = TE43 /* \_SB_.PCI0.SBRG.EC__.SCM0.TE43 */
                        }

                        If ((TMPB == 0x56))
                        {
                            Index (EVRT, 0x01) = TD2E /* \_SB_.PCI0.SBRG.EC__.SCM0.TD2E */
                        }

                        If ((TMPB == 0x57))
                        {
                            Index (EVRT, 0x01) = TD2E /* \_SB_.PCI0.SBRG.EC__.SCM0.TD2E */
                        }

                        If ((TMPB == 0x5F))
                        {
                            Index (EVRT, 0x01) = TD2E /* \_SB_.PCI0.SBRG.EC__.SCM0.TD2E */
                        }

                        If ((TMPB == 0x60))
                        {
                            Index (EVRT, 0x01) = TE40 /* \_SB_.PCI0.SBRG.EC__.SCM0.TE40 */
                        }

                        If ((TMPB == 0x62))
                        {
                            Index (EVRT, 0x01) = TDF1 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF1 */
                        }

                        If ((TMPB == 0x63))
                        {
                            Index (EVRT, 0x01) = TDF1 /* \_SB_.PCI0.SBRG.EC__.SCM0.TDF1 */
                        }

                        If ((TMPB == 0x73))
                        {
                            Index (EVRT, 0x01) = TE43 /* \_SB_.PCI0.SBRG.EC__.SCM0.TE43 */
                        }

                        If ((TMPB == 0x79))
                        {
                            Index (EVRT, 0x01) = TE43 /* \_SB_.PCI0.SBRG.EC__.SCM0.TE43 */
                        }

                        If ((TMPB == 0xB4))
                        {
                            Index (EVRT, 0x01) = TE43 /* \_SB_.PCI0.SBRG.EC__.SCM0.TE43 */
                        }

                        TDEE = 0x00
                        Return (EVRT) /* \_SB_.PCI0.SBRG.EC__.SCM0._WED.EVRT */
                    }

                    Return (0x00)
                }
            }
        }
    }

    Name (\_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    If (SS1)
    {
        Name (\_S1, Package (0x04)  // _S1_: S1 System State
        {
            0x01, 
            0x00, 
            0x00, 
            0x00
        })
    }

    If (SS3)
    {
        Name (\_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            0x00, 
            0x00, 
            0x00
        })
    }

    If (SS4)
    {
        Name (\_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            0x00, 
            0x00, 
            0x00
        })
    }

    Name (\_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.NPTS (Arg0)
            \_SB.PCI0.SBRG.SPTS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.SBRG.SWAK (Arg0)
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 7F
[00Ah 0010   6]                       Oem ID : "MSI_NB"
[010h 0016   8]                 Oem Table ID : "MEGABOOK"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : 3F611E40
[028h 0040   4]                 DSDT Address : 3F608010
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 80
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000420
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000428
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 85
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 7D
[06Bh 0107   1]        RTC Month Alarm Index : 7E
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0002
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000384A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 000000003F611D40
[08Ch 0140   8]                 DSDT Address : 000000003F608010
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000420

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000428

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

  0000: 46 41 43 50 F4 00 00 00 04 7F 4D 53 49 5F 4E 42  // FACP......MSI_NB
  0010: 4D 45 47 41 42 4F 4F 4B 04 20 22 06 4D 53 46 54  // MEGABOOK. ".MSFT
  0020: 13 00 01 00 40 1E 61 3F 10 80 60 3F 01 02 09 00  // ....@.a?..`?....
  0030: B2 00 00 00 A0 A1 00 80 00 04 00 00 00 00 00 00  // ................
  0040: 04 04 00 00 00 00 00 00 20 04 00 00 08 04 00 00  // ........ .......
  0050: 28 04 00 00 00 00 00 00 04 02 01 04 08 00 00 85  // (...............
  0060: 65 00 E9 03 00 04 10 00 01 03 7D 7E 32 02 00 00  // e.........}~2...
  0070: A5 84 03 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
  0080: 06 00 00 00 40 1D 61 3F 00 00 00 00 10 80 60 3F  // ....@.a?......`?
  0090: 00 00 00 00 01 20 00 00 00 04 00 00 00 00 00 00  // ..... ..........
  00A0: 01 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
  00B0: 04 04 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
  00C0: 00 00 00 00 01 08 00 00 20 04 00 00 00 00 00 00  // ........ .......
  00D0: 01 20 00 00 08 04 00 00 00 00 00 00 01 40 00 00  // . ...........@..
  00E0: 28 04 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // (...............
  00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C3
[00Ah 0010   6]                       Oem ID : "A M I "
[010h 0016   8]                 Oem Table ID : "ICH7HPET"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "AMI."
[020h 0032   4]        Asl Compiler Revision : 00000003

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED03000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 C3 41 20 4D 20 49 20  // HPET8.....A M I 
  0010: 49 43 48 37 48 50 45 54 04 20 22 06 41 4D 49 2E  // ICH7HPET. ".AMI.
  0020: 03 00 00 00 01 A2 86 80 00 40 00 00 00 30 D0 FE  // .........@...0..
  0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 8D
[00Ah 0010   6]                       Oem ID : "MSI_NB"
[010h 0016   8]                 Oem Table ID : "MEGABOOK"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 8D 4D 53 49 5F 4E 42  // MCFG<.....MSI_NB
  0010: 4D 45 47 41 42 4F 4F 4B 04 20 22 06 4D 53 46 54  // MEGABOOK. ".MSFT
  0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
  0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


RSDP
----
[000h 0000   8]                    Signature : "RSD PTR "
[008h 0008   1]                     Checksum : 48
[009h 0009   6]                       Oem ID : "MSI_NB"
[00Fh 0015   1]                     Revision : 02
[010h 0016   4]                 RSDT Address : 3F610F10
[014h 0020   4]                       Length : 00000024
[018h 0024   8]                 XSDT Address : 000000003F60FF10
[020h 0032   1]            Extended Checksum : 2E
[021h 0033   3]                     Reserved : 000000

Raw Table Data: Length 36 (0x24)

  0000: 52 53 44 20 50 54 52 20 48 4D 53 49 5F 4E 42 02  // RSD PTR HMSI_NB.
  0010: 10 0F 61 3F 24 00 00 00 10 FF 60 3F 00 00 00 00  // ..a?$.....`?....
  0020: 2E 00 00 00                                      // ....


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 47
[00Ah 0010   6]                       Oem ID : "MSI_NB"
[010h 0016   8]                 Oem Table ID : "MEGABOOK"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]       ACPI Table Address   0 : 3F611910
[028h 0040   4]       ACPI Table Address   1 : 3F610E90
[02Ch 0044   4]       ACPI Table Address   2 : 3F615C90
[030h 0048   4]       ACPI Table Address   3 : 3F615C10
[034h 0052   4]       ACPI Table Address   4 : 3F612C10
[038h 0056   4]       ACPI Table Address   5 : 3F605510
[03Ch 0060   4]       ACPI Table Address   6 : 3F5E8A10
[040h 0064   4]       ACPI Table Address   7 : 3F611A10

Raw Table Data: Length 68 (0x44)

  0000: 52 53 44 54 44 00 00 00 01 47 4D 53 49 5F 4E 42  // RSDTD....GMSI_NB
  0010: 4D 45 47 41 42 4F 4F 4B 04 20 22 06 4D 53 46 54  // MEGABOOK. ".MSFT
  0020: 13 00 01 00 10 19 61 3F 90 0E 61 3F 90 5C 61 3F  // ......a?..a?.\a?
  0030: 10 5C 61 3F 10 2C 61 3F 10 55 60 3F 10 8A 5E 3F  // .\a?.,a?.U`?..^?
  0040: 10 1A 61 3F                                      // ..a?


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 54
[00Ah 0010   6]                       Oem ID : "MSI_NB"
[010h 0016   8]                 Oem Table ID : "MEGABOOK"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 DF 64 02 29 \
    C6 4D 94 49 5D 8A 66 34 AE 02 CE CA 0C 1A 7B 77 \
    56 11 4D 54 FA 15 3D DF 61 81 6E 1B 91 F5 0F 90 \
    F4 98 A1 E7 A1 29 9C 28 D2 B3 79 C2 99 0A 52 97 \
    58 D7 82 EA 0B 54 41 51 A3 0A 8A B3 99 9B 86 9B \
    91 F1 87 27 9F 16 AA 29 F2 36 61 98 F2 EF E0 B5 \
    DB D4 B5 00 26 58 C9 45 69 B8 31 2A AF 59 28 EC \
    D4 DC C7 70 99 0F E6 06 0A 0F D8 4E A5 1E E2 8F \
    11 6B 3C 0A 75 BF 31 0E F1 60 40 9C 01 00 00 00 \
    B6 00 00 00 00 00 02 00 4D 53 49 5F 4E 42 4D 45 \
    47 41 42 4F 4F 4B 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 9C 30 C9 33 2F 8B 80 EC 02 5C 1C D0 86 61 \
    65 29 36 04 71 9B 17 8D 61 D3 F9 EE 31 30 46 69 \
    52 FB 25 F2 41 F3 3E AE D4 0B 44 EA 3F 7E 1D C9 \
    4A A0 10 0E 94 08 80 2E D4 8D FA A3 9F F1 39 94 \
    5D 0C 58 7D 44 63 5C F3 4C 1F 2B 7D 70 27 6F 45 \
    1D E6 5E 23 8F 7E 63 A4 4D 38 F3 69 57 0D A6 14 \
    03 FC 2E CD BB B0 3E 18 55 70 3D 10 8D 0F BC 7B \
    A5 D9 B1 29 9A DF C0 5F 65 D8 2A 30 C1 01 A2 3E \
    83 CC 

Raw Table Data: Length 374 (0x176)

  0000: 53 4C 49 43 76 01 00 00 01 54 4D 53 49 5F 4E 42  // SLICv....TMSI_NB
  0010: 4D 45 47 41 42 4F 4F 4B 04 20 22 06 4D 53 46 54  // MEGABOOK. ".MSFT
  0020: 97 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
  0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
  0040: DF 64 02 29 C6 4D 94 49 5D 8A 66 34 AE 02 CE CA  // .d.).M.I].f4....
  0050: 0C 1A 7B 77 56 11 4D 54 FA 15 3D DF 61 81 6E 1B  // ..{wV.MT..=.a.n.
  0060: 91 F5 0F 90 F4 98 A1 E7 A1 29 9C 28 D2 B3 79 C2  // .........).(..y.
  0070: 99 0A 52 97 58 D7 82 EA 0B 54 41 51 A3 0A 8A B3  // ..R.X....TAQ....
  0080: 99 9B 86 9B 91 F1 87 27 9F 16 AA 29 F2 36 61 98  // .......'...).6a.
  0090: F2 EF E0 B5 DB D4 B5 00 26 58 C9 45 69 B8 31 2A  // ........&X.Ei.1*
  00A0: AF 59 28 EC D4 DC C7 70 99 0F E6 06 0A 0F D8 4E  // .Y(....p.......N
  00B0: A5 1E E2 8F 11 6B 3C 0A 75 BF 31 0E F1 60 40 9C  // .....k<.u.1..`@.
  00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 4D 53 49 5F  // ............MSI_
  00D0: 4E 42 4D 45 47 41 42 4F 4F 4B 57 49 4E 44 4F 57  // NBMEGABOOKWINDOW
  00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
  00F0: 00 00 00 00 00 00 9C 30 C9 33 2F 8B 80 EC 02 5C  // .......0.3/....\
  0100: 1C D0 86 61 65 29 36 04 71 9B 17 8D 61 D3 F9 EE  // ...ae)6.q...a...
  0110: 31 30 46 69 52 FB 25 F2 41 F3 3E AE D4 0B 44 EA  // 10FiR.%.A.>...D.
  0120: 3F 7E 1D C9 4A A0 10 0E 94 08 80 2E D4 8D FA A3  // ?~..J...........
  0130: 9F F1 39 94 5D 0C 58 7D 44 63 5C F3 4C 1F 2B 7D  // ..9.].X}Dc\.L.+}
  0140: 70 27 6F 45 1D E6 5E 23 8F 7E 63 A4 4D 38 F3 69  // p'oE..^#.~c.M8.i
  0150: 57 0D A6 14 03 FC 2E CD BB B0 3E 18 55 70 3D 10  // W.........>.Up=.
  0160: 8D 0F BC 7B A5 D9 B1 29 9A DF C0 5F 65 D8 2A 30  // ...{...)..._e.*0
  0170: C1 01 A2 3E 83 CC                                // ...>..


SSDT1
-----
DefinitionBlock ("ssdt1.aml", "SSDT", 2, "PmRef", "CpuPm", 0x00003000)
{

    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x3F5E8C90, 
            0x00000253, 
            "CPU1IST ", 
            0x3F5E8F10, 
            0x000000D0, 
            "CPU0CST ", 
            0x3F5E7690, 
            0x00000653, 
            "CPU1CST ", 
            0x3F611B10, 
            0x00000083
        })
        Name (CFGD, 0x113B68B1)
        Name (NOPS, 0x80000000)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                Index (STS0, Zero) = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                Index (STS0, Zero) = 0x0A
                Return (Arg3)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0._OSC.CAP0 */
            If ((CFGD & One))
            {
                If ((((CFGD & 0x01000000) && ((PDC0 & 0x09) == 
                    0x09)) && !(SDTL & One)))
                {
                    SDTL |= One
                    OperationRegion (IST0, SystemMemory, DerefOf (Index (SSDT, One)), DerefOf (Index (SSDT, 0x02)))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (Index (SSDT, 0x07)), DerefOf (Index (SSDT, 0x08)))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS1, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Concatenate (STS1, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS1)
            CreateDWordField (Arg3, 0x04, CAP1)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID1, Zero, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                Index (STS1, Zero) = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                Index (STS1, Zero) = 0x0A
                Return (Arg3)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1._OSC.CAP1 */
            If ((CFGD & One))
            {
                If ((((CFGD & 0x01000000) && ((PDC1 & 0x09) == 
                    0x09)) && !(SDTL & 0x10)))
                {
                    SDTL |= 0x10
                    OperationRegion (IST1, SystemMemory, DerefOf (Index (SSDT, 0x04)), DerefOf (Index (SSDT, 0x05)))
                    Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC1 & 0x18)) && !
                    (SDTL & 0x20)))
                {
                    SDTL |= 0x20
                    OperationRegion (CST1, SystemMemory, DerefOf (Index (SSDT, 0x0A)), DerefOf (Index (SSDT, 0x0B)))
                    Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
                }
            }

            Return (Arg3)
        }
    }
}



SSDT2
-----
DefinitionBlock ("ssdt2.aml", "SSDT", 2, "PmRef", "Cpu0Tst", 0x00003000)
{

    External (_PR_.CPU0, DeviceObj)
    External (_PSS, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_TPC, Zero)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDC0 & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000000910, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000000910, // Address
                        ,)
                }
            })
        }

        Name (TSSI, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                Zero, 
                0x0F, 
                Zero
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                Zero, 
                0x0E, 
                Zero
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                Zero, 
                0x0D, 
                Zero
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                Zero, 
                0x0C, 
                Zero
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                Zero, 
                0x0B, 
                Zero
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                Zero, 
                0x0A, 
                Zero
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                Zero, 
                0x09, 
                Zero
            }
        })
        Name (TSSM, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                Zero, 
                0x1E, 
                Zero
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                Zero, 
                0x1C, 
                Zero
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                Zero, 
                0x1A, 
                Zero
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                Zero, 
                0x18, 
                Zero
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                Zero, 
                0x16, 
                Zero
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                Zero, 
                0x14, 
                Zero
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                Zero, 
                0x12, 
                Zero
            }
        })
        Name (TSSF, Zero)
        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((!TSSF && CondRefOf (_PSS)))
            {
                Local0 = _PSS /* External reference */
                Local1 = SizeOf (Local0)
                Local1--
                Local2 = DerefOf (Index (DerefOf (Index (Local0, Local1)), One))
                Local3 = Zero
                While ((Local3 < SizeOf (TSSI)))
                {
                    Local4 = ((Local2 * (0x08 - Local3)) / 0x08)
                    Index (DerefOf (Index (TSSI, Local3)), One) = Local4
                    Index (DerefOf (Index (TSSM, Local3)), One) = Local4
                    Local3++
                }

                TSSF = Ones
            }

            If ((PDC0 & 0x04))
            {
                Return (TSSM) /* \_PR_.CPU0.TSSM */
            }

            Return (TSSI) /* \_PR_.CPU0.TSSI */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFE, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFC, 
                    One
                }
            })
        }
    }
}



SSDT3
-----
DefinitionBlock ("ssdt3.aml", "SSDT", 2, "PmRef", "Cpu1Tst", 0x00003000)
{

    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Name (_TPC, Zero)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFE, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    One, 
                    0xFC, 
                    One
                }
            })
        }
    }
}



SSDT4
-----
DefinitionBlock ("ssdt4.aml", "SSDT", 2, "PmRef", "Cpu0Ist", 0x00003000)
{

    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)
    External (PTHR, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            If (((\PTHR & One) == One))
            {
                Return ((SizeOf (SPSS) - One))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x000000000000FFF0, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & One))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x04)
        {
            Package (0x06)
            {
                0x0000063F, 
                0x000007D0, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000534, 
                0x000005FD, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x0000042A, 
                0x0000042A, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x0000031F, 
                0x00000258, 
                0x0000006E, 
                0x0000000A, 
                0x00000383, 
                0x00000003
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000063F, 
                0x000007D0, 
                0x0000000A, 
                0x0000000A, 
                0x00000C13, 
                0x00000C13
            }, 

            Package (0x06)
            {
                0x00000534, 
                0x000005FD, 
                0x0000000A, 
                0x0000000A, 
                0x00000A12, 
                0x00000A12
            }, 

            Package (0x06)
            {
                0x0000042A, 
                0x0000042A, 
                0x0000000A, 
                0x0000000A, 
                0x00000811, 
                0x00000811
            }, 

            Package (0x06)
            {
                0x0000031F, 
                0x00000258, 
                0x0000000A, 
                0x0000000A, 
                0x0000060F, 
                0x0000060F
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((CFGD & 0x01000000))
            {
                If (((PDC0 & 0x0800) || (CFGD & 0x02000000)))
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            0x05, 
                            Zero, 
                            Zero, 
                            0xFE, 
                            0x02
                        }
                    })
                }

                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFC, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFC, 
                    One
                }
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("ssdt5.aml", "SSDT", 2, "PmRef", "Cpu0Cst", 0x00003001)
{

    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        OperationRegion (DEB0, SystemIO, 0x80, One)
        Field (DEB0, ByteAcc, NoLock, Preserve)
        {
            DBG8,   8
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            DBG8 = 0x60
            If (((CFGD & 0x01000000) && !(PDC0 & 0x10)))
            {
                DBG8 = 0x61
                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0200)))
            {
                If ((CFGD & 0x0200))
                {
                    DBG8 = 0x76
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000050, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x8C, 
                            0x0A
                        }
                    })
                }

                If ((CFGD & 0x80))
                {
                    DBG8 = 0x74
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000030, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x64, 
                            0x64
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    DBG8 = 0x73
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x3C, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    DBG8 = 0x72
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }
                    })
                }

                DBG8 = 0x71
                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0100)))
            {
                If ((CFGD & 0x0200))
                {
                    DBG8 = 0x86
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000414, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000418, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x0118, 
                            0x0A
                        }
                    })
                }

                If ((CFGD & 0x80))
                {
                    DBG8 = 0x84
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000414, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000416, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xC8, 
                            0x64
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    DBG8 = 0x83
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000414, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000415, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x3C, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    DBG8 = 0x82
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            One, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000414, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }
                    })
                }

                DBG8 = 0x81
                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }
                })
            }

            If ((CFGD & 0x0200))
            {
                DBG8 = 0x96
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000414, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000418, // Address
                                ,)
                        }, 

                        0x03, 
                        0x0118, 
                        0x0A
                    }
                })
            }

            If ((CFGD & 0x80))
            {
                DBG8 = 0x94
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000414, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000416, // Address
                                ,)
                        }, 

                        0x03, 
                        0xC8, 
                        0x64
                    }
                })
            }

            If ((CFGD & 0x40))
            {
                DBG8 = 0x93
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000414, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000415, // Address
                                ,)
                        }, 

                        0x03, 
                        0x3C, 
                        0xFA
                    }
                })
            }

            If ((CFGD & 0x20))
            {
                DBG8 = 0x92
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000414, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }
                })
            }

            DBG8 = 0x91
            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    One, 
                    0x03E8
                }
            })
        }
    }
}



SSDT6
-----
DefinitionBlock ("ssdt6.aml", "SSDT", 2, "PmRef", "Cpu1Ist", 0x00003000)
{

    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (((PDC1 & 0x0800) || (CFGD & 0x02000000)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFE, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFC, 
                    0x02
                }
            })
        }
    }
}



SSDT7
-----
DefinitionBlock ("ssdt7.aml", "SSDT", 2, "PmRef", "Cpu1Cst", 0x00003000)
{

    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x10)))
            {
                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



XSDT
----
[000h 0000   4]                    Signature : "XSDT"    [Extended System Description Table]
[004h 0004   4]                 Table Length : 00000064
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D1
[00Ah 0010   6]                       Oem ID : "MSI_NB"
[010h 0016   8]                 Oem Table ID : "MEGABOOK"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]       ACPI Table Address   0 : 000000003F5E6C10
[02Ch 0044   8]       ACPI Table Address   1 : 000000003F610E90
[034h 0052   8]       ACPI Table Address   2 : 000000003F615C90
[03Ch 0060   8]       ACPI Table Address   3 : 000000003F615C10
[044h 0068   8]       ACPI Table Address   4 : 000000003F612C10
[04Ch 0076   8]       ACPI Table Address   5 : 000000003F605510
[054h 0084   8]       ACPI Table Address   6 : 000000003F5E8A10
[05Ch 0092   8]       ACPI Table Address   7 : 000000003F611A10

Raw Table Data: Length 100 (0x64)

  0000: 58 53 44 54 64 00 00 00 01 D1 4D 53 49 5F 4E 42  // XSDTd.....MSI_NB
  0010: 4D 45 47 41 42 4F 4F 4B 04 20 22 06 4D 53 46 54  // MEGABOOK. ".MSFT
  0020: 13 00 01 00 10 6C 5E 3F 00 00 00 00 90 0E 61 3F  // .....l^?......a?
  0030: 00 00 00 00 90 5C 61 3F 00 00 00 00 10 5C 61 3F  // .....\a?.....\a?
  0040: 00 00 00 00 10 2C 61 3F 00 00 00 00 10 55 60 3F  // .....,a?.....U`?
  0050: 00 00 00 00 10 8A 5E 3F 00 00 00 00 10 1A 61 3F  // ......^?......a?
  0060: 00 00 00 00                                      // ....


