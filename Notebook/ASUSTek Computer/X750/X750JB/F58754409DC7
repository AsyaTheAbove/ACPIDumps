
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20141107-64 [Aug 18 2015]
Copyright (c) 2000 - 2014 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   RSDP                          "_ASUS_"
   RSDT   0x0000005C     0x01    "_ASUS_"  "Notebook"   0x01072009    "MSFT"     0x00010013
   XSDT   0x00000094     0x01    "_ASUS_"  "Notebook"   0x01072009    "AMI "     0x00010013
   DSDT   0x00014795     0x02    "_ASUS_"  "Notebook"   0x00000208    "INTL"     0x20091112
   FACS   0x00000040
   FACP   0x0000010C     0x05    "_ASUS_"  "Notebook"   0x01072009    "AMI "     0x00010013
   APIC   0x00000092     0x03    "_ASUS_"  "Notebook"   0x01072009    "AMI "     0x00010013
   FPDT   0x00000044     0x01    "_ASUS_"  "Notebook"   0x01072009    "AMI "     0x00010013
   ECDT   0x000000C1     0x01    "_ASUS_"  "Notebook"   0x01072009    "AMI."     0x00000005
   MSDM   0x00000055     0x03    "_ASUS_"  "Notebook"   0x00000001    "ASUS"     0x00000001
   SSDT   0x00000200     0x01    "_ASUS_"  "Notebook"   0x00000000    "INTL"     0x20120711
   SSDT   0x0000019D     0x01    "_ASUS_"  "Notebook"   0x00001000    "INTL"     0x20091112
   SSDT   0x00000557     0x01    "_ASUS_"  "Notebook"   0x00003000    "INTL"     0x20051117
   SSDT   0x00000AD8     0x01    "_ASUS_"  "Notebook"   0x00003000    "INTL"     0x20051117
   MCFG   0x0000003C     0x01    "_ASUS_"  "Notebook"   0x01072009    "MSFT"     0x00000097
   HPET   0x00000038     0x01    "_ASUS_"  "Notebook"   0x01072009    "AMI."     0x00000005
   SSDT   0x00000357     0x01    "_ASUS_"  "Notebook"   0x00001000    "INTL"     0x20091112
   SSDT   0x0000179C     0x01    "_ASUS_"  "Notebook"   0x00003000    "INTL"     0x20091112
   DMAR   0x000000B8     0x01    "_ASUS_"  "Notebook"   0x00000001    "INTL"     0x00000001
   SSDT   0x000003D3     0x01    "PmRef "  "Cpu0Cst "   0x00003001    "INTL"     0x20051117
   SSDT   0x000005AA     0x01    "PmRef "  "ApIst   "   0x00003000    "INTL"     0x20051117
   SSDT   0x00000119     0x01    "PmRef "  "ApCst   "   0x00003000    "INTL"     0x20051117

Found 22 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000092
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 5B
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 01
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 03
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : 05
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[06Ch 0108   1]                Subtable Type : 01 [I/O APIC]
[06Dh 0109   1]                       Length : 0C
[06Eh 0110   1]                  I/O Apic ID : 02
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]                      Address : FEC00000
[074h 0116   4]                    Interrupt : 00000000

[078h 0120   1]                Subtable Type : 02 [Interrupt Source Override]
[079h 0121   1]                       Length : 0A
[07Ah 0122   1]                          Bus : 00
[07Bh 0123   1]                       Source : 00
[07Ch 0124   4]                    Interrupt : 00000002
[080h 0128   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[082h 0130   1]                Subtable Type : 02 [Interrupt Source Override]
[083h 0131   1]                       Length : 0A
[084h 0132   1]                          Bus : 00
[085h 0133   1]                       Source : 09
[086h 0134   4]                    Interrupt : 00000009
[08Ah 0138   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[08Ch 0140   1]                Subtable Type : 04 [Local APIC NMI]
[08Dh 0141   1]                       Length : 06
[08Eh 0142   1]                 Processor ID : FF
[08Fh 0143   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[091h 0145   1]         Interrupt Input LINT : 01

Raw Table Data: Length 146 (0x92)

  0000: 41 50 49 43 92 00 00 00 03 5B 5F 41 53 55 53 5F  APIC.....[_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  Notebook. ..AMI 
  0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  ................
  0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 04  ................
  0040: 01 00 00 00 00 08 04 06 01 00 00 00 00 08 05 01  ................
  0050: 01 00 00 00 00 08 06 03 01 00 00 00 00 08 07 05  ................
  0060: 01 00 00 00 00 08 08 07 01 00 00 00 01 0C 02 00  ................
  0070: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  ................
  0080: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 FF 05  ................
  0090: 00 01                                            ..


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping table]
[004h 0004   4]                 Table Length : 000000B8
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 8C
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]           Host Address Width : 26
[025h 0037   1]                        Flags : 01
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0018

[034h 0052   1]                        Flags : 00
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FED90000

[040h 0064   1]            Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065   1]                 Entry Length : 08
[042h 0066   2]                     Reserved : 0000
[044h 0068   1]               Enumeration ID : 00
[045h 0069   1]               PCI Bus Number : 00

[046h 0070   2]                     PCI Path : 02,00


[048h 0072   2]                Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074   2]                       Length : 0020

[04Ch 0076   1]                        Flags : 01
[04Dh 0077   1]                     Reserved : 00
[04Eh 0078   2]           PCI Segment Number : 0000
[050h 0080   8]        Register Base Address : 00000000FED91000

[058h 0088   1]            Device Scope Type : 03 [IOAPIC Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 02
[05Dh 0093   1]               PCI Bus Number : F0

[05Eh 0094   2]                     PCI Path : 1F,00


[060h 0096   1]            Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097   1]                 Entry Length : 08
[062h 0098   2]                     Reserved : 0000
[064h 0100   1]               Enumeration ID : 00
[065h 0101   1]               PCI Bus Number : F0

[066h 0102   2]                     PCI Path : 0F,00


[068h 0104   2]                Subtable Type : 0001 [Reserved Memory Region]
[06Ah 0106   2]                       Length : 0030

[06Ch 0108   2]                     Reserved : 0000
[06Eh 0110   2]           PCI Segment Number : 0000
[070h 0112   8]                 Base Address : 00000000C93CC000
[078h 0120   8]          End Address (limit) : 00000000C93D8FFF

[080h 0128   1]            Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129   1]                 Entry Length : 08
[082h 0130   2]                     Reserved : 0000
[084h 0132   1]               Enumeration ID : 00
[085h 0133   1]               PCI Bus Number : 00

[086h 0134   2]                     PCI Path : 1D,00


[088h 0136   1]            Device Scope Type : 01 [PCI Endpoint Device]
[089h 0137   1]                 Entry Length : 08
[08Ah 0138   2]                     Reserved : 0000
[08Ch 0140   1]               Enumeration ID : 00
[08Dh 0141   1]               PCI Bus Number : 00

[08Eh 0142   2]                     PCI Path : 1A,00


[090h 0144   1]            Device Scope Type : 01 [PCI Endpoint Device]
[091h 0145   1]                 Entry Length : 08
[092h 0146   2]                     Reserved : 0000
[094h 0148   1]               Enumeration ID : 00
[095h 0149   1]               PCI Bus Number : 00

[096h 0150   2]                     PCI Path : 14,00


[098h 0152   2]                Subtable Type : 0001 [Reserved Memory Region]
[09Ah 0154   2]                       Length : 0020

[09Ch 0156   2]                     Reserved : 0000
[09Eh 0158   2]           PCI Segment Number : 0000
[0A0h 0160   8]                 Base Address : 00000000CB000000
[0A8h 0168   8]          End Address (limit) : 00000000CF1FFFFF

[0B0h 0176   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0B1h 0177   1]                 Entry Length : 08
[0B2h 0178   2]                     Reserved : 0000
[0B4h 0180   1]               Enumeration ID : 00
[0B5h 0181   1]               PCI Bus Number : 00

[0B6h 0182   2]                     PCI Path : 02,00


Raw Table Data: Length 184 (0xB8)

  0000: 44 4D 41 52 B8 00 00 00 01 8C 5F 41 53 55 53 5F  DMAR......_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 01 00 00 00 49 4E 54 4C  Notebook....INTL
  0020: 01 00 00 00 26 01 00 00 00 00 00 00 00 00 00 00  ....&...........
  0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  ................
  0040: 01 08 00 00 00 00 02 00 00 00 20 00 01 00 00 00  .......... .....
  0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 02 F0 1F 00  ................
  0060: 04 08 00 00 00 F0 0F 00 01 00 30 00 00 00 00 00  ..........0.....
  0070: 00 C0 3C C9 00 00 00 00 FF 8F 3D C9 00 00 00 00  ..<.......=.....
  0080: 01 08 00 00 00 00 1D 00 01 08 00 00 00 00 1A 00  ................
  0090: 01 08 00 00 00 00 14 00 01 00 20 00 00 00 00 00  .......... .....
  00A0: 00 00 00 CB 00 00 00 00 FF FF 1F CF 00 00 00 00  ................
  00B0: 01 08 00 00 00 00 02 00                          ........


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 2, "_ASUS_", "Notebook", 0x00000208)
{
    /*
     * iASL Warning: There were 8 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GFX0.GSCI, MethodObj)    // Warning: Unresolved method, guessing 0 arguments
    External (_SB_.PCI0.GFX0.IUEH, MethodObj)    // Warning: Unresolved method, guessing 1 arguments
    External (_SB_.PCI0.PAUD.PUAM, MethodObj)    // Warning: Unresolved method, guessing 0 arguments
    External (_SB_.PCI0.PEG0.HPME, MethodObj)    // Warning: Unresolved method, guessing 0 arguments
    External (_SB_.PCI0.PEG1.HPME, MethodObj)    // Warning: Unresolved method, guessing 0 arguments
    External (_SB_.PCI0.PEG2.HPME, MethodObj)    // Warning: Unresolved method, guessing 0 arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // Warning: Unresolved method, guessing 1 arguments
    External (AINT, MethodObj)    // Warning: Unresolved method, guessing 2 arguments

    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU0.MPPC, UnknownObj)
    External (_SB_.IAOE.PTSL, UnknownObj)
    External (_SB_.IETM, UnknownObj)
    External (_SB_.PCCD, UnknownObj)
    External (_SB_.PCCD.PENB, UnknownObj)
    External (_SB_.PCI0.GFX0.CLID, UnknownObj)
    External (_SB_.PCI0.GFX0.GSSE, UnknownObj)
    External (_SB_.PCI0.PEG0, UnknownObj)
    External (_SB_.PCI0.PEG0.PEGP, UnknownObj)
    External (_SB_.PCI0.PEG1, UnknownObj)
    External (_SB_.PCI0.PEG2, UnknownObj)
    External (ASLS, IntObj)
    External (CAL2, UnknownObj)
    External (CAL3, UnknownObj)
    External (CAL4, UnknownObj)
    External (CAL5, UnknownObj)
    External (CAL6, UnknownObj)
    External (CAL7, UnknownObj)
    External (CAL8, UnknownObj)
    External (CBLV, IntObj)
    External (CEVT, UnknownObj)
    External (CLID, UnknownObj)
    External (CPDL, UnknownObj)
    External (CPL2, UnknownObj)
    External (CPL3, UnknownObj)
    External (CPL4, UnknownObj)
    External (CPL5, UnknownObj)
    External (CPL6, UnknownObj)
    External (CPL7, UnknownObj)
    External (CPL8, UnknownObj)
    External (CSTS, UnknownObj)
    External (GSES, UnknownObj)
    External (GSMI, UnknownObj)
    External (MDBG, IntObj)
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (PDC4, UnknownObj)
    External (PDC5, UnknownObj)
    External (PDC6, UnknownObj)
    External (PDC7, UnknownObj)

    Name (SMBS, 0x0580)
    Name (SMBL, 0x20)
    Name (PMBS, 0x1800)
    Name (GPBS, 0x1C00)
    Name (SMIP, 0xB2)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (SMCR, 0x1830)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED1F404)
    Name (FLSZ, 0x00400000)
    Name (SRCB, 0xFED1C000)
    Name (RCLN, 0x4000)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (LAPB, 0xFEE00000)
    Name (EGPB, 0xFED19000)
    Name (MCHB, 0xFED10000)
    Name (VTBS, 0xFED90000)
    Name (VTLN, 0x4000)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (SRSI, 0xB2)
    Name (CSMI, 0x61)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (FUPS, 0x03)
    Name (FUWS, 0x04)
    Name (BGR, One)
    Name (BFR, 0x02)
    Name (BBR, 0x03)
    Name (BWC, 0x04)
    Name (BWT1, 0x20)
    Name (BFHC, 0x0100)
    Name (TRTP, One)
    Name (WDTE, One)
    Name (TRTD, 0x02)
    Name (TRTI, 0x03)
    Name (PFTI, 0x04)
    Name (GCDD, One)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x0C)
    Name (DSLC, 0x0E)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (SOOT, 0x35)
    Name (PDBR, 0x4D)
    Name (BW1P, 0x21)
    Name (BW2C, 0x22)
    Name (BW2P, 0x23)
    Name (BSPC, 0x24)
    Name (BSPP, 0x25)
    Name (BICO, 0x27)
    Name (BICC, 0x28)
    Name (BHB, 0x30)
    Name (BFS2, 0x31)
    Name (BFS3, 0x32)
    Name (BFS4, 0x33)
    Name (BRH, 0x35)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (MBEC, Zero)
    Name (PMLN, 0x0100)
    Name (GPLN, 0x0400)
    Name (MBLF, 0x0A)
    Name (SOAO, 0x6B)
    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0xC400)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (GNVS, SystemMemory, 0xC9AF2C18, 0x029E)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x1E), 
        Offset (0x25), 
        REVN,   8, 
        Offset (0x28), 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x42), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x48), 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        BID,    16, 
        PLID,   8, 
        ECTG,   8, 
        Offset (0x70), 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        Offset (0x7A), 
        DSEN,   8, 
        ECON,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        Offset (0x8F), 
        ATMC,   8, 
        PTMC,   8, 
        ATRA,   8, 
        PTRA,   8, 
        PNHM,   32, 
        TBAB,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        ATPC,   8, 
        PTPC,   8, 
        PFLV,   8, 
        BREV,   8, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        Offset (0xB0), 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        OBF1,   8, 
        OBF2,   8, 
        OBF3,   8, 
        OBF4,   8, 
        OBF5,   8, 
        OBF6,   8, 
        OBF7,   8, 
        OBF8,   8, 
        XHCI,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        PEP3,   8, 
        DPTF,   8, 
        SADE,   8, 
        SACR,   8, 
        SAHT,   8, 
        PCHD,   8, 
        PCHC,   8, 
        PCHH,   8, 
        CTDP,   8, 
        LPMP,   8, 
        LPMV,   8, 
        ECEU,   8, 
        TGFG,   16, 
        MEMD,   8, 
        MEMC,   8, 
        MEMH,   8, 
        FND1,   8, 
        FND2,   8, 
        AMBD,   8, 
        AMAT,   8, 
        AMPT,   8, 
        AMCT,   8, 
        AMHT,   8, 
        SKDE,   8, 
        SKAT,   8, 
        SKPT,   8, 
        SKCT,   8, 
        SKHT,   8, 
        EFDE,   8, 
        EFAT,   8, 
        EFPT,   8, 
        EFCT,   8, 
        EFHT,   8, 
        VRDE,   8, 
        VRAT,   8, 
        VRPT,   8, 
        VRCT,   8, 
        VRHT,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        DCMP,   8, 
        TRTV,   8, 
        LPOE,   8, 
        LPOP,   8, 
        LPOS,   8, 
        LPOW,   8, 
        LPER,   8, 
        PPSZ,   32, 
        DISE,   8, 
        PFMA,   64, 
        PFMS,   8, 
        PFIA,   16, 
        ICNF,   8, 
        DSP0,   32, 
        DSP1,   32, 
        NFCE,   8, 
        CODS,   8, 
        SNHE,   8, 
        S0ID,   8, 
        CTDB,   8, 
        Offset (0x207), 
        PWRE,   8, 
        PWRP,   8, 
        XHPR,   8, 
        SDS0,   8, 
        SDS1,   16, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        SDS6,   8, 
        RIC0,   8, 
        PEPY,   8, 
        DVS0,   8, 
        DVS1,   8, 
        DVS2,   8, 
        DVS3,   8, 
        GBSX,   8, 
        IUBE,   8, 
        IUCE,   8, 
        IUDE,   8, 
        ECNO,   8, 
        AUDD,   16, 
        DSPD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        RWAG,   8, 
        I20D,   16, 
        I21D,   16, 
        Offset (0x231), 
        RCG0,   8, 
        ECDB,   8, 
        P2ME,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        M0C0,   16, 
        M1C0,   16, 
        M2C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M2C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        TBSF,   8, 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        LANP,   8, 
        XHDS,   8, 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        GN1E,   8, 
        G1AT,   8, 
        G1PT,   8, 
        G1CT,   8, 
        G1HT,   8, 
        GN2E,   8, 
        G2AT,   8, 
        G2PT,   8, 
        G2CT,   8, 
        G2HT,   8, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        DOSD,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        SOHP,   8, 
        NOHP,   8, 
        TBSE,   8, 
        WKFN,   8
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x20)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR00, Package (0x20)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12}
        })
        Name (PRSB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,12}
        })
        Alias (PRSB, PRSC)
        Alias (PRSB, PRSD)
        Alias (PRSB, PRSE)
        Alias (PRSB, PRSF)
        Alias (PRSB, PRSG)
        Alias (PRSB, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x1100)
            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFEB00000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((PELN >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((PELN >> 0x14) - One)
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                M1MN = (TLUD << 0x14)
                M1LN = ((M1MX - M1MN) + One)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (^XHC.CUID (Arg0))
                {
                    Return (^XHC.POSC (Arg1, Arg2, Arg3))
                }
                Else
                {
                    If (_OSI ("Windows 2012"))
                    {
                        If ((XCNT == Zero))
                        {
                            ^XHC.XSEL ()
                            XCNT++
                        }
                    }
                }

                If ((Arg0 == GUID))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((NEXP == Zero))
                    {
                        CTRL &= 0xFFFFFFF8
                    }

                    If (NEXP)
                    {
                        If (~(CDW1 & One))
                        {
                            If ((CTRL & One))
                            {
                                NHPG ()
                            }

                            If ((CTRL & 0x04))
                            {
                                NPME ()
                            }
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB)
                {
                    OperationRegion (PCI0.LPCB.LPC1, PCI_Config, Zero, 0x0100)
                    Field (PCI0.LPCB.LPC1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x02), 
                        CDID,   16, 
                        Offset (0x08), 
                        CRID,   8, 
                        Offset (0x60), 
                        PARC,   8, 
                        PBRC,   8, 
                        PCRC,   8, 
                        PDRC,   8, 
                        Offset (0x68), 
                        PERC,   8, 
                        PFRC,   8, 
                        PGRC,   8, 
                        PHRC,   8, 
                        Offset (0xAC), 
                        Offset (0xAD), 
                        Offset (0xAE), 
                        XUSB,   1
                    }

                    Device (LNKA)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PARC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSA) /* \_SB_.PRSA */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLA, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLA, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PARC & 0x0F))
                            Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PARC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PARC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKB)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PBRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSB) /* \_SB_.PRSB */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLB, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLB, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PBRC & 0x0F))
                            Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PBRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PBRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKC)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PCRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSC) /* \_SB_.PRSC */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLC, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLC, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PCRC & 0x0F))
                            Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PCRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PCRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKD)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PDRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSD) /* \_SB_.PRSD */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLD, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLD, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PDRC & 0x0F))
                            Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PDRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PDRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKE)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PERC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSE) /* \_SB_.PRSE */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLE, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLE, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PERC & 0x0F))
                            Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PERC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PERC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKF)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PFRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSF) /* \_SB_.PRSF */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLF, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLF, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PFRC & 0x0F))
                            Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PFRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PFRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKG)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PGRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSG) /* \_SB_.PRSG */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLG, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLG, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PGRC & 0x0F))
                            Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PGRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PGRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKH)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PHRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSH) /* \_SB_.PRSH */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLH, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLH, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PHRC & 0x0F))
                            Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PHRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PHRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }
                }

                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0x78), 
                        ,   6, 
                    GR03,   2, 
                    Offset (0x7A), 
                    GR08,   2, 
                    GR09,   2, 
                    GR0A,   2, 
                    GR0B,   2, 
                    Offset (0x7C), 
                        ,   2, 
                    GR19,   2, 
                    Offset (0x80), 
                    Offset (0xB0), 
                    RAEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y0F)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        Else
                        {
                            If (HPAE)
                            {
                                Return (0x0B)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y0F._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == One))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            _Y10)
                        IO (Decode16,
                            0x0900,             // Range Minimum
                            0x0900,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            _Y11)
                        IO (Decode16,
                            0x0A00,             // Range Minimum
                            0x0A00,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            _Y12)
                        IO (Decode16,
                            0x0B00,             // Range Minimum
                            0x0B00,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            _Y13)
                        IO (Decode16,
                            0x1800,             // Range Minimum
                            0x1800,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x164E,             // Range Minimum
                            0x164E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y10._MIN, IO0M)  // _MIN: Minimum Base Address
                        CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y10._MAX, IO0X)  // _MAX: Maximum Base Address
                        IO0M = GPBS /* \GPBS */
                        IO0X = GPBS /* \GPBS */
                        CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y11._MIN, IO1M)  // _MIN: Minimum Base Address
                        CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y11._MAX, IO1X)  // _MAX: Maximum Base Address
                        IO1M = (GPBS + 0x0100)
                        IO1X = (GPBS + 0x0100)
                        CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y12._MIN, IO2M)  // _MIN: Minimum Base Address
                        CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y12._MAX, IO2X)  // _MAX: Maximum Base Address
                        IO2M = (GPBS + 0x0200)
                        IO2X = (GPBS + 0x0200)
                        CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y13._MIN, IO3M)  // _MIN: Minimum Base Address
                        CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y13._MAX, IO3X)  // _MAX: Maximum Base Address
                        IO3M = (GPBS + 0x0300)
                        IO3X = (GPBS + 0x0300)
                        Return (BUF0) /* \_SB_.PCI0.LPCB.LDRC.BUF0 */
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (CWDT)
                {
                    Name (_HID, EisaId ("INT3F0D") /* ACPI Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x1854,             // Range Minimum
                            0x1854,             // Range Maximum
                            0x04,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((WDTE == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Return (BUF0) /* \_SB_.PCI0.LPCB.CWDT.BUF0 */
                    }
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((MBEC & 0xFFFF))
                        {
                            Return (CRS1) /* \_SB_.PCI0.LPCB.RMSC.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.LPCB.RMSC.CRS2 */
                        }
                    }
                }

                Device (LPCR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x20)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x00,               // Alignment
                            0x09,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y14)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y15)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.LPCB.LPCR._Y14._MIN, PM00)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.LPCB.LPCR._Y14._MAX, PM01)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.LPCB.LPCR._Y14._LEN, PM0L)  // _LEN: Length
                        PM00 = 0x1800
                        PM01 = 0x1800
                        PM0L = 0x0100
                        CreateWordField (CRS, \_SB.PCI0.LPCB.LPCR._Y15._MIN, GP20)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.LPCB.LPCR._Y15._MAX, GP21)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.LPCB.LPCR._Y15._LEN, GP2L)  // _LEN: Length
                        GP20 = 0x1C00
                        GP21 = 0x1C00
                        GP2L = 0x0400
                        Return (CRS) /* \_SB_.PCI0.LPCB.LPCR.CRS_ */
                    }
                }

                Device (OMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y16)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y17)
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (APIC)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.LPCB.OMSC._Y16._LEN, ML01)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.LPCB.OMSC._Y16._BAS, MB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.LPCB.OMSC._Y17._LEN, ML02)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.LPCB.OMSC._Y17._BAS, MB02)  // _BAS: Base Address
                            MB01 = 0xFEC00000
                            ML01 = 0x1000
                            MB02 = 0xFEE00000
                            ML02 = 0x1000
                        }

                        Return (CRS) /* \_SB_.PCI0.LPCB.OMSC.CRS_ */
                    }
                }

                Device (^^RMEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x000A0000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y18)
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            _Y19)
                        Memory32Fixed (ReadWrite,
                            0x00100000,         // Address Base
                            0x00000000,         // Address Length
                            _Y1A)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.RMEM._Y18._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y18._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y19._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y19._LEN, LEN2)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y1A._LEN, LEN3)  // _LEN: Length
                        Return (CRS) /* \_SB_.RMEM.CRS_ */
                    }
                }

                Device (PS2M)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If ((P2MS == One))
                        {
                            Return (0x01019419)
                        }

                        Return (0x08018416)
                    }

                    Name (_CID, Package (0x01)  // _CID: Compatible ID
                    {
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0E)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }

                        Return (Zero)
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (CRS1) /* \_SB_.PCI0.LPCB.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.LPCB.PS2M.CRS2 */
                        }
                    }
                }

                Device (PS2K)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return ("ATK3001")
                    }

                    Name (_CID, Package (0x02)  // _CID: Compatible ID
                    {
                        EisaId ("PNPC030"), 
                        EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (ADBG)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x13)  // _UID: Unique ID
                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0240,             // Range Minimum
                            0x0240,             // Range Maximum
                            0x01,               // Alignment
                            0x1A,               // Length
                            )
                    })
                    OperationRegion (DBGC, SystemIO, 0x0259, 0x10)
                    Field (DBGC, ByteAcc, Lock, Preserve)
                    {
                        DBGP,   8
                    }

                    OperationRegion (DBPP, SystemIO, 0x0250, 0x02)
                    Field (DBPP, ByteAcc, Lock, Preserve)
                    {
                        PPDT,   8, 
                        PPST,   8
                    }

                    OperationRegion (DB80, SystemIO, 0x80, One)
                    Field (DB80, ByteAcc, Lock, Preserve)
                    {
                        DP80,   8
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (CRS1) /* \_SB_.PCI0.LPCB.ADBG.CRS1 */
                    }

                    Method (CALL, 0, Serialized)
                    {
                        ISMI (0x96)
                    }

                    Method (PUTD, 1, Serialized)
                    {
                        Local0 = ((Arg0 & 0x0F) | 0x10)
                        Local1 = ((Arg0 >> 0x04) & 0x0F)
                        Local2 = (~Local1 & 0x0F)
                        Local4 = 0xFFFF
                        PPDT = Local0
                        Local3 = ((PPST ^ 0x80) >> 0x03)
                        While (((Local3 != 0x10) && (Local4 != Zero)))
                        {
                            Local3 = ((PPST ^ 0x80) >> 0x03)
                            Local4--
                            Stall (0x1E)
                        }

                        If ((Local4 == Zero))
                        {
                            PPDT = Zero
                            Return (Zero)
                        }

                        Local4 = 0xFFFF
                        PPDT = Local1
                        Local3 = ((PPST ^ 0x80) >> 0x03)
                        While (((Local3 != Zero) && (Local4 != Zero)))
                        {
                            Local3 = ((PPST ^ 0x80) >> 0x03)
                            Local4--
                            Stall (0x1E)
                        }

                        If ((Local4 == Zero))
                        {
                            PPDT = Zero
                            Return (Zero)
                        }

                        PPDT = Local2
                        Return (One)
                    }

                    Method (OUTS, 1, Serialized)
                    {
                        If ((DBGP != 0xFF))
                        {
                            Local0 = (SizeOf (Arg0) + One)
                            Local1 = Zero
                            Name (BUFF, Buffer (Local0) {})
                            BUFF = Arg0
                            Local0 -= One
                            If ((PUTD (0x53) == Zero))
                            {
                                Return (Zero)
                            }

                            While ((DerefOf (Index (BUFF, Local1)) != Zero))
                            {
                                If ((PUTD (DerefOf (Index (BUFF, Local1))) == Zero))
                                {
                                    PUTD (Zero)
                                    Return (Zero)
                                }

                                Local1++
                            }

                            PUTD (Zero)
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (OUTD, 1, Serialized)
                    {
                        Name (DEC, Buffer (0x0B)
                        {
                            "0123456789"
                        })
                        Name (TMP, Buffer (0x0B) {})
                        Local0 = Zero
                        Local1 = Arg0
                        If ((Local1 == Zero))
                        {
                            OUTS ("0")
                        }
                        Else
                        {
                            While ((Local1 > Zero))
                            {
                                Divide (Local1, 0x0A, Local2, Local1)
                                Index (TMP, Local0) = DerefOf (Index (DEC, Local2))
                                Local0++
                                Index (TMP, Local0) = Zero
                            }

                            Local2 = Zero
                            Local0--
                            While ((Local2 < Local0))
                            {
                                Local3 = DerefOf (Index (TMP, Local2))
                                Index (TMP, Local2) = DerefOf (Index (TMP, Local0))
                                Index (TMP, Local0) = Local3
                                Local2++
                                Local0--
                            }

                            OUTS (TMP)
                        }
                    }

                    Method (OUTH, 1, Serialized)
                    {
                        Name (HEX, Buffer (0x11)
                        {
                            "0123456789ABCDEF"
                        })
                        Name (TMP, Buffer (0x0A) {})
                        Local0 = Zero
                        Local1 = Arg0
                        While ((Local0 < 0x08))
                        {
                            Local2 = (Local1 & 0x0F)
                            Index (TMP, Local0) = DerefOf (Index (HEX, Local2))
                            Local1 >>= 0x04
                            Local0++
                            Index (TMP, Local0) = Zero
                        }

                        Local2 = Zero
                        Local0--
                        While ((Local2 < Local0))
                        {
                            Local3 = DerefOf (Index (TMP, Local2))
                            Index (TMP, Local2) = DerefOf (Index (TMP, Local0))
                            Index (TMP, Local0) = Local3
                            Local2++
                            Local0--
                        }

                        OUTS (TMP)
                    }

                    Method (OUTX, 2, Serialized)
                    {
                        Local0 = (SizeOf (Arg0) + One)
                        Local1 = Zero
                        Local2 = Zero
                        Local3 = Zero
                        Name (BUFF, Buffer (Local0) {})
                        BUFF = Arg0
                        Name (BUFX, Buffer (Local0) {})
                        While ((Local1 <= Local0))
                        {
                            If ((DerefOf (Index (BUFF, Local1)) == Zero))
                            {
                                Index (BUFX, Local2) = Zero
                                OUTS (BUFX)
                                Break
                            }

                            If ((DerefOf (Index (BUFF, Local1)) == 0x25))
                            {
                                Local4 = (Local1 + One)
                                If ((DerefOf (Index (BUFF, Local4)) == 0x25))
                                {
                                    Index (BUFX, Local2) = 0x25
                                    Local1 += 0x02
                                    Local2++
                                    Continue
                                }

                                If ((DerefOf (Index (BUFF, Local4)) == 0x58))
                                {
                                    Index (BUFX, Local2) = Zero
                                    OUTS (BUFX)
                                    Local5 = DerefOf (Index (Arg1, Local3))
                                    OUTH (Local5)
                                    Local1 += 0x02
                                    Local2 = Zero
                                    Local3++
                                    Continue
                                }

                                If ((DerefOf (Index (BUFF, Local4)) == 0x78))
                                {
                                    Index (BUFX, Local2) = Zero
                                    OUTS (BUFX)
                                    Local5 = DerefOf (Index (Arg1, Local3))
                                    OUTH (Local5)
                                    Local1 += 0x02
                                    Local2 = Zero
                                    Local3++
                                    Continue
                                }

                                If ((DerefOf (Index (BUFF, Local4)) == 0x64))
                                {
                                    Index (BUFX, Local2) = Zero
                                    OUTS (BUFX)
                                    Local5 = DerefOf (Index (Arg1, Local3))
                                    OUTD (Local5)
                                    Local1 += 0x02
                                    Local2 = Zero
                                    Local3++
                                    Continue
                                }

                                If ((DerefOf (Index (BUFF, Local4)) == 0x63))
                                {
                                    Index (BUFX, Local2) = Zero
                                    OUTS (BUFX)
                                    Local5 = DerefOf (Index (Arg1, Local3))
                                    Index (BUFX, Zero) = Local5
                                    Index (BUFX, One) = Zero
                                    OUTS (BUFX)
                                    Local1 += 0x02
                                    Local2 = Zero
                                    Local3++
                                    Continue
                                }

                                Index (BUFX, Local2) = 0x25
                            }
                            Else
                            {
                                Local5 = DerefOf (Index (BUFF, Local1))
                                Index (BUFX, Local2) = Local5
                            }

                            Local1++
                            Local2++
                        }
                    }
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (OPTS, Zero)
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    While (One)
                    {
                        _T_0 = ToInteger (Arg0)
                        If ((_T_0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            While (One)
                            {
                                _T_1 = ToInteger (Arg2)
                                If ((_T_1 == Zero))
                                {
                                    If ((Arg1 == 0x02))
                                    {
                                        OPTS = One
                                        If (LTRE)
                                        {
                                            OPTS |= 0x40
                                        }

                                        If (OBFF)
                                        {
                                            OPTS |= 0x10
                                        }

                                        Return (OPTS) /* \_SB_.PCI0.RP01.OPTS */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                Else
                                {
                                    If ((_T_1 == 0x04))
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (OBFF)
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                                })
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If ((_T_1 == 0x06))
                                        {
                                            If ((Arg1 == 0x02))
                                            {
                                                If (LTRE)
                                                {
                                                    Name (MLTR, Zero)
                                                    If ((PCHS == One))
                                                    {
                                                        MLTR = 0x0846
                                                    }
                                                    Else
                                                    {
                                                        If ((PCHS == 0x02))
                                                        {
                                                            MLTR = 0x1003
                                                        }
                                                    }

                                                    Index (LTRV, Zero) = ((MLTR >> 0x0A) & 0x07)
                                                    Index (LTRV, One) = (MLTR & 0x03FF)
                                                    Index (LTRV, 0x02) = ((MLTR >> 0x0A) & 0x07)
                                                    Index (LTRV, 0x03) = (MLTR & 0x03FF)
                                                    Return (LTRV) /* \_SB_.PCI0.RP01.LTRV */
                                                }
                                                Else
                                                {
                                                    Return (Zero)
                                                }
                                            }
                                        }
                                    }
                                }

                                Break
                            }
                        }

                        Break
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             /* . */
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE) /* \_SB_.PCI0.RP01.HPCE */
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    Sleep (0x64)
                    While ((PSPX != Zero))
                    {
                        PSPX = One
                    }

                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (OPTS, Zero)
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    While (One)
                    {
                        _T_0 = ToInteger (Arg0)
                        If ((_T_0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            While (One)
                            {
                                _T_1 = ToInteger (Arg2)
                                If ((_T_1 == Zero))
                                {
                                    If ((Arg1 == 0x02))
                                    {
                                        OPTS = One
                                        If (LTRE)
                                        {
                                            OPTS |= 0x40
                                        }

                                        If (OBFF)
                                        {
                                            OPTS |= 0x10
                                        }

                                        Return (OPTS) /* \_SB_.PCI0.RP03.OPTS */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                Else
                                {
                                    If ((_T_1 == 0x04))
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (OBFF)
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                                })
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If ((_T_1 == 0x06))
                                        {
                                            If ((Arg1 == 0x02))
                                            {
                                                If (LTRE)
                                                {
                                                    Name (MLTR, Zero)
                                                    If ((PCHS == One))
                                                    {
                                                        MLTR = 0x0846
                                                    }
                                                    Else
                                                    {
                                                        If ((PCHS == 0x02))
                                                        {
                                                            MLTR = 0x1003
                                                        }
                                                    }

                                                    Index (LTRV, Zero) = ((MLTR >> 0x0A) & 0x07)
                                                    Index (LTRV, One) = (MLTR & 0x03FF)
                                                    Index (LTRV, 0x02) = ((MLTR >> 0x0A) & 0x07)
                                                    Index (LTRV, 0x03) = (MLTR & 0x03FF)
                                                    Return (LTRV) /* \_SB_.PCI0.RP03.LTRV */
                                                }
                                                Else
                                                {
                                                    Return (Zero)
                                                }
                                            }
                                        }
                                    }
                                }

                                Break
                            }
                        }

                        Break
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             /* . */
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE) /* \_SB_.PCI0.RP03.HPCE */
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    Sleep (0x64)
                    While ((PSPX != Zero))
                    {
                        PSPX = One
                    }

                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PR06 */
                }

                Device (WLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (MINP, PCI_Config, Zero, 0x68)
                    Field (MINP, ByteAcc, NoLock, Preserve)
                    {
                        VNUM,   32, 
                        Offset (0x09), 
                        PINF,   8, 
                        SBCC,   8, 
                        BSCC,   8, 
                        Offset (0x2C), 
                        SNUM,   32, 
                        Offset (0x34)
                    }

                    Method (MPDP, 0, NotSerialized)
                    {
                        If ((SNUM == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }

                        If ((BSCC != 0x02))
                        {
                            Return (Zero)
                        }

                        Return (One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (OPTS, Zero)
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    While (One)
                    {
                        _T_0 = ToInteger (Arg0)
                        If ((_T_0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            While (One)
                            {
                                _T_1 = ToInteger (Arg2)
                                If ((_T_1 == Zero))
                                {
                                    If ((Arg1 == 0x02))
                                    {
                                        OPTS = One
                                        If (LTRE)
                                        {
                                            OPTS |= 0x40
                                        }

                                        If (OBFF)
                                        {
                                            OPTS |= 0x10
                                        }

                                        Return (OPTS) /* \_SB_.PCI0.RP04.OPTS */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                Else
                                {
                                    If ((_T_1 == 0x04))
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (OBFF)
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                                })
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If ((_T_1 == 0x06))
                                        {
                                            If ((Arg1 == 0x02))
                                            {
                                                If (LTRE)
                                                {
                                                    Name (MLTR, Zero)
                                                    If ((PCHS == One))
                                                    {
                                                        MLTR = 0x0846
                                                    }
                                                    Else
                                                    {
                                                        If ((PCHS == 0x02))
                                                        {
                                                            MLTR = 0x1003
                                                        }
                                                    }

                                                    Index (LTRV, Zero) = ((MLTR >> 0x0A) & 0x07)
                                                    Index (LTRV, One) = (MLTR & 0x03FF)
                                                    Index (LTRV, 0x02) = ((MLTR >> 0x0A) & 0x07)
                                                    Index (LTRV, 0x03) = (MLTR & 0x03FF)
                                                    Return (LTRV) /* \_SB_.PCI0.RP04.LTRV */
                                                }
                                                Else
                                                {
                                                    Return (Zero)
                                                }
                                            }
                                        }
                                    }
                                }

                                Break
                            }
                        }

                        Break
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             /* . */
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE) /* \_SB_.PCI0.RP04.HPCE */
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    Sleep (0x64)
                    While ((PSPX != Zero))
                    {
                        PSPX = One
                    }

                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = One
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PR07 */
                }

                Device (GLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (LANR, PCI_Config, Zero, 0x0100)
                    Field (LANR, ByteAcc, NoLock, Preserve)
                    {
                        VID,    16, 
                        Offset (0xE0), 
                            ,   15, 
                        PMES,   1
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }
            }

            Device (P0P2)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PR02 */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (VSID, PCI_Config, Zero, 0x20)
                    Field (VSID, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        CMST,   32, 
                        CLSS,   32
                    }

                    Method (PRST, 0, NotSerialized)
                    {
                        If ((DVID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            If ((((CLSS & 0xFFFFFF00) == 0x03000000) || ((CLSS & 0xFFFFFF00
                                ) == 0x03020000)))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Name (LCDM, One)
                    Name (CRTM, 0x02)
                    Name (TVOM, 0x04)
                    Name (DO1M, 0x08)
                    Name (DO2M, 0x10)
                    Name (DONE, Zero)
                    Name (DOSF, One)
                    Name (BRNC, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSF = (Arg0 & 0x03)
                        BRNC = (Arg0 >> 0x02)
                        BRNC &= One
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Name (NDOD, Package (0x05)
                        {
                            0x00010110, 
                            0x00010100, 
                            0x0120, 
                            0x0121, 
                            0x0122
                        })
                        Return (NDOD) /* \_SB_.PCI0.P0P2.VGA_._DOD.NDOD */
                    }

                    Device (LCDD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If ((AVLD & LCDM))
                            {
                                Return (0x1F)
                            }

                            Return (0x1D)
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If ((SETD & LCDM))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            If ((Arg0 & 0x40000000))
                            {
                                If ((Arg0 & 0x80000000))
                                {
                                    DONE = One
                                }
                            }
                        }
                    }

                    Device (CRTD)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If ((AVLD & CRTM))
                            {
                                Return (0x1F)
                            }

                            Return (0x1D)
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If ((SETD & CRTM))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            If ((Arg0 & 0x40000000))
                            {
                                If ((Arg0 & 0x80000000))
                                {
                                    DONE = One
                                }
                            }
                        }
                    }

                    Device (DO1D)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x0120)
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If ((AVLD & DO1M))
                            {
                                Return (0x1F)
                            }

                            Return (0x1D)
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If ((SETD & DO1M))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            If ((Arg0 & 0x40000000))
                            {
                                If ((Arg0 & 0x80000000))
                                {
                                    DONE = One
                                }
                            }
                        }
                    }

                    Device (DO2D)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x0121)
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If ((AVLD & DO2M))
                            {
                                Return (0x1F)
                            }

                            Return (0x1D)
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If ((SETD & DO2M))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            If ((Arg0 & 0x40000000))
                            {
                                If ((Arg0 & 0x80000000))
                                {
                                    DONE = One
                                }
                            }
                        }
                    }
                }
            }

            Device (P0PA)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PR0A) /* \_SB_.PR0A */
                }
            }

            Device (P0PB)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PR0B) /* \_SB_.PR0B */
                }
            }

            Device (B0D4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (XHC)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
                Field (XPRT, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    MEMB,   32, 
                    Offset (0x74), 
                    Offset (0x75), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0xD0), 
                    PR2,    32, 
                    PR2M,   32, 
                    PR3,    32, 
                    PR3M,   32
                }

                Name (XRST, Zero)
                Method (CUID, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (POSC, 3, Serialized)
                {
                    CreateDWordField (Arg2, Zero, CDW1)
                    CreateDWordField (Arg2, 0x08, CDW3)
                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((XHCI == Zero))
                    {
                        CDW1 |= 0x02
                    }

                    If (!(CDW1 & One))
                    {
                        If ((CDW3 & One))
                        {
                            ESEL ()
                        }
                        Else
                        {
                            XSEL ()
                        }
                    }

                    Return (Arg2)
                }

                Method (XSEL, 0, Serialized)
                {
                    If (((XHCI == 0x02) || (XHCI == 0x03)))
                    {
                        XUSB = One
                        XRST = One
                        Local0 = Zero
                        Local0 = (PR3 & 0xFFFFFFC0)
                        PR3 = (Local0 | PR3M) /* \_SB_.PCI0.XHC_.PR3M */
                        Local0 = Zero
                        Local0 = (PR2 & 0xFFFF8000)
                        PR2 = (Local0 | PR2M) /* \_SB_.PCI0.XHC_.PR2M */
                    }
                }

                Method (ESEL, 0, Serialized)
                {
                    If (((XHCI == 0x02) || (XHCI == 0x03)))
                    {
                        PR3 &= 0xFFFFFFC0
                        PR2 &= 0xFFFF8000
                        XUSB = Zero
                        XRST = Zero
                    }
                }

                Method (XWAK, 0, Serialized)
                {
                    If (((XUSB == One) || (XRST == One)))
                    {
                        XSEL ()
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x03))
                }
            }

            Device (EHC0)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (PWKE, PCI_Config, 0x54, 0x12)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x0E), 
                        ,   1, 
                    PWUC,   8
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PWUC = Ones
                    }
                    Else
                    {
                        PWUC = Zero
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCA, Package (0x04)
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Return (UPCA) /* \_SB_.PCI0.EHC0.HUBN.PR01._UPC.UPCA */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* 0....... */
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC0.HUBN.PR01._PLD.PLDP */
                        }

                        Device (PR11)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR11._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR11._PLD.PLDP */
                            }
                        }

                        Device (PR12)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR12._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR12._PLD.PLDP */
                            }
                        }

                        Device (PR13)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR13._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                                If (((CDID & 0xF000) == 0x9000))
                                {
                                    VIS &= Zero
                                }

                                Return (PLDP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR13._PLD.PLDP */
                            }
                        }

                        Device (PR14)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR14._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR14._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    While (One)
                                    {
                                        _T_0 = ToInteger (Arg2)
                                        If ((_T_0 == Zero))
                                        {
                                            If ((Arg1 == One))
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x07                                             /* . */
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x00                                             /* . */
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((_T_0 == One))
                                            {
                                                If ((SDGV == 0xFF))
                                                {
                                                    Return (Zero)
                                                }
                                                Else
                                                {
                                                    Return (One)
                                                }
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x02))
                                                {
                                                    Return (SDGV) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR14.SDGV */
                                                }
                                            }
                                        }

                                        Break
                                    }
                                }

                                Return (Zero)
                            }
                        }

                        Device (PR15)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR15._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR15._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    While (One)
                                    {
                                        _T_0 = ToInteger (Arg2)
                                        If ((_T_0 == Zero))
                                        {
                                            If ((Arg1 == One))
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x07                                             /* . */
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x00                                             /* . */
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((_T_0 == One))
                                            {
                                                If ((SDGV == 0xFF))
                                                {
                                                    Return (Zero)
                                                }
                                                Else
                                                {
                                                    Return (One)
                                                }
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x02))
                                                {
                                                    Return (SDGV) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR15.SDGV */
                                                }
                                            }
                                        }

                                        Break
                                    }
                                }

                                Return (Zero)
                            }
                        }

                        Device (PR16)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR16._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR16._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    While (One)
                                    {
                                        _T_0 = ToInteger (Arg2)
                                        If ((_T_0 == Zero))
                                        {
                                            If ((Arg1 == One))
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x07                                             /* . */
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x00                                             /* . */
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((_T_0 == One))
                                            {
                                                If ((SDGV == 0xFF))
                                                {
                                                    Return (Zero)
                                                }
                                                Else
                                                {
                                                    Return (One)
                                                }
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x02))
                                                {
                                                    Return (SDGV) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR16.SDGV */
                                                }
                                            }
                                        }

                                        Break
                                    }
                                }

                                Return (Zero)
                            }
                        }

                        Device (PR17)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR17._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR17._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    While (One)
                                    {
                                        _T_0 = ToInteger (Arg2)
                                        If ((_T_0 == Zero))
                                        {
                                            If ((Arg1 == One))
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x07                                             /* . */
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x00                                             /* . */
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((_T_0 == One))
                                            {
                                                If ((SDGV == 0xFF))
                                                {
                                                    Return (Zero)
                                                }
                                                Else
                                                {
                                                    Return (One)
                                                }
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x02))
                                                {
                                                    Return (SDGV) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR17.SDGV */
                                                }
                                            }
                                        }

                                        Break
                                    }
                                }

                                Return (Zero)
                            }
                        }

                        Device (PR18)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR18._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC0.HUBN.PR01.PR18._PLD.PLDP */
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x03))
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                OperationRegion (PWKE, PCI_Config, 0x54, 0x12)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x0E), 
                        ,   1, 
                    PWUC,   6
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PWUC = Ones
                    }
                    Else
                    {
                        PWUC = Zero
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCA, Package (0x04)
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Return (UPCA) /* \_SB_.PCI0.EHC1.HUBN.PR01._UPC.UPCA */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* 0....... */
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01._PLD.PLDP */
                        }

                        Device (PR11)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._PLD.PLDP */
                            }
                        }

                        Device (PR12)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    While (One)
                                    {
                                        _T_0 = ToInteger (Arg2)
                                        If ((_T_0 == Zero))
                                        {
                                            If ((Arg1 == One))
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x07                                             /* . */
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x00                                             /* . */
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((_T_0 == One))
                                            {
                                                If ((SDGV == 0xFF))
                                                {
                                                    Return (Zero)
                                                }
                                                Else
                                                {
                                                    Return (One)
                                                }
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x02))
                                                {
                                                    Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12.SDGV */
                                                }
                                            }
                                        }

                                        Break
                                    }
                                }

                                Return (Zero)
                            }
                        }

                        Device (PR13)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    While (One)
                                    {
                                        _T_0 = ToInteger (Arg2)
                                        If ((_T_0 == Zero))
                                        {
                                            If ((Arg1 == One))
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x07                                             /* . */
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x00                                             /* . */
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((_T_0 == One))
                                            {
                                                If ((SDGV == 0xFF))
                                                {
                                                    Return (Zero)
                                                }
                                                Else
                                                {
                                                    Return (One)
                                                }
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x02))
                                                {
                                                    Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13.SDGV */
                                                }
                                            }
                                        }

                                        Break
                                    }
                                }

                                Return (Zero)
                            }
                        }

                        Device (PR14)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._PLD.PLDP */
                            }
                        }

                        Device (PR15)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._PLD.PLDP */
                            }
                        }

                        Device (PR16)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._PLD.PLDP */
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x03))
                }
            }

            Device (HDEF)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
                Field (HDAR, WordAcc, NoLock, Preserve)
                {
                    DCKA,   1, 
                    Offset (0x01), 
                    DCKM,   1, 
                        ,   6, 
                    DCKS,   1, 
                    Offset (0x08), 
                    Offset (0x09), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (VSID, PCI_Config, Zero, 0x20)
                Field (VSID, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    CMST,   32, 
                    CLSS,   32
                }

                Method (PRST, 0, NotSerialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        If (((CLSS & 0xFFFFFF00) == 0x03000000))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Method (OGCD, 0, NotSerialized)
                {
                    If ((CADL == Zero))
                    {
                        CSTE = 0x0808
                        Return (Zero)
                    }

                    CSTE = OA2D (CADL)
                    If ((CAL2 == Zero))
                    {
                        Return (Zero)
                    }

                    CSTE |= OA2D (CAL2) /* \_SB_.CSTE */
                    If ((CAL3 == Zero))
                    {
                        Return (Zero)
                    }

                    CSTE |= OA2D (CAL3) /* \_SB_.CSTE */
                    If ((CAL4 == Zero))
                    {
                        Return (Zero)
                    }

                    CSTE |= OA2D (CAL4) /* \_SB_.CSTE */
                    If ((CAL5 == Zero))
                    {
                        Return (Zero)
                    }

                    CSTE |= OA2D (CAL5) /* \_SB_.CSTE */
                    If ((CAL6 == Zero))
                    {
                        Return (Zero)
                    }

                    CSTE |= OA2D (CAL6) /* \_SB_.CSTE */
                    If ((CAL7 == Zero))
                    {
                        Return (Zero)
                    }

                    CSTE |= OA2D (CAL7) /* \_SB_.CSTE */
                    If ((CAL8 == Zero))
                    {
                        Return (Zero)
                    }

                    CSTE |= OA2D (CAL8) /* \_SB_.CSTE */
                    Return (Zero)
                }

                Method (OGCA, 0, NotSerialized)
                {
                    If ((CPDL == Zero))
                    {
                        ^^^CADL = 0x0808
                        Return (Zero)
                    }

                    ^^^CADL = OA2D (CPDL)
                    If ((CPL2 == Zero))
                    {
                        Return (Zero)
                    }

                    ^^^CADL |= OA2D (CPL2) /* \_SB_.CADL */
                    If ((CPL3 == Zero))
                    {
                        Return (Zero)
                    }

                    ^^^CADL |= OA2D (CPL3) /* \_SB_.CADL */
                    If ((CPL4 == Zero))
                    {
                        Return (Zero)
                    }

                    ^^^CADL |= OA2D (CPL4) /* \_SB_.CADL */
                    If ((CPL5 == Zero))
                    {
                        Return (Zero)
                    }

                    ^^^CADL |= OA2D (CPL5) /* \_SB_.CADL */
                    If ((CPL6 == Zero))
                    {
                        Return (Zero)
                    }

                    ^^^CADL |= OA2D (CPL6) /* \_SB_.CADL */
                    If ((CPL7 == Zero))
                    {
                        Return (Zero)
                    }

                    ^^^CADL |= OA2D (CPL7) /* \_SB_.CADL */
                    If ((CPL8 == Zero))
                    {
                        Return (Zero)
                    }

                    ^^^CADL |= OA2D (CPL8) /* \_SB_.CADL */
                    Return (Zero)
                }

                Method (OA2D, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((Arg0 == 0x0400))
                    {
                        Local0 |= LCDM /* \_SB_.PCI0.GFX0.LCDM */
                    }

                    If ((Arg0 == 0x0100))
                    {
                        Local0 |= CRTM /* \_SB_.PCI0.GFX0.CRTM */
                    }

                    If ((Arg0 == 0x0200))
                    {
                        Local0 |= TVOM /* \_SB_.PCI0.GFX0.TVOM */
                    }

                    If ((Arg0 == 0x0300))
                    {
                        Local0 |= DPBM /* \_SB_.PCI0.GFX0.DPBM */
                    }

                    If ((Arg0 == 0x0301))
                    {
                        Local0 |= DPCM /* \_SB_.PCI0.GFX0.DPCM */
                    }

                    Return (Local0)
                }

                Name (OPBS, 0xFFFFFF00)
                Method (OPTS, 1, NotSerialized)
                {
                    If ((VGAF & One))
                    {
                        If ((Arg0 == 0x03))
                        {
                            OPBS = ASLS /* External reference */
                        }
                    }
                }

                Method (OWAK, 1, NotSerialized)
                {
                    If ((VGAF & One))
                    {
                        If ((Arg0 == 0x03))
                        {
                            ASLS = OPBS /* \_SB_.PCI0.GFX0.OPBS */
                            GSES = One
                            Notify (PCI0, Zero) // Bus Check
                        }

                        CLID = 0x80000003
                    }
                }

                Name (DVIM, 0x1010)
                Name (HDMM, 0x0404)
                Name (PCTG, Package (0x0D) {})
                Name (PCW8, Package (0x67) {})
                Name (LCDM, 0x0808)
                Name (CRTM, 0x0101)
                Name (TVOM, 0x0202)
                Name (DPBM, 0x0404)
                Name (DPCM, 0x1010)
                Name (DPDM, 0x2020)
                Name (DOSF, One)
                Name (BRNC, Zero)
                Name (UPDN, One)
                Name (NXTD, One)
                Method (MD2A, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((Arg0 & LCDM))
                    {
                        Local0 |= One
                    }

                    If ((Arg0 & CRTM))
                    {
                        Local0 |= 0x02
                    }

                    If ((Arg0 & TVOM))
                    {
                        Local0 |= 0x04
                    }

                    If ((Arg0 & DVIM))
                    {
                        Local0 |= 0x08
                    }

                    If ((Arg0 & HDMM))
                    {
                        Local0 |= 0x10
                    }

                    If (!Local0)
                    {
                        Return (NXTD) /* \_SB_.PCI0.GFX0.NXTD */
                    }

                    Return (Local0)
                }

                Method (MA2D, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((Arg0 & One))
                    {
                        Local0 |= LCDM /* \_SB_.PCI0.GFX0.LCDM */
                    }

                    If ((Arg0 & 0x02))
                    {
                        Local0 |= CRTM /* \_SB_.PCI0.GFX0.CRTM */
                    }

                    If ((Arg0 & 0x04))
                    {
                        Local0 |= TVOM /* \_SB_.PCI0.GFX0.TVOM */
                    }

                    If ((Arg0 & 0x08))
                    {
                        Local0 |= DVIM /* \_SB_.PCI0.GFX0.DVIM */
                    }

                    If ((Arg0 & 0x10))
                    {
                        Local0 |= HDMM /* \_SB_.PCI0.GFX0.HDMM */
                    }

                    If (!Local0)
                    {
                        Return (LCDM) /* \_SB_.PCI0.GFX0.LCDM */
                    }

                    Return (Local0)
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSF = (Arg0 & 0x03)
                    BRNC = (Arg0 >> 0x02)
                    BRNC &= One
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Name (IDOD, Package (0x05)
                    {
                        0x80010400, 
                        0x80010100, 
                        0x80010300, 
                        0x80010301, 
                        0x80010302
                    })
                    Return (IDOD) /* \_SB_.PCI0.GFX0._DOD.IDOD */
                }

                Device (LCDD)
                {
                    Name (_ADR, 0x0400)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((CSTE & LCDM))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & LCDM))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((~(Arg0 & 0x80000000) | (Arg0 & 0x40000000)
                            ))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                        Else
                        {
                            If (~(Arg0 & 0x40000000)) {}
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        If ((OSFG >= OSW8))
                        {
                            Local0 = Zero
                            Local1 = ((AB00 * 0x64) / 0xFF)
                            While ((Local0 < 0x65))
                            {
                                If ((Local0 < Local1))
                                {
                                    Index (PCW8, (Local0 + 0x02)) = Local1
                                }
                                Else
                                {
                                    Index (PCW8, (Local0 + 0x02)) = Local0
                                }

                                Local0++
                            }

                            Index (PCW8, Zero) = 0x64
                            Index (PCW8, One) = 0x28
                            Return (PCW8) /* \_SB_.PCI0.GFX0.PCW8 */
                        }

                        Local0 = (0x0B - One)
                        Local1 = ^^^LPCB.HEC.PWAC (Local0)
                        Local2 = ((Local1 * 0x64) / 0xFF)
                        Index (PCTG, Zero) = Local2
                        Local0 = (0x0B - 0x04)
                        Local1 = ^^^LPCB.HEC.PWAC (Local0)
                        Local2 = ((Local1 * 0x64) / 0xFF)
                        Index (PCTG, One) = Local2
                        Local0 = Zero
                        While ((Local0 < 0x0B))
                        {
                            Local1 = ^^^LPCB.HEC.PWAC (Local0)
                            Local2 = ((Local1 * 0x64) / 0xFF)
                            Index (PCTG, (Local0 + 0x02)) = Local2
                            Local0++
                        }

                        Return (PCTG) /* \_SB_.PCI0.GFX0.PCTG */
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        BCMD = One
                        Local0 = GCBL (Arg0)
                        LBTN = Local0
                        AINT (One, Arg0)
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Local0 = LBTN /* \_SB_.LBTN */
                        Return (DerefOf (Index (PCTG, (Local0 + 0x02))))
                    }
                }

                Device (CRTD)
                {
                    Name (_ADR, 0x0100)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((CSTE & CRTM))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & CRTM))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((~(Arg0 & 0x80000000) | (Arg0 & 0x40000000)
                            ))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                        Else
                        {
                            If (~(Arg0 & 0x40000000)) {}
                        }
                    }
                }

                Device (DPBD)
                {
                    Name (_ADR, 0x0300)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((CSTE & DPBM))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & DPBM))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((~(Arg0 & 0x80000000) | (Arg0 & 0x40000000)
                            ))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                        Else
                        {
                            If (~(Arg0 & 0x40000000)) {}
                        }
                    }
                }

                Device (DPCD)
                {
                    Name (_ADR, 0x0301)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((CSTE & DPCM))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & DPCM))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((~(Arg0 & 0x80000000) | (Arg0 & 0x40000000)
                            ))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                        Else
                        {
                            If (~(Arg0 & 0x40000000)) {}
                        }
                    }
                }

                Device (DPDD)
                {
                    Name (_ADR, 0x0302)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((CSTE & DPDM))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & DPDM))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((~(Arg0 & 0x80000000) | (Arg0 & 0x40000000)
                            ))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                        Else
                        {
                            If (~(Arg0 & 0x40000000)) {}
                        }
                    }
                }

                Method (SWHD, 1, Serialized)
                {
                    UPDN = One
                    If ((DOSF == One))
                    {
                        If (\NATK ())
                        {
                            SFUN = Zero
                        }
                        Else
                        {
                            SFUN = 0x04
                        }

                        SSTE = Arg0
                        If (\NATK ())
                        {
                            NSTE = MA2D (Arg0)
                            SSTE = NSTE /* \_SB_.NSTE */
                        }

                        ISMI (0x94)
                        Notify (GFX0, 0x81) // Information Change
                    }
                    Else
                    {
                        CEVT = One
                        CSTS = 0x03
                        If ((^^^CADL != PADL))
                        {
                            PADL = ^^^CADL /* \_SB_.CADL */
                            If ((OSFG == OSXP))
                            {
                                Notify (PCI0, Zero) // Bus Check
                            }
                            Else
                            {
                                Notify (GFX0, Zero) // Bus Check
                            }

                            Sleep (0x03E8)
                        }

                        NSTE = MA2D (Arg0)
                        Notify (GFX0, 0x80) // Status Change
                    }
                }

                Method (GCDD, 0, NotSerialized)
                {
                    SFUN = One
                    ISMI (0x95)
                    Return (CSTE) /* \_SB_.CSTE */
                }

                Method (GNDD, 0, NotSerialized)
                {
                    SFUN = 0x05
                    ISMI (0x95)
                    Return (NSTE) /* \_SB_.NSTE */
                }

                Method (GCAD, 0, NotSerialized)
                {
                    SFUN = 0x02
                    ISMI (0x95)
                    Return (^^^CADL) /* \_SB_.CADL */
                }

                Method (GVIF, 0, NotSerialized)
                {
                    VBIF = 0x67
                    SFUN = Zero
                    ISMI (0x95)
                    Return (VBIF) /* \_SB_.VBIF */
                }

                Method (GETD, 0, NotSerialized)
                {
                    OGCD ()
                    ACTD = CSTE /* \_SB_.CSTE */
                    OGCA ()
                    AVLD = ^^^CADL /* \_SB_.CADL */
                    Return (ACTD) /* \_SB_.ACTD */
                }

                Method (ADVD, 0, NotSerialized)
                {
                    If ((DOSF & 0x03))
                    {
                        GCDD ()
                        GCAD ()
                        GVIF ()
                    }
                    Else
                    {
                        OGCD ()
                        OGCA ()
                    }

                    If (\NATK ())
                    {
                        If (UPDN)
                        {
                            NXTD = MD2A (CSTE)
                            UPDN = Zero
                        }

                        Local0 = Zero
                        Local1 = MD2A (^^^CADL)
                        Local2 = Zero
                        If ((VGAF & One))
                        {
                            Local2 = (VBIF & 0x08)
                        }

                        If (((Local2 == 0x08) & (VGAF & One)))
                        {
                            NXTD &= Local1
                            Local0 = NXTD /* \_SB_.PCI0.GFX0.NXTD */
                        }

                        While ((NXTD != Local0))
                        {
                            NXTD++
                            If ((DOSF & 0x03))
                            {
                                If ((NXTD == 0x05))
                                {
                                    NXTD++
                                }

                                If ((NXTD == 0x06))
                                {
                                    NXTD++
                                }
                            }

                            If ((NXTD == 0x07))
                            {
                                NXTD++
                            }

                            If ((NXTD == 0x0B))
                            {
                                NXTD++
                            }

                            If (((NXTD > 0x0C) && (NXTD < 0x10)))
                            {
                                NXTD++
                            }

                            If ((NXTD == 0x13))
                            {
                                NXTD++
                            }

                            If (((NXTD > 0x14) && (NXTD < 0x18)))
                            {
                                NXTD++
                            }

                            If ((NXTD > 0x18))
                            {
                                NXTD = One
                            }

                            Local0 = (NXTD & Local1)
                        }

                        Return (NXTD) /* \_SB_.PCI0.GFX0.NXTD */
                    }

                    Return (GNDD ())
                }

                Method (NATK, 0, NotSerialized)
                {
                    Return (One)
                }

                Name (BCMD, Zero)
                Method (UPBL, 0, NotSerialized)
                {
                    If ((OSFG >= OSW8))
                    {
                        Notify (LCDD, 0x86) // Device-Specific
                        Sleep (0x19)
                        Return (Zero)
                    }

                    If (ATKP)
                    {
                        Local0 = LBTN /* \_SB_.LBTN */
                        If ((LBTN < 0x0A))
                        {
                            Local0++
                        }
                        Else
                        {
                            Local0 = 0x0A
                        }

                        LBTN = Local0
                        ^^^ATKD.NTFY ((Local0 + 0x10))
                    }

                    If (BRNC)
                    {
                        Local0 = CBLV /* External reference */
                        BCMD = Zero
                        Notify (LCDD, 0x86) // Device-Specific
                        Local2 = 0x0300
                        Local1 = (Local0 & 0x7FFFFFFF)
                        If ((Local1 > DerefOf (Index (PCTG, 0x0B))))
                        {
                            Local2 = Zero
                            Local1 = One
                        }

                        While ((!BCMD && Local2))
                        {
                            Local1 = CBLV /* External reference */
                            If ((Local0 == Local1))
                            {
                                Sleep (0x0A)
                                Local2--
                                Local1 = Zero
                            }
                            Else
                            {
                                Local2 = Zero
                                Local1 = One
                            }
                        }

                        If ((!BCMD && Local1))
                        {
                            Local3 = GCBL (CBLV)
                            LBTN = Local3
                        }
                    }
                    Else
                    {
                        ^^LPCB.HEC.STBR ()
                        Notify (LCDD, 0x86) // Device-Specific
                    }
                }

                Method (DWBL, 0, NotSerialized)
                {
                    If ((OSFG >= OSW8))
                    {
                        Notify (LCDD, 0x87) // Device-Specific
                        Sleep (0x19)
                        Return (Zero)
                    }

                    If (ATKP)
                    {
                        Local0 = LBTN /* \_SB_.LBTN */
                        If ((LBTN > Zero))
                        {
                            Local0--
                        }

                        If ((LBTN > 0x0A))
                        {
                            Local0 = 0x0A
                        }

                        LBTN = Local0
                        ^^^ATKD.NTFY ((Local0 + 0x20))
                    }

                    If (BRNC)
                    {
                        Local0 = CBLV /* External reference */
                        BCMD = Zero
                        Notify (LCDD, 0x87) // Device-Specific
                        Local2 = 0x0300
                        Local1 = (Local0 & 0x7FFFFFFF)
                        If ((Local1 <= DerefOf (Index (PCTG, 0x02))))
                        {
                            Local2 = Zero
                            Local1 = One
                        }

                        While ((!BCMD && Local2))
                        {
                            Local1 = CBLV /* External reference */
                            If ((Local0 == Local1))
                            {
                                Sleep (0x0A)
                                Local2--
                                Local1 = Zero
                            }
                            Else
                            {
                                Local2 = Zero
                                Local1 = One
                            }
                        }

                        If ((!BCMD && Local1))
                        {
                            Local3 = GCBL (CBLV)
                            LBTN = Local3
                        }
                    }
                    Else
                    {
                        ^^LPCB.HEC.STBR ()
                        Notify (LCDD, 0x87) // Device-Specific
                    }
                }

                Method (GCBL, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 &= 0x7FFFFFFF
                    While ((Local0 < 0x0B))
                    {
                        Local1 = DerefOf (Index (PCTG, (Local0 + 0x02)))
                        If ((Local1 >= Arg0))
                        {
                            Break
                        }

                        Local0++
                    }

                    If ((Local0 >= 0x0B))
                    {
                        Local2 = 0x0A
                    }
                    Else
                    {
                        Local2 = Local0
                    }

                    Return (Local2)
                }
            }
        }
    }

    Name (RPA0, 0x001C0000)
    Name (RPA1, 0x001C0001)
    Name (RPA2, 0x001C0002)
    Name (RPA3, 0x001C0003)
    Name (RPA4, 0x001C0004)
    Name (RPA5, 0x001C0005)
    Name (RPA6, 0x001C0006)
    Name (RPA7, 0x001C0007)
    Name (PCHS, 0x00000001)
    Scope (\)
    {
        OperationRegion (IO_D, SystemIO, 0x0810, 0x04)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x28), 
            Offset (0x2A), 
                ,   3, 
            GPE3,   1, 
                ,   7, 
            GPEB,   1, 
            Offset (0x3C), 
                ,   1, 
            UPRW,   1, 
            Offset (0x42), 
                ,   1, 
            GPEC,   1
        }

        Field (PMIO, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x20), 
            Offset (0x22), 
                ,   3, 
            GPS3,   1, 
                ,   7, 
            GPSB,   1, 
            Offset (0x64), 
                ,   9, 
            SCIS,   1, 
            Offset (0x66)
        }

        OperationRegion (PMLP, SystemIO, (PMBS + 0x80), 0x20)
        Field (PMLP, ByteAcc, NoLock, Preserve)
        {
            Offset (0x10), 
            Offset (0x11), 
            GE08,   1, 
                ,   8, 
            GE17,   1, 
                ,   17, 
            GE35,   1, 
                ,   9, 
            GE45,   1, 
                ,   5, 
            GE51,   1, 
            Offset (0x20)
        }

        Field (PMLP, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x01), 
            GS08,   1, 
                ,   8, 
            GS17,   1, 
                ,   17, 
            GS35,   1, 
                ,   9, 
            GS45,   1, 
                ,   5, 
            GS51,   1, 
            Offset (0x10)
        }

        OperationRegion (GPR, SystemIO, GPBS, 0x0400)
        Field (GPR, ByteAcc, NoLock, Preserve)
        {
            GU00,   8, 
            GU01,   8, 
            GU02,   8, 
            GU03,   8, 
            GIO0,   8, 
            GIO1,   8, 
            GIO2,   8, 
            GIO3,   8, 
            Offset (0x0C), 
            GL00,   8, 
            GL01,   8, 
            GL02,   8, 
            GP24,   1, 
                ,   2, 
            GP27,   1, 
            GP28,   1, 
            Offset (0x10), 
            Offset (0x18), 
            GB00,   8, 
            GB01,   8, 
            GB02,   8, 
            GB03,   8, 
            Offset (0x2C), 
            GIV0,   8, 
            GIV1,   8, 
            GIV2,   8, 
            GIV3,   8, 
            GU04,   8, 
            GU05,   8, 
            GU06,   8, 
            GU07,   8, 
            GIO4,   8, 
            GIO5,   8, 
            GIO6,   8, 
            GIO7,   8, 
            GL04,   8, 
            GL05,   8, 
            GL06,   8, 
            GL07,   8, 
            Offset (0x40), 
            GU08,   8, 
            GU09,   8, 
            GU0A,   8, 
            GU0B,   8, 
            GIO8,   8, 
            GIO9,   8, 
            GIOA,   8, 
            GIOB,   8, 
            GL08,   8, 
            GL09,   8, 
            GL0A,   8, 
            GL0B,   8
        }

        OperationRegion (GPRL, SystemIO, GPBS, 0x40)
        Field (GPRL, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            GO08,   1, 
            GO09,   1, 
                ,   4, 
            GO14,   1, 
                ,   2, 
            GO17,   1, 
                ,   27, 
            GO45,   1, 
                ,   5, 
            GO51,   1, 
            Offset (0x10), 
            Offset (0x30), 
            GR00,   32, 
            GR01,   32, 
            GR02,   32
        }

        OperationRegion (RCRB, SystemMemory, SRCB, 0x4000)
        Field (RCRB, DWordAcc, Lock, Preserve)
        {
            Offset (0x1000), 
            Offset (0x2330), 
            AFEA,   32, 
            AFED,   32, 
            AFES,   16, 
            AFER,   16, 
            Offset (0x3000), 
            Offset (0x3404), 
            HPAS,   2, 
                ,   5, 
            HPAE,   1, 
            Offset (0x3418), 
                ,   1, 
            ADSD,   1, 
            SATD,   1, 
            SMBD,   1, 
            HDAD,   1, 
            Offset (0x341A), 
            RP1D,   1, 
            RP2D,   1, 
            RP3D,   1, 
            RP4D,   1, 
            RP5D,   1, 
            RP6D,   1, 
            RP7D,   1, 
            RP8D,   1, 
            Offset (0x359C), 
            UP0D,   1, 
            UP1D,   1, 
            UP2D,   1, 
            UP3D,   1, 
            UP4D,   1, 
            UP5D,   1, 
            UP6D,   1, 
            UP7D,   1, 
            UP8D,   1, 
            UP9D,   1, 
            UPAD,   1, 
            UPBD,   1, 
            UPCD,   1, 
            UPDD,   1, 
                ,   1, 
            Offset (0x359E)
        }

        OperationRegion (IO_P, SystemIO, 0x1000, 0x04)
        Field (IO_P, ByteAcc, NoLock, Preserve)
        {
            TRPF,   8
        }
    }

    Scope (_SB)
    {
        Method (RDGI, 1, NotSerialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                        ,   30, 
                    TEMP,   1
                }

                Return (TEMP) /* \_SB_.RDGI.TEMP */
            }
        }

        Method (RDGP, 1, NotSerialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                        ,   31, 
                    TEMP,   1
                }

                Return (TEMP) /* \_SB_.RDGP.TEMP */
            }
        }

        Method (WTGP, 2, NotSerialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                        ,   31, 
                    TEMP,   1
                }

                TEMP = Arg1
            }
        }

        Method (WTIN, 2, NotSerialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    TEMP,   1
                }

                TEMP = Arg1
            }
        }

        Method (WPGP, 2, NotSerialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0104) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   2
                }

                TEMP = Arg1
            }
        }

        Method (GP2N, 2, NotSerialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   1
                }

                TEMP = Arg1
            }
        }

        Method (GP2A, 2, NotSerialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0104) + (Arg0 * 0x08))
                OperationRegion (LGP2, SystemIO, Local0, 0x04)
                Field (LGP2, AnyAcc, NoLock, Preserve)
                {
                    GPWP,   2, 
                    GPIS,   1
                }

                If ((Arg1 == One))
                {
                    GPIS = Zero
                    GPWP = Zero
                }
                Else
                {
                    GPWP = 0x02
                    GPIS = One
                }

                Local0 = (GPBS + 0x10)
                OperationRegion (LGPI, SystemIO, Local0, 0x02)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   16
                }

                If ((Arg0 >= 0x2D))
                {
                    Local1 = (Arg0 - 0x28)
                }
                Else
                {
                    If ((Arg0 <= 0x0A))
                    {
                        Local1 = (Arg0 - 0x08)
                    }
                    Else
                    {
                        Local1 = (Arg0 - 0x0A)
                    }
                }

                Local2 = (One << Local1)
                If (Arg1)
                {
                    TEMP |= Local2
                }
                Else
                {
                    TEMP &= ~Local2
                }
            }
        }

        Method (GP2B, 2, NotSerialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = (GPBS + 0x10)
                OperationRegion (LGPI, SystemIO, Local0, 0x02)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   16
                }

                If ((Arg0 >= 0x2D))
                {
                    Local1 = (Arg0 - 0x28)
                }
                Else
                {
                    If ((Arg0 <= 0x0A))
                    {
                        Local1 = (Arg0 - 0x08)
                    }
                    Else
                    {
                        Local1 = (Arg0 - 0x0A)
                    }
                }

                Local2 = (One << Local1)
                If (Arg1)
                {
                    TEMP |= Local2
                }
                Else
                {
                    TEMP &= ~Local2
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (LTRE, Zero)
        Name (OBFF, Zero)
        Device (SAT0)
        {
            Name (_ADR, 0x001F0002)  // _ADR: Address
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.FDRP */
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((DVS0 == One) && ((FDEV & One) == One)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Name (PIB1, Buffer (0x07)
                        {
                             0x10, 0x09, 0x00, 0x00, 0x00, 0xB0, 0xEF         /* ....... */
                        })
                        Return (PIB1) /* \_SB_.PCI0.SAT0.PRT0._GTF.PIB1 */
                    }

                    Name (PIB2, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                    })
                    Return (PIB2) /* \_SB_.PCI0.SAT0.PRT0._GTF.PIB2 */
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
                Name (FDEV, Zero)
                Name (FDRP, Zero)
                Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
                {
                    ADBG ("SAta DEP")
                    If (((S0ID == One) && (PEPY & 0x02)))
                    {
                        ADBG ("SAta DEP")
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                    Else
                    {
                        ADBG ("SAta DEP NULL")
                        Return (Package (0x00) {})
                    }
                }

                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT1.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT1.FDRP */
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((DVS1 == One) && ((FDEV & One) == One)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Name (PIB1, Buffer (0x07)
                        {
                             0x10, 0x09, 0x00, 0x00, 0x00, 0xB0, 0xEF         /* ....... */
                        })
                        Return (PIB1) /* \_SB_.PCI0.SAT0.PRT1._GTF.PIB1 */
                    }

                    Name (PIB2, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                    })
                    Return (PIB2) /* \_SB_.PCI0.SAT0.PRT1._GTF.PIB2 */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
                Name (FDEV, Zero)
                Name (FDRP, Zero)
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT3.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT3.FDRP */
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((DVS3 == One) && ((FDEV & One) == One)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Name (PIB1, Buffer (0x07)
                        {
                             0x10, 0x09, 0x00, 0x00, 0x00, 0xB0, 0xEF         /* ....... */
                        })
                        Return (PIB1) /* \_SB_.PCI0.SAT0.PRT3._GTF.PIB1 */
                    }

                    Name (PIB2, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                    })
                    Return (PIB2) /* \_SB_.PCI0.SAT0.PRT3._GTF.PIB2 */
                }
            }
        }

        Device (SAT1)
        {
            Name (_ADR, 0x001F0005)  // _ADR: Address
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
            Field (SMBP, DWordAcc, NoLock, Preserve)
            {
                    ,   2, 
                I2CE,   1
            }

            OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
            Field (SMPB, DWordAcc, NoLock, Preserve)
            {
                    ,   5, 
                SBAR,   11
            }

            OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCON,   8, 
                HCOM,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8, 
                PECR,   8, 
                RXSA,   8, 
                SDAT,   16
            }

            Method (SSXB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRXB, 1, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCON = 0x44
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRB, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = Arg2
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRW, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT1 = (Arg2 & 0xFF)
                DAT0 = ((Arg2 >> 0x08) & 0xFF)
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDW, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (((DAT0 << 0x08) | DAT1))
                }

                Return (0xFFFFFFFF)
            }

            Method (SBLW, 4, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg3
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Index (Arg2, Zero))
                HCON = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    HSTS = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        HBDR = DerefOf (Index (Arg2, Local1))
                    }
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SBLR, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100) {})
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg2
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x54
                Local0 = 0x0FA0
                While ((!(HSTS & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    KILL ()
                    Return (Zero)
                }

                Index (TBUF, Zero) = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                HSTS = 0x80
                Local1 = One
                While ((Local1 < DerefOf (Index (TBUF, Zero))))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    Index (TBUF, Local1) = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                    HSTS = 0x80
                    Local1++
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                }

                Return (Zero)
            }

            Method (STRT, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Local0--
                        Sleep (One)
                        If ((Local0 == Zero))
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (COMP, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (KILL, 0, Serialized)
            {
                HCON |= 0x02
                HSTS |= 0xFF
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        OperationRegion (CPSB, SystemMemory, 0xC9443E18, 0x10)
        Field (CPSB, AnyAcc, NoLock, Preserve)
        {
            RTCX,   1, 
            SBB0,   7, 
            SBB1,   8, 
            SBB2,   8, 
            SBB3,   8, 
            SBB4,   8, 
            SBB5,   8, 
            SBB6,   8, 
            SBB7,   8, 
            SBB8,   8, 
            SBB9,   8, 
            SBBA,   8, 
            SBBB,   8, 
            SBBC,   8, 
            SBBD,   8, 
            SBBE,   8, 
            SBBF,   8
        }

        Method (SPTS, 1, NotSerialized)
        {
            SLPX = One
            SLPE = One
        }

        Method (SWAK, 1, NotSerialized)
        {
            SLPE = Zero
        }

        OperationRegion (SMIE, SystemIO, PMBS, 0x04)
        Field (SMIE, ByteAcc, NoLock, Preserve)
        {
                ,   10, 
            RTCS,   1, 
                ,   3, 
            PEXS,   1, 
            WAKS,   1, 
            Offset (0x03), 
            PWBT,   1, 
            Offset (0x04)
        }

        OperationRegion (SLPR, SystemIO, SMCR, 0x08)
        Field (SLPR, ByteAcc, NoLock, Preserve)
        {
                ,   4, 
            SLPE,   1, 
                ,   31, 
            SLPX,   1, 
            Offset (0x08)
        }
    }

    Scope (_SB.PCI0)
    {
        Name (PA0H, Zero)
        Name (PA1H, Zero)
        Name (PA2H, Zero)
        Name (PA3H, Zero)
        Name (PA4H, Zero)
        Name (PA5H, Zero)
        Name (PA6H, Zero)
        Method (NPTS, 1, NotSerialized)
        {
            PA0H = PM0H /* \_SB_.PCI0.PM0H */
            PA1H = PM1H /* \_SB_.PCI0.PM1H */
            PA2H = PM2H /* \_SB_.PCI0.PM2H */
            PA3H = PM3H /* \_SB_.PCI0.PM3H */
            PA4H = PM4H /* \_SB_.PCI0.PM4H */
            PA5H = PM5H /* \_SB_.PCI0.PM5H */
            PA6H = PM6H /* \_SB_.PCI0.PM6H */
        }

        Method (NWAK, 1, NotSerialized)
        {
            PM0H = PA0H /* \_SB_.PCI0.PA0H */
            PM1H = PA1H /* \_SB_.PCI0.PA1H */
            PM2H = PA2H /* \_SB_.PCI0.PA2H */
            PM3H = PA3H /* \_SB_.PCI0.PA3H */
            PM4H = PA4H /* \_SB_.PCI0.PA4H */
            PM5H = PA5H /* \_SB_.PCI0.PA5H */
            PM6H = PA6H /* \_SB_.PCI0.PA6H */
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x01, 0x00001810, 0x06) {}
        Processor (CPU1, 0x02, 0x00001810, 0x06) {}
        Processor (CPU2, 0x03, 0x00001810, 0x06) {}
        Processor (CPU3, 0x04, 0x00001810, 0x06) {}
        Processor (CPU4, 0x05, 0x00001810, 0x06) {}
        Processor (CPU5, 0x06, 0x00001810, 0x06) {}
        Processor (CPU6, 0x07, 0x00001810, 0x06) {}
        Processor (CPU7, 0x08, 0x00001810, 0x06) {}
    }

    Mutex (MUTX, 0x00)
    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    Method (ADBG, 1, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            Return (MDBG) /* External reference */
            Arg0
        }

        Return (Zero)
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80D = Zero
        P8XH (Zero, Arg0)
        PTS (Arg0)
        If ((ICNF & 0x10))
        {
            If (CondRefOf (\_SB.IAOE.PTSL))
            {
                \_SB.IAOE.PTSL = Arg0
            }
        }

        If ((Arg0 == 0x03))
        {
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x1E)
            }
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        If ((((Arg0 == 0x03) || (Arg0 == 0x04)) || (Arg0 == 0x05)))
        {
            If ((PFLV == FDTP))
            {
                GP27 = One
            }
        }
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        P8XH (One, 0xAB)
        WAK (Arg0)
        ADBG ("_WAK")
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((GBSX & 0x40))
            {
                \_SB.PCI0.GFX0.IUEH (0x06)
            }

            If ((GBSX & 0x80))
            {
                \_SB.PCI0.GFX0.IUEH (0x07)
            }

            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x14)
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.XHC.XWAK ()
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }

            If ((PDC4 & 0x08))
            {
                Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                If ((PDC4 & 0x10))
                {
                    Notify (\_PR.CPU4, 0x81) // C-State Change
                }
            }

            If ((PDC5 & 0x08))
            {
                Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                If ((PDC5 & 0x10))
                {
                    Notify (\_PR.CPU5, 0x81) // C-State Change
                }
            }

            If ((PDC6 & 0x08))
            {
                Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                If ((PDC6 & 0x10))
                {
                    Notify (\_PR.CPU6, 0x81) // C-State Change
                }
            }

            If ((PDC7 & 0x08))
            {
                Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                If ((PDC7 & 0x10))
                {
                    Notify (\_PR.CPU7, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }

        If ((DPTF == One))
        {
            Notify (\_SB.IETM, 0x86) // Device-Specific
        }
    }

    OperationRegion (MBAR, SystemMemory, ((\_SB.PCI0.MHBR << 0x0F) + 0x5000), 0x1000)
    Field (MBAR, ByteAcc, NoLock, Preserve)
    {
        Offset (0x938), 
        PWRU,   4, 
        Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If ((CSEM == One))
        {
            Return (Zero)
        }

        CSEM = One
        PLSV = PPL1 /* \PPL1 */
        PLEN = PL1E /* \PL1E */
        CLMP = CLP1 /* \CLP1 */
        If ((PWRU == Zero))
        {
            PPUU = One
        }
        Else
        {
            PPUU = (PWRU-- << 0x02)
        }

        Local0 = (PLVL * PPUU) /* \SPL1.PPUU */
        Local1 = (Local0 / 0x03E8)
        PPL1 = Local1
        PL1E = One
        CLP1 = One
    }

    Method (RPL1, 0, Serialized)
    {
        PPL1 = PLSV /* \PLSV */
        PL1E = PLEN /* \PLEN */
        CLP1 = CLMP /* \CLMP */
        CSEM = Zero
    }

    Name (DDPS, Zero)
    Name (UAMS, Zero)
    Method (GUAM, 1, Serialized)
    {
        If ((Arg0 != DDPS))
        {
            DDPS = Arg0
            UAMS = (Arg0 && ~PWRS)
            If (Arg0)
            {
                If ((ECNO == One)) {}
                P8XH (Zero, 0xC5)
                P8XH (One, Zero)
                If (PSCP)
                {
                    If ((CondRefOf (\_PR.CPU0._PSS) && CondRefOf (\_PR.CPU0._PPC)))
                    {
                        \_PR.CPU0.MPPC = (SizeOf (\_PR.CPU0._PSS) - One)
                        PNOT ()
                    }
                }

                If (PLCS)
                {
                    SPL1 ()
                }
            }
            Else
            {
                If ((ECNO == One)) {}
                P8XH (Zero, 0xC5)
                P8XH (One, 0xAB)
                ADBG ("Exit CS")
                If (PSCP)
                {
                    If (CondRefOf (\_PR.CPU0._PPC))
                    {
                        \_PR.CPU0.MPPC = Zero
                        PNOT ()
                    }
                }

                If (PLCS)
                {
                    RPL1 ()
                }
            }

            P_CS ()
        }
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.PAUD.PUAM))
        {
            \_SB.PCI0.PAUD.PUAM ()
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == TRTD))
        {
            DTSF = Arg1
            TRPD = Zero
            Return (DTSF) /* \DTSF */
        }

        If ((Arg0 == TRTI))
        {
            TRPH = Zero
        }

        If ((Arg0 == PFTI))
        {
            TRPF = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB)
    {
        Device (BIND)
        {
            Name (_HID, "INT33D2" /* Intel GPIO Buttons */)  // _HID: Hardware ID
            Name (_CID, "PNP0C40" /* Standard Button Controller */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((IUBE & One) && (OSYS == 0x07DC)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Device (CIND)
        {
            Name (_HID, "INT33D3" /* Intel GPIO Buttons */)  // _HID: Hardware ID
            Name (_CID, "PNP0C60" /* Display Sensor Device */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((IUCE & One) && (OSYS == 0x07DC)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Device (DIND)
        {
            Name (_HID, "INT33D4" /* Intel GPIO Buttons */)  // _HID: Hardware ID
            Name (_CID, "PNP0C70" /* Dock Sensor Device */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((IUDE & One) && (OSYS == 0x07DC)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (PFMA) /* \PFMA */
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (PFMS) /* \PFMS */
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (PFIA) /* \PFIA */
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSYS = 0x07D0
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                }

                If (_OSI ("Windows 2013"))
                {
                    OSYS = 0x07DD
                }
            }

            PINI ()
        }

        Method (NHPG, 0, Serialized)
        {
            ^RP01.HPEX = Zero
            ^RP03.HPEX = Zero
            ^RP04.HPEX = Zero
            ^RP01.HPSX = One
            ^RP03.HPSX = One
            ^RP04.HPSX = One
        }

        Method (NPME, 0, Serialized)
        {
            ^RP01.PMEX = Zero
            ^RP03.PMEX = Zero
            ^RP04.PMEX = Zero
            ^RP01.PMSX = One
            ^RP03.PMSX = One
            ^RP04.PMSX = One
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            Index (PRWP, Zero) = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                Index (PRWP, One) = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, Index (PRWP, One))
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            If ((OSCM (Arg0, Arg1, Arg2, Arg3) != Zero))
            {
                Return (Arg3)
            }

            Return (Arg3)
        }

        Device (PEPD)
        {
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (PEPP, Zero)
            Name (DEVS, Package (0x03)
            {
                0x02, 
                Package (0x01)
                {
                    "\\_SB.PCI0.GFX0"
                }, 

                Package (0x01)
                {
                    "\\_SB.PCI0.SAT0.PRT1"
                }
            })
            Name (DEVX, Package (0x08)
            {
                Package (0x02)
                {
                    "\\_SB.PCI0.GFX0", 
                    0xFFFFFFFF
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT1", 
                    0xFFFFFFFF
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.UA01", 
                    0xFFFFFFFF
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SDHC", 
                    0xFFFFFFFF
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.I2C0", 
                    0xFFFFFFFF
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.I2C1", 
                    0xFFFFFFFF
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.XHC", 
                    0xFFFFFFFF
                }, 

                Package (0x02)
                {
                    "HDAUDIOFUNC_01&VEN_10EC&DEV_0282&SUBSYS_00000000&REV_1000\x04&a02b74b&0&0001", 
                    0xFFFFFFFF
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS >= 0x07DC))
                {
                    If (((CDID & 0xF000) == 0x9000))
                    {
                        If ((S0ID == One))
                        {
                            Return (0x0F)
                        }
                    }
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                If ((Arg0 == ToUUID ("b8febfe0-baf8-454b-aecd-49fb91137b21")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x07                                             /* . */
                        })
                    }

                    If ((Arg2 == One))
                    {
                        PEPP = One
                        Return (0x0F)
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((Arg1 == Zero))
                        {
                            While (One)
                            {
                                _T_0 = PEPY /* \PEPY */
                                If ((_T_0 == One))
                                {
                                    Return (Package (0x02)
                                    {
                                        One, 
                                        Package (0x01)
                                        {
                                            "\\_SB.PCI0.GFX0"
                                        }
                                    })
                                }
                                Else
                                {
                                    If ((_T_0 == 0x02))
                                    {
                                        Return (Package (0x02)
                                        {
                                            One, 
                                            Package (0x01)
                                            {
                                                "\\_SB.PCI0.SAT0.PRT1"
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x03))
                                        {
                                            Return (DEVS) /* \_SB_.PEPD.DEVS */
                                        }
                                        Else
                                        {
                                            Return (Package (0x01)
                                            {
                                                Zero
                                            })
                                        }
                                    }
                                }

                                Break
                            }
                        }

                        If ((Arg1 == One))
                        {
                            If (!(PEPY & One))
                            {
                                Index (DerefOf (Index (DEVX, Zero)), One) = Zero
                            }

                            If (!(PEPY & 0x02))
                            {
                                Index (DerefOf (Index (DEVX, One)), One) = Zero
                            }

                            If (!(PEPY & 0x04))
                            {
                                Index (DerefOf (Index (DEVX, 0x02)), One) = Zero
                            }

                            If (!(PEPY & 0x08))
                            {
                                Index (DerefOf (Index (DEVX, 0x03)), One) = Zero
                            }

                            If (!(PEPY & 0x10))
                            {
                                Index (DerefOf (Index (DEVX, 0x04)), One) = Zero
                            }

                            If (!(PEPY & 0x20))
                            {
                                Index (DerefOf (Index (DEVX, 0x05)), One) = Zero
                            }

                            If (!(PEPY & 0x40))
                            {
                                Index (DerefOf (Index (DEVX, 0x06)), One) = Zero
                            }

                            If (!(PEPY & 0x80))
                            {
                                Index (DerefOf (Index (DEVX, 0x07)), One) = Zero
                            }

                            Return (DEVX) /* \_SB_.PEPD.DEVX */
                        }
                    }
                }

                Return (One)
            }
        }
    }

    Scope (_SB)
    {
        Device (BTKL)
        {
            Name (_HID, "INT3420" /* Intel Bluetooth RF Kill */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Windows 2012"))
                {
                    If ((BID == BW2C))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                GL0A &= 0x7F
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                GL0A |= 0x80
            }

            Method (PSTS, 0, NotSerialized)
            {
                Return (RDGP (0x57))
            }
        }
    }

    Name (SRMB, 0xF7FF0000)
    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y1B)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y1E)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1F)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y20)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y21)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1C)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1D)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1B._BAS, RBR0)  // _BAS: Base Address
                RBR0 = (^^LPCB.RCBA << 0x0E)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1C._BAS, TBR0)  // _BAS: Base Address
                TBR0 = TBAB /* \TBAB */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1C._LEN, TBLN)  // _LEN: Length
                If ((TBAB == Zero))
                {
                    TBLN = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1D._BAS, SNR0)  // _BAS: Base Address
                SNR0 = SRMB /* \SRMB */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1E._BAS, MBR0)  // _BAS: Base Address
                MBR0 = (MHBR << 0x0F)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1F._BAS, DBR0)  // _BAS: Base Address
                DBR0 = (DIBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y20._BAS, EBR0)  // _BAS: Base Address
                EBR0 = (EPBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y21._BAS, XBR0)  // _BAS: Base Address
                XBR0 = (PXBR << 0x1A)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y21._LEN, XSZ0)  // _LEN: Length
                XSZ0 = (0x10000000 >> PXSZ) /* \_SB_.PCI0.PXSZ */
                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If ((\_SB.PCI0.RP01.VDID != 0xFFFFFFFF))
            {
                \_SB.PCI0.RP01.HPME ()
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP03.VDID != 0xFFFFFFFF))
            {
                \_SB.PCI0.RP03.HPME ()
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP04.VDID != 0xFFFFFFFF))
            {
                \_SB.PCI0.RP04.HPME ()
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.D1F0 == One))
            {
                \_SB.PCI0.PEG0.HPME ()
                Notify (\_SB.PCI0.PEG0, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEG0.PEGP, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.D1F1 == One))
            {
                \_SB.PCI0.PEG1.HPME ()
                Notify (\_SB.PCI0.PEG1, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.D1F2 == One))
            {
                \_SB.PCI0.PEG2.HPME ()
                Notify (\_SB.PCI0.PEG2, 0x02) // Device Wake
            }
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If ((\_SB.PCI0.EHC1.PMEE && \_SB.PCI0.EHC1.PMES))
            {
                Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.EHC0.PMEE && \_SB.PCI0.EHC0.PMES))
            {
                Notify (\_SB.PCI0.EHC0, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.XHC.PMEE && \_SB.PCI0.XHC.PMES))
            {
                Notify (\_SB.PCI0.XHC, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.HDEF.PMEE && \_SB.PCI0.HDEF.PMES))
            {
                Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
            }
        }

        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            L01C += One
            P8XH (Zero, One)
            P8XH (One, L01C)
            If (((RP1D == Zero) && \_SB.PCI0.RP01.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP01.PDCX)
                {
                    \_SB.PCI0.RP01.PDCX = One
                    \_SB.PCI0.RP01.HPSX = One
                    If (!\_SB.PCI0.RP01.PDSX)
                    {
                        \_SB.PCI0.RP01.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP01.HPSX = One
                }
            }

            If (((RP3D == Zero) && \_SB.PCI0.RP03.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP03.PDCX)
                {
                    \_SB.PCI0.RP03.PDCX = One
                    \_SB.PCI0.RP03.HPSX = One
                    If (!\_SB.PCI0.RP03.PDSX)
                    {
                        \_SB.PCI0.RP03.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP03.HPSX = One
                }
            }

            If (((RP4D == Zero) && \_SB.PCI0.RP04.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP04.PDCX)
                {
                    \_SB.PCI0.RP04.PDCX = One
                    \_SB.PCI0.RP04.HPSX = One
                    If (!\_SB.PCI0.RP04.PDSX)
                    {
                        \_SB.PCI0.RP04.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP04.HPSX = One
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            GPEC = Zero
            If (CondRefOf (DTSE))
            {
                If ((DTSE >= One))
                {
                    Notify (\_TZ.THRM, 0x80) // Thermal Status Change
                }
            }

            If (CondRefOf (\_SB.PCCD.PENB))
            {
                If ((\_SB.PCCD.PENB == One))
                {
                    Notify (\_SB.PCCD, 0x80) // Status Change
                }
            }
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }
    }

    Device (WCAM)
    {
        Name (_ADR, 0x05)  // _ADR: Address
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                Zero, 
                0xFF, 
                Zero, 
                Zero
            })
            Return (UPCP) /* \WCAM._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Package (0x01)
            {
                Buffer (0x14)
                {
                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                    /* 0008 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* $....... */
                    /* 0010 */  0xC8, 0x00, 0xA0, 0x00                           /* .... */
                }
            })
            Return (PLDP) /* \WCAM._PLD.PLDP */
        }
    }

    Name (TPMF, Zero)
    Scope (\)
    {
        Device (WMI0)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
        }
    }

    Scope (\)
    {
        Method (DIAG, 1, NotSerialized)
        {
            P8XH (Zero, Arg0)
            SBYT (Zero, Arg0)
        }

        OperationRegion (GPSC, SystemIO, 0xB2, 0x02)
        Field (GPSC, ByteAcc, NoLock, Preserve)
        {
            SMCM,   8, 
            SMST,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SMCM = Arg0
        }

        Method (ASMI, 1, Serialized)
        {
            \_SB.ALPR = Arg0
            SMCM = 0xA3
            Return (\_SB.ALPR)
        }

        Scope (_SB)
        {
            OperationRegion (\ECMS, SystemIO, 0x72, 0x02)
            Field (ECMS, ByteAcc, Lock, Preserve)
            {
                EIND,   8, 
                EDAT,   8
            }

            IndexField (EIND, EDAT, ByteAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                DASF,   8, 
                IKFG,   8, 
                Offset (0x43), 
                RAMB,   32, 
                AVOL,   8, 
                LBTN,   8, 
                LBT2,   8, 
                SLPN,   8, 
                ALSL,   8, 
                ALAE,   1, 
                ALDE,   1, 
                ALSP,   1, 
                SYNA,   1, 
                ALPS,   1, 
                SIDE,   1, 
                PWBS,   1, 
                WFFG,   1, 
                WLDP,   1, 
                WRST,   1, 
                BTDP,   1, 
                BRST,   1, 
                WWDP,   1, 
                WWST,   1, 
                WRPS,   1, 
                BRPS,   1, 
                WMDP,   1, 
                WMST,   1, 
                Offset (0x4F), 
                UHDB,   8, 
                FBDP,   8, 
                SWD2,   1, 
                F9KP,   1, 
                LSDF,   1, 
                MANF,   1, 
                RRSF,   1, 
                CMDP,   1, 
                CMST,   1, 
                F9RK,   1, 
                USBD,   16, 
                FDAY,   8, 
                FMON,   8, 
                FYER,   8, 
                FPRC,   8, 
                Offset (0x59), 
                TCGF,   8, 
                Offset (0x5B), 
                Offset (0x5C), 
                CTPF,   4, 
                AG3F,   1, 
                Offset (0x5D), 
                WFOK,   8, 
                SFFG,   8, 
                SFAD,   32, 
                UWDP,   1, 
                GPDP,   1, 
                TGDP,   1, 
                UWST,   1, 
                GPST,   1, 
                TGST,   1, 
                Offset (0x64), 
                DS3F,   1, 
                Offset (0x65), 
                DS3A,   8, 
                HEM1,   32, 
                HEM2,   32
            }

            OperationRegion (RAMW, SystemMemory, RAMB, 0x0FF0)
            Field (RAMW, AnyAcc, NoLock, Preserve)
            {
                TRTY,   8, 
                FSFN,   8, 
                FSTA,   16, 
                FADR,   32, 
                FSIZ,   16, 
                GNBF,   32, 
                BIPA,   32, 
                RTCW,   16, 
                DBR1,   32, 
                DBR2,   32, 
                DBR3,   32, 
                DBR4,   32, 
                ACTD,   8, 
                AVLD,   8, 
                SETD,   8, 
                PADL,   16, 
                CADL,   16, 
                CSTE,   16, 
                NSTE,   16, 
                SSTE,   16, 
                SFUN,   8, 
                VGAF,   16, 
                LCDV,   32, 
                LCDR,   8, 
                VBIF,   16, 
                GCDF,   16, 
                AB00,   8, 
                AB01,   8, 
                AB02,   8, 
                AB03,   8, 
                AB04,   8, 
                AB05,   8, 
                AB06,   8, 
                AB07,   8, 
                AB08,   8, 
                AB09,   8, 
                AB0A,   8, 
                AB0B,   8, 
                AB0C,   8, 
                AB0D,   8, 
                AB0E,   8, 
                AB0F,   8, 
                AB10,   8, 
                AB11,   8, 
                AB12,   8, 
                AB13,   8, 
                AB14,   8, 
                AB15,   8, 
                AB16,   8, 
                AB17,   8, 
                AB18,   8, 
                AB19,   8, 
                AB1A,   8, 
                AB1B,   8, 
                AB1C,   8, 
                AB1D,   8, 
                AB1E,   8, 
                AB1F,   8, 
                DB00,   8, 
                DB01,   8, 
                DB02,   8, 
                DB03,   8, 
                DB04,   8, 
                DB05,   8, 
                DB06,   8, 
                DB07,   8, 
                DB08,   8, 
                DB09,   8, 
                DB0A,   8, 
                DB0B,   8, 
                DB0C,   8, 
                DB0D,   8, 
                DB0E,   8, 
                DB0F,   8, 
                DB10,   8, 
                DB11,   8, 
                DB12,   8, 
                DB13,   8, 
                DB14,   8, 
                DB15,   8, 
                DB16,   8, 
                DB17,   8, 
                DB18,   8, 
                DB19,   8, 
                DB1A,   8, 
                DB1B,   8, 
                DB1C,   8, 
                DB1D,   8, 
                DB1E,   8, 
                DB1F,   8, 
                ACPF,   8, 
                DCPF,   8, 
                DCP2,   8, 
                DCTP,   8, 
                TPSV,   8, 
                TAC0,   8, 
                TCRT,   8, 
                PPSV,   8, 
                LUXS,   8, 
                LUXL,   8, 
                LUXH,   8, 
                LUXF,   8, 
                PTIM,   8, 
                PTMP,   8, 
                QFAN,   8, 
                CPUN,   8, 
                CIST,   8, 
                CPUP,   16, 
                SLMT,   16, 
                PSTN,   16, 
                TJMX,   16, 
                SLPT,   8, 
                ALPR,   32, 
                IDES,   8, 
                HDDF,   8, 
                MNAM,   64, 
                OSVR,   32, 
                SGRQ,   32, 
                SGFN,   8, 
                SGMD,   8, 
                B0DP,   8, 
                B1DP,   8, 
                P2KS,   8, 
                P2MS,   8, 
                NRSN,   8, 
                EECP,   32, 
                P0UB,   8, 
                P1UB,   8, 
                P2UB,   8, 
                P3UB,   8, 
                PCSL,   8, 
                SC7A,   8, 
                NFCE,   8, 
                WMIB,   32, 
                WMIS,   8, 
                LDST,   8, 
                NVOB,   32, 
                NPXB,   32, 
                GC6E,   8, 
                AICD,   32, 
                AIST,   8, 
                BAML,   8, 
                AMLA,   32, 
                KBDF,   8, 
                MEMS,   8, 
                TBOT,   16, 
                TRTC,   32, 
                EXPC,   64, 
                MCFD,   8
            }
        }

        Name (OSFG, Zero)
        Name (OS9X, One)
        Name (OS98, 0x02)
        Name (OSME, 0x04)
        Name (OS2K, 0x08)
        Name (OSLX, 0x09)
        Name (OSXP, 0x10)
        Name (OSVT, 0x20)
        Name (OSW7, 0x40)
        Name (OSW8, 0x80)
        Name (OSWB, 0x0100)
        Method (MCTH, 2, NotSerialized)
        {
            If ((SizeOf (Arg0) < SizeOf (Arg1)))
            {
                Return (Zero)
            }

            Local0 = (SizeOf (Arg0) + One)
            Name (BUF0, Buffer (Local0) {})
            Name (BUF1, Buffer (Local0) {})
            BUF0 = Arg0
            BUF1 = Arg1
            While (Local0)
            {
                Local0--
                If ((DerefOf (Index (BUF0, Local0)) != DerefOf (Index (BUF1, Local0
                    ))))
                {
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (MSOS, 0, NotSerialized)
        {
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Windows 2001"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2006"))
                {
                    OSFG = OSVT /* \OSVT */
                }

                If (_OSI ("Windows 2009"))
                {
                    OSFG = OSW7 /* \OSW7 */
                }

                If (_OSI ("Windows 2012"))
                {
                    OSFG = OSW8 /* \OSW8 */
                }

                If (_OSI ("Windows 2013"))
                {
                    OSFG = OSWB /* \OSWB */
                }

                \_SB.OSVR = OSFG /* \OSFG */
                Return (OSFG) /* \OSFG */
            }
            Else
            {
                If (MCTH (_OS, "Microsoft Windows"))
                {
                    OSFG = OS98 /* \OS98 */
                }
                Else
                {
                    If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
                    {
                        OSFG = OSME /* \OSME */
                    }
                    Else
                    {
                        If (MCTH (_OS, "Microsoft Windows NT"))
                        {
                            OSFG = OS2K /* \OS2K */
                        }
                        Else
                        {
                            OSFG = OSXP /* \OSXP */
                        }
                    }
                }
            }

            Return (OSFG) /* \OSFG */
        }

        Method (DBGR, 4, NotSerialized)
        {
            \_SB.DBR1 = Arg0
            \_SB.DBR2 = Arg1
            \_SB.DBR3 = Arg2
            \_SB.DBR4 = Arg3
            ASMI (0x80)
        }

        Name (ONAM, "ASUS")
        Method (ADVG, 0, NotSerialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                Return (\_SB.PCI0.GFX0.ADVD ())
            }

            Return (0x03)
        }

        Method (SWHG, 1, Serialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                \_SB.PCI0.GFX0.SWHD (Arg0)
                Return (One)
            }

            Return (Zero)
        }

        Method (NATK, 0, NotSerialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                Return (\_SB.PCI0.GFX0.NATK ())
            }

            Return (One)
        }
    }

    Scope (_SB.PCI0)
    {
        Method (PINI, 0, NotSerialized)
        {
            MSOS ()
        }
    }

    Scope (_SB)
    {
        Name (ATKP, Zero)
        Name (AITM, Zero)
        Name (PLMD, Zero)
        Name (MUTX, One)
        Name (LEDS, Zero)
        Name (LIDP, Zero)
        Device (ATKD)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ATK")  // _UID: Unique ID
            Name (ATKQ, Package (0x10)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (AQHI, Zero)
            Name (AQTI, 0x0F)
            Name (AQNO, Zero)
            Name (WAPF, Zero)
            Name (PCDV, Zero)
            Method (IANQ, 1, Serialized)
            {
                If ((AQNO >= 0x10))
                {
                    Local0 = 0x64
                    While ((Local0 && (AQNO >= 0x10)))
                    {
                        Local0--
                        Sleep (0x0A)
                    }

                    If ((Local0 && (AQNO >= 0x10)))
                    {
                        Return (Zero)
                    }
                }

                AQTI++
                AQTI &= 0x0F
                Index (ATKQ, AQTI) = Arg0
                AQNO++
                Return (One)
            }

            Method (GANQ, 0, Serialized)
            {
                If (AQNO)
                {
                    AQNO--
                    Local0 = DerefOf (Index (ATKQ, AQHI))
                    AQHI++
                    AQHI &= 0x0F
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (IANE, 1, Serialized)
            {
                IANQ (Arg0)
                Notify (ATKD, 0xFF) // Hardware-Specific
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  /* .^..mN.. */
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  /* .9.. ..f */
                /* 0010 */  0x4E, 0x42, 0x01, 0x02, 0x35, 0xBB, 0x3C, 0x0B,  /* NB..5.<. */
                /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  /* ...E..LZ */
                /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08   /* m.]..... */
            })
            Method (HKEY, 0, NotSerialized)
            {
                Local0 = ^^PCI0.LPCB.HEC.CDTD /* \_SB_.PCI0.LPCB.HEC_.CDTD */
            }

            Method (KBFT, 1, NotSerialized)
            {
                ^^PCI0.LPCB.HEC.HKEN = Arg0
                If ((OSFG >= OSW8))
                {
                    ^^PCI0.LPCB.HEC.WRAM (0x0C0C, 0x80)
                }

                Return (Zero)
            }

            Method (NTFY, 1, Serialized)
            {
                IANE (Arg0)
            }

            Method (AICH, 0, NotSerialized)
            {
                Local0 = (AIST | 0x04)
                Return (Local0)
            }

            Method (AICG, 1, Serialized)
            {
                AICD = Arg0
                ISMI (0xE7)
                Return (Zero)
            }

            Method (WMNB, 3, Serialized)
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                CreateDWordField (Arg2, Zero, IIA0)
                Local0 = (Arg1 & 0xFFFFFFFF)
                While (One)
                {
                    _T_0 = Local0
                    If ((_T_0 == 0x54494E49))
                    {
                        INIT (IIA0)
                        Return (One)
                    }
                    Else
                    {
                        If ((_T_0 == 0x53545342))
                        {
                            Return (BSTS ())
                        }
                        Else
                        {
                            If ((_T_0 == 0x4E554653))
                            {
                                Return (SFUN ())
                            }
                            Else
                            {
                                If ((_T_0 == 0x474F4457))
                                {
                                    Return (WDOG (IIA0))
                                }
                                Else
                                {
                                    If ((_T_0 == 0x494E424B))
                                    {
                                        Return (KBNI ())
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x43455053))
                                        {
                                            Return (0x00070007)
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x5256534F))
                                            {
                                                OSVR (IIA0)
                                                Return (Zero)
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x48534C46))
                                                {
                                                    FLSH (IIA0)
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x494E4946))
                                                    {
                                                        Return (FINI (IIA0))
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x53524546))
                                                        {
                                                            Return (FERS (IIA0))
                                                        }
                                                        Else
                                                        {
                                                            If ((_T_0 == 0x49525746))
                                                            {
                                                                Return (FWRI (IIA0))
                                                            }
                                                            Else
                                                            {
                                                                If ((_T_0 == 0x50525746))
                                                                {
                                                                    Return (FWRP ())
                                                                }
                                                                Else
                                                                {
                                                                    If ((_T_0 == 0x52534345))
                                                                    {
                                                                        Return (ECSR (IIA0))
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((_T_0 == 0x43534C46))
                                                                        {
                                                                            Return (FLSC (IIA0))
                                                                        }
                                                                        Else
                                                                        {
                                                                            If ((_T_0 == 0x57504346))
                                                                            {
                                                                                Return (FCPW (IIA0))
                                                                            }
                                                                            Else
                                                                            {
                                                                                If ((_T_0 == 0x50504346))
                                                                                {
                                                                                    Return (FCPP ())
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If ((_T_0 == 0x4C425053))
                                                                                    {
                                                                                        Return (SPBL (IIA0))
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If ((_T_0 == 0x50534453))
                                                                                        {
                                                                                            SDSP (IIA0)
                                                                                            Return (One)
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If ((_T_0 == 0x50534447))
                                                                                            {
                                                                                                Return (GDSP (IIA0))
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                If ((_T_0 == 0x44495047))
                                                                                                {
                                                                                                    Return (GPID ())
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    If ((_T_0 == 0x44434C47))
                                                                                                    {
                                                                                                        Return (GLCD ())
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        If ((_T_0 == 0x444F4D51))
                                                                                                        {
                                                                                                            Return (QMOD (IIA0))
                                                                                                        }
                                                                                                        Else
                                                                                                        {
                                                                                                            If ((_T_0 == 0x44424653))
                                                                                                            {
                                                                                                                Return (Zero)
                                                                                                            }
                                                                                                            Else
                                                                                                            {
                                                                                                                If ((_T_0 == 0x49564E41))
                                                                                                                {
                                                                                                                    Return (ANVI (IIA0))
                                                                                                                }
                                                                                                                Else
                                                                                                                {
                                                                                                                    If ((_T_0 == 0x46494243))
                                                                                                                    {
                                                                                                                        Return (CBIF (IIA0))
                                                                                                                    }
                                                                                                                    Else
                                                                                                                    {
                                                                                                                        If ((_T_0 == 0x5453424B))
                                                                                                                        {
                                                                                                                            Return (Zero)
                                                                                                                        }
                                                                                                                        Else
                                                                                                                        {
                                                                                                                            If ((_T_0 == 0x4E554647))
                                                                                                                            {
                                                                                                                                Return (AGFN (IIA0))
                                                                                                                            }
                                                                                                                            Else
                                                                                                                            {
                                                                                                                                If ((_T_0 == 0x4E464741))
                                                                                                                                {
                                                                                                                                    Return (AGFN (IIA0))
                                                                                                                                }
                                                                                                                                Else
                                                                                                                                {
                                                                                                                                    If ((_T_0 == 0x53545344))
                                                                                                                                    {
                                                                                                                                        If ((IIA0 == 0x00010002))
                                                                                                                                        {
                                                                                                                                            Return (Zero)
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00020011))
                                                                                                                                        {
                                                                                                                                            Return ((GALE (One) | 0x00050000))
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00020012))
                                                                                                                                        {
                                                                                                                                            Return ((GALE (0x02) | 0x00050000))
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00020013))
                                                                                                                                        {
                                                                                                                                            Return ((GALE (0x04) | 0x00050000))
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00040015))
                                                                                                                                        {
                                                                                                                                            Return ((GALE (0x08) | 0x00050000))
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00020014))
                                                                                                                                        {
                                                                                                                                            Return ((GALE (0x10) | 0x00050000))
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00020015))
                                                                                                                                        {
                                                                                                                                            Return ((GALE (0x20) | 0x00050000))
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00020016))
                                                                                                                                        {
                                                                                                                                            Return ((GALE (0x40) | 0x00050000))
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00110011))
                                                                                                                                        {
                                                                                                                                            Return ((TMPR () & 0xFFFF))
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00110012))
                                                                                                                                        {
                                                                                                                                            Local0 = TMPR ()
                                                                                                                                            Local1 = Local0
                                                                                                                                            Local0 = ((Local0 & 0xF0000000) >> 0x1C)
                                                                                                                                            Local1 = ((Local1 & 0x0F000000) >> 0x18)
                                                                                                                                            Local1 <<= 0x08
                                                                                                                                            Return ((Local0 + Local1))
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00050012))
                                                                                                                                        {
                                                                                                                                            Local0 = 0x0A
                                                                                                                                            Local0 <<= 0x08
                                                                                                                                            Local1 = (GPLV () + Local0)
                                                                                                                                            Return (Local1)
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00010011))
                                                                                                                                        {
                                                                                                                                            If (WLDP)
                                                                                                                                            {
                                                                                                                                                Return ((WRST + 0x00030000))
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00010013))
                                                                                                                                        {
                                                                                                                                            If (BTDP)
                                                                                                                                            {
                                                                                                                                                Return ((BRST + 0x00050000))
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00010021))
                                                                                                                                        {
                                                                                                                                            If (UWDP)
                                                                                                                                            {
                                                                                                                                                Return ((UWST + 0x00050000))
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00010017))
                                                                                                                                        {
                                                                                                                                            If (WMDP)
                                                                                                                                            {
                                                                                                                                                Return ((WMST + 0x00050000))
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00010015))
                                                                                                                                        {
                                                                                                                                            If (GPDP)
                                                                                                                                            {
                                                                                                                                                Return ((^^GPST + 0x00050000))
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00010019))
                                                                                                                                        {
                                                                                                                                            If (TGDP)
                                                                                                                                            {
                                                                                                                                                Return ((TGST + 0x00050000))
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120012))
                                                                                                                                        {
                                                                                                                                            Return (PSTC (Zero))
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00130001)) {}
                                                                                                                                        If ((IIA0 == 0x00050021))
                                                                                                                                        {
                                                                                                                                            Return (0x8000)
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00060023))
                                                                                                                                        {
                                                                                                                                            Return (AICH ())
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00060024))
                                                                                                                                        {
                                                                                                                                            Name (BBUF, Buffer (0x0C) {})
                                                                                                                                            CreateDWordField (BBUF, Zero, DAT1)
                                                                                                                                            CreateDWordField (BBUF, 0x04, DAT2)
                                                                                                                                            CreateDWordField (BBUF, 0x08, DAT3)
                                                                                                                                            DAT1 = 0x8C318086
                                                                                                                                            DAT2 = One
                                                                                                                                            DAT3 = 0xFFFFFFFF
                                                                                                                                            Return (BBUF) /* \_SB_.ATKD.WMNB.BBUF */
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00060025))
                                                                                                                                        {
                                                                                                                                            Name (INFO, Buffer (0x08) {})
                                                                                                                                            CreateDWordField (INFO, Zero, INF1)
                                                                                                                                            CreateDWordField (INFO, 0x04, INF2)
                                                                                                                                            INF1 = 0x1400
                                                                                                                                            INF2 = 0xFFFFFFFF
                                                                                                                                            Return (INFO) /* \_SB_.ATKD.WMNB.INFO */
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120031))
                                                                                                                                        {
                                                                                                                                            Return (GDS3 (Arg0))
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120037))
                                                                                                                                        {
                                                                                                                                            Return (0x00010000)
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120038))
                                                                                                                                        {
                                                                                                                                            Return (0x00010000)
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120041))
                                                                                                                                        {
                                                                                                                                            Return (NS3P ())
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120042))
                                                                                                                                        {
                                                                                                                                            Return (DS3P ())
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120043))
                                                                                                                                        {
                                                                                                                                            Return (T2BF ())
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120044))
                                                                                                                                        {
                                                                                                                                            Local0 = 0x00010000
                                                                                                                                            Local0 |= ^^PCI0.LPCB.HEC.BRCP (Zero)
                                                                                                                                            Return (Local0)
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120045))
                                                                                                                                        {
                                                                                                                                            Local0 = 0x00010000
                                                                                                                                            Local0 |= N3MV ()
                                                                                                                                            Return (Local0)
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120046))
                                                                                                                                        {
                                                                                                                                            Local0 = 0x00010000
                                                                                                                                            Local0 |= D3MV ()
                                                                                                                                            Return (Local0)
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120047))
                                                                                                                                        {
                                                                                                                                            Local0 = 0x00010000
                                                                                                                                            Local0 |= ^^PCI0.LPCB.HEC.BIF4 (Zero)
                                                                                                                                            If ((Local0 == 0x00010001))
                                                                                                                                            {
                                                                                                                                                Local0 = 0xFFFF
                                                                                                                                            }

                                                                                                                                            Return (Local0)
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120048))
                                                                                                                                        {
                                                                                                                                            Local0 = 0x00010000
                                                                                                                                            Local0 |= S4PC ()
                                                                                                                                            Return (Local0)
                                                                                                                                        }

                                                                                                                                        If ((IIA0 == 0x00120049))
                                                                                                                                        {
                                                                                                                                            Local0 = 0x00010000
                                                                                                                                            Local0 |= ^^PCI0.LPCB.HEC.BIF2 (Zero)
                                                                                                                                            If ((Local0 == 0x00010001))
                                                                                                                                            {
                                                                                                                                                Local0 = 0xFFFF
                                                                                                                                            }

                                                                                                                                            Return (Local0)
                                                                                                                                        }

                                                                                                                                        Return (0x02)
                                                                                                                                    }
                                                                                                                                    Else
                                                                                                                                    {
                                                                                                                                        If ((_T_0 == 0x53564544))
                                                                                                                                        {
                                                                                                                                            CreateDWordField (Arg2, 0x04, IIA1)
                                                                                                                                            If ((IIA0 == 0x00020011))
                                                                                                                                            {
                                                                                                                                                Return (SALE ((IIA1 + 0x02)))
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00020012))
                                                                                                                                            {
                                                                                                                                                Return (SALE ((IIA1 + 0x04)))
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00020013))
                                                                                                                                            {
                                                                                                                                                Return (SALE ((IIA1 + 0x08)))
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00040015))
                                                                                                                                            {
                                                                                                                                                Return (SALE ((IIA1 + 0x10)))
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00020014))
                                                                                                                                            {
                                                                                                                                                Return (SALE ((IIA1 + 0x20)))
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00020015))
                                                                                                                                            {
                                                                                                                                                Return (SALE ((IIA1 + 0x40)))
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00020016))
                                                                                                                                            {
                                                                                                                                                Return (SALE ((IIA1 + 0x80)))
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00020019))
                                                                                                                                            {
                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00020020))
                                                                                                                                            {
                                                                                                                                                CPCS (IIA1)
                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00050012))
                                                                                                                                            {
                                                                                                                                                SPLV (IIA1)
                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00050011))
                                                                                                                                            {
                                                                                                                                                If ((IIA1 == 0x02))
                                                                                                                                                {
                                                                                                                                                    LIDP = One
                                                                                                                                                }
                                                                                                                                                Else
                                                                                                                                                {
                                                                                                                                                    LIDP = Zero
                                                                                                                                                }
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00010002))
                                                                                                                                            {
                                                                                                                                                OWGD (IIA1)
                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00010012))
                                                                                                                                            {
                                                                                                                                                If (WLDP)
                                                                                                                                                {
                                                                                                                                                    WLED (IIA1)
                                                                                                                                                }

                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00010013))
                                                                                                                                            {
                                                                                                                                                If (BTDP)
                                                                                                                                                {
                                                                                                                                                    BLED (IIA1)
                                                                                                                                                }

                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00010003))
                                                                                                                                            {
                                                                                                                                                Return (CWAP (IIA1))
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00010015))
                                                                                                                                            {
                                                                                                                                                If (GPDP)
                                                                                                                                                {
                                                                                                                                                    GPSC (IIA1)
                                                                                                                                                }

                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00010019))
                                                                                                                                            {
                                                                                                                                                If (TGDP)
                                                                                                                                                {
                                                                                                                                                    GSMC (IIA1)
                                                                                                                                                }

                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00010017))
                                                                                                                                            {
                                                                                                                                                If (WMDP)
                                                                                                                                                {
                                                                                                                                                    WMXC (IIA1)
                                                                                                                                                }

                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00010021))
                                                                                                                                            {
                                                                                                                                                If (UWDP)
                                                                                                                                                {
                                                                                                                                                    UWBC (IIA1)
                                                                                                                                                }

                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00120012))
                                                                                                                                            {
                                                                                                                                                Return (PSTC ((IIA1 + One)))
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00100012))
                                                                                                                                            {
                                                                                                                                                TLED (IIA1)
                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00020018))
                                                                                                                                            {
                                                                                                                                                EGCR (IIA1)
                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00120031))
                                                                                                                                            {
                                                                                                                                                DESP (IIA1)
                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00120037))
                                                                                                                                            {
                                                                                                                                                IOMB (IIA1)
                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00120038))
                                                                                                                                            {
                                                                                                                                                IOMT (IIA1)
                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00120053))
                                                                                                                                            {
                                                                                                                                                If ((IIA1 == One))
                                                                                                                                                {
                                                                                                                                                    If (ACPF)
                                                                                                                                                    {
                                                                                                                                                        DS3T = 0xAA
                                                                                                                                                        ACPF = Zero
                                                                                                                                                        Notify (^^PCI0.AC0, 0x80) // Status Change
                                                                                                                                                        Sleep (0x64)
                                                                                                                                                        PNOT ()
                                                                                                                                                        Sleep (0x0A)
                                                                                                                                                        ^^PCI0.LPCB.HEC.NBAT (0x80)
                                                                                                                                                    }

                                                                                                                                                    DS3A = 0xAA
                                                                                                                                                }
                                                                                                                                                Else
                                                                                                                                                {
                                                                                                                                                    DS3T = 0x55
                                                                                                                                                    DS3A = 0x55
                                                                                                                                                    ACPF = ^^PCI0.LPCB.HEC.ACPS ()
                                                                                                                                                    Notify (^^PCI0.AC0, 0x80) // Status Change
                                                                                                                                                    Sleep (0x64)
                                                                                                                                                    PNOT ()
                                                                                                                                                    Sleep (0x0A)
                                                                                                                                                    ^^PCI0.LPCB.HEC.NBAT (0x80)
                                                                                                                                                }

                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            If ((IIA0 == 0x00060023))
                                                                                                                                            {
                                                                                                                                                AICG (IIA1)
                                                                                                                                                Return (One)
                                                                                                                                            }

                                                                                                                                            Return (Zero)
                                                                                                                                        }
                                                                                                                                        Else
                                                                                                                                        {
                                                                                                                                            If ((_T_0 == 0x50564544))
                                                                                                                                            {
                                                                                                                                                Return (GSRD (IIA0))
                                                                                                                                            }
                                                                                                                                            Else
                                                                                                                                            {
                                                                                                                                                If ((_T_0 == 0x59454B48))
                                                                                                                                                {
                                                                                                                                                    HKEY ()
                                                                                                                                                    Return (One)
                                                                                                                                                }
                                                                                                                                                Else
                                                                                                                                                {
                                                                                                                                                    If ((_T_0 == 0x5446424B))
                                                                                                                                                    {
                                                                                                                                                        KBFT (IIA0)
                                                                                                                                                        Return (One)
                                                                                                                                                    }
                                                                                                                                                    Else
                                                                                                                                                    {
                                                                                                                                                        If ((_T_0 == 0x46494643))
                                                                                                                                                        {
                                                                                                                                                            Return (One)
                                                                                                                                                        }
                                                                                                                                                        Else
                                                                                                                                                        {
                                                                                                                                                            If ((_T_0 == 0x44495046))
                                                                                                                                                            {
                                                                                                                                                                Return (FPID ())
                                                                                                                                                            }
                                                                                                                                                            Else
                                                                                                                                                            {
                                                                                                                                                                If ((_T_0 == 0x424D5352))
                                                                                                                                                                {
                                                                                                                                                                    Return (RSMB (IIA0))
                                                                                                                                                                }
                                                                                                                                                                Else
                                                                                                                                                                {
                                                                                                                                                                    If ((_T_0 == 0x424D5357))
                                                                                                                                                                    {
                                                                                                                                                                        Return (WSMB (IIA0))
                                                                                                                                                                    }
                                                                                                                                                                    Else
                                                                                                                                                                    {
                                                                                                                                                                        If ((_T_0 == 0x574D5352))
                                                                                                                                                                        {
                                                                                                                                                                            Return (RSMW (IIA0))
                                                                                                                                                                        }
                                                                                                                                                                        Else
                                                                                                                                                                        {
                                                                                                                                                                            If ((_T_0 == 0x574D5357))
                                                                                                                                                                            {
                                                                                                                                                                                Return (WSMW (IIA0))
                                                                                                                                                                            }
                                                                                                                                                                            Else
                                                                                                                                                                            {
                                                                                                                                                                                If ((_T_0 == 0x4B4D5352))
                                                                                                                                                                                {
                                                                                                                                                                                    Return (RSMK (IIA0))
                                                                                                                                                                                }
                                                                                                                                                                                Else
                                                                                                                                                                                {
                                                                                                                                                                                    If ((_T_0 == 0x4B4D5357))
                                                                                                                                                                                    {
                                                                                                                                                                                        Return (WSMK (IIA0))
                                                                                                                                                                                    }
                                                                                                                                                                                    Else
                                                                                                                                                                                    {
                                                                                                                                                                                        Return (0xFFFFFFFE)
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
                If ((Arg0 == 0xFF))
                {
                    Return (GANQ ())
                }

                Return (Ones)
            }

            Method (INIT, 1, NotSerialized)
            {
                ATKP = One
                If ((SLLL != 0xAA))
                {
                    Notify (PCI0, Zero) // Bus Check
                }
                Else
                {
                    NTFY (0x69)
                }

                SLLL = Zero
                If ((OSFG >= OSW8))
                {
                    ^^PCI0.LPCB.HEC.WRAM (0x0C0C, 0x80)
                }

                Return (MNAM) /* \_SB_.MNAM */
            }

            Method (BSTS, 0, NotSerialized)
            {
                If (((^^PCI0.LPCB.HEC.RRAM (0x04FE) == 0x34) || (^^PCI0.LPCB.HEC.RRAM (0x04FE) == 0x39)))
                {
                    Return (0x05)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (TMPR, 0, NotSerialized)
            {
                Return (Ones)
            }

            Method (SFUN, 0, NotSerialized)
            {
                Local0 = 0x37
                Local0 |= 0x40
                Local0 |= 0x80
                Local0 |= 0x00020000
                Local0 |= 0x00080000
                Local0 |= 0x00400000
                Return (Local0)
            }

            Method (OSVR, 1, NotSerialized)
            {
            }

            Method (GPLV, 0, NotSerialized)
            {
                Return (LBTN) /* \_SB_.LBTN */
            }

            Method (SPLV, 1, NotSerialized)
            {
                LBTN = Arg0
                ^^PCI0.LPCB.HEC.STBR ()
                Return (One)
            }

            Method (SPBL, 1, NotSerialized)
            {
                If ((Arg0 == 0x0100))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x80))
                {
                    Return (Zero)
                }

                If ((Arg0 >= 0x0B))
                {
                    Return (Zero)
                }

                If ((Arg0 < Zero))
                {
                    Return (Zero)
                }

                LBTN = Arg0
                ^^PCI0.LPCB.HEC.STBR ()
                Return (One)
            }

            Method (GSRD, 1, NotSerialized)
            {
                Return (One)
            }

            Method (OWGD, 1, NotSerialized)
            {
            }

            Method (WLED, 1, NotSerialized)
            {
                OWLD (Arg0)
                Return (One)
            }

            Method (BLED, 1, NotSerialized)
            {
                OBTD (Arg0)
                Return (One)
            }

            Method (UWBC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (WMXC, 1, NotSerialized)
            {
                OWMD (Arg0)
                Return (One)
            }

            Method (GPSC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GSMC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (KBNI, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (GALE, 1, NotSerialized)
            {
                If ((Arg0 == 0x04))
                {
                    If ((LEDS && 0x04))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == 0x08))
                {
                    If ((LEDS && 0x08))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == 0x10))
                {
                    If ((LEDS && 0x10))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (0x02)
            }

            Method (SALE, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GMLE, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (One)
                }

                If ((Arg0 == 0x02))
                {
                    Return (One)
                }

                If ((Arg0 == 0x03))
                {
                    Return (One)
                }

                Return (One)
            }

            Method (SMLE, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GDSP, 1, Serialized)
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                If (NATK ())
                {
                    While (One)
                    {
                        _T_0 = Arg0
                        If ((_T_0 == Zero))
                        {
                            Return (OGND ())
                        }
                        Else
                        {
                            If ((_T_0 == One))
                            {
                                Return (OEAD ())
                            }
                            Else
                            {
                                If ((_T_0 == 0x02))
                                {
                                    Return (OGCD ())
                                }
                                Else
                                {
                                    If ((_T_0 == 0x80))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }

                        Break
                    }
                }
            }

            Method (SDSP, 1, NotSerialized)
            {
                SWHG (Arg0)
            }

            Method (GPID, 0, NotSerialized)
            {
                Return (LCDR) /* \_SB_.LCDR */
            }

            Method (FPID, 0, NotSerialized)
            {
                Return (0x0118)
            }

            Method (ALSC, 1, NotSerialized)
            {
                If (Arg0) {}
                Else
                {
                }

                Return (One)
            }

            Method (ALSL, 1, NotSerialized)
            {
                Return (One)
            }

            Method (HWRS, 0, NotSerialized)
            {
                Return (OHWR ())
            }

            Method (GLCD, 0, NotSerialized)
            {
                Return (LCDV) /* \_SB_.LCDV */
            }

            Method (CWAP, 1, NotSerialized)
            {
                WAPF |= Arg0 /* \_SB_.ATKD.WAPF */
                Return (One)
            }

            Method (WDOG, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    PCDV = PTIM /* \_SB_.PTIM */
                    Return (0x3C)
                }

                If ((Arg0 == One))
                {
                    If (^^LID._LID ())
                    {
                        PCDV = PTIM /* \_SB_.PTIM */
                        Return (One)
                    }

                    If ((\_TZ.RLTM () < PTMP))
                    {
                        PCDV = PTIM /* \_SB_.PTIM */
                        Return (One)
                    }

                    PCDV--
                    If ((PCDV == Zero))
                    {
                        PCDV = PTIM /* \_SB_.PTIM */
                        NTFY (0x6D)
                    }

                    Return (One)
                }

                If ((Arg0 == 0x10))
                {
                    Return (0x8005)
                }

                If ((Arg0 == 0x11))
                {
                    Notify (PCI0, Zero) // Bus Check
                    Return (Zero)
                }

                Return (Zero)
            }

            Method (DPWR, 1, NotSerialized)
            {
                Return (One)
            }

            Method (QDEV, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (0x02)
                }

                If ((Arg0 == 0x02))
                {
                    Return (0x02)
                }

                If ((Arg0 == 0x04))
                {
                    Return (0x02)
                }

                If ((Arg0 == 0x08))
                {
                    Return (0x02)
                }

                Return (0x02)
            }

            Method (SDON, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x02))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x04))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x08))
                {
                    Return (Zero)
                }

                Return (Zero)
            }

            Method (SDOF, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x02))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x04))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x08))
                {
                    Return (Zero)
                }

                Return (Zero)
            }

            Method (QMOD, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (Zero)
                }

                If ((Arg0 == One)) {}
                If ((Arg0 == 0x02)) {}
                Return (One)
            }

            Method (ANVI, 1, Serialized)
            {
                Local0 = ASMI (Arg0)
                Return (Local0)
            }

            Method (PSTC, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (PSTN) /* \_SB_.PSTN */
                }

                If (ACPF)
                {
                    Local0 = (PSTN >> 0x08)
                }
                Else
                {
                    Local0 = (PSTN & 0xFF)
                }

                If ((Arg0 > Local0))
                {
                    Return (Ones)
                }

                SLMT = Arg0
                PNOT ()
                Return (Zero)
            }

            Method (SMBB, 1, Serialized)
            {
                Local0 = (Arg0 >> 0x10)
                Local0 &= 0xFF
                Local1 = (Arg0 >> 0x18)
                Local2 = (Arg0 & 0xFF)
                If ((Local1 & One))
                {
                    Return (RBYT (Local1, Local0))
                }
                Else
                {
                    Return (WBYT (Local1, Local0, Local2))
                }
            }

            Method (SMBW, 1, Serialized)
            {
                Local0 = (Arg0 >> 0x10)
                Local0 &= 0xFF
                Local1 = (Arg0 >> 0x18)
                Local2 = (Arg0 & 0xFF)
                If ((Local1 & One))
                {
                    Return (RWRD (Local1, Local0))
                }
                Else
                {
                    Return (WWRD (Local1, Local0, Local2))
                }
            }

            Method (SMBK, 1, Serialized)
            {
                Local0 = (Arg0 >> 0x08)
                Local0 &= 0xFF
                If (Local0)
                {
                    Local0 = (Arg0 >> 0x10)
                    Local0 &= 0xFF
                    Local1 = (Arg0 >> 0x18)
                    Local1 &= 0xFF
                    Local3 = (Arg0 & 0x0F)
                    If ((Local1 & One))
                    {
                        RBLK (Local1, Local0, Local3)
                    }
                    Else
                    {
                        WBLK (Local1, Local0, Local3)
                    }

                    Return (Zero)
                }
                Else
                {
                    Local2 = (Arg0 >> 0x10)
                    Local2 &= 0xFF
                    Local1 = (Arg0 >> 0x18)
                    If ((Local1 & One))
                    {
                        Return (DerefOf (Index (RBUF, Local2)))
                    }
                    Else
                    {
                        Local1 = (Arg0 & 0xFF)
                        Index (RBUF, Local2) = Local1
                        Return (Zero)
                    }
                }
            }

            Method (ECRW, 1, Serialized)
            {
                Local0 = (Arg0 >> 0x18)
                Local0 &= 0xFF
                Local1 = (Arg0 >> 0x10)
                Local1 &= 0xFF
                Local2 = (Arg0 >> 0x08)
                Local2 &= 0xFF
                Local3 = (Arg0 & 0xFF)
                If ((Acquire (^^PCI0.LPCB.HEC.MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                ^^PCI0.LPCB.HEC.CDT3 = Local0
                ^^PCI0.LPCB.HEC.CDT2 = Local1
                ^^PCI0.LPCB.HEC.CDT1 = Local2
                ^^PCI0.LPCB.HEC.CMD1 = Local3
                Local0 = 0x05
                While ((Local0 && ^^PCI0.LPCB.HEC.CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                Local0 = ^^PCI0.LPCB.HEC.CDT3 /* \_SB_.PCI0.LPCB.HEC_.CDT3 */
                Local1 = ^^PCI0.LPCB.HEC.CDT2 /* \_SB_.PCI0.LPCB.HEC_.CDT2 */
                Local2 = ^^PCI0.LPCB.HEC.CDT1 /* \_SB_.PCI0.LPCB.HEC_.CDT1 */
                Local3 = ^^PCI0.LPCB.HEC.CMD1 /* \_SB_.PCI0.LPCB.HEC_.CMD1 */
                Release (^^PCI0.LPCB.HEC.MUEC)
                Local0 <<= 0x08
                Local0 |= Local1
                Local0 <<= 0x08
                Local0 |= Local2
                Local0 <<= 0x08
                Local0 |= Local3
                Return (Local0)
            }

            Method (CBIF, 1, Serialized)
            {
                Return (One)
            }

            Method (TLED, 1, NotSerialized)
            {
                OTLD (Arg0)
            }

            Method (GLED, 1, NotSerialized)
            {
                OGLD (Arg0)
            }

            Method (RLKB, 1, NotSerialized)
            {
                Return (One)
            }

            Method (CPCS, 1, NotSerialized)
            {
                Return (One)
            }

            Method (EGCR, 1, Serialized)
            {
            }

            Method (RSMB, 1, NotSerialized)
            {
                Return (One)
            }

            Method (WSMB, 1, NotSerialized)
            {
                Return (One)
            }

            Method (RSMW, 1, NotSerialized)
            {
                Return (One)
            }

            Method (WSMW, 1, NotSerialized)
            {
                Return (One)
            }

            Method (RSMK, 1, NotSerialized)
            {
                Return (One)
            }

            Method (WSMK, 1, NotSerialized)
            {
                Return (One)
            }

            Method (USBC, 1, NotSerialized)
            {
            }
        }
    }

    Scope (_SB)
    {
        Device (ASHS)
        {
            Name (_HID, "ATK4001" /* Asus Radio Control Button */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Windows 2012"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (NTFY, 1, Serialized)
            {
                Notify (ASHS, Arg0)
            }

            Method (HSWC, 1, Serialized)
            {
                If ((Arg0 < 0x02))
                {
                    If (WLDP)
                    {
                        OWLD (Arg0)
                    }

                    If (BTDP)
                    {
                        OBTD (Arg0)
                    }

                    Return (One)
                }

                If ((Arg0 == 0x02))
                {
                    Return (BRST) /* \_SB_.BRST */
                }

                If ((Arg0 == 0x03))
                {
                    Return (OHWR ())
                }

                If ((Arg0 == 0x80))
                {
                    Return (One)
                    Return (0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (HEC)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (CRS, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                Memory32Fixed (ReadOnly,
                    0x00000000,         // Address Base
                    0x00000500,         // Address Length
                    _Y22)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.PCI0.LPCB.HEC._Y22._BAS, HB01)  // _BAS: Base Address
                HB01 = HEM1 /* \_SB_.HEM1 */
                Return (CRS) /* \_SB_.PCI0.LPCB.HEC_.CRS_ */
            }

            Name (_GPE, 0x1D)  // _GPE: General Purpose Events
            Mutex (MUEC, 0x00)
            Mutex (ASIO, 0x00)
            Name (ECFL, Ones)
            Method (ECAV, 0, NotSerialized)
            {
                If ((_REV >= 0x02))
                {
                    Return (One)
                }

                If ((SLPT >= 0x04))
                {
                    Return (Zero)
                }

                If ((ECFL == Ones))
                {
                    Return (Zero)
                }

                Return (ECFL) /* \_SB_.PCI0.LPCB.HEC_.ECFL */
            }

            OperationRegion (ECOR, EmbeddedControl, Zero, 0xFF)
            Field (ECOR, ByteAcc, Lock, Preserve)
            {
                Offset (0x04), 
                Offset (0x05), 
                CDTD,   8, 
                Offset (0x8A), 
                HKEN,   1
            }

            OperationRegion (ECW1, SystemMemory, HEM1, 0x80)
            Field (ECW1, ByteAcc, Lock, Preserve)
            {
                Offset (0x01), 
                EPWS,   8, 
                EB0S,   8, 
                EB1S,   8, 
                EB0R,   8, 
                EB1R,   8, 
                EB0T,   8, 
                EB1T,   8, 
                Offset (0x10), 
                B0PN,   16, 
                B0VL,   16, 
                B0RC,   16, 
                B0FC,   16, 
                B0ST,   16, 
                B0CC,   16, 
                B0TM,   16, 
                B0C1,   16, 
                B0CV,   16, 
                Offset (0x30), 
                B1PN,   16, 
                B1VL,   16, 
                B1RC,   16, 
                B1FC,   16, 
                B1ST,   16, 
                B1CC,   16, 
                B1TM,   16, 
                B1C1,   16, 
                B1CV,   16, 
                Offset (0x50), 
                B0DC,   16, 
                B0DV,   16, 
                B0SN,   16, 
                B0MD,   16, 
                B1DC,   16, 
                B1DV,   16, 
                B1SN,   16, 
                B1MD,   16, 
                TH1R,   8, 
                TH1L,   8, 
                TH0R,   8, 
                TH0L,   8, 
                ECRT,   8, 
                EPSV,   8, 
                EACT,   8, 
                TERR,   8, 
                F0TS,   16, 
                F1TS,   16, 
                F0CS,   8, 
                F1CS,   8, 
                PCPT,   16, 
                Offset (0x7A), 
                SYSC,   16
            }

            OperationRegion (ECW2, SystemMemory, HEM2, 0x0100)
            Field (ECW2, ByteAcc, Lock, Preserve)
            {
                ESEM,   8, 
                CMD1,   8, 
                CDT1,   8, 
                CDT2,   8, 
                CDT3,   8, 
                CDT4,   8, 
                CDT5,   8, 
                CDT6,   8, 
                CDT7,   8, 
                CDT8,   8, 
                CDT9,   8, 
                CD10,   8, 
                CD11,   8, 
                CD12,   8, 
                Offset (0x40), 
                EDA1,   8, 
                EDA2,   8, 
                EDA3,   8, 
                EDA4,   8, 
                EDA5,   8, 
                EDA6,   8, 
                EDA7,   8, 
                EDA8,   8, 
                EDA9,   8, 
                ED10,   8, 
                ED11,   8, 
                ED12,   8
            }

            OperationRegion (ECWB, SystemMemory, HEM2, 0x0100)
            Field (ECWB, ByteAcc, Lock, Preserve)
            {
                ESEB,   8, 
                CMDB,   8, 
                CDTB,   256, 
                Offset (0x40), 
                BCNT,   8, 
                BDAT,   256
            }

            OperationRegion (HMW1, SystemMemory, HEM2, 0x80)
            Field (HMW1, ByteAcc, Lock, Preserve)
            {
                ESMP,   8, 
                MCMD,   8, 
                MCDB,   496, 
                EHFD,   512
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSFG <= OSME))
                {
                    ECFL = One
                }
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    ECFL = Arg1
                }
            }
        }
    }

    Scope (_SB.ATKD)
    {
        Method (CPUX, 4, NotSerialized)
        {
            If ((Arg1 == 0x31))
            {
                If ((Arg2 == 0x02))
                {
                    GCPU (Arg0, Arg1, Arg2, Arg3)
                    Return (Zero)
                }

                If ((Arg2 == 0x03))
                {
                    SCPU (Arg0, Arg1, Arg2, Arg3)
                    Return (Zero)
                }
            }

            Return (Zero)
        }

        Method (GCPU, 4, NotSerialized)
        {
            OperationRegion (\F31A, SystemMemory, Arg0, 0x10)
            Field (F31A, DWordAcc, NoLock, Preserve)
            {
                MFUN,   16, 
                SFUN,   16, 
                LEN,    16, 
                STAS,   8, 
                EROR,   8, 
                PSIN,   16
            }

            PSIN = PSTC (Zero)
            STAS = 0x80
        }

        Method (SCPU, 4, NotSerialized)
        {
            OperationRegion (\F31B, SystemMemory, Arg0, 0x10)
            Field (F31B, DWordAcc, NoLock, Preserve)
            {
                MFUN,   16, 
                SFUN,   16, 
                LEN,    16, 
                STAS,   8, 
                EROR,   8, 
                PSTL,   8
            }

            If (PSTC (PSTL))
            {
                STAS = 0x82
                EROR = One
            }
            Else
            {
                STAS = 0x80
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, Zero)
        Name (XNPT, One)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (BDFR, 4, NotSerialized)
        {
            Local0 = Zero
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local0 += Arg3
            Return (Local0)
        }

        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == 0xFFFFFFFF))
            {
                Return (Zero)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (One)
                }

                Return (Zero)
            }
        }
    }

    Scope (\)
    {
        OperationRegion (PMIX, SystemIO, PMBS, 0x80)
        Field (PMIX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x10), 
                ,   1, 
            TDTY,   3, 
            TENA,   1, 
            TTDT,   3, 
            FRCT,   1, 
                ,   8, 
            THLS,   1, 
            Offset (0x13), 
            Offset (0x20), 
                ,   1, 
            PEHS,   1, 
                ,   7, 
            PEPS,   1, 
            BALS,   1, 
            SBPS,   1, 
            Offset (0x22), 
            G00S,   1, 
            G01S,   1, 
            G02S,   1, 
            G03S,   1, 
            G04S,   1, 
            G05S,   1, 
            G06S,   1, 
            G07S,   1, 
            G08S,   1, 
            G09S,   1, 
            G0AS,   1, 
            G0BS,   1, 
            G0CS,   1, 
            G0DS,   1, 
            G0ES,   1, 
            G0FS,   1, 
            Offset (0x28), 
                ,   1, 
            PEHE,   1, 
                ,   7, 
            PEPE,   1, 
            BALE,   1, 
            SBPE,   1, 
            Offset (0x2A), 
            G00E,   1, 
            G01E,   1, 
            G02E,   1, 
            G03E,   1, 
            G04E,   1, 
            G05E,   1, 
            G06E,   1, 
            G07E,   1, 
            G08E,   1, 
            G09E,   1, 
            G0AE,   1, 
            G0BE,   1, 
            G0CE,   1, 
            G0DE,   1, 
            G0EE,   1, 
            G0FE,   1, 
            Offset (0x30), 
                ,   4, 
            SLPE,   1, 
            APME,   1, 
                ,   5, 
            MCSE,   1, 
                ,   1, 
            TCOE,   1, 
            PERE,   1, 
            Offset (0x32), 
            Offset (0x34), 
                ,   4, 
            SLPS,   1, 
            APMS,   1, 
                ,   5, 
            MCSS,   1, 
                ,   1, 
            TCOS,   1, 
            PERS,   1, 
            Offset (0x36), 
            Offset (0x42), 
                ,   1, 
            Offset (0x64), 
                ,   9, 
                ,   6
        }

        OperationRegion (GPIS, SystemIO, PMBS, 0x50)
        Field (GPIS, ByteAcc, NoLock, Preserve)
        {
            Offset (0x22), 
            GS00,   16, 
            Offset (0x2A), 
            GE00,   16
        }

        OperationRegion (GPXX, SystemIO, GPBS, 0x80)
        Field (GPXX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x0C), 
            GLV0,   32, 
            Offset (0x2C), 
            GP00,   16, 
            Offset (0x38), 
            GLV1,   32, 
            Offset (0x48), 
            GLV2,   32
        }

        OperationRegion (RCBA, SystemMemory, 0xFED1C000, 0x4000)
        Field (RCBA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x3418), 
            FDRT,   32
        }

        Method (RGPL, 2, Serialized)
        {
            Local0 = Arg1
            Local1 = Zero
            While (Local0)
            {
                Local1 <<= One
                Local1 |= One
                Local0--
            }

            If ((Arg0 < 0x20))
            {
                Local1 <<= Arg0
                Local0 = GLV0 /* \GLV0 */
                Local0 &= Local1
                Local0 >>= Arg0
            }
            Else
            {
                If ((Arg0 < 0x40))
                {
                    Local0 = GLV1 /* \GLV1 */
                    Local2 = (Arg0 - 0x20)
                }
                Else
                {
                    Local0 = GLV2 /* \GLV2 */
                    Local2 = (Arg0 - 0x40)
                }

                Local1 <<= Local2
                Local0 &= Local1
                Local0 >>= Local2
            }

            Return (Local0)
        }

        Method (SGPL, 3, Serialized)
        {
            Local0 = Arg1
            Local1 = Zero
            While (Local0)
            {
                Local1 <<= One
                Local1 |= One
                Local0--
            }

            If ((Arg0 < 0x20))
            {
                GLV0 = MKPN (Arg0, GLV0, Arg2, Local1)
            }
            Else
            {
                If ((Arg0 < 0x40))
                {
                    Local2 = (Arg0 - 0x20)
                    GLV1 = MKPN (Local2, GLV1, Arg2, Local1)
                }
                Else
                {
                    Local2 = (Arg0 - 0x40)
                    GLV2 = MKPN (Local2, GLV2, Arg2, Local1)
                }
            }
        }

        Method (MKPN, 4, Serialized)
        {
            Local1 = (Arg3 << Arg0)
            Local3 = ~Local1
            Local0 = (Arg1 & Local3)
            Local4 = (Arg2 << Arg0)
            Local0 |= Local4
            Return (Local0)
        }

        Method (RGPP, 1, Serialized)
        {
            Local0 = (GP00 >> Arg0)
            Local0 &= One
            Return (Local0)
        }

        Method (TGPP, 1, Serialized)
        {
            Local0 = (One << Arg0)
            GP00 ^= Local0
        }

        Method (SGPP, 2, Serialized)
        {
            Local0 = (One << Arg0)
            If (Arg1)
            {
                GP00 |= Local0
            }
            Else
            {
                Local1 = ~Local0
                GP00 &= Local1
            }
        }

        Name (PMEW, Zero)
        Method (SBRS, 1, NotSerialized)
        {
            CPXS ()
        }

        Method (SBRW, 1, NotSerialized)
        {
            PMEW = SBPS /* \SBPS */
            If (_OSI ("Windows 2012"))
            {
                \_SB.PCI0.XHC.XSEL ()
            }
        }

        Method (STRP, 1, NotSerialized)
        {
            If (Arg0)
            {
                SLPS = One
                SLPE = One
            }
            Else
            {
                SLPE = Zero
                SLPS = One
            }
        }

        Method (HKTH, 0, Serialized)
        {
            If (THLS)
            {
                Return (TTDT) /* \TTDT */
            }
            Else
            {
                Return (0xFFFF)
            }
        }

        Method (CPXS, 0, NotSerialized)
        {
            Local0 = Zero
            Local1 = 0x00010000
            Local2 = 0x000E0060
            Local3 = 0x000E00DC
            While ((Local0 < 0x08))
            {
                If (!(FDRT & Local1))
                {
                    If ((\_SB.RDPE (Local2) == 0xFFFFFFFF))
                    {
                        Local2 += 0x1000
                        Local3 += 0x1000
                        Local1 <<= One
                        Local0++
                        Continue
                    }

                    While ((\_SB.RDPE (Local2) & 0x00010000))
                    {
                        Local4 = (\_SB.RDPE (Local2) | 0x00010000)
                        \_SB.WDPE (Local2, Local4)
                    }

                    While ((\_SB.RDPE (Local3) & 0x80000000))
                    {
                        Local4 = (\_SB.RDPE (Local3) | 0x80000000)
                        \_SB.WDPE (Local3, Local4)
                    }
                }

                Local2 += 0x1000
                Local3 += 0x1000
                Local1 <<= One
                Local0++
            }

            While ((PEPS & One))
            {
                PEPS |= One
            }
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB.PCI0.LPCB)
    {
        OperationRegion (RXA0, PCI_Config, 0xA0, 0x20)
        Field (RXA0, ByteAcc, NoLock, Preserve)
        {
                ,   9, 
            PBLV,   1, 
            BCPE,   1, 
            Offset (0x10), 
                ,   1, 
            PBMS,   1, 
                ,   1, 
            PMCS,   1, 
            ECNS,   1, 
            Offset (0x11), 
            ECT1,   16, 
            ELEN,   1, 
            Offset (0x14)
        }
    }

    Scope (\)
    {
        OperationRegion (SMB0, SystemIO, 0x0580, 0x10)
        Field (SMB0, ByteAcc, NoLock, Preserve)
        {
            HSTS,   8, 
            SSTS,   8, 
            HSTC,   8, 
            HCMD,   8, 
            HADR,   8, 
            HDT0,   8, 
            HDT1,   8, 
            BLKD,   8, 
            SPEC,   8, 
            SRCV,   8, 
            SLVD,   16, 
            AUXS,   8, 
            AUXC,   8
        }

        Name (RBUF, Package (0x20) {})
        Method (HBSY, 0, NotSerialized)
        {
            Local0 = 0x000FFFFF
            While (Local0)
            {
                Local1 = (HSTS & One)
                If (!Local1)
                {
                    Return (Zero)
                }

                Local0--
            }

            Return (One)
        }

        Method (WTSB, 0, NotSerialized)
        {
            Local0 = 0x000FFFFF
            While (Local0)
            {
                Local0--
                Local1 = (HSTS & 0x1E)
                If ((Local1 == 0x02))
                {
                    Return (One)
                }

                If (Local1)
                {
                    Return (Zero)
                }
            }

            Return (Zero)
        }

        Mutex (P4SM, 0x00)
        Method (SBYT, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            AUXC = Zero
            HADR = Arg0
            HCMD = Arg1
            HSTS = 0xFF
            HSTC = 0x44
            If (WTSB ())
            {
                Release (P4SM)
                Return (One)
            }
            Else
            {
                Release (P4SM)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (WBYT, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = Arg0
                    HCMD = Arg1
                    HDT0 = Arg2
                    HSTS = 0xFF
                    HSTC = 0x48
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (WWRD, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = Arg0
                    HCMD = Arg1
                    Local1 = (Arg2 & 0xFF)
                    Local2 = (Arg2 >> 0x08)
                    Local2 &= 0xFF
                    HDT0 = Local2
                    HDT1 = Local1
                    HSTS = 0xFF
                    HSTC = 0x4C
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (WBLK, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = Arg0
                    HCMD = Arg1
                    Local1 = HSTC /* \HSTC */
                    Local2 = Arg2
                    Local1 = Zero
                    While (Local2)
                    {
                        BLKD = DerefOf (Index (RBUF, Local1))
                        Local2--
                        Local1++
                    }

                    HDT0 = Arg2
                    Local1 = HSTC /* \HSTC */
                    HSTS = 0xFF
                    HSTC = 0x54
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RSBT, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x44
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (HDT0) /* \HDT0 */
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RBYT, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x48
                    If (WTSB ())
                    {
                        Release (P4SM)
                        Return (HDT0) /* \HDT0 */
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RWRD, 2, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x4C
                    If (WTSB ())
                    {
                        Local1 = HDT0 /* \HDT0 */
                        Local1 <<= 0x08
                        Local2 = HDT1 /* \HDT1 */
                        Local1 += Local2
                        Release (P4SM)
                        Return (Local1)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }

        Method (RBLK, 3, Serialized)
        {
            If ((Acquire (P4SM, 0xFFFF) != Zero))
            {
                Return (Ones)
            }

            Local0 = 0x05
            While (Local0)
            {
                If (HBSY ())
                {
                    Local0--
                }
                Else
                {
                    HADR = (Arg0 | One)
                    HCMD = Arg1
                    HSTS = 0xFF
                    HSTC = 0x54
                    If (WTSB ())
                    {
                        Local1 = HSTC /* \HSTC */
                        Local2 = HDT0 /* \HDT0 */
                        Local3 = Local2
                        RBUF = Zero
                        Local1 = Zero
                        While (Local2)
                        {
                            Index (RBUF, Local1) = BLKD /* \BLKD */
                            Local2--
                            Local1++
                        }

                        Release (P4SM)
                        Return (Local3)
                    }
                    Else
                    {
                        Local0--
                    }
                }
            }

            Release (P4SM)
            Return (Ones)
        }
    }

    Scope (_SB.PCI0.EHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Device (PRT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (Zero))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (Zero))
                    }
                }

                Device (PRT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (One))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (One))
                    }
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x02))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x02))
                    }
                }

                Device (PRT4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x03))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x03))
                    }
                }

                Device (PRT5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x04))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x04))
                    }
                }

                Device (PRT6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x05))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x05))
                    }
                }

                Device (PRT7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x06))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x06))
                    }
                }

                Device (PRT8)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x07))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x07))
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0.EHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Device (PRT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x08))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x08))
                    }
                }

                Device (PRT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x09))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x09))
                    }
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x0A))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x0A))
                    }
                }

                Device (PRT4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x0B))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x0B))
                    }
                }

                Device (PRT5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x0C))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x0C))
                    }
                }

                Device (PRT6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (OUPC (0x0D))
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (OPLD (0x0D))
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0.EHC1.RHUB.PRT1.PRT6)
    {
        Device (CAM0)
        {
            Name (_ADR, 0x06)  // _ADR: Address
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision       = 0x2,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x1,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "FRONT",
                    PLD_VerticalPosition = "LOWER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape          = "UNKNOWN",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x0,
                    PLD_EjectRequired  = 0x0,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0xFFFF,
                    PLD_HorizontalOffset = 0xFFFF)

            })
        }
    }

    Scope (_SB.PCI0.XHC)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (HS01)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (Zero))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (Zero))
                }
            }

            Device (HS02)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (One))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (One))
                }
            }

            Device (HS03)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x02))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Local0 = XPLD (0x02)
                    CreateBitField (DerefOf (Index (Local0, Zero)), 0x40, VIS)
                    If (((CDID & 0xF000) == 0x9000))
                    {
                        VIS &= Zero
                    }

                    Return (Local0)
                }
            }

            Device (HS04)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x03))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x03))
                }
            }

            Device (HS05)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x04))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x04))
                }
            }

            Device (HS06)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x05))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x05))
                }
            }

            Device (HS07)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x06))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x06))
                }
            }

            Device (HS08)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x07))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x07))
                }
            }

            Device (HS09)
            {
                Name (_ADR, 0x09)  // _ADR: Address
                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x08))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Local0 = XPLD (0x08)
                    CreateBitField (DerefOf (Index (Local0, Zero)), 0x40, VIS)
                    If (((CDID & 0xF000) == 0x9000))
                    {
                        VIS &= Zero
                    }

                    Return (Local0)
                }
            }

            Device (HS10)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0A)
                    }
                    Else
                    {
                        Return (0xFA)
                    }
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x09))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x09))
                }
            }

            Device (HS11)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0xFB)
                    }
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x0A))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x0A))
                }
            }

            Device (HS12)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0C)
                    }
                    Else
                    {
                        Return (0xFC)
                    }
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x0B))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x0B))
                }
            }

            Device (HS13)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (0xFD)
                    }
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x0C))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x0C))
                }
            }

            Device (HS14)
            {
                Name (_ADR, 0x0E)  // _ADR: Address
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x0D))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x0D))
                }
            }

            Device (HS15)
            {
                Name (_ADR, 0x0F)  // _ADR: Address
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    If (!(PR2 & 0x4000))
                    {
                        Index (UPCP, Zero) = Zero
                    }

                    Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS15._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                            /* 0008 */  0x70, 0x0C, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00   /* p....... */
                        }
                    })
                    CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                    If (!(PR2 & 0x2000))
                    {
                        VIS &= Zero
                    }

                    Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS15._PLD.PLDP */
                }
            }

            Device (SSP1)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x10)
                    }
                    Else
                    {
                        Return (0x0A)
                    }
                }

                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x0F))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x0F))
                }
            }

            Device (SSP2)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x11)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x10))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x10))
                }
            }

            Device (SSP3)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x12)
                    }
                    Else
                    {
                        Return (0x0C)
                    }
                }

                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x11))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x11))
                }
            }

            Device (SSP4)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x13)
                    }
                    Else
                    {
                        Return (0x0D)
                    }
                }

                Name (_STA, 0x0F)  // _STA: Status
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x12))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x12))
                }
            }

            Device (SSP5)
            {
                Name (_ADR, 0x14)  // _ADR: Address
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x13))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x13))
                }
            }

            Device (SSP6)
            {
                Name (_ADR, 0x15)  // _ADR: Address
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((CDID & 0xF000) == 0x8000))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (XUPC (0x14))
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (XPLD (0x14))
                }
            }
        }
    }

    Scope (_SB)
    {
        Name (CNTB, Buffer (0x10)
        {
            /* 0000 */  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00   /* ........ */
        })
        Name (VISB, Buffer (0x10)
        {
            /* 0000 */  0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00   /* ........ */
        })
        Name (SHPB, Buffer (0x10)
        {
            /* 0000 */  0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,  /* ........ */
            /* 0008 */  0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07   /* ........ */
        })
        Method (OUPC, 1, Serialized)
        {
            Name (BUPC, Package (0x04)
            {
                0xFF, 
                Zero, 
                Zero, 
                Zero
            })
            Local0 = DerefOf (Index (CNTB, Arg0))
            Index (BUPC, Zero) = Local0
            Return (BUPC) /* \_SB_.OUPC.BUPC */
        }

        Method (OPLD, 1, Serialized)
        {
            Name (BPLD, Buffer (0x10)
            {
                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* 1....... */
            })
            Local0 = DerefOf (Index (VISB, Arg0))
            Local1 = DerefOf (Index (BPLD, 0x08))
            Local1 &= 0xFE
            Local1 |= Local0
            Index (BPLD, 0x08) = Local1
            Local0 = DerefOf (Index (SHPB, Arg0))
            Local1 = DerefOf (Index (BPLD, 0x09))
            Local1 &= 0xC3
            Local1 |= Local0
            Index (BPLD, 0x09) = Local1
            Return (BPLD) /* \_SB_.OPLD.BPLD */
        }

        Name (CNTX, Buffer (0x15)
        {
            /* 0000 */  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF,  /* ........ */
            /* 0010 */  0xFF, 0x00, 0x00, 0x00, 0x00                     /* ..... */
        })
        Name (VISX, Buffer (0x15)
        {
            /* 0000 */  0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,  /* ........ */
            /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x00                     /* ..... */
        })
        Name (SHPX, Buffer (0x15)
        {
            /* 0000 */  0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,  /* ........ */
            /* 0008 */  0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,  /* ........ */
            /* 0010 */  0x07, 0x07, 0x07, 0x07, 0x07                     /* ..... */
        })
        Method (XUPC, 1, Serialized)
        {
            Name (UPCP, Package (0x04)
            {
                0xFF, 
                0x03, 
                Zero, 
                Zero
            })
            Local0 = DerefOf (Index (CNTX, Arg0))
            Index (UPCP, Zero) = Local0
            If ((Arg0 < 0x0F))
            {
                Index (UPCP, One) = Zero
            }

            Return (UPCP) /* \_SB_.XUPC.UPCP */
        }

        Method (XPLD, 1, Serialized)
        {
            Name (PLDP, Package (0x01)
            {
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ..r..... */
                    /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   /* i....... */
                }
            })
            Local0 = DerefOf (Index (VISX, Arg0))
            Local1 = DerefOf (Index (PLDP, 0x08))
            Local1 &= 0xFE
            Local1 |= Local0
            Index (PLDP, 0x08) = Local1
            Local0 = DerefOf (Index (SHPX, Arg0))
            Local1 = DerefOf (Index (PLDP, 0x09))
            Local1 &= 0xC3
            Local1 |= Local0
            Index (PLDP, 0x09) = Local1
            Return (PLDP) /* \_SB_.XPLD.PLDP */
        }
    }

    Scope (_SB.PCI0.XHC.RHUB.HS10)
    {
        Device (CAM0)
        {
            Name (_ADR, 0x0A)  // _ADR: Address
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision       = 0x2,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x1,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "FRONT",
                    PLD_VerticalPosition = "LOWER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape          = "UNKNOWN",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x0,
                    PLD_EjectRequired  = 0x0,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0xFFFF,
                    PLD_HorizontalOffset = 0xFFFF)

            })
        }
    }

    Scope (\)
    {
        Device (NFC1)
        {
            Name (_HID, EisaId ("SKTD000"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.NFCE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (NFC2)
        {
            Name (_HID, EisaId ("NXP5442") /* NXP 5442 Near Field Communications Controller */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.NFCE == 0x02))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (NFC3)
        {
            Name (_HID, EisaId ("ICV0A12"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.NFCE == 0x03))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (AC0)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Return (^^LPCB.HEC.ACAP ())
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
        }
    }

    Scope (_SB.PCI0.LPCB.HEC)
    {
        Method (ACAP, 0, Serialized)
        {
            Return (ACPF) /* \_SB_.ACPF */
        }
    }

    Scope (_SB.PCI0)
    {
        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (B0DP)
                {
                    If (^^LPCB.HEC.BATP (Zero))
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (LOW2, 0x012C)
            Name (DVOT, 0x0E)
            Name (PUNT, One)
            Name (LFCC, 0x1770)
            Name (PLFC, 0x1770)
            Name (NBIF, Package (0x0D)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                "", 
                "", 
                "", 
                ""
            })
            Name (PBIF, Package (0x0D)
            {
                One, 
                0x1770, 
                0x1770, 
                One, 
                0x39D0, 
                0x0258, 
                0x012C, 
                0x3C, 
                0x3C, 
                "M3N", 
                "  ", 
                "LIon", 
                "ASUS"
            })
            Name (PBST, Package (0x04)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Method (FBIF, 5, NotSerialized)
            {
                PUNT = Arg0
                Local1 = Arg1
                Local2 = Arg2
                If ((PUNT == Zero))
                {
                    Local1 *= 0x0A
                    Local2 *= 0x0A
                }

                Index (PBIF, Zero) = Arg0
                Index (PBIF, One) = Local1
                Index (PBIF, 0x02) = Local2
                LFCC = Local2
                Index (PBIF, 0x03) = Arg3
                Index (PBIF, 0x04) = Arg4
                If ((OSFG < OSVT))
                {
                    Divide (Local1, 0x64, Local3, Local5)
                }
                Else
                {
                    Divide (Local2, 0x64, Local3, Local5)
                }

                Local6 = (Local5 * 0x0A)
                Index (PBIF, 0x05) = Local6
                Local6 = (Local5 * One)
                Index (PBIF, 0x06) = Local6
                LOW2 = Local6
                Divide (Local1, 0x64, Local3, Local7)
                Index (PBIF, 0x07) = Local7
                Index (PBIF, 0x08) = Local7
            }

            Method (CBIF, 0, NotSerialized)
            {
                If (PUNT)
                {
                    Local0 = DerefOf (Index (PBIF, 0x04))
                    Local0 += 0x01F4
                    Divide (Local0, 0x03E8, Local1, DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, Zero) = Zero
                    Index (PBIF, One) = (DerefOf (Index (PBIF, One)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, 0x02) = (DerefOf (Index (PBIF, 0x02)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, 0x05) = (DerefOf (Index (PBIF, 0x05)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, 0x06) = (DerefOf (Index (PBIF, 0x06)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, 0x07) = (DerefOf (Index (PBIF, 0x07)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, 0x08) = (DerefOf (Index (PBIF, 0x08)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                }
            }

            Method (_BIF, 0, Serialized)  // _BIF: Battery Information
            {
                If (!^^LPCB.HEC.BATP (Zero))
                {
                    Return (NBIF) /* \_SB_.PCI0.BAT0.NBIF */
                }

                If ((^^LPCB.HEC.GBTT (Zero) == 0xFF))
                {
                    Return (NBIF) /* \_SB_.PCI0.BAT0.NBIF */
                }

                Index (PBIF, 0x09) = ^^LPCB.HEC.BIF9 ()
                Index (PBIF, 0x0C) = ONAM /* \ONAM */
                Local0 = ^^LPCB.HEC.BIF0 (Zero)
                Local1 = ^^LPCB.HEC.BIF1 (Zero)
                Local2 = ^^LPCB.HEC.BIF2 (Zero)
                PLFC = Local2
                Local3 = ^^LPCB.HEC.BIF3 (Zero)
                Local4 = ^^LPCB.HEC.BIF4 (Zero)
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                If ((Local4 != Ones))
                                {
                                    FBIF (Local0, Local1, Local2, Local3, Local4)
                                    CBIF ()
                                }
                            }
                        }
                    }
                }

                If ((PUNT == Zero))
                {
                    Local2 *= 0x0A
                }

                LFCC = Local2
                Return (PBIF) /* \_SB_.PCI0.BAT0.PBIF */
            }

            Method (FBST, 4, NotSerialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local0 = Zero
                If (^^LPCB.HEC.ACAP ())
                {
                    Local0 = One
                }

                If (Local0)
                {
                    If (CHGS (Zero))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        Local0 = One
                    }
                }
                Else
                {
                    Local0 = One
                }

                Local2 = (Arg0 & 0x0300)
                If (Local2)
                {
                    Local2 = (One << 0x02)
                    Local0 |= Local2
                }

                If ((Local1 >= 0x8000))
                {
                    Local1 -= 0xFFFF
                }

                Local2 = Arg2
                If ((PUNT == Zero))
                {
                    Local1 *= DVOT /* \_SB_.PCI0.BAT0.DVOT */
                    Local2 *= 0x0A
                }

                Local3 = (Local0 & 0x02)
                If (!Local3)
                {
                    Local3 = (LFCC - Local2)
                    Divide (LFCC, 0xC8, Local4, Local5)
                    If ((Local3 < Local5))
                    {
                        Local2 = LFCC /* \_SB_.PCI0.BAT0.LFCC */
                    }
                }
                Else
                {
                    Divide (LFCC, 0xC8, Local4, Local5)
                    Local4 = (LFCC - Local5)
                    If ((Local2 > Local4))
                    {
                        Local2 = Local4
                    }
                }

                If (!^^LPCB.HEC.ACAP ())
                {
                    Divide (Local2, MBLF, Local3, Local4)
                    If ((Local1 < Local4))
                    {
                        Local1 = Local4
                    }
                }

                Index (PBST, Zero) = Local0
                Index (PBST, One) = Local1
                Index (PBST, 0x02) = Local2
                Index (PBST, 0x03) = Arg3
            }

            Method (CBST, 0, NotSerialized)
            {
                If (PUNT)
                {
                    Index (PBST, One) = (DerefOf (Index (PBST, One)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBST, 0x02) = (DerefOf (Index (PBST, 0x02)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                }
            }

            Method (_BST, 0, Serialized)  // _BST: Battery Status
            {
                Index (PBST, Zero) = Zero
                Index (PBST, One) = Ones
                Index (PBST, 0x02) = Ones
                Index (PBST, 0x03) = Ones
                If (!^^LPCB.HEC.BATP (Zero))
                {
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                If ((^^LPCB.HEC.GBTT (Zero) == 0xFF))
                {
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                If (MES4)
                {
                    MES4--
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                If ((^^LPCB.HEC.BIF2 (Zero) != PLFC))
                {
                    Notify (BAT0, 0x81) // Information Change
                }

                Local0 = ^^LPCB.HEC.BSTS (Zero)
                Local1 = ^^LPCB.HEC.BCRT (Zero)
                Local2 = ^^LPCB.HEC.BRCP (Zero)
                Local3 = ^^LPCB.HEC.BVOT (Zero)
                BATR ()
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                FBST (Local0, Local1, Local2, Local3)
                                CBST ()
                            }
                        }
                    }
                }

                Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (B0CR, Zero)
        Name (B1CR, Zero)
        Method (GGCC, 1, Serialized)
        {
            Local0 = ^LPCB.HEC.BCRT (Arg0)
            BATR ()
            If ((Local0 == Ones))
            {
                If (Arg0)
                {
                    Local0 = B1CR /* \_SB_.PCI0.B1CR */
                }
                Else
                {
                    Local0 = B0CR /* \_SB_.PCI0.B0CR */
                }
            }

            Local1 = (Local0 & 0x8000)
            If (Local1)
            {
                Local0 = Zero
            }

            If (Arg0)
            {
                B1CR = Local0
            }
            Else
            {
                B0CR = Local0
            }

            Return (Local0)
        }
    }

    Scope (_SB.PCI0.LPCB.HEC)
    {
        Name (BADR, 0x0B)
        Name (CADR, 0x09)
        Name (SADR, 0x0A)
        Method (BIF0, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1MD /* \_SB_.PCI0.LPCB.HEC_.B1MD */
                }
                Else
                {
                    Local0 = B0MD /* \_SB_.PCI0.LPCB.HEC_.B0MD */
                }

                If ((Local0 != 0xFFFF))
                {
                    Local1 = (Local0 >> 0x0F)
                    Local1 &= One
                    Local0 = (Local1 ^ One)
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF1, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Local0 = Ones
                    Return (Local0)
                }

                If (Arg0)
                {
                    Local0 = B1DC /* \_SB_.PCI0.LPCB.HEC_.B1DC */
                }
                Else
                {
                    Local0 = B0DC /* \_SB_.PCI0.LPCB.HEC_.B0DC */
                }

                Local0 &= 0xFFFF
                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF2, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1FC /* \_SB_.PCI0.LPCB.HEC_.B1FC */
                }
                Else
                {
                    Local0 = B0FC /* \_SB_.PCI0.LPCB.HEC_.B0FC */
                }

                Local0 &= 0xFFFF
                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF3, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1MD /* \_SB_.PCI0.LPCB.HEC_.B1MD */
                }
                Else
                {
                    Local0 = B0MD /* \_SB_.PCI0.LPCB.HEC_.B0MD */
                }

                If ((Local0 != 0xFFFF))
                {
                    Local0 >>= 0x09
                    Local0 &= One
                    Local0 ^= One
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF4, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1DV /* \_SB_.PCI0.LPCB.HEC_.B1DV */
                }
                Else
                {
                    Local0 = B0DV /* \_SB_.PCI0.LPCB.HEC_.B0DV */
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF9, 0, NotSerialized)
        {
            Name (BSTR, Buffer (0x20) {})
            If (BATP (One))
            {
                Local0 = SMBR (RDBL, BADR, 0x21, One)
            }

            If (BATP (Zero))
            {
                Local0 = SMBR (RDBL, BADR, 0x21, Zero)
            }

            If ((DerefOf (Index (Local0, Zero)) != Zero))
            {
                BSTR = MNAM /* \_SB_.MNAM */
                Index (BSTR, 0x04) = Zero
            }
            Else
            {
                BSTR = DerefOf (Index (Local0, 0x02))
                Index (BSTR, DerefOf (Index (Local0, One))) = Zero
            }

            Return (BSTR) /* \_SB_.PCI0.LPCB.HEC_.BIF9.BSTR */
        }

        Method (BIFA, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1SN /* \_SB_.PCI0.LPCB.HEC_.B1SN */
                }
                Else
                {
                    Local0 = B0SN /* \_SB_.PCI0.LPCB.HEC_.B0SN */
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BSTS, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1ST /* \_SB_.PCI0.LPCB.HEC_.B1ST */
                }
                Else
                {
                    Local0 = B0ST /* \_SB_.PCI0.LPCB.HEC_.B0ST */
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BCRT, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1CC /* \_SB_.PCI0.LPCB.HEC_.B1CC */
                }
                Else
                {
                    Local0 = B0CC /* \_SB_.PCI0.LPCB.HEC_.B0CC */
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BRCP, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1RC /* \_SB_.PCI0.LPCB.HEC_.B1RC */
                }
                Else
                {
                    Local0 = B0RC /* \_SB_.PCI0.LPCB.HEC_.B0RC */
                }

                If ((Local0 == 0xFFFF))
                {
                    Local0 = Ones
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BVOT, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) != Zero))
                {
                    Return (Ones)
                }

                If (Arg0)
                {
                    Local0 = B1VL /* \_SB_.PCI0.LPCB.HEC_.B1VL */
                }
                Else
                {
                    Local0 = B0VL /* \_SB_.PCI0.LPCB.HEC_.B0VL */
                }

                Release (MUEC)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }
    }

    Scope (\)
    {
        Method (CHGS, 1, Serialized)
        {
            Local0 = \_SB.PCI0.LPCB.HEC.BCHG (Arg0)
            Return (Local0)
        }

        Name (BSLF, Zero)
        Method (BATS, 1, Serialized)
        {
            If (Arg0)
            {
                BSLF = One
            }
            Else
            {
                BSLF = Zero
            }
        }

        Method (BATR, 0, Serialized)
        {
        }
    }

    Scope (_SB.PCI0.LPCB.HEC)
    {
        Method (_QA1, 0, NotSerialized)  // _Qxx: EC Query
        {
            DCPF = DCPS (Zero)
            If (DCPF)
            {
                Sleep (0x07D0)
            }

            Notify (BAT0, 0x80) // Status Change
            Notify (BAT0, 0x81) // Information Change
        }

        Method (BATP, 1, Serialized)
        {
            If (!(RRAM (0x0620) & 0x80))
            {
                Return (Zero)
            }

            If (Arg0)
            {
                Return (DCP2) /* \_SB_.DCP2 */
            }
            Else
            {
                Return (DCPF) /* \_SB_.DCPF */
            }
        }

        Method (NBAT, 1, NotSerialized)
        {
            If (BATP (Zero))
            {
                Notify (BAT0, Arg0)
            }
        }
    }

    Scope (\)
    {
        Name (MES4, Zero)
        Method (OEMS, 1, NotSerialized)
        {
            SBRS (Arg0)
            \_SB.PCI0.LPCB.HEC.EC0S (Arg0)
            \_SB.SLPN = Arg0
            \_SB.SLPT = Arg0
            DIAG ((Arg0 + 0xD0))
            If (Arg0)
            {
                STRP (One)
            }

            PRJS (Arg0)
            ISMI (0x9D)
        }

        Method (OEMW, 1, NotSerialized)
        {
            ISMI (0x9E)
            \_SB.SLPT = Zero
            \_SB.PCI0.LPCB.HEC.EC0W (Arg0)
            If ((Arg0 == 0x03)) {}
            SBRW (Arg0)
            If ((Arg0 == 0x04))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            PRJW (Arg0)
            DIAG ((Arg0 + 0xF0))
        }
    }

    Scope (_SB.ATKD)
    {
        Method (AGFN, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (GNBF) /* \_SB_.GNBF */
            }

            Local0 = AGFB (Arg0)
            Local1 = ((Local0 >> 0x10) & 0xFFFF)
            Local0 &= 0xFFFF
            Local2 = GLEN (Arg0)
            If ((Local0 == One))
            {
                GVER (Arg0, Local2)
                STAS &= 0xFE
            }

            If ((Local0 == 0x02))
            {
                BSMI (Arg0)
                STAS &= 0xFE
            }

            AGLN (Arg0, Local0, Local1, Local2)
            OperationRegion (\PARM, SystemMemory, Arg0, 0x08)
            Field (PARM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                STAS,   8, 
                EROR,   8
            }

            If ((STAS == One))
            {
                EROR = One
                STAS |= 0x02
            }

            STAS &= 0xFE
            STAS |= 0x80
            Return (Zero)
        }

        Method (AGFB, 1, NotSerialized)
        {
            OperationRegion (\PAR, SystemMemory, Arg0, 0x08)
            Field (PAR, DWordAcc, NoLock, Preserve)
            {
                FUNC,   32, 
                Offset (0x06), 
                STAS,   8, 
                EROR,   8
            }

            EROR = Zero
            STAS = One
            Return (FUNC) /* \_SB_.ATKD.AGFB.FUNC */
        }

        Method (GLEN, 1, NotSerialized)
        {
            OperationRegion (\PARL, SystemMemory, Arg0, 0x08)
            Field (PARL, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                LEN,    16
            }

            Return (LEN) /* \_SB_.ATKD.GLEN.LEN_ */
        }

        Method (GVER, 2, NotSerialized)
        {
            OperationRegion (\FGVR, SystemMemory, Arg0, Arg1)
            Field (FGVR, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                APID,   16, 
                APRV,   32
            }

            If ((Arg1 < 0x0E))
            {
                Return (0x02)
            }

            If ((APID == One))
            {
                ^^PCI0.LPCB.HEC.PKEN (One)
            }

            Return (Zero)
        }

        Method (GENS, 1, NotSerialized)
        {
        }

        Method (GENW, 1, NotSerialized)
        {
            RTCW = Zero
        }

        Method (BSMI, 1, Serialized)
        {
            BIPA = Arg0
            ISMI (0xA1)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (MF1X, 4, NotSerialized)
        {
            If (((Arg1 & 0xF0) != 0x10))
            {
                Return (Zero)
            }

            OperationRegion (FM1X, SystemMemory, Arg0, 0x08)
            Field (FM1X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM1X,   8, 
                EM1X,   8
            }

            Local0 = One
            If ((Arg1 == 0x10))
            {
                Local0 = MF10 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x11))
            {
                Local0 = MF11 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x12))
            {
                Local0 = MF12 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x13))
            {
                Local0 = MF13 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x14))
            {
                Local0 = MF14 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x15))
            {
                Local0 = MF15 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x16))
            {
                Local0 = MF16 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x17))
            {
                Local0 = MF17 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x18))
            {
                Local0 = MF18 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x19))
            {
                Local0 = MF19 (Arg0, Arg3, Arg2)
            }

            If ((Arg1 == 0x1A))
            {
                Local0 = MF1A (Arg0, Arg3, Arg2)
            }

            SM1X &= 0xFE
            If (Local0)
            {
                EM1X = Local0
                SM1X |= 0x02
            }

            SM1X |= 0x80
            Return (Zero)
        }

        Method (MF10, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G10V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = SRTC (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G10V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F100, SystemMemory, Arg0, Arg1)
            Field (F100, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (SRTC, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F101, SystemMemory, Arg0, Arg1)
            Field (F101, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                DLTM,   16
            }

            RTCW = DLTM /* \_SB_.ATKD.SRTC.DLTM */
            Return (Zero)
        }

        Method (MF11, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G11V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GBAT (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = ASBR (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = ASBE (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = BTCR (Arg0, Arg1)
            }

            If ((Arg2 == 0x80))
            {
                Local0 = GTSB (Arg0, Arg1)
            }

            If ((Arg2 == 0x81))
            {
                Local0 = GPST (Arg0, Arg1)
            }

            If ((Arg2 == 0x82))
            {
                Local0 = SBSM (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G11V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F110, SystemMemory, Arg0, Arg1)
            Field (F110, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GBAT, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F111, SystemMemory, Arg0, Arg1)
            Field (F111, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BTNM,   8, 
                BTTP,   8
            }

            BTNM = One
            BTTP = Zero
            Return (Zero)
        }

        Method (ASBR, 2, NotSerialized)
        {
            If ((Arg1 < 0x30))
            {
                Return (0x02)
            }

            OperationRegion (\F112, SystemMemory, Arg0, Arg1)
            Field (F112, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BATN,   8, 
                BATA,   8, 
                REGS,   8, 
                BDAT,   16, 
                BLEN,   8, 
                BREV,   16, 
                BLK1,   32, 
                BLK2,   32, 
                BLK3,   32, 
                BLK4,   32, 
                BLK5,   32, 
                BLK6,   32, 
                BLK7,   32, 
                BLK8,   32
            }

            If ((BATN >= One))
            {
                Return (0x11)
            }

            If ((BATA == Zero))
            {
                Local0 = ^^PCI0.LPCB.HEC.SMBR (^^PCI0.LPCB.HEC.RDWD, ^^PCI0.LPCB.HEC.BADR, REGS, BATN)
                BDAT = DerefOf (Index (Local0, 0x02))
                Local2 = DerefOf (Index (Local0, Zero))
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == One))
            {
                Local0 = ^^PCI0.LPCB.HEC.SMBW (^^PCI0.LPCB.HEC.WRWD, ^^PCI0.LPCB.HEC.BADR, REGS, BATN, 0x02, BDAT)
                Local2 = DerefOf (Index (Local0, Zero))
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == 0x02))
            {
                Name (BKUF, Buffer (0x20) {})
                Local0 = ^^PCI0.LPCB.HEC.SMBR (^^PCI0.LPCB.HEC.RDBL, ^^PCI0.LPCB.HEC.BADR, REGS, BATN)
                BKUF = DerefOf (Index (Local0, 0x02))
                BLEN = DerefOf (Index (Local0, One))
                Local2 = DerefOf (Index (Local0, Zero))
                CreateDWordField (BKUF, Zero, DAT1)
                CreateDWordField (BKUF, 0x04, DAT2)
                CreateDWordField (BKUF, 0x08, DAT3)
                CreateDWordField (BKUF, 0x0C, DAT4)
                CreateDWordField (BKUF, 0x10, DAT5)
                CreateDWordField (BKUF, 0x14, DAT6)
                CreateDWordField (BKUF, 0x18, DAT7)
                CreateDWordField (BKUF, 0x1C, DAT8)
                BKUF = DerefOf (Index (Local0, 0x02))
                BLK1 = DAT1 /* \_SB_.ATKD.ASBR.DAT1 */
                BLK2 = DAT2 /* \_SB_.ATKD.ASBR.DAT2 */
                BLK3 = DAT3 /* \_SB_.ATKD.ASBR.DAT3 */
                BLK4 = DAT4 /* \_SB_.ATKD.ASBR.DAT4 */
                BLK5 = DAT5 /* \_SB_.ATKD.ASBR.DAT5 */
                BLK6 = DAT6 /* \_SB_.ATKD.ASBR.DAT6 */
                BLK7 = DAT7 /* \_SB_.ATKD.ASBR.DAT7 */
                BLK8 = DAT8 /* \_SB_.ATKD.ASBR.DAT8 */
                BLEN = DerefOf (Index (Local0, One))
                Local2 = DerefOf (Index (Local0, Zero))
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            Return (0x10)
        }

        Method (ASBE, 2, Serialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F113, SystemMemory, Arg0, Arg1)
            Field (F113, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BATN,   8, 
                BATA,   8, 
                REGS,   8, 
                BDAT,   8
            }

            If ((BATN > One))
            {
                Return (0x11)
            }

            If ((BATA == Zero))
            {
                Local2 = ^^PCI0.LPCB.HEC.RBEP (REGS)
                Local3 = (Local2 & 0xFF)
                BDAT = Local3
                Local2 >>= 0x08
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == One))
            {
                Local2 = ^^PCI0.LPCB.HEC.WBEP (REGS, BDAT)
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            Return (0x10)
        }

        Method (BTCR, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F114, SystemMemory, Arg0, Arg1)
            Field (F114, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BCDC,   8
            }

            SBTL (BCDC)
            Return (Zero)
        }

        Method (GTSB, 2, NotSerialized)
        {
            If ((Arg1 < 0x0F))
            {
                Return (0x02)
            }

            OperationRegion (\F118, SystemMemory, Arg0, Arg1)
            Field (F118, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BAST,   16
            }

            Local0 = ^^PCI0.LPCB.HEC.SMBR (^^PCI0.LPCB.HEC.RDWD, ^^PCI0.LPCB.HEC.BADR, 0x16, Zero)
            BAST = DerefOf (Index (Local0, 0x02))
            Local1 = DerefOf (Index (Local0, Zero))
            Local1 &= 0x1F
            If (Local1)
            {
                Local1 += 0x10
            }

            Return (Local1)
        }

        Method (GPST, 2, NotSerialized)
        {
            If ((Arg1 < 0x0F))
            {
                Return (0x02)
            }

            OperationRegion (\F119, SystemMemory, Arg0, Arg1)
            Field (F119, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SORC,   8, 
                GPCT,   8
            }

            If (((SORC == Zero) | (SORC > 0x03)))
            {
                Return (One)
            }

            If ((SORC == One))
            {
                GPCT = ^^PCI0.LPCB.HEC.RPIN (0x02, 0x04)
            }
            Else
            {
                If ((SORC == 0x02))
                {
                    Local0 = ^^PCI0.LPCB.HEC.RPIN (0x02, 0x06)
                    If (Local0)
                    {
                        GPCT = Zero
                    }
                    Else
                    {
                        GPCT = One
                    }
                }
                Else
                {
                    If ((SORC == 0x03))
                    {
                        Local0 = ^^PCI0.LPCB.HEC.RPIN (0x04, 0x06)
                        If (Local0)
                        {
                            GPCT = Zero
                        }
                        Else
                        {
                            GPCT = One
                        }
                    }
                }
            }

            Return (Zero)
        }

        Method (SBSM, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (\F1A3, SystemMemory, Arg0, Arg1)
            Field (F1A3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                EABL,   8
            }

            If ((EABL == One))
            {
                PRJB ()
            }

            Return (Zero)
        }

        Method (MF12, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G12V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GLDI (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = LDCR (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G12V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F120, SystemMemory, Arg0, Arg1)
            Field (F120, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GLDI, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (\F121, SystemMemory, Arg0, Arg1)
            Field (F121, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LDI0,   32, 
                LDI1,   32
            }

            Local0 = Zero
            Local0 |= 0x10
            Local0 |= 0x20
            LDI0 = Local0
            Return (Zero)
        }

        Method (LDCR, 2, NotSerialized)
        {
            If ((Arg1 < 0x0B))
            {
                Return (0x02)
            }

            OperationRegion (\F122, SystemMemory, Arg0, Arg1)
            Field (F122, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LDNM,   8, 
                LCRT,   8
            }

            If ((LDNM == 0x04))
            {
                WLED (LCRT)
                Return (Zero)
            }

            If ((LDNM == 0x05))
            {
                BLED (LCRT)
                Return (Zero)
            }

            Return (0x10)
        }

        Method (MF13, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G13V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GTSI (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GTSV (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = GVSN (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = GVSV (Arg0, Arg1)
            }

            If ((Arg2 == 0x05))
            {
                Local0 = GFNN (Arg0, Arg1)
            }

            If ((Arg2 == 0x06))
            {
                Local0 = GFNS (Arg0, Arg1)
            }

            If ((Arg2 == 0x07))
            {
                Local0 = SFNS (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G13V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F130, SystemMemory, Arg0, Arg1)
            Field (F130, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GTSI, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F131, SystemMemory, Arg0, Arg1)
            Field (F131, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                THRI,   32
            }

            Local0 = Zero
            Local0 |= One
            If ((CPUN >= One))
            {
                Local0 |= 0x0100
            }

            If ((CPUN >= 0x02))
            {
                Local0 |= 0x0200
            }

            If ((CPUN >= 0x03))
            {
                Local0 |= 0x0400
            }

            If ((CPUN >= 0x04))
            {
                Local0 |= 0x0800
            }

            THRI = Local0
            Return (Zero)
        }

        Method (GTSV, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F132, SystemMemory, Arg0, Arg1)
            Field (F132, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                TSNM,   8, 
                TSVL,   8, 
                TSST,   8
            }

            TSST = Zero
            If ((TSNM == Zero))
            {
                TSVL = \_TZ.RTMP ()
                Return (Zero)
            }

            If ((TSNM == 0x08))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            If ((TSNM == 0x09))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            If ((TSNM == 0x0A))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            If ((TSNM == 0x0B))
            {
                BSMI (Arg0)
                Return (Zero)
            }

            Return (0x10)
        }

        Method (GVSN, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F133, SystemMemory, Arg0, Arg1)
            Field (F133, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NMVS,   8
            }

            NMVS = Zero
            Return (Zero)
        }

        Method (GVSV, 2, NotSerialized)
        {
            If ((Arg1 < 0x0B))
            {
                Return (0x02)
            }

            OperationRegion (\F134, SystemMemory, Arg0, Arg1)
            Field (F134, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                VSNM,   8, 
                VSVL,   16
            }

            If ((VSNM > Zero))
            {
                Return (0x10)
            }

            Return (Zero)
        }

        Method (GFNN, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F135, SystemMemory, Arg0, Arg1)
            Field (F135, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NMFN,   32
            }

            NMFN = One
            Return (Zero)
        }

        Method (GFNS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0D))
            {
                Return (0x02)
            }

            OperationRegion (\F136, SystemMemory, Arg0, Arg1)
            Field (F136, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                FNNM,   8, 
                GFNS,   32
            }

            If (((FNNM == Zero) | (FNNM > One)))
            {
                Return (0x10)
            }

            BSMI (Arg0)
            Return (Zero)
        }

        Method (SFNS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F137, SystemMemory, Arg0, Arg1)
            Field (F137, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                FNNB,   8, 
                FNSP,   8
            }

            If ((FNNB > One))
            {
                Return (0x10)
            }

            ^^PCI0.LPCB.HEC.SFNV (FNNB, FNSP)
            Return (Zero)
        }

        Method (MF14, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G14V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GNBT (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GBTS (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G14V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F140, SystemMemory, Arg0, Arg1)
            Field (F140, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GNBT, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F141, SystemMemory, Arg0, Arg1)
            Field (F141, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NBBT,   8
            }

            NBBT = 0x05
            Return (Zero)
        }

        Method (GBTS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F142, SystemMemory, Arg0, Arg1)
            Field (F142, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BTNM,   8, 
                BTST,   8
            }

            Name (BTTB, Package (0x05)
            {
                Package (0x04)
                {
                    Zero, 
                    0x0C, 
                    Zero, 
                    Zero
                }, 

                Package (0x04)
                {
                    Zero, 
                    0x0D, 
                    Zero, 
                    Zero
                }, 

                Package (0x04)
                {
                    Zero, 
                    0x0E, 
                    Zero, 
                    Zero
                }, 

                Package (0x04)
                {
                    Zero, 
                    0x0F, 
                    Zero, 
                    Zero
                }, 

                Package (0x04)
                {
                    Zero, 
                    0x15, 
                    Zero, 
                    Zero
                }
            })
            If ((BTNM > 0x05))
            {
                Return (0x10)
            }

            Local0 = BTNM /* \_SB_.ATKD.GBTS.BTNM */
            Local0--
            Local1 = DerefOf (Index (BTTB, Local0))
            If ((DerefOf (Index (Local1, 0x02)) == Zero))
            {
                Local2 = ^^PCI0.LPCB.HEC.RPIN (DerefOf (Index (Local1, Zero)), DerefOf (Index (Local1, One
                    )))
            }

            If ((DerefOf (Index (Local1, One)) == One))
            {
                Local2 = RGPL (DerefOf (Index (Local1, Zero)), One)
            }

            If ((DerefOf (Index (Local1, One)) == 0x03)) {}
            If ((DerefOf (Index (Local1, 0x02)) == Local2))
            {
                BTST = Zero
            }
            Else
            {
                BTST = One
            }

            Return (Zero)
        }

        Method (MF15, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G15V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GLDB (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = SLDB (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = GDPI (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = SODP (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G15V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F150, SystemMemory, Arg0, Arg1)
            Field (F150, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GLDB, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F151, SystemMemory, Arg0, Arg1)
            Field (F151, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LCDB,   8, 
                MLDB,   8
            }

            LCDB = GPLV ()
            MLDB = 0x0A
            Return (Zero)
        }

        Method (SLDB, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F152, SystemMemory, Arg0, Arg1)
            Field (F152, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LCDL,   8, 
                LTPE,   8
            }

            If ((LTPE == Zero))
            {
                If ((LCDL >= 0x0B))
                {
                    Return (0x10)
                }

                SPLV (LCDL)
                Return (Zero)
            }

            If ((LTPE == One))
            {
                ^^PCI0.LPCB.HEC.SBRV (LCDL)
                Return (Zero)
            }

            Return (0x11)
        }

        Method (GDPI, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (\F153, SystemMemory, Arg0, Arg1)
            Field (F153, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ODPI,   32, 
                ODPC,   32, 
                ODAV,   32
            }

            Local0 = Zero
            Local0 |= One
            Local0 |= 0x02
            Local0 |= 0x10
            ODPI = Local0
            If (^^PCI0.GFX0.PRST ())
            {
                ^^PCI0.GFX0.GETD ()
                Local0 = ACTD /* \_SB_.ACTD */
                ODAV = ^^PCI0.GFX0.MD2A (Local0)
                Local1 = AVLD /* \_SB_.AVLD */
                ODPC = ^^PCI0.GFX0.MD2A (Local1)
            }

            Return (Zero)
        }

        Method (SODP, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F154, SystemMemory, Arg0, Arg1)
            Field (F154, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ODPM,   32
            }

            Local0 = Zero
            Local0 |= One
            Local0 |= 0x02
            Local0 |= 0x10
            Local0 &= ODPM
            If ((Local0 == ODPM))
            {
                SDSP (ODPM)
                Return (Zero)
            }

            Return (0x10)
        }

        Method (MF16, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G16V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = SFBD (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = LCMD (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = BSFN (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = PSSF (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G16V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F160, SystemMemory, Arg0, Arg1)
            Field (F160, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (SFBD, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F161, SystemMemory, Arg0, Arg1)
            Field (F161, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                NXBD,   8
            }

            BSMI (Arg0)
            Return (Zero)
        }

        Method (LCMD, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            BSMI (Arg0)
            Return (Zero)
        }

        Method (BSFN, 2, NotSerialized)
        {
            BSMI (Arg0)
            Return (Zero)
        }

        Method (PSSF, 2, NotSerialized)
        {
            BSMI (Arg0)
            Return (Zero)
        }

        Method (MF17, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G17V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GMDL (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GBSI (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = GECI (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G17V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F170, SystemMemory, Arg0, Arg1)
            Field (F170, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GMDL, 2, NotSerialized)
        {
            If ((Arg1 < 0x19))
            {
                Return (0x02)
            }

            OperationRegion (\F171, SystemMemory, Arg0, Arg1)
            Field (F171, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                MLEN,   8, 
                MDL1,   32, 
                MDL2,   32, 
                MDL3,   32, 
                MDL4,   32
            }

            MDL1 = Zero
            MDL2 = Zero
            MDL3 = Zero
            MDL4 = Zero
            Name (BBUF, Buffer (0x10) {})
            CreateDWordField (BBUF, Zero, DAT1)
            CreateDWordField (BBUF, 0x04, DAT2)
            CreateDWordField (BBUF, 0x08, DAT3)
            CreateDWordField (BBUF, 0x0C, DAT4)
            Local0 = GBMN ()
            MLEN = SizeOf (Local0)
            BBUF = GBMN ()
            MDL1 = DAT1 /* \_SB_.ATKD.GMDL.DAT1 */
            MDL2 = DAT2 /* \_SB_.ATKD.GMDL.DAT2 */
            MDL3 = DAT3 /* \_SB_.ATKD.GMDL.DAT3 */
            MDL4 = DAT4 /* \_SB_.ATKD.GMDL.DAT4 */
            Return (Zero)
        }

        Method (GBSI, 2, NotSerialized)
        {
            If ((Arg1 < 0x19))
            {
                Return (0x02)
            }

            OperationRegion (\F172, SystemMemory, Arg0, Arg1)
            Field (F172, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BLEN,   8, 
                BDL1,   32, 
                BDL2,   32, 
                BDL3,   32, 
                BDL4,   24, 
                YEAR,   32, 
                MON,    16, 
                DAY,    16
            }

            BDL1 = Zero
            BDL2 = Zero
            BDL3 = Zero
            BDL4 = Zero
            Name (BBUF, Buffer (0x10) {})
            CreateDWordField (BBUF, Zero, DAT1)
            CreateDWordField (BBUF, 0x04, DAT2)
            CreateDWordField (BBUF, 0x08, DAT3)
            CreateDWordField (BBUF, 0x0C, DAT4)
            Local0 = GBRV ()
            BLEN = SizeOf (Local0)
            BBUF = GBRV ()
            BDL1 = DAT1 /* \_SB_.ATKD.GBSI.DAT1 */
            BDL2 = DAT2 /* \_SB_.ATKD.GBSI.DAT2 */
            BDL3 = DAT3 /* \_SB_.ATKD.GBSI.DAT3 */
            BDL4 = DAT4 /* \_SB_.ATKD.GBSI.DAT4 */
            CreateWordField (BBUF, Zero, WRD0)
            BBUF = "2013"
            YEAR = DAT1 /* \_SB_.ATKD.GBSI.DAT1 */
            BBUF = "08"
            MON = WRD0 /* \_SB_.ATKD.GBSI.WRD0 */
            BBUF = "14"
            DAY = WRD0 /* \_SB_.ATKD.GBSI.WRD0 */
            Return (Zero)
        }

        Method (GECI, 2, NotSerialized)
        {
            If ((Arg1 < 0x19))
            {
                Return (0x02)
            }

            OperationRegion (\F173, SystemMemory, Arg0, Arg1)
            Field (F173, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ELEN,   8, 
                EDL1,   32, 
                EDL2,   32, 
                EDL3,   32, 
                EDL4,   32
            }

            EDL1 = Zero
            EDL2 = Zero
            EDL3 = Zero
            EDL4 = Zero
            BSMI (Arg0)
            Return (Zero)
        }

        Method (MF18, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G18V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GDVI (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = GDVS (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = SDPW (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G18V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F180, SystemMemory, Arg0, Arg1)
            Field (F180, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GDVI, 2, NotSerialized)
        {
            If ((Arg1 < 0x18))
            {
                Return (0x02)
            }

            OperationRegion (\F181, SystemMemory, Arg0, Arg1)
            Field (F181, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                LDI0,   32, 
                LDI1,   32
            }

            LDI0 = Zero
            Return (Zero)
        }

        Method (GDVS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F182, SystemMemory, Arg0, Arg1)
            Field (F182, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                DNUM,   8, 
                DSTS,   8
            }

            Local0 = (One << DNUM) /* \_SB_.ATKD.GDVS.DNUM */
            If (((Local0 & Zero) == Zero))
            {
                Return (0x10)
            }

            Return (Zero)
        }

        Method (SDPW, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F183, SystemMemory, Arg0, Arg1)
            Field (F183, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                DNUM,   8, 
                DCTR,   8
            }

            Local0 = (One << DNUM) /* \_SB_.ATKD.SDPW.DNUM */
            If (((Local0 & Zero) == Zero))
            {
                Return (0x10)
            }

            If ((DCTR > One))
            {
                Return (0x11)
            }

            Return (Zero)
        }

        Method (MF19, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G19V (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = ACMS (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = CSIN (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G19V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F190, SystemMemory, Arg0, Arg1)
            Field (F190, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (ACMS, 2, NotSerialized)
        {
            BSMI (Arg0)
            Return (Zero)
        }

        Method (CSIN, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F192, SystemMemory, Arg0, Arg1)
            Field (F192, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                CMAX,   16
            }

            CMAX = 0x7F
            Return (Zero)
        }

        Method (MF1A, 3, NotSerialized)
        {
            Local0 = One
            If ((Arg2 == Zero))
            {
                Local0 = G1AV (Arg0, Arg1)
            }

            If ((Arg2 == One))
            {
                Local0 = GWDS (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = SWDS (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G1AV, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F1A0, SystemMemory, Arg0, Arg1)
            Field (F1A0, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (GWDS, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (\F1A1, SystemMemory, Arg0, Arg1)
            Field (F1A1, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                WDS0,   32, 
                WDS1,   32
            }

            Local0 = Zero
            Local1 = Zero
            Local2 = Zero
            Local1 = RGPL (0x1C, One)
            If (Local1)
            {
                Local0 |= 0x08
            }
            Else
            {
                Local0 &= 0xFFF7
            }

            If (BTDP)
            {
                Local0 |= 0x10
            }

            Local1 = RGPL (0x30, One)
            If (Local1)
            {
                Local0 |= 0x20
            }
            Else
            {
                Local0 &= 0xFFDF
            }

            If (WWDP)
            {
                Local0 |= 0x40
            }

            If (WMDP)
            {
                Local0 |= 0x0100
            }

            WDS0 = Local0
            Return (Zero)
        }

        Method (SWDS, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F1A2, SystemMemory, Arg0, Arg1)
            Field (F1A2, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SWD0,   8, 
                SWD1,   8
            }

            Local0 = SWD0 /* \_SB_.ATKD.SWDS.SWD0 */
            Local1 = (Local0 & One)
            Local1 >>= Zero
            OWLD (Local1)
            Local1 = (Local0 & 0x02)
            Local1 >>= One
            OBTD (Local1)
            Return (Zero)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (AGLN, 4, NotSerialized)
        {
            CPUX (Arg0, Arg1, Arg2, Arg3)
            MF1X (Arg0, Arg1, Arg2, Arg3)
            MF1F (Arg0, Arg1, Arg2, Arg3)
            MF42 (Arg0, Arg1, Arg2, Arg3)
            ^^PCI0.LPCB.HEC.MF63 (Arg0, Arg1, Arg2, Arg3)
            ^^PCI0.LPCB.HEC.MF30 (Arg0, Arg1, Arg2, Arg3)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (GBRV, 0, NotSerialized)
        {
            Local0 = "208"
            Return (Local0)
        }

        Method (GBMN, 0, NotSerialized)
        {
            Local0 = "X750JB"
            Return (Local0)
        }
    }

    Scope (WMI0)
    {
        Name (_WDG, Buffer (0x01B8)
        {
            /* 0000 */  0x00, 0x24, 0x14, 0x39, 0xA3, 0xC6, 0xFA, 0x40,  /* .$.9...@ */
            /* 0008 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  /* ...&R.A. */
            /* 0010 */  0x30, 0x30, 0x01, 0x01, 0x00, 0x24, 0x14, 0x49,  /* 00...$.I */
            /* 0018 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  /* ...@...& */
            /* 0020 */  0x52, 0x83, 0x41, 0x00, 0x30, 0x31, 0x01, 0x01,  /* R.A.01.. */
            /* 0028 */  0x00, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  /* .$.J...@ */
            /* 0030 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  /* ...&R.A. */
            /* 0038 */  0x30, 0x32, 0x01, 0x01, 0x01, 0x24, 0x14, 0x49,  /* 02...$.I */
            /* 0040 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  /* ...@...& */
            /* 0048 */  0x52, 0x83, 0x41, 0x00, 0x31, 0x31, 0x01, 0x01,  /* R.A.11.. */
            /* 0050 */  0x01, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  /* .$.J...@ */
            /* 0058 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  /* ...&R.A. */
            /* 0060 */  0x31, 0x32, 0x01, 0x01, 0x02, 0x24, 0x14, 0x49,  /* 12...$.I */
            /* 0068 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  /* ...@...& */
            /* 0070 */  0x52, 0x83, 0x41, 0x00, 0x32, 0x31, 0x01, 0x01,  /* R.A.21.. */
            /* 0078 */  0x02, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  /* .$.J...@ */
            /* 0080 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  /* ...&R.A. */
            /* 0088 */  0x32, 0x32, 0x01, 0x01, 0x03, 0x24, 0x14, 0x49,  /* 22...$.I */
            /* 0090 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  /* ...@...& */
            /* 0098 */  0x52, 0x83, 0x41, 0x00, 0x33, 0x31, 0x01, 0x01,  /* R.A.31.. */
            /* 00A0 */  0x03, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  /* .$.J...@ */
            /* 00A8 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  /* ...&R.A. */
            /* 00B0 */  0x33, 0x32, 0x01, 0x01, 0x04, 0x24, 0x14, 0x49,  /* 32...$.I */
            /* 00B8 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  /* ...@...& */
            /* 00C0 */  0x52, 0x83, 0x41, 0x00, 0x34, 0x31, 0x01, 0x01,  /* R.A.41.. */
            /* 00C8 */  0x04, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  /* .$.J...@ */
            /* 00D0 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  /* ...&R.A. */
            /* 00D8 */  0x34, 0x32, 0x01, 0x01, 0x05, 0x24, 0x14, 0x49,  /* 42...$.I */
            /* 00E0 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  /* ...@...& */
            /* 00E8 */  0x52, 0x83, 0x41, 0x00, 0x35, 0x31, 0x01, 0x01,  /* R.A.51.. */
            /* 00F0 */  0x05, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  /* .$.J...@ */
            /* 00F8 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  /* ...&R.A. */
            /* 0100 */  0x35, 0x32, 0x01, 0x01, 0x06, 0x24, 0x14, 0x49,  /* 52...$.I */
            /* 0108 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  /* ...@...& */
            /* 0110 */  0x52, 0x83, 0x41, 0x00, 0x36, 0x31, 0x01, 0x01,  /* R.A.61.. */
            /* 0118 */  0x06, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  /* .$.J...@ */
            /* 0120 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  /* ...&R.A. */
            /* 0128 */  0x36, 0x32, 0x01, 0x01, 0x07, 0x24, 0x14, 0x49,  /* 62...$.I */
            /* 0130 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  /* ...@...& */
            /* 0138 */  0x52, 0x83, 0x41, 0x00, 0x37, 0x31, 0x01, 0x01,  /* R.A.71.. */
            /* 0140 */  0x07, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,  /* .$.J...@ */
            /* 0148 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  /* ...&R.A. */
            /* 0150 */  0x37, 0x32, 0x01, 0x01, 0x00, 0x24, 0x14, 0x59,  /* 72...$.Y */
            /* 0158 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  /* ...@...& */
            /* 0160 */  0x52, 0x83, 0x41, 0x00, 0x80, 0x00, 0x01, 0x08,  /* R.A..... */
            /* 0168 */  0x00, 0x24, 0x14, 0x69, 0xA3, 0xC6, 0xFA, 0x40,  /* .$.i...@ */
            /* 0170 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  /* ...&R.A. */
            /* 0178 */  0x30, 0x35, 0x01, 0x02, 0x00, 0x24, 0x14, 0x79,  /* 05...$.y */
            /* 0180 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,  /* ...@...& */
            /* 0188 */  0x52, 0x83, 0x41, 0x00, 0x30, 0x36, 0x01, 0x02,  /* R.A.06.. */
            /* 0190 */  0x00, 0x24, 0x14, 0x89, 0xA3, 0xC6, 0xFA, 0x40,  /* .$.....@ */
            /* 0198 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,  /* ...&R.A. */
            /* 01A0 */  0x30, 0x37, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  /* 07..!... */
            /* 01A8 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  /* f....... */
            /* 01B0 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x01   /* ..).BA.. */
        })
        Name (EVCD, Zero)
        Method (WQ00, 1, NotSerialized)
        {
            Return (EVCD) /* \WMI0.EVCD */
        }

        OperationRegion (\WMIA, SystemMemory, \_SB.WMIB, 0x9000)
        Field (WMIA, AnyAcc, NoLock, Preserve)
        {
            WAG1,   2048, 
            WAG2,   2048, 
            WAG3,   2048, 
            WAG4,   2048, 
            WAG5,   2048, 
            WAG6,   2048, 
            WAG7,   2048, 
            WAG8,   2048, 
            Offset (0x1000), 
            WPD1,   32768, 
            WPD2,   32768, 
            WPD3,   32768, 
            WPD4,   32768, 
            WPD5,   32768, 
            WPD6,   32768, 
            WPD7,   32768, 
            WPD8,   32768
        }

        Method (WQ01, 1, NotSerialized)
        {
            Return (WAG1) /* \WMI0.WAG1 */
        }

        Method (WS01, 2, NotSerialized)
        {
            WAG1 = Arg1
            Return (Zero)
        }

        Method (WQ02, 1, NotSerialized)
        {
            Return (WPD1) /* \WMI0.WPD1 */
        }

        Method (WS02, 2, NotSerialized)
        {
            WPD1 = Arg1
            Return (Zero)
        }

        Method (WQ11, 1, NotSerialized)
        {
            Return (WAG2) /* \WMI0.WAG2 */
        }

        Method (WS11, 2, NotSerialized)
        {
            WAG2 = Arg1
            Return (Zero)
        }

        Method (WQ12, 1, NotSerialized)
        {
            Return (WPD2) /* \WMI0.WPD2 */
        }

        Method (WS12, 2, NotSerialized)
        {
            WPD2 = Arg1
            Return (Zero)
        }

        Method (WQ21, 1, NotSerialized)
        {
            Return (WAG3) /* \WMI0.WAG3 */
        }

        Method (WS21, 2, NotSerialized)
        {
            WAG3 = Arg1
            Return (Zero)
        }

        Method (WQ22, 1, NotSerialized)
        {
            Return (WPD3) /* \WMI0.WPD3 */
        }

        Method (WS22, 2, NotSerialized)
        {
            WPD3 = Arg1
            Return (Zero)
        }

        Method (WQ31, 1, NotSerialized)
        {
            Return (WAG4) /* \WMI0.WAG4 */
        }

        Method (WS31, 2, NotSerialized)
        {
            WAG4 = Arg1
            Return (Zero)
        }

        Method (WQ32, 1, NotSerialized)
        {
            Return (WPD4) /* \WMI0.WPD4 */
        }

        Method (WS32, 2, NotSerialized)
        {
            WPD4 = Arg1
            Return (Zero)
        }

        Method (WQ41, 1, NotSerialized)
        {
            Return (WAG5) /* \WMI0.WAG5 */
        }

        Method (WS41, 2, NotSerialized)
        {
            WAG5 = Arg1
            Return (Zero)
        }

        Method (WQ42, 1, NotSerialized)
        {
            Return (WPD5) /* \WMI0.WPD5 */
        }

        Method (WS42, 2, NotSerialized)
        {
            WPD5 = Arg1
            Return (Zero)
        }

        Method (WQ51, 1, NotSerialized)
        {
            Return (WAG6) /* \WMI0.WAG6 */
        }

        Method (WS51, 2, NotSerialized)
        {
            WAG6 = Arg1
            Return (Zero)
        }

        Method (WQ52, 1, NotSerialized)
        {
            Return (WPD6) /* \WMI0.WPD6 */
        }

        Method (WS52, 2, NotSerialized)
        {
            WPD6 = Arg1
            Return (Zero)
        }

        Method (WQ61, 1, NotSerialized)
        {
            Return (WAG7) /* \WMI0.WAG7 */
        }

        Method (WS61, 2, NotSerialized)
        {
            WAG7 = Arg1
            Return (Zero)
        }

        Method (WQ62, 1, NotSerialized)
        {
            Return (WPD7) /* \WMI0.WPD7 */
        }

        Method (WS62, 2, NotSerialized)
        {
            WPD7 = Arg1
            Return (Zero)
        }

        Method (WQ71, 1, NotSerialized)
        {
            Return (WAG8) /* \WMI0.WAG8 */
        }

        Method (WS71, 2, NotSerialized)
        {
            WAG8 = Arg1
            Return (Zero)
        }

        Method (WQ72, 1, NotSerialized)
        {
            Return (WPD8) /* \WMI0.WPD8 */
        }

        Method (WS72, 2, NotSerialized)
        {
            WPD8 = Arg1
            Return (Zero)
        }

        Method (WM05, 3, NotSerialized)
        {
            CreateDWordField (Arg2, Zero, WMA5)
            If ((WMA5 == One))
            {
                WMIG (\_SB.WMIB, (\_SB.WMIB + 0x1000), One)
                Return (Zero)
            }

            If ((WMA5 == 0x02))
            {
                WMIG ((\_SB.WMIB + 0x0100), (\_SB.WMIB + 0x2000), 0x02)
                Return (Zero)
            }

            If ((WMA5 == 0x03))
            {
                WMIG ((\_SB.WMIB + 0x0200), (\_SB.WMIB + 0x3000), 0x03)
                Return (Zero)
            }

            If ((WMA5 == 0x04))
            {
                WMIG ((\_SB.WMIB + 0x0300), (\_SB.WMIB + 0x4000), 0x04)
                Return (Zero)
            }

            If ((WMA5 == 0x05))
            {
                WMIG ((\_SB.WMIB + 0x0400), (\_SB.WMIB + 0x5000), 0x05)
                Return (Zero)
            }

            If ((WMA5 == 0x06))
            {
                WMIG ((\_SB.WMIB + 0x0500), (\_SB.WMIB + 0x6000), 0x06)
                Return (Zero)
            }

            If ((WMA5 == 0x07))
            {
                WMIG ((\_SB.WMIB + 0x0600), (\_SB.WMIB + 0x7000), 0x07)
                Return (Zero)
            }

            If ((WMA5 == 0x08))
            {
                WMIG ((\_SB.WMIB + 0x0700), (\_SB.WMIB + 0x8000), 0x08)
                Return (Zero)
            }

            Return (Zero)
        }

        Method (WM06, 3, Serialized)
        {
            CreateDWordField (Arg2, Zero, WM6A)
            Local0 = INIT (WM6A)
            Return (Local0)
        }

        Method (WM07, 3, Serialized)
        {
            CreateDWordField (Arg2, Zero, WM7A)
            Local0 = WDOG (WM7A)
            Return (Local0)
        }

        Method (NTFY, 1, Serialized)
        {
            If (!QNTY (Arg0))
            {
                Return (Zero)
            }

            EVCD = Arg0
            Notify (WMI0, 0x80) // Status Change
        }

        Method (WSMI, 1, Serialized)
        {
            \_SB.WMIS = Arg0
            ISMI (0xE3)
        }

        Name (WQBA, Buffer (0x0914)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  /* FOMB.... */
            /* 0008 */  0x04, 0x09, 0x00, 0x00, 0x50, 0x67, 0x00, 0x00,  /* ....Pg.. */
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  /* DS...}.T */
            /* 0018 */  0x28, 0xC7, 0xB2, 0x00, 0x01, 0x06, 0x18, 0x42,  /* (......B */
            /* 0020 */  0x10, 0x2B, 0x10, 0x92, 0x2B, 0x81, 0x42, 0x04,  /* .+..+.B. */
            /* 0028 */  0x0A, 0x44, 0x24, 0x81, 0x30, 0x28, 0x0D, 0x20,  /* .D$.0(.  */
            /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  /* ..!.LL.. */
            /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  /* .y.`S.I. */
            /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  /* ...Q..J. */
            /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  /* .$.0/@.. */
            /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  /* ..l.0-.1 */
            /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  /* $..N.,.B */
            /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  /* B.(..[.v */
            /* 0068 */  0x44, 0x49, 0x16, 0xB0, 0xA3, 0x30, 0x09, 0x3C,  /* DI...0.< */
            /* 0070 */  0x8A, 0xC8, 0x46, 0xE3, 0xD0, 0xD8, 0x61, 0x58,  /* ..F...aX */
            /* 0078 */  0x26, 0x98, 0x06, 0x71, 0x18, 0x65, 0x23, 0x8B,  /* &..q.e#. */
            /* 0080 */  0xC0, 0x13, 0xEA, 0x74, 0x74, 0x05, 0x08, 0x13,  /* ...tt... */
            /* 0088 */  0x20, 0x1E, 0x55, 0x18, 0xCD, 0x41, 0x91, 0x08,  /*  .U..A.. */
            /* 0090 */  0xD0, 0x28, 0x31, 0x63, 0x22, 0xB0, 0x9D, 0x63,  /* .(1c"..c */
            /* 0098 */  0x6B, 0x14, 0xA7, 0x51, 0xB8, 0x00, 0xE9, 0x18,  /* k..Q.... */
            /* 00A0 */  0x1A, 0xC1, 0x71, 0x85, 0xF7, 0xC8, 0x8E, 0x90,  /* ..q..... */
            /* 00A8 */  0x59, 0x1C, 0x8B, 0x20, 0x43, 0x85, 0xEB, 0x10,  /* Y.. C... */
            /* 00B0 */  0x4E, 0x73, 0x32, 0xC8, 0x89, 0x9C, 0x49, 0xEC,  /* Ns2...I. */
            /* 00B8 */  0x08, 0x05, 0x09, 0xB0, 0x8E, 0x21, 0xA4, 0x58,  /* .....!.X */
            /* 00C0 */  0x51, 0x6A, 0xC6, 0xD3, 0x0C, 0x82, 0x34, 0x0A,  /* Qj....4. */
            /* 00C8 */  0xA5, 0xC9, 0x79, 0x00, 0x61, 0xC2, 0xC3, 0x20,  /* ..y.a..  */
            /* 00D0 */  0x30, 0xFE, 0x11, 0x61, 0x64, 0x40, 0xC8, 0x33,  /* 0..ad@.3 */
            /* 00D8 */  0xB2, 0x86, 0x6A, 0x02, 0xBB, 0x17, 0xE0, 0x6C,  /* ..j....l */
            /* 00E0 */  0x6A, 0x32, 0x36, 0x39, 0x29, 0x9B, 0x1D, 0x41,  /* j269)..A */
            /* 00E8 */  0x68, 0x0B, 0x5E, 0xDA, 0x04, 0x18, 0x04, 0x13,  /* h.^..... */
            /* 00F0 */  0x4A, 0x24, 0x0F, 0xE5, 0x78, 0xA2, 0x54, 0x88,  /* J$..x.T. */
            /* 00F8 */  0xA4, 0xF1, 0xC5, 0x88, 0x52, 0x1C, 0x8A, 0x60,  /* ....R..` */
            /* 0100 */  0x23, 0xB6, 0x86, 0x21, 0x98, 0x98, 0x21, 0xE3,  /* #..!..!. */
            /* 0108 */  0x07, 0xB7, 0xFD, 0x83, 0x01, 0x53, 0x00, 0xD1,  /* .....S.. */
            /* 0110 */  0x02, 0x88, 0x22, 0x8D, 0x06, 0x75, 0x18, 0x48,  /* .."..u.H */
            /* 0118 */  0xF0, 0x70, 0xE0, 0x71, 0x9E, 0xD6, 0xF9, 0x1D,  /* .p.q.... */
            /* 0120 */  0xD7, 0x41, 0x04, 0x39, 0xE1, 0xE3, 0xAA, 0xF3,  /* .A.9.... */
            /* 0128 */  0x54, 0x40, 0x46, 0xC6, 0xFE, 0xFF, 0x58, 0x09,  /* T@F...X. */
            /* 0130 */  0x3A, 0x38, 0x26, 0x40, 0x71, 0x0D, 0xA8, 0x69,  /* :8&@q..i */
            /* 0138 */  0x3E, 0x1D, 0xB0, 0x81, 0x86, 0xC3, 0x0C, 0xD1,  /* >....... */
            /* 0140 */  0xA3, 0x0D, 0x77, 0x02, 0x87, 0xC8, 0x00, 0x3D,  /* ..w....= */
            /* 0148 */  0xA2, 0x07, 0x03, 0xEC, 0x10, 0x4F, 0xE6, 0x25,  /* .....O.% */
            /* 0150 */  0xA0, 0x54, 0x01, 0x66, 0x4F, 0x08, 0x9A, 0x76,  /* .T.fO..v */
            /* 0158 */  0x82, 0xE3, 0xF1, 0x71, 0xC0, 0xF3, 0x39, 0xE1,  /* ...q..9. */
            /* 0160 */  0x04, 0x96, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED,  /* ..?..... */
            /* 0168 */  0x71, 0x9E, 0xD6, 0x5B, 0x81, 0x8F, 0x00, 0x26,  /* q..[...& */
            /* 0170 */  0xB0, 0x58, 0x08, 0x6D, 0x52, 0xE3, 0x01, 0x02,  /* .X.mR... */
            /* 0178 */  0x8A, 0x0F, 0x05, 0x42, 0x78, 0x75, 0xF0, 0x7C,  /* ...Bxu.| */
            /* 0180 */  0x4D, 0x30, 0x32, 0x84, 0x9C, 0x8C, 0x07, 0x35,  /* M02....5 */
            /* 0188 */  0x0A, 0x83, 0xD6, 0x0A, 0xAE, 0x9B, 0x40, 0x02,  /* ......@. */
            /* 0190 */  0x47, 0x84, 0xD0, 0x67, 0xC3, 0xA2, 0x86, 0x4D,  /* G..g...M */
            /* 0198 */  0x8F, 0x16, 0xFC, 0x54, 0xC1, 0x20, 0xCF, 0xE0,  /* ...T. .. */
            /* 01A0 */  0x11, 0xC0, 0x23, 0x39, 0x21, 0x1F, 0x3E, 0x3C,  /* ..#9!.>< */
            /* 01A8 */  0x30, 0xF8, 0xB3, 0xF0, 0x91, 0x02, 0x1C, 0x1E,  /* 0....... */
            /* 01B0 */  0xC1, 0x84, 0xF3, 0x0A, 0x01, 0x6B, 0xA4, 0xF0,  /* .....k.. */
            /* 01B8 */  0x6F, 0x11, 0x46, 0xF6, 0xA9, 0xE1, 0xB5, 0x21,  /* o.F....! */
            /* 01C0 */  0x81, 0x0F, 0x1E, 0x81, 0xB1, 0x43, 0xB5, 0x5F,  /* .....C._ */
            /* 01C8 */  0x01, 0x08, 0xC1, 0xA3, 0x3D, 0x0A, 0x3C, 0x7B,  /* ....=.<{ */
            /* 01D0 */  0x44, 0x78, 0xDC, 0xC0, 0xFC, 0xFF, 0x8F, 0x1B,  /* Dx...... */
            /* 01D8 */  0xB0, 0x09, 0x8A, 0x1C, 0x20, 0x7A, 0x0C, 0xFC,  /* .... z.. */
            /* 01E0 */  0x04, 0x71, 0x0A, 0xF1, 0xC3, 0x1F, 0xC3, 0x11,  /* .q...... */
            /* 01E8 */  0x45, 0x89, 0x7C, 0x48, 0x3E, 0x9C, 0x18, 0xE1,  /* E.|H>... */
            /* 01F0 */  0x10, 0x9E, 0x49, 0xCE, 0xC0, 0x07, 0x0C, 0x4F,  /* ..I....O */
            /* 01F8 */  0xEB, 0x14, 0x5E, 0x24, 0x3C, 0x02, 0x4C, 0xA0,  /* ..^$<.L. */
            /* 0200 */  0x43, 0x0C, 0x8D, 0xB2, 0x7E, 0x45, 0x80, 0x41,  /* C...~E.A */
            /* 0208 */  0x9D, 0x63, 0x00, 0x57, 0x30, 0xCF, 0x31, 0xE0,  /* .c.W0.1. */
            /* 0210 */  0x3B, 0x3E, 0xF0, 0x6B, 0x00, 0xE6, 0x7C, 0xF2,  /* ;>.k..|. */
            /* 0218 */  0x14, 0x03, 0x07, 0x97, 0x81, 0xBC, 0x04, 0xC4,  /* ........ */
            /* 0220 */  0x79, 0x77, 0xF1, 0xCD, 0xC4, 0xD7, 0x02, 0xE3,  /* yw...... */
            /* 0228 */  0x3E, 0xC4, 0x80, 0x61, 0x60, 0x0F, 0x31, 0xE0,  /* >..a`.1. */
            /* 0230 */  0xFC, 0xFF, 0x1F, 0x62, 0xE0, 0x05, 0x3F, 0xC4,  /* ...b..?. */
            /* 0238 */  0x00, 0x34, 0x91, 0x77, 0xBE, 0x90, 0x91, 0x55,  /* .4.w...U */
            /* 0240 */  0xF8, 0x10, 0x83, 0xBA, 0x21, 0x9C, 0xCF, 0x43,  /* ....!..C */
            /* 0248 */  0xCA, 0xD3, 0x01, 0x93, 0x73, 0xCE, 0xA0, 0x87,  /* ....s... */
            /* 0250 */  0x18, 0xE0, 0x01, 0x88, 0xF7, 0x3E, 0x65, 0x32,  /* .....>e2 */
            /* 0258 */  0x82, 0x33, 0x35, 0xA0, 0x51, 0x7D, 0xAE, 0x00,  /* .35.Q}.. */
            /* 0260 */  0xC7, 0x79, 0x82, 0xFF, 0xFF, 0xCF, 0x13, 0x18,  /* .y...... */
            /* 0268 */  0xBC, 0xD7, 0x0A, 0x76, 0x0C, 0x60, 0x67, 0x0A,  /* ...v.`g. */
            /* 0270 */  0x38, 0x57, 0x0A, 0x9F, 0x5A, 0x7C, 0x4E, 0xF0,  /* 8W..Z|N. */
            /* 0278 */  0x18, 0xF9, 0x58, 0x0C, 0x1A, 0xF2, 0x41, 0xC0,  /* ..X...A. */
            /* 0280 */  0x0B, 0xB4, 0xAC, 0xB3, 0x0D, 0x68, 0x2E, 0x13,  /* .....h.. */
            /* 0288 */  0xCF, 0x3D, 0xD8, 0xA3, 0x0D, 0x18, 0x90, 0x2A,  /* .=.....* */
            /* 0290 */  0xBD, 0x05, 0xE8, 0x02, 0x82, 0x23, 0xF0, 0xC1,  /* .....#.. */
            /* 0298 */  0x06, 0xF8, 0xC4, 0x3A, 0xD5, 0xD0, 0x30, 0x63,  /* ...:..0c */
            /* 02A0 */  0x54, 0x10, 0x18, 0xD4, 0xC1, 0x06, 0x70, 0x75,  /* T.....pu */
            /* 02A8 */  0xE8, 0xF0, 0xC1, 0x06, 0x3C, 0xFF, 0xFF, 0x11,  /* ....<... */
            /* 02B0 */  0xB2, 0xC1, 0x9C, 0x44, 0x98, 0xA3, 0x08, 0xF6,  /* ...D.... */
            /* 02B8 */  0x2C, 0xE1, 0x9B, 0x0D, 0x78, 0xB0, 0xB1, 0x27,  /* ,...x..' */
            /* 02C0 */  0x1B, 0xB0, 0x9C, 0x09, 0x9E, 0x6C, 0x80, 0x49,  /* .....l.I */
            /* 02C8 */  0xF8, 0x93, 0x0D, 0x40, 0x1E, 0xD8, 0x27, 0x81,  /* ...@..'. */
            /* 02D0 */  0x77, 0x80, 0xFF, 0xFF, 0x93, 0x0D, 0x60, 0xF1,  /* w.....`. */
            /* 02D8 */  0x4A, 0x81, 0x3D, 0xD9, 0x40, 0x5E, 0xBC, 0x4E,  /* J.=.@^.N */
            /* 02E0 */  0x36, 0xE0, 0x3A, 0x03, 0x82, 0xED, 0x08, 0x02,  /* 6.:..... */
            /* 02E8 */  0xF3, 0x6C, 0x03, 0x9C, 0xCE, 0x80, 0xC0, 0xE1,  /* .l...... */
            /* 02F0 */  0xFF, 0x7F, 0x06, 0x04, 0x1C, 0x9E, 0x5B, 0x9E,  /* ......[. */
            /* 02F8 */  0x01, 0xC1, 0x75, 0xF2, 0x64, 0x67, 0x40, 0x70,  /* ..u.dg@p */
            /* 0300 */  0xA1, 0x3C, 0x03, 0x02, 0x66, 0xFF, 0xFF, 0x67,  /* .<..f..g */
            /* 0308 */  0x40, 0xC0, 0xD2, 0xE9, 0x80, 0x9D, 0x01, 0x01,  /* @....... */
            /* 0310 */  0x4E, 0xFD, 0xFF, 0x2F, 0x20, 0xFC, 0x0C, 0x08,  /* N../ ... */
            /* 0318 */  0x30, 0xEC, 0x66, 0x03, 0x1B, 0x1B, 0x7B, 0xB2,  /* 0.f...{. */
            /* 0320 */  0x01, 0xCB, 0x19, 0x10, 0x77, 0xB2, 0x01, 0xEF,  /* ....w... */
            /* 0328 */  0xFF, 0xFF, 0x0C, 0x08, 0x30, 0xE9, 0x64, 0x03,  /* ....0.d. */
            /* 0330 */  0x58, 0xFB, 0xFF, 0x9F, 0x01, 0x01, 0x63, 0x67,  /* X.....cg */
            /* 0338 */  0x1B, 0x60, 0x75, 0x06, 0x04, 0xBC, 0xFF, 0xFF,  /* .`u..... */
            /* 0340 */  0xCF, 0x80, 0xF8, 0x63, 0xCB, 0x33, 0x20, 0xB8,  /* ...c.3 . */
            /* 0348 */  0x70, 0x9F, 0x01, 0xC1, 0x87, 0xF1, 0x0C, 0x08,  /* p....... */
            /* 0350 */  0xF0, 0xEF, 0x74, 0xC0, 0x8E, 0x36, 0xFC, 0xFF,  /* ..t..6.. */
            /* 0358 */  0x7F, 0x06, 0x04, 0x18, 0x75, 0x10, 0x60, 0x67,  /* ....u.`g */
            /* 0360 */  0x40, 0xC0, 0xD3, 0xFF, 0xFF, 0x0C, 0x08, 0x58,  /* @......X */
            /* 0368 */  0xBB, 0xD9, 0xC0, 0xC6, 0xC6, 0x9E, 0x6C, 0xC0,  /* ......l. */
            /* 0370 */  0x72, 0x06, 0xC4, 0x9D, 0x6C, 0xC0, 0x7F, 0x06,  /* r...l... */
            /* 0378 */  0x04, 0x5C, 0xFD, 0xFF, 0xCF, 0x80, 0x80, 0x95,  /* .\...... */
            /* 0380 */  0x93, 0x0D, 0xE0, 0xF1, 0x0C, 0x08, 0xF8, 0x39,  /* .......9 */
            /* 0388 */  0x0A, 0xFC, 0xFF, 0x9F, 0x01, 0x01, 0x6E, 0xCD,  /* ......n. */
            /* 0390 */  0xE1, 0x19, 0x10, 0x5C, 0x33, 0xF3, 0x19, 0x10,  /* ...\3... */
            /* 0398 */  0x6C, 0xF7, 0x1A, 0x9F, 0x01, 0xC1, 0xFF, 0xFF,  /* l....... */
            /* 03A0 */  0x3F, 0x03, 0x02, 0xEC, 0x39, 0x1D, 0xB0, 0xA3,  /* ?...9... */
            /* 03A8 */  0x0D, 0xE0, 0xEE, 0xFF, 0x7F, 0x06, 0x04, 0xEC,  /* ........ */
            /* 03B0 */  0x1C, 0x04, 0xD8, 0x19, 0x10, 0xE0, 0xD6, 0xFF,  /* ........ */
            /* 03B8 */  0xFF, 0x66, 0x03, 0x1F, 0x1B, 0x7B, 0xB2, 0x01,  /* .f...{.. */
            /* 03C0 */  0xCB, 0x19, 0x10, 0x77, 0xB2, 0x01, 0xFF, 0x19,  /* ...w.... */
            /* 03C8 */  0x10, 0x60, 0xD0, 0xC9, 0x06, 0xF6, 0xFF, 0xFF,  /* .`...... */
            /* 03D0 */  0x0C, 0x08, 0x30, 0xE9, 0x6C, 0x03, 0xAC, 0xCE,  /* ..0.l... */
            /* 03D8 */  0x80, 0xC0, 0xEF, 0xFF, 0x7F, 0x06, 0x04, 0x3C,  /* .......< */
            /* 03E0 */  0xDD, 0x5B, 0x9E, 0x01, 0xC1, 0x85, 0xFB, 0x0C,  /* .[...... */
            /* 03E8 */  0x08, 0x3E, 0x88, 0x67, 0x40, 0xC0, 0xFA, 0xFF,  /* .>.g@... */
            /* 03F0 */  0xFF, 0x0C, 0x08, 0x98, 0x38, 0x1D, 0xB0, 0x33,  /* ....8..3 */
            /* 03F8 */  0x20, 0xC0, 0xAC, 0x83, 0x00, 0x3B, 0xD8, 0xE0,  /*  ....;.. */
            /* 0400 */  0xFF, 0xFF, 0x67, 0x40, 0x80, 0x4D, 0x37, 0x1B,  /* ..g@.M7. */
            /* 0408 */  0xD8, 0xD8, 0xD8, 0x93, 0x0D, 0x58, 0xCE, 0x80,  /* .....X.. */
            /* 0410 */  0xB8, 0x93, 0x0D, 0xF8, 0xCF, 0x80, 0x70, 0xFE,  /* ......p. */
            /* 0418 */  0xFF, 0x67, 0x40, 0x80, 0x2D, 0x27, 0x1B, 0xC0,  /* .g@.-'.. */
            /* 0420 */  0xE3, 0x95, 0x02, 0xF3, 0xFF, 0x3F, 0x03, 0x02,  /* .....?.. */
            /* 0428 */  0x56, 0xCE, 0x36, 0xC0, 0xEA, 0x0C, 0x08, 0xF0,  /* V.6..... */
            /* 0430 */  0xE0, 0xE0, 0xF2, 0x66, 0x83, 0xF9, 0xFF, 0x9F,  /* ...f.... */
            /* 0438 */  0x01, 0xC1, 0x80, 0xFB, 0x0C, 0x08, 0xBE, 0xFB,  /* ........ */
            /* 0440 */  0xC1, 0x33, 0x20, 0xC0, 0xBF, 0xD3, 0x01, 0x3B,  /* .3 ....; */
            /* 0448 */  0xDA, 0x80, 0xE3, 0xFF, 0x7F, 0x06, 0x04, 0x58,  /* .......X */
            /* 0450 */  0x73, 0x10, 0x60, 0x67, 0x40, 0xC0, 0xE1, 0xFF,  /* s.`g@... */
            /* 0458 */  0xFF, 0x0C, 0x08, 0x98, 0xB9, 0xD9, 0xC0, 0xC6,  /* ........ */
            /* 0460 */  0xC6, 0x9E, 0x6C, 0xC0, 0x72, 0x06, 0xC4, 0x9D,  /* ..l.r... */
            /* 0468 */  0x6C, 0xC0, 0x7F, 0x06, 0x04, 0x3C, 0xFE, 0xFF,  /* l....<.. */
            /* 0470 */  0xCF, 0x80, 0xC0, 0xFC, 0x64, 0x03, 0x78, 0x3C,  /* ....d.x< */
            /* 0478 */  0x03, 0x02, 0x7E, 0xCE, 0x36, 0xB0, 0xFF, 0xFF,  /* ..~.6... */
            /* 0480 */  0x67, 0x40, 0x80, 0x3F, 0xDE, 0xCE, 0x80, 0x20,  /* g@.?...  */
            /* 0488 */  0xC3, 0x7D, 0x06, 0x04, 0xDF, 0xFD, 0xE0, 0x19,  /* .}...... */
            /* 0490 */  0x10, 0xD8, 0xFD, 0xFF, 0xCF, 0x80, 0x00, 0x43,  /* .......C */
            /* 0498 */  0x4E, 0x07, 0xEC, 0x0C, 0x08, 0x78, 0xFD, 0xFF,  /* N....x.. */
            /* 04A0 */  0x9F, 0x01, 0x01, 0x03, 0x07, 0x01, 0x76, 0x06,  /* ......v. */
            /* 04A8 */  0x04, 0xD8, 0x75, 0xB3, 0x81, 0xF9, 0xFF, 0xBF,  /* ..u..... */
            /* 04B0 */  0x60, 0xC1, 0x38, 0xD9, 0x80, 0xE5, 0x0C, 0x88,  /* `.8..... */
            /* 04B8 */  0x3B, 0xD9, 0x80, 0xFF, 0x0C, 0x08, 0x30, 0xE8,  /* ;.....0. */
            /* 04C0 */  0x64, 0x03, 0xE6, 0xFF, 0xFF, 0x19, 0x10, 0x60,  /* d......` */
            /* 04C8 */  0xCB, 0xD9, 0x06, 0x58, 0x9D, 0x01, 0x81, 0xFB,  /* ...X.... */
            /* 04D0 */  0xFF, 0xFF, 0x0C, 0x08, 0xB8, 0x38, 0x1A, 0x3C,  /* .....8.< */
            /* 04D8 */  0x03, 0x82, 0xEB, 0x96, 0xE0, 0x33, 0x20, 0xD8,  /* .....3 . */
            /* 04E0 */  0xEE, 0x07, 0xCF, 0x80, 0x00, 0x23, 0xFE, 0xFF,  /* .....#.. */
            /* 04E8 */  0x67, 0x40, 0x60, 0x7B, 0x3A, 0x60, 0x67, 0x40,  /* g@`{:`g@ */
            /* 04F0 */  0x80, 0x59, 0x07, 0x01, 0x76, 0xB0, 0x01, 0xD7,  /* .Y..v... */
            /* 04F8 */  0xFF, 0xFF, 0x0C, 0x08, 0x30, 0xE6, 0x66, 0x03,  /* ....0.f. */
            /* 0500 */  0x1B, 0x1B, 0x7B, 0xB2, 0x01, 0xCB, 0x19, 0x10,  /* ..{..... */
            /* 0508 */  0x77, 0xB2, 0x01, 0xFF, 0x19, 0x10, 0x7C, 0xFF,  /* w.....|. */
            /* 0510 */  0xFF, 0x33, 0x20, 0xC0, 0x88, 0x93, 0x0D, 0xE0,  /* .3 ..... */
            /* 0518 */  0xF1, 0x0C, 0x08, 0x96, 0xFF, 0xFF, 0x19, 0x10,  /* ........ */
            /* 0520 */  0x98, 0x9F, 0x6D, 0x80, 0x55, 0xB4, 0x83, 0x0D,  /* ..m.U... */
            /* 0528 */  0x2A, 0xCC, 0xD9, 0x06, 0x10, 0x3D, 0xEF, 0x87,  /* *....=.. */
            /* 0530 */  0x0F, 0x1F, 0x0C, 0x7C, 0x10, 0xC0, 0xDC, 0x6C,  /* ...|...l */
            /* 0538 */  0xE0, 0xDC, 0x2A, 0x7C, 0x5D, 0xF1, 0x41, 0xC4,  /* ..*|].A. */
            /* 0540 */  0x87, 0x07, 0xF6, 0xFF, 0x87, 0x8A, 0x13, 0x9E,  /* ........ */
            /* 0548 */  0x9F, 0x1C, 0x7C, 0xB6, 0x81, 0x7D, 0x9A, 0x79,  /* ..|..}.y */
            /* 0550 */  0x08, 0xC4, 0x21, 0x3C, 0xDB, 0x80, 0xFD, 0x4D,  /* ..!<...M */
            /* 0558 */  0xE1, 0x63, 0x81, 0xCF, 0x36, 0x00, 0x3F, 0x44,  /* .c..6.?D */
            /* 0560 */  0x1C, 0x30, 0xE4, 0x64, 0x3C, 0xA8, 0x51, 0x58,  /* .0.d<.QX */
            /* 0568 */  0xE3, 0x25, 0x81, 0x4C, 0xDB, 0x04, 0x43, 0x43,  /* .%.L..CC */
            /* 0570 */  0xE8, 0xB4, 0xE4, 0xB3, 0x0D, 0x38, 0xFF, 0xFF,  /* .....8.. */
            /* 0578 */  0x67, 0x1B, 0x70, 0x9E, 0x4E, 0xF0, 0x67, 0x1B,  /* g.p.N.g. */
            /* 0580 */  0x30, 0x9D, 0x25, 0x30, 0x04, 0x1E, 0x32, 0xFC,  /* 0.%0..2. */
            /* 0588 */  0xD3, 0x0C, 0x3F, 0x3E, 0xBC, 0x3F, 0x24, 0xF0,  /* ..?>.?$. */
            /* 0590 */  0xB9, 0x0F, 0x6C, 0xA7, 0x0E, 0x38, 0x87, 0x19,  /* ..l..8.. */
            /* 0598 */  0x60, 0x32, 0x26, 0xDC, 0x91, 0xC2, 0x43, 0xE0,  /* `2&...C. */
            /* 05A0 */  0x03, 0x68, 0x75, 0x7E, 0xE4, 0x58, 0x78, 0x56,  /* .hu~.XxV */
            /* 05A8 */  0xB8, 0xB3, 0x0C, 0x1F, 0x15, 0xE6, 0x74, 0x83,  /* ......t. */
            /* 05B0 */  0x8B, 0xF2, 0x3E, 0x30, 0x81, 0x82, 0xBC, 0x0B,  /* ..>0.... */
            /* 05B8 */  0x24, 0xF2, 0x81, 0x40, 0x61, 0x7C, 0xBA, 0x01,  /* $..@a|.. */
            /* 05C0 */  0x8E, 0xFF, 0xFF, 0xD3, 0x0D, 0xF0, 0x98, 0xA4,  /* ........ */
            /* 05C8 */  0x4F, 0x37, 0x60, 0x83, 0x88, 0x18, 0xAC, 0x68,  /* O7`....h */
            /* 05D0 */  0x30, 0xDD, 0x9A, 0x70, 0xB7, 0x1B, 0x1C, 0x5E,  /* 0..p...^ */
            /* 05D8 */  0xB8, 0x18, 0xA7, 0xC3, 0x10, 0xA2, 0x3C, 0xB0,  /* ......<. */
            /* 05E0 */  0x18, 0x99, 0x1F, 0x03, 0xC1, 0x70, 0x9B, 0x79,  /* .....p.y */
            /* 05E8 */  0xB6, 0x01, 0x2E, 0xE1, 0x0E, 0x05, 0xFA, 0x43,  /* .......C */
            /* 05F0 */  0xF9, 0x6C, 0x03, 0xF8, 0xFC, 0xFF, 0x9F, 0x6D,  /* .l.....m */
            /* 05F8 */  0x80, 0xCF, 0x41, 0x04, 0x77, 0x32, 0x01, 0xC3,  /* ..A.w2.. */
            /* 0600 */  0x89, 0x01, 0xD6, 0xB1, 0x0D, 0xB8, 0x88, 0x5B,  /* .......[ */
            /* 0608 */  0xA9, 0x4E, 0x3B, 0x16, 0x06, 0x22, 0x1B, 0x87,  /* .N;..".. */
            /* 0610 */  0x45, 0x3A, 0x54, 0x0B, 0xA1, 0xD2, 0x90, 0x7C,  /* E:T....| */
            /* 0618 */  0x04, 0x3A, 0xBB, 0x47, 0x85, 0xE7, 0x04, 0x01,  /* .:.G.... */
            /* 0620 */  0x09, 0xD4, 0x10, 0x0E, 0x0F, 0xA1, 0xE8, 0xA3,  /* ........ */
            /* 0628 */  0xA1, 0xC0, 0x0E, 0x0B, 0x46, 0x41, 0x3C, 0x7A,  /* ....FA<z */
            /* 0630 */  0x07, 0x81, 0xD0, 0xA1, 0x08, 0x7F, 0x62, 0xF0,  /* ......b. */
            /* 0638 */  0x7C, 0xDE, 0xF8, 0x4D, 0xF0, 0xB0, 0xF1, 0xB4,  /* |..M.... */
            /* 0640 */  0x00, 0xEB, 0x62, 0xE0, 0x63, 0x00, 0x3F, 0x13,  /* ..b.c.?. */
            /* 0648 */  0xE2, 0x0F, 0xFD, 0x26, 0xE0, 0xC7, 0x1E, 0xF0,  /* ...&.... */
            /* 0650 */  0x09, 0x3C, 0x0D, 0x80, 0x02, 0xC8, 0x93, 0xF7,  /* .<...... */
            /* 0658 */  0xB1, 0xE6, 0x01, 0x80, 0xCD, 0xE1, 0xC9, 0xC6,  /* ........ */
            /* 0660 */  0x68, 0xFF, 0xFF, 0x47, 0x1A, 0x9C, 0x8C, 0x95,  /* h..G.... */
            /* 0668 */  0xEA, 0x4B, 0xE3, 0x33, 0xA3, 0xC7, 0xC5, 0xCF,  /* .K.3.... */
            /* 0670 */  0x03, 0x3E, 0xB8, 0xB0, 0xB3, 0x01, 0xEE, 0x0C,  /* .>...... */
            /* 0678 */  0x85, 0x81, 0xF5, 0x48, 0x39, 0xAC, 0xD1, 0xC2,  /* ...H9... */
            /* 0680 */  0x1E, 0xF0, 0x43, 0x83, 0x2F, 0x1C, 0x9E, 0x99,  /* ..C./... */
            /* 0688 */  0xCF, 0x28, 0x3E, 0x6A, 0x80, 0xE5, 0x38, 0x05,  /* .(>j..8. */
            /* 0690 */  0xFF, 0xB0, 0x82, 0x3B, 0xC9, 0xC0, 0x9D, 0xE6,  /* ...;.... */
            /* 0698 */  0x23, 0xC1, 0xA3, 0x9E, 0x87, 0x1E, 0xDE, 0x47,  /* #......G */
            /* 06A0 */  0x18, 0xCF, 0x2E, 0x88, 0xAF, 0x9D, 0xFC, 0xF2,  /* ........ */
            /* 06A8 */  0x7D, 0x5A, 0xBE, 0xEF, 0xF8, 0xE8, 0x63, 0xA0,  /* }Z....c. */
            /* 06B0 */  0x27, 0x86, 0xA8, 0xAF, 0x27, 0x9E, 0x00, 0xBF,  /* '...'... */
            /* 06B8 */  0x50, 0x38, 0xC6, 0xA9, 0x88, 0x06, 0x5A, 0xA9,  /* P8....Z. */
            /* 06C0 */  0xA4, 0xAE, 0x99, 0xC2, 0xF8, 0x54, 0x04, 0xB8,  /* .....T.. */
            /* 06C8 */  0x8A, 0x30, 0x78, 0x50, 0xFC, 0xFF, 0x4F, 0x45,  /* .0xP..OE */
            /* 06D0 */  0xD8, 0x1B, 0x86, 0x2F, 0x03, 0x3E, 0x14, 0x81,  /* .../.>.. */
            /* 06D8 */  0xE5, 0x40, 0xE2, 0x89, 0xBD, 0x04, 0xF8, 0xDC,  /* .@...... */
            /* 06E0 */  0x80, 0xC3, 0x39, 0x03, 0x7E, 0x32, 0x02, 0xC3,  /* ..9.~2.. */
            /* 06E8 */  0x5D, 0xFB, 0xC9, 0x08, 0xB8, 0x44, 0x3B, 0x19,  /* ]....D;. */
            /* 06F0 */  0x01, 0x34, 0x39, 0xDF, 0xE1, 0xFE, 0xFF, 0x27,  /* .49....' */
            /* 06F8 */  0x23, 0x30, 0x9C, 0x1A, 0x60, 0x1C, 0x8C, 0x80,  /* #0..`... */
            /* 0700 */  0x8B, 0xA4, 0x83, 0x11, 0x95, 0x73, 0x30, 0x82,  /* .....s0. */
            /* 0708 */  0x72, 0x84, 0xC0, 0x1D, 0x8C, 0xC0, 0x3F, 0xA6,  /* r.....?. */
            /* 0710 */  0x33, 0x7A, 0x1D, 0x38, 0x75, 0x1F, 0x8C, 0x00,  /* 3z.8u... */
            /* 0718 */  0x73, 0xC3, 0xF5, 0xC1, 0x08, 0xF8, 0xFC, 0xFF,  /* s....... */
            /* 0720 */  0x0F, 0x46, 0xC0, 0xE5, 0x70, 0xE1, 0x83, 0x11,  /* .F..p... */
            /* 0728 */  0xB8, 0x0F, 0x0B, 0xFC, 0x10, 0x83, 0x25, 0x28,  /* ......%( */
            /* 0730 */  0xFE, 0x35, 0x64, 0x02, 0x85, 0x5A, 0xA4, 0x24,  /* .5d..Z.$ */
            /* 0738 */  0x2F, 0x97, 0xC2, 0xF8, 0x4C, 0x04, 0xB8, 0x8A,  /* /...L... */
            /* 0740 */  0x71, 0x26, 0x02, 0x21, 0xC6, 0xE3, 0xB1, 0x11,  /* q&.!.... */
            /* 0748 */  0xCF, 0x38, 0x6C, 0xB8, 0xE7, 0x8B, 0xA7, 0x22,  /* .8l...." */
            /* 0750 */  0xB0, 0xCF, 0xE1, 0x0C, 0xFA, 0xBC, 0x6E, 0xE9,  /* ......n. */
            /* 0758 */  0x54, 0x84, 0xFF, 0xFF, 0x9F, 0x8A, 0x60, 0x1C,  /* T.....`. */
            /* 0760 */  0x83, 0x9E, 0x8A, 0x80, 0x4B, 0xBC, 0x53, 0x11,  /* ....K.S. */
            /* 0768 */  0x40, 0x93, 0x13, 0xC4, 0x53, 0x11, 0xB8, 0xCE,  /* @...S... */
            /* 0770 */  0x0D, 0x30, 0xCF, 0x45, 0xE0, 0xFB, 0xFF, 0x9F,  /* .0.E.... */
            /* 0778 */  0x8B, 0xE0, 0x3E, 0x08, 0x7C, 0x18, 0x22, 0xE7,  /* ..>.|.". */
            /* 0780 */  0x22, 0x74, 0x78, 0x2A, 0x1D, 0x22, 0x70, 0xB1,  /* "tx*."p. */
            /* 0788 */  0xCF, 0x45, 0x74, 0xD8, 0x0E, 0x4C, 0xA2, 0x43,  /* .Et..L.C */
            /* 0790 */  0xBD, 0xCF, 0x45, 0x3C, 0xE6, 0x91, 0x86, 0x82,  /* ..E<.... */
            /* 0798 */  0x18, 0xD0, 0x19, 0xCE, 0x45, 0x68, 0x15, 0xE7,  /* ....Eh.. */
            /* 07A0 */  0x22, 0xE4, 0x20, 0xDF, 0x16, 0xD8, 0xEC, 0x7C,  /* ". ....| */
            /* 07A8 */  0x0F, 0xE0, 0x37, 0x15, 0x5F, 0x8B, 0x18, 0x6E,  /* ..7._..n */
            /* 07B0 */  0x35, 0xD7, 0x1D, 0x14, 0x98, 0x6F, 0x45, 0x18,  /* 5....oE. */
            /* 07B8 */  0x5D, 0xA7, 0x22, 0x90, 0xE9, 0xBB, 0x14, 0x81,  /* ]."..... */
            /* 07C0 */  0x1C, 0x9D, 0x9F, 0xA8, 0xC0, 0x87, 0xFF, 0x3C,  /* .......< */
            /* 07C8 */  0xE0, 0x21, 0x3C, 0x51, 0xC1, 0x3D, 0x13, 0xBC,  /* .!<Q.=.. */
            /* 07D0 */  0xF5, 0xF8, 0x44, 0x05, 0xFB, 0x90, 0x4B, 0x4E,  /* ..D...KN */
            /* 07D8 */  0x54, 0x40, 0xE3, 0xFF, 0x7F, 0xA2, 0x02, 0x5F,  /* T@....._ */
            /* 07E0 */  0xEC, 0x13, 0x15, 0xA0, 0xE7, 0x08, 0x82, 0x3B,  /* .......; */
            /* 07E8 */  0xB9, 0x82, 0xF5, 0x98, 0x81, 0x51, 0x68, 0xD3,  /* .....Qh. */
            /* 07F0 */  0xA7, 0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28,  /* .F.V...( */
            /* 07F8 */  0xD3, 0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0xBB,  /* ..V.J... */
            /* 0800 */  0x0F, 0x58, 0xE2, 0x3B, 0x41, 0xC3, 0x75, 0x40,  /* .X.;A.u@ */
            /* 0808 */  0x10, 0x1A, 0x89, 0x42, 0x20, 0x8E, 0xF2, 0xA7,  /* ...B ... */
            /* 0810 */  0x10, 0x88, 0x85, 0x78, 0x00, 0x61, 0x42, 0x57,  /* ...x.aBW */
            /* 0818 */  0x24, 0x10, 0x8B, 0x5B, 0x9B, 0x40, 0x1C, 0x0D,  /* $..[.@.. */
            /* 0820 */  0x84, 0x46, 0x5F, 0x9D, 0x40, 0x1C, 0xD8, 0x07,  /* .F_.@... */
            /* 0828 */  0x08, 0x93, 0xFB, 0x26, 0x10, 0x88, 0xE3, 0x18,  /* ...&.... */
            /* 0830 */  0x01, 0x61, 0x11, 0x5E, 0x54, 0x3A, 0x06, 0x10,  /* .a.^T:.. */
            /* 0838 */  0x2B, 0x20, 0x4C, 0xA0, 0x16, 0x10, 0x26, 0xCB,  /* + L...&. */
            /* 0840 */  0x0C, 0x08, 0x0B, 0x05, 0x42, 0x43, 0x7F, 0x39,  /* ....BC.9 */
            /* 0848 */  0x04, 0xE2, 0xA0, 0x76, 0x40, 0x98, 0x4C, 0x3D,  /* ...v@.L= */
            /* 0850 */  0x20, 0x2C, 0x86, 0x1F, 0x10, 0x26, 0x5E, 0xD1,  /*  ,...&^. */
            /* 0858 */  0x60, 0x28, 0x08, 0x95, 0xF6, 0xE6, 0xD2, 0x61,  /* `(.....a */
            /* 0860 */  0x82, 0x78, 0x02, 0x61, 0x61, 0x40, 0xE8, 0xFF,  /* .x.aa@.. */
            /* 0868 */  0x3F, 0xAC, 0x28, 0x10, 0x16, 0xD1, 0xD5, 0x60,  /* ?.(....` */
            /* 0870 */  0xE8, 0xDB, 0x40, 0x20, 0x0E, 0xF0, 0x4C, 0x0A,  /* ..@ ..L. */
            /* 0878 */  0x42, 0x44, 0x3F, 0x25, 0x04, 0xE2, 0xC8, 0x20,  /* BD?%...  */
            /* 0880 */  0x54, 0xD2, 0x1F, 0x42, 0x43, 0x25, 0x7F, 0xA5,  /* T..BC%.. */
            /* 0888 */  0x83, 0x61, 0x20, 0x34, 0xE6, 0x83, 0xE9, 0x50,  /* .a 4...P */
            /* 0890 */  0xD9, 0x5F, 0x4B, 0x20, 0x16, 0xA6, 0x0E, 0x84,  /* ._K .... */
            /* 0898 */  0x09, 0x77, 0x37, 0x54, 0xFA, 0x19, 0xD1, 0x60,  /* .w7T...` */
            /* 08A0 */  0x08, 0x08, 0x15, 0xF3, 0xA8, 0xD0, 0x50, 0xC9,  /* ......P. */
            /* 08A8 */  0x83, 0x22, 0x08, 0x91, 0x0F, 0x42, 0xE3, 0xBD,  /* ."...B.. */
            /* 08B0 */  0x04, 0x34, 0x54, 0xF2, 0x21, 0xD0, 0x60, 0xC8,  /* .4T.!.`. */
            /* 08B8 */  0x1B, 0x47, 0x20, 0x96, 0xFC, 0x4A, 0xD3, 0x50,  /* .G ..J.P */
            /* 08C0 */  0xC9, 0x43, 0x41, 0x20, 0x0E, 0x09, 0x42, 0x45,  /* .CA ..BE */
            /* 08C8 */  0xBC, 0x72, 0x82, 0x90, 0xF0, 0xCF, 0x8B, 0x20,  /* .r.....  */
            /* 08D0 */  0x44, 0xBA, 0xD1, 0x41, 0xD0, 0xE7, 0xC5, 0x83,  /* D..A.... */
            /* 08D8 */  0x01, 0xB3, 0x0A, 0xC2, 0x04, 0x69, 0x1D, 0x36,  /* .....i.6 */
            /* 08E0 */  0x7D, 0x28, 0x14, 0xF0, 0x15, 0xD0, 0xE1, 0x20,  /* }(.....  */
            /* 08E8 */  0x88, 0x80, 0x2C, 0xD2, 0xED, 0x80, 0x29, 0x08,  /* ..,...). */
            /* 08F0 */  0x15, 0x63, 0x17, 0x90, 0x49, 0x03, 0x11, 0x90,  /* .c..I... */
            /* 08F8 */  0xE3, 0x0A, 0x06, 0x61, 0x62, 0x5F, 0x14, 0x41,  /* ...ab_.A */
            /* 0900 */  0x48, 0xAE, 0xE7, 0x51, 0x40, 0x12, 0x12, 0x44,  /* H..Q@..D */
            /* 0908 */  0xC7, 0x03, 0xF2, 0x84, 0x13, 0x90, 0xC3, 0x81,  /* ........ */
            /* 0910 */  0x08, 0xC8, 0xFF, 0x7F                           /* .... */
        })
    }

    Scope (WMI0)
    {
        Name (WMIP, Zero)
        Method (INIT, 1, NotSerialized)
        {
            WMIP = One
            WINI (Arg0)
            Return (Zero)
        }

        Name (PCDV, Zero)
        Method (WDOG, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                PCDV = \_SB.PTIM
                Return (0x3C)
            }

            If ((Arg0 == One))
            {
                If (\_SB.LID._LID ())
                {
                    PCDV = \_SB.PTIM
                    Return (One)
                }

                If ((\_TZ.RLTM () < \_SB.PTMP))
                {
                    PCDV = \_SB.PTIM
                    Return (One)
                }

                PCDV--
                If ((PCDV == Zero))
                {
                    PCDV = \_SB.PTIM
                    NTFY (0x6D)
                }

                Return (One)
            }

            Return (Zero)
        }

        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
        {
            Return (Arg0)
        }

        Method (WMIG, 3, Serialized)
        {
            \_SB.ATKD.AGFN (Arg0)
            Local0 = CWMI (Arg0)
            If ((Local0 == Zero))
            {
                Return (Zero)
            }

            Local1 = ((Local0 >> 0x10) & 0xFFFF)
            Local0 &= 0xFFFF
            If (CWAC (Arg0))
            {
                Return (Zero)
            }

            If (((Local0 == 0x15) && (Local1 == 0x05)))
            {
                WSMI (Arg2)
                Return (Zero)
            }

            If (((Local0 == 0x64) | (Local0 == 0x67)))
            {
                WSMI (Arg2)
                Return (Zero)
            }

            Local2 = \_SB.ATKD.GLEN (Arg0)
            WGLN (Arg0, Arg1, Local0, Local1, Arg2)
            OperationRegion (\WMIF, SystemMemory, Arg0, 0x0100)
            Field (WMIF, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                STAS,   8, 
                REST,   8
            }

            If ((STAS != One))
            {
                Return (Zero)
            }

            STAS = 0x82
            REST = One
            Return (Zero)
        }

        Method (CWMI, 1, NotSerialized)
        {
            OperationRegion (\WMID, SystemMemory, Arg0, 0x0100)
            Field (WMID, DWordAcc, NoLock, Preserve)
            {
                FUNC,   32, 
                LEN,    16, 
                STAS,   8, 
                REST,   8
            }

            If (((REST & One) == Zero))
            {
                Return (Zero)
            }

            STAS = One
            REST = Zero
            Return (FUNC) /* \WMI0.CWMI.FUNC */
        }

        Method (CWAC, 1, NotSerialized)
        {
            OperationRegion (\WMIC, SystemMemory, Arg0, 0x0100)
            Field (WMIC, DWordAcc, NoLock, Preserve)
            {
                Offset (0x07), 
                REST,   8
            }

            ISMI (0xE4)
            Return (REST) /* \WMI0.CWAC.REST */
        }
    }

    Scope (WMI0)
    {
        Method (QNTY, 1, NotSerialized)
        {
            If ((OSFG >= OSW8)) {}
            Return (One)
        }
    }

    Scope (WMI0)
    {
        Method (WGLN, 5, NotSerialized)
        {
            \_SB.ATKD.GVBD (Arg0, Arg1, Arg2, Arg3, Arg4)
            \_SB.ATKD.MF6A (Arg0, Arg1, Arg2, Arg3, Arg4)
            \_SB.ATKD.WFLH (Arg0, Arg1, Arg2, Arg3, Arg4)
        }
    }

    Scope (WMI0)
    {
        Method (WINI, 1, NotSerialized)
        {
        }
    }

    Scope (_SB)
    {
        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x10, 
                0x05
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                LDST = Arg0
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = One
                Local0 = ^^PCI0.LPCB.HEC.RPIN (0x04, 0x06)
                If ((Local0 == Ones))
                {
                    Local0 = One
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PCI0.LPCB.HEC)
    {
        Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query
        {
            Notify (LID, 0x80) // Status Change
            If ((VGAF & One))
            {
                Local0 = GLID ()
                If (Local0)
                {
                    ^^^GFX0.CLID = 0x03
                }
                Else
                {
                    ^^^GFX0.CLID = Zero
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x0B, 
                    0x04
                })
            }
        }
    }

    Scope (_SB.ATKD)
    {
        Method (GVBD, 5, NotSerialized)
        {
            If ((Arg2 == 0x69))
            {
                If ((Arg3 == One))
                {
                    \WMI0.WSMI (Arg4)
                    Return (Zero)
                }

                If ((Arg3 == 0x02))
                {
                    \WMI0.WSMI (Arg4)
                    Return (Zero)
                }
            }

            Return (Zero)
        }
    }

    Name (OPVK, Buffer (0xE2)
    {
        /* 0000 */  0x52, 0xAA, 0x89, 0xC5, 0x44, 0xCE, 0xC3, 0x3A,  /* R...D..: */
        /* 0008 */  0x4B, 0x56, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x00,  /* KV...... */
        /* 0010 */  0x32, 0x37, 0x34, 0x35, 0x39, 0x31, 0x32, 0x35,  /* 27459125 */
        /* 0018 */  0x33, 0x36, 0x38, 0x37, 0x47, 0x65, 0x6E, 0x75,  /* 3687Genu */
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  /* ine NVID */
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  /* IA Certi */
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x4F, 0x70, 0x74,  /* fied Opt */
        /* 0038 */  0x69, 0x6D, 0x75, 0x73, 0x20, 0x52, 0x65, 0x61,  /* imus Rea */
        /* 0040 */  0x64, 0x79, 0x20, 0x4D, 0x6F, 0x74, 0x68, 0x65,  /* dy Mothe */
        /* 0048 */  0x72, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x20, 0x66,  /* rboard f */
        /* 0050 */  0x6F, 0x72, 0x20, 0x63, 0x6F, 0x6F, 0x6B, 0x69,  /* or cooki */
        /* 0058 */  0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x75, 0x6C,  /* e for ul */
        /* 0060 */  0x35, 0x30, 0x20, 0x75, 0x73, 0x69, 0x6E, 0x20,  /* 50 usin  */
        /* 0068 */  0x2D, 0x20, 0x5E, 0x57, 0x3C, 0x4A, 0x3D, 0x41,  /* - ^W<J=A */
        /* 0070 */  0x24, 0x4C, 0x3A, 0x4B, 0x38, 0x32, 0x26, 0x51,  /* $L:K82&Q */
        /* 0078 */  0x48, 0x35, 0x4C, 0x3E, 0x2B, 0x33, 0x52, 0x2B,  /* H5L>+3R+ */
        /* 0080 */  0x54, 0x35, 0x2A, 0x52, 0x29, 0x3A, 0x5B, 0x4C,  /* T5*R):[L */
        /* 0088 */  0x4A, 0x3E, 0x36, 0x48, 0x22, 0x48, 0x41, 0x50,  /* J>6H"HAP */
        /* 0090 */  0x47, 0x39, 0x5A, 0x39, 0x5E, 0x3E, 0x44, 0x53,  /* G9Z9^>DS */
        /* 0098 */  0x54, 0x3C, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70,  /* T< - Cop */
        /* 00A0 */  0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32,  /* yright 2 */
        /* 00A8 */  0x30, 0x30, 0x39, 0x20, 0x4E, 0x56, 0x49, 0x44,  /* 009 NVID */
        /* 00B0 */  0x49, 0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F,  /* IA Corpo */
        /* 00B8 */  0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41,  /* ration A */
        /* 00C0 */  0x6C, 0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74,  /* ll Right */
        /* 00C8 */  0x73, 0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,  /* s Reserv */
        /* 00D0 */  0x65, 0x64, 0x2D, 0x32, 0x37, 0x34, 0x35, 0x39,  /* ed-27459 */
        /* 00D8 */  0x31, 0x32, 0x35, 0x33, 0x36, 0x38, 0x37, 0x28,  /* 1253687( */
        /* 00E0 */  0x52, 0x29                                       /* R) */
    })
    Scope (_SB.PCI0)
    {
        Method (NWM1, 1, NotSerialized)
        {
            Notify (WMI1, Arg0)
        }

        Device (WMI1)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "MXM2")  // _UID: Unique ID
            Name (_WDG, Buffer (0xB4)
            {
                /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  /* <\.....N */
                /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  /* .w...*,. */
                /* 0010 */  0x4D, 0x58, 0x01, 0x02, 0x40, 0x2F, 0x1A, 0x92,  /* MX..@/.. */
                /* 0018 */  0xC4, 0x0D, 0x2D, 0x40, 0xAC, 0x18, 0xB4, 0x84,  /* ..-@.... */
                /* 0020 */  0x44, 0xEF, 0x9E, 0xD2, 0xD0, 0x00, 0x01, 0x08,  /* D....... */
                /* 0028 */  0x61, 0xD3, 0x2A, 0xC1, 0xA9, 0x9F, 0x74, 0x4C,  /* a.*...tL */
                /* 0030 */  0x90, 0x1F, 0x95, 0xCB, 0x09, 0x45, 0xCF, 0x3E,  /* .....E.> */
                /* 0038 */  0xD9, 0x00, 0x01, 0x08, 0x06, 0x80, 0x84, 0x42,  /* .......B */
                /* 0040 */  0x86, 0x88, 0x0E, 0x49, 0x8C, 0x72, 0x2B, 0xDC,  /* ...I.r+. */
                /* 0048 */  0xA9, 0x3A, 0x8A, 0x09, 0xDB, 0x00, 0x01, 0x08,  /* .:...... */
                /* 0050 */  0x62, 0xDE, 0x6B, 0xE0, 0x75, 0xEE, 0xF4, 0x48,  /* b.k.u..H */
                /* 0058 */  0xA5, 0x83, 0xB2, 0x3E, 0x69, 0xAB, 0xFB, 0x91,  /* ...>i... */
                /* 0060 */  0x80, 0x00, 0x01, 0x08, 0x0F, 0xBD, 0xDE, 0x3A,  /* .......: */
                /* 0068 */  0x5F, 0x0C, 0xED, 0x46, 0xAB, 0x2E, 0x04, 0x96,  /* _..F.... */
                /* 0070 */  0x2B, 0x4F, 0xDC, 0xBC, 0x81, 0x00, 0x01, 0x08,  /* +O...... */
                /* 0078 */  0x11, 0x93, 0x51, 0x1E, 0x75, 0x3E, 0x08, 0x42,  /* ..Q.u>.B */
                /* 0080 */  0xB0, 0x5E, 0xEB, 0xE1, 0x7E, 0x3F, 0xF4, 0x1F,  /* .^..~?.. */
                /* 0088 */  0x86, 0x00, 0x01, 0x08, 0x41, 0x53, 0xF8, 0x37,  /* ....AS.7 */
                /* 0090 */  0x18, 0x44, 0x24, 0x4F, 0x85, 0x33, 0x38, 0xFF,  /* .D$O.38. */
                /* 0098 */  0xC7, 0x29, 0x55, 0x42, 0x87, 0x00, 0x01, 0x08,  /* .)UB.... */
                /* 00A0 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  /* !...f... */
                /* 00A8 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  /* ......). */
                /* 00B0 */  0x58, 0x4D, 0x01, 0x00                           /* XM.. */
            })
            Method (WMMX, 3, NotSerialized)
            {
                If ((SizeOf (Arg2) >= 0x04))
                {
                    CreateDWordField (Arg2, Zero, FUNC)
                    CreateDWordField (Arg2, 0x04, ARGS)
                    CreateDWordField (Arg2, 0x08, XARG)
                    If ((FUNC == 0x444F445F))
                    {
                        If ((Arg1 == 0x10))
                        {
                            Return (^^GFX0._DOD ())
                        }
                        Else
                        {
                            Return (^^P0P2.VGA._DOD ())
                        }
                    }
                    Else
                    {
                        If ((FUNC == 0x5343445F))
                        {
                            If ((SizeOf (Arg2) >= 0x08))
                            {
                                If ((ARGS == 0x0100))
                                {
                                    If ((Arg1 == 0x10))
                                    {
                                        Return (^^GFX0.CRTD._DCS ())
                                    }
                                    Else
                                    {
                                        Return (^^P0P2.VGA.CRTD._DCS ())
                                    }
                                }
                                Else
                                {
                                    If ((ARGS == 0x0110))
                                    {
                                        If ((Arg1 == 0x10))
                                        {
                                            Return (^^GFX0.LCDD._DCS ())
                                        }
                                        Else
                                        {
                                            Return (^^P0P2.VGA.LCDD._DCS ())
                                        }
                                    }
                                    Else
                                    {
                                        If ((ARGS == 0x7330))
                                        {
                                            If ((Arg1 != 0x10))
                                            {
                                                Return (^^GFX0.DPBD._DCS ())
                                                Return (^^GFX0.DPCD._DCS ())
                                                Return (^^GFX0.DPDD._DCS ())
                                            }
                                            Else
                                            {
                                                Return (^^P0P2.VGA.DO1D._DCS ())
                                                Return (^^P0P2.VGA.DO2D._DCS ())
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        Else
                        {
                            If ((FUNC == 0x534F525F))
                            {
                                If ((SizeOf (Arg2) >= 0x08))
                                {
                                    If ((Arg1 != 0x10))
                                    {
                                        Return (^^P0P2.VGA._ROM (ARGS, XARG))
                                    }
                                }
                            }
                            Else
                            {
                                If ((FUNC == 0x4D53445F))
                                {
                                    If ((SizeOf (Arg2) >= 0x18))
                                    {
                                        CreateField (Arg2, 0x20, 0x80, MUID)
                                        CreateDWordField (Arg2, 0x14, REVI)
                                        CreateDWordField (Arg2, 0x18, SFNC)
                                        CreateField (Arg2, 0xE0, 0x20, SARG)
                                        If ((Arg1 != 0x10))
                                        {
                                            Return (^^GFX0._DSM (MUID, REVI, SFNC, SARG))
                                        }
                                    }
                                    Else
                                    {
                                        If ((FUNC == 0x47504F4E))
                                        {
                                            ^^P0P2.VGA.DGPS = One
                                            ^^P0P2.VGA._PS0 ()
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Return (Zero)
            }

            Name (WQXM, Buffer (0x029C)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  /* FOMB.... */
                /* 0008 */  0x8B, 0x02, 0x00, 0x00, 0x0C, 0x08, 0x00, 0x00,  /* ........ */
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  /* DS...}.T */
                /* 0018 */  0x18, 0xD2, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  /* .......B */
                /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0xE6, 0x80, 0x42, 0x04,  /* ......B. */
                /* 0028 */  0x92, 0x43, 0xA4, 0x30, 0x30, 0x28, 0x0B, 0x20,  /* .C.00(.  */
                /* 0030 */  0x86, 0x90, 0x0B, 0x26, 0x26, 0x40, 0x04, 0x84,  /* ...&&@.. */
                /* 0038 */  0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24, 0x88, 0xFA,  /* ...).$.. */
                /* 0040 */  0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25, 0x04, 0x42,  /* ..(..%.B */
                /* 0048 */  0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B, 0x80, 0x61,  /* .....[.a */
                /* 0050 */  0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0, 0x18, 0x92,  /* ........ */
                /* 0058 */  0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02, 0x21, 0xA1,  /* J.....!. */
                /* 0060 */  0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40, 0x3B, 0xA2,  /* ....-@;. */
                /* 0068 */  0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02, 0x8F, 0x82,  /* $...#... */
                /* 0070 */  0xA1, 0x71, 0x68, 0xEC, 0x30, 0x2C, 0x13, 0x4C,  /* .qh.0,.L */
                /* 0078 */  0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45, 0x60, 0xDC,  /* .8...E`. */
                /* 0080 */  0x4E, 0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78,  /* N... L.x */
                /* 0088 */  0x54, 0x61, 0x34, 0x07, 0x45, 0xE0, 0x42, 0x63,  /* Ta4.E.Bc */
                /* 0090 */  0x64, 0x40, 0xC8, 0xA3, 0x00, 0xAB, 0xA3, 0xD0,  /* d@...... */
                /* 0098 */  0xA4, 0x12, 0xD8, 0xBD, 0x00, 0x8D, 0x02, 0xB4,  /* ........ */
                /* 00A0 */  0x09, 0x70, 0x28, 0x40, 0xA1, 0x00, 0x6B, 0x18,  /* .p(@..k. */
                /* 00A8 */  0x72, 0x06, 0x21, 0x5B, 0xD8, 0xC2, 0x68, 0x50,  /* r.![..hP */
                /* 00B0 */  0x80, 0x45, 0x14, 0x8D, 0xE0, 0x2C, 0x2A, 0x9E,  /* .E...,*. */
                /* 00B8 */  0x93, 0x50, 0x02, 0xDA, 0x1B, 0x82, 0xF0, 0x8C,  /* .P...... */
                /* 00C0 */  0xD9, 0x18, 0x9E, 0x10, 0x83, 0x54, 0x86, 0x21,  /* .....T.! */
                /* 00C8 */  0x88, 0xB8, 0x11, 0x8E, 0xA5, 0xFD, 0x41, 0x10,  /* ......A. */
                /* 00D0 */  0xF9, 0xAB, 0xD7, 0xB8, 0x1D, 0x69, 0x34, 0xA8,  /* .....i4. */
                /* 00D8 */  0xB1, 0x26, 0x38, 0x76, 0x8F, 0xE6, 0x84, 0x3B,  /* .&8v...; */
                /* 00E0 */  0x17, 0x20, 0x7D, 0x6E, 0x02, 0x39, 0xBA, 0xD3,  /* . }n.9.. */
                /* 00E8 */  0xA8, 0x73, 0xD0, 0x64, 0x78, 0x0C, 0x2B, 0xC1,  /* .s.dx.+. */
                /* 00F0 */  0x7F, 0x80, 0x4F, 0x01, 0x78, 0xD7, 0x80, 0x9A,  /* ..O.x... */
                /* 00F8 */  0xFE, 0xC1, 0x33, 0x41, 0x70, 0xA8, 0x21, 0x7A,  /* ..3Ap.!z */
                /* 0100 */  0xD4, 0xE1, 0x4E, 0xE0, 0xBC, 0x8E, 0x84, 0x41,  /* ..N....A */
                /* 0108 */  0x1C, 0xD1, 0x71, 0x63, 0x67, 0x75, 0x32, 0x07,  /* ..qcgu2. */
                /* 0110 */  0x5D, 0xAA, 0x00, 0xB3, 0x07, 0x00, 0x0D, 0x2E,  /* ]....... */
                /* 0118 */  0xC1, 0x69, 0x9F, 0x49, 0xE8, 0xF7, 0x80, 0xF3,  /* .i.I.... */
                /* 0120 */  0xE9, 0x79, 0x6C, 0x6C, 0x10, 0xA8, 0x91, 0xF9,  /* .yll.... */
                /* 0128 */  0xFF, 0x0F, 0xED, 0x41, 0x9E, 0x56, 0xCC, 0x90,  /* ...A.V.. */
                /* 0130 */  0xCF, 0x02, 0x87, 0xC5, 0xC4, 0x1E, 0x19, 0xE8,  /* ........ */
                /* 0138 */  0x78, 0xC0, 0x7F, 0x00, 0x78, 0x34, 0x88, 0xF0,  /* x...x4.. */
                /* 0140 */  0x66, 0xE0, 0xF9, 0x9A, 0x60, 0x50, 0x08, 0x39,  /* f...`P.9 */
                /* 0148 */  0x19, 0x0F, 0x4A, 0xCC, 0xF9, 0x80, 0xCC, 0x25,  /* ..J....% */
                /* 0150 */  0xC4, 0x43, 0xC0, 0x31, 0xC4, 0x08, 0x7A, 0x46,  /* .C.1..zF */
                /* 0158 */  0x45, 0x23, 0x6B, 0x22, 0x3E, 0x03, 0x78, 0xDC,  /* E#k">.x. */
                /* 0160 */  0x96, 0x05, 0x42, 0x09, 0x0C, 0xEC, 0x73, 0xC3,  /* ..B...s. */
                /* 0168 */  0x3B, 0x84, 0x61, 0x71, 0xA3, 0x09, 0xEC, 0xF3,  /* ;.aq.... */
                /* 0170 */  0x85, 0x05, 0x0E, 0x0A, 0x05, 0xEB, 0xBB, 0x42,  /* .......B */
                /* 0178 */  0xCC, 0xE7, 0x81, 0xE3, 0x3C, 0x60, 0x0B, 0x9F,  /* ....<`.. */
                /* 0180 */  0x28, 0x01, 0x3E, 0x24, 0x8F, 0x06, 0xDE, 0x20,  /* (.>$...  */
                /* 0188 */  0xE1, 0x5B, 0x3F, 0x02, 0x10, 0xE0, 0x27, 0x06,  /* .[?...'. */
                /* 0190 */  0x13, 0x58, 0x1E, 0x30, 0x7A, 0x94, 0xF6, 0x2B,  /* .X.0z..+ */
                /* 0198 */  0x00, 0x21, 0xF8, 0x8B, 0xC5, 0x53, 0xC0, 0xEB,  /* .!...S.. */
                /* 01A0 */  0x40, 0x84, 0x63, 0x81, 0x29, 0x72, 0x6C, 0x68,  /* @.c.)rlh */
                /* 01A8 */  0x78, 0x7E, 0x70, 0x88, 0x1E, 0xF5, 0x5C, 0xC2,  /* x~p...\. */
                /* 01B0 */  0x1F, 0x4D, 0x94, 0x53, 0x38, 0x1C, 0x1F, 0x39,  /* .M.S8..9 */
                /* 01B8 */  0x8C, 0x10, 0xFE, 0x49, 0xE3, 0xC9, 0xC3, 0x9A,  /* ...I.... */
                /* 01C0 */  0xEF, 0x00, 0x9A, 0xD2, 0x5B, 0xC0, 0xFB, 0x83,  /* ....[... */
                /* 01C8 */  0x47, 0x80, 0x11, 0x20, 0xE1, 0x68, 0x82, 0x89,  /* G.. .h.. */
                /* 01D0 */  0x7C, 0x3A, 0x01, 0xD5, 0xFF, 0xFF, 0x74, 0x02,  /* |:....t. */
                /* 01D8 */  0xB8, 0xBA, 0x01, 0x14, 0x37, 0x6A, 0x9D, 0x49,  /* ....7j.I */
                /* 01E0 */  0x7C, 0x2C, 0xF1, 0xAD, 0xE4, 0xBC, 0x43, 0xC5,  /* |,....C. */
                /* 01E8 */  0x7F, 0x93, 0x78, 0x3A, 0xF1, 0x34, 0x1E, 0x4C,  /* ..x:.4.L */
                /* 01F0 */  0x42, 0x44, 0x89, 0x18, 0x21, 0xA2, 0xEF, 0x27,  /* BD..!..' */
                /* 01F8 */  0x46, 0x08, 0x15, 0x31, 0x6C, 0xA4, 0x37, 0x80,  /* F..1l.7. */
                /* 0200 */  0xE7, 0x13, 0xE3, 0x84, 0x08, 0xF4, 0x74, 0xC2,  /* ......t. */
                /* 0208 */  0x42, 0x3E, 0x34, 0xA4, 0xE1, 0x74, 0x02, 0x50,  /* B>4..t.P */
                /* 0210 */  0xE0, 0xFF, 0x7F, 0x3A, 0x81, 0x1F, 0xF5, 0x74,  /* ...:...t */
                /* 0218 */  0x82, 0x1E, 0xAE, 0x4F, 0x19, 0x18, 0xE4, 0x03,  /* ...O.... */
                /* 0220 */  0xF2, 0xA9, 0xC3, 0xF7, 0x1F, 0x13, 0xF8, 0x78,  /* .......x */
                /* 0228 */  0xC2, 0x45, 0x1D, 0x4F, 0x50, 0xA7, 0x07, 0x1F,  /* .E.OP... */
                /* 0230 */  0x4F, 0xD8, 0x19, 0xE1, 0x2C, 0x1E, 0x03, 0x7C,  /* O...,..| */
                /* 0238 */  0x3A, 0xC1, 0xDC, 0x13, 0x7C, 0x3A, 0x01, 0xDB,  /* :...|:.. */
                /* 0240 */  0x68, 0x60, 0x1C, 0x4F, 0xC0, 0x77, 0x74, 0xC1,  /* h`.O.wt. */
                /* 0248 */  0x1D, 0x4F, 0xC0, 0x30, 0x18, 0x18, 0xE7, 0x13,  /* .O.0.... */
                /* 0250 */  0xE0, 0x31, 0x5E, 0xDC, 0x31, 0xC0, 0x43, 0xE0,  /* .1^.1.C. */
                /* 0258 */  0x03, 0x78, 0xDC, 0x38, 0x3D, 0x2B, 0x9D, 0x14,  /* .x.8=+.. */
                /* 0260 */  0xF2, 0x24, 0xC2, 0x07, 0x85, 0x39, 0xB0, 0xE0,  /* .$...9.. */
                /* 0268 */  0x14, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83,  /* ......U. */
                /* 0270 */  0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52,  /* 25.4...R */
                /* 0278 */  0x63, 0xC6, 0xCE, 0x19, 0x0E, 0xF8, 0x10, 0xD0,  /* c....... */
                /* 0280 */  0x89, 0xC0, 0xF2, 0x9E, 0x0D, 0x02, 0xB1, 0x0C,  /* ........ */
                /* 0288 */  0x0A, 0x81, 0x58, 0xFA, 0xAB, 0x45, 0x20, 0x0E,  /* ..X..E . */
                /* 0290 */  0x0E, 0xA2, 0xFF, 0x3F, 0x88, 0x23, 0xD2, 0x0A,  /* ...?.#.. */
                /* 0298 */  0xC4, 0xFF, 0x7F, 0x7F                           /* .... */
            })
        }
    }

    Name (GPSP, Buffer (0x24) {})
    CreateDWordField (GPSP, Zero, RETN)
    CreateDWordField (GPSP, 0x04, VRV1)
    CreateDWordField (GPSP, 0x08, TGPU)
    CreateDWordField (GPSP, 0x0C, PDSS)
    CreateDWordField (GPSP, 0x10, SFAN)
    CreateDWordField (GPSP, 0x14, SKNT)
    CreateDWordField (GPSP, 0x18, CPUE)
    CreateDWordField (GPSP, 0x1C, TMP1)
    CreateDWordField (GPSP, 0x20, TMP2)
    Scope (_SB.PCI0.P0P2.VGA)
    {
        Name (DGPS, Zero)
        Name (P3MO, Zero)
        Name (_PSC, Zero)  // _PSC: Power State Current
        Name (SETF, Zero)
        Name (GPRF, Zero)
        Name (TGPC, Buffer (0x04)
        {
             0x00                                             /* . */
        })
        Method (GC6I, 0, Serialized)
        {
            CreateField (TGPC, 0x06, 0x02, ECOC)
            CreateField (TGPC, 0x0A, 0x02, PRGE)
            ISMI (0xB3)
            If (((ToInteger (PRGE) == 0x03) || (ToInteger (PRGE) == One)))
            {
                LNKD = One
            }

            While ((LNKS != Zero))
            {
                Sleep (One)
            }

            ^^^LPCB.HEC.ECNV (Zero)
        }

        Method (GC6O, 0, Serialized)
        {
            CreateField (TGPC, 0x06, 0x02, ECOC)
            CreateField (TGPC, 0x08, 0x02, PRGX)
            ISMI (0xB4)
            If ((ToInteger (PRGX) == Zero))
            {
                LNKD = Zero
            }

            SGPL (0x32, One, Zero)
            SGPL (0x36, One, One)
            While ((RGPL (0x11, One) != One))
            {
                Local0 = Zero
                While ((Local0 < 0x1E))
                {
                    Local0 += One
                    Stall (0x32)
                }
            }

            Local0 = Zero
            While ((Local0 < 0x1E))
            {
                Local0 += One
                Stall (0x32)
            }

            SGPL (0x32, One, One)
            CLER ()
            If ((ToInteger (PRGX) == 0x03))
            {
                LNKD = Zero
            }

            While ((LNKS < 0x07))
            {
                Local0 = 0x20
                While (Local0)
                {
                    If ((LNKS < 0x07))
                    {
                        Stall (0x64)
                        Local0--
                    }
                    Else
                    {
                        Break
                    }
                }

                If ((Local0 == Zero))
                {
                    RTLK = One
                    Stall (0x64)
                }
            }

            ^^^LPCB.HEC.ECNV (One)
        }

        Method (GETS, 0, Serialized)
        {
            If ((RGPL (0x36, One) == One))
            {
                Return (One)
            }
            Else
            {
                If ((^^^LPCB.HEC.RPIN (0x09, 0x04) == One))
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x02)
                }
            }
        }

        Method (GOBT, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, USRG)
            If ((USRG == 0x564B))
            {
                Return (Zero)
            }

            Return (Zero)
        }

        Method (_ROM, 2, NotSerialized)  // _ROM: Read-Only Memory
        {
            Local0 = NVOB /* \_SB_.NVOB */
            Local0 += Arg0
            Local1 = Arg1
            Name (VBUF, Buffer (Arg1) {})
            OperationRegion (VROM, SystemMemory, Local0, 0x1000)
            Field (VROM, ByteAcc, NoLock, Preserve)
            {
                ROMI,   32768
            }

            VBUF = ROMI /* \_SB_.PCI0.P0P2.VGA_._ROM.ROMI */
            Return (VBUF) /* \_SB_.PCI0.P0P2.VGA_._ROM.VBUF */
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            If ((Arg0 == ToUUID ("a486d8f8-0bda-471b-a72b-6042a6b5bee0")))
            {
                Local0 = Zero
                Local0 = (DerefOf (Index (Arg3, 0x03)) << 0x18)
                Local0 += (DerefOf (Index (Arg3, 0x02)) << 0x10)
                Local0 += (DerefOf (Index (Arg3, One)) << 0x08)
                Local0 += (DerefOf (Index (Arg3, Zero)) << Zero)
                If ((Arg1 != 0x0100))
                {
                    Return (Buffer (0x04)
                    {
                         0x02, 0x00, 0x00, 0x80                           /* .... */
                    })
                }

                Name (SUBF, Zero)
                SUBF = Arg2
                If ((SUBF == Zero))
                {
                    Return (Buffer (0x04)
                    {
                         0x01, 0x00, 0x01, 0x04                           /* .... */
                    })
                }

                If ((SUBF == 0x06))
                {
                    Return (Package (0x0F)
                    {
                        0x0110, 
                        0x2C, 
                        0x80000100, 
                        0x2C, 
                        0x0110, 
                        0x80000100, 
                        0x2C, 
                        0x80087330, 
                        0x2C, 
                        0x0110, 
                        0x80087330, 
                        0x2C, 
                        0x80000100, 
                        0x80087330, 
                        0x2C
                    })
                }

                If ((SUBF == 0x10))
                {
                    Local2 = (Local0 >> 0x10)
                    If ((Local2 == 0x564B))
                    {
                        Return (OPVK) /* \OPVK */
                    }

                    Return (Zero)
                }

                If ((SUBF == 0x1A))
                {
                    CreateField (Arg3, One, One, DVSR)
                    CreateField (Arg3, 0x02, One, DVSC)
                    Local2 = (Local0 >> 0x18)
                    If ((Local2 == 0x03))
                    {
                        P3MO = One
                    }
                    Else
                    {
                        P3MO = Zero
                    }

                    Name (RBUF, Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           /* .... */
                    })
                    CreateField (RBUF, Zero, One, OPEN)
                    CreateField (RBUF, 0x03, 0x02, CGCS)
                    CreateField (RBUF, 0x06, One, SHPC)
                    CreateField (RBUF, 0x08, One, SNSR)
                    CreateField (RBUF, 0x18, 0x03, DGPC)
                    OPEN = One
                    SHPC = One
                    DGPC = One
                    If (ToInteger (DVSC))
                    {
                        If (ToInteger (DVSR))
                        {
                            GPRF = One
                        }
                        Else
                        {
                            GPRF = Zero
                        }
                    }

                    SNSR = GPRF /* \_SB_.PCI0.P0P2.VGA_.GPRF */
                    If (DGPS)
                    {
                        CGCS = Zero
                    }
                    Else
                    {
                        CGCS = 0x03
                    }

                    Return (RBUF) /* \_SB_.PCI0.P0P2.VGA_._DSM.RBUF */
                }
            }
            Else
            {
                If ((Arg0 == ToUUID ("a3132d01-8cda-49ba-a52e-bc9d46df6b81")))
                {
                    Local0 = Zero
                    Local0 = (DerefOf (Index (Arg3, 0x03)) << 0x18)
                    Local0 += (DerefOf (Index (Arg3, 0x02)) << 0x10)
                    Local0 += (DerefOf (Index (Arg3, One)) << 0x08)
                    Local0 += (DerefOf (Index (Arg3, Zero)) << Zero)
                    If ((Arg1 != 0x0100))
                    {
                        Return (Buffer (0x04)
                        {
                             0x02, 0x00, 0x00, 0x80                           /* .... */
                        })
                    }

                    Name (SBF1, Zero)
                    SBF1 = Arg2
                    Name (PSCP, Zero)
                    Name (PSTS, Zero)
                    If ((SBF1 == Zero))
                    {
                        Return (Buffer (0x08)
                        {
                             0x01, 0x00, 0x00, 0x00, 0x0F, 0x04, 0x00, 0x00   /* ........ */
                        })
                    }

                    If ((SBF1 == 0x20))
                    {
                        Local2 = (Local0 >> 0x19)
                        If ((Local2 && One))
                        {
                            PSTS |= 0x02000000
                            Local2 = (Local0 >> 0x18)
                            If ((Local2 && One))
                            {
                                PSTS |= 0x01000000
                            }
                        }

                        Local2 = (Local0 >> 0x1D)
                        If ((Local2 && One))
                        {
                            PSTS |= 0x20000000
                            Local2 = (Local0 >> 0x1A)
                            If ((Local2 && One))
                            {
                                PSTS |= 0x04000000
                            }
                        }

                        PSTS |= 0x40000000
                        PSTS &= 0x41000000
                        Return (PSTS) /* \_SB_.PCI0.P0P2.VGA_._DSM.PSTS */
                    }

                    If ((SBF1 == 0x21))
                    {
                        Return (\_PR.CPU0._PSS) /* External reference */
                    }

                    If ((SBF1 == 0x22))
                    {
                        CreateDWordField (Arg3, Zero, PCAP)
                        PSCP = PCAP /* \_SB_.PCI0.P0P2.VGA_._DSM.PCAP */
                        \_PR.CPU0.MPPC = PCAP /* \_SB_.PCI0.P0P2.VGA_._DSM.PCAP */
                        PNOT ()
                        Return (PCAP) /* \_SB_.PCI0.P0P2.VGA_._DSM.PCAP */
                    }

                    If ((SBF1 == 0x23))
                    {
                        Return (PSCP) /* \_SB_.PCI0.P0P2.VGA_._DSM.PSCP */
                    }

                    If ((SBF1 == 0x2A))
                    {
                        CreateByteField (Arg3, Zero, PSH0)
                        CreateByteField (Arg3, One, PSH1)
                        CreateBitField (Arg3, 0x08, GPUT)
                        CreateBitField (Arg3, 0x09, CPUT)
                        CreateBitField (Arg3, 0x0A, FANS)
                        CreateBitField (Arg3, 0x0B, SKIN)
                        CreateBitField (Arg3, 0x0C, ENGR)
                        CreateBitField (Arg3, 0x0D, SEN1)
                        CreateBitField (Arg3, 0x0E, SEN2)
                        While (One)
                        {
                            _T_0 = PSH0 /* \_SB_.PCI0.P0P2.VGA_._DSM.PSH0 */
                            If ((_T_0 == Zero))
                            {
                                If (CPUT)
                                {
                                    RETN = 0x0200
                                    RETN |= PSH0 /* \_SB_.PCI0.P0P2.VGA_._DSM.PSH0 */
                                    PDSS = \_TZ.RTMP ()
                                }

                                Return (GPSP) /* \GPSP */
                            }
                            Else
                            {
                                If ((_T_0 == One))
                                {
                                    RETN = 0x0300
                                    RETN |= PSH0 /* \_SB_.PCI0.P0P2.VGA_._DSM.PSH0 */
                                    PDSS = 0x03E8
                                    Return (GPSP) /* \GPSP */
                                }
                                Else
                                {
                                    If ((_T_0 == 0x02))
                                    {
                                        RETN = 0x0102
                                        RETN |= PSH0 /* \_SB_.PCI0.P0P2.VGA_._DSM.PSH0 */
                                        VRV1 = Zero
                                        TGPU = GPST ()
                                        PDSS = Zero
                                        SFAN = Zero
                                        CPUE = Zero
                                        SKNT = Zero
                                        TMP1 = Zero
                                        TMP2 = Zero
                                        Return (GPSP) /* \GPSP */
                                    }
                                }
                            }

                            Break
                        }
                    }
                }
                Else
                {
                    If ((Arg0 == ToUUID ("cbeca351-067b-4924-9cbd-b46b00b86f34")))
                    {
                        If ((GC6E == Zero))
                        {
                            Return (Buffer (0x04)
                            {
                                 0x02, 0x00, 0x00, 0x80                           /* .... */
                            })
                        }

                        Name (SBF2, Zero)
                        If ((ToInteger (Arg1) < 0x0100))
                        {
                            Return (0x80000001)
                        }

                        While (One)
                        {
                            SBF2 = ToInteger (Arg2)
                            If ((SBF2 == Zero))
                            {
                                Return (Unicode ("\x1B"))
                            }
                            Else
                            {
                                If ((SBF2 == One))
                                {
                                    Name (JTB1, Buffer (0x04)
                                    {
                                         0x00                                             /* . */
                                    })
                                    CreateField (JTB1, Zero, One, JTEN)
                                    CreateField (JTB1, One, 0x02, SREN)
                                    CreateField (JTB1, 0x03, 0x03, PLPR)
                                    CreateField (JTB1, 0x06, 0x02, FBPR)
                                    CreateField (JTB1, 0x08, 0x02, GUPR)
                                    CreateField (JTB1, 0x0A, One, GC6R)
                                    CreateField (JTB1, 0x0B, One, PTRH)
                                    CreateField (JTB1, 0x14, 0x0C, JTRV)
                                    JTEN = One
                                    GC6R = One
                                    JTRV = 0x0103
                                    Return (JTB1) /* \_SB_.PCI0.P0P2.VGA_._DSM.JTB1 */
                                }
                                Else
                                {
                                    If ((SBF2 == 0x02))
                                    {
                                        Return (0x80000002)
                                    }
                                    Else
                                    {
                                        If ((SBF2 == 0x03))
                                        {
                                            CreateField (Arg3, Zero, 0x03, GUPC)
                                            CreateField (Arg3, 0x04, One, PLPC)
                                            Name (JTB3, Buffer (0x04)
                                            {
                                                 0x00                                             /* . */
                                            })
                                            CreateField (JTB3, Zero, 0x03, GUPS)
                                            CreateField (JTB3, 0x03, One, GPGS)
                                            CreateField (JTB3, 0x07, One, PLST)
                                            If ((ToInteger (GUPC) == One))
                                            {
                                                TGPC = Arg3
                                                GC6I ()
                                                PLST = One
                                            }
                                            Else
                                            {
                                                If ((ToInteger (GUPC) == 0x02))
                                                {
                                                    TGPC = Arg3
                                                    GC6I ()
                                                    If ((ToInteger (PLPC) == Zero))
                                                    {
                                                        PLST = Zero
                                                    }
                                                }
                                                Else
                                                {
                                                    If ((ToInteger (GUPC) == 0x03))
                                                    {
                                                        TGPC = Arg3
                                                        GC6O ()
                                                        If ((ToInteger (PLPC) != Zero))
                                                        {
                                                            PLST = Zero
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If ((ToInteger (GUPC) == 0x04))
                                                        {
                                                            TGPC = Arg3
                                                            GC6O ()
                                                            If ((ToInteger (PLPC) != Zero))
                                                            {
                                                                PLST = Zero
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If ((ToInteger (GUPC) == Zero))
                                                            {
                                                                GUPS = GETS ()
                                                                If ((ToInteger (GUPS) == One))
                                                                {
                                                                    GPGS = One
                                                                }
                                                                Else
                                                                {
                                                                    GPGS = Zero
                                                                }
                                                            }
                                                            Else
                                                            {
                                                                If ((ToInteger (GUPC) == 0x06))
                                                                {
                                                                    ^^^LPCB.HEC.SPIN (0x09, 0x04, Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            Return (JTB3) /* \_SB_.PCI0.P0P2.VGA_._DSM.JTB3 */
                                        }
                                        Else
                                        {
                                            If ((SBF2 == 0x04))
                                            {
                                                Return (0x80000002)
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }

                        Return (0x80000002)
                    }
                    Else
                    {
                        Return (Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           /* .... */
                        })
                    }
                }
            }

            Return (Zero)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            _PSC = Zero
            If (DGPS)
            {
                _ON ()
                DGPS = Zero
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((P3MO == One))
            {
                _OFF ()
            }

            P3MO = Zero
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Method (OPTW, 1, NotSerialized)
        {
            ^^^LPCB.HEC.SPIN (0x09, 0x04, Zero)
            If ((Arg0 == 0x04))
            {
                If ((RGPL (0x36, One) == One)) {}
            }
        }

        Method (OPTS, 1, NotSerialized)
        {
        }
    }

    Scope (_SB.PCI0.GFX0)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            Return (^^P0P2.VGA._DSM (Arg0, Arg1, Arg2, Arg3))
        }
    }

    Scope (_SB.PCI0.P0P2)
    {
        OperationRegion (RPCI, PCI_Config, Zero, 0xF0)
        Field (RPCI, DWordAcc, Lock, Preserve)
        {
            Offset (0xAC), 
                ,   4, 
            CMLW,   6
        }

        OperationRegion (PEGM, SystemMemory, 0xF8008000, 0x0FF0)
        Field (PEGM, ByteAcc, NoLock, Preserve)
        {
            REG0,   32, 
            REG1,   32, 
            REG2,   32, 
            Offset (0x19), 
            RE19,   8, 
            RE1A,   8, 
            Offset (0x3E), 
            RE3E,   8, 
            Offset (0x84), 
            PWST,   2, 
            Offset (0xB0), 
            ASPM,   2, 
                ,   2, 
            LNKD,   1, 
            RTLK,   1, 
            Offset (0xB3), 
                ,   3, 
            LTST,   1, 
            RSCC,   1, 
            Offset (0xB4), 
                ,   6, 
            HPCP,   1, 
            SPLV,   8, 
            SPLS,   2, 
                ,   2, 
            PHSN,   13, 
            HPD,    8, 
            Offset (0x114), 
            T0V0,   1, 
            TV0M,   7, 
            Offset (0x11A), 
                ,   1, 
            VCNP,   1, 
            Offset (0x214), 
            Offset (0x216), 
            LNKS,   4, 
            Offset (0x504), 
            Offset (0x506), 
            PCFG,   2, 
            Offset (0x508), 
            TREN,   1, 
            Offset (0xC20), 
                ,   4, 
            AFES,   2, 
            Offset (0xD0C), 
                ,   20, 
            LREV,   1
        }

        Method (RBP0, 1, NotSerialized)
        {
            Local7 = (0xF8008000 + Arg0)
            OperationRegion (PCI0, SystemMemory, Local7, One)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   8
            }

            Return (TEMP) /* \_SB_.PCI0.P0P2.RBP0.TEMP */
        }

        Method (WBP0, 2, NotSerialized)
        {
            Local7 = (0xF8008000 + Arg0)
            OperationRegion (PCI0, SystemMemory, Local7, One)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   8
            }

            TEMP = Arg1
            Return (TEMP) /* \_SB_.PCI0.P0P2.WBP0.TEMP */
        }

        Method (BSPR, 2, NotSerialized)
        {
            Local7 = (0xF800891C + (Arg0 * 0x20))
            OperationRegion (PCI0, SystemMemory, Local7, 0x04)
            Field (PCI0, DWordAcc, NoLock, Preserve)
            {
                    ,   31, 
                TEMP,   1
            }

            TEMP = Arg1
        }

        Method (C7OK, 1, NotSerialized)
        {
            OperationRegion (MWHB, SystemMemory, 0xF8000000, 0x1000)
            Field (MWHB, DWordAcc, NoLock, Preserve)
            {
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17
            }

            OperationRegion (MBAR, SystemMemory, ((MHBR << 0x0F) + 0x5000), 0x1000)
            Field (MBAR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xDA8), 
                    ,   2, 
                C7AD,   1
            }

            C7AD = Arg0
        }
    }

    Scope (_SB.PCI0.P0P2.VGA)
    {
        Name (ELCT, Zero)
        Name (HVID, Zero)
        Name (HDID, Zero)
        Name (FBDL, Zero)
        Name (MBDL, Zero)
        Name (CBDL, Zero)
        Name (HSTR, Zero)
        Name (UULN, Zero)
        Name (INDX, Zero)
        Name (POFF, Zero)
        Name (PLEN, Zero)
        Name (PDAT, Zero)
        Name (WLSB, Zero)
        Name (WMSB, Zero)
        Name (DMLW, Zero)
        Name (TCNT, Zero)
        Name (LDLY, 0x64)
        Name (CTXT, Zero)
        Name (DAT0, Buffer (0x04EC)
        {
            /* 0000 */  0xD8, 0x0D, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0008 */  0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x09,  /* ........ */
            /* 0010 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x04,  /* ........ */
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x0C, 0x09, 0x04, 0x00,  /* ........ */
            /* 0020 */  0x00, 0x00, 0x00, 0x10, 0x09, 0x04, 0x00, 0x00,  /* ........ */
            /* 0028 */  0x00, 0x00, 0x0C, 0x08, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 0030 */  0x00, 0x20, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00,  /* . ...... */
            /* 0038 */  0x24, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0x28,  /* $......( */
            /* 0040 */  0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x09,  /* ......,. */
            /* 0048 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x30, 0x09, 0x04,  /* .....0.. */
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x2C, 0x08, 0x04, 0x00,  /* ....,... */
            /* 0058 */  0x00, 0x00, 0x00, 0x40, 0x09, 0x04, 0x00, 0x00,  /* ...@.... */
            /* 0060 */  0x00, 0x00, 0x44, 0x09, 0x04, 0x00, 0x00, 0x00,  /* ..D..... */
            /* 0068 */  0x00, 0x48, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00,  /* .H...... */
            /* 0070 */  0x4C, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0x50,  /* L......P */
            /* 0078 */  0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x08,  /* ......L. */
            /* 0080 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x60, 0x09, 0x04,  /* .....`.. */
            /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x64, 0x09, 0x04, 0x00,  /* ....d... */
            /* 0090 */  0x00, 0x00, 0x00, 0x68, 0x09, 0x04, 0x00, 0x00,  /* ...h.... */
            /* 0098 */  0x00, 0x00, 0x6C, 0x09, 0x04, 0x00, 0x00, 0x00,  /* ..l..... */
            /* 00A0 */  0x00, 0x70, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00,  /* .p...... */
            /* 00A8 */  0x6C, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80,  /* l....... */
            /* 00B0 */  0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0x84, 0x09,  /* ........ */
            /* 00B8 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x88, 0x09, 0x04,  /* ........ */
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x8C, 0x09, 0x04, 0x00,  /* ........ */
            /* 00C8 */  0x00, 0x00, 0x00, 0x90, 0x09, 0x04, 0x00, 0x00,  /* ........ */
            /* 00D0 */  0x00, 0x00, 0x8C, 0x08, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 00D8 */  0x00, 0xA0, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 00E0 */  0xA4, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0xA8,  /* ........ */
            /* 00E8 */  0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0xAC, 0x09,  /* ........ */
            /* 00F0 */  0x04, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x09, 0x04,  /* ........ */
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0xAC, 0x08, 0x04, 0x00,  /* ........ */
            /* 0100 */  0x00, 0x00, 0x00, 0xC0, 0x09, 0x04, 0x00, 0x00,  /* ........ */
            /* 0108 */  0x00, 0x00, 0xC4, 0x09, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 0110 */  0x00, 0xC8, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0118 */  0xCC, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0xD0,  /* ........ */
            /* 0120 */  0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x08,  /* ........ */
            /* 0128 */  0x04, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x09, 0x04,  /* ........ */
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0xE4, 0x09, 0x04, 0x00,  /* ........ */
            /* 0138 */  0x00, 0x00, 0x00, 0xE8, 0x09, 0x04, 0x00, 0x00,  /* ........ */
            /* 0140 */  0x00, 0x00, 0xEC, 0x09, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 0148 */  0x00, 0xF0, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0150 */  0xEC, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x30,  /* .......0 */
            /* 0158 */  0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,  /* ........ */
            /* 0160 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0A, 0x04,  /* ........ */
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x0A, 0x04, 0x00,  /* ........ */
            /* 0170 */  0x00, 0x00, 0x00, 0x0C, 0x0A, 0x04, 0x00, 0x00,  /* ........ */
            /* 0178 */  0x00, 0x00, 0xA0, 0x0A, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 0180 */  0x00, 0xA4, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0188 */  0xA8, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0xAC,  /* ........ */
            /* 0190 */  0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x0A,  /* ........ */
            /* 0198 */  0x04, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x0A, 0x04,  /* ........ */
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0xB8, 0x0A, 0x04, 0x00,  /* ........ */
            /* 01A8 */  0x00, 0x00, 0x00, 0xBC, 0x0A, 0x04, 0x00, 0x00,  /* ........ */
            /* 01B0 */  0x00, 0x00, 0xC0, 0x0A, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 01B8 */  0x00, 0xC4, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 01C0 */  0xC8, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0xCC,  /* ........ */
            /* 01C8 */  0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x0A,  /* ........ */
            /* 01D0 */  0x04, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x0A, 0x04,  /* ........ */
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0xD8, 0x0A, 0x04, 0x00,  /* ........ */
            /* 01E0 */  0x00, 0x00, 0x00, 0xDC, 0x0A, 0x04, 0x00, 0x00,  /* ........ */
            /* 01E8 */  0x00, 0x00, 0xE0, 0x0A, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 01F0 */  0x00, 0xE4, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 01F8 */  0xE8, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0xEC,  /* ........ */
            /* 0200 */  0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x0A,  /* ........ */
            /* 0208 */  0x04, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x0A, 0x04,  /* ........ */
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0xF8, 0x0A, 0x04, 0x00,  /* ........ */
            /* 0218 */  0x00, 0x00, 0x00, 0xFC, 0x0A, 0x04, 0x00, 0x00,  /* ........ */
            /* 0220 */  0x00, 0x00, 0x10, 0x0A, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 0228 */  0x00, 0x14, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0230 */  0x18, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x1C,  /* ........ */
            /* 0238 */  0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0A,  /* ...... . */
            /* 0240 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x24, 0x0A, 0x04,  /* .....$.. */
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x28, 0x0A, 0x04, 0x00,  /* ....(... */
            /* 0250 */  0x00, 0x00, 0x00, 0x2C, 0x0A, 0x04, 0x00, 0x00,  /* ...,.... */
            /* 0258 */  0x00, 0x00, 0x30, 0x0A, 0x04, 0x00, 0x00, 0x00,  /* ..0..... */
            /* 0260 */  0x00, 0x34, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00,  /* .4...... */
            /* 0268 */  0x38, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x3C,  /* 8......< */
            /* 0270 */  0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x40, 0x0A,  /* ......@. */
            /* 0278 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0A, 0x04,  /* .....D.. */
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x48, 0x0A, 0x04, 0x00,  /* ....H... */
            /* 0288 */  0x00, 0x00, 0x00, 0x4C, 0x0A, 0x04, 0x00, 0x00,  /* ...L.... */
            /* 0290 */  0x00, 0x00, 0x50, 0x0A, 0x04, 0x00, 0x00, 0x00,  /* ..P..... */
            /* 0298 */  0x00, 0x54, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00,  /* .T...... */
            /* 02A0 */  0x58, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x5C,  /* X......\ */
            /* 02A8 */  0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x60, 0x0A,  /* ......`. */
            /* 02B0 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x64, 0x0A, 0x04,  /* .....d.. */
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x68, 0x0A, 0x04, 0x00,  /* ....h... */
            /* 02C0 */  0x00, 0x00, 0x00, 0x6C, 0x0A, 0x04, 0x00, 0x00,  /* ...l.... */
            /* 02C8 */  0x00, 0x00, 0x70, 0x0A, 0x04, 0x00, 0x00, 0x00,  /* ..p..... */
            /* 02D0 */  0x00, 0x74, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00,  /* .t...... */
            /* 02D8 */  0x78, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x7C,  /* x......| */
            /* 02E0 */  0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0A,  /* ........ */
            /* 02E8 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x84, 0x0A, 0x04,  /* ........ */
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x88, 0x0A, 0x04, 0x00,  /* ........ */
            /* 02F8 */  0x00, 0x00, 0x00, 0x8C, 0x0A, 0x04, 0x00, 0x00,  /* ........ */
            /* 0300 */  0x00, 0x00, 0x90, 0x0A, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 0308 */  0x00, 0x94, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0310 */  0x98, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x9C,  /* ........ */
            /* 0318 */  0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x09,  /* ........ */
            /* 0320 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x38, 0x09, 0x04,  /* .....8.. */
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x58, 0x09, 0x04, 0x00,  /* ....X... */
            /* 0330 */  0x00, 0x00, 0x00, 0x78, 0x09, 0x04, 0x00, 0x00,  /* ...x.... */
            /* 0338 */  0x00, 0x00, 0x98, 0x09, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 0340 */  0x00, 0xB8, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0348 */  0xD8, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0xF8,  /* ........ */
            /* 0350 */  0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0x24, 0x02,  /* ......$. */
            /* 0358 */  0x04, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x01, 0x04,  /* ........ */
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x60, 0x02, 0x04, 0x00,  /* ....`... */
            /* 0368 */  0x00, 0x00, 0x00, 0x28, 0x0C, 0x04, 0x00, 0x00,  /* ...(.... */
            /* 0370 */  0x00, 0x00, 0x38, 0x0C, 0x04, 0x00, 0x00, 0x00,  /* ..8..... */
            /* 0378 */  0x00, 0x14, 0x0D, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0380 */  0x04, 0x00, 0x02, 0x00, 0x00, 0x0C, 0x00, 0x01,  /* ........ */
            /* 0388 */  0x00, 0x19, 0x00, 0x01, 0x00, 0x1A, 0x00, 0x01,  /* ........ */
            /* 0390 */  0x00, 0x1C, 0x00, 0x01, 0x00, 0x1D, 0x00, 0x01,  /* ........ */
            /* 0398 */  0x00, 0x20, 0x00, 0x02, 0x00, 0x00, 0x22, 0x00,  /* . ....". */
            /* 03A0 */  0x02, 0x00, 0x00, 0x24, 0x00, 0x02, 0x00, 0x00,  /* ...$.... */
            /* 03A8 */  0x26, 0x00, 0x02, 0x00, 0x00, 0x28, 0x00, 0x04,  /* &....(.. */
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x04, 0x00,  /* ....,... */
            /* 03B8 */  0x00, 0x00, 0x00, 0x3C, 0x00, 0x01, 0x00, 0x3D,  /* ...<...= */
            /* 03C0 */  0x00, 0x01, 0x00, 0x3E, 0x00, 0x02, 0x00, 0x00,  /* ...>.... */
            /* 03C8 */  0x84, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x8C,  /* ........ */
            /* 03D0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x92, 0x00,  /* ........ */
            /* 03D8 */  0x02, 0x00, 0x00, 0x94, 0x00, 0x04, 0x00, 0x00,  /* ........ */
            /* 03E0 */  0x00, 0x00, 0x98, 0x00, 0x02, 0x00, 0x00, 0xA2,  /* ........ */
            /* 03E8 */  0x00, 0x02, 0x00, 0x00, 0xA8, 0x00, 0x02, 0x00,  /* ........ */
            /* 03F0 */  0x00, 0xAC, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 03F8 */  0xB0, 0x00, 0x02, 0x00, 0x00, 0xB4, 0x00, 0x04,  /* ........ */
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0xBC, 0x00, 0x02, 0x00,  /* ........ */
            /* 0408 */  0x00, 0xC8, 0x00, 0x02, 0x00, 0x00, 0xD0, 0x00,  /* ........ */
            /* 0410 */  0x02, 0x00, 0x00, 0xEC, 0x00, 0x04, 0x00, 0x00,  /* ........ */
            /* 0418 */  0x00, 0x00, 0x14, 0x01, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 0420 */  0x00, 0x44, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00,  /* .D...... */
            /* 0428 */  0x50, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x58,  /* P......X */
            /* 0430 */  0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x01,  /* ......\. */
            /* 0438 */  0x04, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x01, 0x04,  /* ........ */
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00,  /* ........ */
            /* 0448 */  0x00, 0x00, 0x00, 0x04, 0x02, 0x04, 0x00, 0x00,  /* ........ */
            /* 0450 */  0x00, 0x00, 0x08, 0x02, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 0458 */  0x00, 0x28, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00,  /* .(...... */
            /* 0460 */  0x2C, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x38,  /* ,......8 */
            /* 0468 */  0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02,  /* ......@. */
            /* 0470 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x44, 0x02, 0x04,  /* .....D.. */
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x02, 0x04, 0x00,  /* ....P... */
            /* 0480 */  0x00, 0x00, 0x00, 0x58, 0x02, 0x04, 0x00, 0x00,  /* ...X.... */
            /* 0488 */  0x00, 0x00, 0x5C, 0x02, 0x04, 0x00, 0x00, 0x00,  /* ..\..... */
            /* 0490 */  0x00, 0xD0, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0498 */  0x34, 0x0D, 0x04, 0x00, 0x00, 0x00, 0x00, 0xF4,  /* 4....... */
            /* 04A0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x0D,  /* ........ */
            /* 04A8 */  0x04, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x0D, 0x04,  /* ........ */
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0xA8, 0x0D, 0x04, 0x00,  /* ........ */
            /* 04B8 */  0x00, 0x00, 0x00, 0xAC, 0x0D, 0x04, 0x00, 0x00,  /* ........ */
            /* 04C0 */  0x00, 0x00, 0xB0, 0x0D, 0x04, 0x00, 0x00, 0x00,  /* ........ */
            /* 04C8 */  0x00, 0xB4, 0x0D, 0x04, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 04D0 */  0xB8, 0x0D, 0x04, 0x00, 0x00, 0x00, 0x00, 0xBC,  /* ........ */
            /* 04D8 */  0x0D, 0x04, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x01,  /* ........ */
            /* 04E0 */  0x04, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x04,  /* ........ */
            /* 04E8 */  0xFF, 0xFF, 0xFF, 0xFF                           /* .... */
        })
        Name (DAT1, Buffer (0x43)
        {
            /* 0000 */  0x06, 0x00, 0x02, 0xFF, 0xFF, 0x1E, 0x00, 0x02,  /* ........ */
            /* 0008 */  0xFF, 0xFF, 0xAA, 0x00, 0x02, 0xFF, 0xFF, 0xC0,  /* ........ */
            /* 0010 */  0x00, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xD2, 0x00,  /* ........ */
            /* 0018 */  0x02, 0xFF, 0xFF, 0xC4, 0x01, 0x04, 0xFF, 0xFF,  /* ........ */
            /* 0020 */  0xFF, 0xFF, 0xD0, 0x01, 0x04, 0xFF, 0xFF, 0xFF,  /* ........ */
            /* 0028 */  0xFF, 0xF0, 0x01, 0x04, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
            /* 0030 */  0x9C, 0x0D, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xB2,  /* ........ */
            /* 0038 */  0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0xFF,  /* ........ */
            /* 0040 */  0xFF, 0xFF, 0xFF                                 /* ... */
        })
        OperationRegion (PCAP, PCI_Config, EECP, 0x14)
        Field (PCAP, DWordAcc, NoLock, Preserve)
        {
            Offset (0x0C), 
                ,   4, 
            EMLW,   6, 
            Offset (0x10), 
            LCTL,   16
        }

        OperationRegion (PEGR, SystemMemory, 0xF8008000, 0x0100)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            PREG,   2048
        }

        Name (RST0, Buffer (0x0100)
        {
             0x00                                             /* . */
        })
        OperationRegion (PCI2, SystemMemory, NPXB, 0x0100)
        Field (PCI2, DWordAcc, Lock, Preserve)
        {
            Offset (0x04), 
            CMDR,   8, 
            VGAR,   2000
        }

        Name (VGAB, Buffer (0xFA)
        {
             0x00                                             /* . */
        })
        Method (RSTP, 0, NotSerialized)
        {
            If ((SETF == One))
            {
                PREG = RST0 /* \_SB_.PCI0.P0P2.VGA_.RST0 */
            }
        }

        Method (RSTV, 0, NotSerialized)
        {
            If ((SETF == One))
            {
                If ((GPRF != One))
                {
                    CMDR = Zero
                    VGAR = VGAB /* \_SB_.PCI0.P0P2.VGA_.VGAB */
                    CMDR = 0x06
                }
            }
        }

        Method (SAVO, 0, NotSerialized)
        {
            If ((CTXT == Zero))
            {
                RST0 = PREG /* \_SB_.PCI0.P0P2.VGA_.PREG */
                If ((GPRF != One))
                {
                    VGAB = VGAR /* \_SB_.PCI0.P0P2.VGA_.VGAR */
                }

                CTXT = One
            }
        }

        OperationRegion (PCIS, PCI_Config, Zero, 0xF0)
        Field (PCIS, DWordAcc, Lock, Preserve)
        {
            Offset (0x2C), 
            SVID,   16, 
            SDID,   16, 
            Offset (0x4C), 
            WVID,   16, 
            WDID,   16
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
        }

        Method (GMXB, 0, NotSerialized)
        {
            HSTR = PCFG /* \_SB_.PCI0.P0P2.PCFG */
            If ((HSTR == 0x03))
            {
                Local0 = 0x08
            }
            Else
            {
                Local0 = 0x04
            }

            Return (Local0)
        }

        Method (PUAB, 0, NotSerialized)
        {
            FBDL = Zero
            CBDL = Zero
            HSTR = PCFG /* \_SB_.PCI0.P0P2.PCFG */
            If ((HSTR == 0x03))
            {
                FBDL = Zero
                CBDL = 0x08
            }
            Else
            {
                If ((LREV == Zero))
                {
                    FBDL = Zero
                    CBDL = 0x04
                }
                Else
                {
                    FBDL = 0x04
                    CBDL = 0x04
                }
            }

            INDX = One
            If ((CBDL != Zero))
            {
                While ((INDX <= CBDL))
                {
                    BSPR (FBDL, Zero)
                    FBDL++
                    INDX++
                }
            }
        }

        Method (PDUB, 1, NotSerialized)
        {
            FBDL = Zero
            CBDL = Arg0
            If ((CBDL == Zero))
            {
                Return (Zero)
            }

            If ((HSTR == 0x03))
            {
                If ((LREV == Zero))
                {
                    FBDL = (0x08 - CBDL)
                }
                Else
                {
                    FBDL = Zero
                }
            }
            Else
            {
                If ((LREV == Zero))
                {
                    FBDL = (0x04 - CBDL)
                }
                Else
                {
                    FBDL = 0x04
                }
            }

            INDX = One
            While ((INDX <= CBDL))
            {
                BSPR (FBDL, One)
                FBDL++
                INDX++
            }
        }

        Method (SPP0, 0, NotSerialized)
        {
            INDX = Zero
            While (One)
            {
                WLSB = DerefOf (Index (DAT0, INDX))
                INDX++
                WMSB = DerefOf (Index (DAT0, INDX))
                INDX++
                POFF = ((WMSB << 0x08) | WLSB)
                PLEN = DerefOf (Index (DAT0, INDX))
                INDX++
                If ((POFF == 0xFFFF))
                {
                    Break
                }

                While ((PLEN > Zero))
                {
                    Index (DAT0, INDX) = RBP0 (POFF)
                    INDX++
                    POFF++
                    PLEN--
                }
            }
        }

        Method (RPP0, 0, NotSerialized)
        {
            INDX = Zero
            While (One)
            {
                WLSB = DerefOf (Index (DAT0, INDX))
                INDX++
                WMSB = DerefOf (Index (DAT0, INDX))
                INDX++
                POFF = ((WMSB << 0x08) | WLSB)
                PLEN = DerefOf (Index (DAT0, INDX))
                INDX++
                If ((POFF == 0xFFFF))
                {
                    Break
                }

                While ((PLEN > Zero))
                {
                    WBP0 (POFF, DerefOf (Index (DAT0, INDX)))
                    INDX++
                    POFF++
                    PLEN--
                }
            }
        }

        Method (CLER, 0, NotSerialized)
        {
            INDX = Zero
            While (One)
            {
                WLSB = DerefOf (Index (DAT1, INDX))
                INDX++
                WMSB = DerefOf (Index (DAT1, INDX))
                INDX++
                POFF = ((WMSB << 0x08) | WLSB)
                PLEN = DerefOf (Index (DAT1, INDX))
                INDX++
                If ((POFF == 0xFFFF))
                {
                    Break
                }

                While ((PLEN > Zero))
                {
                    WBP0 (POFF, DerefOf (Index (DAT1, INDX)))
                    INDX++
                    POFF++
                    PLEN--
                }
            }
        }

        Method (_ON, 0, NotSerialized)  // _ON_: Power On
        {
            If ((RGPL (0x36, One) == Zero))
            {
                ^^^LPCB.HEC.SPIN (0x09, 0x04, Zero)
                RSTP ()
                SGPL (0x32, One, Zero)
                Sleep (0x64)
                SGPL (0x36, One, One)
                Sleep (0x64)
                SGPL (0x32, One, One)
                Sleep (0xC8)
                If ((PCSL >= 0x04))
                {
                    If ((SC7A == One))
                    {
                        C7OK (Zero)
                    }
                }

                If ((SETF == One))
                {
                    RPP0 ()
                    CLER ()
                }

                AFES = Zero
                If (((PNHM & 0x0F) >= 0x03))
                {
                    If ((P0UB != Zero))
                    {
                        PUAB ()
                        If ((P0UB == 0xFF))
                        {
                            If ((CMLW > DMLW))
                            {
                                UULN = (CMLW - DMLW) /* \_SB_.PCI0.P0P2.VGA_.DMLW */
                            }
                            Else
                            {
                                UULN = Zero
                            }

                            CBDL = (UULN / 0x02)
                        }
                        Else
                        {
                            If ((P0UB != Zero))
                            {
                                CBDL = P0UB /* \_SB_.P0UB */
                            }
                        }

                        MBDL = GMXB ()
                        If ((CBDL > MBDL))
                        {
                            CBDL = MBDL /* \_SB_.PCI0.P0P2.VGA_.MBDL */
                        }

                        PDUB (CBDL)
                    }
                }

                TREN = One
                LNKD = Zero
                While ((LNKS < 0x07))
                {
                    Local0 = 0x20
                    While (Local0)
                    {
                        If ((LNKS < 0x07))
                        {
                            Stall (0x64)
                            Local0--
                        }
                        Else
                        {
                            Break
                        }
                    }

                    If ((Local0 == Zero))
                    {
                        RTLK = One
                        Stall (0x64)
                    }
                }

                If ((SETF == One))
                {
                    If ((GPRF != One))
                    {
                        WVID = HVID /* \_SB_.PCI0.P0P2.VGA_.HVID */
                        WDID = HDID /* \_SB_.PCI0.P0P2.VGA_.HDID */
                    }
                }

                LCTL = ((ELCT & 0x43) | (LCTL & 0xFFBC))
                ISMI (0xB4)
                RSTV ()
            }
        }

        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
        {
            ^^^LPCB.HEC.SPIN (0x09, 0x04, Zero)
            SAVO ()
            ELCT = LCTL /* \_SB_.PCI0.P0P2.VGA_.LCTL */
            If ((GPRF != One))
            {
                HVID = SVID /* \_SB_.PCI0.P0P2.VGA_.SVID */
                HDID = SDID /* \_SB_.PCI0.P0P2.VGA_.SDID */
            }

            DMLW = EMLW /* \_SB_.PCI0.P0P2.VGA_.EMLW */
            SPP0 ()
            LNKD = One
            While ((LNKS != Zero))
            {
                Sleep (One)
            }

            AFES = 0x02
            If (((PNHM & 0x0F) >= 0x03))
            {
                If ((P0UB != Zero))
                {
                    MBDL = GMXB ()
                    PDUB (MBDL)
                }
            }

            If ((PCSL >= 0x04))
            {
                If ((SC7A == One))
                {
                    C7OK (One)
                }
            }

            Sleep (0x64)
            SGPL (0x32, One, Zero)
            Sleep (0xC8)
            SGPL (0x36, One, Zero)
            Sleep (0x64)
            SETF = One
            _PSC = 0x03
            DGPS = One
            ISMI (0xB3)
        }
    }

    Scope (_SB.PCI0.P0P2.VGA)
    {
        Method (GPST, 0, NotSerialized)
        {
            Return (0x50)
        }
    }

    Scope (_SB.PCI0.LPCB.HEC)
    {
        Method (_QCA, 0, NotSerialized)  // _Qxx: EC Query
        {
            CreateField (^^^P0P2.VGA.TGPC, 0x0A, 0x02, PRGE)
            If ((ToInteger (PRGE) == Zero))
            {
                ^^^P0P2.LNKD = One
            }

            SGPL (0x32, One, Zero)
            SGPL (0x36, One, Zero)
            If ((ToInteger (PRGE) == 0x02))
            {
                ^^^P0P2.LNKD = One
            }
        }

        Method (_QCB, 0, NotSerialized)  // _Qxx: EC Query
        {
        }

        Mutex (GC6M, 0x00)
        Method (ECNV, 1, NotSerialized)
        {
            Acquire (GC6M, 0xFFFF)
            If ((Arg0 == Zero))
            {
                WRAM (0x0C0E, One)
            }

            If ((Arg0 == One))
            {
                WRAM (0x0C0E, 0x02)
            }

            Release (GC6M)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (MF1F, 4, NotSerialized)
        {
            If ((Arg1 == 0x1F))
            {
                OperationRegion (F01F, SystemMemory, Arg0, 0x08)
                Field (F01F, DWordAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    LEN,    16, 
                    STAS,   8, 
                    EROR,   8
                }

                BSMI (Arg0)
                STAS &= 0xFE
            }
        }

        Method (MF6A, 5, NotSerialized)
        {
            If ((Arg2 == 0x6A))
            {
                \WMI0.WSMI (Arg4)
            }
        }
    }

    Scope (_SB.ATKD)
    {
        Method (FSMI, 1, NotSerialized)
        {
            FSFN = Arg0
            Local0 = (Arg0 | 0xA0)
            ISMI (0x90)
            Return (FSTA) /* \_SB_.FSTA */
        }

        Method (FLSH, 1, NotSerialized)
        {
            FSTA = Arg0
            FSMI (Zero)
        }

        Method (FINI, 1, NotSerialized)
        {
            FADR = Arg0
            Return (FSMI (One))
        }

        Method (FERS, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x02))
        }

        Method (FWRI, 1, NotSerialized)
        {
            FADR = Arg0
            FSIZ = 0x1000
            Return ((0x1000 - FSMI (0x03)))
        }

        Method (FWRP, 0, NotSerialized)
        {
            FSIZ = Zero
            Return ((0x1000 - FSMI (0x03)))
        }

        Method (FEBW, 1, NotSerialized)
        {
            FADR = Arg0
            Return (FSMI (0x04))
        }

        Method (FEBR, 1, NotSerialized)
        {
            FADR = Arg0
            Return (FSMI (0x05))
        }

        Method (FEDW, 0, NotSerialized)
        {
            Return (FSMI (0x06))
        }

        Method (ECSR, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x07))
        }

        Method (FLSC, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x08))
        }

        Method (FIME, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x09))
        }

        Method (FREC, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x0A))
        }

        Method (FCPW, 1, NotSerialized)
        {
            FADR = Arg0
            FSIZ = 0x1000
            Return (FSMI (0x0D))
        }

        Method (FCPP, 0, NotSerialized)
        {
            FSIZ = Zero
            Return (FSMI (0x0D))
        }

        Method (WFLH, 5, Serialized)
        {
            If ((Arg2 == 0x66))
            {
                If ((Arg3 == One))
                {
                    OperationRegion (WFLS, SystemMemory, Arg0, 0x0100)
                    Field (WFLS, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x06), 
                        STAS,   8, 
                        REST,   8, 
                        FSFN,   8, 
                        FSTA,   16, 
                        FADR,   32, 
                        FSIZ,   16
                    }

                    TRTY = 0x90
                    ^^FSFN = FSFN /* \_SB_.ATKD.WFLH.FSFN */
                    ^^FSTA = FSTA /* \_SB_.ATKD.WFLH.FSTA */
                    ^^FADR = FADR /* \_SB_.ATKD.WFLH.FADR */
                    ^^FSIZ = FSIZ /* \_SB_.ATKD.WFLH.FSIZ */
                    If ((FSFN == One))
                    {
                        ^^FADR = Arg1
                    }
                    Else
                    {
                        If ((FSFN == 0x80))
                        {
                            ^^FADR = Arg1
                        }
                        Else
                        {
                            If ((FSFN == 0x81))
                            {
                                ^^FADR = Arg1
                            }
                        }
                    }

                    ISMI (0x90)
                    Local0 = 0x012C
                    While ((Local0 && TRTY))
                    {
                        Sleep (One)
                        Local0--
                    }

                    FSFN = ^^FSFN /* \_SB_.FSFN */
                    FSTA = ^^FSTA /* \_SB_.FSTA */
                    FADR = ^^FADR /* \_SB_.FADR */
                    FSIZ = ^^FSIZ /* \_SB_.FSIZ */
                    STAS &= 0xFE
                    STAS |= 0x80
                    Return (Zero)
                }
                Else
                {
                    \WMI0.WSMI (Arg4)
                    Return (Zero)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (FIN2, 1, NotSerialized)
        {
            FSTA = Zero
            Return (FSMI (0x80))
        }
    }

    Scope (_SB.ATKD)
    {
        Method (DS3S, 1, NotSerialized)
        {
            Local0 = ^^PCI0.LPCB.HEC.RRAM (0x02FA)
            If ((Arg0 == 0x03))
            {
                If (DS3F)
                {
                    Local0 &= 0xFE
                }
                Else
                {
                    If (ACPF)
                    {
                        Local0 &= 0xFE
                    }
                    Else
                    {
                        Local0 |= One
                    }
                }
            }
            Else
            {
                Local0 &= 0xFE
            }

            ^^PCI0.LPCB.HEC.WRAM (0x02FA, Local0)
        }

        Method (DS3W, 1, NotSerialized)
        {
            If (!DS3F)
            {
                Notify (SLPB, 0x02) // Device Wake
            }
        }

        Method (DESP, 1, Serialized)
        {
            If (Arg0)
            {
                DS3F = Zero
            }
            Else
            {
                DS3F = One
            }

            Return (One)
        }

        Method (GDS3, 1, Serialized)
        {
            If (DS3F)
            {
                Return (0x00010000)
            }
            Else
            {
                Return (0x00010001)
            }
        }

        Method (NS3P, 0, NotSerialized)
        {
            Local0 = ^^PCI0.LPCB.HEC.RRAM (0x0C4A)
            Local1 = ^^PCI0.LPCB.HEC.RRAM (0x0C4B)
            Local0 <<= 0x08
            Local0 += Local1
            If ((Local0 == Zero))
            {
                Local1 = MEMS /* \_SB_.MEMS */
                If ((Local1 == 0x02))
                {
                    Local1 = (0xFFFF - 0x14)
                    Local1 |= 0x00080000
                    Return (Local1)
                }

                If ((Local1 == 0x04))
                {
                    Local1 = (0xFFFF - 0x14)
                    Local1 |= 0x00080000
                    Return (Local1)
                }

                If ((Local1 == 0x06))
                {
                    Local1 = (0xFFFF - 0x14)
                    Local1 |= 0x00080000
                    Return (Local1)
                }

                If ((Local1 == 0x08))
                {
                    Local1 = (0xFFFF - 0x14)
                    Local1 |= 0x00080000
                    Return (Local1)
                }

                Local1 = (0xFFFF - 0x14)
                Local1 |= 0x00080000
                Return (Local1)
            }

            Return (Local0)
        }

        Method (DS3P, 0, NotSerialized)
        {
            Local0 = ^^PCI0.LPCB.HEC.RRAM (0x0C4A)
            Local1 = ^^PCI0.LPCB.HEC.RRAM (0x0C4B)
            Local0 <<= 0x08
            Local0 += Local1
            If ((Local0 == Zero))
            {
                Local1 = MEMS /* \_SB_.MEMS */
                If ((Local1 == 0x02))
                {
                    Local1 = (0xFFFF - 0x08)
                    Local1 |= 0x00080000
                    Return (Local1)
                }

                If ((Local1 == 0x04))
                {
                    Local1 = (0xFFFF - 0x08)
                    Local1 |= 0x00080000
                    Return (Local1)
                }

                If ((Local1 == 0x06))
                {
                    Local1 = (0xFFFF - 0x08)
                    Local1 |= 0x00080000
                    Return (Local1)
                }

                If ((Local1 == 0x08))
                {
                    Local1 = (0xFFFF - 0x08)
                    Local1 |= 0x00080000
                    Return (Local1)
                }

                Local1 = (0xFFFF - 0x08)
                Local1 |= 0x00080000
                Return (Local1)
            }

            Return (Local0)
        }

        Method (T2BF, 0, NotSerialized)
        {
            Local0 = ^^PCI0.LPCB.HEC.SMBR (^^PCI0.LPCB.HEC.RDWD, 0x16, 0x13, Zero)
            If ((DerefOf (Index (Local0, Zero)) != Zero))
            {
                Return (0xFFFF)
            }

            Local1 = DerefOf (Index (Local0, 0x02))
            Return (Local1)
        }

        Method (N3MV, 0, NotSerialized)
        {
            Local0 = ^^PCI0.LPCB.HEC.RRAM (0x0C48)
            Local1 = ^^PCI0.LPCB.HEC.RRAM (0x0C49)
            Local0 <<= 0x08
            Local0 += Local1
            If ((Local0 == Zero))
            {
                Return (0x00083296)
            }

            Local0 -= 0xFFFF
            Return (Local0)
        }

        Method (D3MV, 0, NotSerialized)
        {
            Local0 = ^^PCI0.LPCB.HEC.RRAM (0x0C48)
            Local1 = ^^PCI0.LPCB.HEC.RRAM (0x0C49)
            Local0 <<= 0x08
            Local0 += Local1
            If ((Local0 == Zero))
            {
                Return (0x000840BA)
            }

            Local0 -= 0xFFFF
            Return (Local0)
        }

        Method (S4PC, 0, NotSerialized)
        {
            Return (0x18)
        }

        Method (IOMB, 1, Serialized)
        {
            Local0 = ^^PCI0.LPCB.HEC.RRAM (0x02FA)
            If (Arg0)
            {
                Local0 |= 0x02
            }
            Else
            {
                Local0 &= 0xFD
            }

            ^^PCI0.LPCB.HEC.WRAM (0x02FA, Local0)
            Return (One)
        }

        Method (IOMT, 1, Serialized)
        {
            Return (One)
        }
    }

    Scope (_SB.ATKD)
    {
        Method (MF42, 4, NotSerialized)
        {
            If ((Arg1 == 0x42))
            {
                OperationRegion (F042, SystemMemory, Arg0, 0x08)
                Field (F042, DWordAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    LEN,    16, 
                    STAS,   8, 
                    EROR,   8
                }

                Local0 = One
                If ((Arg2 == One))
                {
                    Local0 = SFB0 (Arg0, Arg3)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = SAOC (Arg0, Arg3)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = GBST (Arg0, Arg3)
                }

                If (Local0)
                {
                    EROR = Local0
                    STAS |= 0x02
                }

                STAS |= 0x80
                Return (Zero)
            }
        }

        Method (SFB0, 2, NotSerialized)
        {
            OperationRegion (F421, SystemMemory, Arg0, Arg1)
            Field (F421, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SOPT,   8
            }

            Return (Zero)
        }

        Method (SAOC, 2, NotSerialized)
        {
            OperationRegion (F422, SystemMemory, Arg0, Arg1)
            Field (F422, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                CNTF,   8
            }

            Return (Zero)
        }

        Method (GBST, 2, NotSerialized)
        {
            OperationRegion (F423, SystemMemory, Arg0, Arg1)
            Field (F423, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BOT1,   64, 
                BOT2,   64
            }

            BOT1 = TBOT /* \_SB_.TBOT */
            BOT2 = TRTC /* \_SB_.TRTC */
            Return (Zero)
        }
    }

    Scope (_SB.PCI0.LPCB.HEC)
    {
        Method (GBTT, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Local0 = EB0T /* \_SB_.PCI0.LPCB.HEC_.EB0T */
            }
            Else
            {
                Local0 = EB1T /* \_SB_.PCI0.LPCB.HEC_.EB1T */
            }

            Return (Local0)
        }

        Method (RRAM, 1, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                Local0 = Arg0
                Local1 = (Local0 & 0xFF)
                Local0 >>= 0x08
                Local0 &= 0xFF
                CDT2 = Local1
                CDT1 = Local0
                CMD1 = 0x80
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = EDA1 /* \_SB_.PCI0.LPCB.HEC_.EDA1 */
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (WRAM, 2, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                Local0 = Arg0
                Local1 = (Local0 & 0xFF)
                Local0 >>= 0x08
                Local0 &= 0xFF
                CDT2 = Local1
                CDT1 = Local0
                CDT3 = Arg1
                CMD1 = 0x81
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (STBR, 0, Serialized)
        {
            Local0 = (VGAF & One)
            ISMI (0x9A)
        }

        Method (SBRV, 1, Serialized)
        {
            WBOV (Zero, Arg0)
        }

        Name (DECF, Zero)
        Method (SFNV, 2, Serialized)
        {
            Local1 = RRAM (0x0521)
            Local2 = RRAM (0x0522)
            Local3 = RRAM (0x0523)
            Local4 = RRAM (0x0524)
            If ((Arg0 == Zero))
            {
                Local3 |= 0x80
                Local4 |= 0x80
                If ((Local1 & 0x80))
                {
                    Local0 = (Local1 >> 0x04)
                    Local0 &= 0x03
                    If ((Local0 == Zero))
                    {
                        WRAM (0x0523, Local3)
                    }
                    Else
                    {
                        If ((Local0 == One))
                        {
                            WRAM (0x0524, Local4)
                        }
                        Else
                        {
                            If ((Local0 == 0x02))
                            {
                                WRAM (0x0523, Local3)
                                WRAM (0x0524, Local4)
                            }
                        }
                    }
                }

                If ((Local2 & 0x80))
                {
                    Local0 = (Local2 >> 0x04)
                    Local0 &= 0x03
                    If ((Local0 == Zero))
                    {
                        WRAM (0x0523, Local3)
                    }
                    Else
                    {
                        If ((Local0 == One))
                        {
                            WRAM (0x0524, Local4)
                        }
                        Else
                        {
                            If ((Local0 == 0x02))
                            {
                                WRAM (0x0523, Local3)
                                WRAM (0x0524, Local4)
                            }
                        }
                    }
                }

                Return (Zero)
            }

            Local3 &= 0x7F
            Local4 &= 0x7F
            WRAM (0x0523, Local3)
            WRAM (0x0524, Local4)
            WFOV (Arg0--, Arg1)
            Return (Zero)
        }

        Method (SPIN, 3, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                Local0 = Arg0
                Local1 = Arg1
                If ((Local0 >= 0x41))
                {
                    Local0 -= 0x41
                }

                Local0 <<= 0x04
                Local0 |= Local1
                CDT2 = Local0
                If ((Arg2 == One))
                {
                    Local2 = 0x20
                }
                Else
                {
                    Local2 = 0x40
                }

                CDT1 = Local2
                CMD1 = 0x87
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (RPIN, 2, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                Local0 = Arg0
                If ((Local0 >= 0x41))
                {
                    Local0 -= 0x41
                }

                Local0 <<= 0x04
                Local0 |= Arg1
                CDT2 = Local0
                CDT1 = Zero
                CMD1 = 0x87
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = EDA1 /* \_SB_.PCI0.LPCB.HEC_.EDA1 */
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Name (WRQK, 0x02)
        Name (RDQK, 0x03)
        Name (SDBT, 0x04)
        Name (RCBT, 0x05)
        Name (WRBT, 0x06)
        Name (RDBT, 0x07)
        Name (WRWD, 0x08)
        Name (RDWD, 0x09)
        Name (WRBL, 0x0A)
        Name (RDBL, 0x0B)
        Name (WBLP, 0x8A)
        Name (RBLP, 0x8B)
        Name (PCLL, 0x0C)
        Name (GOOD, Zero)
        Name (UKER, 0x07)
        Name (DAER, 0x10)
        Name (DERR, 0x11)
        Name (CMDN, 0x12)
        Name (UKE2, 0x13)
        Name (DADN, 0x17)
        Name (SBTO, 0x18)
        Name (USPT, 0x19)
        Name (SBBY, 0x1A)
        Method (SMBR, 4, Serialized)
        {
            Local0 = Package (0x03)
                {
                    0x07, 
                    Zero, 
                    Zero
                }
            If ((Arg0 != RDBL))
            {
                If ((Arg0 != RDWD))
                {
                    If ((Arg0 != RDBT))
                    {
                        If ((Arg0 != RCBT))
                        {
                            If ((Arg0 != RDQK))
                            {
                                If ((Arg0 != RBLP))
                                {
                                    Return (Local0)
                                }
                            }
                        }
                    }
                }
            }

            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                If ((Arg3 == Zero))
                {
                    CDT1 = Zero
                }

                If ((Arg3 == One))
                {
                    CDT1 = One
                }

                CDT2 = Arg0
                Local1 = (Arg1 << One)
                CDT3 = Local1
                CDT4 = Arg2
                CDT5 = Zero
                CMD1 = 0x9A
                ESEM = 0x0F
                Local2 = 0x7F
                While ((Local2 && CMD1))
                {
                    Sleep (One)
                    Local2--
                }

                If ((CMD1 == Zero))
                {
                    Index (Local0, Zero) = GOOD /* \_SB_.PCI0.LPCB.HEC_.GOOD */
                    If ((Arg0 == RDBL))
                    {
                        Index (Local0, One) = BCNT /* \_SB_.PCI0.LPCB.HEC_.BCNT */
                        Index (Local0, 0x02) = BDAT /* \_SB_.PCI0.LPCB.HEC_.BDAT */
                    }

                    If ((Arg0 == RBLP))
                    {
                        Index (Local0, One) = BCNT /* \_SB_.PCI0.LPCB.HEC_.BCNT */
                        Index (Local0, 0x02) = BDAT /* \_SB_.PCI0.LPCB.HEC_.BDAT */
                    }

                    If ((Arg0 == RDWD))
                    {
                        Index (Local0, One) = 0x02
                        Local1 = EDA1 /* \_SB_.PCI0.LPCB.HEC_.EDA1 */
                        Local1 <<= 0x08
                        Local1 |= EDA2 /* \_SB_.PCI0.LPCB.HEC_.EDA2 */
                        Index (Local0, 0x02) = Local1
                    }

                    If ((Arg0 == RDBT))
                    {
                        Index (Local0, One) = One
                        Index (Local0, 0x02) = EDA1 /* \_SB_.PCI0.LPCB.HEC_.EDA1 */
                    }

                    If ((Arg0 == RCBT))
                    {
                        Index (Local0, One) = One
                        Index (Local0, 0x02) = EDA1 /* \_SB_.PCI0.LPCB.HEC_.EDA1 */
                    }
                }

                Release (MUEC)
            }

            Return (Local0)
        }

        Method (SMBW, 6, Serialized)
        {
            Local0 = Package (0x03)
                {
                    0x07, 
                    Zero, 
                    Zero
                }
            If ((Arg0 != WRBL))
            {
                If ((Arg0 != WRWD))
                {
                    If ((Arg0 != WRBT))
                    {
                        If ((Arg0 != SDBT))
                        {
                            If ((Arg0 != WRQK))
                            {
                                If ((Arg0 != WBLP))
                                {
                                    Return (Local0)
                                }
                            }
                        }
                    }
                }
            }

            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                If ((Arg3 == Zero))
                {
                    CDT1 = Zero
                }

                If ((Arg3 == One))
                {
                    CDT1 = One
                }

                CDT2 = Arg0
                Local1 = (Arg1 << One)
                CDT3 = Local1
                CDT4 = Arg2
                If ((Arg0 == WRBL))
                {
                    CDT5 = Arg4
                    BDAT = Arg5
                }

                If ((Arg0 == WBLP))
                {
                    CDT5 = Arg4
                    BDAT = Arg5
                }

                If ((Arg0 == WRWD))
                {
                    CDT5 = Zero
                    Local3 = (Arg5 & 0xFF)
                    CDT6 = Local3
                    Local3 = (Arg5 & 0xFF00)
                    Local3 >>= 0x08
                    CDT7 = Local3
                }

                If ((Arg0 == WRBT))
                {
                    CDT5 = Zero
                    CDT6 = Arg5
                }

                If ((Arg0 == SDBT))
                {
                    CDT5 = Zero
                    CDT6 = Arg5
                }

                CMD1 = 0x9A
                ESEM = 0x0F
                Local2 = 0x7F
                While ((Local2 && CMD1))
                {
                    Sleep (One)
                    Local2--
                }

                If ((CMD1 == Zero))
                {
                    Index (Local0, Zero) = Zero
                }
                Else
                {
                    Index (Local0, Zero) = UKER /* \_SB_.PCI0.LPCB.HEC_.UKER */
                }

                Release (MUEC)
            }

            Return (Local0)
        }

        Mutex (MUEP, 0x00)
        Method (RBEP, 1, NotSerialized)
        {
            Return (Zero)
        }

        Method (WBEP, 2, NotSerialized)
        {
            Return (Zero)
        }

        Method (SDAC, 2, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CDT2 = Arg1
                CMD1 = 0x86
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (ECXT, 6, NotSerialized)
        {
            Local1 = Package (0x06)
                {
                    0x10, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg1
                CDT2 = Arg2
                CDT3 = Arg3
                CDT4 = Arg4
                CDT5 = Arg5
                CMD1 = Arg0
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Index (Local1, Zero) = Zero
                    Index (Local1, One) = EDA1 /* \_SB_.PCI0.LPCB.HEC_.EDA1 */
                    Index (Local1, 0x02) = EDA2 /* \_SB_.PCI0.LPCB.HEC_.EDA2 */
                    Index (Local1, 0x03) = EDA3 /* \_SB_.PCI0.LPCB.HEC_.EDA3 */
                    Index (Local1, 0x04) = EDA4 /* \_SB_.PCI0.LPCB.HEC_.EDA4 */
                    Index (Local1, 0x05) = EDA5 /* \_SB_.PCI0.LPCB.HEC_.EDA5 */
                }
                Else
                {
                    Index (Local1, Zero) = 0x10
                }

                Release (MUEC)
            }

            Return (Local1)
        }

        Method (ECXL, 1, NotSerialized)
        {
            Local2 = Package (0x0D)
                {
                    0x10, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            Local1 = Arg0
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                CDT1 = DerefOf (Index (Local1, One))
                CDT2 = DerefOf (Index (Local1, 0x02))
                CDT3 = DerefOf (Index (Local1, 0x03))
                CDT4 = DerefOf (Index (Local1, 0x04))
                CDT5 = DerefOf (Index (Local1, 0x05))
                CDT6 = DerefOf (Index (Local1, 0x06))
                CDT7 = DerefOf (Index (Local1, 0x07))
                CDT8 = DerefOf (Index (Local1, 0x08))
                CDT9 = DerefOf (Index (Local1, 0x09))
                CD10 = DerefOf (Index (Local1, 0x0A))
                CD11 = DerefOf (Index (Local1, 0x0B))
                CD12 = DerefOf (Index (Local1, 0x0C))
                CMD1 = DerefOf (Index (Local1, Zero))
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Index (Local2, Zero) = Zero
                    Index (Local2, One) = EDA1 /* \_SB_.PCI0.LPCB.HEC_.EDA1 */
                    Index (Local2, 0x02) = EDA2 /* \_SB_.PCI0.LPCB.HEC_.EDA2 */
                    Index (Local2, 0x03) = EDA3 /* \_SB_.PCI0.LPCB.HEC_.EDA3 */
                    Index (Local2, 0x04) = EDA4 /* \_SB_.PCI0.LPCB.HEC_.EDA4 */
                    Index (Local2, 0x05) = EDA5 /* \_SB_.PCI0.LPCB.HEC_.EDA5 */
                    Index (Local2, 0x06) = EDA6 /* \_SB_.PCI0.LPCB.HEC_.EDA6 */
                    Index (Local2, 0x07) = EDA7 /* \_SB_.PCI0.LPCB.HEC_.EDA7 */
                    Index (Local2, 0x08) = EDA8 /* \_SB_.PCI0.LPCB.HEC_.EDA8 */
                    Index (Local2, 0x09) = EDA9 /* \_SB_.PCI0.LPCB.HEC_.EDA9 */
                    Index (Local2, 0x0A) = ED10 /* \_SB_.PCI0.LPCB.HEC_.ED10 */
                    Index (Local2, 0x0B) = ED11 /* \_SB_.PCI0.LPCB.HEC_.ED11 */
                    Index (Local2, 0x0C) = ED12 /* \_SB_.PCI0.LPCB.HEC_.ED12 */
                }
                Else
                {
                    Index (Local2, Zero) = 0x10
                }

                Release (MUEC)
            }

            Return (Local2)
        }

        Method (ECSB, 6, NotSerialized)
        {
            Local1 = Package (0x05)
                {
                    0x11, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            If ((Arg0 > One))
            {
                Return (Local1)
            }

            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CDT2 = Arg1
                CDT3 = Arg2
                CDT4 = Arg3
                CDT5 = Zero
                CDT6 = Arg4
                CDT7 = Arg5
                CMD1 = 0x9A
                ESEM = 0x0F
                Local2 = 0x7F
                While ((Local2 && CMD1))
                {
                    Sleep (One)
                    Local2--
                }

                If ((CMD1 == Zero))
                {
                    Index (Local1, Zero) = Zero
                    Index (Local1, One) = EDA1 /* \_SB_.PCI0.LPCB.HEC_.EDA1 */
                    Index (Local1, 0x02) = EDA2 /* \_SB_.PCI0.LPCB.HEC_.EDA2 */
                    Index (Local1, 0x03) = EDA3 /* \_SB_.PCI0.LPCB.HEC_.EDA3 */
                    Index (Local1, 0x04) = EDA4 /* \_SB_.PCI0.LPCB.HEC_.EDA4 */
                }
                Else
                {
                    Index (Local1, Zero) = 0x10
                }

                Release (MUEC)
            }

            Return (Local1)
        }

        OperationRegion (KAID, SystemIO, 0x025C, One)
        Field (KAID, ByteAcc, NoLock, Preserve)
        {
            AEID,   8
        }

        OperationRegion (KAIC, SystemIO, 0x025D, One)
        Field (KAIC, ByteAcc, NoLock, Preserve)
        {
            AEIC,   8
        }

        Method (WEIE, 0, Serialized)
        {
            Local0 = 0x4000
            Local1 = (AEIC & 0x02)
            While (((Local0 != Zero) && (Local1 == 0x02)))
            {
                Local1 = (AEIC & 0x02)
                Local0--
            }
        }

        Method (WEOF, 0, Serialized)
        {
            Local0 = 0x4000
            Local1 = (AEIC & One)
            While (((Local0 != Zero) && (Local1 == Zero)))
            {
                Local1 = (AEIC & One)
                Local0--
            }
        }

        Method (RFOV, 1, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CMD1 = 0x83
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = EDA1 /* \_SB_.PCI0.LPCB.HEC_.EDA1 */
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (WFOV, 2, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CDT2 = Arg1
                CMD1 = 0x84
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (RBOV, 1, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CMD1 = 0x85
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = EDA1 /* \_SB_.PCI0.LPCB.HEC_.EDA1 */
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (WBOV, 2, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CDT2 = Arg1
                CMD1 = 0x86
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (PKEN, 1, NotSerialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CMD1 = 0xB1
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (FNLK, 1, NotSerialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESEM)))
                {
                    Sleep (0x02)
                    Local6--
                }

                CDT1 = Arg0
                CMD1 = 0xB0
                ESEM = 0x0F
                Local0 = 0x7F
                While ((Local0 && CMD1))
                {
                    Sleep (One)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (C1MD, 2, Serialized)
        {
            Local0 = Zero
            Local1 = 0x0470
            While ((Local0 < Arg0))
            {
                Local2 = DerefOf (Index (Arg1, Local0))
                WRAM (Local1, Local2)
                Local0++
                Local1++
            }

            ECXT (0xC1, Arg0, Zero, Zero, Zero, Zero)
        }

        Method (PTPP, 1, Serialized)
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local6 = 0x7F
                Local7 = 0x0F
                While ((Local6 && (Local7 & ESMP)))
                {
                    Sleep (0x02)
                    Local6--
                }

                MCMD = 0x97
                MCDB = Arg0
                ESMP = 0x0F
                Local0 = 0x7F
                Local1 = 0x0F
                While (((Local0 && MCMD) && (Local1 & ESMP)))
                {
                    Sleep (One)
                    Local0--
                }

                If (((MCMD == Zero) && (ESMP == 0xF0)))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
                Return (Local0)
            }

            Return (Ones)
        }
    }

    Scope (\)
    {
        Name (TSP, 0x0A)
        Name (TC1, 0x02)
        Name (TC2, 0x0A)
        Name (PSVF, Zero)
        Name (CRTF, Zero)
    }

    Scope (_TZ)
    {
        Method (KELV, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFF)
            If ((Local0 >= 0x80))
            {
                Local0 -= 0x0100
                Local0 *= 0x0A
                Local0 -= 0x0AAC
                Return (Local0)
            }

            Local0 *= 0x0A
            Local0 += 0x0AAC
            Return (Local0)
        }

        Method (CELC, 1, NotSerialized)
        {
            Local0 = (Arg0 - 0x0AAC)
            Divide (Local0, 0x0A, Local1, Local0)
            Return (Local0)
        }

        Name (PLCY, Zero)
        ThermalZone (THRM)
        {
            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                RCRT ()
                Return (KELV (\_SB.TCRT))
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Local1 = 0x05
                While (Local1)
                {
                    Local0 = RTMP ()
                    If ((Local0 > \_SB.TCRT))
                    {
                        Local1--
                    }
                    Else
                    {
                        Local1 = Zero
                    }
                }

                Local2 = \_SB.TCRT
                Local2--
                If ((Local0 > Local2))
                {
                    If ((PSVF == One))
                    {
                        Return (KELV (Local2))
                    }
                    Else
                    {
                        If ((CRTF == One))
                        {
                            Return (KELV (Local0))
                        }
                    }
                }

                Return (KELV (Local0))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                If ((\_SB.CPUN == 0x08))
                {
                    Return (Package (0x08)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3, 
                        \_PR.CPU4, 
                        \_PR.CPU5, 
                        \_PR.CPU6, 
                        \_PR.CPU7
                    })
                }

                If ((\_SB.CPUN == 0x04))
                {
                    Return (Package (0x04)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3
                    })
                }

                If ((\_SB.CPUN == 0x02))
                {
                    Return (Package (0x02)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1
                    })
                }

                Return (Package (0x01)
                {
                    \_PR.CPU0
                })
            }

            Method (_TSP, 0, NotSerialized)  // _TSP: Thermal Sampling Period
            {
                Local0 = (TSP * 0x0A)
                Return (Local0)
            }

            Method (_TC1, 0, NotSerialized)  // _TC1: Thermal Constant 1
            {
                Return (TC1) /* \TC1_ */
            }

            Method (_TC2, 0, NotSerialized)  // _TC2: Thermal Constant 2
            {
                Return (TC2) /* \TC2_ */
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                RPSV ()
                If (PLCY)
                {
                    Return (KELV (\_SB.PPSV))
                }
                Else
                {
                    Return (KELV (\_SB.TPSV))
                }
            }

            Method (_SCP, 1, NotSerialized)  // _SCP: Set Cooling Policy
            {
                PLCY = Zero
                Notify (THRM, 0x81) // Thermal Trip Point Change
            }
        }
    }

    Scope (_TZ)
    {
        Name (ATMP, 0x3C)
        Name (LTMP, 0x3C)
        Name (FANS, Zero)
        Method (RTMP, 0, NotSerialized)
        {
            If (\_SB.PCI0.LPCB.HEC.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.HEC.PCPT
                If ((Local0 < 0x80))
                {
                    LTMP = Local0
                }
            }

            Return (LTMP) /* \_TZ_.LTMP */
        }

        Method (RLTM, 0, NotSerialized)
        {
            Return (ATMP) /* \_TZ_.ATMP */
        }

        Method (RCRT, 0, NotSerialized)
        {
            If (\_SB.PCI0.LPCB.HEC.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.HEC.ECRT
                If ((Local0 < 0x80))
                {
                    \_SB.TCRT = Local0
                }
            }
        }

        Method (RPSV, 0, NotSerialized)
        {
            If (\_SB.PCI0.LPCB.HEC.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.HEC.EPSV
                If ((Local0 < 0x80))
                {
                    Local0--
                    \_SB.TPSV = Local0
                }
            }
        }

        Method (RFAN, 1, NotSerialized)
        {
            If (\_SB.PCI0.LPCB.HEC.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.HEC.TACH (Arg0)
                Divide (Local0, 0x64, Local1, Local0)
                Local0 += One
                If ((Local0 <= 0x3C))
                {
                    FANS = Local0
                }
                Else
                {
                    Local0 = FANS /* \_TZ_.FANS */
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (RFSE, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (TCHG, 0, NotSerialized)
        {
        }

        Method (THDL, 0, NotSerialized)
        {
        }

        Method (TMSS, 1, NotSerialized)
        {
        }

        Method (TMSW, 1, NotSerialized)
        {
        }
    }

    Scope (_SB.PCI0.LPCB.HEC)
    {
        Method (PWAC, 1, Serialized)
        {
            If ((Arg0 >= 0x0B))
            {
                Local0 = 0x0A
            }
            Else
            {
                Local0 = Arg0
            }

            If ((Local0 == Zero))
            {
                Return (AB00) /* \_SB_.AB00 */
            }

            If ((Local0 == One))
            {
                Return (AB01) /* \_SB_.AB01 */
            }

            If ((Local0 == 0x02))
            {
                Return (AB02) /* \_SB_.AB02 */
            }

            If ((Local0 == 0x03))
            {
                Return (AB03) /* \_SB_.AB03 */
            }

            If ((Local0 == 0x04))
            {
                Return (AB04) /* \_SB_.AB04 */
            }

            If ((Local0 == 0x05))
            {
                Return (AB05) /* \_SB_.AB05 */
            }

            If ((Local0 == 0x06))
            {
                Return (AB06) /* \_SB_.AB06 */
            }

            If ((Local0 == 0x07))
            {
                Return (AB07) /* \_SB_.AB07 */
            }

            If ((Local0 == 0x08))
            {
                Return (AB08) /* \_SB_.AB08 */
            }

            If ((Local0 == 0x09))
            {
                Return (AB09) /* \_SB_.AB09 */
            }

            If ((Local0 == 0x0A))
            {
                Return (AB0A) /* \_SB_.AB0A */
            }

            If ((Local0 == 0x0B))
            {
                Return (AB0B) /* \_SB_.AB0B */
            }

            If ((Local0 == 0x0C))
            {
                Return (AB0C) /* \_SB_.AB0C */
            }

            If ((Local0 == 0x0D))
            {
                Return (AB0D) /* \_SB_.AB0D */
            }

            If ((Local0 == 0x0E))
            {
                Return (AB0E) /* \_SB_.AB0E */
            }

            If ((Local0 == 0x0F))
            {
                Return (AB0F) /* \_SB_.AB0F */
            }

            If ((Local0 == 0x10))
            {
                Return (AB10) /* \_SB_.AB10 */
            }

            If ((Local0 == 0x11))
            {
                Return (AB11) /* \_SB_.AB11 */
            }

            If ((Local0 == 0x12))
            {
                Return (AB12) /* \_SB_.AB12 */
            }

            If ((Local0 == 0x13))
            {
                Return (AB13) /* \_SB_.AB13 */
            }

            If ((Local0 == 0x14))
            {
                Return (AB14) /* \_SB_.AB14 */
            }

            If ((Local0 == 0x15))
            {
                Return (AB15) /* \_SB_.AB15 */
            }

            If ((Local0 == 0x16))
            {
                Return (AB16) /* \_SB_.AB16 */
            }

            If ((Local0 == 0x17))
            {
                Return (AB17) /* \_SB_.AB17 */
            }

            If ((Local0 == 0x18))
            {
                Return (AB18) /* \_SB_.AB18 */
            }

            If ((Local0 == 0x19))
            {
                Return (AB19) /* \_SB_.AB19 */
            }

            If ((Local0 == 0x1A))
            {
                Return (AB1A) /* \_SB_.AB1A */
            }

            If ((Local0 == 0x1B))
            {
                Return (AB1B) /* \_SB_.AB1B */
            }

            If ((Local0 == 0x1C))
            {
                Return (AB1C) /* \_SB_.AB1C */
            }

            If ((Local0 == 0x1D))
            {
                Return (AB1D) /* \_SB_.AB1D */
            }

            If ((Local0 == 0x1E))
            {
                Return (AB1E) /* \_SB_.AB1E */
            }

            If ((Local0 == 0x1F))
            {
                Return (AB1F) /* \_SB_.AB1F */
            }

            Return (Zero)
        }

        Method (PWDC, 1, Serialized)
        {
            If ((Arg0 >= 0x0B))
            {
                Local0 = 0x0A
            }
            Else
            {
                Local0 = Arg0
            }

            If ((Local0 == Zero))
            {
                Return (DB00) /* \_SB_.DB00 */
            }

            If ((Local0 == One))
            {
                Return (DB01) /* \_SB_.DB01 */
            }

            If ((Local0 == 0x02))
            {
                Return (DB02) /* \_SB_.DB02 */
            }

            If ((Local0 == 0x03))
            {
                Return (DB03) /* \_SB_.DB03 */
            }

            If ((Local0 == 0x04))
            {
                Return (DB04) /* \_SB_.DB04 */
            }

            If ((Local0 == 0x05))
            {
                Return (DB05) /* \_SB_.DB05 */
            }

            If ((Local0 == 0x06))
            {
                Return (DB06) /* \_SB_.DB06 */
            }

            If ((Local0 == 0x07))
            {
                Return (DB07) /* \_SB_.DB07 */
            }

            If ((Local0 == 0x08))
            {
                Return (DB08) /* \_SB_.DB08 */
            }

            If ((Local0 == 0x09))
            {
                Return (DB09) /* \_SB_.DB09 */
            }

            If ((Local0 == 0x0A))
            {
                Return (DB0A) /* \_SB_.DB0A */
            }

            If ((Local0 == 0x0B))
            {
                Return (DB0B) /* \_SB_.DB0B */
            }

            If ((Local0 == 0x0C))
            {
                Return (DB0C) /* \_SB_.DB0C */
            }

            If ((Local0 == 0x0D))
            {
                Return (DB0D) /* \_SB_.DB0D */
            }

            If ((Local0 == 0x0E))
            {
                Return (DB0E) /* \_SB_.DB0E */
            }

            If ((Local0 == 0x0F))
            {
                Return (DB0F) /* \_SB_.DB0F */
            }

            If ((Local0 == 0x10))
            {
                Return (DB10) /* \_SB_.DB10 */
            }

            If ((Local0 == 0x11))
            {
                Return (DB11) /* \_SB_.DB11 */
            }

            If ((Local0 == 0x12))
            {
                Return (DB12) /* \_SB_.DB12 */
            }

            If ((Local0 == 0x13))
            {
                Return (DB13) /* \_SB_.DB13 */
            }

            If ((Local0 == 0x14))
            {
                Return (DB14) /* \_SB_.DB14 */
            }

            If ((Local0 == 0x15))
            {
                Return (DB15) /* \_SB_.DB15 */
            }

            If ((Local0 == 0x16))
            {
                Return (DB16) /* \_SB_.DB16 */
            }

            If ((Local0 == 0x17))
            {
                Return (DB17) /* \_SB_.DB17 */
            }

            If ((Local0 == 0x18))
            {
                Return (DB18) /* \_SB_.DB18 */
            }

            If ((Local0 == 0x19))
            {
                Return (DB19) /* \_SB_.DB19 */
            }

            If ((Local0 == 0x1A))
            {
                Return (DB1A) /* \_SB_.DB1A */
            }

            If ((Local0 == 0x1B))
            {
                Return (DB1B) /* \_SB_.DB1B */
            }

            If ((Local0 == 0x1C))
            {
                Return (DB1C) /* \_SB_.DB1C */
            }

            If ((Local0 == 0x1D))
            {
                Return (DB1D) /* \_SB_.DB1D */
            }

            If ((Local0 == 0x1E))
            {
                Return (DB1E) /* \_SB_.DB1E */
            }

            If ((Local0 == 0x1F))
            {
                Return (DB1F) /* \_SB_.DB1F */
            }

            Return (Zero)
        }

        Method (ACPS, 0, Serialized)
        {
            Return ((GPWS () & One))
        }

        Method (DCPS, 1, Serialized)
        {
            Local0 = GPWS ()
            If (Arg0)
            {
                Local0 &= 0x04
            }
            Else
            {
                Local0 &= 0x02
            }

            If (Local0)
            {
                Local0 = One
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (GPWS, 0, Serialized)
        {
            Local0 = EPWS /* \_SB_.PCI0.LPCB.HEC_.EPWS */
            Return (Local0)
        }

        Method (BCHG, 1, Serialized)
        {
            If (Arg0)
            {
                If (ECAV ())
                {
                    Local0 = EB1S /* \_SB_.PCI0.LPCB.HEC_.EB1S */
                    Local0 &= 0xFF
                    If ((Local0 != 0xFF))
                    {
                        Local0 &= 0x02
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }
            Else
            {
                If (ECAV ())
                {
                    Local0 = EB0S /* \_SB_.PCI0.LPCB.HEC_.EB0S */
                    Local0 &= 0xFF
                    If ((Local0 != 0xFF))
                    {
                        Local0 &= 0x02
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }
        }

        Method (BCLE, 1, Serialized)
        {
            If (Arg0)
            {
                If (ECAV ())
                {
                    Local1 = EB1S /* \_SB_.PCI0.LPCB.HEC_.EB1S */
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            If ((Local1 == 0x02))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                If ((Local1 == 0x10))
                                {
                                    Local0 = One
                                }
                            }
                        }
                    }

                    Local0 = Ones
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
            Else
            {
                If (ECAV ())
                {
                    Local1 = EB0S /* \_SB_.PCI0.LPCB.HEC_.EB0S */
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            If ((Local1 == 0x02))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                If ((Local1 == 0x10))
                                {
                                    Local0 = One
                                }
                            }
                        }
                    }

                    Local0 = Ones
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
        }

        Method (CHBT, 1, Serialized)
        {
            Local1 = GBTT (Arg0)
            If ((Local1 == 0xFF))
            {
                Local0 = Zero
            }
            Else
            {
                Local0 = (Local1 & 0x10)
                If (Local0)
                {
                    Local0 = One
                }
            }

            Return (Local0)
        }

        Method (TACH, 1, NotSerialized)
        {
            If (ECAV ())
            {
                If (Arg0)
                {
                    Local0 = F1TS /* \_SB_.PCI0.LPCB.HEC_.F1TS */
                }
                Else
                {
                    Local0 = F0TS /* \_SB_.PCI0.LPCB.HEC_.F0TS */
                }

                Local1 = 0x8CA0
                Divide (Local1, Local0, Local2, Local0)
                Local0 *= 0x3C
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (EC0S, 1, NotSerialized)
        {
        }

        Method (EC0W, 1, NotSerialized)
        {
            If ((Arg0 <= 0x04))
            {
                If ((DS3T != 0xAA))
                {
                    ACPF = ACPS ()
                }

                DCPF = DCPS (Zero)
                PNOT ()
            }
        }

        Name (FHKM, One)
        Method (FHKW, 0, Serialized)
        {
            While (!FHKM)
            {
                Sleep (0x0A)
            }

            FHKM = Zero
        }

        Method (FHKS, 0, Serialized)
        {
            FHKM = One
        }

        Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query
        {
            Notify (SLPB, 0x80) // Status Change
        }

        Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query
        {
            If ((OSFG >= OSW8))
            {
                ^^^^ASHS.NTFY (0x88)
                Return (Zero)
            }

            If ((^^^^ATKD.WAPF & 0x04))
            {
                If (ATKP)
                {
                    ^^^^ATKD.NTFY (0x88)
                }
            }
            Else
            {
                Local0 = OHWR ()
                If ((Local0 & 0x02))
                {
                    If ((Local0 & One))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = One
                }

                If (Local0)
                {
                    If ((^^^^ATKD.WAPF & One))
                    {
                        If ((WLDP && BTDP))
                        {
                            Local0 = WRST /* \_SB_.WRST */
                            Local0 |= (BRST << One)
                            Local0++
                            If ((Local0 > 0x03))
                            {
                                Local0 = Zero
                            }

                            Local1 = DerefOf (Index (WBTL, Local0))
                            If ((Local1 == Zero))
                            {
                                ^^^^ATKD.NTFY (0x5D)
                                Sleep (0x0DAC)
                                OBTD (Zero)
                                ^^^^ATKD.NTFY (0x7E)
                            }

                            If ((Local1 == One))
                            {
                                ^^^^ATKD.NTFY (0x5D)
                                Sleep (0x0DAC)
                                OBTD (Zero)
                                ^^^^ATKD.NTFY (0x7E)
                            }

                            If ((Local1 == 0x02))
                            {
                                ^^^^ATKD.NTFY (0x5D)
                                Sleep (0x0DAC)
                                OBTD (One)
                                ^^^^ATKD.NTFY (0x7D)
                            }

                            If ((Local1 == 0x03))
                            {
                                ^^^^ATKD.NTFY (0x5D)
                                Sleep (0x0DAC)
                                OBTD (One)
                                ^^^^ATKD.NTFY (0x7D)
                            }
                        }
                        Else
                        {
                            If (WLDP)
                            {
                                ^^^^ATKD.NTFY (0x5D)
                            }
                            Else
                            {
                                If (BTDP)
                                {
                                    If (BRST)
                                    {
                                        OBTD (Zero)
                                        ^^^^ATKD.NTFY (0x7E)
                                    }
                                    Else
                                    {
                                        OBTD (One)
                                        ^^^^ATKD.NTFY (0x7D)
                                    }
                                }
                            }
                        }
                    }
                    Else
                    {
                        If ((WLDP && BTDP))
                        {
                            Local0 = WRST /* \_SB_.WRST */
                            Local0 |= (BRST << One)
                            Local0++
                            If ((Local0 > 0x03))
                            {
                                Local0 = Zero
                            }

                            Local1 = DerefOf (Index (WBTL, Local0))
                            If ((Local1 == Zero))
                            {
                                OWLD (Zero)
                                ^^^^ATKD.NTFY (0x5F)
                                Sleep (0x0DAC)
                                OBTD (Zero)
                                ^^^^ATKD.NTFY (0x7E)
                            }

                            If ((Local1 == One))
                            {
                                OWLD (One)
                                ^^^^ATKD.NTFY (0x5E)
                                Sleep (0x0DAC)
                                OBTD (Zero)
                                ^^^^ATKD.NTFY (0x7E)
                            }

                            If ((Local1 == 0x02))
                            {
                                OWLD (Zero)
                                ^^^^ATKD.NTFY (0x5F)
                                Sleep (0x0DAC)
                                OBTD (One)
                                ^^^^ATKD.NTFY (0x7D)
                            }

                            If ((Local1 == 0x03))
                            {
                                OWLD (One)
                                ^^^^ATKD.NTFY (0x5E)
                                Sleep (0x0DAC)
                                OBTD (One)
                                ^^^^ATKD.NTFY (0x7D)
                            }
                        }
                        Else
                        {
                            If (WLDP)
                            {
                                If (WRST)
                                {
                                    OWLD (Zero)
                                    ^^^^ATKD.NTFY (0x5F)
                                }
                                Else
                                {
                                    OWLD (One)
                                    ^^^^ATKD.NTFY (0x5E)
                                }
                            }
                            Else
                            {
                                If (BTDP)
                                {
                                    If (BRST)
                                    {
                                        OBTD (Zero)
                                        ^^^^ATKD.NTFY (0x7E)
                                    }
                                    Else
                                    {
                                        OBTD (One)
                                        ^^^^ATKD.NTFY (0x7D)
                                    }
                                }
                            }
                        }
                    }
                }
                Else
                {
                    If (WLDP)
                    {
                        ^^^^ATKD.NTFY (0x5F)
                    }

                    If ((WLDP && BTDP))
                    {
                        Sleep (0x0DAC)
                    }

                    If (BTDP)
                    {
                        ^^^^ATKD.NTFY (0x7E)
                    }
                }
            }
        }

        Name (WBTL, Package (0x04)
        {
            Zero, 
            One, 
            0x02, 
            0x03
        })
        Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query
        {
            If ((OSFG >= OSVT))
            {
                If (^^^GFX0.PRST ())
                {
                    ^^^GFX0.DWBL ()
                }
            }
            Else
            {
                If ((LBTN > Zero))
                {
                    LBTN--
                }

                If ((LBTN > 0x0A))
                {
                    LBTN = 0x0A
                }

                STBR ()
                If (ATKP)
                {
                    ^^^^ATKD.NTFY ((LBTN + 0x20))
                }
            }

            Return (One)
        }

        Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query
        {
            If ((OSFG >= OSVT))
            {
                If (^^^GFX0.PRST ())
                {
                    ^^^GFX0.UPBL ()
                }
            }
            Else
            {
                If ((LBTN < 0x0A))
                {
                    LBTN++
                }
                Else
                {
                    LBTN = 0x0A
                }

                STBR ()
                If (ATKP)
                {
                    ^^^^ATKD.NTFY ((LBTN + 0x10))
                }
            }

            Return (One)
        }

        Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (LIDP)
            {
                If (ATKP)
                {
                    ^^^^ATKD.NTFY (0x35)
                }
            }
            Else
            {
                Local0 = One
                Local0 = RPIN (0x05, 0x07)
                Local0 ^= One
                SPIN (0x05, 0x07, Local0)
                If (ATKP)
                {
                    Local0 -= 0x34
                    ^^^^ATKD.NTFY (Local0)
                }
            }
        }

        Name (AVNC, Package (0x20)
        {
            0x61, 
            0x61, 
            0x62, 
            0x63, 
            0x64, 
            0x65, 
            0x66, 
            0x67, 
            0x8C, 
            0x8D, 
            0x8E, 
            0x90, 
            0x8F, 
            0x91, 
            0x92, 
            0x93, 
            0xA0, 
            0xA1, 
            0xA2, 
            0xA4, 
            0xA3, 
            0xA5, 
            0xA6, 
            0xA7, 
            0x61, 
            0x61, 
            0x61, 
            0x61, 
            0x61, 
            0x61, 
            0x61, 
            0x61
        })
        Name (LVNC, Package (0x04)
        {
            Zero, 
            0x61, 
            0x62, 
            0xA0
        })
        Name (FNF8, Zero)
        Method (_QD7, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (FNF8)
            {
                ECXT (0xB8, 0x02, Zero, Zero, Zero, Zero)
                FNF8 = Zero
            }
        }

        Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query
        {
            If ((OSFG >= OSW8))
            {
                If ((FNF8 == Zero))
                {
                    ECXT (0xB8, Zero, Zero, Zero, Zero, Zero)
                    ECXT (0xB8, One, Zero, Zero, Zero, Zero)
                    FNF8 = One
                }
                Else
                {
                    ECXT (0xB8, One, Zero, Zero, Zero, Zero)
                }
            }
            Else
            {
                FHKW ()
                Local0 = ADVG ()
                If (NATK ())
                {
                    If ((OSFG == OSLX))
                    {
                        If ((Local0 == 0x10))
                        {
                            Local0 = 0x03
                        }

                        Local1 = DerefOf (Index (LVNC, Local0))
                    }
                    Else
                    {
                        Local1 = DerefOf (Index (AVNC, Local0))
                    }

                    If (ATKP)
                    {
                        ^^^^ATKD.NTFY (Local1)
                    }
                    Else
                    {
                        SWHG (Local0)
                    }
                }
                Else
                {
                    SWHG (Local0)
                }

                FHKS ()
            }
        }

        Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query
        {
            If ((OSFG >= OSW8))
            {
                ECXT (0xB8, 0x03, Zero, Zero, Zero, Zero)
            }
            Else
            {
                If (ATKP)
                {
                    ^^^^ATKD.NTFY (0x32)
                }
            }
        }

        Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query
        {
            If ((OSFG >= OSW8))
            {
                ECXT (0xB8, 0x04, Zero, Zero, Zero, Zero)
            }
            Else
            {
                If ((AVOL < 0x0F))
                {
                    AVOL++
                }

                If (ATKP)
                {
                    ^^^^ATKD.NTFY (0x31)
                }
            }
        }

        Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query
        {
            If ((OSFG >= OSW8))
            {
                ECXT (0xB8, 0x05, Zero, Zero, Zero, Zero)
            }
            Else
            {
                If ((AVOL > Zero))
                {
                    AVOL--
                }

                If (ATKP)
                {
                    ^^^^ATKD.NTFY (0x30)
                }
            }
        }

        Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x45)
            }
        }

        Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x43)
            }
        }

        Method (_Q6D, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x40)
            }
        }

        Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x41)
            }
        }

        Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                Local0 = (One << 0x0E)
                If ((IOST & Local0))
                {
                    ^^^^ATKD.NTFY (0x6B)
                }
                Else
                {
                    ^^^^ATKD.NTFY (0x6F)
                }
            }
        }

        Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x50)
            }
        }

        Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x51)
            }
        }

        Method (_Q72, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x5C)
            }
        }

        Method (_Q71, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x8A)
            }
        }

        Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x82)
            }
        }

        Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x84)
            }
        }

        Method (_QB0, 0, NotSerialized)  // _Qxx: EC Query
        {
            Local0 = RRAM (0x051C)
            If ((Local0 & 0x02))
            {
                CRTF = One
                PSVF = Zero
            }
            Else
            {
                If ((Local0 & One))
                {
                    PSVF = One
                    CRTF = Zero
                }
                Else
                {
                    PSVF = Zero
                    CRTF = Zero
                }
            }

            Notify (\_TZ.THRM, 0x80) // Thermal Status Change
        }

        Method (_QCC, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x6D)
            }
            Else
            {
                Notify (SLPB, 0x80) // Status Change
            }
        }

        Method (_Q68, 0, NotSerialized)  // _Qxx: EC Query
        {
        }

        Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ACPS ())
            {
                ACPF = One
                Local0 = 0x58
            }
            Else
            {
                ACPF = Zero
                Local0 = 0x57
            }

            If ((OSFG < OSVT))
            {
                STBR ()
            }

            Notify (AC0, 0x80) // Status Change
            If (ATKP)
            {
                ^^^^ATKD.NTFY (Local0)
            }

            Sleep (0x64)
            PNOT ()
            Sleep (0x0A)
            NBAT (0x80)
        }

        Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0xB5)
            }
        }

        Method (_QA5, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x6E)
            }
            Else
            {
                If (BATP (Zero))
                {
                    Notify (BAT0, 0x80) // Status Change
                }
            }
        }

        Method (_QBD, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (ATKP)
            {
                ^^^^ATKD.NTFY (0x6D)
            }
            Else
            {
                Notify (SLPB, 0x80) // Status Change
            }
        }

        Method (_QAE, 0, NotSerialized)  // _Qxx: EC Query
        {
            SGPL (One, One, Zero)
        }

        Method (_QBE, 0, NotSerialized)  // _Qxx: EC Query
        {
            SGPL (One, One, Zero)
        }

        Method (_QAF, 0, NotSerialized)  // _Qxx: EC Query
        {
            SGPL (One, One, One)
        }

        Method (_QBF, 0, NotSerialized)  // _Qxx: EC Query
        {
            SGPL (One, One, One)
        }
    }

    Scope (_TZ)
    {
    }

    Scope (_SB.PCI0.LPCB.HEC)
    {
        Method (MF63, 4, NotSerialized)
        {
            If ((Arg1 != 0x63))
            {
                Return (Zero)
            }

            If ((Arg2 == One))
            {
                M631 (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                M632 (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                M633 (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                M634 (Arg0, Arg1)
            }

            If ((Arg2 == 0x05))
            {
                M635 (Arg0, Arg1)
            }

            If ((Arg2 == 0x06))
            {
                M636 (Arg0, Arg1)
            }

            If ((Arg2 == 0x07))
            {
                M637 (Arg0, Arg1)
            }

            If ((Arg2 == 0x08))
            {
                M638 (Arg0, Arg1)
            }

            If ((Arg2 == 0x09))
            {
                M639 (Arg0, Arg1)
            }

            If ((Arg2 == 0x0A))
            {
                M63A (Arg0, Arg1)
            }

            If ((Arg2 == 0x0B))
            {
                M63B (Arg0, Arg1)
            }

            If ((Arg2 == 0x0C))
            {
                M63C (Arg0, Arg1)
            }

            If ((Arg2 == 0x0D))
            {
                M63D (Arg0, Arg1)
            }

            If ((Arg2 == 0x0E))
            {
                M63E (Arg0, Arg1)
            }

            If ((Arg3 == 0x0F))
            {
                M63F (Arg0, Arg1)
            }

            Return (Zero)
        }

        Method (M631, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                TSXR,   8, 
                TSXL,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                TSXR = RRAM (0x03E2)
                TSXL = RRAM (0x03E3)
            }
            Else
            {
                If ((FUNC == One))
                {
                    TSXR = RRAM (0x03E0)
                    TSXL = RRAM (0x03E1)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Return (Zero)
        }

        Method (M632, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                DEVS,   8, 
                DEVT,   16
            }

            SM63 = 0x80
            EM63 = Zero
            If ((DEVS == Zero))
            {
                DEVT = TJMX /* \_SB_.TJMX */
            }
            Else
            {
                If ((DEVS == One))
                {
                    DEVT = PCPT /* \_SB_.PCI0.LPCB.HEC_.PCPT */
                }
                Else
                {
                    If ((DEVS == 0x02))
                    {
                        DEVT = Zero
                    }
                    Else
                    {
                        If ((DEVS == 0x03))
                        {
                            DEVT = RRAM (0x03E2)
                        }
                        Else
                        {
                            SM63 = 0x80
                            EM63 = One
                        }
                    }
                }
            }

            Return (Zero)
        }

        Method (M633, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FANX,   8, 
                FANS,   8, 
                FANT,   16, 
                TRGG,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FANX == Zero))
            {
                FANS = F0CS /* \_SB_.PCI0.LPCB.HEC_.F0CS */
                FANT = F0TS /* \_SB_.PCI0.LPCB.HEC_.F0TS */
                TRGG = RRAM (0x0576)
            }
            Else
            {
                If ((FANX == One))
                {
                    FANS = F1CS /* \_SB_.PCI0.LPCB.HEC_.F1CS */
                    FANT = F1TS /* \_SB_.PCI0.LPCB.HEC_.F1TS */
                    TRGG = RRAM (0x0577)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Return (Zero)
        }

        Method (M634, 2, Serialized)
        {
            Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                PARA,   8, 
                DATA,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                While (One)
                {
                    _T_0 = ToInteger (PARA)
                    If ((_T_0 == Zero))
                    {
                        DATA = RRAM (0x0521)
                    }
                    Else
                    {
                        If ((_T_0 == One))
                        {
                            DATA = RRAM (0x0522)
                        }
                        Else
                        {
                            If ((_T_0 == 0x02))
                            {
                                DATA = RRAM (0x0523)
                            }
                            Else
                            {
                                If ((_T_0 == 0x03))
                                {
                                    DATA = RRAM (0x0524)
                                }
                                Else
                                {
                                    If ((_T_0 == 0x04))
                                    {
                                        DATA = RRAM (0x0509)
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x05))
                                        {
                                            DATA = RRAM (0x050A)
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x06))
                                            {
                                                DATA = RRAM (0x0568)
                                            }
                                            Else
                                            {
                                                SM63 = 0x80
                                                EM63 = One
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                If ((FUNC == One))
                {
                    While (One)
                    {
                        _T_1 = ToInteger (PARA)
                        If ((_T_1 == Zero))
                        {
                            WRAM (0x0521, DATA)
                        }
                        Else
                        {
                            If ((_T_1 == One))
                            {
                                WRAM (0x0522, DATA)
                            }
                            Else
                            {
                                If ((_T_1 == 0x02))
                                {
                                    WRAM (0x0523, DATA)
                                    If (((DATA & 0x80) == Zero))
                                    {
                                        MCFD = 0x88
                                    }
                                    Else
                                    {
                                        MCFD = Zero
                                    }
                                }
                                Else
                                {
                                    If ((_T_1 == 0x03))
                                    {
                                        WRAM (0x0524, DATA)
                                    }
                                    Else
                                    {
                                        If ((_T_1 == 0x04))
                                        {
                                            WRAM (0x0509, DATA)
                                        }
                                        Else
                                        {
                                            If ((_T_1 == 0x05))
                                            {
                                                WRAM (0x050A, DATA)
                                            }
                                            Else
                                            {
                                                If ((_T_1 == 0x06))
                                                {
                                                    WRAM (0x0568, DATA)
                                                }
                                                Else
                                                {
                                                    SM63 = 0x80
                                                    EM63 = One
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Return (Zero)
        }

        Method (M635, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ECSD,   8, 
                OSSD,   8, 
                OSPV,   8, 
                THON,   8, 
                THOF,   8, 
                FNER,   8, 
                VGSD,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                ECSD = RRAM (0x0530)
                OSSD = RRAM (0x03E4)
                OSPV = RRAM (0x03E5)
                THON = RRAM (0x0533)
                THOF = RRAM (0x0534)
                FNER = RRAM (0x0535)
                VGSD = RRAM (0x0536)
            }
            Else
            {
                If ((FUNC == One))
                {
                    WRAM (0x0530, ECSD)
                    WRAM (0x03E4, OSSD)
                    WRAM (0x03E5, OSPV)
                    WRAM (0x0533, THON)
                    WRAM (0x0534, THOF)
                    WRAM (0x0535, FNER)
                    WRAM (0x0536, VGSD)
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Return (Zero)
        }

        Method (M636, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                TTS1,   8, 
                TTS2,   8, 
                TTS3,   8, 
                TTS4,   8, 
                TTS5,   8, 
                TTS6,   8, 
                TTS7,   8, 
                TTS8,   8, 
                TFFP,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    TTS1 = RRAM (0x0537)
                    TTS2 = RRAM (0x0538)
                    TTS3 = RRAM (0x0539)
                    TTS4 = RRAM (0x053A)
                    TTS5 = RRAM (0x053B)
                    TTS6 = RRAM (0x053C)
                    TTS7 = RRAM (0x053D)
                    TTS8 = RRAM (0x053E)
                    TFFP = RRAM (0x053F)
                }
                Else
                {
                    If ((ALGM == One))
                    {
                        TTS1 = RRAM (0x0597)
                        TTS2 = RRAM (0x0598)
                        TTS3 = RRAM (0x0599)
                        TTS4 = RRAM (0x059A)
                        TTS5 = RRAM (0x059B)
                        TTS6 = RRAM (0x059C)
                        TTS7 = RRAM (0x059D)
                        TTS8 = RRAM (0x059E)
                        TFFP = RRAM (0x059F)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
            }
            Else
            {
                If ((FUNC == One))
                {
                    If ((ALGM == Zero))
                    {
                        WRAM (0x0537, TTS1)
                        WRAM (0x0538, TTS2)
                        WRAM (0x0539, TTS3)
                        WRAM (0x053A, TTS4)
                        WRAM (0x053B, TTS5)
                        WRAM (0x053C, TTS6)
                        WRAM (0x053D, TTS7)
                        WRAM (0x053E, TTS8)
                        WRAM (0x053F, TFFP)
                    }
                    Else
                    {
                        If ((ALGM == One))
                        {
                            WRAM (0x0597, TTS1)
                            WRAM (0x0598, TTS2)
                            WRAM (0x0599, TTS3)
                            WRAM (0x059A, TTS4)
                            WRAM (0x059B, TTS5)
                            WRAM (0x059C, TTS6)
                            WRAM (0x059D, TTS7)
                            WRAM (0x059E, TTS8)
                            WRAM (0x059F, TFFP)
                        }
                        Else
                        {
                            SM63 = 0x80
                            EM63 = One
                        }
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
        }

        Method (M637, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                TDA1,   8, 
                TDA2,   8, 
                TDA3,   8, 
                TDA4,   8, 
                TDA5,   8, 
                TDA6,   8, 
                TDA7,   8, 
                TDA8,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    TDA1 = RRAM (0x0548)
                    TDA2 = RRAM (0x0549)
                    TDA3 = RRAM (0x054A)
                    TDA4 = RRAM (0x054B)
                    TDA5 = RRAM (0x054C)
                    TDA6 = RRAM (0x054D)
                    TDA7 = RRAM (0x054E)
                    TDA8 = RRAM (0x054F)
                }
                Else
                {
                    If ((ALGM == One))
                    {
                        TDA1 = RRAM (0x05A8)
                        TDA2 = RRAM (0x05A9)
                        TDA3 = RRAM (0x05AA)
                        TDA4 = RRAM (0x05AB)
                        TDA5 = RRAM (0x05AC)
                        TDA6 = RRAM (0x05AD)
                        TDA7 = RRAM (0x05AE)
                        TDA8 = RRAM (0x05AF)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
            }
            Else
            {
                If ((FUNC == One))
                {
                    If ((ALGM == Zero))
                    {
                        WRAM (0x0548, TDA1)
                        WRAM (0x0549, TDA2)
                        WRAM (0x054A, TDA3)
                        WRAM (0x054B, TDA4)
                        WRAM (0x054C, TDA5)
                        WRAM (0x054D, TDA6)
                        WRAM (0x054E, TDA7)
                        WRAM (0x054F, TDA8)
                    }
                    Else
                    {
                        If ((ALGM == One))
                        {
                            WRAM (0x05A8, TDA1)
                            WRAM (0x05A9, TDA2)
                            WRAM (0x05AA, TDA3)
                            WRAM (0x05AB, TDA4)
                            WRAM (0x05AC, TDA5)
                            WRAM (0x05AD, TDA6)
                            WRAM (0x05AE, TDA7)
                            WRAM (0x05AF, TDA8)
                        }
                        Else
                        {
                            SM63 = 0x80
                            EM63 = One
                        }
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
        }

        Method (M638, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                ASC1,   8, 
                ASC2,   8, 
                ASC3,   8, 
                ASC4,   8, 
                ADA1,   8, 
                ADA2,   8, 
                ADA3,   8, 
                ADA4,   8, 
                DSC1,   8, 
                DSC2,   8, 
                DSC3,   8, 
                DSC4,   8, 
                DDA1,   8, 
                DDA2,   8, 
                DDA3,   8, 
                DDA4,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    ASC1 = RRAM (0x0550)
                    ASC2 = RRAM (0x0551)
                    ASC3 = RRAM (0x0552)
                    ASC4 = RRAM (0x0553)
                    ADA1 = RRAM (0x0554)
                    ADA2 = RRAM (0x0555)
                    ADA3 = RRAM (0x0556)
                    ADA4 = RRAM (0x0557)
                    DSC1 = RRAM (0x0558)
                    DSC2 = RRAM (0x0559)
                    DSC3 = RRAM (0x055A)
                    DSC4 = RRAM (0x055B)
                    DDA1 = RRAM (0x055C)
                    DDA2 = RRAM (0x055D)
                    DDA3 = RRAM (0x055E)
                    DDA4 = RRAM (0x055F)
                }
                Else
                {
                    If ((ALGM == One))
                    {
                        ASC1 = RRAM (0x05B0)
                        ASC2 = RRAM (0x05B1)
                        ASC3 = RRAM (0x05B2)
                        ASC4 = RRAM (0x05B3)
                        ADA1 = RRAM (0x05B4)
                        ADA2 = RRAM (0x05B5)
                        ADA3 = RRAM (0x05B6)
                        ADA4 = RRAM (0x05B7)
                        DSC1 = RRAM (0x05B8)
                        DSC2 = RRAM (0x05B9)
                        DSC3 = RRAM (0x05BA)
                        DSC4 = RRAM (0x05BB)
                        DDA1 = RRAM (0x05BC)
                        DDA2 = RRAM (0x05BD)
                        DDA3 = RRAM (0x05BE)
                        DDA4 = RRAM (0x05BF)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
            }
            Else
            {
                If ((FUNC == One))
                {
                    If ((ALGM == Zero))
                    {
                        WRAM (0x0550, ASC1)
                        WRAM (0x0551, ASC2)
                        WRAM (0x0552, ASC3)
                        WRAM (0x0553, ASC4)
                        WRAM (0x0554, ADA1)
                        WRAM (0x0555, ADA2)
                        WRAM (0x0556, ADA3)
                        WRAM (0x0557, ADA4)
                        WRAM (0x0558, DSC1)
                        WRAM (0x0559, DSC2)
                        WRAM (0x055A, DSC3)
                        WRAM (0x055B, DSC4)
                        WRAM (0x055C, DDA1)
                        WRAM (0x055D, DDA2)
                        WRAM (0x055E, DDA3)
                        WRAM (0x055F, DDA4)
                    }
                    Else
                    {
                        If ((ALGM == One))
                        {
                            WRAM (0x05B0, ASC1)
                            WRAM (0x05B1, ASC2)
                            WRAM (0x05B2, ASC3)
                            WRAM (0x05B3, ASC4)
                            WRAM (0x05B4, ADA1)
                            WRAM (0x05B5, ADA2)
                            WRAM (0x05B6, ADA3)
                            WRAM (0x05B7, ADA4)
                            WRAM (0x05B8, DSC1)
                            WRAM (0x05B9, DSC2)
                            WRAM (0x05BA, DSC3)
                            WRAM (0x05BB, DSC4)
                            WRAM (0x05BC, DDA1)
                            WRAM (0x05BD, DDA2)
                            WRAM (0x05BE, DDA3)
                            WRAM (0x05BF, DDA4)
                        }
                        Else
                        {
                            SM63 = 0x80
                            EM63 = One
                        }
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }
        }

        Method (M639, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                HYS1,   8, 
                HYS2,   8, 
                HYS3,   8, 
                HYS4,   8, 
                HYS5,   8, 
                HYS6,   8, 
                HYS7,   8, 
                HYS8,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    HYS1 = RRAM (0x0540)
                    HYS2 = RRAM (0x0541)
                    HYS3 = RRAM (0x0542)
                    HYS4 = RRAM (0x0543)
                    HYS5 = RRAM (0x0544)
                    HYS6 = RRAM (0x0545)
                    HYS7 = RRAM (0x0546)
                    HYS8 = RRAM (0x0547)
                }
                Else
                {
                    If ((ALGM == One))
                    {
                        HYS1 = RRAM (0x05A0)
                        HYS2 = RRAM (0x05A1)
                        HYS3 = RRAM (0x05A2)
                        HYS4 = RRAM (0x05A3)
                        HYS5 = RRAM (0x05A4)
                        HYS6 = RRAM (0x05A5)
                        HYS7 = RRAM (0x05A6)
                        HYS8 = RRAM (0x05A7)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
            }
            Else
            {
                If ((FUNC == One))
                {
                    If ((ALGM == Zero))
                    {
                        WRAM (0x0540, HYS1)
                        WRAM (0x0541, HYS2)
                        WRAM (0x0542, HYS3)
                        WRAM (0x0543, HYS4)
                        WRAM (0x0544, HYS5)
                        WRAM (0x0545, HYS6)
                        WRAM (0x0546, HYS7)
                        WRAM (0x0547, HYS8)
                    }
                    Else
                    {
                        If ((ALGM == One))
                        {
                            WRAM (0x05A0, HYS1)
                            WRAM (0x05A1, HYS2)
                            WRAM (0x05A2, HYS3)
                            WRAM (0x05A3, HYS4)
                            WRAM (0x05A4, HYS5)
                            WRAM (0x05A5, HYS6)
                            WRAM (0x05A6, HYS7)
                            WRAM (0x05A7, HYS8)
                        }
                        Else
                        {
                            SM63 = 0x80
                            EM63 = One
                        }
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Return (Zero)
        }

        Method (M63A, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                FANX,   8, 
                TA1L,   8, 
                TA1H,   8, 
                TA2L,   8, 
                TA2H,   8, 
                TA3L,   8, 
                TA3H,   8, 
                TA4L,   8, 
                TA4H,   8, 
                TA5L,   8, 
                TA5H,   8, 
                TA6L,   8, 
                TA6H,   8, 
                TA7L,   8, 
                TA7H,   8, 
                TA8L,   8, 
                TA8H,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((FANX == Zero))
                {
                    TA1L = RRAM (0x05C0)
                    TA1H = RRAM (0x05C1)
                    TA2L = RRAM (0x05C2)
                    TA2H = RRAM (0x05C3)
                    TA3L = RRAM (0x05C4)
                    TA3H = RRAM (0x05C5)
                    TA4L = RRAM (0x05C6)
                    TA4H = RRAM (0x05C7)
                    TA5L = RRAM (0x05C8)
                    TA5H = RRAM (0x05C9)
                    TA6L = RRAM (0x05CA)
                    TA6H = RRAM (0x05CB)
                    TA7L = RRAM (0x05CC)
                    TA7H = RRAM (0x05CD)
                    TA8L = RRAM (0x05CE)
                    TA8H = RRAM (0x05CF)
                }
                Else
                {
                    If ((FANX == One))
                    {
                        TA1L = RRAM (0x05D0)
                        TA1H = RRAM (0x05D1)
                        TA2L = RRAM (0x05D2)
                        TA2H = RRAM (0x05D3)
                        TA3L = RRAM (0x05D4)
                        TA3H = RRAM (0x05D5)
                        TA4L = RRAM (0x05D6)
                        TA4H = RRAM (0x05D7)
                        TA5L = RRAM (0x05D8)
                        TA5H = RRAM (0x05D9)
                        TA6L = RRAM (0x05DA)
                        TA6H = RRAM (0x05DB)
                        TA7L = RRAM (0x05DC)
                        TA7H = RRAM (0x05DD)
                        TA8L = RRAM (0x05DE)
                        TA8H = RRAM (0x05DF)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
            }
            Else
            {
                If ((FUNC == One))
                {
                    If ((FANX == Zero))
                    {
                        WRAM (0x05C0, TA1L)
                        WRAM (0x05C1, TA1H)
                        WRAM (0x05C2, TA2L)
                        WRAM (0x05C3, TA2H)
                        WRAM (0x05C4, TA3L)
                        WRAM (0x05C5, TA3H)
                        WRAM (0x05C6, TA4L)
                        WRAM (0x05C7, TA4H)
                        WRAM (0x05C8, TA5L)
                        WRAM (0x05C9, TA5H)
                        WRAM (0x05CA, TA6L)
                        WRAM (0x05CB, TA6H)
                        WRAM (0x05CC, TA7L)
                        WRAM (0x05CD, TA7H)
                        WRAM (0x05CE, TA8L)
                        WRAM (0x05CF, TA8H)
                    }
                    Else
                    {
                        If ((FANX == One))
                        {
                            WRAM (0x05D0, TA1L)
                            WRAM (0x05D1, TA1H)
                            WRAM (0x05D2, TA2L)
                            WRAM (0x05D3, TA2H)
                            WRAM (0x05D4, TA3L)
                            WRAM (0x05D5, TA3H)
                            WRAM (0x05D6, TA4L)
                            WRAM (0x05D7, TA4H)
                            WRAM (0x05D8, TA5L)
                            WRAM (0x05D9, TA5H)
                            WRAM (0x05DA, TA6L)
                            WRAM (0x05DB, TA6H)
                            WRAM (0x05DC, TA7L)
                            WRAM (0x05DD, TA7H)
                            WRAM (0x05DE, TA8L)
                            WRAM (0x05DF, TA8H)
                        }
                        Else
                        {
                            SM63 = 0x80
                            EM63 = One
                        }
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Return (Zero)
        }

        Method (M63B, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                PARA,   8, 
                DATA,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((PARA == Zero))
                {
                    DATA = RRAM (0x0569)
                }
                Else
                {
                    If ((PARA == One))
                    {
                        DATA = RRAM (0x056A)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
            }
            Else
            {
                If ((FUNC == One))
                {
                    If ((PARA == Zero))
                    {
                        WRAM (0x0569, DATA)
                    }
                    Else
                    {
                        If ((PARA == One))
                        {
                            WRAM (0x056A, DATA)
                        }
                        Else
                        {
                            SM63 = 0x80
                            EM63 = One
                        }
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Return (Zero)
        }

        Method (M63C, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x20)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                DATA,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                DATA = RRAM (0x0511)
            }
            Else
            {
                If ((FUNC == One))
                {
                    DATA = RRAM (0x0512)
                }
                Else
                {
                    If ((FUNC == 0x02))
                    {
                        DATA = RRAM (0x0513)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
            }

            Return (Zero)
        }

        Method (M63D, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                FREQ,   16
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                Local0 = 0x017D7840
                Local1 = RRAM (0xF4A0)
                Local1 += One
                Local2 = RRAM (0xF4A2)
                Local2 += One
                Local2 *= Local1
                Divide (Local0, Local2, Local3, Local1)
                FREQ = Local1
            }
            Else
            {
                If ((FUNC == One))
                {
                    FREQ = Zero
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Return (Zero)
        }

        Method (M63E, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                FANX,   8, 
                FAND,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((FANX == Zero))
                {
                    FAND = RFOV (Zero)
                }
                Else
                {
                    If ((FANX == One))
                    {
                        FAND = RFOV (One)
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
            }
            Else
            {
                If ((FUNC == One))
                {
                    If ((FANX == Zero))
                    {
                        WFOV (Zero, FAND)
                    }
                    Else
                    {
                        If ((FANX == One))
                        {
                            WFOV (One, FAND)
                        }
                        Else
                        {
                            SM63 = 0x80
                            EM63 = One
                        }
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Return (Zero)
        }

        Method (M63F, 2, NotSerialized)
        {
            OperationRegion (FM63, SystemMemory, Arg0, 0x10)
            Field (FM63, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                FANX,   8, 
                DIFF,   8
            }

            SM63 |= 0x80
            EM63 = Zero
            If ((FUNC == Zero))
            {
                If ((FANX == Zero))
                {
                    DIFF = RRAM (0x0564)
                }
                Else
                {
                    If ((FANX == One))
                    {
                        DIFF = 0xFF
                    }
                    Else
                    {
                        SM63 = 0x80
                        EM63 = One
                    }
                }
            }
            Else
            {
                If ((FUNC == One))
                {
                    If ((FANX == Zero))
                    {
                        WRAM (0x0564, DIFF)
                    }
                    Else
                    {
                        If ((FANX == One)) {}
                        Else
                        {
                            SM63 = 0x80
                            EM63 = One
                        }
                    }
                }
                Else
                {
                    SM63 = 0x80
                    EM63 = One
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.LPCB.HEC)
    {
        Method (MF30, 4, NotSerialized)
        {
            If ((Arg1 != 0x30))
            {
                Return (Zero)
            }

            Local0 = 0xFF
            If ((Arg2 == Zero))
            {
                Local0 = G30V (Arg0, Arg3)
            }

            If ((Arg2 == One))
            {
                Local0 = EC01 (Arg0, Arg3)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = EC02 (Arg0, Arg3)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = EC03 (Arg0, Arg3)
            }

            If ((Arg2 == 0x84))
            {
                Local0 = EC84 (Arg0, Arg3)
            }

            Local2 = (Arg2 & 0xFC)
            If ((Local2 == 0x80))
            {
                ^^^^ATKD.BSMI (Arg0)
                If ((Arg2 == 0x81))
                {
                    If (BATP (Zero))
                    {
                        Notify (BAT0, 0x80) // Status Change
                    }
                }

                Return (Zero)
            }

            If ((Local0 == 0xFF))
            {
                Return (Zero)
            }

            OperationRegion (FM30, SystemMemory, Arg0, 0x08)
            Field (FM30, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM30,   8, 
                EM30,   8
            }

            If (Local0)
            {
                EM30 = Local0
                SM30 |= 0x02
            }

            SM30 &= 0xFE
            SM30 |= 0x80
            Return (Zero)
        }

        Method (G30V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F300, SystemMemory, Arg0, Arg1)
            Field (F300, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = Zero
            SVER = Zero
            Return (Zero)
        }

        Method (EC01, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (FEC1, SystemMemory, Arg0, Arg1)
            Field (FEC1, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ECMD,   8, 
                EDA1,   8, 
                EDA2,   8, 
                EDA3,   8, 
                EDA4,   8, 
                EDA5,   8
            }

            Local0 = ECXT (ECMD, EDA1, EDA2, EDA3, EDA4, EDA5)
            EDA1 = DerefOf (Index (Local0, One))
            EDA2 = DerefOf (Index (Local0, One))
            EDA3 = DerefOf (Index (Local0, One))
            EDA4 = DerefOf (Index (Local0, One))
            EDA5 = DerefOf (Index (Local0, One))
            Return (DerefOf (Index (Local0, Zero)))
        }

        Method (EC02, 2, NotSerialized)
        {
            Return (Zero)
        }

        Method (EC03, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            Local0 = Zero
            OperationRegion (FEC3, SystemMemory, Arg0, Arg1)
            Field (FEC3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                FNEN,   8
            }

            If (FNEN)
            {
                FNLK (One)
            }
            Else
            {
                FNLK (Zero)
            }

            Return (Zero)
        }

        Method (EC84, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (ECEG, SystemMemory, Arg0, Arg1)
            Field (ECEG, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                EVTP,   8, 
                EVID,   8
            }

            ECXT (0xAE, EVTP, EVID, Zero, Zero, Zero)
            Return (Zero)
        }
    }

    Scope (\)
    {
        Name (SLLL, Zero)
        Name (DS3T, Zero)
        Method (LIMT, 0, NotSerialized)
        {
            Local0 = (\_SB.CPUP - \_SB.SLMT)
            Return (Local0)
        }

        Method (PRJB, 0, NotSerialized)
        {
            \_SB.PCI0.LPCB.HEC.WRAM (0x07FE, 0x80)
            \_SB.PCI0.LPCB.HEC.SMBW (\_SB.PCI0.LPCB.HEC.WRWD, \_SB.PCI0.LPCB.HEC.BADR, Zero, Zero, 0x02, 0x10)
            \_SB.PCI0.LPCB.HEC.SMBW (\_SB.PCI0.LPCB.HEC.WRWD, \_SB.PCI0.LPCB.HEC.BADR, Zero, Zero, 0x02, 0x10)
        }

        Method (PRJS, 1, Serialized)
        {
        }

        Method (PRJW, 1, Serialized)
        {
            \_SB.PCI0.LPCB.HEC.STBR ()
            SLLL = 0xAA
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }

        Method (GLID, 0, Serialized)
        {
            Return (\_SB.PCI0.LPCB.HEC.RPIN (0x04, 0x06))
        }

        Method (OMLD, 1, Serialized)
        {
        }

        Method (OTLD, 1, Serialized)
        {
        }

        Method (OGLD, 1, Serialized)
        {
            Return (Zero)
        }

        Method (OWLD, 1, Serialized)
        {
            \_SB.WRST = Arg0
            SGPL (0x16, One, Arg0)
        }

        Method (OBTD, 1, Serialized)
        {
            \_SB.BRST = Arg0
            If ((OSFG < OSW8))
            {
                SGPL (0x30, One, Arg0)
            }

            SGPL (0x39, One, Arg0)
        }

        Method (OWMD, 1, Serialized)
        {
            \_SB.WMST = Arg0
        }

        Method (OHWR, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.BTDP)
            {
                Local0 |= 0x0100
            }

            Return (Local0)
        }

        Method (ORST, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.WRST)
            {
                Local0 |= One
            }

            If (\_SB.BRST)
            {
                Local0 |= 0x02
            }

            Return (Local0)
        }

        Method (GBTL, 0, Serialized)
        {
            Return (Zero)
        }

        Method (SBTL, 1, Serialized)
        {
        }

        Method (BL2C, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (OGND, 0, NotSerialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                Return (\_SB.PCI0.GFX0.NXTD)
            }

            Return (Zero)
        }

        Method (OEAD, 0, NotSerialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                Return (\_SB.AVLD)
            }

            Return (Zero)
        }

        Method (OGCD, 0, NotSerialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                Return (\_SB.PCI0.GFX0.GETD ())
            }

            Return (Zero)
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.LPCB.SPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
            \_SB.PCI0.GFX0.OPTS (Arg0)
            \_SB.ATKD.GENS (Arg0)
            \_SB.ATKD.DS3S (Arg0)
            OEMS (Arg0)
            \_SB.PCI0.P0P2.VGA.OPTS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \_SB.PCI0.LPCB.SWAK (Arg0)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GFX0.OWAK (Arg0)
        \_SB.ATKD.GENW (Arg0)
        \_SB.ATKD.DS3W (Arg0)
        OEMW (Arg0)
        \_SB.PCI0.P0P2.VGA.OPTW (Arg0)
    }

    Method (OSCM, 4, NotSerialized)
    {
        Return (Zero)
    }
}



ECDT
----
[000h 0000   4]                    Signature : "ECDT"    [Embedded Controller Boot Resources Table]
[004h 0004   4]                 Table Length : 000000C1
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D8
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI."
[020h 0032   4]        Asl Compiler Revision : 00000005


[024h 0036  12]      Command/Status Register : [Generic Address Structure]
[024h 0036   1]                     Space ID : 01 [SystemIO]
[025h 0037   1]                    Bit Width : 08
[026h 0038   1]                   Bit Offset : 00
[027h 0039   1]         Encoded Access Width : 01 [Byte Access:8]
[028h 0040   8]                      Address : 0000000000000066

[030h 0048  12]                Data Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 01 [SystemIO]
[031h 0049   1]                    Bit Width : 08
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 01 [Byte Access:8]
[034h 0052   8]                      Address : 0000000000000062

[03Ch 0060   4]                          UID : 00000000
[040h 0064   1]                   GPE Number : 1D
[041h 0065  19]                     Namepath : "\_SB.PCI0.LPCB.HEC"

Raw Table Data: Length 193 (0xC1)

  0000: 45 43 44 54 C1 00 00 00 01 D8 5F 41 53 55 53 5F  ECDT......_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 2E  Notebook. ..AMI.
  0020: 05 00 00 00 01 08 00 01 66 00 00 00 00 00 00 00  ........f.......
  0030: 01 08 00 01 62 00 00 00 00 00 00 00 00 00 00 00  ....b...........
  0040: 1D 5C 5F 53 42 2E 50 43 49 30 2E 4C 50 43 42 2E  .\_SB.PCI0.LPCB.
  0050: 48 45 43 00 00 00 00 00 00 00 00 00 00 00 00 00  HEC.............
  0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00C0: 00                                               .


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 2E
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : C9AFC080
[028h 0040   4]                 DSDT Address : C94551C0
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : AE
[035h 0053   1]           ACPI Disable Value : AF
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00001800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001850
[04Ch 0076   4]       PM Timer Block Address : 00001808
[050h 0080   4]           GPE0 Block Address : 00001820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 00
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0012
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000386A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : 8E
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000C94551C0
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000001800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000001804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000001850

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000001808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 80
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000001820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000


Raw Table Data: Length 268 (0x10C)

  0000: 46 41 43 50 0C 01 00 00 05 2E 5F 41 53 55 53 5F  FACP......_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  Notebook. ..AMI 
  0020: 13 00 01 00 80 C0 AF C9 C0 51 45 C9 01 02 09 00  .........QE.....
  0030: B2 00 00 00 AE AF 00 00 00 18 00 00 00 00 00 00  ................
  0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  ........P.......
  0050: 20 18 00 00 00 00 00 00 04 02 01 04 10 00 00 00   ...............
  0060: 65 00 E9 03 00 04 10 00 00 00 0D 00 32 12 00 00  e...........2...
  0070: A5 86 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  ................
  0080: 8E 00 00 00 00 00 00 00 00 00 00 00 C0 51 45 C9  .............QE.
  0090: 00 00 00 00 01 20 00 02 00 18 00 00 00 00 00 00  ..... ..........
  00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  ................
  00B0: 04 18 00 00 00 00 00 00 01 00 00 02 00 00 00 00  ................
  00C0: 00 00 00 00 01 08 00 01 50 18 00 00 00 00 00 00  ........P.......
  00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 80 00 01  . ..............
  00E0: 20 18 00 00 00 00 00 00 01 00 00 01 00 00 00 00   ...............
  00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0100: 00 00 00 00 00 00 00 00 00 00 00 00              ............


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 0000001E
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 1E 00 00 00 00 00 00 00  FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B5
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]                 S3PT Address : 00000000C9EEC018

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]                    Reset End : 00000000C9EEC038
**** ACPI table terminates in the middle of a data structure!

Raw Table Data: Length 68 (0x44)

  0000: 46 50 44 54 44 00 00 00 01 B5 5F 41 53 55 53 5F  FPDTD....._ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  Notebook. ..AMI 
  0020: 13 00 01 00 01 00 10 01 00 00 00 00 18 C0 EE C9  ................
  0030: 00 00 00 00 00 00 10 01 00 00 00 00 38 C0 EE C9  ............8...
  0040: 00 00 00 00                                      ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 3F
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI."
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 8086A701

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 3F 5F 41 53 55 53 5F  HPET8....?_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 2E  Notebook. ..AMI.
  0020: 05 00 00 00 01 A7 86 80 00 40 00 00 00 00 D0 FE  .........@......
  0030: 00 00 00 00 00 EE 37 00                          ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 32
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 32 5F 41 53 55 53 5F  MCFG<....2_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 4D 53 46 54  Notebook. ..MSFT
  0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  ................
  0030: 00 00 00 00 00 00 00 3F 00 00 00 00              .......?....


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 44
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ASUS"
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table type [MSDM]


Raw Table Data: Length 85 (0x55)

  0000: 4D 53 44 4D 55 00 00 00 03 44 5F 41 53 55 53 5F  MSDMU....D_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 01 00 00 00 41 53 55 53  Notebook....ASUS
  0020: 01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  ................
  0030: 00 00 00 00 1D 00 00 00 46 44 43 4E 34 2D 4D 34  ........FDCN4-M4
  0040: 44 34 43 2D 47 58 36 52 48 2D 48 46 51 39 46 2D  D4C-GX6RH-HFQ9F-
  0050: 39 57 58 56 51                                   9WXVQ


RSDP
----
[000h 0000   8]                    Signature : "RSD PTR "
[008h 0008   1]                     Checksum : 5F
[009h 0009   6]                       Oem ID : "_ASUS_"
[00Fh 0015   1]                     Revision : 02
[010h 0016   4]                 RSDT Address : C9455028
[014h 0020   4]                       Length : 00000024
[018h 0024   8]                 XSDT Address : 00000000C9455090
[020h 0032   1]            Extended Checksum : EE
[021h 0033   3]                     Reserved : 000000

Raw Table Data: Length 36 (0x24)

  0000: 52 53 44 20 50 54 52 20 5F 5F 41 53 55 53 5F 02  RSD PTR __ASUS_.
  0010: 28 50 45 C9 24 00 00 00 90 50 45 C9 00 00 00 00  (PE.$....PE.....
  0020: EE 00 00 00                                      ....


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 0000005C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D0
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]       ACPI Table Address   0 : C9455138
[028h 0040   4]       ACPI Table Address   1 : C9469A68
[02Ch 0044   4]       ACPI Table Address   2 : C9469B00
[030h 0048   4]       ACPI Table Address   3 : C9469B48
[034h 0052   4]       ACPI Table Address   4 : C9469C10
[038h 0056   4]       ACPI Table Address   5 : C9469C68
[03Ch 0060   4]       ACPI Table Address   6 : C9469E68
[040h 0064   4]       ACPI Table Address   7 : C946A008
[044h 0068   4]       ACPI Table Address   8 : C946A560
[048h 0072   4]       ACPI Table Address   9 : C946B038
[04Ch 0076   4]       ACPI Table Address  10 : C946B078
[050h 0080   4]       ACPI Table Address  11 : C946B0B0
[054h 0084   4]       ACPI Table Address  12 : C946B408
[058h 0088   4]       ACPI Table Address  13 : C946CBA8

Raw Table Data: Length 92 (0x5C)

  0000: 52 53 44 54 5C 00 00 00 01 D0 5F 41 53 55 53 5F  RSDT\....._ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 4D 53 46 54  Notebook. ..MSFT
  0020: 13 00 01 00 38 51 45 C9 68 9A 46 C9 00 9B 46 C9  ....8QE.h.F...F.
  0030: 48 9B 46 C9 10 9C 46 C9 68 9C 46 C9 68 9E 46 C9  H.F...F.h.F.h.F.
  0040: 08 A0 46 C9 60 A5 46 C9 38 B0 46 C9 78 B0 46 C9  ..F.`.F.8.F.x.F.
  0050: B0 B0 46 C9 08 B4 46 C9 A8 CB 46 C9              ..F...F...F.


SSDT1
-----
DefinitionBlock ("ssdt1.aml", "SSDT", 1, "_ASUS_", "Notebook", 0x00000000)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.RDGP, MethodObj)    // Warning: Unresolved method, guessing 4 arguments
    External (_SB_.WTGP, MethodObj)    // Warning: Unresolved method, guessing 2 arguments

    External (_SB_.PCI0.I2C0.SHUB, UnknownObj)
    External (SDS0, UnknownObj)
    External (USBH, UnknownObj)

    Scope (\)
    {
        Device (SHAD)
        {
            Name (_HID, EisaId ("INT33D0"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((SDS0 & One) || (USBH & One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                Name (PGCE, Zero)
                Name (PGCD, Zero)
                Name (DFUE, Zero)
                Name (DFUD, Zero)
                Name (OLDV, Zero)
                Name (PGCV, Zero)
                Name (DFUV, Zero)
                If ((Arg0 == ToUUID ("03c868d5-563f-42a8-9f57-9a18d949b7cb")))
                {
                    If ((One == ToInteger (Arg1)))
                    {
                        While (One)
                        {
                            _T_0 = ToInteger (Arg2)
                            If ((_T_0 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             /* . */
                                })
                            }
                            Else
                            {
                                If ((_T_0 == One))
                                {
                                    PGCE = DerefOf (Index (Arg3, Zero))
                                    PGCD = DerefOf (Index (Arg3, One))
                                    If ((\_SB.RDGP (0x2E, One, Sleep (0x96), Notify (\_SB.PCI0.I2C0.SHUB, One) // Device Check) == Return (
                                        Zero))) {} = \_SB.RDGP (0x2E, OLDV, \_SB.WTGP (0x2E, PGCE), If ((PGCD > Zero))
                                            {
                                                Sleep (PGCD)
                                                \_SB.WTGP (0x2E, OLDV)
                                            })
                                }
                                Else
                                {
                                    If ((_T_0 == 0x02))
                                    {
                                        DFUE = DerefOf (Index (Arg3, Zero))
                                        DFUD = DerefOf (Index (Arg3, One))
                                        Return (Zero) = \_SB.RDGP (0x2C, OLDV, \_SB.WTGP (0x2C, DFUE), If ((DFUD > 
                                            Zero))
                                                {
                                                    Sleep (DFUD)
                                                    \_SB.WTGP (0x2C, OLDV)
                                                })
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x03))
                                        {
                                            Return (Zero) = \_SB.RDGP (0x2C, DFUV, Return (Zero) = \_SB.RDGP (0x2E, PGCV, 
                                                Return (Package (0x02)
                                                            {
                                                                PGCV, 
                                                                DFUV
                                                            }), Break), Return (Zero))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("ssdt2.aml", "SSDT", 1, "_ASUS_", "Notebook", 0x00001000)
{

    External (_SB_.PCI0.SAT0, DeviceObj)
    External (FDTP, UnknownObj)
    External (GIV0, UnknownObj)
    External (GL00, UnknownObj)
    External (GL08, UnknownObj)
    External (GPE3, UnknownObj)
    External (GPS3, UnknownObj)
    External (PFLV, UnknownObj)
    External (RTD3, UnknownObj)

    If ((RTD3 == Zero))
    {
        Scope (\_SB.PCI0.SAT0)
        {
            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66")))
                    {
                        While (One)
                        {
                            _T_0 = ToInteger (Arg2)
                            If ((_T_0 == Zero))
                            {
                                While (One)
                                {
                                    _T_1 = ToInteger (Arg1)
                                    If ((_T_1 == One))
                                    {
                                        If ((PFLV == FDTP))
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             /* . */
                                            })
                                        }

                                        Return (Buffer (One)
                                        {
                                             0x0F                                             /* . */
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             /* . */
                                        })
                                    }

                                    Break
                                }
                            }
                            Else
                            {
                                If ((_T_0 == One))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If ((_T_0 == 0x02))
                                    {
                                        GPE3 = Zero
                                        If (((\GL00 & 0x08) == 0x08))
                                        {
                                            \GIV0 |= 0x08
                                        }
                                        Else
                                        {
                                            \GIV0 &= 0xF7
                                        }

                                        \GL08 &= 0xEF
                                        Sleep (0xC8)
                                        GPS3 = One
                                        GPE3 = One
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x03))
                                        {
                                            GPE3 = Zero
                                            GPS3 = One
                                            \GL08 |= 0x10
                                            Return (One)
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L13, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                If ((PFLV == FDTP))
                {
                    Return (Zero)
                }

                GPE3 = Zero
                \GL08 |= 0x10
                Notify (\_SB.PCI0.SAT0, 0x82) // Device-Specific Change
                Return (Zero)
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("ssdt3.aml", "SSDT", 1, "_ASUS_", "Notebook", 0x00003000)
{

    External (_PR_.CPPC, IntObj)
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (LIMT, IntObj)
    External (PDC0, UnknownObj)
    External (TCNT, IntObj)

    Scope (\_PR.CPU0)
    {
        Name (MPPC, Zero)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Local0 = LIMT /* External reference */
            If ((Local0 > MPPC))
            {
                Return (Local0)
            }
            Else
            {
                Return (MPPC) /* \_PR_.CPU0.MPPC */
            }
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            \_PR.CPU0.MPPC = \_PR.CPPC /* External reference */
            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }
        }

        Name (_PSS, Package (0x10)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000961, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00002400, 
                0x00002400
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x0000AC6E, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x0000A348, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00009A4F, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x000088E3, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00008076, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000767D, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00006E65, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00006678, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00005EB6, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00005722, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x000046DB, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00003FC4, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x000038D5, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000320F, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                Index (DerefOf (Index (HPSD, Zero)), 0x04) = TCNT /* External reference */
                Index (DerefOf (Index (SPSD, Zero)), 0x04) = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU0.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU0.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT4
-----
DefinitionBlock ("ssdt4.aml", "SSDT", 1, "_ASUS_", "Notebook", 0x00003000)
{

    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU0.MPPC, UnknownObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0xC8810A98, 
            0x00000557, 
            "APIST   ", 
            0xC943A618, 
            0x000005AA, 
            "CPU0CST ", 
            0xC943AC18, 
            0x000003D3, 
            "APCST   ", 
            0xC9439D98, 
            0x00000119
        })
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR)
    {
        OperationRegion (PPMT, SystemMemory, 0xC9AFEF18, 0x003A)
        Field (PPMT, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CCTP,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL20,   16, 
            PLW0,   8, 
            CTC0,   8, 
            TAR0,   8, 
            PPC0,   8, 
            PL11,   16, 
            PL21,   16, 
            PLW1,   8, 
            CTC1,   8, 
            TAR1,   8, 
            PPC1,   8, 
            PL12,   16, 
            PL22,   16, 
            PLW2,   8, 
            CTC2,   8, 
            TAR2,   8, 
            PPC2,   8, 
            C3MW,   8, 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            C3LT,   16, 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8
        }
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            If (CondRefOf (\_PR.CPU0._PPC))
            {
                \_PR.CPU0.MPPC = CPPC /* \_PR_.CPPC */
            }

            Local0 = CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & 0x7A))
            {
                If ((((CFGD & 0x0200) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (Index (SSDT, 0x07)), DerefOf (Index (SSDT, 0x08)))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC1 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC1 & 0x18))
            {
                APCT ()
            }

            PDC0 = PDC1 /* \PDC1 */
            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x7A) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (Index (SSDT, 0x0A)), DerefOf (Index (SSDT, 0x0B)))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (Index (SSDT, 0x04)), DerefOf (Index (SSDT, 0x05)))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & One))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC2 /* \PDC2 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & One))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC3 /* \PDC3 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS4)
            CreateDWordField (Arg0, 0x04, CAP4)
            If (((STS4 == 0x06) || (STS4 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS4 & One))
            {
                CAP4 &= 0x0BFF
                Return (Zero)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4.GCAP.CAP4 */
            If (((PDC4 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC4 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC4 /* \PDC4 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS5)
            CreateDWordField (Arg0, 0x04, CAP5)
            If (((STS5 == 0x06) || (STS5 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS5 & One))
            {
                CAP5 &= 0x0BFF
                Return (Zero)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5.GCAP.CAP5 */
            If (((PDC5 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC5 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC5 /* \PDC5 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS6)
            CreateDWordField (Arg0, 0x04, CAP6)
            If (((STS6 == 0x06) || (STS6 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS6 & One))
            {
                CAP6 &= 0x0BFF
                Return (Zero)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6.GCAP.CAP6 */
            If (((PDC6 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC6 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC6 /* \PDC6 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS7)
            CreateDWordField (Arg0, 0x04, CAP7)
            If (((STS7 == 0x06) || (STS7 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS7 & One))
            {
                CAP7 &= 0x0BFF
                Return (Zero)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7.GCAP.CAP7 */
            If (((PDC7 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC7 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC7 /* \PDC7 */
            Return (Zero)
        }
    }
}



SSDT5
-----
DefinitionBlock ("ssdt5.aml", "SSDT", 1, "_ASUS_", "Notebook", 0x00001000)
{

    External (_SB_.PCI0.SAT0, DeviceObj)
    External (DSSP, UnknownObj)
    External (FHPP, UnknownObj)

    Scope (\)
    {
        Name (STFE, Buffer (0x07)
        {
             0x10, 0x06, 0x00, 0x00, 0x00, 0x00, 0xEF         /* ....... */
        })
        Name (STFD, Buffer (0x07)
        {
             0x90, 0x06, 0x00, 0x00, 0x00, 0x00, 0xEF         /* ....... */
        })
        Name (FZTF, Buffer (0x07)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         /* ....... */
        })
        Name (DCFL, Buffer (0x07)
        {
             0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1         /* ....... */
        })
        Name (DIPX, Buffer (0x07)
        {
             0x10, 0x03, 0x00, 0x00, 0x00, 0x00, 0xEF         /* ....... */
        })
        Name (SCBF, Buffer (0x15) {})
        Name (CMDC, Zero)
        Method (GTFB, 2, Serialized)
        {
            Local0 = (CMDC * 0x38)
            CreateField (SCBF, Local0, 0x38, CMDX)
            Local0 = (CMDC * 0x07)
            CreateByteField (SCBF, (Local0 + One), A001)
            CMDX = Arg0
            A001 = Arg1
            CMDC++
        }
    }

    Scope (\_SB.PCI0.SAT0)
    {
        Name (REGF, One)
        Method (_REG, 2, NotSerialized)  // _REG: Region Availability
        {
            If ((Arg0 == 0x02))
            {
                REGF = Arg1
            }
        }

        Name (TMD0, Buffer (0x14) {})
        CreateDWordField (TMD0, Zero, PIO0)
        CreateDWordField (TMD0, 0x04, DMA0)
        CreateDWordField (TMD0, 0x08, PIO1)
        CreateDWordField (TMD0, 0x0C, DMA1)
        CreateDWordField (TMD0, 0x10, CHNF)
        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
        {
            PIO0 = 0x78
            DMA0 = 0x14
            PIO1 = 0x78
            DMA1 = 0x14
            CHNF |= 0x05
            Return (TMD0) /* \_SB_.PCI0.SAT0.TMD0 */
        }

        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
        {
        }

        Device (SPT0)
        {
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (DIPX, 0x03)
                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT1)
        {
            Name (_ADR, 0x0001FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (DIPX, 0x03)
                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT3)
        {
            Name (_ADR, 0x0003FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (DIPX, 0x03)
                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT4)
        {
            Name (_ADR, 0x0004FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (DIPX, 0x03)
                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT5)
        {
            Name (_ADR, 0x0005FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (DIPX, 0x03)
                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("ssdt6.aml", "SSDT", 1, "_ASUS_", "Notebook", 0x00003000)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (GUAM, MethodObj)    // Warning: Unresolved method, guessing 1 arguments
    External (HNOT, MethodObj)    // Warning: Unresolved method, guessing 1 arguments

    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.P0P2, DeviceObj)
    External (_SB_.PCI0.P0PA, DeviceObj)
    External (_SB_.PCI0.P0PB, DeviceObj)
    External (GPRW, IntObj)
    External (OSYS, UnknownObj)
    External (PNHM, UnknownObj)
    External (S0ID, UnknownObj)
    External (SCIS, UnknownObj)

    OperationRegion (SANV, SystemMemory, 0xC9AF1E18, 0x0169)
    Field (SANV, AnyAcc, Lock, Preserve)
    {
        SARV,   32, 
        ASLB,   32, 
        IMON,   8, 
        IGDS,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        IPCF,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        GSMI,   8, 
        PAVP,   8, 
        LIDS,   8, 
        KSV0,   32, 
        KSV1,   8, 
        BBAR,   32, 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        ALFP,   8, 
        AUDA,   32, 
        AUDB,   32, 
        AUDC,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        CCSA,   32, 
        CCNT,   32, 
        Offset (0xC8), 
        SGMD,   8, 
        SGFL,   8, 
        PWOK,   8, 
        HLRS,   8, 
        PWEN,   8, 
        PRST,   8, 
        CPSP,   32, 
        EECP,   8, 
        EVCP,   16, 
        XBAS,   32, 
        GBAS,   16, 
        SGGP,   8, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        OBS1,   32, 
        OBS2,   32, 
        OBS3,   32, 
        OBS4,   32, 
        OBS5,   32, 
        OBS6,   32, 
        OBS7,   32, 
        OBS8,   32, 
        LTRA,   8, 
        OBFA,   8, 
        LTRB,   8, 
        OBFB,   8, 
        LTRC,   8, 
        OBFC,   8, 
        SMSL,   16, 
        SNSL,   16, 
        P0UB,   8, 
        P1UB,   8, 
        P2UB,   8, 
        EDPV,   8, 
        NXDX,   32, 
        DIDX,   32, 
        PCSL,   8, 
        SC7A,   8, 
        DSEL,   8, 
        ESEL,   8, 
        PSEL,   8, 
        MXD1,   32, 
        MXD2,   32, 
        MXD3,   32, 
        MXD4,   32, 
        MXD5,   32, 
        MXD6,   32, 
        MXD7,   32, 
        MXD8,   32, 
        PXFD,   8, 
        EBAS,   32
    }

    Scope (\_SB.PCI0)
    {
        Scope (\_SB.PCI0.P0P2)
        {
            Name (LTRS, Zero)
            Name (OBFS, Zero)
            OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
            Field (PEGR, DWordAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                PSTS,   1, 
                Offset (0x2C), 
                GENG,   1, 
                    ,   1, 
                PMEG,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW) /* External reference */
                0x09
                0x04
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    GENG = One
                    PMEG = One
                }
                Else
                {
                    GENG = Zero
                    PMEG = Zero
                }
            }

            Method (HPME, 0, Serialized)
            {
                PSTS = One
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRS = LTRA /* \LTRA */
                OBFS = OBFA /* \OBFA */
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                While (One)
                {
                    _T_0 = ToInteger (Arg0)
                    If ((_T_0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        While (One)
                        {
                            _T_1 = ToInteger (Arg2)
                            If ((_T_1 == Zero))
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRS)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFS)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.P0P2.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Else
                            {
                                If ((_T_1 == 0x04))
                                {
                                    If ((Arg1 == 0x02))
                                    {
                                        If (OBFS)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((_T_1 == 0x06))
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (LTRS)
                                            {
                                                Index (LTRV, Zero) = ((SMSL >> 0x0A) & 0x07)
                                                Index (LTRV, One) = (SMSL & 0x03FF)
                                                Index (LTRV, 0x02) = ((SNSL >> 0x0A) & 0x07)
                                                Index (LTRV, 0x03) = (SNSL & 0x03FF)
                                                Return (LTRV) /* \_SB_.PCI0.P0P2.LTRV */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Break
                }

                Return (Buffer (One)
                {
                     0x00                                             /* . */
                })
            }
        }

        Scope (\_SB.PCI0.P0PA)
        {
            Name (LTRS, Zero)
            Name (OBFS, Zero)
            OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
            Field (PEGR, DWordAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                PSTS,   1, 
                Offset (0x2C), 
                GENG,   1, 
                    ,   1, 
                PMEG,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW) /* External reference */
                0x09
                0x04
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    GENG = One
                    PMEG = One
                }
                Else
                {
                    GENG = Zero
                    PMEG = Zero
                }
            }

            Method (HPME, 0, Serialized)
            {
                PSTS = One
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRS = LTRB /* \LTRB */
                OBFS = OBFB /* \OBFB */
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                While (One)
                {
                    _T_0 = ToInteger (Arg0)
                    If ((_T_0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        While (One)
                        {
                            _T_1 = ToInteger (Arg2)
                            If ((_T_1 == Zero))
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRS)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFS)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.P0PA.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Else
                            {
                                If ((_T_1 == 0x04))
                                {
                                    If ((Arg1 == 0x02))
                                    {
                                        If (OBFS)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((_T_1 == 0x06))
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (LTRS)
                                            {
                                                Index (LTRV, Zero) = ((SMSL >> 0x0A) & 0x07)
                                                Index (LTRV, One) = (SMSL & 0x03FF)
                                                Index (LTRV, 0x02) = ((SNSL >> 0x0A) & 0x07)
                                                Index (LTRV, 0x03) = (SNSL & 0x03FF)
                                                Return (LTRV) /* \_SB_.PCI0.P0PA.LTRV */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Break
                }

                Return (Buffer (One)
                {
                     0x00                                             /* . */
                })
            }
        }

        Scope (\_SB.PCI0.P0PB)
        {
            Name (LTRS, Zero)
            Name (OBFS, Zero)
            OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
            Field (PEGR, DWordAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                PSTS,   1, 
                Offset (0x2C), 
                GENG,   1, 
                    ,   1, 
                PMEG,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW) /* External reference */
                0x09
                0x04
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    GENG = One
                    PMEG = One
                }
                Else
                {
                    GENG = Zero
                    PMEG = Zero
                }
            }

            Method (HPME, 0, Serialized)
            {
                PSTS = One
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRS = LTRC /* \LTRC */
                OBFS = OBFC /* \OBFC */
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                While (One)
                {
                    _T_0 = ToInteger (Arg0)
                    If ((_T_0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        While (One)
                        {
                            _T_1 = ToInteger (Arg2)
                            If ((_T_1 == Zero))
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRS)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFS)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.P0PB.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Else
                            {
                                If ((_T_1 == 0x04))
                                {
                                    If ((Arg1 == 0x02))
                                    {
                                        If (OBFS)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((_T_1 == 0x06))
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (LTRS)
                                            {
                                                Index (LTRV, Zero) = ((SMSL >> 0x0A) & 0x07)
                                                Index (LTRV, One) = (SMSL & 0x03FF)
                                                Index (LTRV, 0x02) = ((SNSL >> 0x0A) & 0x07)
                                                Index (LTRV, 0x03) = (SNSL & 0x03FF)
                                                Return (LTRV) /* \_SB_.PCI0.P0PB.LTRV */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Break
                }

                Return (Buffer (One)
                {
                     0x00                                             /* . */
                })
            }
        }

        Device (B0D3)
        {
            Name (_ADR, 0x00030000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((AUVD != 0xFFFF))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
            }

            OperationRegion (RPCZ, PCI_Config, Zero, 0x40)
            Field (RPCZ, DWordAcc, Lock, Preserve)
            {
                AUVD,   16, 
                Offset (0x10), 
                ABAR,   32
            }

            Method (ASTR, 0, Serialized)
            {
                If (((ABAR != Ones) && ((ABAR & 0xFFFFC000) != 
                    Zero)))
                {
                    BBAR = (ABAR & 0xFFFFFFF0)
                    BBAR += 0x1000
                    OperationRegion (RPCY, SystemMemory, BBAR, 0x25)
                    Field (RPCY, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x0C), 
                        EM4W,   32, 
                        EMWA,   32, 
                        Offset (0x1C), 
                        ADWA,   32
                    }

                    EMWA = AUDA /* \AUDA */
                    ADWA = AUDB /* \AUDB */
                    EM4W = AUDC /* \AUDC */
                }
            }

            Method (VSTR, 1, Serialized)
            {
                Name (CONT, 0x03E8)
                Name (ADDR, 0x80000000)
                ADDR = Arg0
                OperationRegion (CCDC, SystemMemory, ADDR, 0x04)
                Field (CCDC, ByteAcc, NoLock, Preserve)
                {
                    CDEC,   32
                }

                If (((ABAR != Ones) && ((ABAR & 0xFFFFC000) != 
                    Zero)))
                {
                    If ((CDEC != Zero))
                    {
                        BBAR = (ABAR & 0xFFFFFFF0)
                        OperationRegion (IPCV, SystemMemory, BBAR, 0x70)
                        Field (IPCV, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x60), 
                            AVIC,   32, 
                            Offset (0x68), 
                            AIRS,   16
                        }

                        CONT = 0x03E8
                        While ((((AIRS & One) == One) && (CONT != Zero)))
                        {
                            Stall (One)
                            CONT--
                        }

                        AIRS |= 0x02
                        AVIC = CDEC /* \_SB_.PCI0.B0D3.VSTR.CDEC */
                        AIRS |= One
                        CONT = 0x03E8
                        While ((((AIRS & One) == One) && (CONT != Zero)))
                        {
                            Stall (One)
                            CONT--
                        }
                    }
                }
            }

            Method (CXDC, 0, Serialized)
            {
                Name (IDDX, 0x80000000)
                If (((CCSA != Zero) && (CCNT != Zero)))
                {
                    IDDX = CCSA /* \CCSA */
                    While ((IDDX < (CCSA + (CCNT * 0x04))))
                    {
                        VSTR (IDDX)
                        IDDX += 0x04
                    }
                }
            }

            Method (AINI, 0, Serialized)
            {
                Name (CONT, 0x03E8)
                If (((ABAR != Ones) && ((ABAR & 0xFFFFC000) != 
                    Zero)))
                {
                    BBAR = (ABAR & 0xFFFFFFF0)
                    OperationRegion (IPCV, SystemMemory, BBAR, 0x70)
                    Field (IPCV, DWordAcc, NoLock, Preserve)
                    {
                        GCAP,   16, 
                        Offset (0x08), 
                        GCTL,   32, 
                        Offset (0x0E), 
                        SSTS,   8, 
                        Offset (0x60), 
                        AVIC,   32, 
                        Offset (0x68), 
                        AIRS,   16
                    }

                    GCTL |= One
                    CONT = 0x03E8
                    While ((((GCTL & One) == One) && (CONT != Zero)))
                    {
                        Stall (One)
                        CONT--
                    }

                    GCAP &= 0xFFFF
                    SSTS |= 0x0F
                    GCTL &= 0xFFFFFFFE
                    CONT = 0x03E8
                    While ((((GCTL & One) == One) && (CONT != Zero)))
                    {
                        Stall (One)
                        CONT--
                    }

                    GCTL |= One
                    CONT = 0x03E8
                    While ((((GCTL & One) == One) && (CONT != Zero)))
                    {
                        Stall (One)
                        CONT--
                    }
                }
            }
        }

        Scope (\_SB.PCI0.GFX0)
        {
            Scope (\_SB.PCI0)
            {
                OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                Field (MCHP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x14), 
                    AUDE,   8, 
                    Offset (0x60), 
                    TASM,   10, 
                    Offset (0x62)
                }
            }

            OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
            Field (IGDP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x12), 
                    ,   1, 
                GIVD,   1, 
                    ,   2, 
                GUMA,   3, 
                Offset (0x14), 
                    ,   4, 
                GMFN,   1, 
                Offset (0x18), 
                Offset (0xA4), 
                ASLE,   8, 
                Offset (0xA8), 
                GSSE,   1, 
                GSSB,   14, 
                GSES,   1, 
                Offset (0xB0), 
                    ,   12, 
                CDVL,   1, 
                Offset (0xB2), 
                Offset (0xB5), 
                LBPC,   8, 
                Offset (0xBC), 
                ASLS,   32
            }

            OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
            Field (IGDM, AnyAcc, NoLock, Preserve)
            {
                SIGN,   128, 
                SIZE,   32, 
                OVER,   32, 
                SVER,   256, 
                VVER,   128, 
                GVER,   128, 
                MBOX,   32, 
                DMOD,   32, 
                PCON,   32, 
                DVER,   64, 
                Offset (0x100), 
                DRDY,   32, 
                CSTS,   32, 
                CEVT,   32, 
                Offset (0x120), 
                DIDL,   32, 
                DDL2,   32, 
                DDL3,   32, 
                DDL4,   32, 
                DDL5,   32, 
                DDL6,   32, 
                DDL7,   32, 
                DDL8,   32, 
                CPDL,   32, 
                CPL2,   32, 
                CPL3,   32, 
                CPL4,   32, 
                CPL5,   32, 
                CPL6,   32, 
                CPL7,   32, 
                CPL8,   32, 
                CADL,   32, 
                CAL2,   32, 
                CAL3,   32, 
                CAL4,   32, 
                CAL5,   32, 
                CAL6,   32, 
                CAL7,   32, 
                CAL8,   32, 
                NADL,   32, 
                NDL2,   32, 
                NDL3,   32, 
                NDL4,   32, 
                NDL5,   32, 
                NDL6,   32, 
                NDL7,   32, 
                NDL8,   32, 
                ASLP,   32, 
                TIDX,   32, 
                CHPD,   32, 
                CLID,   32, 
                CDCK,   32, 
                SXSW,   32, 
                EVTS,   32, 
                CNOT,   32, 
                NRDY,   32, 
                DDL9,   32, 
                DD10,   32, 
                DD11,   32, 
                DD12,   32, 
                DD13,   32, 
                DD14,   32, 
                DD15,   32, 
                CPL9,   32, 
                CP10,   32, 
                CP11,   32, 
                CP12,   32, 
                CP13,   32, 
                CP14,   32, 
                CP15,   32, 
                Offset (0x200), 
                SCIE,   1, 
                GEFC,   4, 
                GXFC,   3, 
                GESF,   8, 
                Offset (0x204), 
                PARM,   32, 
                DSLP,   32, 
                Offset (0x300), 
                ARDY,   32, 
                ASLC,   32, 
                TCHE,   32, 
                ALSI,   32, 
                BCLP,   32, 
                PFIT,   32, 
                CBLV,   32, 
                BCLM,   320, 
                CPFM,   32, 
                EPFM,   32, 
                PLUT,   592, 
                PFMB,   32, 
                CCDV,   32, 
                PCFT,   32, 
                SROT,   32, 
                IUER,   32, 
                FDSP,   64, 
                FDSS,   32, 
                STAT,   32, 
                Offset (0x400), 
                GVD1,   49152, 
                PHED,   32, 
                BDDC,   2048
            }

            Name (DBTB, Package (0x15)
            {
                Zero, 
                0x07, 
                0x38, 
                0x01C0, 
                0x0E00, 
                0x3F, 
                0x01C7, 
                0x0E07, 
                0x01F8, 
                0x0E38, 
                0x0FC0, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x7000, 
                0x7007, 
                0x7038, 
                0x71C0, 
                0x7E00
            })
            Name (CDCT, Package (0x05)
            {
                Package (0x02)
                {
                    0xE4, 
                    0x0140
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }, 

                Package (0x02)
                {
                    Zero, 
                    Zero
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }
            })
            Name (SUCC, One)
            Name (NVLD, 0x02)
            Name (CRIT, 0x04)
            Name (NCRT, 0x06)
            Method (GSCI, 0, Serialized)
            {
                Method (GBDA, 0, Serialized)
                {
                    If ((GESF == Zero))
                    {
                        PARM = 0x0659
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == One))
                    {
                        PARM = 0x00300482
                        If ((S0ID == One))
                        {
                            PARM |= 0x0100
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x04))
                    {
                        PARM &= 0xEFFF0000
                        PARM &= (DerefOf (Index (DBTB, IBTT)) << 0x10)
                        PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x05))
                    {
                        PARM = IPSC /* \IPSC */
                        PARM |= (IPAT << 0x08)
                        PARM += 0x0100
                        PARM |= (LIDS << 0x10)
                        PARM += 0x00010000
                        PARM |= (IBIA << 0x14)
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x07))
                    {
                        PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                        PARM ^= One
                        PARM |= (GMFN << One)
                        PARM |= 0x1800
                        PARM |= (IDMS << 0x11)
                        PARM |= (DerefOf (Index (DerefOf (Index (CDCT, HVCO)), CDVL)) << 
                            0x15) /* \_SB_.PCI0.GFX0.PARM */
                        GESF = One
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0A))
                    {
                        PARM = Zero
                        If (ISSC)
                        {
                            PARM |= 0x03
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0B))
                    {
                        PARM = KSV0 /* \KSV0 */
                        GESF = KSV1 /* \KSV1 */
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    GESF = Zero
                    Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                }

                Method (SBCB, 0, Serialized)
                {
                    If ((GESF == Zero))
                    {
                        PARM = Zero
                        PARM = 0x000F87DD
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == One))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x03))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x04))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x05))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x07))
                    {
                        If ((PARM == Zero))
                        {
                            Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                            If ((0x80000000 & Local0))
                            {
                                CLID &= 0x0F
                                GLID (CLID)
                            }
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x08))
                    {
                        If ((S0ID == One))
                        {
                            Local0 = ((PARM >> 0x08) & 0xFF)
                            If (((Local0 == Zero) || (CADL == Zero)))
                            {
                                \GUAM (Local0)
                            }
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x09))
                    {
                        IBTT = (PARM & 0xFF)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0A))
                    {
                        IPSC = (PARM & 0xFF)
                        If (((PARM >> 0x08) & 0xFF))
                        {
                            IPAT = ((PARM >> 0x08) & 0xFF)
                            IPAT--
                        }

                        IBIA = ((PARM >> 0x14) & 0x07)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0B))
                    {
                        IF1E = ((PARM >> One) & One)
                        If ((PARM & 0x0001E000))
                        {
                            IDMS = ((PARM >> 0x0D) & 0x0F)
                        }
                        Else
                        {
                            IDMS = ((PARM >> 0x11) & 0x0F)
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x10))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x11))
                    {
                        PARM = (LIDS << 0x08)
                        PARM += 0x0100
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x12))
                    {
                        If ((PARM & One))
                        {
                            If (((PARM >> One) == One))
                            {
                                ISSC = One
                            }
                            Else
                            {
                                GESF = Zero
                                Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                            }
                        }
                        Else
                        {
                            ISSC = Zero
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x13))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x14))
                    {
                        PAVP = (PARM & 0x0F)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x15))
                    {
                        Sleep (0x64)
                        If ((PARM == One))
                        {
                            \_SB.PCI0.AUDE |= 0x20
                            \_SB.PCI0.B0D3.ASTR ()
                            \_SB.PCI0.B0D3.AINI ()
                            \_SB.PCI0.B0D3.CXDC ()
                            Notify (\_SB.PCI0, Zero) // Bus Check
                        }

                        If ((PARM == Zero))
                        {
                            \_SB.PCI0.AUDE &= 0xDF
                            Notify (\_SB.PCI0, Zero) // Bus Check
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GEFC == 0x04))
                {
                    GXFC = GBDA ()
                }

                If ((GEFC == 0x06))
                {
                    GXFC = SBCB ()
                }

                GEFC = Zero
                SCIS = One
                GSSE = Zero
                SCIE = Zero
                Return (Zero)
            }

            Method (PDRD, 0, NotSerialized)
            {
                Return (!DRDY)
            }

            Method (PSTS, 0, NotSerialized)
            {
                If ((CSTS > 0x02))
                {
                    Sleep (ASLP)
                }

                Return ((CSTS == 0x03))
            }

            Method (GNOT, 2, NotSerialized)
            {
                If (PDRD ())
                {
                    Return (One)
                }

                CEVT = Arg0
                CSTS = 0x03
                If (((CHPD == Zero) && (Arg1 == Zero)))
                {
                    If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                    {
                        Notify (\_SB.PCI0, Arg1)
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.GFX0, Arg1)
                    }
                }

                If (CondRefOf (HNOT))
                {
                    HNOT (Arg0)
                }
                Else
                {
                    Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                }

                Return (Zero)
            }

            Method (GHDS, 1, NotSerialized)
            {
                TIDX = Arg0
                Return (GNOT (One, Zero))
            }

            Method (GLID, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    CLID = 0x03
                }
                Else
                {
                    CLID = Arg0
                }

                If (GNOT (0x02, Zero))
                {
                    CLID |= 0x80000000
                    Return (One)
                }

                Return (Zero)
            }

            Method (GDCK, 1, NotSerialized)
            {
                CDCK = Arg0
                Return (GNOT (0x04, Zero))
            }

            Method (PARD, 0, NotSerialized)
            {
                If (!ARDY)
                {
                    Sleep (ASLP)
                }

                Return (!ARDY)
            }

            Method (IUEH, 1, Serialized)
            {
                IUER &= 0xC0
                IUER ^= (One << Arg0)
                If ((Arg0 <= 0x04))
                {
                    Return (AINT (0x05, Zero))
                }
                Else
                {
                    Return (AINT (Arg0, Zero))
                }
            }

            Method (AINT, 2, NotSerialized)
            {
                If (!(TCHE & (One << Arg0)))
                {
                    Return (One)
                }

                If (PARD ())
                {
                    Return (One)
                }

                If (((Arg0 >= 0x05) && (Arg0 <= 0x07)))
                {
                    ASLC = (One << Arg0)
                    ASLE = One
                    Local2 = Zero
                    While (((Local2 < 0xFA) && (ASLC != Zero)))
                    {
                        Sleep (0x04)
                        Local2++
                    }

                    Return (Zero)
                }

                If ((Arg0 == 0x02))
                {
                    If (CPFM)
                    {
                        Local0 = (CPFM & 0x0F)
                        Local1 = (EPFM & 0x0F)
                        If ((Local0 == One))
                        {
                            If ((Local1 & 0x06))
                            {
                                PFIT = 0x06
                            }
                            Else
                            {
                                If ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                Else
                                {
                                    PFIT = One
                                }
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            If ((Local1 & 0x08))
                            {
                                PFIT = 0x08
                            }
                            Else
                            {
                                If ((Local1 & One))
                                {
                                    PFIT = One
                                }
                                Else
                                {
                                    PFIT = 0x06
                                }
                            }
                        }

                        If ((Local0 == 0x08))
                        {
                            If ((Local1 & One))
                            {
                                PFIT = One
                            }
                            Else
                            {
                                If ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                Else
                                {
                                    PFIT = 0x08
                                }
                            }
                        }
                    }
                    Else
                    {
                        PFIT ^= 0x07
                    }

                    PFIT |= 0x80000000
                    ASLC = 0x04
                }
                Else
                {
                    If ((Arg0 == One))
                    {
                        BCLP = ((Arg1 * 0xFF) / 0x64)
                        BCLP |= 0x80000000
                        ASLC = 0x02
                    }
                    Else
                    {
                        If ((Arg0 == Zero))
                        {
                            ALSI = Arg1
                            ASLC = One
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                }

                ASLE = One
                Return (Zero)
            }

            Method (SCIP, 0, NotSerialized)
            {
                If ((OVER != Zero))
                {
                    Return (!GSMI)
                }

                Return (Zero)
            }

            Device (\_SB.MEM2)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Name (CRS2, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x20000000,         // Address Base
                        0x00200000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x40004000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (IGDS)
                    {
                        If ((PNHM == 0x000306C1))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS2) /* \_SB_.MEM2.CRS2 */
                }
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("ssdt7.aml", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{

    External (_PR_.CPU0, DeviceObj)
    External (C3LT, IntObj)
    External (C3MW, IntObj)
    External (C6LT, IntObj)
    External (C6MW, IntObj)
    External (C7LT, IntObj)
    External (C7MW, IntObj)
    External (CDLT, IntObj)
    External (CDLV, IntObj)
    External (CDMW, IntObj)
    External (CDPW, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (C1TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C3TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001814, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x01F4
        })
        Name (C6TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001815, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x015E
        })
        Name (C7TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0xC8
        })
        Name (CDTM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x03, 
            Zero, 
            Zero
        })
        Name (MWES, ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x01,               // Bit Width
                0x02,               // Bit Offset
                0x0000000000000000, // Address
                0x01,               // Access Size
                )
        })
        Name (AC2V, Zero)
        Name (AC3V, Zero)
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00) {}, 
            Package (0x00) {}, 
            Package (0x00) {}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00) {}, 
            Package (0x00) {}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00) {}
        })
        Name (CSTF, Zero)
        Name (GEAR, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                Index (C3TM, 0x02) = C3LT /* External reference */
                Index (C6TM, 0x02) = C6LT /* External reference */
                Index (C7TM, 0x02) = C7LT /* External reference */
                Index (CDTM, 0x02) = CDLT /* External reference */
                Index (CDTM, 0x03) = CDPW /* External reference */
                Index (DerefOf (Index (CDTM, Zero)), 0x07) = CDLV /* External reference */
                If (((CFGD & 0x0800) && (PDC0 & 0x0200)))
                {
                    Index (C1TM, Zero) = MWES /* \_PR_.CPU0.MWES */
                    Index (C3TM, Zero) = MWES /* \_PR_.CPU0.MWES */
                    Index (C6TM, Zero) = MWES /* \_PR_.CPU0.MWES */
                    Index (C7TM, Zero) = MWES /* \_PR_.CPU0.MWES */
                    Index (CDTM, Zero) = MWES /* \_PR_.CPU0.MWES */
                    Index (DerefOf (Index (C3TM, Zero)), 0x07) = C3MW /* External reference */
                    Index (DerefOf (Index (C6TM, Zero)), 0x07) = C6MW /* External reference */
                    Index (DerefOf (Index (C7TM, Zero)), 0x07) = C7MW /* External reference */
                    Index (DerefOf (Index (CDTM, Zero)), 0x07) = CDMW /* External reference */
                }
                Else
                {
                    If (((CFGD & 0x0800) && (PDC0 & 0x0100)))
                    {
                        Index (C1TM, Zero) = MWES /* \_PR_.CPU0.MWES */
                    }
                }

                CSTF = Ones
            }

            AC2V = Zero
            AC3V = Zero
            Index (C3ST, One) = C1TM /* \_PR_.CPU0.C1TM */
            If ((CFGD & 0x20))
            {
                Index (C3ST, 0x02) = C7TM /* \_PR_.CPU0.C7TM */
                AC2V = Ones
            }
            Else
            {
                If ((CFGD & 0x10))
                {
                    Index (C3ST, 0x02) = C6TM /* \_PR_.CPU0.C6TM */
                    AC2V = Ones
                }
                Else
                {
                    If ((CFGD & 0x08))
                    {
                        Index (C3ST, 0x02) = C3TM /* \_PR_.CPU0.C3TM */
                        AC2V = Ones
                    }
                }
            }

            If ((CFGD & 0x4000))
            {
                Index (C3ST, 0x03) = CDTM /* \_PR_.CPU0.CDTM */
                AC3V = Ones
            }

            If ((GEAR == One))
            {
                If ((CFGD & 0x08))
                {
                    Index (C3ST, 0x02) = C3TM /* \_PR_.CPU0.C3TM */
                    AC2V = Ones
                    AC3V = Zero
                }
                Else
                {
                    AC2V = Zero
                    AC3V = Zero
                }
            }

            If ((GEAR == 0x02))
            {
                AC2V = Zero
                AC3V = Zero
            }

            If ((AC2V && AC3V))
            {
                Return (C3ST) /* \_PR_.CPU0.C3ST */
            }
            Else
            {
                If (AC2V)
                {
                    Index (C2ST, One) = DerefOf (Index (C3ST, One))
                    Index (C2ST, 0x02) = DerefOf (Index (C3ST, 0x02))
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    If (AC3V)
                    {
                        Index (C2ST, One) = DerefOf (Index (C3ST, One))
                        Index (C2ST, 0x02) = DerefOf (Index (C3ST, 0x03))
                        Index (DerefOf (Index (C2ST, 0x02)), One) = 0x02
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                    Else
                    {
                        Index (C1ST, One) = DerefOf (Index (C3ST, One))
                        Return (C1ST) /* \_PR_.CPU0.C1ST */
                    }
                }
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("ssdt8.aml", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{

    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)
    External (PDC0, UnknownObj)
    External (TCNT, IntObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                Index (DerefOf (Index (HPSD, Zero)), 0x04) = TCNT /* External reference */
                Index (DerefOf (Index (SPSD, Zero)), 0x04) = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU1.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU1.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                Index (DerefOf (Index (HPSD, Zero)), 0x04) = TCNT /* External reference */
                Index (DerefOf (Index (SPSD, Zero)), 0x04) = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU2.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU2.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                Index (DerefOf (Index (HPSD, Zero)), 0x04) = TCNT /* External reference */
                Index (DerefOf (Index (SPSD, Zero)), 0x04) = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU3.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU3.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU4)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                Index (DerefOf (Index (HPSD, Zero)), 0x04) = TCNT /* External reference */
                Index (DerefOf (Index (SPSD, Zero)), 0x04) = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU4.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU4.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU5)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                Index (DerefOf (Index (HPSD, Zero)), 0x04) = TCNT /* External reference */
                Index (DerefOf (Index (SPSD, Zero)), 0x04) = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU5.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU5.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU6)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                Index (DerefOf (Index (HPSD, Zero)), 0x04) = TCNT /* External reference */
                Index (DerefOf (Index (SPSD, Zero)), 0x04) = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU6.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU6.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU7)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                Index (DerefOf (Index (HPSD, Zero)), 0x04) = TCNT /* External reference */
                Index (DerefOf (Index (SPSD, Zero)), 0x04) = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU7.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU7.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT9
-----
DefinitionBlock ("ssdt9.aml", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{

    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



XSDT
----
[000h 0000   4]                    Signature : "XSDT"    [Extended System Description Table]
[004h 0004   4]                 Table Length : 00000094
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 6C
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]       ACPI Table Address   0 : 00000000C9469958
[02Ch 0044   8]       ACPI Table Address   1 : 00000000C9469A68
[034h 0052   8]       ACPI Table Address   2 : 00000000C9469B00
[03Ch 0060   8]       ACPI Table Address   3 : 00000000C9469B48
[044h 0068   8]       ACPI Table Address   4 : 00000000C9469C10
[04Ch 0076   8]       ACPI Table Address   5 : 00000000C9469C68
[054h 0084   8]       ACPI Table Address   6 : 00000000C9469E68
[05Ch 0092   8]       ACPI Table Address   7 : 00000000C946A008
[064h 0100   8]       ACPI Table Address   8 : 00000000C946A560
[06Ch 0108   8]       ACPI Table Address   9 : 00000000C946B038
[074h 0116   8]       ACPI Table Address  10 : 00000000C946B078
[07Ch 0124   8]       ACPI Table Address  11 : 00000000C946B0B0
[084h 0132   8]       ACPI Table Address  12 : 00000000C946B408
[08Ch 0140   8]       ACPI Table Address  13 : 00000000C946CBA8

Raw Table Data: Length 148 (0x94)

  0000: 58 53 44 54 94 00 00 00 01 6C 5F 41 53 55 53 5F  XSDT.....l_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  Notebook. ..AMI 
  0020: 13 00 01 00 58 99 46 C9 00 00 00 00 68 9A 46 C9  ....X.F.....h.F.
  0030: 00 00 00 00 00 9B 46 C9 00 00 00 00 48 9B 46 C9  ......F.....H.F.
  0040: 00 00 00 00 10 9C 46 C9 00 00 00 00 68 9C 46 C9  ......F.....h.F.
  0050: 00 00 00 00 68 9E 46 C9 00 00 00 00 08 A0 46 C9  ....h.F.......F.
  0060: 00 00 00 00 60 A5 46 C9 00 00 00 00 38 B0 46 C9  ....`.F.....8.F.
  0070: 00 00 00 00 78 B0 46 C9 00 00 00 00 B0 B0 46 C9  ....x.F.......F.
  0080: 00 00 00 00 08 B4 46 C9 00 00 00 00 A8 CB 46 C9  ......F.......F.
  0090: 00 00 00 00                                      ....


