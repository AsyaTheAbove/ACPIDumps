
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20141107-64 [Apr  6 2015]
Copyright (c) 2000 - 2014 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   RSDP                          "_ASUS_"
   RSDT   0x00000044     0x01    "_ASUS_"  "Notebook"   0x01072009    "MSFT"     0x00010013
   XSDT   0x00000064     0x01    "_ASUS_"  "Notebook"   0x01072009    "AMI "     0x00010013
   DSDT   0x0000C22B     0x02    "_ASUS_"  "Notebook"   0x00000207    "INTL"     0x20091112
   FACS   0x00000040
   FACP   0x000000F4     0x04    "_ASUS_"  "Notebook"   0x01072009    "AMI "     0x00010013
   APIC   0x00000072     0x03    "_ASUS_"  "Notebook"   0x01072009    "AMI "     0x00010013
   ECDT   0x000000C1     0x01    "_ASUS_"  "Notebook"   0x01072009    "AMI."     0x00000004
   MCFG   0x0000003C     0x01    "A M I "  "GMCH945."   0x01072009    "MSFT"     0x00000097
   HPET   0x00000038     0x01    "_ASUS_"  "Notebook"   0x01072009    "AMI "     0x00000004
   SSDT   0x0000072C     0x01    "AMD   "  "POWERNOW"   0x00000001    "AMD "     0x00000001
   SSDT   0x0000190A     0x02    "AMD   "  "ALIB    "   0x00000001    "MSFT"     0x04000000
   SLIC   0x00000176     0x01    "_ASUS_"  "Notebook"   0x01072009    "ASUS"     0x00000001

Found 13 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000072
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : CF
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 03
[040h 0064   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 04
[048h 0072   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 00
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[06Ch 0108   1]                Subtable Type : 04 [Local APIC NMI]
[06Dh 0109   1]                       Length : 06
[06Eh 0110   1]                 Processor ID : FF
[06Fh 0111   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[071h 0113   1]         Interrupt Input LINT : 01

Raw Table Data: Length 114 (0x72)

  0000: 41 50 49 43 72 00 00 00 03 CF 5F 41 53 55 53 5F  APICr....._ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  Notebook. ..AMI 
  0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  ................
  0030: 01 00 00 00 00 08 02 01 01 00 00 00 00 08 03 03  ................
  0040: 00 00 00 00 00 08 04 04 00 00 00 00 01 0C 00 00  ................
  0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  ................
  0060: 00 00 02 0A 00 09 09 00 00 00 0F 00 04 06 FF 05  ................
  0070: 00 01                                            ..


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 2, "_ASUS_", "Notebook", 0x00000207)
{
    /*
     * iASL Warning: There were 1 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (ALIB, MethodObj)    // Warning: Unresolved method, guessing 2 arguments


    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (SPIB, 0xFEC10000)
    Name (SPIL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (HPTL, 0x1000)
    Name (GIOB, 0xFED80100)
    Name (IOMB, 0xFED80D00)
    Name (SMIB, 0xFED80200)
    Name (PEBS, 0xE0000000)
    Name (PEBL, 0x10000000)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (DSSP, Zero)
    Name (FHPP, One)
    Name (ATIS, 0x55)
    Name (MBEC, Zero)
    Name (OSFG, Zero)
    Name (SOAO, 0x6B)
    Name (FUIF, 0xA5)
    Name (SMIP, 0xB2)
    Name (MBLF, 0x0A)
    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
            \_SB.IRQC ()
        }
        Else
        {
            DBG8 = 0xAC
        }

        If (\_SB.BRST)
        {
            SGPL (0x32, One)
            SGPL (0xC2, One)
        }
        Else
        {
            SGPL (0x32, Zero)
            SGPL (0xC2, Zero)
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = One
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Linux"))
            {
                OSVR = 0x03
            }

            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (Index (BUF0, Local0)) != DerefOf (Index (BUF1, Local0
                ))))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        Index (PRWP, Zero) = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            Index (PRWP, One) = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, Index (PRWP, One))
            }
            Else
            {
                FindSetRightBit (Local0, Index (PRWP, One))
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, One)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x4C00)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x10)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ICMS,   8, 
        DCMS,   8, 
        Offset (0x0E), 
        P80,    8
    }

    IndexField (ICMS, DCMS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        Offset (0x04), 
        Offset (0x08), 
        BS_A,   32
    }

    OperationRegion (CFGS, SystemMemory, BS_A, 0x0200)
    Field (CFGS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x0C), 
        PCIE,   32, 
        Offset (0x28), 
        EKBC,   8, 
        Offset (0x95), 
        GGN2,   8, 
        Offset (0x10E), 
        OSCF,   8, 
        Offset (0x11E), 
        PRS0,   8, 
        DET0,   8, 
        Offset (0x122), 
        PRS1,   8, 
        DET1,   8, 
        Offset (0x126), 
        PRS2,   8, 
        DET2,   8, 
        Offset (0x12A), 
        PRS3,   8, 
        DET3,   8, 
        Offset (0x133), 
        ABPS,   8, 
        Offset (0x136), 
        GPPS,   8
    }

    OperationRegion (CMPT, SystemIO, 0x0C50, 0x03)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        CMID,   8, 
            ,   6, 
        GPCT,   2, 
        GP0I,   1, 
        GP1I,   1, 
        GP2I,   1, 
        GP3I,   1, 
        GP4I,   1, 
        GP5I,   1, 
        GP6I,   1, 
        GP7I,   1
    }

    OperationRegion (PCFG, SystemMemory, PCIE, 0x02000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x20078), 
        Offset (0x2007A), 
        PMSA,   1, 
        Offset (0x28078), 
        Offset (0x2807A), 
        PMSB,   1, 
        Offset (0x48078), 
        Offset (0x4807A), 
        PMSC,   1, 
        Offset (0x8800A), 
        STCL,   16, 
        Offset (0x880FC), 
        RMBA,   32, 
        Offset (0xA0004), 
        SMIE,   1, 
        SMME,   1, 
        Offset (0xA0008), 
        RVID,   8, 
        Offset (0xA0014), 
        SMB1,   32, 
        Offset (0xA0082), 
            ,   2, 
        G31O,   1, 
        Offset (0xA00E1), 
            ,   6, 
        ACIR,   1, 
        Offset (0xA4004), 
        PCMD,   2, 
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        INPM,   8, 
        DAPM,   8
    }

    IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
    {
        Offset (0x0D), 
        EV0S,   1, 
        EV1S,   1, 
        Offset (0x24), 
        MMSO,   32, 
        Offset (0x37), 
        EV0C,   1, 
        EV1C,   1, 
            ,   1, 
        Offset (0x60), 
        P1EB,   16
    }

    OperationRegion (ERMM, SystemMemory, MMSO, 0x1000)
    Field (ERMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x105), 
            ,   5, 
        G06E,   1, 
        G06O,   1, 
        G06I,   1, 
        G07B,   8, 
        Offset (0x10A), 
        G0BB,   8, 
        Offset (0x10D), 
        G0EB,   8, 
        Offset (0x113), 
            ,   5, 
        G14E,   1, 
        G14O,   1, 
        G14I,   1, 
            ,   5, 
        G15E,   1, 
        G15O,   1, 
        G15I,   1, 
        Offset (0x11B), 
            ,   7, 
        G1CI,   1, 
        Offset (0x11D), 
            ,   5, 
        G1EE,   1, 
        G1EO,   1, 
        G1EI,   1, 
        Offset (0x11F), 
            ,   7, 
        G20I,   1, 
        Offset (0x122), 
            ,   5, 
        G23E,   1, 
        G23O,   1, 
        G23I,   1, 
        Offset (0x12B), 
            ,   5, 
        G2CE,   1, 
        G2CO,   1, 
        G2CI,   1, 
            ,   5, 
        G2DE,   1, 
        G2DO,   1, 
        G2DI,   1, 
        Offset (0x132), 
            ,   5, 
        G33E,   1, 
        G33O,   1, 
        G33I,   1, 
        Offset (0x134), 
            ,   5, 
        G35E,   1, 
        G35O,   1, 
        Offset (0x136), 
            ,   5, 
        G37E,   1, 
        G37O,   1, 
        G37I,   1, 
        Offset (0x13F), 
            ,   7, 
        G40I,   1, 
        Offset (0x164), 
            ,   7, 
        GE05,   1, 
        Offset (0x16E), 
            ,   7, 
        GE15,   1, 
            ,   7, 
        GE16,   1, 
        Offset (0x175), 
            ,   7, 
        GE22,   1, 
        Offset (0x1A9), 
            ,   5, 
        GAAE,   1, 
        GAAO,   1, 
        GAAI,   1, 
        Offset (0x1AE), 
        GAFB,   8, 
        GB0B,   8, 
        Offset (0x1FF), 
            ,   9, 
        GESA,   1, 
        Offset (0x207), 
            ,   5, 
        E05C,   1, 
        Offset (0x208), 
        E08C,   1, 
        E09C,   1, 
        Offset (0x20A), 
            ,   5, 
        E1DC,   1, 
        Offset (0x2AF), 
            ,   2, 
        SLPS,   2, 
        Offset (0x376), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BA), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BD), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3EF), 
        PHYD,   1, 
            ,   1, 
            ,   1, 
        US5R,   1, 
        Offset (0x3F5), 
        GECD,   1, 
        Offset (0xD05), 
        G06M,   8, 
        G07M,   8, 
        Offset (0xD0A), 
        G0BM,   8, 
        Offset (0xD0D), 
        G0EM,   8, 
        Offset (0xD13), 
        G14M,   8, 
        Offset (0xD1B), 
        G1CM,   8, 
        Offset (0xD1F), 
        G20M,   8, 
        Offset (0xD22), 
        G23M,   8, 
        Offset (0xD2C), 
        G2DM,   8, 
        Offset (0xD36), 
        G37M,   8, 
        Offset (0xD6F), 
        G70M,   8, 
        Offset (0xD75), 
        G76M,   8, 
        Offset (0xDAE), 
        GAFM,   8, 
        GB0M,   8, 
        Offset (0xE7F), 
            ,   2, 
        ECEN,   1
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        INAB = Arg0
        Return (DAAB) /* \DAAB */
    }

    Method (WTAB, 2, NotSerialized)
    {
        INAB = Arg0
        DAAB = Arg1
    }

    Method (RWAB, 3, NotSerialized)
    {
        Local0 = (RDAB (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (GHPS, 2, NotSerialized)
    {
        If ((Arg0 == Zero))
        {
            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            Stall (0xC8)
        }

        If ((Arg0 == One))
        {
            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            Stall (0xC8)
        }

        If (GGN2)
        {
            If ((Arg0 == Zero))
            {
                GEN2 ()
                Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                Local0 &= 0xFF
                Local1 = 0x01F4
                While (((Local1 > Zero) && (Local0 != 0x10)))
                {
                    Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                    Local0 &= 0xFF
                    Local1--
                    Stall (0xC8)
                    Stall (0xC8)
                }

                If ((Local0 != 0x10))
                {
                    GEN1 ()
                }
            }
        }
    }

    Method (GEN2, 0, NotSerialized)
    {
        TLS2 = 0x02
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, One)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
        RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
        Stall (0xC8)
        Stall (0xC8)
    }

    Method (GEN1, 0, NotSerialized)
    {
        TLS2 = One
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, Zero)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        Stall (0xC8)
        Stall (0xC8)
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        PCMD = One
        P80 = Arg0
        CPMS ()
        CPMS ()
        PEWS = One
    }

    Method (SWAK, 1, NotSerialized)
    {
        CPMS ()
        CPMS ()
        PEWS = One
    }

    Method (TRMD, 1, NotSerialized)
    {
    }

    Method (CPMS, 0, NotSerialized)
    {
        If ((EPNM == Zero))
        {
            PMSA = One
            PMSB = One
            PMSC = One
            PMS0 = One
            PMS1 = One
            PMS2 = One
            PMS3 = One
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x2D)
        {
            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR00, Package (0x2D)
        {
            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                Zero, 
                0x12
            }
        })
        Name (PR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_ADR, 0x00180000)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xC0000000)
            Name (MBL, 0x40000000)
            Name (MABL, 0x00000000)
            Name (MABH, 0x00000000)
            Name (MALL, 0x00000000)
            Name (MALH, 0x00000000)
            Name (MAML, 0x00000000)
            Name (MAMH, 0x00000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y00)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y02, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y01, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDFC0000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y06)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y08, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y07, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                BreakPoint
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y00._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y00._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y00._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y03._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y03._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y03._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, LEN3)  // _LEN: Length
                    MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                    Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                    MAX3 = (MIN3 + Local0--)
                    If ((MALH || MALL))
                    {
                        CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MN8L)  // _MIN: Minimum Base Address
                        Local0 = (0xB4 + 0x04)
                        CreateDWordField (CRS1, Local0, MN8H)
                        MN8L = MABL /* \_SB_.PCI0.MABL */
                        MN8H = MABH /* \_SB_.PCI0.MABH */
                        CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MX8L)  // _MAX: Maximum Base Address
                        Local1 = (0xBC + 0x04)
                        CreateDWordField (CRS1, Local1, MX8H)
                        CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LN8L)  // _LEN: Length
                        Local2 = (0xCC + 0x04)
                        CreateDWordField (CRS1, Local2, LN8H)
                        MN8L = MABL /* \_SB_.PCI0.MABL */
                        MN8H = MABH /* \_SB_.PCI0.MABH */
                        LN8L = MALL /* \_SB_.PCI0.MALL */
                        LN8H = MALH /* \_SB_.PCI0.MALH */
                        MX8L = MAML /* \_SB_.PCI0.MAML */
                        MX8H = MAMH /* \_SB_.PCI0.MAMH */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y06._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y06._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y06._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y07._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y07._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y07._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y09._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y09._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y09._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0A._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0A._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0A._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = MBL /* \_SB_.PCI0.MBL_ */
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    If ((MALH || MALL))
                    {
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, MN9L)  // _MIN: Minimum Base Address
                        Local0 = (0x72 + 0x04)
                        CreateDWordField (CRS2, Local0, MN9H)
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, MX9L)  // _MAX: Maximum Base Address
                        Local1 = (0x7A + 0x04)
                        CreateDWordField (CRS2, Local1, MX9H)
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, LN9L)  // _LEN: Length
                        Local2 = (0x8A + 0x04)
                        CreateDWordField (CRS2, Local2, LN9H)
                        MN9L = MABL /* \_SB_.PCI0.MABL */
                        MN9H = MABH /* \_SB_.PCI0.MABH */
                        LN9L = MALL /* \_SB_.PCI0.MALL */
                        LN9H = MALH /* \_SB_.PCI0.MALH */
                        MX9L = MAML /* \_SB_.PCI0.MAML */
                        MX9H = MAMH /* \_SB_.PCI0.MAMH */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Scope (\_SB)
            {
                Name (PRSP, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveHigh, Shared, ,, _Y0C)
                    {
                        0x00000018,
                    }
                })
                Device (LN24)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x18)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x18
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x18
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN25)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x19)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x19
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x19
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN26)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x1A)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1A
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1A
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN27)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x1B)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1B
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1B
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN28)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x1C)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1C
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1C
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN29)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x1D)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1D
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1D
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN30)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x1E)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1E
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1E
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN31)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x1F)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1F
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x1F
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN32)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x20)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x20
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x20
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN33)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x21)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x21
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x21
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN34)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x22)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x22
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x22
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN35)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x23)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x23
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x23
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN36)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x24)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x24
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x24
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN37)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x25)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x25
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x25
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN38)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x26)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x26
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x26
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN39)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x27)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x27
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x27
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN40)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x28)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x28
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x28
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN41)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x29)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x29
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x29
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN42)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x2A)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2A
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2A
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN43)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x2B)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2B
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2B
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN44)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x2C)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2C
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2C
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN45)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x2D)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2D
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2D
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN46)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x2E)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2E
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2E
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN47)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x2F)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2F
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x2F
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN48)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x30)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x30
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x30
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN49)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x31)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x31
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x31
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN50)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x32)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x32
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x32
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN51)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x33)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x33
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x33
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN52)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x34)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x34
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x34
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN53)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x35)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x35
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x35
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN54)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x36)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x36
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x36
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }

                Device (LN55)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x37)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x37
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (PRSP, \_SB._Y0C._INT, IRQX)  // _INT: Interrupts
                        IRQX = 0x37
                        Return (PRSP) /* \_SB_.PRSP */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                    }
                }
            }

            Scope (\_SB)
            {
                Scope (PCI0)
                {
                    Device (AMDN)
                    {
                        Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                        Name (_UID, 0xC8)  // _UID: Unique ID
                        Name (_STA, 0x0F)  // _STA: Status
                        Name (NPTR, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000000,         // Address Length
                                _Y0D)
                        })
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y0D._LEN, PL)  // _LEN: Length
                            CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y0D._BAS, PB)  // _BAS: Base Address
                            PB = PEBS /* \PEBS */
                            PL = PEBL /* \PEBL */
                            Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                        }
                    }
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Device (IDEC)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x5A, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    0x0F, 
                    Zero
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    Zero
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    Zero
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, AnyAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F)
                    Local1 = (Arg0 >> 0x04)
                    Return ((0x1E * ((Local0 + One) + (Local1 + One)
                        )))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, PIT1)
                    CreateByteField (Arg0, One, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           /* .... */
                    })
                    CreateDWordField (BUF, Zero, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If ((PICX & One))
                    {
                        Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                    }

                    PIO0 = GETT (PIT0)
                    PIO1 = GETT (PIT1)
                    If ((UDCX & One))
                    {
                        FLAG |= One
                        DMA0 = DerefOf (Index (UDMT, (UDMX & 0x0F)))
                    }
                    Else
                    {
                        DMA0 = GETT (MDT0)
                    }

                    If ((UDCX & 0x02))
                    {
                        FLAG |= 0x04
                        DMA1 = DerefOf (Index (UDMT, (UDMX >> 0x04)))
                    }
                    Else
                    {
                        DMA1 = GETT (MDT1)
                    }

                    FLAG |= 0x1A
                    Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, Zero, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                    })
                    CreateByteField (BUF, Zero, PIT1)
                    CreateByteField (BUF, One, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Local0 = Match (PIOT, MLE, PIO0, MTR, Zero, Zero)
                    Divide (Local0, 0x05, Local0)
                    Local1 = Match (PIOT, MLE, PIO1, MTR, Zero, Zero)
                    Divide (Local1, 0x05, Local1)
                    PIMX = ((Local1 << 0x04) | Local0)
                    PIT0 = DerefOf (Index (PITR, Local0))
                    PIT1 = DerefOf (Index (PITR, Local1))
                    If ((FLAG & One))
                    {
                        Local0 = Match (UDMT, MLE, DMA0, MTR, Zero, Zero)
                        Divide (Local0, 0x07, Local0)
                        UDMX |= Local0
                        UDCX |= One
                    }
                    Else
                    {
                        If ((DMA0 != 0xFFFFFFFF))
                        {
                            Local0 = Match (MDMT, MLE, DMA0, MTR, Zero, Zero)
                            MDT0 = DerefOf (Index (MDTR, Local0))
                        }
                    }

                    If ((FLAG & 0x04))
                    {
                        Local0 = Match (UDMT, MLE, DMA1, MTR, Zero, Zero)
                        Divide (Local0, 0x07, Local0)
                        UDMX |= (Local0 << 0x04)
                        UDCX |= 0x02
                    }
                    Else
                    {
                        If ((DMA1 != 0xFFFFFFFF))
                        {
                            Local0 = Match (MDMT, MLE, DMA1, MTR, Zero, Zero)
                            MDT1 = DerefOf (Index (MDTR, Local0))
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.STM_.BUF_ */
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, Zero, MDT1)
                    CreateByteField (Arg1, One, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If ((Arg0 == 0xA0))
                    {
                        Local0 = (PIMX & 0x0F)
                        Local1 = MDT0 /* \_SB_.PCI0.IDEC.GTF_.MDT0 */
                        Local2 = (UDCX & One)
                        Local3 = (UDMX & 0x0F)
                    }
                    Else
                    {
                        Local0 = (PIMX >> 0x04)
                        Local1 = MDT1 /* \_SB_.PCI0.IDEC.GTF_.MDT1 */
                        Local2 = (UDCX & 0x02)
                        Local3 = (UDMX >> 0x04)
                    }

                    Name (BUF, Buffer (0x15)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,  /* ........ */
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x00, 0x00,  /* ........ */
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xF5                     /* ..... */
                    })
                    CreateByteField (BUF, One, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    CreateByteField (BUF, 0x13, CMDC)
                    CMDA = Arg0
                    CMDB = Arg0
                    CMDC = Arg0
                    PMOD = (Local0 | 0x08)
                    If (Local2)
                    {
                        DMOD = (Local3 | 0x40)
                    }
                    Else
                    {
                        Local4 = Match (MDMT, MLE, GETT (Local1), MTR, Zero, Zero)
                        If ((Local4 < 0x03))
                        {
                            DMOD = (0x20 | Local4)
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.GTF_.BUF_ */
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = PPIT /* \_SB_.PCI0.IDEC.PPIT */
                        VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                        VPIC = PPIC /* \_SB_.PCI0.IDEC.PPIC */
                        VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                        VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        PPIT = VPIT /* \_SB_.PCI0.IDEC.PRID._STM.VPIT */
                        PMDT = VMDT /* \_SB_.PCI0.IDEC.PRID._STM.VMDT */
                        PPIM = VPIM /* \_SB_.PCI0.IDEC.PRID._STM.VPIM */
                        PUDC = VUDC /* \_SB_.PCI0.IDEC.PRID._STM.VUDC */
                        PUDM = VUDM /* \_SB_.PCI0.IDEC.PRID._STM.VUDM */
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = SPIT /* \_SB_.PCI0.IDEC.SPIT */
                        VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                        VPIC = SPIC /* \_SB_.PCI0.IDEC.SPIC */
                        VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                        VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        SPIT = VPIT /* \_SB_.PCI0.IDEC.SECD._STM.VPIT */
                        SMDT = VMDT /* \_SB_.PCI0.IDEC.SECD._STM.VMDT */
                        SPIM = VPIM /* \_SB_.PCI0.IDEC.SECD._STM.VPIM */
                        SUDC = VUDC /* \_SB_.PCI0.IDEC.SECD._STM.VUDC */
                        SUDM = VUDM /* \_SB_.PCI0.IDEC.SECD._STM.VUDM */
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }

            Device (SBAZ)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, Zero, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x1B, 0x04))
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                OperationRegion (RMBS, PCI_Config, Zero, 0x0100)
                Field (RMBS, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x6C), 
                    LR2S,   16, 
                    LR2E,   16
                }

                Method (SPTS, 1, NotSerialized)
                {
                }

                Method (SWAK, 1, NotSerialized)
                {
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Name (SLPS, Zero)
                }

                Device (S900)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x0700)  // _UID: Unique ID
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x00,               // Alignment
                            0x09,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00B1,             // Range Minimum
                            0x00B1,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x040B,             // Range Minimum
                            0x040B,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C52,             // Range Minimum
                            0x0C52,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD2,             // Range Minimum
                            0x0CD2,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD4,             // Range Minimum
                            0x0CD4,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD6,             // Range Minimum
                            0x0CD6,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD8,             // Range Minimum
                            0x0CD8,             // Range Maximum
                            0x00,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0E)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y11)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y10)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0F)
                        IO (Decode16,
                            0x0900,             // Range Minimum
                            0x0900,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0910,             // Range Minimum
                            0x0910,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x00,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y12)
                        Memory32Fixed (ReadWrite,
                            0xFEE00000,         // Address Base
                            0x00001000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED80000,         // Address Base
                            0x00010000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED61000,         // Address Base
                            0x00010000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y13)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y14)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y15)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.SBRG.S900._Y0E._MIN, PBB)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.S900._Y0E._MAX, PBH)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.S900._Y0E._LEN, PML)  // _LEN: Length
                        PBB = PMBS /* \PMBS */
                        PBH = PMBS /* \PMBS */
                        PML = PMLN /* \PMLN */
                        If (SMBB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S900._Y0F._MIN, SMB1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S900._Y0F._MAX, SMH1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.S900._Y0F._LEN, SML1)  // _LEN: Length
                            SMB1 = SMBB /* \SMBB */
                            SMH1 = SMBB /* \SMBB */
                            SML1 = SMBL /* \SMBL */
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S900._Y10._MIN, SMB0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S900._Y10._MAX, SMH0)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.S900._Y10._LEN, SML0)  // _LEN: Length
                            SMB0 = SMB0 /* \_SB_.PCI0.SBRG.S900._CRS.SMB0 */
                            SMH0 = SMB0 /* \_SB_.PCI0.SBRG.S900._CRS.SMB0 */
                            SML0 = SMBM /* \SMBM */
                        }

                        If (GPBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S900._Y11._MIN, IGB)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S900._Y11._MAX, IGH)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.S900._Y11._LEN, IGL)  // _LEN: Length
                            IGB = GPBS /* \GPBS */
                            IGH = GPBS /* \GPBS */
                            IGL = GPLN /* \GPLN */
                        }

                        If (APCB)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S900._Y12._BAS, APB)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S900._Y12._LEN, APL)  // _LEN: Length
                            APB = APCB /* \APCB */
                            APL = APCL /* \APCL */
                        }

                        If (SPIB)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S900._Y13._BAS, SPIB)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S900._Y13._LEN, SPIL)  // _LEN: Length
                            SPIB = \SPIB
                            SPIL = \SPIL
                        }

                        If (HPTB)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S900._Y14._BAS, HXTB)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S900._Y14._LEN, HXTL)  // _LEN: Length
                            HXTB = HPTB /* \HPTB */
                            HXTL = HPTL /* \HPTL */
                        }

                        CreateDWordField (CRS, \_SB.PCI0.SBRG.S900._Y15._BAS, ROMB)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.S900._Y15._LEN, ROML)  // _LEN: Length
                        If (LR2S)
                        {
                            ROMB = (LR2S << 0x10)
                            ROML = (((LR2E - LR2S) + One) << 0x10)
                        }
                        Else
                        {
                            ROMB = ROMS /* \ROMS */
                            ROML = (Zero - ROMS) /* \ROMS */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.S900.CRS_ */
                    }
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((MBEC & 0xFFFF))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.RMSC.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.RMSC.CRS2 */
                        }
                    }
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (NBRM)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x99)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (CRS) /* \_SB_.PCI0.SBRG.NBRM.CRS_ */
                    }
                }

                Device (PS2M)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (0x01008416)
                    }

                    Name (_CID, Package (0x05)  // _CID: Compatible ID
                    {
                        EisaId ("SYN0A00"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */, 
                        EisaId ("PNP0F13") /* PS/2 Mouse */, 
                        EisaId ("PNP0F12")
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0E)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }

                        Return (Zero)
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            FixedIO (
                                0x0060,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0064,             // Address
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                }
            }

            Device (P0PC)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x04))
                }
            }

            Device (XHC1)
            {
                Name (_ADR, 0x00100001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                OperationRegion (SACS, PCI_Config, Zero, 0x40)
                Field (SACS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x24), 
                    STB5,   32
                }

                Name (SPTM, Buffer (0x14)
                {
                    /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                    /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                    /* 0010 */  0x1F, 0x00, 0x00, 0x00                           /* .... */
                })
                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((STCL == 0x0101))
                        {
                            Local1 = 0x0F
                        }
                        Else
                        {
                            Local1 = Zero
                        }

                        Return (Local1)
                    }

                    Name (PRIS, Zero)
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                        Field (BAR, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x120), 
                                ,   7, 
                            PMBY,   1, 
                            Offset (0x128), 
                            PMS0,   4, 
                            Offset (0x129), 
                            PMS1,   4, 
                            Offset (0x220), 
                                ,   7, 
                            PSBY,   1, 
                            Offset (0x228), 
                            PSS0,   4, 
                            Offset (0x229), 
                            PSS1,   4, 
                            Offset (0x2A0), 
                                ,   7
                        }

                        If (((OSTY == 0x06) || (OSTY == 0x04)))
                        {
                            If (PMS1)
                            {
                                Local0 = 0x32
                                While (((PMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (PSS1)
                            {
                                Local0 = 0x32
                                While (((PSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        PRIS = Zero
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PRIS = 0x03
                    }

                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (PRIS) /* \_SB_.PCI0.SATA.PRID.PRIS */
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x128), 
                                PMS0,   4, 
                                Offset (0x129), 
                                PMS1,   4
                            }

                            If (~(PMS1 == Zero))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x120), 
                                    ,   7, 
                                PMBY,   1
                            }

                            Local0 = 0x32
                            While (((PMBY == One) && Local0))
                            {
                                Sleep (0xFA)
                                Local0--
                            }

                            S12P = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D0.S12P */
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x228), 
                                PSS0,   4, 
                                Offset (0x229), 
                                PSS1,   4
                            }

                            If (~(PSS1 == Zero))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x220), 
                                    ,   7, 
                                PSBY,   1
                            }

                            Local0 = 0x32
                            While (((PSBY == One) && Local0))
                            {
                                Sleep (0xFA)
                                Local0--
                            }

                            S12P = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D1.S12P */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                    }

                    Name (SECS, Zero)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((STCL == 0x0101))
                        {
                            Local1 = 0x0F
                        }
                        Else
                        {
                            Local1 = Zero
                        }

                        Return (Local1)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                        Field (BAR, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x1A0), 
                                ,   7, 
                            SMBY,   1, 
                            Offset (0x1A8), 
                            SMS0,   4, 
                            Offset (0x1A9), 
                            SMS1,   4, 
                            Offset (0x2A0), 
                                ,   7, 
                            SSBY,   1, 
                            Offset (0x2A8), 
                            SSS0,   4, 
                            Offset (0x2A9), 
                            SSS1,   4, 
                            Offset (0x2AC)
                        }

                        If (((OSTY == 0x06) || (OSTY == 0x04)))
                        {
                            If (SMS1)
                            {
                                Local0 = 0x32
                                While (((SMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (SSS1)
                            {
                                Local0 = 0x32
                                While (((SSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        SECS = Zero
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SECS = 0x03
                    }

                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (SECS) /* \_SB_.PCI0.SATA.SECD.SECS */
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x1A8), 
                                SMS0,   4, 
                                Offset (0x1A9), 
                                SMS1,   4
                            }

                            If (~(SMS1 == Zero))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x1000)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x1A0), 
                                    ,   7, 
                                SMBY,   1
                            }

                            Local0 = 0x32
                            While (((SMBY == One) && Local0))
                            {
                                Sleep (0xFA)
                                Local0--
                            }

                            S12P = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D0.S12P */
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x2A8), 
                                SSS0,   4, 
                                Offset (0x2A9), 
                                SSS1,   4
                            }

                            If (~(SSS1 == Zero))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x2A0), 
                                    ,   7, 
                                SSBY,   1
                            }

                            Local0 = 0x32
                            While (((SSBY == One) && Local0))
                            {
                                Sleep (0xFA)
                                Local0--
                            }

                            S12P = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            S12P = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D1.S12P */
                        }
                    }
                }
            }

            Device (BR17)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
            }

            Device (BR18)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (BR1B)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (BR1C)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (BR1E)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
            }

            Device (BR1F)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Scope (\)
                {
                    OperationRegion (ATFB, SystemMemory, 0x9F9E6018, 0x0105)
                    Field (ATFB, AnyAcc, NoLock, Preserve)
                    {
                        BCMD,   8, 
                        DID,    32, 
                        INFO,   2048
                    }

                    Field (ATFB, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x05), 
                        INF0,   8, 
                        INF1,   8, 
                        INF2,   8, 
                        INF3,   8, 
                        INF4,   8, 
                        INF5,   8, 
                        INF6,   8, 
                        INF7,   8
                    }

                    Field (ATFB, AnyAcc, NoLock, Preserve)
                    {
                        AccessAs (ByteAcc, 0x00), 
                        Offset (0x05), 
                        INF,    8
                    }
                }

                OperationRegion (NBRV, PCI_Config, 0x08, One)
                Field (NBRV, ByteAcc, NoLock, Preserve)
                {
                    PREV,   8
                }

                OperationRegion (NBBR, PCI_Config, 0x1C, 0x08)
                Field (NBBR, DWordAcc, NoLock, Preserve)
                {
                    BR3L,   32, 
                    BR3H,   32
                }

                OperationRegion (NBBI, PCI_Config, 0x84, 0x04)
                Field (NBBI, DWordAcc, NoLock, Preserve)
                {
                    PARB,   32
                }

                OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
                Field (NBMS, DWordAcc, NoLock, Preserve)
                {
                    MIDX,   32, 
                    MIDR,   32
                }

                Mutex (NBMM, 0x00)
                Method (NBMR, 1, NotSerialized)
                {
                    Acquire (NBMM, 0xFFFF)
                    Local0 = (Arg0 & 0x7F)
                    MIDX = Local0
                    Local0 = MIDR /* \_SB_.PCI0.GNBD.MIDR */
                    MIDX = 0x7F
                    Release (NBMM)
                    Return (Local0)
                }

                Method (NBMW, 2, NotSerialized)
                {
                    Acquire (NBMM, 0xFFFF)
                    Local0 = (Arg0 & 0x7F)
                    Local0 |= 0x80
                    MIDX = Local0
                    MIDR = Arg1
                    MIDX = Local0 &= 0x7F
                    Release (NBMM)
                }

                OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
                Field (NBXP, DWordAcc, NoLock, Preserve)
                {
                    NBXI,   32, 
                    NBXD,   32
                }

                Mutex (NBXM, 0x00)
                Method (NBXR, 1, NotSerialized)
                {
                    Acquire (NBXM, 0xFFFF)
                    NBXI = Arg0
                    Local0 = NBXD /* \_SB_.PCI0.GNBD.NBXD */
                    NBXI = Zero
                    Release (NBXM)
                    Return (Local0)
                }

                Method (NBXW, 2, NotSerialized)
                {
                    Acquire (NBXM, 0xFFFF)
                    NBXI = Arg0
                    NBXD = Arg1
                    NBXI = Zero
                    Release (NBXM)
                }

                Method (GFXM, 0, NotSerialized)
                {
                    Local0 = NBMR (0x08)
                    Local0 &= 0x0F
                    Return (Local0)
                }

                Method (GPPM, 0, NotSerialized)
                {
                    Local0 = NBMR (0x67)
                    Local0 &= 0xF0
                    Return (Local0)
                }

                Method (GPPX, 0, NotSerialized)
                {
                    Local0 = NBMR (0x2D)
                    Local0 >>= 0x07
                    Local0 &= 0x0F
                    Return (Local0)
                }

                Method (XPTR, 2, NotSerialized)
                {
                    If (((Arg0 < 0x02) && (Arg0 > 0x07)))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Local0 = GPPM ()
                        Local1 = GPPX ()
                        Local0 = One
                        If ((Arg0 < 0x04))
                        {
                            Local1 = (Arg0 + 0x02)
                        }
                        Else
                        {
                            Local1 = (Arg0 + 0x11)
                        }

                        Local0 <<= Local1
                        Local2 = NBMR (0x08)
                        If (Arg1)
                        {
                            Local2 &= ~Local0
                        }
                        Else
                        {
                            Local2 |= Local0
                        }

                        NBMW (0x08, Local2)
                        Return (Ones)
                    }
                }

                Name (PX3L, 0x80000000)
                Name (PX3H, 0x80000000)
                Name (PX3S, 0x10000000)
                Name (PX3K, 0xF0000000)
                Mutex (BR3X, 0x00)
                Method (BR3M, 0, NotSerialized)
                {
                    Local0 = PARB /* \_SB_.PCI0.GNBD.PARB */
                    Local0 >>= 0x10
                    Local0 &= 0x07
                    If (Local0)
                    {
                        Local1 = (One << Local0)
                        Local1 -= 0x1000
                        Local1 <<= 0x14
                        PX3K = Local1
                        Local0 >>= 0x00100000
                        PX3S = Local0
                    }

                    Acquire (BR3X, 0xFFFF)
                    Local0 = NBMR (Zero)
                    Local0 &= 0xFFFFFFF7
                    NBMW (Zero, Local0)
                    Local0 = BR3L /* \_SB_.PCI0.GNBD.BR3L */
                    Local0 &= PX3K /* \_SB_.PCI0.GNBD.PX3K */
                    PX3L = Local0
                    Local0 = BR3H /* \_SB_.PCI0.GNBD.BR3H */
                    Local0 &= 0xFF
                    PX3H = Local0
                    Local0 = NBMR (Zero)
                    Local0 |= 0x08
                    NBMW (Zero, Local0)
                    Release (BR3X)
                    Return (PX3L) /* \_SB_.PCI0.GNBD.PX3L */
                }

                OperationRegion (NB2, PCI_Config, Zero, 0x0100)
                Field (NB2, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    MI,     32, 
                    MD,     32, 
                    Offset (0x94), 
                    HI,     32, 
                    HD,     32, 
                    Offset (0xE8), 
                    MCI,    32, 
                    MCD,    32
                }

                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y16)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y17)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GNBD.BROD._Y16._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GNBD.BROD._Y16._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.PCI0.GNBD.BROD._Y17._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GNBD.BROD._Y17._LEN, LEN2)  // _LEN: Length
                        MI = 0x3C
                        Local0 = MD /* \_SB_.PCI0.GNBD.MD__ */
                        If ((Local0 & 0x40))
                        {
                            MI = 0x3A
                            BAS1 = (MD & 0xFFFFFF00)
                            LEN1 = ((MD & 0xFF) << 0x17)
                        }

                        MCI = 0x11
                        Local1 = MCD /* \_SB_.PCI0.GNBD.MCD_ */
                        MCI = 0x12
                        Local2 = MCD /* \_SB_.PCI0.GNBD.MCD_ */
                        MCI = 0xF0
                        Local3 = MCD /* \_SB_.PCI0.GNBD.MCD_ */
                        If ((Local2 == Zero))
                        {
                            If ((Local3 != Zero))
                            {
                                BAS2 = Local1
                                LEN2 = (Local3 << 0x14)
                            }
                        }

                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (VGA)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x2C), 
                    SVID,   32, 
                    Offset (0x4C), 
                    SMID,   32
                }

                Scope (\)
                {
                    Mutex (PXPX, 0x00)
                }

                Name (DOSP, Zero)
                Name (BLVL, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x20, 0x30, 0x40, 0x50, 0x58, 0x60, 0x70,  /* . 0@PX`p */
                    /* 0008 */  0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xFF   /* ........ */
                })
                Name (UPDN, One)
                Name (NXTD, One)
                Name (LCDM, One)
                Name (CRTM, 0x02)
                Name (TVOM, 0x04)
                Name (DVIM, 0x08)
                Name (HDMM, 0x10)
                Name (PACH, Zero)
                Name (DONE, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    GETD ()
                }

                Name (DODP, Package (0x03)
                {
                    0x00010100, 
                    0x00010110, 
                    0xFFFF0010
                })
                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    If (!PACH)
                    {
                        Index (DODP, Match (DODP, MEQ, 0xFFFF0010, MTR, Zero, Zero)) = 0x0210
                        PACH = One
                    }

                    Return (DODP) /* \_SB_.PCI0.VGA_.DODP */
                }

                Name (PCTG, Package (0x0B) {})
                Name (DOSF, One)
                Name (BRNC, Zero)
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSF = (Arg0 & 0x03)
                    BRNC = (Arg0 >> 0x02)
                    BRNC &= One
                }

                Method (UPBL, 0, NotSerialized)
                {
                    LBTN &= 0x0F
                    If ((LBTN < 0x0F))
                    {
                        LBTN++
                        ^^SBRG.EC0.STBR ()
                        If (ATKP)
                        {
                            Notify (ATKD, (LBTN + 0x10))
                        }
                    }

                    Notify (LCD, 0x86) // Device-Specific
                    Notify (^^PCE2.VGA.LCD, 0x86) // Device-Specific
                }

                Method (DWBL, 0, NotSerialized)
                {
                    LBTN &= 0x0F
                    If ((LBTN > Zero))
                    {
                        LBTN--
                        ^^SBRG.EC0.STBR ()
                    }

                    If (ATKP)
                    {
                        Notify (ATKD, (LBTN + 0x20))
                    }

                    Notify (LCD, 0x87) // Device-Specific
                    Notify (^^PCE2.VGA.LCD, 0x87) // Device-Specific
                }

                Method (VGAD, 0, NotSerialized)
                {
                    Notify (LCD, 0x86) // Device-Specific
                    Notify (^^PCE2.VGA.LCD, 0x86) // Device-Specific
                }

                Method (GCBL, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 &= 0x7FFFFFFF
                    While ((Local0 < 0x0B))
                    {
                        Local1 = DerefOf (Index (PCTG, Local0))
                        If ((Local1 <= Arg0))
                        {
                            Break
                        }

                        Local0++
                    }

                    If ((Local0 >= 0x0B))
                    {
                        Local2 = 0x0A
                    }
                    Else
                    {
                        Local2 = Local0
                    }

                    Return (Local2)
                }

                Device (LCD)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x0110)
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Local0 = AVLD /* \_SB_.AVLD */
                        If (Local0)
                        {
                            If ((Local0 & LCDM))
                            {
                                Return (0x1F)
                            }
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Local0 = (NXTD & LCDM) /* \_SB_.PCI0.VGA_.LCDM */
                        If (Local0)
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & 0x40000000))
                        {
                            If ((Arg0 & 0x80000000))
                            {
                                DONE = One
                            }
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Local0 = Zero
                        Local4 = BRTI /* \_SB_.BRTI */
                        Local4 <<= 0x04
                        While ((Local0 < 0x0B))
                        {
                            Local3 = (0x0B - Local0)
                            Local3 -= One
                            Local3 = (Local4 + Local3)
                            Local1 = DerefOf (Index (^^^SBRG.EC0.PWAC, Local3))
                            Local2 = ((Local1 * 0x64) / 0xFF)
                            Index (PCTG, Local0) = Local2
                            Local0++
                        }

                        Return (PCTG) /* \_SB_.PCI0.VGA_.PCTG */
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Return (LBTN) /* \_SB_.LBTN */
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        If ((AF7E == 0x80000001))
                        {
                            Divide (((Arg0 * 0x03) + 0x13), 0x14, Local1, Local0)
                            Local3 = DerefOf (Index (BLVL, Local0))
                            AFN7 (Local3)
                        }
                        Else
                        {
                            Local0 = GCBL (Arg0)
                            LBTN = (0x0A - Local0)
                            ^^^SBRG.EC0.STBR ()
                        }
                    }
                }

                Method (PRST, 0, NotSerialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ADVD, 0, NotSerialized)
                {
                    If (UPDN)
                    {
                        UPDN = Zero
                        ^^SBRG.EC0.SPIN (0x11, Zero)
                        GETD ()
                        Sleep (One)
                        ^^SBRG.EC0.SPIN (0x11, One)
                        SETD = ACTD /* \_SB_.ACTD */
                    }

                    GNDD ()
                    Sleep (One)
                    NXTD = SETD /* \_SB_.SETD */
                    Return (SETD) /* \_SB_.SETD */
                }

                Method (SWHD, 1, Serialized)
                {
                    UPDN = One
                    If ((DOSF == One))
                    {
                        SETD = Arg0
                        ISMI (0x94)
                    }
                    Else
                    {
                        NXTD = Arg0
                        SETD = Arg0
                        DONE = Zero
                        Notify (VGA, 0x80) // Status Change
                    }
                }

                Method (SWAF, 1, Serialized)
                {
                    UPDN = One
                    NXTD = Arg0
                    SETD = Arg0
                    DONE = Zero
                    Notify (VGA, 0x80) // Status Change
                }

                Method (NATK, 0, NotSerialized)
                {
                    Return (One)
                }

                Method (GETD, 0, NotSerialized)
                {
                    ISMI (0x95)
                    Return (ACTD) /* \_SB_.ACTD */
                }

                Method (GNDD, 0, NotSerialized)
                {
                    ISMI (0xA0)
                    Return (SETD) /* \_SB_.SETD */
                }

                Device (CRTD)
                {
                    Name (_ADR, 0x0100)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Local0 = AVLD /* \_SB_.AVLD */
                        If (Local0)
                        {
                            If ((Local0 & CRTM))
                            {
                                Return (0x1F)
                            }
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Local0 = (NXTD & CRTM) /* \_SB_.PCI0.VGA_.CRTM */
                        If (Local0)
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & 0x40000000))
                        {
                            If ((Arg0 & 0x80000000))
                            {
                                DONE = One
                            }
                        }
                    }
                }

                Device (HDMI)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x0210)
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Local0 = AVLD /* \_SB_.AVLD */
                        If (Local0)
                        {
                            If ((Local0 & HDMM))
                            {
                                Return (0x1F)
                            }
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Local0 = (NXTD & HDMM) /* \_SB_.PCI0.VGA_.HDMM */
                        If (Local0)
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & 0x40000000))
                        {
                            If ((Arg0 & 0x80000000))
                            {
                                DONE = One
                            }
                        }
                    }
                }
            }

            Device (PCE2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (XPEX, SystemMemory, 0xE0010100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    Local0 = Zero
                    If ((VC0S & 0x00020000))
                    {
                        Local0 = Ones
                    }

                    Return (Local0)
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PCE2.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PCE2._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Local1 = Zero
                    Local0 = XPPB ()
                    If ((0x04 > Local0))
                    {
                        Local1 = Zero
                    }

                    If ((0x08 > Local0))
                    {
                        Local1 = 0x00010000
                    }

                    If ((0x0B > Local0))
                    {
                        Local1 = 0x00020000
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Local0 = XPPB ()
                    Local2 = ^^GNBD.GPPX ()
                    Local3 = ^^GNBD.GFXM ()
                    Local1 = Zero
                    If ((0x10 == Local0))
                    {
                        Local1 = 0xFFFF
                        If (Local3)
                        {
                            Local1 = 0x0F0F
                        }
                    }

                    If ((0x18 == Local0))
                    {
                        Local1 = 0xF0F0
                    }

                    If ((0x20 == Local0))
                    {
                        Local1 = 0x1010
                    }

                    If ((0x28 == Local0))
                    {
                        Local1 = 0x2020
                    }

                    If ((0x30 == Local0))
                    {
                        Local1 = 0x4040
                    }

                    If ((0x38 == Local0))
                    {
                        Local1 = 0x8080
                    }

                    If ((0x48 == Local0))
                    {
                        Local1 = Zero
                        If ((0x02 == Local2))
                        {
                            Local1 = 0x0303
                        }

                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0101
                        }
                    }

                    If ((0x50 == Local0))
                    {
                        Local1 = Zero
                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0202
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Local1 = XPPD ()
                    If ((Zero != Local1))
                    {
                        Local2 = ^^GNBD.NBXR ((0x65 + XPCN ()))
                        If (Arg0)
                        {
                            Local2 &= ~Local1
                        }
                        Else
                        {
                            Local2 |= Local1
                        }

                        ^^GNBD.NBXW ((0x65 + XPCN ()), Local2)
                    }
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PCE2.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PCE2.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPLL, 1, NotSerialized)
                {
                    Local0 = ^^GNBD.GFXM ()
                    Local1 = XPPB ()
                    Local2 = Zero
                    If ((0x10 == Local1))
                    {
                        Local2 = One
                        Local3 = 0x00770070
                        If (Local0)
                        {
                            Local3 = 0x00330030
                        }
                    }

                    If (((0x18 == Local1) && Local0))
                    {
                        Local2 = One
                        Local3 = 0x00440040
                    }

                    Local0 = ^^GNBD.NBMR (0x07)
                    Local1 = ^^GNBD.NBXR (0x65)
                    If ((Local0 && 0x0201F000))
                    {
                        Local4 = 0x00440040
                        Local5 = Local4
                        If ((~Local1 && 0xF0F0))
                        {
                            Local5 = Zero
                        }
                    }
                    Else
                    {
                        Local4 = 0x00110010
                        Local5 = Local4
                        If ((~Local1 && 0x0F0F))
                        {
                            Local5 = Zero
                        }
                    }

                    If (Local2)
                    {
                        Local6 = (Local3 | Local4)
                        Local0 = (Local5 & Local4)
                        Local7 = (Local3 | Local0)
                        Local0 = ^^GNBD.NBMR (0x2E)
                        If (Arg0)
                        {
                            Local0 &= ~Local6
                        }
                        Else
                        {
                            Local0 |= Local7
                        }

                        ^^GNBD.NBMW (0x2E, Local0)
                    }
                }

                Method (XPPR, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        XPLL (One)
                        XPLP (One)
                        Sleep (0xC8)
                        ^^GNBD.XPTR ((XPPB () << 0x03), One)
                        Sleep (0x14)
                    }
                    Else
                    {
                        ^^GNBD.XPTR ((XPPB () << 0x03), Zero)
                        XPLP (Zero)
                        XPLL (Zero)
                    }

                    Return (Ones)
                }

                Device (VGA)
                {
                    Name (PCTG, Package (0x0B) {})
                    Name (DOSF, One)
                    Name (BRNC, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSF = (Arg0 & 0x03)
                        BRNC = (Arg0 >> 0x02)
                        BRNC &= One
                    }

                    Method (UPBL, 0, NotSerialized)
                    {
                        LBTN &= 0x0F
                        If ((LBTN < 0x0F))
                        {
                            LBTN++
                            ^^^SBRG.EC0.STBR ()
                            If (ATKP)
                            {
                                Notify (ATKD, (LBTN + 0x10))
                            }
                        }

                        Notify (^^^VGA.LCD, 0x86) // Device-Specific
                        Notify (LCD, 0x86) // Device-Specific
                    }

                    Method (DWBL, 0, NotSerialized)
                    {
                        LBTN &= 0x0F
                        If ((LBTN > Zero))
                        {
                            LBTN--
                            ^^^SBRG.EC0.STBR ()
                        }

                        If (ATKP)
                        {
                            Notify (ATKD, (LBTN + 0x20))
                        }

                        Notify (^^^VGA.LCD, 0x87) // Device-Specific
                        Notify (LCD, 0x87) // Device-Specific
                    }

                    Method (VGAD, 0, NotSerialized)
                    {
                        Notify (^^^VGA.LCD, 0x86) // Device-Specific
                        Notify (LCD, 0x86) // Device-Specific
                    }

                    Method (GCBL, 1, NotSerialized)
                    {
                        Local0 = Zero
                        Arg0 &= 0x7FFFFFFF
                        While ((Local0 < 0x0B))
                        {
                            Local1 = DerefOf (Index (PCTG, Local0))
                            If ((Local1 <= Arg0))
                            {
                                Break
                            }

                            Local0++
                        }

                        If ((Local0 >= 0x0B))
                        {
                            Local2 = 0x0A
                        }
                        Else
                        {
                            Local2 = Local0
                        }

                        Return (Local2)
                    }

                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSP, Zero)
                    Name (BLVL, Buffer (0x10)
                    {
                        /* 0000 */  0x00, 0x20, 0x30, 0x40, 0x50, 0x58, 0x60, 0x70,  /* . 0@PX`p */
                        /* 0008 */  0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xFF   /* ........ */
                    })
                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Method (PRST, 0, NotSerialized)
                    {
                        Local3 = LKST /* \_SB_.PCI0.PCE2.LKST */
                        If ((Local3 && One))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Device (LCD)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x0110)
                        }

                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Local0 = Zero
                            Local4 = BRTI /* \_SB_.BRTI */
                            Local4 <<= 0x04
                            While ((Local0 < 0x0B))
                            {
                                Local3 = (0x0B - Local0)
                                Local3 -= One
                                Local3 = (Local4 + Local3)
                                Local1 = DerefOf (Index (^^^^SBRG.EC0.PWAC, Local3))
                                Local2 = ((Local1 * 0x64) / 0xFF)
                                Index (PCTG, Local0) = Local2
                                Local0++
                            }

                            Return (PCTG) /* \_SB_.PCI0.PCE2.VGA_.PCTG */
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            Return (LBTN) /* \_SB_.LBTN */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((^^^^VGA.AF7E == 0x80000001))
                            {
                                Divide (((Arg0 * 0x03) + 0x13), 0x14, Local1, Local0)
                                Local3 = DerefOf (Index (BLVL, Local0))
                                ^^^^VGA.AFN7 (Local3)
                            }
                            Else
                            {
                                Local0 = GCBL (Arg0)
                                LBTN = (0x0A - Local0)
                                ^^^^SBRG.EC0.STBR ()
                            }
                        }
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }
                }

                Method (XPDT, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        Local0 = Zero
                        Local2 = Zero
                        While ((Local2 < 0x0F))
                        {
                            PDC2 = One
                            Local4 = One
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                Local6 = XPRD (0xA5)
                                Local6 &= 0x7F
                                If (((Local6 >= 0x10) && (Local6 != 0x7F)))
                                {
                                    Local4 = Zero
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                Local5 = XPDL ()
                                If (Local5)
                                {
                                    XPRT ()
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    INFO = (XPPB () << 0x03)
                                    BCMD = 0x87
                                    ^^SBRG.SMIC = Zero
                                    If ((XPR2 () == Ones))
                                    {
                                        Local0 = One
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        Local0 = Zero
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!Local0)
                        {
                            XPDT (Zero)
                            XPPR (Zero)
                            Return (Zero)
                        }

                        Return (Ones)
                    }
                    Else
                    {
                        PDC2 = One
                        Local7 = ^VGA.DVID /* \_SB_.PCI0.PCE2.VGA_.DVID */
                        Sleep (0x0A)
                        Local4 = One
                        Local5 = 0x05
                        While ((Local4 && Local5))
                        {
                            Local6 = XPRD (0xA5)
                            Local6 &= 0x7F
                            If ((Local6 <= 0x04))
                            {
                                Local4 = Zero
                            }
                            Else
                            {
                                Local7 = ^VGA.DVID /* \_SB_.PCI0.PCE2.VGA_.DVID */
                                Sleep (0x05)
                                Local5--
                            }
                        }

                        Return (Ones)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }
            }

            Device (PCE5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x12, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PR05 */
                }

                Device (GLAN)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                    OperationRegion (LANR, PCI_Config, Zero, 0x0100)
                    Field (LANR, ByteAcc, NoLock, Preserve)
                    {
                        VID,    16, 
                        Offset (0xE0), 
                            ,   15, 
                        PMES,   1
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x12, 0x04))
                    }
                }
            }

            Device (PCE6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PR03) /* \_SB_.PR03 */
                }

                Device (WLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (MINP, PCI_Config, Zero, 0x68)
                    Field (MINP, ByteAcc, NoLock, Preserve)
                    {
                        VNUM,   32, 
                        Offset (0x09), 
                        PINF,   8, 
                        SBCC,   8, 
                        BSCC,   8, 
                        Offset (0x2C), 
                        SNUM,   32, 
                        Offset (0x34)
                    }

                    Method (MPDP, 0, NotSerialized)
                    {
                        If ((SNUM == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }

                        If ((BSCC != 0x02))
                        {
                            Return (Zero)
                        }

                        Return (One)
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (OHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (OHC2)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (OHC3)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (OHC4)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                OperationRegion (USEH, PCI_Config, Zero, 0x20)
                Field (USEH, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    EBR0,   32
                }

                OperationRegion (EHMP, SystemMemory, EBR0, 0x0100)
                Field (EHMP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x70), 
                    P4S0,   8, 
                    P4S1,   8, 
                    P4S2,   8, 
                    P4S3,   8, 
                    P5S0,   8, 
                    P5S1,   8, 
                    P5S2,   8, 
                    P5S3,   8
                }

                Method (BTPS, 0, NotSerialized)
                {
                    If (!(BRST & One))
                    {
                        If (BTLT)
                        {
                            BTDP = One
                        }
                    }

                    If (BRST)
                    {
                        If (BTLT)
                        {
                            BTDP = One
                            Sleep (0x0A)
                            If ((P4S1 == 0x10))
                            {
                                If ((P5S1 == 0x10))
                                {
                                    BTDP = Zero
                                }
                            }
                        }
                    }

                    If ((BTDP == Zero))
                    {
                        SGPL (0xC2, Zero)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (EHC3)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (XHC0)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.SBAZ, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.P0PC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.XHC1, 0x02) // Device Wake
                Notify (\_SB.PCI0.OHC1, 0x02) // Device Wake
                Notify (\_SB.PCI0.OHC2, 0x02) // Device Wake
                Notify (\_SB.PCI0.OHC3, 0x02) // Device Wake
                Notify (\_SB.PCI0.OHC4, 0x02) // Device Wake
                Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
                Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
                Notify (\_SB.PCI0.EHC3, 0x02) // Device Wake
                Notify (\_SB.PCI0.XHC0, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L12, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.PCE5, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE5.GLAN, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x10), 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x15), 
            GEC,    8, 
            Offset (0x30), 
            USB1,   8, 
            USB2,   8, 
            USB3,   8, 
            USB4,   8, 
            USB5,   8, 
            USB6,   8, 
            USB7,   8, 
            Offset (0x40), 
            IDE,    8, 
            SATA,   8, 
            Offset (0x50), 
            GPP0,   8, 
            GPP1,   8, 
            GPP2,   8, 
            GPP3,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (IRQC, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
            GEC = Arg0
            GPP0 = Arg0
            GPP0 = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
            USB2 = Arg0
            USB4 = Arg0
            USB6 = Arg0
            GPP1 = Arg0
            IDE = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
            USB5 = Arg0
            USB7 = Arg0
            GPP2 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
            GPP3 = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    OperationRegion (EXBU, SystemMemory, 0x9FA49018, 0x1015)
    Field (EXBU, AnyAcc, Lock, Preserve)
    {
        XID,    8, 
        FADR,   32, 
        FSIZ,   16, 
        FSTA,   16, 
        FSFN,   8, 
        BAML,   8, 
        BIPA,   32, 
        AMLA,   32, 
        RTCW,   16, 
        AMLB,   32768
    }

    Scope (_SB.PCI0.SBRG)
    {
        Method (RGPM, 0, NotSerialized)
        {
            Local0 = GPXC /* \GPXC */
            Local0 &= 0xFFFFFFFFFFFFFF3F
            GPXC = Local0
            Local1 = CLGP /* \CLGP */
            Return (Local1)
        }
    }

    Scope (\)
    {
        OperationRegion (LCLM, SystemIO, 0x0C50, 0x03)
        Field (LCLM, ByteAcc, NoLock, Preserve)
        {
            CLMI,   8, 
            CLMD,   8, 
            CLGP,   8
        }

        IndexField (CLMI, CLMD, ByteAcc, NoLock, Preserve)
        {
            IDRG,   8, 
            Offset (0x02), 
            TSTS,   8, 
            TINT,   8, 
            Offset (0x12), 
            I2CC,   8, 
            GPXC,   8
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Name (CRS, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED00000,         // Address Base
                0x00000400,         // Address Length
                _Y18)
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateDWordField (CRS, \HPET._Y18._BAS, HPT)  // _BAS: Base Address
            HPT = 0xFED00000
            Return (CRS) /* \HPET.CRS_ */
        }
    }

    Scope (_PR)
    {
        OperationRegion (SSDT, SystemMemory, 0xFFFF0000, 0xFFFF)
        Name (DCOR, 0x02)
        Name (TBLD, 0x04)
        Name (NPSS, 0x05)
        Name (HNDL, 0x80000000)
        Name (APSS, Package (0x0A)
        {
            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }
        })
        Processor (P000, 0x01, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P000._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P001, 0x02, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P001._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P002, 0x03, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P002._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P003, 0x04, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P003._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                If (((SUPP & 0x16) != 0x16))
                {
                    (CTRL & 0x1E)
                }

                If (!PEHP)
                {
                    CTRL &= 0x1E
                }

                If (!SHPC)
                {
                    CTRL &= 0x1D
                }

                If (!PEPM)
                {
                    CTRL &= 0x1B
                }

                If (!PEER)
                {
                    CTRL &= 0x15
                }

                If (!PECS)
                {
                    CTRL &= 0x0F
                }

                If (OSCF)
                {
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)) {}
                        If ((CTRL & 0x04))
                        {
                            EPNM = One
                        }
                        Else
                        {
                            EPNM = Zero
                        }

                        If ((CTRL & 0x10)) {}
                    }
                }

                If ((Arg1 != One))
                {
                    CDW1 |= 0x08
                }

                If ((CDW3 != CTRL))
                {
                    CDW1 |= 0x10
                }

                CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                Return (Arg3)
            }
            Else
            {
                CDW1 |= 0x04
                Return (Arg3)
            }
        }
    }

    Scope (_SB.PCI0.VGA)
    {
        Name (PXEN, 0x80000001)
        Name (PXID, 0x00020000)
        Name (PXMX, 0x80000001)
        Name (LCDT, 0x80000000)
        Name (DSCT, 0x80000000)
        Name (AF7E, 0x80000000)
        Name (PXDY, 0x80000001)
        Name (PXFX, 0x80000000)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Scope (\_SB.PCI0.VGA)
        {
            Name (ATIB, Buffer (0x0100) {})
            Method (ATIF, 2, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (AF00 ())
                }

                If ((Arg0 == One))
                {
                    Return (AF01 ())
                }

                If ((Arg0 == 0x02))
                {
                    Return (AF02 ())
                }

                If ((Arg0 == 0x03))
                {
                    Return (AF03 (DerefOf (Index (Arg1, 0x02)), DerefOf (Index (Arg1, 0x04))))
                }

                If ((Arg0 == 0x0F))
                {
                    Return (AF15 ())
                }
                Else
                {
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateWordField (ATIB, 0x02, VERN)
                    CreateDWordField (ATIB, 0x04, NMSK)
                    CreateDWordField (ATIB, 0x08, SFUN)
                    SSZE = Zero
                    VERN = Zero
                    NMSK = Zero
                    SFUN = Zero
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }
            }

            Method (AF00, 0, NotSerialized)
            {
                P80H = 0xF0
                CreateWordField (ATIB, Zero, SSZE)
                CreateWordField (ATIB, 0x02, VERN)
                CreateDWordField (ATIB, 0x04, NMSK)
                CreateDWordField (ATIB, 0x08, SFUN)
                SSZE = 0x0C
                VERN = One
                If ((G1CI == One))
                {
                    G1EO = One
                }
                Else
                {
                    G1EO = Zero
                }

                If ((PXEN == 0x80000000))
                {
                    NMSK = 0x11
                }
                Else
                {
                    NMSK = 0x51
                }

                MSKN = NMSK /* \_SB_.PCI0.VGA_.AF00.NMSK */
                SFUN = 0x07
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Name (NCOD, 0x81)
            Method (AF01, 0, NotSerialized)
            {
                P80H = 0xF1
                CreateWordField (ATIB, Zero, SSZE)
                CreateDWordField (ATIB, 0x02, VMSK)
                CreateDWordField (ATIB, 0x06, FLGS)
                SSZE = 0x0A
                VMSK = 0x0B
                SSZE = 0x0A
                FLGS = 0x0B
                NCOD = 0x81
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Name (PSBR, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Name (MSKN, Zero)
            Name (SEXM, Zero)
            Name (STHG, Zero)
            Name (STHI, Zero)
            Name (SFPG, Zero)
            Name (SFPI, Zero)
            Name (SSPS, Zero)
            Name (SSDM, 0x0A)
            Name (SCDY, Zero)
            Name (SACT, Buffer (0x07)
            {
                 0x01, 0x02, 0x08, 0x80, 0x03, 0x09, 0x81         /* ....... */
            })
            Method (AF02, 0, NotSerialized)
            {
                P80H = 0xF2
                CreateBitField (PSBR, Zero, PDSW)
                CreateBitField (PSBR, One, PEXM)
                CreateBitField (PSBR, 0x02, PTHR)
                CreateBitField (PSBR, 0x03, PFPS)
                CreateBitField (PSBR, 0x04, PSPS)
                CreateBitField (PSBR, 0x05, PDCC)
                CreateBitField (PSBR, 0x06, PXPS)
                CreateWordField (ATIB, Zero, SSZE)
                CreateDWordField (ATIB, 0x02, PSBI)
                CreateByteField (ATIB, 0x06, EXPM)
                CreateByteField (ATIB, 0x07, THRM)
                CreateByteField (ATIB, 0x08, THID)
                CreateByteField (ATIB, 0x09, FPWR)
                CreateByteField (ATIB, 0x0A, FPID)
                CreateByteField (ATIB, 0x0B, SPWR)
                SSZE = 0x0C
                PSBI = PSBR /* \_SB_.PCI0.VGA_.PSBR */
                If (PDSW)
                {
                    P80H = 0x82
                    PDSW = Zero
                }

                If (PEXM)
                {
                    EXPM = SEXM /* \_SB_.PCI0.VGA_.SEXM */
                    SEXM = Zero
                    PEXM = Zero
                }

                If (PTHR)
                {
                    THRM = STHG /* \_SB_.PCI0.VGA_.STHG */
                    THID = STHI /* \_SB_.PCI0.VGA_.STHI */
                    STHG = Zero
                    STHI = Zero
                    PTHR = Zero
                }

                If (PFPS)
                {
                    FPWR = SFPG /* \_SB_.PCI0.VGA_.SFPG */
                    FPWR = SFPI /* \_SB_.PCI0.VGA_.SFPI */
                    SFPG = Zero
                    SFPI = Zero
                    PFPS = Zero
                }

                If (PSPS)
                {
                    SPWR = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                    PSPS = Zero
                }

                If (PXPS)
                {
                    P80H = 0xA2
                    PXPS = Zero
                }

                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Method (AF03, 2, NotSerialized)
            {
                P80H = 0xF3
                CreateWordField (ATIB, Zero, SSZE)
                CreateWordField (ATIB, 0x02, SSDP)
                CreateWordField (ATIB, 0x04, SCDP)
                SSDP = Arg0
                SCDP = Arg1
                Name (NXTD, 0x06)
                Name (CIDX, 0x06)
                Local1 = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                Local1 &= 0x8B
                Local2 = SCDP /* \_SB_.PCI0.VGA_.AF03.SCDP */
                If (CondRefOf (\_SB.LID._LID, Local4))
                {
                    Local2 &= 0xFFFFFFFFFFFFFFFE
                    Local2 |= Local4
                }
                Else
                {
                    Local2 |= One
                }

                P80H = Local2
                Local0 = Zero
                While ((Local0 < SizeOf (SACT)))
                {
                    Local3 = DerefOf (Index (SACT, Local0))
                    If ((Local3 == Local1))
                    {
                        CIDX = Local0
                        Local0 = SizeOf (SACT)
                    }
                    Else
                    {
                        Local0++
                    }
                }

                Local0 = CIDX /* \_SB_.PCI0.VGA_.AF03.CIDX */
                While ((Local0 < SizeOf (SACT)))
                {
                    Local0++
                    If ((Local0 == SizeOf (SACT)))
                    {
                        Local0 = Zero
                    }

                    Local3 = DerefOf (Index (SACT, Local0))
                    If (((Local3 & Local2) == Local3))
                    {
                        NXTD = Local0
                        Local0 = SizeOf (SACT)
                    }
                }

                If ((NXTD == SizeOf (SACT)))
                {
                    SSDP = Zero
                }
                Else
                {
                    Local0 = NXTD /* \_SB_.PCI0.VGA_.AF03.NXTD */
                    Local3 = DerefOf (Index (SACT, Local0))
                    SSDP &= 0xFFFFFFFFFFFFFFF4
                    SSDP |= Local3
                }

                SSZE = 0x04
                P80H = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Method (AFN0, 0, Serialized)
            {
                If ((MSKN & One))
                {
                    CreateBitField (PSBR, Zero, PDSW)
                    PDSW = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN3, 2, Serialized)
            {
                If ((MSKN & 0x08))
                {
                    Local0 = Arg0
                    SFPI = Local0
                    Local0 = Arg1
                    SFPG = Local0 &= 0x03
                    CreateBitField (PSBR, 0x03, PFPS)
                    PFPS = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN4, 1, Serialized)
            {
                If ((MSKN & 0x10))
                {
                    Local0 = Arg0
                    Local1 = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                    SSPS = Local0
                    If ((Local0 == Local1)) {}
                    Else
                    {
                        CreateBitField (PSBR, 0x04, PSPS)
                        PSPS = One
                        Notify (VGA, NCOD)
                    }
                }
            }

            Method (AFN5, 0, Serialized)
            {
                If ((MSKN & 0x20))
                {
                    CreateBitField (PSBR, 0x05, PDCC)
                    PDCC = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN6, 0, Serialized)
            {
                If ((MSKN & 0x40))
                {
                    CreateBitField (PSBR, 0x06, PXPS)
                    PXPS = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN7, 1, Serialized)
            {
                If ((MSKN & 0x80))
                {
                    CreateBitField (PSBR, 0x07, PBRT)
                    PBRT = One
                    CreateByteField (ATIB, 0x0C, BRTL)
                    BRTL = Arg0
                    Notify (VGA, NCOD)
                }
            }

            Method (AF15, 0, NotSerialized)
            {
                P80H = 0xFF
                CreateWordField (ATIB, Zero, DNUM)
                CreateWordField (ATIB, 0x02, DSZE)
                DSZE = 0x08
                BCMD = 0x8D
                DID = 0x0F
                INFO = ATIB /* \_SB_.PCI0.VGA_.ATIB */
                ^^SBRG.SMIC = ATIS /* \ATIS */
                ATIB = INFO /* \INFO */
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Name (AT00, Buffer (0xFF) {})
            Name (AT01, Buffer (0x03) {})
            Method (ATCS, 2, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    ATC0 ()
                }

                If ((Arg0 == One))
                {
                    ATC1 ()
                }

                If ((Arg0 == 0x02))
                {
                    ATC2 (Arg1)
                }

                If ((Arg0 == 0x03))
                {
                    ATC3 ()
                }

                If ((Arg0 == 0x04))
                {
                    ATC4 (Arg1)
                }

                Return (AT00) /* \_SB_.PCI0.VGA_.AT00 */
            }

            Method (ATC0, 0, NotSerialized)
            {
                CreateWordField (AT00, Zero, SZZE)
                CreateWordField (AT00, 0x02, INTF)
                CreateDWordField (AT00, 0x04, SUPP)
                SZZE = 0x08
                INTF = One
                SUPP = 0x0F
            }

            Method (ATC1, 0, Serialized)
            {
                CreateWordField (AT00, Zero, SZZE)
                CreateDWordField (AT00, 0x02, VFMK)
                CreateDWordField (AT00, 0x06, FLAG)
                CreateField (AT00, 0x30, One, DOCK)
                SZZE = 0x0A
                VFMK = One
                FLAG = Zero
                DOCK = One
            }

            Method (ATC2, 1, Serialized)
            {
                CreateField (Arg0, 0x10, 0x03, FUCC)
                CreateField (Arg0, 0x13, 0x06, DEVV)
                CreateByteField (Arg0, 0x03, BUSS)
                CreateDWordField (Arg0, 0x04, VFMK)
                CreateDWordField (Arg0, 0x06, FLAG)
                CreateField (Arg0, 0x30, One, ADVC)
                CreateField (Arg0, 0x31, One, WFCM)
                CreateByteField (Arg0, 0x08, RQST)
                CreateByteField (Arg0, 0x09, PFRQ)
                CreateWordField (AT00, Zero, SZZE)
                CreateByteField (AT00, 0x02, RETV)
                SZZE = 0x03
                RETV = One
                AT00 = ALIB (0x02, Arg0)
            }

            Method (ATC3, 0, Serialized)
            {
                CreateWordField (AT00, Zero, SZZE)
                CreateByteField (AT00, 0x02, RETV)
                CreateWordField (AT01, Zero, SZZB)
                CreateByteField (AT01, 0x02, PSPP)
                SZZE = 0x03
                RETV = One
                SZZB = 0x03
                PSPP = One
                AT00 = ALIB (0x03, AT01)
            }

            Method (ATC4, 1, Serialized)
            {
                CreateField (Arg0, 0x10, 0x03, FUCC)
                CreateField (Arg0, 0x13, 0x06, DEVV)
                CreateByteField (Arg0, 0x03, BUSS)
                CreateByteField (Arg0, 0x04, NULN)
                CreateWordField (AT00, Zero, SZZE)
                CreateByteField (AT00, 0x02, NULM)
                SZZE = 0x03
                NULM = One
                AT00 = ALIB (0x04, Arg0)
            }
        }

        Name (ATPB, Buffer (0x0100) {})
        Name (DSID, 0xFFFFFFFF)
        Name (HSID, 0xFFFFFFFF)
        Name (CNT0, Buffer (0x05)
        {
             0x05, 0x00, 0x00, 0x10, 0x01                     /* ..... */
        })
        Name (CNT1, Buffer (0x05)
        {
             0x05, 0x01, 0x00, 0x00, 0x01                     /* ..... */
        })
        Name (CNT2, Buffer (0x05)
        {
             0x07, 0x03, 0x00, 0x10, 0x02                     /* ..... */
        })
        Name (CNT3, Buffer (0x05)
        {
             0x07, 0x07, 0x00, 0x20, 0x02                     /* ... . */
        })
        Name (CNT4, Buffer (0x05)
        {
             0x00, 0x09, 0x00, 0x30, 0x02                     /* ...0. */
        })
        Name (CNT5, Buffer (0x05)
        {
             0x01, 0x00, 0x01, 0x10, 0x01                     /* ..... */
        })
        Name (CNT6, Buffer (0x05)
        {
             0x01, 0x01, 0x01, 0x00, 0x01                     /* ..... */
        })
        Name (CNT7, Buffer (0x05)
        {
             0x03, 0x03, 0x01, 0x10, 0x02                     /* ..... */
        })
        Name (CNT8, Buffer (0x05)
        {
             0x03, 0x07, 0x01, 0x20, 0x02                     /* ... . */
        })
        Name (CNT9, Buffer (0x05)
        {
             0x00, 0x09, 0x01, 0x30, 0x02                     /* ...0. */
        })
        OperationRegion (REVD, SystemMemory, 0x9F9E611D, 0x0000F004)
        Field (REVD, AnyAcc, NoLock, Preserve)
        {
            SROM,   32, 
            VROM,   491520
        }

        Name (TVGA, Buffer (0xF000)
        {
             0x00                                             /* . */
        })
        Method (ATRM, 2, Serialized)
        {
            Local0 = (Arg0 + Arg1)
            If ((Local0 <= SROM))
            {
                Local1 = (Arg1 * 0x08)
                Local2 = (Arg0 * 0x08)
                TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                CreateField (TVGA, Local2, Local1, TEMP)
                Name (RETB, Buffer (Arg1) {})
                RETB = TEMP /* \_SB_.PCI0.VGA_.ATRM.TEMP */
                Return (RETB) /* \_SB_.PCI0.VGA_.ATRM.RETB */
            }
            Else
            {
                If ((Arg0 < SROM))
                {
                    Local3 = (SROM - Arg0)
                    Local1 = (Local3 * 0x08)
                    Local2 = (Arg0 * 0x08)
                    TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                    CreateField (TVGA, Local2, Local1, TEM)
                    Name (RETC, Buffer (Local3) {})
                    RETC = TEM /* \_SB_.PCI0.VGA_.ATRM.TEM_ */
                    Return (RETC) /* \_SB_.PCI0.VGA_.ATRM.RETC */
                }
                Else
                {
                    Name (RETD, Buffer (One) {})
                    Return (RETD) /* \_SB_.PCI0.VGA_.ATRM.RETD */
                }
            }
        }

        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Index (Arg1, 0x02)))
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Index (Arg1, 0x02)))
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Index (Arg1, 0x02)))
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, VERN)
            CreateDWordField (ATPB, 0x04, SFUN)
            SSZE = Zero
            VERN = Zero
            SFUN = Zero
            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX00, 0, NotSerialized)
        {
            P80H = 0xE0
            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, VERN)
            CreateDWordField (ATPB, 0x04, SFUN)
            SSZE = 0x08
            VERN = One
            If ((PXEN == 0x80000000))
            {
                SFUN = Zero
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((PXMX == 0x80000000))
            {
                SFUN = 0x018F
            }
            Else
            {
                SFUN = 0x0183
            }

            If ((PXDY == 0x80000001))
            {
                SFUN &= 0xFFFFFFFD
            }

            If (((PXDY == 0x80000001) && (PXFX == 0x80000001)))
            {
                SFUN |= 0x02
            }

            Local0 = ^^PCE2.VGA.SVID /* \_SB_.PCI0.PCE2.VGA_.SVID */
            Local1 = ^^PCE2.HDAU.SVID /* \_SB_.PCI0.PCE2.HDAU.SVID */
            If ((Local0 != 0xFFFFFFFF))
            {
                DSID = Local0
            }

            If ((Local1 != 0xFFFFFFFF))
            {
                HSID = Local1
            }

            If ((G1CI == One))
            {
                G1EO = One
            }
            Else
            {
                G1EO = Zero
            }

            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX01, 0, NotSerialized)
        {
            P80H = 0xE1
            CreateWordField (ATPB, Zero, SSZE)
            CreateDWordField (ATPB, 0x02, VMSK)
            CreateDWordField (ATPB, 0x06, FLGS)
            SSZE = 0x0A
            VMSK = 0xFF
            If ((PXMX == 0x80000000))
            {
                FLGS = 0x4B
            }
            Else
            {
                FLGS = Zero
                If ((PXDY == 0x80000001))
                {
                    FLGS |= 0x80
                }
            }

            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (ATPB, Zero, SSZE)
            CreateByteField (ATPB, 0x02, PWST)
            SSZE = 0x03
            Local7 = Buffer (0x05) {}
            CreateWordField (Local7, Zero, SZZE)
            CreateField (Local7, 0x10, 0x03, FUCC)
            CreateField (Local7, 0x13, 0x05, DEVV)
            CreateByteField (Local7, 0x03, BUSS)
            CreateByteField (Local7, 0x04, HPST)
            SZZE = 0x05
            BUSS = Zero
            FUCC = Zero
            Local6 = Buffer (0x04) {}
            CreateByteField (Local6, 0x02, HPOX)
            PWST = (Arg0 & One)
            Name (HPOK, Zero)
            If (PWST)
            {
                P80H = 0x11E2
                DPON ()
                HPOK = Zero
                Sleep (0x64)
                Sleep (0x64)
                DEVV = 0x02
                HPST = One
                Local6 = ALIB (0x06, Local7)
                Sleep (0x14)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    ^^PCE2.PDC2 = One
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = ^^PCE2.XPRD (0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = ^^PCE2.XPDL ()
                        If (Local5)
                        {
                            ^^PCE2.XPRT ()
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = Zero
                            If ((^^PCE2.XPR2 () == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    P80H = 0x13E2
                    Local1 = ^^PCE2.VGA.DVID /* \_SB_.PCI0.PCE2.VGA_.DVID */
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = ^^PCE2.XPRD (0xA5)
                        Local0 &= 0x7F
                        If ((Local0 <= 0x04))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local1 = ^^PCE2.VGA.DVID /* \_SB_.PCI0.PCE2.VGA_.DVID */
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    DEVV = 0x02
                    HPST = Zero
                    ALIB (0x06, Local7)
                }

                P80H = 0x14E2
            }
            Else
            {
                P80H = 0x02E2
                INFO = 0x20
                BCMD = 0x84
                ^^SBRG.SMIC = ATIS /* \ATIS */
                DPOF ()
                ^^PCE2.PDC2 = One
                Local1 = ^^PCE2.VGA.DVID /* \_SB_.PCI0.PCE2.VGA_.DVID */
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = ^^PCE2.XPRD (0xA5)
                    Local0 &= 0x7F
                    If ((Local0 <= 0x04))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = ^^PCE2.VGA.DVID /* \_SB_.PCI0.PCE2.VGA_.DVID */
                        Sleep (0x05)
                        Local5--
                    }
                }

                DEVV = 0x02
                HPST = Zero
                ALIB (0x06, Local7)
                HPOK = 0x02
                P80H = 0x04E2
            }

            If (HPOK)
            {
                If (((HPOK == One) && (DSID != 0xFFFFFFFF)))
                {
                    Local1 = DSID /* \_SB_.PCI0.VGA_.DSID */
                    ^^PCE2.VGA.SMID = Local1
                    Sleep (0x0A)
                    Local1 = HSID /* \_SB_.PCI0.VGA_.HSID */
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        ^^PCE2.HDAU.SMID = Local1
                    }

                    Sleep (0x0A)
                }

                Notify (PCE2, Zero) // Bus Check
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, DPSW)
            SSZE = 0x04
            DPSW = (Arg0 & One)
        }

        Method (PX04, 1, NotSerialized)
        {
            P80H = 0xE4
            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, ICSW)
            SSZE = 0x04
            ICSW = (Arg0 & One)
        }

        Method (PX08, 0, NotSerialized)
        {
            P80H = 0xE8
            CreateWordField (ATPB, Zero, CNUM)
            CreateWordField (ATPB, 0x02, CSSZ)
            CNUM = 0x0A
            CSSZ = 0x05
            CreateField (ATPB, 0x20, 0x28, CTI0)
            CTI0 = CNT0 /* \_SB_.PCI0.VGA_.CNT0 */
            CreateField (ATPB, 0x48, 0x28, CTI1)
            CTI1 = CNT1 /* \_SB_.PCI0.VGA_.CNT1 */
            CreateField (ATPB, 0x70, 0x28, CTI2)
            CreateByteField (CNT2, Zero, FLG2)
            If ((LCDT == 0x80000001))
            {
                If ((DSCT == 0x80000001))
                {
                    FLG2 = Zero
                }

                If ((DSCT == 0x80000002))
                {
                    FLG2 = 0x07
                }
            }

            CTI2 = CNT2 /* \_SB_.PCI0.VGA_.CNT2 */
            CreateField (ATPB, 0x98, 0x28, CTI3)
            CreateByteField (CNT3, Zero, FLG3)
            If ((LCDT == 0x80000000))
            {
                FLG3 = 0x07
            }

            If ((LCDT == 0x80000001))
            {
                FLG3 = Zero
                If ((DSCT == 0x80000002))
                {
                    FLG3 = Zero
                }
            }

            If ((LCDT == 0x80000002))
            {
                FLG3 = Zero
                If ((DSCT == 0x80000002))
                {
                    FLG3 = 0x07
                }
            }

            CTI3 = CNT3 /* \_SB_.PCI0.VGA_.CNT3 */
            CreateField (ATPB, 0xC0, 0x28, CTI4)
            CTI4 = CNT4 /* \_SB_.PCI0.VGA_.CNT4 */
            CreateField (ATPB, 0xE8, 0x28, CTI5)
            CTI5 = CNT5 /* \_SB_.PCI0.VGA_.CNT5 */
            CreateField (ATPB, 0x0110, 0x28, CTI6)
            CTI6 = CNT6 /* \_SB_.PCI0.VGA_.CNT6 */
            CreateField (ATPB, 0x0138, 0x28, CTI7)
            CreateByteField (CNT7, Zero, FLG7)
            If ((LCDT == 0x80000001))
            {
                If ((DSCT == 0x80000001))
                {
                    FLG7 = Zero
                }

                If ((DSCT == 0x80000002))
                {
                    FLG7 = Zero
                }
            }

            CTI7 = CNT7 /* \_SB_.PCI0.VGA_.CNT7 */
            CreateField (ATPB, 0x0160, 0x28, CTI8)
            CreateByteField (CNT8, Zero, FLG8)
            If ((LCDT == 0x80000000))
            {
                FLG8 = 0x07
            }

            If ((LCDT == 0x80000001))
            {
                FLG8 = Zero
            }

            If ((LCDT == 0x80000002))
            {
                FLG8 = Zero
            }

            If ((DSCT == 0x80000002))
            {
                FLG8 = 0x07
            }

            CTI8 = CNT8 /* \_SB_.PCI0.VGA_.CNT8 */
            CreateField (ATPB, 0x0188, 0x28, CTI9)
            CreateByteField (CNT9, Zero, FLG9)
            If ((DSCT == 0x80000002))
            {
                FLG9 = 0x07
            }

            CTI9 = CNT9 /* \_SB_.PCI0.VGA_.CNT9 */
            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX09, 0, NotSerialized)
        {
            P80H = 0xE9
            CreateWordField (ATPB, Zero, CNUM)
            CreateWordField (ATPB, 0x02, CSSZ)
            CNUM = Zero
            CSSZ = Zero
            CreateByteField (ATPB, 0x04, ATI0)
            CreateByteField (ATPB, 0x05, HPD0)
            CreateByteField (ATPB, 0x06, DDC0)
            ATI0 = Zero
            HPD0 = Zero
            DDC0 = Zero
            CreateByteField (ATPB, 0x07, ATI1)
            CreateByteField (ATPB, 0x08, HPD1)
            CreateByteField (ATPB, 0x09, DDC1)
            ATI1 = Zero
            HPD1 = Zero
            DDC1 = Zero
            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }
    }

    Method (DPON, 0, NotSerialized)
    {
        G2DO = Zero
        G2DE = Zero
        Sleep (0x0A)
        Sleep (0x0A)
        G2CO = Zero
        G2CE = Zero
        Sleep (0x0A)
        Sleep (0x0A)
        Sleep (0x64)
        G2CO = One
        G2CE = Zero
        G1CM = One
        While ((G1CI == Zero)) {}
        G1EO = One
        P80H = 0x12E2
    }

    Method (DPOF, 0, NotSerialized)
    {
        G2CO = Zero
        G2CE = Zero
        Sleep (0x0A)
        Sleep (0x0A)
        G2DO = One
        G2DE = Zero
        G1EO = Zero
        P80H = 0x03E2
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        If (((Arg0 == 0x04) && (OSFL () == 0x02)))
        {
            Sleep (0x0BB8)
        }

        PTS (Arg0)
        Index (WAKP, Zero) = Zero
        Index (WAKP, One) = Zero
        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        AAXB = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (Index (WAKP, Zero)))
        {
            Index (WAKP, One) = Zero
        }
        Else
        {
            Index (WAKP, One) = Arg0
        }

        Return (WAKP) /* \WAKP */
    }

    Device (OMSC)
    {
        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
        Name (_UID, 0x0E11)  // _UID: Unique ID
    }

    Device (_SB.RMEM)
    {
        Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x0B, 
                    0x04
                })
            }
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = One
                Local0 = ^^PCI0.SBRG.EC0.RPIN (0x06)
                If ((Local0 == Ones))
                {
                    Local0 = One
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            Name (_GPE, 0x03)  // _GPE: General Purpose Events
            Mutex (MUEC, 0x00)
            Mutex (MU4T, 0x00)
            Mutex (ASIO, 0x00)
            Name (ECFL, Ones)
            Method (ECAV, 0, NotSerialized)
            {
                If ((ECFL == Ones))
                {
                    If ((_REV >= 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (ECFL) /* \_SB_.PCI0.SBRG.EC0_.ECFL */
            }

            OperationRegion (PECO, SystemIO, 0x0260, 0x08)
            Field (PECO, ByteAcc, Lock, Preserve)
            {
                HSTS,   8, 
                HCTL,   8, 
                HCMD,   8, 
                HTAR,   8, 
                HWLR,   8, 
                HRLR,   8, 
                HWDR,   8, 
                HRDR,   8
            }

            OperationRegion (ECOR, EmbeddedControl, Zero, 0xFF)
            Field (ECOR, ByteAcc, Lock, Preserve)
            {
                Offset (0x04), 
                CMD1,   8, 
                CDT1,   8, 
                CDT2,   8, 
                CDT3,   8, 
                Offset (0x80), 
                EPWS,   8, 
                EB0S,   8, 
                EB1S,   8, 
                EB0R,   8, 
                EB1R,   8, 
                EPWF,   8, 
                Offset (0x87), 
                EB0T,   8, 
                EB1T,   8, 
                Offset (0x8A), 
                HKEN,   1, 
                Offset (0x93), 
                TAH0,   16, 
                TAH1,   16, 
                TSTP,   8, 
                Offset (0x9C), 
                CDT4,   8, 
                CDT5,   8, 
                Offset (0xA0), 
                ECPU,   8, 
                ECRT,   8, 
                EPSV,   8, 
                EACT,   8, 
                TH1R,   8, 
                TH1L,   8, 
                TH0R,   8, 
                TH0L,   8, 
                Offset (0xB0), 
                B0PN,   16, 
                B0VL,   16, 
                B0RC,   16, 
                B0FC,   16, 
                B0MD,   16, 
                B0ST,   16, 
                B0CC,   16, 
                B0TM,   16, 
                B0C1,   16, 
                B0C2,   16, 
                B0C3,   16, 
                B0C4,   16, 
                Offset (0xD0), 
                B1PN,   16, 
                B1VL,   16, 
                B1RC,   16, 
                B1FC,   16, 
                B1MD,   16, 
                B1ST,   16, 
                B1CC,   16, 
                B1TM,   16, 
                B1C1,   16, 
                B1C2,   16, 
                B1C3,   16, 
                B1C4,   16, 
                Offset (0xF0), 
                B0DC,   16, 
                B0DV,   16, 
                B0SN,   16, 
                Offset (0xF8), 
                B1DC,   16, 
                B1DV,   16, 
                B1SN,   16
            }

            Name (SMBF, Zero)
            OperationRegion (SMBX, EmbeddedControl, 0x18, 0x28)
            Field (SMBX, ByteAcc, NoLock, Preserve)
            {
                PRTC,   8, 
                SSTS,   5, 
                    ,   1, 
                ALFG,   1, 
                CDFG,   1, 
                ADDR,   8, 
                CMDB,   8, 
                BDAT,   256, 
                BCNT,   8, 
                    ,   1, 
                ALAD,   7, 
                ALD0,   8, 
                ALD1,   8
            }

            OperationRegion (SMB2, EmbeddedControl, 0x40, 0x28)
            Field (SMB2, ByteAcc, NoLock, Preserve)
            {
                PRT2,   8, 
                SST2,   5, 
                    ,   1, 
                ALF2,   1, 
                CDF2,   1, 
                ADD2,   8, 
                CMD2,   8, 
                BDA2,   256, 
                BCN2,   8, 
                    ,   1, 
                ALA2,   7, 
                ALR0,   8, 
                ALR1,   8
            }

            Field (SMB2, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                DA20,   8, 
                DA21,   8
            }

            Field (SMBX, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                DAT0,   8, 
                DAT1,   8
            }

            Field (SMBX, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                DT2B,   16
            }

            OperationRegion (NSBS, EmbeddedControl, 0x40, 0x04)
            Field (NSBS, ByteAcc, NoLock, Preserve)
            {
                A2AD,   8, 
                A2D0,   8, 
                A2D1,   8, 
                A3AD,   8
            }

            OperationRegion (BRAM, SystemIO, 0x025A, 0x02)
            Field (BRAM, ByteAcc, Lock, Preserve)
            {
                BRAI,   8, 
                BRAD,   8
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSFG <= OSME))
                {
                    ECFL = One
                }
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    ECFL = Arg1
                }
            }

            Name (FHKM, One)
            Method (FHKW, 0, Serialized)
            {
                While (!FHKM)
                {
                    Sleep (0x0A)
                }

                FHKM = Zero
            }

            Method (FHKS, 0, Serialized)
            {
                FHKM = One
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = One
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x52)
                }
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x02
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x53)
                }
            }

            Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x03
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x54)
                }
            }

            Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x04
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x55)
                }
            }

            Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x05
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x56)
                }
            }

            Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x0A
                Notify (SLPB, 0x80) // Status Change
            }

            Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x0B
                If ((^^^^ATKD.WAPF & 0x04))
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x88)
                    }
                }
                Else
                {
                    Local0 = OHWR ()
                    If ((Local0 & 0x02))
                    {
                        If ((Local0 & One))
                        {
                            Local0 = One
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }
                    Else
                    {
                        Local0 = One
                    }

                    If (Local0)
                    {
                        If ((^^^^ATKD.WAPF & One))
                        {
                            If ((WLDP && BTDP))
                            {
                                Local0 = WRST /* \_SB_.WRST */
                                Local0 |= (BRST << One)
                                Local0++
                                If ((Local0 > 0x03))
                                {
                                    Local0 = Zero
                                }

                                Local1 = DerefOf (Index (WBTL, Local0))
                                If ((Local1 == Zero))
                                {
                                    ^^^^ATKD.IANE (0x5D)
                                    Sleep (0x0DAC)
                                    OBTD (Zero)
                                    ^^^^ATKD.IANE (0x7E)
                                }

                                If ((Local1 == One))
                                {
                                    ^^^^ATKD.IANE (0x5D)
                                    Sleep (0x0DAC)
                                    OBTD (Zero)
                                    ^^^^ATKD.IANE (0x7E)
                                }

                                If ((Local1 == 0x02))
                                {
                                    ^^^^ATKD.IANE (0x5D)
                                    Sleep (0x0DAC)
                                    OBTD (One)
                                    ^^^^ATKD.IANE (0x7D)
                                }

                                If ((Local1 == 0x03))
                                {
                                    ^^^^ATKD.IANE (0x5D)
                                    Sleep (0x0DAC)
                                    OBTD (One)
                                    ^^^^ATKD.IANE (0x7D)
                                }
                            }
                            Else
                            {
                                If (WLDP)
                                {
                                    ^^^^ATKD.IANE (0x5D)
                                }
                                Else
                                {
                                    If (BTDP)
                                    {
                                        If (BRST)
                                        {
                                            OBTD (Zero)
                                            ^^^^ATKD.IANE (0x7E)
                                        }
                                        Else
                                        {
                                            OBTD (One)
                                            ^^^^ATKD.IANE (0x7D)
                                        }
                                    }
                                }
                            }
                        }
                        Else
                        {
                            If ((WLDP && BTDP))
                            {
                                Local0 = WRST /* \_SB_.WRST */
                                Local0 |= (BRST << One)
                                Local0++
                                If ((Local0 > 0x03))
                                {
                                    Local0 = Zero
                                }

                                Local1 = DerefOf (Index (WBTL, Local0))
                                If ((Local1 == Zero))
                                {
                                    OWLD (Zero)
                                    ^^^^ATKD.IANE (0x5F)
                                    Sleep (0x0DAC)
                                    OBTD (Zero)
                                    ^^^^ATKD.IANE (0x7E)
                                }

                                If ((Local1 == One))
                                {
                                    OWLD (One)
                                    ^^^^ATKD.IANE (0x5E)
                                    Sleep (0x0DAC)
                                    OBTD (Zero)
                                    ^^^^ATKD.IANE (0x7E)
                                }

                                If ((Local1 == 0x02))
                                {
                                    OWLD (Zero)
                                    ^^^^ATKD.IANE (0x5F)
                                    Sleep (0x0DAC)
                                    OBTD (One)
                                    ^^^^ATKD.IANE (0x7D)
                                }

                                If ((Local1 == 0x03))
                                {
                                    OWLD (One)
                                    ^^^^ATKD.IANE (0x5E)
                                    Sleep (0x0DAC)
                                    OBTD (One)
                                    ^^^^ATKD.IANE (0x7D)
                                }
                            }
                            Else
                            {
                                If (WLDP)
                                {
                                    If (WRST)
                                    {
                                        OWLD (Zero)
                                        ^^^^ATKD.IANE (0x5F)
                                    }
                                    Else
                                    {
                                        OWLD (One)
                                        ^^^^ATKD.IANE (0x5E)
                                    }
                                }
                                Else
                                {
                                    If (BTDP)
                                    {
                                        If (BRST)
                                        {
                                            OBTD (Zero)
                                            ^^^^ATKD.IANE (0x7E)
                                        }
                                        Else
                                        {
                                            OBTD (One)
                                            ^^^^ATKD.IANE (0x7D)
                                        }
                                    }
                                }
                            }
                        }
                    }
                    Else
                    {
                        If (WLDP)
                        {
                            ^^^^ATKD.IANE (0x5F)
                        }

                        If ((WLDP && BTDP))
                        {
                            Sleep (0x0DAC)
                        }

                        If (BTDP)
                        {
                            ^^^^ATKD.IANE (0x7E)
                        }
                    }
                }
            }

            Name (WBTL, Package (0x04)
            {
                Zero, 
                One, 
                0x02, 
                0x03
            })
            Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x0C
                ^^^^ATKD.IANE (0x50)
            }

            Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x0D
                ^^^^ATKD.IANE (0x51)
            }

            Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query
            {
                If ((OSFG >= OSVT))
                {
                    Local0 = LBTN /* \_SB_.LBTN */
                    If (^^^PCE2.VGA.PRST ())
                    {
                        ^^^PCE2.VGA.DWBL ()
                    }
                    Else
                    {
                        ^^^VGA.DWBL ()
                    }

                    If (ATKP)
                    {
                        If ((Local0 > Zero))
                        {
                            Local0--
                        }

                        If ((Local0 > 0x0A))
                        {
                            Local0 = 0x0A
                        }

                        LBTN = Local0
                        ^^^^ATKD.IANE ((Local0 + 0x20))
                    }
                }
                Else
                {
                    If ((LBTN > Zero))
                    {
                        LBTN--
                    }

                    If ((LBTN > 0x0A))
                    {
                        LBTN = 0x0A
                    }

                    STBR ()
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE ((LBTN + 0x20))
                    }
                }

                Return (One)
            }

            Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query
            {
                If ((OSFG >= OSVT))
                {
                    Local0 = LBTN /* \_SB_.LBTN */
                    If (^^^PCE2.VGA.PRST ())
                    {
                        ^^^PCE2.VGA.UPBL ()
                    }
                    Else
                    {
                        ^^^VGA.UPBL ()
                    }

                    If (ATKP)
                    {
                        If ((Local0 < 0x0A))
                        {
                            Local0++
                        }
                        Else
                        {
                            Local0 = 0x0A
                        }

                        LBTN = Local0
                        ^^^^ATKD.IANE ((Local0 + 0x10))
                    }
                }
                Else
                {
                    If ((LBTN < 0x0A))
                    {
                        LBTN++
                    }
                    Else
                    {
                        LBTN = 0x0A
                    }

                    STBR ()
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE ((LBTN + 0x10))
                    }
                }

                Return (One)
            }

            Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x10
                Local0 = One
                Local0 = RPIN (0x0F)
                Local0 ^= One
                SPIN (0x0F, Local0)
                If (ATKP)
                {
                    Local0 -= 0x34
                    ^^^^ATKD.IANE (Local0)
                }

                P80H = BRST /* \_SB_.BRST */
            }

            Method (_Q11, 0, Serialized)  // _Qxx: EC Query
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                P80H = 0x11
                FHKW ()
                Local0 = ADVG ()
                If (NATK ())
                {
                    If ((Local0 < 0x08))
                    {
                        Local1 = (Local0 + 0x60)
                    }
                    Else
                    {
                        If ((Local0 < 0x10))
                        {
                            Local1 = (Local0 - 0x08)
                            Local1 += 0x8C
                        }
                        Else
                        {
                            If ((Local0 < 0x20))
                            {
                                Local1 = (Local0 & 0x07)
                                Local1 += 0xA0
                            }
                            Else
                            {
                                If ((Local0 < 0x40))
                                {
                                    While (One)
                                    {
                                        _T_0 = ToInteger (Local0)
                                        If ((_T_0 == 0x20))
                                        {
                                            Local1 = 0xD0
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x21))
                                            {
                                                Local1 = 0xD1
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x22))
                                                {
                                                    Local1 = 0xD2
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x24))
                                                    {
                                                        Local1 = 0xD3
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x28))
                                                        {
                                                            Local1 = 0xD4
                                                        }
                                                        Else
                                                        {
                                                            If ((_T_0 == 0x30))
                                                            {
                                                                Local1 = 0xD5
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        Break
                                    }
                                }
                            }
                        }
                    }

                    If (ATKP)
                    {
                        If ((Local1 != 0x60))
                        {
                            ^^^^ATKD.IANE (Local1)
                        }
                    }
                    Else
                    {
                        ^^^VGA.SWAF (Local0)
                    }
                }
                Else
                {
                    SWHG (Local0)
                }

                FHKS ()
            }

            Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x12
                If (!(DSYN & One))
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x6B)
                    }
                }
                Else
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x6F)
                    }
                }
            }

            Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x13
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x32)
                }
            }

            Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x14
                If ((AVOL < 0x0F))
                {
                    AVOL++
                }

                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x31)
                }
            }

            Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x15
                If ((AVOL > Zero))
                {
                    AVOL--
                }

                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x30)
                }
            }

            Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x20
                If (CDFG)
                {
                    SMBF = One
                    CDFG = Zero
                }

                If (ALFG)
                {
                    ALFG = Zero
                }
            }

            Method (_Q69, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x69
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x32)
                }
            }

            Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x6A
                If ((AVOL < 0x0F))
                {
                    AVOL++
                }

                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x31)
                }
            }

            Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x6B
                If ((AVOL > Zero))
                {
                    AVOL--
                }

                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x30)
                }
            }

            Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x6C
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x40)
                }
            }

            Method (_Q6D, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x6D
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x41)
                }
            }

            Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x6E
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x43)
                }
            }

            Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x6F
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x45)
                }
            }

            Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x70
            }

            Method (_Q71, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x71
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x5C)
                }
            }

            Method (_Q72, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x72
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x8A)
                }
            }

            Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x73
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x99)
                }
            }

            Method (_Q74, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x74
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x82)
                }
            }

            Method (_Q77, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x77
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0xB5)
                }
            }

            Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x80
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x5C)
                }
            }

            Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x81
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x6B)
                }
            }

            Method (_Q83, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x83
                Notify (LID, 0x80) // Status Change
            }

            Method (_Q84, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x84
                Local0 = OHWR ()
                If ((Local0 & 0x02))
                {
                    If ((^^^^ATKD.WAPF & 0x04))
                    {
                        If (ATKP)
                        {
                            If ((Local0 & One))
                            {
                                ^^^^ATKD.IANE (0x80)
                            }
                            Else
                            {
                                ^^^^ATKD.IANE (0x81)
                            }
                        }
                    }
                    Else
                    {
                        If ((^^^^ATKD.WAPF & One))
                        {
                            If ((Local0 & One))
                            {
                                If (WLDP)
                                {
                                    If (((^^^PCE6.WLAN.VNUM & 0xFFFF) == 0x8086))
                                    {
                                        Sleep (0x09C4)
                                    }

                                    If ((WRPS == One))
                                    {
                                        ^^^^ATKD.IANE (0x5E)
                                    }
                                    Else
                                    {
                                        ^^^^ATKD.IANE (0x5F)
                                    }
                                }

                                If ((WLDP && BTDP))
                                {
                                    Sleep (0x0DAC)
                                }

                                If (BTDP)
                                {
                                    If (BRPS)
                                    {
                                        OBTD (One)
                                        ^^^^ATKD.IANE (0x7D)
                                    }
                                    Else
                                    {
                                        OBTD (Zero)
                                        ^^^^ATKD.IANE (0x7E)
                                    }
                                }
                            }
                            Else
                            {
                                If (WLDP)
                                {
                                    WRPS = WRST /* \_SB_.WRST */
                                    ^^^^ATKD.IANE (0x5F)
                                }

                                If ((WLDP && BTDP))
                                {
                                    Sleep (0x0DAC)
                                }

                                If (BTDP)
                                {
                                    BRPS = BRST /* \_SB_.BRST */
                                    OBTD (Zero)
                                    ^^^^ATKD.IANE (0x7E)
                                }
                            }
                        }
                        Else
                        {
                            If ((Local0 & One))
                            {
                                If (WLDP)
                                {
                                    If (WRPS)
                                    {
                                        OWLD (One)
                                        ^^^^ATKD.IANE (0x5E)
                                    }
                                    Else
                                    {
                                        OWLD (Zero)
                                        ^^^^ATKD.IANE (0x5F)
                                    }
                                }

                                If ((WLDP && BTDP))
                                {
                                    Sleep (0x0DAC)
                                }

                                If (BTDP)
                                {
                                    If (BRPS)
                                    {
                                        OBTD (One)
                                        ^^^^ATKD.IANE (0x7D)
                                    }
                                    Else
                                    {
                                        OBTD (Zero)
                                        ^^^^ATKD.IANE (0x7E)
                                    }
                                }
                            }
                            Else
                            {
                                If (WLDP)
                                {
                                    WRPS = WRST /* \_SB_.WRST */
                                    OWLD (Zero)
                                    ^^^^ATKD.IANE (0x5F)
                                }

                                If ((WLDP && BTDP))
                                {
                                    Sleep (0x0DAC)
                                }

                                If (BTDP)
                                {
                                    BRPS = BRST /* \_SB_.BRST */
                                    OBTD (Zero)
                                    ^^^^ATKD.IANE (0x7E)
                                }
                            }
                        }
                    }
                }
            }

            Method (_Q85, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x85
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x8A)
                }
            }

            Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0xA0
                If (ACPS ())
                {
                    ACPF = One
                    Local0 = 0x58
                }
                Else
                {
                    ACPF = Zero
                    Local0 = 0x57
                }

                Notify (AC0, 0x80) // Status Change
                If (ATKP)
                {
                    ^^^^ATKD.IANE (Local0)
                }

                Sleep (0x64)
                Sleep (0x0A)
                NBAT (0x80)
            }

            Method (_QB0, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0xB0
            }

            Method (_QB3, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0xB3
                ^^^^ATKD.IANE (0x6D)
            }

            Method (ECRS, 2, Serialized)
            {
                If (ECAV ())
                {
                    If ((Acquire (MUEC, 0xFFFF) == Zero))
                    {
                        ADD2 = Arg0
                        CMD2 = Arg1
                        PRT2 = 0x07
                        Local0 = 0x7F
                        While (PRT2)
                        {
                            Sleep (One)
                            Local0--
                        }

                        If (Local0)
                        {
                            Local0 = DA20 /* \_SB_.PCI0.SBRG.EC0_.DA20 */
                        }
                        Else
                        {
                            Local0 = Ones
                        }

                        Release (MUEC)
                    }
                }

                Return (Local0)
            }

            Method (ECWS, 3, Serialized)
            {
                If (ECAV ())
                {
                    If ((Acquire (MUEC, 0xFFFF) == Zero))
                    {
                        ADD2 = Arg0
                        CMD2 = Arg1
                        DA20 = Arg2
                        PRT2 = 0x06
                        Local0 = 0x07FF
                        While (PRT2)
                        {
                            Sleep (One)
                            Local0--
                        }

                        Release (MUEC)
                    }
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMS, SystemIO, 0x72, 0x02)
        Field (ECMS, ByteAcc, Lock, Preserve)
        {
            EIND,   8, 
            EDAT,   8
        }

        IndexField (EIND, EDAT, ByteAcc, NoLock, Preserve)
        {
            Offset (0xB2), 
            IKFG,   8, 
            Offset (0xB5), 
            RAMB,   32, 
            AVOL,   8, 
            LBTN,   8, 
            ERRF,   8, 
            OCLK,   8, 
            WIDE,   1, 
            OVCK,   2, 
            SLPN,   3, 
            ACRD,   1, 
            VGAS,   1, 
            CPUR,   6, 
            CPUF,   2, 
            LBT2,   8, 
            PCMS,   8, 
            ALSL,   8, 
            ALAE,   1, 
            ALDE,   1, 
            ALSP,   1, 
            Offset (0xC3), 
            WLDP,   1, 
            BTDP,   1, 
            WRST,   1, 
            BRST,   1, 
            WRPS,   1, 
            BRPS,   1, 
            Offset (0xC4), 
            SYNA,   1, 
            ALPS,   1, 
            ELAN,   1, 
            Offset (0xC5), 
            IKF2,   8, 
            UHDB,   8, 
            OSPM,   8, 
            TCGF,   8, 
            PPIS,   8, 
            PPIR,   8, 
            SIDE,   1, 
            PWBS,   1, 
            WFFG,   1, 
            OCST,   3, 
            SMTT,   1, 
            Offset (0xCC), 
            SP80,   1, 
            Offset (0xCD), 
            SWD2,   1, 
            F9KP,   1, 
            HACF,   6, 
            UWDP,   1, 
            WMDP,   1, 
            GPDP,   1, 
            TGDP,   1, 
            UWST,   1, 
            WMST,   1, 
            GPST,   1, 
            TGST,   1, 
            UWPS,   1, 
            WMPS,   1, 
            GPSP,   1, 
            TGPS,   1, 
            Offset (0xD0), 
            SPDC,   8, 
            DROK,   1, 
            SPDG,   1, 
            Offset (0xD2), 
            KBLV,   8, 
            FVGA,   1, 
            P4HN,   1, 
            USSC,   1, 
            MFTM,   1, 
            Offset (0xD4), 
            EGCP,   7, 
            PA3D,   1, 
            ACPF,   8, 
            DCPF,   8, 
            DCP2,   8, 
            MNAM,   64, 
            SLPT,   8, 
            BRTI,   8, 
            LCDV,   32, 
            LCDR,   8, 
            TCRT,   8, 
            PPSV,   8, 
            TPSV,   8, 
            DSYN,   8, 
            ACTD,   8, 
            AVLD,   8, 
            SETD,   8, 
            F8EG,   1, 
            F8NN,   7, 
            BTLT,   8
        }

        OperationRegion (SCMS, SystemIO, 0x70, 0x02)
        Field (SCMS, ByteAcc, Lock, Preserve)
        {
            CB1I,   8, 
            CB1D,   8
        }

        IndexField (CB1I, CB1D, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            MCMS,   8, 
            YCMS,   8
        }
    }

    Scope (_SB)
    {
        Name (ATKP, Zero)
        Name (AITM, Zero)
        Name (PLMD, Zero)
        Name (MUTX, One)
        Name (LEDS, Zero)
        OperationRegion (WSMI, SystemIO, 0xB2, 0x02)
        Field (WSMI, ByteAcc, NoLock, Preserve)
        {
            WSCP,   8, 
            WSSP,   8
        }

        Mutex (MMTX, 0x00)
        Method (WISM, 1, NotSerialized)
        {
            Acquire (MMTX, 0xFFFF)
            WSCP = Arg0
            Release (MMTX)
        }

        Device (ATKD)
        {
            Name (_HID, "PnP0C14")  // _HID: Hardware ID
            Name (_UID, "ATK")  // _UID: Unique ID
            Name (ATKQ, Package (0x10)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (AQHI, Zero)
            Name (AQTI, 0x0F)
            Name (AQNO, Zero)
            Name (WAPF, Zero)
            Name (PCDV, Zero)
            Method (IANQ, 1, Serialized)
            {
                If ((AQNO >= 0x10))
                {
                    Local0 = 0x64
                    While ((Local0 && (AQNO >= 0x10)))
                    {
                        Local0--
                        Sleep (0x0A)
                    }

                    If ((Local0 && (AQNO >= 0x10)))
                    {
                        Return (Zero)
                    }
                }

                AQTI++
                AQTI &= 0x0F
                Index (ATKQ, AQTI) = Arg0
                AQNO++
                Return (One)
            }

            Method (GANQ, 0, Serialized)
            {
                If (AQNO)
                {
                    AQNO--
                    Local0 = DerefOf (Index (ATKQ, AQHI))
                    AQHI++
                    AQHI &= 0x0F
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (IANE, 1, Serialized)
            {
                IANQ (Arg0)
                Notify (ATKD, 0xFF) // Hardware-Specific
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  /* .^..mN.. */
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  /* .9.. ..f */
                /* 0010 */  0x4E, 0x42, 0x01, 0x02, 0x35, 0xBB, 0x3C, 0x0B,  /* NB..5.<. */
                /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  /* ...E..LZ */
                /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08   /* m.]..... */
            })
            Method (WMNB, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, IIA0)
                CreateDWordField (Arg2, 0x04, IIA1)
                Local0 = (Arg1 & 0xFFFFFFFF)
                ^^PCI0.EHC2.BTPS ()
                If ((Local0 == 0x54494E49))
                {
                    INIT (IIA0)
                    Return (One)
                }

                If ((Local0 == 0x53545342))
                {
                    Return (BSTS ())
                }

                If ((Local0 == 0x4E554653))
                {
                    Return (SFUN ())
                }

                If ((Local0 == 0x474F4457))
                {
                    Return (WDOG (IIA0))
                }

                If ((Local0 == 0x494E424B))
                {
                    Return (KBNI ())
                }

                If ((Local0 == 0x43455053))
                {
                    Return (0x00070006)
                }

                If ((Local0 == 0x5256534F))
                {
                    OSVR (IIA0)
                    Return (Zero)
                }

                If ((Local0 == 0x53545344))
                {
                    If ((IIA0 == 0x00020011))
                    {
                        Return ((GALE (One) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020012))
                    {
                        Return ((GALE (0x02) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020013))
                    {
                        Return ((GALE (0x04) | 0x00050000))
                    }

                    If ((IIA0 == 0x00040015))
                    {
                        Return ((GALE (0x08) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020014))
                    {
                        Return ((GALE (0x10) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020015))
                    {
                        Return ((GALE (0x20) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020016))
                    {
                        Return ((GALE (0x40) | 0x00050000))
                    }

                    If ((IIA0 == 0x00030001))
                    {
                        Return ((GMLE (One) + 0x00050000))
                    }

                    If ((IIA0 == 0x00030011)) {}
                    If ((IIA0 == 0x00030012)) {}
                    If ((IIA0 == 0x00040016))
                    {
                        Return ((GMLE (0x03) + 0x00050000))
                    }

                    If ((IIA0 == 0x00110011))
                    {
                        Return ((TMPR () & 0xFFFF))
                    }

                    If ((IIA0 == 0x00110012))
                    {
                        Local0 = TMPR ()
                        Local1 = Local0
                        Local0 = ((Local0 & 0xF0000000) >> 0x1C)
                        Local1 = ((Local1 & 0x0F000000) >> 0x18)
                        Local1 <<= 0x08
                        Return ((Local0 + Local1))
                    }

                    If ((IIA0 == 0x00050012))
                    {
                        Local0 = 0x0A
                        Local0 <<= 0x08
                        Local1 = (GPLV () + Local0)
                        Return (Local1)
                    }

                    If ((IIA0 == 0x00050001)) {}
                    If ((IIA0 == 0x00050013)) {}
                    If ((IIA0 == 0x00010011))
                    {
                        If (WLDP)
                        {
                            Return ((WRST + 0x00030000))
                        }
                    }

                    If ((IIA0 == 0x00010013))
                    {
                        If (BTDP)
                        {
                            If (BTLT)
                            {
                                Return ((BRST + 0x00050000))
                            }
                        }
                    }

                    If ((IIA0 == 0x00010001))
                    {
                        If (^^PCI0.SBRG.EC0.RPIN (0x27))
                        {
                            Return (0x00050000)
                        }

                        Return (0x00050001)
                    }

                    If ((IIA0 == 0x00120012)) {}
                    If ((IIA0 == 0x00050021))
                    {
                        Return (0x8000)
                    }

                    Return (0x02)
                }

                If ((Local0 == 0x53564544))
                {
                    If ((IIA0 == 0x00020011))
                    {
                        Return (SALE ((IIA1 + 0x02)))
                    }

                    If ((IIA0 == 0x00020012))
                    {
                        Return (SALE ((IIA1 + 0x04)))
                    }

                    If ((IIA0 == 0x00020013))
                    {
                        Return (SALE ((IIA1 + 0x08)))
                    }

                    If ((IIA0 == 0x00040015))
                    {
                        Return (SALE ((IIA1 + 0x10)))
                    }

                    If ((IIA0 == 0x00020014))
                    {
                        Return (SALE ((IIA1 + 0x20)))
                    }

                    If ((IIA0 == 0x00020015))
                    {
                        Return (SALE ((IIA1 + 0x40)))
                    }

                    If ((IIA0 == 0x00020016))
                    {
                        Return (SALE ((IIA1 + 0x80)))
                    }

                    If ((IIA0 == 0x00030001))
                    {
                        Return (SMLE ((IIA1 + 0x02)))
                    }

                    If ((IIA0 == 0x00030011))
                    {
                        If ((IIA1 == Zero))
                        {
                            Return (SMLE (0x04))
                        }

                        Return (SMLE (0x05))
                    }

                    If ((IIA0 == 0x00030012))
                    {
                        If ((IIA1 == Zero))
                        {
                            Return (SMLE (0x04))
                        }

                        Return (SMLE (0x09))
                    }

                    If ((IIA0 == 0x00040016))
                    {
                        Return (SMLE ((IIA1 + 0x80)))
                    }

                    If ((IIA0 == 0x00050012))
                    {
                        SPLV (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00050001))
                    {
                        Return (ALSC (IIA1))
                    }

                    If ((IIA0 == 0x00050013))
                    {
                        Return (ALSL (IIA1))
                    }

                    If ((IIA0 == 0x00010012))
                    {
                        WLED (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010013))
                    {
                        BLED (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010003))
                    {
                        Return (CWAP (IIA1))
                    }

                    If ((IIA0 == 0x00010015))
                    {
                        GPSC (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010019))
                    {
                        GSMC (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010017))
                    {
                        WMXC (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010021))
                    {
                        UWBC (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00120012))
                    {
                        Return (PSTC ((IIA1 + One)))
                    }

                    If ((IIA0 == 0x00100012))
                    {
                        TLED (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00050021))
                    {
                        SLKB (IIA1)
                        Return (One)
                    }

                    Return (Zero)
                }

                If ((Local0 == 0x48534C46))
                {
                    FSTA = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                    FSFN = Zero
                    WISM (FUIF)
                    Return (FSTA) /* \FSTA */
                }

                If ((Local0 == 0x494E4946))
                {
                    FADR = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                    FSFN = One
                    WISM (FUIF)
                    Return (FSTA) /* \FSTA */
                }

                If ((Local0 == 0x53524546))
                {
                    FSTA = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                    FSFN = 0x02
                    WISM (FUIF)
                    Return (FSTA) /* \FSTA */
                }

                If ((Local0 == 0x49525746))
                {
                    FADR = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                    FSFN = 0x03
                    FSIZ = 0x1000
                    WISM (FUIF)
                    Return ((0x1000 - FSTA))
                }

                If ((Local0 == 0x50525746))
                {
                    FSFN = 0x03
                    FSIZ = Zero
                    WISM (FUIF)
                    Return ((0x1000 - FSTA))
                }

                If ((Local0 == 0x52534345))
                {
                    If ((Arg0 == Zero))
                    {
                        Return (0x02)
                    }

                    If ((Arg0 == 0x02))
                    {
                        Return (One)
                    }
                }

                If ((Local0 == 0x43534C46))
                {
                    Return (Zero)
                }

                If ((Local0 == 0x43455246))
                {
                    Return (Zero)
                }

                If ((Local0 == 0x454D4946))
                {
                    Return (Zero)
                }

                If ((Local0 == 0x4C425053))
                {
                    If ((IIA0 == 0x80))
                    {
                        Return (One)
                    }

                    If ((IIA0 > 0x0F))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 < Zero))
                    {
                        Return (Zero)
                    }

                    SPLV (IIA0)
                    Return (One)
                }

                If ((Local0 == 0x50534453))
                {
                    SDSP (IIA0)
                    Return (One)
                }

                If ((Local0 == 0x50534447))
                {
                    Return (GDSP (IIA0))
                }

                If ((Local0 == 0x44495047))
                {
                    Return (GPID ())
                }

                If ((Local0 == 0x44434C47))
                {
                    Return (GLCD ())
                }

                If ((Local0 == 0x444F4D51))
                {
                    Return (QMOD (IIA0))
                }

                If ((Local0 == 0x49564E41))
                {
                    Return (ANVI (IIA0))
                }

                If ((Local0 == 0x46494243))
                {
                    Return (CBIF (IIA0))
                }

                If ((Local0 == 0x4E464741))
                {
                    Return (AGFN (IIA0))
                }

                If ((Local0 == 0x46494643))
                {
                    CFIF (IIA0)
                    Return (One)
                }

                If ((Local0 == 0x44495046))
                {
                    Return (FPID ())
                }

                If ((Local0 == 0x59454B48))
                {
                    Local0 = ^^PCI0.SBRG.EC0.CDT1 /* \_SB_.PCI0.SBRG.EC0_.CDT1 */
                    Return (One)
                }

                If ((Local0 == 0x5446424B))
                {
                    ^^PCI0.SBRG.EC0.HKEN = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                    Return (One)
                }
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
                If ((Arg0 == 0xFF))
                {
                    Return (GANQ ())
                }

                Return (Ones)
            }

            Method (INIT, 1, NotSerialized)
            {
                ATKP = One
            }

            Method (BSTS, 0, NotSerialized)
            {
                Local0 = IKFG /* \_SB_.IKFG */
                Local0 |= (IKF2 << 0x08)
                Return (Local0)
            }

            Method (TMPR, 0, NotSerialized)
            {
                Return (Ones)
            }

            Method (SFUN, 0, NotSerialized)
            {
                Local0 = 0x37
                Local0 |= 0x40
                Local0 |= 0x0800
                Local0 |= 0x00020000
                Local0 |= 0x00080000
                Local0 |= 0x00100000
                Return (Local0)
            }

            Method (OSVR, 1, NotSerialized)
            {
                OSFG = Arg0
            }

            Method (GPLV, 0, NotSerialized)
            {
                Return (LBTN) /* \_SB_.LBTN */
            }

            Method (SPLV, 1, NotSerialized)
            {
                Return (One)
            }

            Method (SPBL, 1, NotSerialized)
            {
                If ((Arg0 == 0x0100))
                {
                    Local0 = (0x0B - One)
                    Return (Local0)
                }

                If ((Arg0 == 0x80))
                {
                    Return (One)
                }

                If ((Arg0 > 0x0F))
                {
                    Return (Zero)
                }

                If ((Arg0 < Zero))
                {
                    Return (Zero)
                }

                Return (One)
            }

            Method (WLED, 1, NotSerialized)
            {
                OWLD (Arg0)
                Return (One)
            }

            Method (KBNI, 0, NotSerialized)
            {
                Return (One)
            }

            Method (GALE, 1, NotSerialized)
            {
                If ((Arg0 == 0x04))
                {
                    If ((LEDS && 0x04))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == 0x08))
                {
                    If ((LEDS && 0x08))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == 0x10))
                {
                    If ((LEDS && 0x10))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (0x02)
            }

            Method (SALE, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GMLE, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (One)
                }

                If ((Arg0 == 0x02))
                {
                    Return (One)
                }

                If ((Arg0 == 0x03))
                {
                    Return (One)
                }

                Return (One)
            }

            Method (SMLE, 1, NotSerialized)
            {
                Return (One)
            }

            Method (BLED, 1, NotSerialized)
            {
                OBTD (Arg0)
                Return (One)
            }

            Method (UWBC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (WMXC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GPSC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GSMC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (SDSP, 1, NotSerialized)
            {
                ^^PCI0.VGA.SWAF (Arg0)
            }

            Method (GPID, 0, NotSerialized)
            {
                Return (LCDR) /* \_SB_.LCDR */
            }

            Method (FPID, 0, NotSerialized)
            {
                Return (0x0118)
            }

            Method (ALSC, 1, NotSerialized)
            {
                If (Arg0) {}
                Else
                {
                }

                Return (One)
            }

            Method (ALSL, 1, NotSerialized)
            {
                Return (One)
            }

            Method (RSTS, 0, NotSerialized)
            {
                Return (ORST ())
            }

            Method (HWRS, 0, NotSerialized)
            {
                Return (OHWR ())
            }

            Method (GLCD, 0, NotSerialized)
            {
                Return (LCDV) /* \_SB_.LCDV */
            }

            Method (CWAP, 1, NotSerialized)
            {
                WAPF |= Arg0 /* \_SB_.ATKD.WAPF */
                Return (One)
            }

            Method (WDOG, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (DPWR, 1, NotSerialized)
            {
                Return (One)
            }

            Method (QDEV, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (0x02)
                }

                If ((Arg0 == 0x02))
                {
                    Return (0x02)
                }

                If ((Arg0 == 0x04))
                {
                    Return (0x02)
                }

                If ((Arg0 == 0x08))
                {
                    Return (0x02)
                }

                Return (0x02)
            }

            Method (SDON, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x02))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x04))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x08))
                {
                    Return (Zero)
                }

                Return (Zero)
            }

            Method (SDOF, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x02))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x04))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x08))
                {
                    Return (Zero)
                }

                Return (Zero)
            }

            Method (QMOD, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (Zero)
                }

                If ((Arg0 == One)) {}
                If ((Arg0 == 0x02)) {}
                Return (One)
            }

            Method (ANVI, 1, Serialized)
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                Local0 = AGFN (Zero)
                Local0 += 0x0100
                OperationRegion (\DBUF, SystemMemory, Local0, 0x1000)
                Field (DBUF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0xD2), 
                    PJIC,   8, 
                    Offset (0xD4), 
                    SLPD,   8, 
                    Offset (0xDE), 
                    SLMK,   8
                }

                Field (DBUF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x27), 
                    OSTE,   8
                }

                FADR = Local0
                FSFN = One
                WISM (FUIF)
                FADR = 0x434E4647
                FSFN = 0x05
                WISM (FUIF)
                PJIC = SOAO /* \SOAO */
                SLPD = 0xFF
                Local0 = Arg0
                While (One)
                {
                    _T_0 = Local0
                    If ((_T_0 == One))
                    {
                        SLMK = One
                        Local1 = Zero
                        Break
                    }
                    Else
                    {
                        If ((_T_0 == 0x02))
                        {
                            FADR = 0x4D464730
                            FSFN = 0x05
                            WISM (FUIF)
                            Return (OSTE) /* \_SB_.ATKD.ANVI.OSTE */
                        }
                        Else
                        {
                            If ((_T_0 == 0x05))
                            {
                                SLMK = 0x05
                                Local1 = Zero
                                Break
                            }
                            Else
                            {
                                If ((_T_0 == 0x0101))
                                {
                                    SLMK = One
                                    SLPD = GSEC ()
                                    Local1 = One
                                    Break
                                }
                                Else
                                {
                                    If ((_T_0 == 0x0105))
                                    {
                                        SLMK = 0x05
                                        SLPD = GSEC ()
                                        Local1 = One
                                        Break
                                    }
                                    Else
                                    {
                                        Return (0xFFFF)
                                    }
                                }
                            }
                        }
                    }

                    Break
                }

                FADR = 0x434E4647
                FSFN = 0x04
                WISM (FUIF)
                FSTA = Zero
                FSFN = Zero
                WISM (FUIF)
                FSFN = 0x06
                WISM (FUIF)
                FSTA = One
                FSFN = Zero
                WISM (FUIF)
                Return (Local1)
            }

            Method (GSEC, 0, NotSerialized)
            {
                Local1 = ((YCMS >> 0x04) * 0x0A)
                Local1 += (YCMS & 0x0F)
                Local1 *= 0x0C
                Local0 = ((MCMS >> 0x04) * 0x0A)
                Local0 += (MCMS & 0x0F)
                Local0 += 0x03
                Local1 += Local0
                Return (Local1)
            }

            Method (PSTC, 1, Serialized)
            {
                If ((Arg0 == Zero)) {}
                Return (Zero)
            }

            Method (SMBB, 1, Serialized)
            {
                Return (Ones)
            }

            Method (SMBW, 1, Serialized)
            {
                Return (Ones)
            }

            Method (SMBK, 1, Serialized)
            {
                Return (Ones)
            }

            Method (ECRW, 1, Serialized)
            {
                Return (Ones)
            }

            Method (CBIF, 1, Serialized)
            {
                Return (One)
            }

            Method (TLED, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GLED, 1, NotSerialized)
            {
                Return (One)
            }

            Method (CFIF, 1, Serialized)
            {
                BAML = Arg0
                WISM (0xA6)
                Return (One)
            }

            Method (GLKB, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (Zero)
                }
                Else
                {
                    If ((Arg0 == 0x02))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        If ((Arg0 == 0x03))
                        {
                            Return (0x80)
                        }
                    }
                }

                Return (Ones)
            }

            Method (SLKB, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GDSP, 1, NotSerialized)
            {
                If ((Arg0 == Zero)) {}
                If ((Arg0 == One)) {}
                If ((Arg0 == 0x02)) {}
                If ((Arg0 == 0x80))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (AGFN, 1, Serialized)
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                If ((Arg0 == Zero))
                {
                    Return (AMLA) /* \AMLA */
                }

                P80H = 0xAA
                Local0 = Zero
                OperationRegion (\PARM, SystemMemory, Arg0, 0x08)
                Field (PARM, DWordAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    LEN,    16, 
                    STAS,   8, 
                    EROR,   8
                }

                EROR = Zero
                STAS = One
                BIPA = Arg0
                While (One)
                {
                    _T_0 = MFUN /* \_SB_.ATKD.AGFN.MFUN */
                    If ((_T_0 == One))
                    {
                        GVER (Arg0, LEN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        Return (One)
                    }
                    Else
                    {
                        If ((_T_0 == 0x02))
                        {
                            WISM (0xEB)
                            STAS &= 0xFE
                            STAS |= 0x80
                            Return (One)
                        }
                        Else
                        {
                            If ((_T_0 == 0x10))
                            {
                                Local0 = MF10 (Arg0, LEN, SFUN)
                                STAS &= 0xFE
                                STAS |= 0x80
                                EROR |= Local0
                                Return (One)
                            }
                            Else
                            {
                                If ((_T_0 == 0x11))
                                {
                                    STAS &= 0xFE
                                    STAS |= 0x80
                                    EROR |= Local0
                                    Return (One)
                                }
                                Else
                                {
                                    If ((_T_0 == 0x12))
                                    {
                                        STAS &= 0xFE
                                        STAS |= 0x80
                                        EROR |= Local0
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x13))
                                        {
                                            STAS &= 0xFE
                                            STAS |= 0x80
                                            EROR |= Local0
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x14))
                                            {
                                                STAS &= 0xFE
                                                STAS |= 0x80
                                                EROR |= Local0
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x15))
                                                {
                                                    STAS &= 0xFE
                                                    STAS |= 0x80
                                                    EROR |= Local0
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x16))
                                                    {
                                                        Local0 = MF16 (Arg0, LEN, MFUN, SFUN)
                                                        STAS &= 0xFE
                                                        STAS |= 0x80
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x17))
                                                        {
                                                            Local0 = MF17 (Arg0, LEN, MFUN, SFUN)
                                                            STAS &= 0xFE
                                                            STAS |= 0x80
                                                            EROR |= Local0
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If ((_T_0 == 0x18))
                                                            {
                                                                STAS &= 0xFE
                                                                STAS |= 0x80
                                                                EROR |= Local0
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If ((_T_0 == 0x19))
                                                                {
                                                                    Local0 = MF19 (Arg0, LEN, MFUN, SFUN)
                                                                    STAS &= 0xFE
                                                                    STAS |= 0x80
                                                                    EROR |= Local0
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    If ((_T_0 == 0x1F))
                                                                    {
                                                                        WISM (0xEB)
                                                                        STAS &= 0xFE
                                                                        STAS |= 0x80
                                                                        Return (One)
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((_T_0 == 0x20))
                                                                        {
                                                                            WISM (0xEB)
                                                                            STAS &= 0xFE
                                                                            STAS |= 0x80
                                                                            Return (One)
                                                                        }
                                                                        Else
                                                                        {
                                                                            If ((_T_0 == 0x32))
                                                                            {
                                                                                Local0 = MF32 (Arg0, LEN, MFUN, SFUN)
                                                                                STAS &= 0xFE
                                                                                STAS |= 0x80
                                                                                EROR |= Local0
                                                                                Return (One)
                                                                            }
                                                                            Else
                                                                            {
                                                                                STAS &= 0xFE
                                                                                STAS |= 0x80
                                                                                Return (One)
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }

                If ((STAS == One))
                {
                    EROR = One
                    STAS |= 0x02
                }

                STAS &= 0xFE
                STAS |= 0x80
                Return (Zero)
            }

            Method (GVER, 2, NotSerialized)
            {
                OperationRegion (\FGVR, SystemMemory, Arg0, Arg1)
                Field (FGVR, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    APID,   16, 
                    APRV,   32
                }

                Return (Zero)
            }

            Method (MF10, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == One))
                {
                    Local0 = SRTC (Arg0, Arg1)
                }

                If ((Arg2 == 0x02)) {}
                Return (Local0)
            }

            Method (SRTC, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F101, SystemMemory, Arg0, Arg1)
                Field (F101, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    DLTM,   16
                }

                RTCW = DLTM /* \_SB_.ATKD.SRTC.DLTM */
                Return (Zero)
            }

            Method (MF16, 4, NotSerialized)
            {
                Local0 = One
                If ((Arg3 == One))
                {
                    Local0 = SFBD (Arg0, Arg1)
                }

                If ((Arg3 == 0x02))
                {
                    Local0 = LCMD (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (SFBD, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                OperationRegion (\F161, SystemMemory, Arg0, Arg1)
                Field (F161, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    NXBD,   8
                }

                If (OFBD (NXBD))
                {
                    UHDB = NXBD /* \_SB_.ATKD.SFBD.NXBD */
                    Return (Zero)
                }
                Else
                {
                    Return (0x10)
                }
            }

            Method (OFBD, 1, NotSerialized)
            {
                Name (FBDT, Package (0x14)
                {
                    0xE0, 
                    0xE1, 
                    0xE2, 
                    0xE3, 
                    0xE4, 
                    0xE5, 
                    0xE6, 
                    0xE7, 
                    0xE8, 
                    0xE9, 
                    0xEA, 
                    0xEB, 
                    0xEC, 
                    0xED, 
                    0xEE, 
                    0xEF, 
                    0xF1, 
                    0xF2, 
                    0xF3, 
                    0xF6
                })
                Local0 = Match (FBDT, MEQ, Arg0, MTR, Zero, Zero)
                Local0++
                Return (Local0)
            }

            Method (LCMD, 2, NotSerialized)
            {
                If ((Arg1 < 0x0B))
                {
                    Return (0x02)
                }

                WISM (0xEB)
                Return (Zero)
            }

            Method (MF17, 4, NotSerialized)
            {
                Local0 = One
                If ((Arg3 == One))
                {
                    Local0 = GMDL (Arg0, Arg1)
                }

                If ((Arg3 == 0x02))
                {
                    Local0 = GBSI (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (GMDL, 2, NotSerialized)
            {
                If ((Arg1 < 0x19))
                {
                    Return (0x02)
                }

                OperationRegion (\F171, SystemMemory, Arg0, Arg1)
                Field (F171, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    MLEN,   8, 
                    MDL1,   32, 
                    MDL2,   32, 
                    MDL3,   32, 
                    MDL4,   32
                }

                MDL1 = Zero
                MDL2 = Zero
                MDL3 = Zero
                MDL4 = Zero
                Name (BBUF, Buffer (0x10) {})
                CreateDWordField (BBUF, Zero, DAT1)
                CreateDWordField (BBUF, 0x04, DAT2)
                CreateDWordField (BBUF, 0x08, DAT3)
                CreateDWordField (BBUF, 0x0C, DAT4)
                Local0 = GBMN ()
                MLEN = SizeOf (Local0)
                BBUF = GBMN ()
                MDL1 = DAT1 /* \_SB_.ATKD.GMDL.DAT1 */
                MDL2 = DAT2 /* \_SB_.ATKD.GMDL.DAT2 */
                MDL3 = DAT3 /* \_SB_.ATKD.GMDL.DAT3 */
                MDL4 = DAT4 /* \_SB_.ATKD.GMDL.DAT4 */
                Return (Zero)
            }

            Method (GBMN, 0, NotSerialized)
            {
                Local0 = "N53Ta"
                Return (Local0)
            }

            Method (GBSI, 2, NotSerialized)
            {
                If ((Arg1 < 0x19))
                {
                    Return (0x02)
                }

                OperationRegion (\F172, SystemMemory, Arg0, Arg1)
                Field (F172, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BLEN,   8, 
                    BDL1,   32, 
                    BDL2,   32, 
                    BDL3,   32, 
                    BDL4,   32
                }

                BDL1 = Zero
                BDL2 = Zero
                BDL3 = Zero
                BDL4 = Zero
                Name (BBUF, Buffer (0x10) {})
                CreateDWordField (BBUF, Zero, DAT1)
                CreateDWordField (BBUF, 0x04, DAT2)
                CreateDWordField (BBUF, 0x08, DAT3)
                CreateDWordField (BBUF, 0x0C, DAT4)
                Local0 = GBRV ()
                BLEN = SizeOf (Local0)
                BBUF = GBRV ()
                BDL1 = DAT1 /* \_SB_.ATKD.GBSI.DAT1 */
                BDL2 = DAT2 /* \_SB_.ATKD.GBSI.DAT2 */
                BDL3 = DAT3 /* \_SB_.ATKD.GBSI.DAT3 */
                BDL4 = DAT4 /* \_SB_.ATKD.GBSI.DAT4 */
                Return (Zero)
            }

            Method (GBRV, 0, NotSerialized)
            {
                Local0 = "207"
                Return (Local0)
            }

            Method (MF19, 4, NotSerialized)
            {
                Local0 = One
                If ((Arg3 == One))
                {
                    Local0 = ACMS (Arg0, Arg1)
                }

                If ((Arg3 == 0x02))
                {
                    Local0 = CSIN (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (ACMS, 2, NotSerialized)
            {
                WISM (0xEB)
                Return (Zero)
            }

            Method (CSIN, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F192, SystemMemory, Arg0, Arg1)
                Field (F192, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    CMAX,   16
                }

                CMAX = 0xFF
                Return (Zero)
            }

            Method (MF32, 4, NotSerialized)
            {
                Local0 = One
                If ((Arg3 == One)) {}
                If ((Arg3 == 0x02)) {}
                If ((Arg3 == 0x03))
                {
                    Local0 = GPBA (Arg0, Arg1)
                }

                If ((Arg3 == 0x04))
                {
                    Local0 = SPBA (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (GPBA, 2, NotSerialized)
            {
                If ((Arg1 < 0x10))
                {
                    Return (0x02)
                }

                OperationRegion (\F323, SystemMemory, Arg0, Arg1)
                Field (F323, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    Offset (0x09), 
                    GPBX,   8
                }

                GPBX = Zero
                Return (Zero)
            }

            Method (SPBA, 2, NotSerialized)
            {
                If ((Arg1 < 0x18))
                {
                    Return (0x02)
                }

                OperationRegion (\F324, SystemMemory, Arg0, Arg1)
                Field (F324, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    Offset (0x09), 
                    SPBS,   8, 
                    SPBD,   8, 
                    SDAT,   64
                }

                Return (One)
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMB0, SystemIO, 0x0B00, 0x80)
        Field (SMB0, ByteAcc, NoLock, Preserve)
        {
            SHST,   8, 
            Offset (0x02), 
            SHTC,   8, 
            SCMD,   8, 
            SADR,   8, 
            Offset (0x0D), 
            SMAC,   8
        }

        Method (DIAG, 1, NotSerialized)
        {
            SMAC = Zero
            SADR = Zero
            SCMD = Arg0
            SHST = 0xFF
            SHTC = 0x44
        }
    }

    Scope (\)
    {
        OperationRegion (SBSM, SystemIO, SMB0, 0x10)
        Field (SBSM, ByteAcc, NoLock, Preserve)
        {
            SHST,   8, 
            SSSR,   8, 
            SHTC,   8, 
            SCMD,   8, 
            SADR,   8, 
            SDT0,   8, 
            SDT1,   8, 
            SLKD,   8, 
            SSCT,   8, 
            SSCM,   8, 
            SSEV,   16, 
            SSDT,   8, 
            SMAC,   8
        }

        Method (ACPS, 0, Serialized)
        {
            Local0 = \_SB.PCI0.SBRG.EC0.RPIN (0x03)
            Local0 ^= One
            Return (Local0)
        }

        Name (CNTB, Buffer (0x0E)
        {
            /* 0000 */  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,  /* ........ */
            /* 0008 */  0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00               /* ...... */
        })
        Name (VISB, Buffer (0x0E)
        {
            /* 0000 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0008 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00               /* ...... */
        })
        Name (SHPB, Buffer (0x0E)
        {
            /* 0000 */  0x04, 0x04, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,  /* ........ */
            /* 0008 */  0x07, 0x07, 0x04, 0x07, 0x07, 0x07               /* ...... */
        })
        Name (BUPC, Package (0x04)
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Name (BPLD, Buffer (0x10)
        {
             0x81, 0x00, 0x31, 0x00                           /* ..1. */
        })
        Method (OUPC, 1, Serialized)
        {
            Local0 = DerefOf (Index (CNTB, Arg0))
            Index (BUPC, Zero) = Local0
        }

        Method (OPLD, 1, Serialized)
        {
            Local0 = DerefOf (Index (VISB, Arg0))
            Local1 = DerefOf (Index (BPLD, 0x08))
            Local1 &= 0xFE
            Local1 |= Local0
            Index (BPLD, 0x08) = Local1
            Local0 = DerefOf (Index (SHPB, Arg0))
            Local1 = DerefOf (Index (BPLD, 0x09))
            Local1 &= 0xC3
            Local1 |= Local0
            Index (BPLD, 0x09) = Local1
        }
    }

    Scope (_SB.PCI0.OHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT0)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (Zero)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (Zero)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (One)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (One)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x02)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x02)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x03)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x03)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x04)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x04)
                    Return (BPLD) /* \BPLD */
                }
            }
        }
    }

    Scope (_SB.PCI0.OHC2)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT0)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x05)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x05)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x06)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x06)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x07)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x07)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x08)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x08)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x09)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x09)
                    Return (BPLD) /* \BPLD */
                }
            }
        }
    }

    Scope (_SB.PCI0.OHC3)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT0)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x0A)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x0A)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x0B)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x0B)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x0C)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x0C)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x0D)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x0D)
                    Return (BPLD) /* \BPLD */
                }
            }
        }
    }

    Scope (_SB.PCI0.EHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT0)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (Zero)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (Zero)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (One)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (One)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x02)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x02)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x03)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x03)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x04)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x04)
                    Return (BPLD) /* \BPLD */
                }
            }
        }
    }

    Scope (_SB.PCI0.EHC2)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT0)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x05)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x05)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x06)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x06)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x07)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x07)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x08)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x08)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x09)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x09)
                    Return (BPLD) /* \BPLD */
                }
            }
        }
    }

    Scope (_SB.PCI0.EHC3)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT0)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x0A)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x0A)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x0B)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x0B)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x0C)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x0C)
                    Return (BPLD) /* \BPLD */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    OUPC (0x0D)
                    Return (BUPC) /* \BUPC */
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    OPLD (0x0D)
                    Return (BPLD) /* \BPLD */
                }
            }
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Name (PWAC, Buffer (0x40)
        {
            /* 0000 */  0x33, 0x40, 0x4D, 0x5A, 0x67, 0x73, 0x80, 0x8D,  /* 3@MZgs.. */
            /* 0008 */  0xA7, 0xCD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
            /* 0010 */  0x21, 0x2E, 0x3B, 0x48, 0x55, 0x61, 0x6E, 0x7B,  /* !.;HUan{ */
            /* 0018 */  0x9A, 0xC5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
            /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
            /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
            /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
            /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   /* ........ */
        })
        Method (ACPS, 0, Serialized)
        {
            Return ((GPWS () & One))
        }

        Method (DCPS, 1, Serialized)
        {
            Local0 = GPWS ()
            If (Arg0)
            {
                Local0 &= 0x04
            }
            Else
            {
                Local0 &= 0x02
            }

            If (Local0)
            {
                Local0 = One
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (GPWS, 0, Serialized)
        {
            Local0 = EPWS /* \_SB_.PCI0.SBRG.EC0_.EPWS */
            Return (Local0)
        }

        Method (BCHG, 1, Serialized)
        {
            If (Arg0)
            {
                If (ECAV ())
                {
                    Local0 = EB1S /* \_SB_.PCI0.SBRG.EC0_.EB1S */
                    Local0 &= 0xFF
                    If ((Local0 != 0xFF))
                    {
                        Local0 &= 0x02
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }
            Else
            {
                If (ECAV ())
                {
                    Local0 = EB0S /* \_SB_.PCI0.SBRG.EC0_.EB0S */
                    Local0 &= 0xFF
                    If ((Local0 != 0xFF))
                    {
                        Local0 &= 0x02
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }
        }

        Method (BCLE, 1, Serialized)
        {
            If (Arg0)
            {
                If (ECAV ())
                {
                    Local0 = Ones
                    Local1 = EB1S /* \_SB_.PCI0.SBRG.EC0_.EB1S */
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            If ((Local1 == 0x02))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                If ((Local1 == 0x10))
                                {
                                    Local0 = One
                                }
                            }
                        }
                    }
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
            Else
            {
                If (ECAV ())
                {
                    Local0 = Ones
                    Local1 = EB0S /* \_SB_.PCI0.SBRG.EC0_.EB0S */
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            If ((Local1 == 0x02))
                            {
                                Local0 = One
                            }
                            Else
                            {
                                If ((Local1 == 0x10))
                                {
                                    Local0 = One
                                }
                            }
                        }
                    }
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
        }

        Method (TACH, 1, NotSerialized)
        {
            If (Arg0)
            {
                If (ECAV ())
                {
                    If ((DECF & 0x02))
                    {
                        Local0 = RRAM (0x1820)
                        Local1 = RRAM (0x1821)
                        Local1 <<= 0x08
                        Local0 += Local1
                    }
                    Else
                    {
                        Local0 = TAH1 /* \_SB_.PCI0.SBRG.EC0_.TAH1 */
                    }

                    Local0 &= 0xFFFF
                    If ((Local0 != Zero))
                    {
                        If ((Local0 == 0xFFFF))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local1 = 0x80
                            Local2 = 0x02
                            Local3 = (Local1 * Local2)
                            Local4 = (Local0 * Local3)
                            Divide (0x03938700, Local4, Local5, Local6)
                            Local6 *= 0x0A
                            Local0 = Local6
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
            Else
            {
                If (ECAV ())
                {
                    If ((DECF & One))
                    {
                        Local0 = RRAM (0x181E)
                        Local1 = RRAM (0x181F)
                        Local1 <<= 0x08
                        Local0 += Local1
                    }
                    Else
                    {
                        Local0 = TAH0 /* \_SB_.PCI0.SBRG.EC0_.TAH0 */
                    }

                    Local0 &= 0xFFFF
                    If ((Local0 != Zero))
                    {
                        If ((Local0 == 0xFFFF))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local1 = 0x80
                            Local2 = 0x02
                            Local3 = (Local1 * Local2)
                            Local4 = (Local0 * Local3)
                            Divide (0x03938700, Local4, Local5, Local6)
                            Local6 *= 0x0A
                            Local0 = Local6
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
        }

        Name (HKFG, Zero)
        Method (EC0S, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                Local0 = RRAM (0x0449)
                Local1 = (Local0 & 0x02)
                If (Local1)
                {
                    WRAM (0x044B, Zero)
                    Local1 = (Local0 & 0xFA)
                    WRAM (0x0449, Local1)
                }
            }

            If ((Arg0 == 0x05))
            {
                Local0 = RRAM (0x0449)
                Local1 = (Local0 & 0x02)
                If (Local1)
                {
                    WRAM (0x044B, Zero)
                }
            }

            HKFG = HKEN /* \_SB_.PCI0.SBRG.EC0_.HKEN */
        }

        Method (EC0W, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
            If ((Arg0 <= 0x04))
            {
                ACPF = ACPS ()
                DCPF = DCPS (Zero)
            }

            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                Local0 = RRAM (0x0449)
                Local1 = (Local0 & 0x02)
                If (Local1)
                {
                    Local0 |= One
                    WRAM (0x0449, Local0)
                }
            }

            If ((Arg0 == 0x05)) {}
            If ((Arg0 >= 0x04))
            {
                HKEN = HKFG /* \_SB_.PCI0.SBRG.EC0_.HKFG */
            }
        }
    }

    Scope (\)
    {
        Method (ADVG, 0, NotSerialized)
        {
            If (\_SB.PCI0.VGA.PRST ())
            {
                Return (\_SB.PCI0.VGA.ADVD ())
            }

            Return (0x03)
        }

        Method (SWHG, 1, Serialized)
        {
            \_SB.PCI0.VGA.SWHD (Arg0)
            Return (One)
        }

        Method (NATK, 0, NotSerialized)
        {
            If (\_SB.PCI0.VGA.PRST ())
            {
                Return (\_SB.PCI0.VGA.NATK ())
            }

            Return (One)
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (GBTT, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Arg0 == Zero))
                {
                    Local0 = EB0T /* \_SB_.PCI0.SBRG.EC0_.EB0T */
                }
                Else
                {
                    Local0 = EB1T /* \_SB_.PCI0.SBRG.EC0_.EB1T */
                }
            }
            Else
            {
                Local0 = 0xFF
            }

            Return (Local0)
        }

        Method (RRAM, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    Local0 = Arg0
                    Local1 = (Local0 & 0xFF)
                    Local0 >>= 0x08
                    Local0 &= 0xFF
                    CDT3 = Local1
                    CDT2 = Local0
                    CDT1 = 0x80
                    CMD1 = 0xB6
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = CDT1 /* \_SB_.PCI0.SBRG.EC0_.CDT1 */
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }
            }

            Return (Ones)
        }

        Method (WRAM, 2, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    Local0 = Arg0
                    Local1 = (Local0 & 0xFF)
                    Local0 >>= 0x08
                    Local0 &= 0xFF
                    CDT3 = Local1
                    CDT2 = Local0
                    CDT1 = 0x81
                    CDT4 = Arg1
                    CMD1 = 0xB6
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }
            }

            Return (Ones)
        }

        Method (STBR, 0, Serialized)
        {
            ECCB ()
        }

        Method (ECCB, 0, Serialized)
        {
            If ((ACAP () || (OSFG == OSVT)))
            {
                Local0 = LBTN /* \_SB_.LBTN */
            }
            Else
            {
                Local0 = LBTN /* \_SB_.LBTN */
            }

            Local1 = BRTI /* \_SB_.BRTI */
            Local1 <<= 0x04
            Local1 += Local0
            Local0 = DerefOf (Index (PWAC, Local1))
            SADC (Local0)
        }

        Name (DECF, Zero)
        Method (SFNV, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                If ((DECF & One))
                {
                    Local0 = RRAM (0x0521)
                    Local0 |= 0x80
                    WRAM (0x0521, Local0)
                }

                If ((DECF & 0x02))
                {
                    Local0 = RRAM (0x0522)
                    Local0 |= 0x80
                    WRAM (0x0522, Local0)
                }

                DECF = Zero
                Return (Zero)
            }

            If ((Arg0 == One))
            {
                Local0 = RRAM (0x0521)
                Local0 &= 0x7F
                WRAM (0x0521, Local0)
                DECF |= One
                WFOV (Zero, Arg1)
                Return (Zero)
            }

            If ((Arg0 == 0x02))
            {
                Local0 = RRAM (0x0522)
                Local0 &= 0x7F
                WRAM (0x0522, Local0)
                DECF |= 0x02
                WFOV (One, Arg1)
                Return (Zero)
            }

            Return (Zero)
        }

        Method (SADC, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = 0x86
                    CDT2 = Zero
                    CDT3 = Arg0
                    CMD1 = 0xB6
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = CDT1 /* \_SB_.PCI0.SBRG.EC0_.CDT1 */
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }
            }

            Return (Ones)
        }

        Name (WRQK, 0x02)
        Name (RDQK, 0x03)
        Name (SDBT, 0x04)
        Name (RCBT, 0x05)
        Name (WRBT, 0x06)
        Name (RDBT, 0x07)
        Name (WRWD, 0x08)
        Name (RDWD, 0x09)
        Name (WRBL, 0x0A)
        Name (RDBL, 0x0B)
        Name (PCLL, 0x0C)
        Name (GOOD, Zero)
        Name (UKER, 0x07)
        Name (DAER, 0x10)
        Name (CMDN, 0x12)
        Name (UKE2, 0x13)
        Name (DADN, 0x17)
        Name (SBTO, 0x18)
        Name (USPT, 0x19)
        Name (SBBY, 0x1A)
        Method (SWTC, 1, Serialized)
        {
            Local0 = UKER /* \_SB_.PCI0.SBRG.EC0_.UKER */
            Local1 = 0x03
            While ((Local0 && Local1))
            {
                Local2 = 0x23
                While (Local2)
                {
                    If (PRTC)
                    {
                        Sleep (One)
                        Local2--
                    }
                    Else
                    {
                        Local2 = Zero
                        Local0 = SSTS /* \_SB_.PCI0.SBRG.EC0_.SSTS */
                    }
                }

                If (Local0)
                {
                    PRTC = Zero
                    Local1--
                    If (Local1)
                    {
                        Sleep (One)
                        PRTC = Arg0
                    }
                }
            }

            Return (Local0)
        }

        Method (SMBR, 3, Serialized)
        {
            Local0 = Package (0x03)
                {
                    0x07, 
                    Zero, 
                    Zero
                }
            If (!ECAV ())
            {
                Return (Local0)
            }

            If ((Arg0 != RDBL))
            {
                If ((Arg0 != RDWD))
                {
                    If ((Arg0 != RDBT))
                    {
                        If ((Arg0 != RCBT))
                        {
                            If ((Arg0 != RDQK))
                            {
                                Return (Local0)
                            }
                        }
                    }
                }
            }

            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local1 = PRTC /* \_SB_.PCI0.SBRG.EC0_.PRTC */
                Local2 = Zero
                While ((Local1 != Zero))
                {
                    Stall (0x0A)
                    Local2++
                    If ((Local2 > 0x03E8))
                    {
                        Index (Local0, Zero) = SBBY /* \_SB_.PCI0.SBRG.EC0_.SBBY */
                        Local1 = Zero
                    }
                    Else
                    {
                        Local1 = PRTC /* \_SB_.PCI0.SBRG.EC0_.PRTC */
                    }
                }

                If ((Local2 <= 0x03E8))
                {
                    Local3 = (Arg1 << One)
                    Local3 |= One
                    ADDR = Local3
                    If ((Arg0 != RDQK))
                    {
                        If ((Arg0 != RCBT))
                        {
                            CMDB = Arg2
                        }
                    }

                    BDAT = Zero
                    PRTC = Arg0
                    Index (Local0, Zero) = SWTC (Arg0)
                    If ((DerefOf (Index (Local0, Zero)) == Zero))
                    {
                        If ((Arg0 == RDBL))
                        {
                            Index (Local0, One) = BCNT /* \_SB_.PCI0.SBRG.EC0_.BCNT */
                            Index (Local0, 0x02) = BDAT /* \_SB_.PCI0.SBRG.EC0_.BDAT */
                        }

                        If ((Arg0 == RDWD))
                        {
                            Index (Local0, One) = 0x02
                            Index (Local0, 0x02) = DT2B /* \_SB_.PCI0.SBRG.EC0_.DT2B */
                        }

                        If ((Arg0 == RDBT))
                        {
                            Index (Local0, One) = One
                            Index (Local0, 0x02) = DAT0 /* \_SB_.PCI0.SBRG.EC0_.DAT0 */
                        }

                        If ((Arg0 == RCBT))
                        {
                            Index (Local0, One) = One
                            Index (Local0, 0x02) = DAT0 /* \_SB_.PCI0.SBRG.EC0_.DAT0 */
                        }
                    }
                }

                Release (MUEC)
            }

            Return (Local0)
        }

        Method (STC5, 1, Serialized)
        {
            If (ECAV ())
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Arg0
                    CMD1 = 0xC5
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = CDT1 /* \_SB_.PCI0.SBRG.EC0_.CDT1 */
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }
            }

            Return (Ones)
        }

        Method (SPIN, 2, Serialized)
        {
            Local0 = Arg0
            If (Arg1)
            {
                Local0 |= 0x20
            }
            Else
            {
                Local0 |= 0x40
            }

            STC5 (Local0)
            Return (One)
        }

        Method (RPIN, 1, Serialized)
        {
            Local0 = (Arg0 & 0x1F)
            Local1 = STC5 (Local0)
            Return (Local1)
        }

        OperationRegion (KAID, SystemIO, 0x025C, One)
        Field (KAID, ByteAcc, NoLock, Preserve)
        {
            AEID,   8
        }

        OperationRegion (KAIC, SystemIO, 0x025D, One)
        Field (KAIC, ByteAcc, NoLock, Preserve)
        {
            AEIC,   8
        }

        Method (WEIE, 0, Serialized)
        {
            Local0 = 0x4000
            Local1 = (AEIC & 0x02)
            While (((Local0 != Zero) && (Local1 == 0x02)))
            {
                Local1 = (AEIC & 0x02)
                Local0--
            }
        }

        Method (WEOF, 0, Serialized)
        {
            Local0 = 0x4000
            Local1 = (AEIC & One)
            While (((Local0 != Zero) && (Local1 == Zero)))
            {
                Local1 = (AEIC & One)
                Local0--
            }
        }

        Method (RFOV, 1, Serialized)
        {
            Local0 = Zero
            If ((Acquire (ASIO, 0xFFFF) == Zero))
            {
                WEIE ()
                AEIC = 0x83
                WEIE ()
                AEID = Arg0
                WEOF ()
                Local0 = AEID /* \_SB_.PCI0.SBRG.EC0_.AEID */
                WEIE ()
                Release (ASIO)
            }

            Return (Local0)
        }

        Method (WFOV, 2, Serialized)
        {
            If ((Acquire (ASIO, 0xFFFF) == Zero))
            {
                WEIE ()
                AEIC = 0x84
                WEIE ()
                AEID = Arg0
                WEIE ()
                AEID = Arg1
                Release (ASIO)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (AC0)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Return (^^SBRG.EC0.ACAP ())
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (ACAP, 0, Serialized)
        {
            If (ACPS ())
            {
                ACPF = One
                Local0 = 0x58
            }
            Else
            {
                ACPF = Zero
                Local0 = 0x57
            }

            Return (ACPF) /* \_SB_.ACPF */
        }
    }

    Scope (_SB.PCI0)
    {
        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                DCPF = ^^SBRG.EC0.DCPS (Zero)
                If (^^SBRG.EC0.BATP (Zero))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (LOW2, 0x012C)
            Name (DVOT, 0x0E)
            Name (PUNT, One)
            Name (LFCC, 0x1770)
            Name (NBIF, Package (0x0D)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                "", 
                "", 
                "", 
                ""
            })
            Name (PBIF, Package (0x0D)
            {
                One, 
                0x1770, 
                0x1770, 
                One, 
                0x39D0, 
                0x0258, 
                0x012C, 
                0x3C, 
                0x3C, 
                "M3N", 
                " ", 
                "LIon", 
                "ASUSTek"
            })
            Name (PBST, Package (0x04)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Method (FBIF, 5, NotSerialized)
            {
                PUNT = Arg0
                Local1 = Arg1
                Local2 = Arg2
                If ((PUNT == Zero))
                {
                    Local1 *= 0x0A
                    Local2 *= 0x0A
                }

                Index (PBIF, Zero) = Arg0
                Index (PBIF, One) = Local1
                Index (PBIF, 0x02) = Local2
                LFCC = Local2
                Index (PBIF, 0x03) = Arg3
                Index (PBIF, 0x04) = Arg4
                Divide (Local1, 0x0A, Local3, Local5)
                Index (PBIF, 0x05) = Local5
                Divide (Local1, 0x64, Local3, Local6)
                Index (PBIF, 0x06) = Local6
                LOW2 = Local6
                Divide (Local1, 0x64, Local3, Local7)
                Index (PBIF, 0x07) = Local7
                Index (PBIF, 0x08) = Local7
            }

            Method (CBIF, 0, NotSerialized)
            {
                If (PUNT)
                {
                    Local0 = DerefOf (Index (PBIF, 0x04))
                    Local0 += 0x01F4
                    Divide (Local0, 0x03E8, Local1, DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, Zero) = Zero
                    Index (PBIF, One) = (DerefOf (Index (PBIF, One)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, 0x02) = (DerefOf (Index (PBIF, 0x02)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, 0x05) = (DerefOf (Index (PBIF, 0x05)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, 0x06) = (DerefOf (Index (PBIF, 0x06)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, 0x07) = (DerefOf (Index (PBIF, 0x07)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBIF, 0x08) = (DerefOf (Index (PBIF, 0x08)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                If (!^^SBRG.EC0.BATP (Zero))
                {
                    Return (NBIF) /* \_SB_.PCI0.BAT0.NBIF */
                }

                If ((^^SBRG.EC0.GBTT (Zero) == 0xFF))
                {
                    Return (NBIF) /* \_SB_.PCI0.BAT0.NBIF */
                }

                BATO ()
                BATS (Zero)
                Index (PBIF, 0x09) = ^^SBRG.EC0.BIF9 ()
                Name (ONAM, "ASUSTek")
                Index (PBIF, 0x0C) = ONAM /* \_SB_.PCI0.BAT0._BIF.ONAM */
                Local0 = ^^SBRG.EC0.BIF0 ()
                Local1 = ^^SBRG.EC0.BIF1 ()
                Local2 = ^^SBRG.EC0.BIF2 ()
                Local3 = ^^SBRG.EC0.BIF3 ()
                Local4 = ^^SBRG.EC0.BIF4 ()
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                If ((Local4 != Ones))
                                {
                                    FBIF (Local0, Local1, Local2, Local3, Local4)
                                    CBIF ()
                                }
                            }
                        }
                    }
                }

                If ((PUNT == Zero))
                {
                    Local2 *= 0x0A
                }

                LFCC = Local2
                BATR ()
                Return (PBIF) /* \_SB_.PCI0.BAT0.PBIF */
            }

            Method (FBST, 4, NotSerialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local0 = Zero
                If (^^SBRG.EC0.ACAP ())
                {
                    Local0 = One
                }

                If (Local0)
                {
                    If (CHGS (Zero))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = One
                }

                If (BLLO)
                {
                    Local2 = (One << 0x02)
                    Local0 |= Local2
                }

                If (((^^SBRG.EC0.EB0S & 0x08) <= 0x08))
                {
                    Local2 = (One << 0x02)
                    Local0 |= Local2
                }

                If ((Local1 >= 0x8000))
                {
                    Local1 -= 0xFFFF
                }

                Local2 = Arg2
                If ((PUNT == Zero))
                {
                    Local1 *= DVOT /* \_SB_.PCI0.BAT0.DVOT */
                    Local2 *= 0x0A
                }

                Local3 = (Local0 & 0x02)
                If (!Local3)
                {
                    Local3 = (LFCC - Local2)
                    Divide (LFCC, 0xC8, Local4, Local5)
                    If ((Local3 < Local5))
                    {
                        Local2 = LFCC /* \_SB_.PCI0.BAT0.LFCC */
                    }
                }
                Else
                {
                    Divide (LFCC, 0xC8, Local4, Local5)
                    Local4 = (LFCC - Local5)
                    If ((Local2 > Local4))
                    {
                        Local2 = Local4
                    }
                }

                If (!^^SBRG.EC0.ACAP ())
                {
                    Divide (Local2, MBLF, Local3, Local4)
                    If ((Local1 < Local4))
                    {
                        Local1 = Local4
                    }
                }

                Index (PBST, Zero) = Local0
                Index (PBST, One) = Local1
                Index (PBST, 0x02) = Local2
                Index (PBST, 0x03) = Arg3
            }

            Method (CBST, 0, NotSerialized)
            {
                If (PUNT)
                {
                    Index (PBST, One) = (DerefOf (Index (PBST, One)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                    Index (PBST, 0x02) = (DerefOf (Index (PBST, 0x02)) * DVOT) /* \_SB_.PCI0.BAT0.DVOT */
                }
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Index (PBST, Zero) = Zero
                Index (PBST, One) = Ones
                Index (PBST, 0x02) = Ones
                Index (PBST, 0x03) = Ones
                If (!^^SBRG.EC0.BATP (Zero))
                {
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                If ((^^SBRG.EC0.GBTT (Zero) == 0xFF))
                {
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                If (MES4)
                {
                    MES4--
                    Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
                }

                BATO ()
                BATS (Zero)
                Local0 = ^^SBRG.EC0.BSTS ()
                Local1 = ^^SBRG.EC0.BCRT ()
                Local2 = ^^SBRG.EC0.BRCP ()
                Local3 = ^^SBRG.EC0.BVOT ()
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                FBST (Local0, Local1, Local2, Local3)
                                CBST ()
                            }
                        }
                    }
                }

                BATR ()
                Return (PBST) /* \_SB_.PCI0.BAT0.PBST */
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (B0CR, Zero)
        Name (B1CR, Zero)
        Method (GGCC, 1, Serialized)
        {
            BATO ()
            BATS (Arg0)
            Local0 = ^SBRG.EC0.BCRT ()
            BATR ()
            If ((Local0 == Ones))
            {
                If (Arg0)
                {
                    Local0 = B1CR /* \_SB_.PCI0.B1CR */
                }
                Else
                {
                    Local0 = B0CR /* \_SB_.PCI0.B0CR */
                }
            }

            Local1 = (Local0 & 0x8000)
            If (Local1)
            {
                Local0 = Zero
            }

            If (Arg0)
            {
                B1CR = Local0
            }
            Else
            {
                B0CR = Local0
            }

            Return (Local0)
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Name (BADR, 0x0B)
        Name (CADR, 0x09)
        Name (SADR, 0x0A)
        Method (ALMH, 1, NotSerialized)
        {
            If ((Arg0 == BADR))
            {
                NBAT (0x80)
            }
        }

        Method (BIFW, 1, NotSerialized)
        {
            Local0 = SMBR (RDWD, BADR, Arg0)
            Local1 = DerefOf (Index (Local0, Zero))
            If (Local1)
            {
                Return (Ones)
            }
            Else
            {
                Return (DerefOf (Index (Local0, 0x02)))
            }
        }

        Method (BIF0, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1MD /* \_SB_.PCI0.SBRG.EC0_.B1MD */
                }
                Else
                {
                    Local0 = B0MD /* \_SB_.PCI0.SBRG.EC0_.B0MD */
                }

                If ((Local0 != 0xFFFF))
                {
                    Local1 = (Local0 >> 0x0F)
                    Local1 &= One
                    Local0 = (Local1 ^ One)
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF1, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1DC /* \_SB_.PCI0.SBRG.EC0_.B1DC */
                }
                Else
                {
                    Local0 = B0DC /* \_SB_.PCI0.SBRG.EC0_.B0DC */
                }

                Local0 &= 0xFFFF
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF2, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1FC /* \_SB_.PCI0.SBRG.EC0_.B1FC */
                }
                Else
                {
                    Local0 = B0FC /* \_SB_.PCI0.SBRG.EC0_.B0FC */
                }

                Local0 &= 0xFFFF
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF3, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1MD /* \_SB_.PCI0.SBRG.EC0_.B1MD */
                }
                Else
                {
                    Local0 = B0MD /* \_SB_.PCI0.SBRG.EC0_.B0MD */
                }

                If ((Local0 != 0xFFFF))
                {
                    Local0 >>= 0x09
                    Local0 &= One
                    Local0 ^= One
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF4, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1DV /* \_SB_.PCI0.SBRG.EC0_.B1DV */
                }
                Else
                {
                    Local0 = B0DV /* \_SB_.PCI0.SBRG.EC0_.B0DV */
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF9, 0, NotSerialized)
        {
            Name (BSTR, Buffer (0x20) {})
            Local0 = SMBR (RDBL, BADR, 0x21)
            If ((DerefOf (Index (Local0, Zero)) != Zero))
            {
                BSTR = MNAM /* \_SB_.MNAM */
                Index (BSTR, 0x04) = Zero
            }
            Else
            {
                BSTR = DerefOf (Index (Local0, 0x02))
                Index (BSTR, DerefOf (Index (Local0, One))) = Zero
            }

            Return (BSTR) /* \_SB_.PCI0.SBRG.EC0_.BIF9.BSTR */
        }

        Method (BIFA, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1SN /* \_SB_.PCI0.SBRG.EC0_.B1SN */
                }
                Else
                {
                    Local0 = B0SN /* \_SB_.PCI0.SBRG.EC0_.B0SN */
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BSTS, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1ST /* \_SB_.PCI0.SBRG.EC0_.B1ST */
                }
                Else
                {
                    Local0 = B0ST /* \_SB_.PCI0.SBRG.EC0_.B0ST */
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BCRT, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1CC /* \_SB_.PCI0.SBRG.EC0_.B1CC */
                }
                Else
                {
                    Local0 = B0CC /* \_SB_.PCI0.SBRG.EC0_.B0CC */
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BRCP, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1RC /* \_SB_.PCI0.SBRG.EC0_.B1RC */
                }
                Else
                {
                    Local0 = B0RC /* \_SB_.PCI0.SBRG.EC0_.B0RC */
                }

                If ((Local0 == 0xFFFF))
                {
                    Local0 = Ones
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BVOT, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1VL /* \_SB_.PCI0.SBRG.EC0_.B1VL */
                }
                Else
                {
                    Local0 = B0VL /* \_SB_.PCI0.SBRG.EC0_.B0VL */
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }
    }

    Scope (_SB.PCI0)
    {
        Method (CHGS, 1, Serialized)
        {
            Local0 = ^SBRG.EC0.BCHG (Arg0)
            Return (Local0)
        }

        Name (BSLF, Zero)
        Method (BATS, 1, Serialized)
        {
            If (Arg0)
            {
                BSLF = One
            }
            Else
            {
                BSLF = Zero
            }
        }

        Mutex (MMPX, 0x00)
        Method (BATO, 0, Serialized)
        {
            Acquire (MMPX, 0xFFFF)
        }

        Method (BATR, 0, Serialized)
        {
            Release (MMPX)
        }

        Name (BLLO, Zero)
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (_QA1, 0, NotSerialized)  // _Qxx: EC Query
        {
            DCPF = DCPS (Zero)
            If (DCPF)
            {
                Sleep (0x07D0)
            }

            Notify (BAT0, 0x80) // Status Change
            Notify (BAT0, 0x81) // Information Change
        }

        Method (_QA5, 0, NotSerialized)  // _Qxx: EC Query
        {
            BLLO = One
            If (ATKP)
            {
                Notify (ATKD, 0x6E) // Reserved
            }
            Else
            {
                If (BATP (Zero))
                {
                    Notify (BAT0, 0x80) // Status Change
                }
            }
        }

        Method (_QA3, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (BATP (Zero))
            {
                Local0 = BCLE (Zero)
                If ((Local0 == Zero))
                {
                    Notify (BAT0, 0x80) // Status Change
                }
                Else
                {
                    Notify (BAT0, 0x81) // Information Change
                    Notify (AC0, 0x80) // Status Change
                }
            }
        }

        Method (BATP, 1, Serialized)
        {
            If (Arg0)
            {
                Return (DCP2) /* \_SB_.DCP2 */
            }
            Else
            {
                Return (DCPF) /* \_SB_.DCPF */
            }
        }

        Method (NBAT, 1, NotSerialized)
        {
            If (BATP (Zero))
            {
                Notify (BAT0, Arg0)
            }
        }
    }

    Scope (\)
    {
        Name (MES4, Zero)
        Method (OEMS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                If ((OSFG <= OSME))
                {
                    \_SB.WIDE = One
                }
                Else
                {
                    \_SB.WIDE = Zero
                }
            }

            \_SB.PCI0.SBRG.EC0.EC0S (Arg0)
            \_SB.SLPN = Arg0
            DBG8 = (Arg0 + 0xD0)
            \_SB.SLPT = Arg0
        }

        Method (OEMW, 1, NotSerialized)
        {
            \_SB.SLPT = Zero
            \_SB.PCI0.SBRG.EC0.EC0W (Arg0)
            If ((Arg0 == 0x04))
            {
                If ((OSFG <= OSME))
                {
                    MES4 = 0x02
                }
                Else
                {
                    MES4 = Zero
                }
            }

            If ((Arg0 == 0x03)) {}
            If ((Arg0 == 0x04))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            If (\_SB.BRST)
            {
                SGPL (0x32, One)
                SGPL (0xC2, One)
            }
            Else
            {
                SGPL (0x32, Zero)
                SGPL (0xC2, Zero)
            }

            DBG8 = (Arg0 + 0xF0)
            DBG8 = (Arg0 + 0xF0)
        }

        Method (OHWR, 0, Serialized)
        {
            Local0 = Zero
            Local0 |= 0x02
            Local0 |= 0x0400
            Local1 = \_SB.PCI0.SBRG.EC0.RPIN (0x27)
            If (Local1)
            {
                Local0 &= 0xFFFE
            }
            Else
            {
                Local0 |= One
            }

            If (\_SB.PCI0.PCE6.WLAN.MPDP ())
            {
                Local0 |= 0x80
            }

            If (\_SB.BTDP)
            {
                Local0 |= 0x0100
            }

            Return (Local0)
        }

        Method (ORST, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.WRST)
            {
                Local0 |= One
            }

            If (\_SB.BRST)
            {
                Local0 |= 0x02
            }

            Return (Local0)
        }

        Method (OWLD, 1, Serialized)
        {
            \_SB.WRST = Arg0
            SGPL (0xC1, Arg0)
            Arg0 ^= One
            If (((\_SB.ATKD.WAPF && 0x05) == Zero))
            {
                SGPL (0x0B, Arg0)
            }
        }

        Method (OBTD, 1, Serialized)
        {
            \_SB.BRST = Arg0
            SGPL (0x32, Arg0)
            SGPL (0xC2, Arg0)
        }

        Method (RGPL, 1, Serialized)
        {
            Local0 = Zero
            RWGP (Zero, Arg0, Local0)
            Return (Local0)
        }

        Method (SGPL, 2, Serialized)
        {
            RWGP (One, Arg0, Arg1)
        }

        Method (RWGP, 3, Serialized)
        {
            OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
            Field (PMIO, ByteAcc, NoLock, Preserve)
            {
                INPM,   8, 
                DAPM,   8
            }

            IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x24), 
                MMSO,   32
            }

            Local0 = MMSO /* \RWGP.MMSO */
            Local0 &= 0xFFFF0000
            Local0 += 0x0100
            Local0 += Arg1
            OperationRegion (ERMM, SystemMemory, Local0, One)
            Field (ERMM, AnyAcc, NoLock, Preserve)
            {
                GPIO,   6, 
                GPOO,   1, 
                GPII,   1
            }

            If ((Arg0 == Zero))
            {
                Arg2 = GPII /* \RWGP.GPII */
            }
            Else
            {
                GPOO = Arg2
            }
        }
    }

    Scope (\)
    {
        OperationRegion (GPSC, SystemIO, 0xB2, 0x02)
        Field (GPSC, ByteAcc, NoLock, Preserve)
        {
            SMCM,   8, 
            SMST,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SMCM = Arg0
        }

        Scope (_SB)
        {
        }

        Name (OS9X, One)
        Name (OS98, 0x02)
        Name (OSME, 0x04)
        Name (OS2K, 0x08)
        Name (OSXP, 0x10)
        Name (OSEG, 0x20)
        Name (OSVT, 0x40)
        Name (OSW7, 0x80)
        Method (MSOS, 0, NotSerialized)
        {
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Windows 2001"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2006"))
                {
                    OSFG = OSVT /* \OSVT */
                }

                If (_OSI ("Linux"))
                {
                    OSFG = OSEG /* \OSEG */
                }

                If (_OSI ("Windows 2009"))
                {
                    OSFG = OSW7 /* \OSW7 */
                }

                Return (OSFG) /* \OSFG */
            }
            Else
            {
                If (MCTH (_OS, "Microsoft Windows"))
                {
                    OSFG = OS98 /* \OS98 */
                }
                Else
                {
                    If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
                    {
                        OSFG = OSME /* \OSME */
                    }
                    Else
                    {
                        If (MCTH (_OS, "Microsoft Windows NT"))
                        {
                            OSFG = OS2K /* \OS2K */
                        }
                        Else
                        {
                            OSFG = OSXP /* \OSXP */
                        }
                    }
                }
            }

            Return (OSFG) /* \OSFG */
        }
    }

    Scope (\)
    {
        Name (TSP, 0x0A)
        Name (TC1, 0x02)
        Name (TC2, 0x0A)
    }

    Scope (_TZ)
    {
        Method (KELV, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFF)
            If ((Local0 >= 0x80))
            {
                Local0 -= 0x0100
                Local0 *= 0x0A
                Local0 -= 0x0AAC
                Return (Local0)
            }

            Local0 *= 0x0A
            Local0 += 0x0AAC
            Return (Local0)
        }

        Method (CELC, 1, NotSerialized)
        {
            Local0 = (Arg0 - 0x0AAC)
            Divide (Local0, 0x0A, Local1, Local0)
            Return (Local0)
        }

        Name (PLCY, Zero)
        ThermalZone (THRM)
        {
            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                RCRT ()
                Return (KELV (\_SB.TCRT))
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Local1 = 0x05
                While (Local1)
                {
                    Local0 = RTMP ()
                    If ((Local0 > \_SB.TCRT))
                    {
                        Local1--
                    }
                    Else
                    {
                        Local1 = Zero
                    }
                }

                Return (KELV (Local0))
            }

            Name (_PSL, Package (0x00) {})  // _PSL: Passive List
            Method (_TSP, 0, NotSerialized)  // _TSP: Thermal Sampling Period
            {
                Local0 = (TSP * 0x0A)
                Return (Local0)
            }

            Method (_TC1, 0, NotSerialized)  // _TC1: Thermal Constant 1
            {
                Return (TC1) /* \TC1_ */
            }

            Method (_TC2, 0, NotSerialized)  // _TC2: Thermal Constant 2
            {
                Return (TC2) /* \TC2_ */
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                RPSV ()
                If (PLCY)
                {
                    Return (KELV (\_SB.PPSV))
                }
                Else
                {
                    Return (KELV (\_SB.TPSV))
                }
            }

            Method (_SCP, 1, NotSerialized)  // _SCP: Set Cooling Policy
            {
                PLCY = Zero
                Notify (THRM, 0x81) // Thermal Trip Point Change
            }
        }
    }

    Scope (_TZ)
    {
        Name (ATMP, 0x3C)
        Name (LTMP, 0x3C)
        Name (FANS, Zero)
        Method (RTMP, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.EC0.ECPU
                If ((Local0 < 0x80))
                {
                    LTMP = Local0
                }
            }

            Return (LTMP) /* \_TZ_.LTMP */
        }

        Method (RCRT, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.EC0.ECRT
                If ((Local0 < 0x80))
                {
                    \_SB.TCRT = Local0
                }
            }
        }

        Method (RPSV, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.EC0.EPSV
                If ((Local0 < 0x80))
                {
                    \_SB.TPSV = Local0
                }
            }
        }

        Method (RFAN, 1, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.EC0.TACH (Arg0)
                Divide (Local0, 0x64, Local1, Local0)
                Local0 += One
                If ((Local0 <= 0x3C))
                {
                    FANS = Local0
                }
                Else
                {
                    Local0 = FANS /* \_TZ_.FANS */
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (RFSE, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local1 = \_SB.PCI0.SBRG.EC0.RFOV (Zero)
                If ((Local1 < 0x80))
                {
                    If ((Local1 < 0x0A))
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Local0 = One
                    }
                }
                Else
                {
                    If ((Local1 < 0xF5))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        Local0 = 0x0F
                    }
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (TCHG, 0, NotSerialized)
        {
        }

        Method (THDL, 0, NotSerialized)
        {
        }

        Method (TMSS, 1, NotSerialized)
        {
        }

        Method (TMSW, 1, NotSerialized)
        {
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x04, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            SPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
            OEMS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        SWAK (Arg0)
        \_SB.PCI0.NWAK (Arg0)
        OEMW (Arg0)
    }
}



ECDT
----
[000h 0000   4]                    Signature : "ECDT"    [Embedded Controller Boot Resources Table]
[004h 0004   4]                 Table Length : 000000C1
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 00
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI."
[020h 0032   4]        Asl Compiler Revision : 00000004


[024h 0036  12]      Command/Status Register : [Generic Address Structure]
[024h 0036   1]                     Space ID : 01 [SystemIO]
[025h 0037   1]                    Bit Width : 08
[026h 0038   1]                   Bit Offset : 00
[027h 0039   1]         Encoded Access Width : 00 [Undefined/Legacy]
[028h 0040   8]                      Address : 0000000000000066

[030h 0048  12]                Data Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 01 [SystemIO]
[031h 0049   1]                    Bit Width : 08
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 00 [Undefined/Legacy]
[034h 0052   8]                      Address : 0000000000000062

[03Ch 0060   4]                          UID : 00000000
[040h 0064   1]                   GPE Number : 03
[041h 0065  19]                     Namepath : "\_SB.PCI0.SBRG.EC0"

Raw Table Data: Length 193 (0xC1)

  0000: 45 43 44 54 C1 00 00 00 01 00 5F 41 53 55 53 5F  ECDT......_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 2E  Notebook. ..AMI.
  0020: 04 00 00 00 01 08 00 00 66 00 00 00 00 00 00 00  ........f.......
  0030: 01 08 00 00 62 00 00 00 00 00 00 00 00 00 00 00  ....b...........
  0040: 03 5C 5F 53 42 2E 50 43 49 30 2E 53 42 52 47 2E  .\_SB.PCI0.SBRG.
  0050: 45 43 30 00 00 00 00 00 00 00 00 00 00 00 00 00  EC0.............
  0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00C0: 00                                               .


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : FA
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : 9FA42F80
[028h 0040   4]                 DSDT Address : 9F8C0168
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : B7
[035h 0053   1]           ACPI Disable Value : B8
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0002
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000385A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 000000009F8C0168
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

  0000: 46 41 43 50 F4 00 00 00 04 FA 5F 41 53 55 53 5F  FACP......_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  Notebook. ..AMI 
  0020: 13 00 01 00 80 2F A4 9F 68 01 8C 9F 01 02 09 00  ...../..h.......
  0030: B2 00 00 00 B7 B8 00 00 00 08 00 00 00 00 00 00  ................
  0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  ................
  0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00   ...............
  0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 02 00 00  e...........2...
  0070: A5 85 03 00 01 08 00 00 F9 0C 00 00 00 00 00 00  ................
  0080: 06 00 00 00 00 00 00 00 00 00 00 00 68 01 8C 9F  ............h...
  0090: 00 00 00 00 01 20 00 00 00 08 00 00 00 00 00 00  ..... ..........
  00A0: 01 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  ................
  00B0: 04 08 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................
  00C0: 00 00 00 00 01 08 00 00 00 00 00 00 00 00 00 00  ................
  00D0: 01 20 00 00 08 08 00 00 00 00 00 00 01 40 00 00  . ...........@..
  00E0: 20 08 00 00 00 00 00 00 01 00 00 00 00 00 00 00   ...............
  00F0: 00 00 00 00                                      ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 00
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000004

[024h 0036   4]            Hardware Block ID : FFFFFFFF

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 00 5F 41 53 55 53 5F  HPET8....._ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  Notebook. ..AMI 
  0020: 04 00 00 00 FF FF FF FF 00 40 00 00 00 00 D0 FE  .........@......
  0030: 00 00 00 00 00 EE 37 00                          ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9F
[00Ah 0010   6]                       Oem ID : "A M I "
[010h 0016   8]                 Oem Table ID : "GMCH945."
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 9F 41 20 4D 20 49 20  MCFG<.....A M I 
  0010: 47 4D 43 48 39 34 35 2E 09 20 07 01 4D 53 46 54  GMCH945.. ..MSFT
  0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  ................
  0030: 00 00 00 00 00 00 00 FF 00 00 00 00              ............


RSDP
----
[000h 0000   8]                    Signature : "RSD PTR "
[008h 0008   1]                     Checksum : 92
[009h 0009   6]                       Oem ID : "_ASUS_"
[00Fh 0015   1]                     Revision : 02
[010h 0016   4]                 RSDT Address : 9F8C0028
[014h 0020   4]                       Length : 00000024
[018h 0024   8]                 XSDT Address : 000000009F8C0070
[020h 0032   1]            Extended Checksum : 41
[021h 0033   3]                     Reserved : 000000

Raw Table Data: Length 36 (0x24)

  0000: 52 53 44 20 50 54 52 20 92 5F 41 53 55 53 5F 02  RSD PTR ._ASUS_.
  0010: 28 00 8C 9F 24 00 00 00 70 00 8C 9F 00 00 00 00  (...$...p.......
  0020: 41 00 00 00                                      A...


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 3F
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]       ACPI Table Address   0 : 9F8C00E0
[028h 0040   4]       ACPI Table Address   1 : 9F8CC490
[02Ch 0044   4]       ACPI Table Address   2 : 9F8CC508
[030h 0048   4]       ACPI Table Address   3 : 9F8CC5D0
[034h 0052   4]       ACPI Table Address   4 : 9F8CC610
[038h 0056   4]       ACPI Table Address   5 : 9F8CC648
[03Ch 0060   4]       ACPI Table Address   6 : 9F8CCD78
[040h 0064   4]       ACPI Table Address   7 : 9F8CE688

Raw Table Data: Length 68 (0x44)

  0000: 52 53 44 54 44 00 00 00 01 3F 5F 41 53 55 53 5F  RSDTD....?_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 4D 53 46 54  Notebook. ..MSFT
  0020: 13 00 01 00 E0 00 8C 9F 90 C4 8C 9F 08 C5 8C 9F  ................
  0030: D0 C5 8C 9F 10 C6 8C 9F 48 C6 8C 9F 78 CD 8C 9F  ........H...x...
  0040: 88 E6 8C 9F                                      ....


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 26
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "ASUS"
[020h 0032   4]        Asl Compiler Revision : 00000001


[024h 0036   4]                Subtable Type : 00000000 [Public Key Structure]
[028h 0040   4]                       Length : 0000009C

[02Ch 0044   1]                     Key Type : 06
[02Dh 0045   1]                      Version : 02
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]                    Algorithm : 00002400
[034h 0052   4]                        Magic : "RSA1"
[038h 0056   4]                    BitLength : 00000400
[03Ch 0060   4]                     Exponent : 00010001
[040h 0064 128]                      Modulus : 83 A4 C2 5B 5A 18 2A FE 79 59 DB D9 7E EA 3D 26 \
                                               20 88 CE 6B D0 EA 79 D3 85 2B 95 00 9A C4 55 BF \
                                               EA 39 A0 8F BE 23 61 59 60 73 C8 2C 5B E5 A8 8A \
                                               7F 74 F5 BF CB 00 2D 99 76 AB 94 8C E3 CF 9E 47 \
                                               28 61 91 B2 B5 F8 C8 DB D9 87 04 8A 48 EB 9B 7F \
                                               B3 38 0A FB 6F DD 86 75 A5 42 49 33 E2 2E 39 BE \
                                               64 8E 49 7D 78 DD 83 36 62 88 67 02 77 79 AF 3B \
                                               2F D4 04 53 F9 0E DA C5 38 F5 4B 7F 9C 69 63 B1

[0C0h 0192   4]                Subtable Type : 00000001 [Windows Marker Structure]
[0C4h 0196   4]                       Length : 000000B6

[0C8h 0200   4]                      Version : 00020000
[0CCh 0204   6]                       Oem ID : "_ASUS_"
[0D2h 0210   8]                 Oem Table ID : "Notebook"
[0DAh 0218   8]                 Windows Flag : "WINDOWS "
[0E2h 0226   4]                 SLIC Version : 00020001
[0E6h 0230  16]                     Reserved : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[0F6h 0246 128]                    Signature : 9E D5 31 E9 0B 0F 73 70 D1 14 24 5D 8E 2C 20 5C \
                                               93 CF C6 6A EE 30 93 12 AA 53 BA 3B 8F BE 76 9A \
                                               ED AD 91 F3 7E 5E 31 01 F6 A3 B2 E8 28 B5 20 F4 \
                                               DE 57 92 E4 51 42 0D 94 E3 D8 33 50 8D E5 66 D2 \
                                               47 94 AA 57 B7 CB C2 9A 6E B1 9D 71 24 AD 33 0D \
                                               3C A8 26 71 3D B9 14 AA 1F A1 05 1A 8A FB 63 E6 \
                                               DD 7F 98 E2 5B E1 6B 8E 47 E1 F7 18 12 B1 7E 50 \
                                               B3 71 05 A7 EF 12 9E C7 09 AD 29 46 DD 75 52 E2

Raw Table Data: Length 374 (0x176)

  0000: 53 4C 49 43 76 01 00 00 01 26 5F 41 53 55 53 5F  SLICv....&_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 53 55 53  Notebook. ..ASUS
  0020: 01 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  ................
  0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  .$..RSA1........
  0040: 83 A4 C2 5B 5A 18 2A FE 79 59 DB D9 7E EA 3D 26  ...[Z.*.yY..~.=&
  0050: 20 88 CE 6B D0 EA 79 D3 85 2B 95 00 9A C4 55 BF   ..k..y..+....U.
  0060: EA 39 A0 8F BE 23 61 59 60 73 C8 2C 5B E5 A8 8A  .9...#aY`s.,[...
  0070: 7F 74 F5 BF CB 00 2D 99 76 AB 94 8C E3 CF 9E 47  .t....-.v......G
  0080: 28 61 91 B2 B5 F8 C8 DB D9 87 04 8A 48 EB 9B 7F  (a..........H...
  0090: B3 38 0A FB 6F DD 86 75 A5 42 49 33 E2 2E 39 BE  .8..o..u.BI3..9.
  00A0: 64 8E 49 7D 78 DD 83 36 62 88 67 02 77 79 AF 3B  d.I}x..6b.g.wy.;
  00B0: 2F D4 04 53 F9 0E DA C5 38 F5 4B 7F 9C 69 63 B1  /..S....8.K..ic.
  00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 5F 41 53 55  ............_ASU
  00D0: 53 5F 4E 6F 74 65 62 6F 6F 6B 57 49 4E 44 4F 57  S_NotebookWINDOW
  00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  S ..............
  00F0: 00 00 00 00 00 00 9E D5 31 E9 0B 0F 73 70 D1 14  ........1...sp..
  0100: 24 5D 8E 2C 20 5C 93 CF C6 6A EE 30 93 12 AA 53  $]., \...j.0...S
  0110: BA 3B 8F BE 76 9A ED AD 91 F3 7E 5E 31 01 F6 A3  .;..v.....~^1...
  0120: B2 E8 28 B5 20 F4 DE 57 92 E4 51 42 0D 94 E3 D8  ..(. ..W..QB....
  0130: 33 50 8D E5 66 D2 47 94 AA 57 B7 CB C2 9A 6E B1  3P..f.G..W....n.
  0140: 9D 71 24 AD 33 0D 3C A8 26 71 3D B9 14 AA 1F A1  .q$.3.<.&q=.....
  0150: 05 1A 8A FB 63 E6 DD 7F 98 E2 5B E1 6B 8E 47 E1  ....c.....[.k.G.
  0160: F7 18 12 B1 7E 50 B3 71 05 A7 EF 12 9E C7 09 AD  ....~P.q........
  0170: 29 46 DD 75 52 E2                                )F.uR.


SSDT1
-----
DefinitionBlock ("ssdt1.aml", "SSDT", 1, "AMD   ", "POWERNOW", 0x00000001)
{

    External (_PR_.P000, DeviceObj)
    External (_PR_.P001, DeviceObj)

    Scope (\_PR.P000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x07)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000076C, 
                0x0000241D, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00002198, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00001D1F, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00001950, 
                0x00000000, 
                0x00000000, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001554, 
                0x00000000, 
                0x00000000, 
                0x00000004, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000132C, 
                0x00000000, 
                0x00000000, 
                0x00000005, 
                0x00000005
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000010D8, 
                0x00000000, 
                0x00000000, 
                0x00000006, 
                0x00000006
            }
        })
        Name (XPSS, Package (0x07)
        {
            Package (0x08)
            {
                0x0000076C, 
                0x0000241D, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x00002198, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00001D1F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00001950, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001554, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000132C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x000010D8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (0x00)
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001771, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x07)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000076C, 
                0x0000241D, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00002198, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00001D1F, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00001950, 
                0x00000000, 
                0x00000000, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001554, 
                0x00000000, 
                0x00000000, 
                0x00000004, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000132C, 
                0x00000000, 
                0x00000000, 
                0x00000005, 
                0x00000005
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000010D8, 
                0x00000000, 
                0x00000000, 
                0x00000006, 
                0x00000006
            }
        })
        Name (XPSS, Package (0x07)
        {
            Package (0x08)
            {
                0x0000076C, 
                0x0000241D, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x00002198, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00001D1F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00001950, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001554, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x0000132C, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000320, 
                0x000010D8, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (0x00)
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001771, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
    }
}



SSDT2
-----
DefinitionBlock ("ssdt2.aml", "SSDT", 2, "AMD", "ALIB", 0x00000001)
{
    /*
     * iASL Warning: There were 1 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIC, MethodObj)    // Warning: Unresolved method, guessing 6 arguments


    Scope (\_SB)
    {
        Name (A001, 0x06)
        Name (AD01, 0xE0000000)
        Alias (AD01, A091)
        Name (AD07, Package (0x08)
        {
            Buffer (0x0A)
            {
                /* 0000 */  0x08, 0x0F, 0x00, 0x0F, 0x00, 0x31, 0x01, 0x03,  /* .....1.. */
                /* 0008 */  0x02, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x04, 0x04, 0x04, 0x04, 0x01, 0x30, 0x01, 0x00,  /* .....0.. */
                /* 0008 */  0x02, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x05, 0x05, 0x05, 0x05, 0x02, 0x30, 0x01, 0x00,  /* .....0.. */
                /* 0008 */  0x02, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x06, 0x06, 0x06, 0x06, 0x03, 0x30, 0x01, 0x00,  /* .....0.. */
                /* 0008 */  0x02, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x07, 0x07, 0x07, 0x07, 0x04, 0x30, 0x01, 0x00,  /* .....0.. */
                /* 0008 */  0x02, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x03, 0x00, 0x03, 0x00, 0x30, 0x01, 0x00,  /* .....0.. */
                /* 0008 */  0x02, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }
        })
        Alias (AD07, A092)
        Name (A093, Buffer (0x0100) {})
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x01))
            {
                Return (A035 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (A037 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (A048 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (A073 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (A094 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (A077 (Arg1))
            }

            Return (0x00)
        }

        Method (A094, 0, Serialized)
        {
            Return (0x00)
        }

        Method (A008, 2, Serialized)
        {
            Local0 = (A091 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A095, SystemMemory, Local0, 0x04)
            Field (A095, DWordAcc, NoLock, Preserve)
            {
                A096,   32
            }

            Return (A096) /* \_SB_.A008.A096 */
        }

        Method (A009, 3, Serialized)
        {
            Local0 = (A091 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A095, SystemMemory, Local0, 0x04)
            Field (A095, DWordAcc, NoLock, Preserve)
            {
                A096,   32
            }

            A096 = Arg2
        }

        Method (A058, 4, Serialized)
        {
            Local0 = A008 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A009 (Arg0, Arg1, Local0)
        }

        Mutex (A097, 0x00)
        Method (A059, 2, NotSerialized)
        {
            Acquire (A097, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A009 (Local0, 0xE0, Arg1)
            Local0 = A008 (Local0, 0xE4)
            Release (A097)
            Return (Local0)
        }

        Method (A098, 3, NotSerialized)
        {
            Acquire (A097, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A009 (Local0, 0xE0, Arg1)
            A009 (Local0, 0xE4, Arg2)
            Release (A097)
        }

        Method (A056, 4, NotSerialized)
        {
            Local0 = A059 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A098 (Arg0, Arg1, Local0)
        }

        Mutex (A099, 0x00)
        Method (A016, 3, NotSerialized)
        {
            Acquire (A099, 0xFFFF)
            A009 (Arg0, Arg1, Arg2)
            Local0 = A008 (Arg0, (Arg1 + 0x04))
            Release (A099)
            Return (Local0)
        }

        Method (A049, 4, NotSerialized)
        {
            Acquire (A099, 0xFFFF)
            A009 (Arg0, Arg1, Arg2)
            A009 (Arg0, (Arg1 + 0x04), Arg3)
            Release (A099)
        }

        Method (A017, 5, NotSerialized)
        {
            Local0 = A016 (Arg0, Arg1, Arg2)
            Local0 = ((Local0 & Arg3) | Arg4)
            A049 (Arg0, Arg1, Arg2, Local0)
        }

        Method (A081, 1, NotSerialized)
        {
            Return (DerefOf (Index (A092, Arg0)))
        }

        Method (A065, 2, NotSerialized)
        {
            Local1 = 0x34
            If ((A008 (Arg0, 0x00) == 0xFFFFFFFF))
            {
                Return (0x00)
            }

            Local0 = 0x01
            While ((Local0 == 0x01))
            {
                Local1 = (A008 (Arg0, Local1) & 0xFF)
                If ((Local1 == 0x00))
                {
                    Break
                }

                If (((A008 (Arg0, Local1) & 0xFF) == Arg1))
                {
                    Local0 = 0x00
                }
                Else
                {
                    Local1++
                }
            }

            Return (Local1)
        }

        Method (A064, 2, Serialized)
        {
            OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
            Field (PMIO, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
            {
                Offset (0xE0), 
                ABAR,   32
            }

            OperationRegion (ACFG, SystemIO, ABAR, 0x08)
            Field (ACFG, DWordAcc, NoLock, Preserve)
            {
                ABIX,   32, 
                ABDA,   32
            }

            Local0 = 0x00
            If ((Arg1 == 0x00))
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A064.ABDA */
                Return (Local0)
            }
            Else
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A064.ABDA */
                Local0 = ((Local0 & 0xFFFFFFFC) | Arg0)
                ABDA = Local0
            }
        }

        Method (A087, 1, NotSerialized)
        {
            Local0 = A016 (0x00, 0x60, 0xCD)
            Arg0++
            Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                 & 0x01000000))
            Local0 = ((Local0 & 0xFD00FFFF) | (Arg0 << 0x10))
            A049 (0x00, 0x60, 0xCD, Local0)
            Local0 = A016 (0x00, 0x60, 0xCE)
            Return (Local0)
        }

        Method (A088, 3, NotSerialized)
        {
            Local0 = A016 (0x00, 0x60, 0xCD)
            Local1 = (Arg1 & 0xFFFF)
            Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                 & 0x01000000))
            Local0 = ((Local0 & 0xFD000000) | (Arg0 << 0x10))
            Local0 |= 0x02000000
            Local0 |= Local1
            A049 (0x00, 0x60, 0xCD, Local0)
            If ((Arg2 == 0x01))
            {
                Local1 = (Arg1 >> 0x10)
                Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                     & 0x01000000))
                Local0 = ((Local0 & 0xFF000000) | ((Arg0 + 0x01) << 0x10
                    ))
                Local0 |= Local1
                A049 (0x00, 0x60, 0xCD, Local0)
            }
        }

        Method (A011, 2, NotSerialized)
        {
            Local0 = ((Arg0 << 0x03) | 0x01)
            A088 (0x03, Local0, 0x01)
            If ((Arg1 && 0x01))
            {
                While (((A087 (0x03) & 0x02) != 0x02)) {}
            }

            If ((Arg1 && 0x02))
            {
                While (((A087 (0x03) & 0x04) != 0x04)) {}
            }

            A088 (0x03, 0x00, 0x01)
        }

        Method (A010, 2, NotSerialized)
        {
            A088 (0x0B, Arg0, 0x00)
            A088 (0x05, Arg1, 0x01)
        }

        Method (A007, 1, NotSerialized)
        {
            A088 (0x0B, Arg0, 0x00)
            Local0 = A087 (0x05)
            Return (Local0)
        }

        Method (A089, 1, NotSerialized)
        {
            Local0 = ((Arg0 & 0xFF) | 0x01865000)
            Local1 = ((Arg0 & 0xFFFFFF00) | 0x04)
            Local2 = ((0x03 << 0x1E) | (0x01 << 0x12))
            A010 (0x8600, Local0)
            A010 (0x8604, Local1)
            A010 (0x8608, Local2)
            If (((Arg0 >> 0x10) == 0xFE00))
            {
                A011 (0x0D, 0x03)
            }

            If (((Arg0 >> 0x10) == 0xFE30))
            {
                A011 (0x0B, 0x03)
            }

            Return (A007 (0x8650))
        }

        Method (A090, 2, NotSerialized)
        {
            Local0 = ((Arg0 & 0xFF) | 0x01865000)
            Local1 = ((Arg0 & 0xFFFFFF00) | 0x04)
            Local2 = ((0x03 << 0x1E) | (0x01 << 0x12))
            Local2 |= (0x01 << 0x10)
            A010 (0x8600, Local0)
            A010 (0x8604, Local1)
            A010 (0x8608, Local2)
            A010 (0x8650, Arg1)
            A011 (0x0B, 0x03)
        }

        Name (AD02, 0x03)
        Alias (AD02, A018)
        Name (AD03, 0x03)
        Alias (AD03, A019)
        Name (AD04, 0x00)
        Alias (AD04, A020)
        Name (AD05, 0x01)
        Alias (AD05, A021)
        Name (AD06, Package (0x08)
        {
            0x02, 
            0x00, 
            0x02, 
            0x02, 
            0x00, 
            0x00, 
            0x02, 
            0x00
        })
        Alias (AD06, A022)
        Name (AD08, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD08, A023)
        Name (A024, 0x00)
        Name (A025, 0x00)
        Name (A026, 0x01)
        Name (A027, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A028, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A029, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (AD09, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD09, A030)
        Name (A031, Package (0x08)
        {
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01
        })
        Name (A032, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A034, 0x00)
        Method (A035, 1, Serialized)
        {
            Local1 = DerefOf (Index (Arg0, 0x02))
            Local0 = A013 ()
            A025 = Local1
            Local2 = ((0x01 << 0x05) | (0x01 << 0x06))
            Local3 = ((A025 << 0x05) | (A026 << 0x06))
            A017 (0x00, 0x60, 0xF4, ~Local2, (Local2 & Local3))
            If ((Local1 == Local0))
            {
                Return (0x00)
            }

            A006 (A025)
            If ((A018 == 0x04))
            {
                A012 (0x01)
                A014 (0x01)
            }

            If (((A018 <= 0x01) || (A018 >= 0x04)))
            {
                Return (0x00)
            }

            If ((A024 == 0x00))
            {
                Return (0x00)
            }

            A036 ()
            Return (0x00)
        }

        Method (A037, 1, NotSerialized)
        {
            Local7 = A038 (Arg0)
            Local0 = DerefOf (Index (Local7, 0x02))
            If ((Local0 != 0x02))
            {
                Return (Local7)
            }

            A036 ()
            Return (Local7)
        }

        Method (A038, 1, NotSerialized)
        {
            Name (A039, 0x00)
            A034 = 0x00
            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A040)
            A040 = 0x03
            CreateByteField (Local7, 0x02, A041)
            A041 = 0x01
            If (((A018 <= 0x01) || (A018 >= 0x04)))
            {
                Return (Local7)
            }

            If ((A024 == 0x00))
            {
                Return (Local7)
            }

            CreateWordField (Arg0, 0x02, A042)
            CreateWordField (Arg0, 0x04, A043)
            CreateWordField (Arg0, 0x06, A044)
            CreateByteField (Arg0, 0x08, A045)
            CreateByteField (Arg0, 0x09, A046)
            A039 = ((A042 >> 0x08) & 0xFF)
            While ((A034 <= A001))
            {
                If ((A047 (A034) == 0x01))
                {
                    Local1 = A008 (((A034 + 0x02) << 0x03), 0x18)
                    Local2 = ((Local1 >> 0x10) & 0xFF)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    If (((A039 >= Local1) && (A039 <= Local2)))
                    {
                        Break
                    }
                }

                A034++
            }

            If ((A034 > A001))
            {
                Return (Local7)
            }

            If ((DerefOf (Index (A027, A034)) == 0x00))
            {
                Index (A027, A034) = A042 /* \_SB_.A038.A042 */
            }
            Else
            {
                If ((DerefOf (Index (A027, A034)) != A042))
                {
                    Return (Local7)
                }
            }

            Index (A032, A034) = 0x00
            If ((A046 == 0x00))
            {
                Index (A027, A034) = 0x00
            }

            If ((A046 == 0x01))
            {
                Index (A032, A034) = 0x01
            }

            If ((A046 == 0x02))
            {
                Index (A029, A034) = 0x01
            }

            If ((A046 == 0x03))
            {
                Index (A029, A034) = 0x02
            }

            If (((A043 & A044) == 0x01))
            {
                Index (A029, A034) = DerefOf (Index (A022, A034))
            }

            A041 = 0x02
            Return (Local7)
        }

        Method (A047, 1, Serialized)
        {
            If ((DerefOf (Index (A022, Arg0)) == 0x00))
            {
                Return (0x00)
            }

            Return (0x01)
        }

        Method (A048, 1, Serialized)
        {
            Local7 = Buffer (0x0100) {}
            Index (Local7, 0x00) = 0x03
            Index (Local7, 0x01) = 0x00
            Index (Local7, 0x02) = 0x00
            A024 = DerefOf (Index (Arg0, 0x02))
            Local0 = A016 (0x00, 0x60, 0xF4)
            If ((A024 == 0x01))
            {
                If (((Local0 & 0x01) == 0x01))
                {
                    Return (Local7)
                }

                Local0 |= 0x01
            }

            If ((A024 == 0x00))
            {
                If (((Local0 & 0x01) == 0x00))
                {
                    Return (Local7)
                }

                Local0 &= ~0x01
            }

            Local0 |= (A018 << 0x01)
            A049 (0x00, 0x60, 0xF4, Local0)
            A050 (RefOf (A028), RefOf (A027))
            A006 (A025)
            If ((A018 == 0x04))
            {
                A012 (0x01)
                A014 (0x01)
            }

            If (((A018 > 0x01) && (A018 < 0x04)))
            {
                If ((A018 == 0x02))
                {
                    A050 (RefOf (A022), RefOf (A030))
                    A034 = 0x00
                    While ((A034 <= A001))
                    {
                        If ((DerefOf (Index (A023, A034)) != 0x00))
                        {
                            Index (A030, A034) = DerefOf (Index (A023, A034))
                        }

                        A034++
                    }
                }
                Else
                {
                    A050 (RefOf (A031), RefOf (A030))
                }

                A036 ()
            }

            Return (Local7)
        }

        Name (A051, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Method (A036, 0, Serialized)
        {
            A034 = 0x00
            A050 (RefOf (A031), RefOf (A051))
            While ((A034 <= A001))
            {
                If ((A047 (A034) == 0x01))
                {
                    Index (A051, A034) = A052 (A034)
                }

                A034++
            }

            If ((Match (A032, MEQ, 0x01, MTR, 0x00, 0x00) != Ones))
            {
                A050 (RefOf (A031), RefOf (A051))
            }

            If ((Match (A051, MEQ, 0x02, MTR, 0x00, 0x00) != Ones))
            {
                A014 (0x02)
                A053 (A019, 0x01)
                A012 (0x02)
            }

            A034 = 0x00
            While ((A034 <= A001))
            {
                If ((A047 (A034) == 0x00))
                {
                    A034++
                    Continue
                }

                Local0 = DerefOf (Index (A030, A034))
                Local2 = DerefOf (Index (A051, A034))
                If ((Local0 == Local2))
                {
                    A034++
                    Continue
                }

                Index (A030, A034) = Local2
                A054 (A034, Local2)
                A034++
            }

            If ((Match (A051, MEQ, 0x02, MTR, 0x00, 0x00) == Ones))
            {
                A012 (0x01)
                A053 (A020, 0x00)
                A014 (0x01)
            }
        }

        Method (A052, 1, NotSerialized)
        {
            Local0 = 0x02
            If ((DerefOf (Index (A027, Arg0)) == 0x00))
            {
                If (((A013 () == 0x01) || (A018 == 0x03)))
                {
                    Local0 = 0x01
                }

                If ((DerefOf (Index (A023, Arg0)) != 0x00))
                {
                    Local0 = DerefOf (Index (A023, Arg0))
                }
            }
            Else
            {
                Local0 = DerefOf (Index (A029, Arg0))
            }

            Return (Local0)
        }

        Method (A054, 2, NotSerialized)
        {
            If ((Arg0 == 0x06))
            {
                A017 (0x00, 0x60, 0x80, ~0x40, 0x40)
            }

            A055 (Arg0, Arg1)
            If ((DerefOf (Index (A027, Arg0)) != 0x00))
            {
                A056 (Arg0, 0xA1, ~0x1000, 0x00)
            }
            Else
            {
                A056 (Arg0, 0xA1, ~0x1000, 0x1000)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = (A008 (Local1, 0x70) & 0x00400000)
            If ((Local3 != 0x00))
            {
                A057 (Arg0)
                Local2 = 0x01
                While (Local2)
                {
                    A058 (Local1, 0x68, ~0x00, 0x20)
                    Sleep (0x1E)
                    While ((A008 (Local1, 0x68) & 0x08000000))
                    {
                        Sleep (0x0A)
                    }

                    Local2 = 0x00
                    If ((Arg1 == 0x01))
                    {
                        Local4 = A059 (Arg0, 0xA4)
                        If (((Local4 & 0x0800) != 0x00))
                        {
                            Local2 = 0x01
                        }
                    }
                }

                A060 (Arg0)
            }
            Else
            {
            }

            If ((Arg0 == 0x06))
            {
                A017 (0x00, 0x60, 0x80, ~0x40, 0x00)
            }
        }

        Name (A061, Package (0x09)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A062, 0x00)
        Name (A063, 0x00)
        Method (A057, 1, Serialized)
        {
            A062 = 0x00
            A063 = 0x00
            Local1 = ((Arg0 + 0x02) << 0x03)
            If ((Arg0 == 0x06))
            {
                Index (A061, 0x00) = A064 (0x00, 0x00)
                A064 (0x00, 0x01)
                Return (0x00)
            }

            Local3 = A008 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A008 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A062 = A065 ((Local2 + Local4), 0x10)
                If ((A062 == 0x00))
                {
                    Local4++
                    Continue
                }

                A062 += 0x10
                A063 = A008 ((Local2 + Local4), A062)
                Index (A061, Local4) = (A063 & 0x03)
                A058 ((Local2 + Local4), A062, ~0x03, 0x00)
                Local4++
            }
        }

        Method (A060, 1, Serialized)
        {
            A062 = 0x00
            A063 = 0x00
            If ((Arg0 == 0x06))
            {
                A064 (DerefOf (Index (A061, 0x00)), 0x01)
                Return (0x00)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = A008 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A008 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A062 = A065 ((Local2 + Local4), 0x10)
                If ((A062 == 0x00))
                {
                    Local4++
                    Continue
                }

                A062 += 0x10
                A009 ((Local2 + Local4), A062, DerefOf (Index (A061, Local4)))
                Local4++
            }
        }

        Method (A055, 2, NotSerialized)
        {
            Local0 = ((Arg0 + 0x02) << 0x03)
            If ((Arg1 == 0x01))
            {
                A058 (Local0, 0x88, ~0x2F, 0x21)
                A056 (Arg0, 0xA4, ~0x20000001, 0x00)
            }
            Else
            {
                A056 (Arg0, 0xA4, ~0x20000001, 0x20000001)
                A058 (Local0, 0x88, ~0x2F, 0x02)
            }
        }

        Method (A053, 2, Serialized)
        {
            Local1 = A016 (0x00, 0x60, 0xEA)
            Local1 |= 0x02
            A049 (0x00, 0x60, 0xEA, Local1)
            Local1 &= ~(0x03 << 0x03)
            Local1 |= (Arg0 << 0x03)
            Local2 = (~Local1 & 0x04)
            Local1 = ((Local1 & ~0x04) | Local2)
            A049 (0x00, 0x60, 0xEA, Local1)
            If ((Arg1 != 0x00))
            {
                While (((Local1 << 0x02) != Local2))
                {
                    Local1 = (A016 (0x00, 0x60, 0xEB) & 0x01)
                }
            }
        }

        Method (A050, 2, NotSerialized)
        {
            Local1 = SizeOf (Arg0)
            Local0 = 0x00
            While ((Local0 < Local1))
            {
                Index (DerefOf (Arg1), Local0) = DerefOf (Index (DerefOf (Arg0), Local0))
                Local0++
            }
        }

        Method (A013, 0, NotSerialized)
        {
            Return ((A025 & A026))
        }

        Name (A066, 0x00)
        Name (A067, 0x00)
        Name (A068, 0x00)
        Name (A069, 0x00)
        Name (A070, 0x00)
        Name (A071, 0x00)
        Name (A072, Buffer (0x10)
        {
            /* 0000 */  0x01, 0x02, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08,  /* ........ */
            /* 0008 */  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10   /* ........ */
        })
        Method (A073, 1, NotSerialized)
        {
            Name (A039, 0x00)
            Name (A074, 0x00)
            A034 = 0x00
            Local7 = Buffer (0x0A) {}
            A039 = DerefOf (Index (Arg0, 0x03))
            A074 = DerefOf (Index (Arg0, 0x04))
            Index (Local7, 0x00) = 0x03
            Index (Local7, 0x01) = 0x00
            Index (Local7, 0x02) = A074 /* \_SB_.A073.A074 */
            While ((A034 <= A001))
            {
                If ((A047 (A034) == 0x01))
                {
                    Local1 = A008 (((A034 + 0x02) << 0x03), 0x18)
                    Local2 = ((Local1 >> 0x10) & 0xFF)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    If (((A039 >= Local1) && (A039 <= Local2)))
                    {
                        Break
                    }
                }

                A034++
            }

            If ((A034 > A001))
            {
                Return (Local7)
            }

            If ((A075 (A034, 0x01) <= A074))
            {
                Return (Local7)
            }

            Local1 = DerefOf (Index (A072, A074))
            A076 (A034, 0x01, 0x00)
            A076 (A034, 0x02, Local1)
            Index (Local7, 0x02) = Local1
            Return (Local7)
        }

        Method (A077, 1, Serialized)
        {
            Local0 = DerefOf (Index (Arg0, 0x04))
            Local1 = DerefOf (Index (Arg0, 0x02))
            Local1 = ((Local1 >> 0x03) - 0x02)
            If ((Local0 == 0x01))
            {
                Local2 = 0x06
            }
            Else
            {
                Local2 = 0x04
            }

            Local0 = A078 (Local1, Local2)
            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A040)
            CreateByteField (Local7, 0x02, A041)
            CreateByteField (Local7, 0x03, A079)
            A040 = 0x04
            A041 = 0x00
            A079 = Local0
            Return (Local7)
        }

        Name (A080, Buffer (0x0A)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0008 */  0x00, 0x00                                       /* .. */
        })
        Method (A078, 2, Serialized)
        {
            Local4 = 0x00
            Local7 = A081 (Arg0)
            Local1 = DerefOf (Index (Local7, 0x07))
            If ((Local1 != 0x01))
            {
                Return (Local4)
            }

            Local2 = Arg1
            While ((Local2 != 0x08))
            {
                If ((Local2 == 0x06))
                {
                    Index (A023, Arg0) = 0x00
                    A056 (Arg0, 0xA2, ~0x2000, 0x00)
                    A026 = 0x00
                    A036 ()
                    A076 (Arg0, 0x01, 0x00)
                    A082 (Arg0, 0x00)
                    Local2 = 0x01
                    Local3 = 0x00
                }

                If ((Local2 == 0x01))
                {
                    Local1 = (A059 (Arg0, 0xA5) & 0x3F)
                    If ((Local1 > 0x04))
                    {
                        Local2 = 0x02
                        Local3 = 0x00
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                    }
                    Else
                    {
                        Local2 = 0x04
                    }
                }

                If ((Local2 == 0x02))
                {
                    Local1 = A059 (Arg0, 0xA5)
                    Local1 &= 0x3F
                    If ((Local1 == 0x10))
                    {
                        Local2 = 0x05
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                        Continue
                    }

                    Local2 = 0x04
                    If ((DerefOf (Index (A023, Arg0)) == 0x01))
                    {
                        Continue
                    }

                    If ((A083 (Arg0) == 0x01))
                    {
                        A056 (Arg0, 0xA2, ~0x2000, 0x2000)
                        Index (A023, Arg0) = 0x01
                        A055 (Arg0, 0x01)
                        Local2 = 0x07
                    }
                }

                If ((Local2 == 0x04))
                {
                    A082 (Arg0, 0x01)
                    A076 (Arg0, 0x00, 0x00)
                    Index (A023, Arg0) = 0x01
                    Local2 = 0x00
                }

                If ((Local2 == 0x07))
                {
                    If (CondRefOf (\_SB.ALIC, Local6))
                    {
                        Local1 = ((Arg0 + 0x02) << 0x03)
                        \_SB.ALIC (Local1, 0x00, Sleep (0x02), \_SB.ALIC (Local1, 0x01, Local3 = 0x00, 
                            Local2 = 0x01, Continue, Local2 = 0x04), If ((Local2 == 0x05))
                            {
                                Local4 = 0x01
                                Local2 = 0x00
                            }, If ((Local2 == 0x00))
                            {
                                A026 = 0x01
                                A036 ()
                                Local2 = 0x08
                            })
                    }
                }
            }

            Return (Local4)
        }

        Method (A076, 3, Serialized)
        {
            Local7 = A081 (Arg0)
            A068 = DerefOf (Index (Local7, 0x02))
            A069 = DerefOf (Index (Local7, 0x03))
            If ((Arg1 == 0x00))
            {
                A084 (Arg0, A068, A069, 0x01)
            }

            If ((Arg1 == 0x01))
            {
                A084 (Arg0, A068, A069, 0x00)
            }

            If ((Arg1 != 0x02))
            {
                Return (0x00)
            }

            If ((Arg2 == 0x00))
            {
                Local2 = A075 (Arg0, 0x00)
            }
            Else
            {
                Local2 = Arg2
            }

            If ((A075 (Arg0, 0x01) <= Local2))
            {
                Return (0x00)
            }

            Local1 = A085 (Arg0)
            If ((Local1 == 0x00))
            {
                Local3 = (A068 + Local2)
                Local4 = A069 /* \_SB_.A069 */
            }
            Else
            {
                Local4 = (A069 - Local2)
                Local3 = A068 /* \_SB_.A068 */
            }

            A084 (Arg0, Local3, Local4, 0x01)
            Return (0x00)
        }

        Method (A083, 1, NotSerialized)
        {
            Local1 = Buffer (0x10) {}
            Local0 = 0x00
            While ((Local0 <= 0x03))
            {
                Local2 = A059 (Arg0, (Local0 + 0xA5))
                Index (Local1, (Local0 * 0x04)) = Local2
                Index (Local1, ((Local0 * 0x04) + 0x01)) = (
                    Local2 >> 0x08)
                Index (Local1, ((Local0 * 0x04) + 0x02)) = (
                    Local2 >> 0x10)
                Index (Local1, ((Local0 * 0x04) + 0x03)) = (
                    Local2 >> 0x18)
                Local0++
            }

            Local0 = 0x00
            While ((Local0 < 0x0F))
            {
                If (((DerefOf (Index (Local1, Local0)) == 0x2A) && (DerefOf (Index (
                    Local1, (Local0 + 0x01))) == 0x09)))
                {
                    Return (0x01)
                }

                Local0++
            }

            Return (0x00)
        }

        Method (A085, 1, Serialized)
        {
            Local7 = A081 (Arg0)
            A066 = DerefOf (Index (Local7, 0x00))
            A067 = DerefOf (Index (Local7, 0x01))
            Local0 = 0x00
            If ((A066 > A067))
            {
                Local0 = 0x01
            }

            Local1 = (A059 (Arg0, 0x50) & 0x01)
            Return (((Local0 ^ Local1) & 0x01))
        }

        Method (A082, 2, NotSerialized)
        {
            Local7 = A081 (Arg0)
            A071 = DerefOf (Index (Local7, 0x04))
            A070 = ((DerefOf (Index (Local7, (0x05 + 0x01))) << 
                0x08) | DerefOf (Index (Local7, 0x05)))
            A017 (0x00, 0xE0, ((A070 << 0x10) | (0x0800 + (0x0100 * 
                A071))), ~0x01, Arg1)
        }

        Name (A086, Buffer (0x07)
        {
             0x00, 0x01, 0x02, 0x04, 0x08, 0x0C, 0x10         /* ....... */
        })
        Method (A075, 2, NotSerialized)
        {
            If ((Arg1 == 0x00))
            {
                Local0 = ((A059 (Arg0, 0xA2) >> 0x04) & 0x07)
                Local1 = DerefOf (Index (A086, Local0))
            }
            Else
            {
                Local7 = A081 (Arg0)
                A066 = DerefOf (Index (Local7, 0x00))
                A067 = DerefOf (Index (Local7, 0x01))
                If ((A066 > A067))
                {
                    Local1 = (A066 - A067) /* \_SB_.A067 */
                }
                Else
                {
                    Local1 = (A067 - A066) /* \_SB_.A066 */
                }

                Local1++
            }

            Return (Local1)
        }

        Method (A084, 4, Serialized)
        {
            Local7 = A081 (Arg0)
            A068 = Arg1
            A069 = Arg2
            A070 = ((DerefOf (Index (Local7, (0x05 + 0x01))) << 
                0x08) | DerefOf (Index (Local7, 0x05)))
            If ((A068 > A069))
            {
                Local1 = (A068 - A069) /* \_SB_.A069 */
                Local2 = A069 /* \_SB_.A069 */
            }
            Else
            {
                Local1 = (A069 - A068) /* \_SB_.A068 */
                Local2 = A068 /* \_SB_.A068 */
            }

            Local3 = (((0x01 << (Local1 + 0x01)) - 0x01) << 
                Local2)
            Local4 = ~Local3
            If ((Arg3 == 0x01))
            {
                Local3 = 0x00
            }

            A017 (0x00, 0xE0, ((A070 << 0x10) | 0x8023), Local4, Local3)
            Stall (0x0A)
        }

        Name (A002, 0x00)
        Name (A003, 0x00)
        Name (A004, 0x00)
        Name (A005, 0x00)
        Method (A006, 1, NotSerialized)
        {
            Local1 = ((0x18 << 0x03) | 0x04)
            If ((A005 == 0x00))
            {
                A003 = A007 (0x8580)
                A002 = A008 (Local1, 0x015C)
                A004 = A008 (Local1, 0x01A4)
                A005 = 0x01
            }

            Local0 = A007 (0x8580)
            Local1 = ((0x18 << 0x03) | 0x04)
            Local2 = A008 (Local1, 0x015C)
            Local3 = A008 (Local1, 0x01A4)
            If ((Arg0 == 0x01))
            {
                Local0 &= 0xFFFFFFFE
                Local2 &= 0xFFFFFFFC
                Local3 |= 0x03
            }
            Else
            {
                Local0 |= (A003 & 0x01)
                Local2 |= (A002 & 0x03)
                Local3 &= (0xFFFFFFFC | A004)
            }

            A009 (Local1, 0x01A4, Local3)
            A009 (Local1, 0x015C, Local2)
            A010 (0x8580, Local0)
            A011 (0x12, 0x03)
        }

        Method (A012, 1, NotSerialized)
        {
            Local1 = A013 ()
            Local0 = A007 (0x8490)
            If (((Local0 & 0xF0) != 0x00))
            {
                If ((Arg0 == 0x02))
                {
                    Local0 &= 0xFFFFFFA0
                    Local0 |= 0xA0
                }
                Else
                {
                    If ((Local1 == 0x00))
                    {
                        Local0 &= 0xFFFFFF60
                        Local0 |= 0x60
                    }
                    Else
                    {
                        Local0 &= 0xFFFFFF20
                        Local0 |= 0x20
                    }
                }

                A010 (0x8490, Local0)
            }
        }

        Name (AD0A, 0x00)
        Method (A014, 1, NotSerialized)
        {
            If ((AD0A == 0x01))
            {
                Local1 = A013 ()
                Local0 = A007 (0x842C)
                Local0 &= 0xFFFFFFFE
                If (((Arg0 == 0x01) && (Local1 == 0x01)))
                {
                    Local0 |= 0x01
                }

                A010 (0x842C, Local0)
                A011 (0x1B, 0x03)
            }
        }

        Method (A015, 1, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg0 == 0x02))
            {
                Local0 = 0x00
            }

            If ((A016 (0x00, 0xE0, 0x01308023) != 0x00))
            {
                A017 (0x00, 0xE0, 0x01308016, ~0x1000, (Local0 << 0x0C))
                While (((A016 (0x00, 0xE0, 0x01308016) & 0x2000) != (Local0 << 
                    0x0D)))
                {
                    Stall (0x0A)
                }
            }

            If ((A016 (0x00, 0xE0, 0x01318023) != 0x00))
            {
                A017 (0x00, 0xE0, 0x01318016, ~0x1000, (Local0 << 0x0C))
                While (((A016 (0x00, 0xE0, 0x01318016) & 0x2000) != (Local0 << 
                    0x0D)))
                {
                    Stall (0x0A)
                }
            }
        }
    }
}



XSDT
----
[000h 0000   4]                    Signature : "XSDT"    [Extended System Description Table]
[004h 0004   4]                 Table Length : 00000064
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E1
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]       ACPI Table Address   0 : 000000009F8CC398
[02Ch 0044   8]       ACPI Table Address   1 : 000000009F8CC490
[034h 0052   8]       ACPI Table Address   2 : 000000009F8CC508
[03Ch 0060   8]       ACPI Table Address   3 : 000000009F8CC5D0
[044h 0068   8]       ACPI Table Address   4 : 000000009F8CC610
[04Ch 0076   8]       ACPI Table Address   5 : 000000009F8CC648
[054h 0084   8]       ACPI Table Address   6 : 000000009F8CCD78
[05Ch 0092   8]       ACPI Table Address   7 : 000000009F8CE688

Raw Table Data: Length 100 (0x64)

  0000: 58 53 44 54 64 00 00 00 01 E1 5F 41 53 55 53 5F  XSDTd....._ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  Notebook. ..AMI 
  0020: 13 00 01 00 98 C3 8C 9F 00 00 00 00 90 C4 8C 9F  ................
  0030: 00 00 00 00 08 C5 8C 9F 00 00 00 00 D0 C5 8C 9F  ................
  0040: 00 00 00 00 10 C6 8C 9F 00 00 00 00 48 C6 8C 9F  ............H...
  0050: 00 00 00 00 78 CD 8C 9F 00 00 00 00 88 E6 8C 9F  ....x...........
  0060: 00 00 00 00                                      ....


