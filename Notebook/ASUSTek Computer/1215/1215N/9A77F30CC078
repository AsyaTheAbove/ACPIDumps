
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20150717-64
Copyright (c) 2000 - 2015 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

      	   0x00000000     0xDD    "@     "  " C@     "   0x0040449F    "    "     0x00000001
   RSDT   0x00000048     0x01    "_ASUS_"  "Notebook"   0x09001007    "MSFT"     0x00000097
   XSDT   0x0000006C     0x01    "_ASUS_"  "Notebook"   0x09001007    "MSFT"     0x00000097
   DSDT   0x000099D6     0x02    "A1609 "  "A1609000"   0x00000000    "INTL"     0x20060113
   FACS   0x00000040
   FACP   0x000000F4     0x04    "A_M_I_"  "OEMFACP "   0x09001007    "MSFT"     0x00000097
   APIC   0x0000006C     0x02    "A_M_I_"  "OEMAPIC "   0x09001007    "MSFT"     0x00000097
   MCFG   0x0000003C     0x01    "A_M_I_"  "OEMMCFG "   0x09001007    "MSFT"     0x00000097
   ECDT   0x00000055     0x01    "A_M_I_"  "OEMECDT "   0x09001007    "MSFT"     0x00000097
   OEMB   0x00000061     0x01    "A_M_I_"  "AMI_OEM "   0x09001007    "MSFT"     0x00000097
   HPET   0x00000038     0x01    "A_M_I_"  "OEMHPET "   0x09001007    "MSFT"     0x00000097

Found 11 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000006C
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 57
[00Ah 0010   6]                       Oem ID : "A_M_I_"
[010h 0016   8]                 Oem Table ID : "OEMAPIC "
[018h 0024   4]                 Oem Revision : 09001007
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 01
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 04
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 108 (0x6C)

  0000: 41 50 49 43 6C 00 00 00 02 57 41 5F 4D 5F 49 5F  // APICl....WA_M_I_
  0010: 4F 45 4D 41 50 49 43 20 07 10 00 09 4D 53 46 54  // OEMAPIC ....MSFT
  0020: 97 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
  0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 01  // ................
  0040: 01 00 00 00 00 08 04 03 01 00 00 00 01 0C 04 00  // ................
  0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
  0060: 00 00 02 0A 00 09 09 00 00 00 0D 00              // ............


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 2, "A1609", "A1609000", 0x00000000)
{
    Scope (_PR)
    {
        Processor (P001, 0x01, 0x00000810, 0x06) {}
        Alias (P001, CPU1)
    }

    Scope (_PR)
    {
        Processor (P002, 0x02, 0x00000810, 0x06) {}
        Alias (P002, CPU2)
    }

    Scope (_PR)
    {
        Processor (P003, 0x03, 0x00000810, 0x06) {}
        Alias (P003, CPU3)
    }

    Scope (_PR)
    {
        Processor (P004, 0x04, 0x00000810, 0x06) {}
        Alias (P004, CPU4)
    }

    Name (DP80, 0x80)
    Name (DP90, 0x90)
    Name (AMWV, 0x06)
    Name (APIC, One)
    Name (SMIP, 0xB2)
    Name (PMBS, 0x0800)
    Name (PMLN, 0x80)
    Name (GPBS, 0x0480)
    Name (GPLN, 0x40)
    Name (SMBL, Zero)
    Name (PM28, 0x0828)
    Name (PM30, 0x0830)
    Name (SUSW, 0xFF)
    Name (SMIO, 0xB2)
    Name (TOBS, 0x0860)
    Name (SUCC, One)
    Name (NVLD, 0x02)
    Name (CRIT, 0x04)
    Name (NCRT, 0x06)
    Name (LIDS, One)
    Name (CHST, 0x0B)
    Name (DVMT, 0x04)
    Name (PCIB, 0xE0000000)
    Name (PCIL, 0x10000000)
    Name (SMBS, 0x0400)
    OperationRegion (BIOS, SystemMemory, 0xAF66E064, 0xFF)
    Field (BIOS, ByteAcc, NoLock, Preserve)
    {
        SS1,    1, 
        SS2,    1, 
        SS3,    1, 
        SS4,    1, 
        Offset (0x01), 
        IOST,   16, 
        TOPM,   32, 
        ROMS,   32, 
        MG1B,   32, 
        MG1L,   32, 
        MG2B,   32, 
        MG2L,   32, 
        Offset (0x1C), 
        DMAX,   8, 
        HPTA,   32, 
        CPB0,   32, 
        CPB1,   32, 
        CPB2,   32, 
        CPB3,   32, 
        ASSB,   8, 
        AOTB,   8, 
        AAXB,   32, 
        SMIF,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        MPEN,   8, 
        TPMF,   8
    }

    Method (RRIO, 4, NotSerialized)
    {
        Debug = "RRIO"
    }

    Method (RDMA, 3, NotSerialized)
    {
        Debug = "rDMA"
    }

    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
        _T_0 = OSYS ()
        If ((_T_0 == One))
        {
            OSVR = 0x03
        }
        Else
        {
            If ((_T_0 == 0x10))
            {
                OSVR = One
            }
            Else
            {
                If ((_T_0 == 0x11))
                {
                    OSVR = 0x02
                }
                Else
                {
                    If ((_T_0 == 0x12))
                    {
                        OSVR = 0x04
                    }
                    Else
                    {
                        If ((_T_0 == 0x13))
                        {
                            OSVR = Zero
                        }
                        Else
                        {
                            If ((_T_0 == 0x14))
                            {
                                OSVR = Zero
                            }
                            Else
                            {
                                If ((_T_0 == 0x15))
                                {
                                    OSVR = Zero
                                }
                            }
                        }
                    }
                }
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (Index (BUF0, Local0)) != DerefOf (Index (BUF1, Local0
                ))))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        Index (PRWP, Zero) = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            Index (PRWP, One) = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, Index (PRWP, One))
            }
            Else
            {
                FindSetRightBit (Local0, Index (PRWP, One))
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, DP80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, DP90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Method (OSYS, 0, NotSerialized)
    {
        Local0 = 0x10
        If (CondRefOf (_OSI, Local1))
        {
            If (_OSI ("Windows 2000"))
            {
                Local0 = 0x12
            }

            If (_OSI ("Windows 2001"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001.1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2001.1 SP1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2006"))
            {
                Local0 = 0x15
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                Local0 = 0x12
            }
            Else
            {
                If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    Local0 = 0x11
                }

                If (MCTH (_OS, "Linux"))
                {
                    Local0 = One
                }
            }
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x0E)
        {
            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR00, Package (0x0E)
        {
            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR05, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }
        })
        Name (AR05, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }
        })
        Name (PR06, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }
        })
        Name (AR06, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }
        })
        Name (PR07, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }
        })
        Name (AR07, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If (((OSFL () == One) || (OSFL () == 0x02)))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Device (MCH)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadWrite,
                        0xFED14000,         // Address Base
                        0x00006000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED90000,         // Address Base
                        0x00004000,         // Address Length
                        )
                })
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Scope (\)
            {
                OperationRegion (MCHM, SystemMemory, 0xFED14000, 0x0C10)
                Field (MCHM, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xC00), 
                    MFSB,   8
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Device (IELK)
                {
                    Name (_HID, "AWY0001")  // _HID: Hardware ID
                    OperationRegion (RXA0, PCI_Config, 0xA0, 0x20)
                    Field (RXA0, ByteAcc, NoLock, Preserve)
                    {
                            ,   9, 
                        PBLV,   1, 
                        Offset (0x10), 
                            ,   1, 
                        PBMS,   1, 
                            ,   1, 
                        PMCS,   1, 
                        ECNS,   1, 
                        Offset (0x11), 
                        ECT1,   16, 
                        ELEN,   1, 
                        Offset (0x14)
                    }

                    OperationRegion (GPSE, SystemIO, PM28, 0x08)
                    Field (GPSE, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x02), 
                        GPI0,   1, 
                            ,   11, 
                        GPIC,   1, 
                        Offset (0x04), 
                            ,   10, 
                        ENGE,   1, 
                        Offset (0x06), 
                        GP0E,   1, 
                            ,   11, 
                        GPCE,   1, 
                        Offset (0x08)
                    }

                    Method (\_GPE._L0A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
                    {
                        Notify (\_SB.PCI0.SBRG.IELK, 0x81) // Information Change
                        \_SB.PCI0.SBRG.IELK.PMCS = One
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (ELEN)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (SMOD, 1, NotSerialized)
                    {
                    }

                    Method (GPBS, 0, NotSerialized)
                    {
                        Return ((PBLV ^ One))
                    }
                }

                Method (SPTS, 1, NotSerialized)
                {
                    PS1S = One
                    PS1E = One
                    SLPS = One
                }

                Method (SWAK, 1, NotSerialized)
                {
                    SLPS = Zero
                    PS1E = Zero
                    If (((Arg0 == One) && RTCS)) {}
                    Else
                    {
                        If (((Arg0 == 0x03) && BRTC)) {}
                        Else
                        {
                            Notify (PWRB, 0x02) // Device Wake
                        }
                    }
                }

                OperationRegion (APMP, SystemIO, SMIO, 0x02)
                Field (APMP, ByteAcc, NoLock, Preserve)
                {
                    APMC,   8, 
                    APMS,   8
                }

                Field (APMP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                        ,   1, 
                    BRTC,   1
                }

                OperationRegion (PMS0, SystemIO, PMBS, 0x04)
                Field (PMS0, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   4, 
                    WAKS,   1, 
                    Offset (0x03), 
                    PWBT,   1, 
                    Offset (0x04)
                }

                OperationRegion (SMIE, SystemIO, PM30, 0x08)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    PS1E,   1, 
                        ,   31, 
                    PS1S,   1, 
                    Offset (0x08)
                }

                OperationRegion (GPBX, SystemIO, GPBS, GPLN)
                Field (GPBX, ByteAcc, NoLock, Preserve)
                {
                    GPUS,   32, 
                    GPSL,   32, 
                    Offset (0x0C), 
                    GPLV,   32, 
                    Offset (0x18), 
                    GPBL,   32, 
                    Offset (0x2C), 
                    GPIV,   32
                }

                Scope (\_SB)
                {
                    Name (SLPS, Zero)
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("SYN0A13"))  // _HID: Hardware ID
                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN0A00"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0C)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQNoFlags ()
                            {12}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Name (_GPE, 0x1C)  // _GPE: General Purpose Events
                    Name (REGC, Zero)
                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            REGC = Arg1
                        }
                    }

                    Method (ECAV, 0, NotSerialized)
                    {
                        If ((REGC == Ones))
                        {
                            If ((_REV >= 0x02))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (REGC) /* \_SB_.PCI0.SBRG.EC0_.REGC */
                    }

                    OperationRegion (ECOR, EmbeddedControl, Zero, 0x0100)
                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x29), 
                        BT00,   8, 
                        BT01,   8, 
                        BT02,   8, 
                        BT03,   8, 
                        BT04,   8, 
                        BT05,   8, 
                        BT06,   8, 
                        BT07,   8, 
                        BT08,   8, 
                        BT09,   8, 
                        BT10,   8, 
                        BT11,   8, 
                        BT12,   8, 
                        BT13,   8, 
                        BT14,   8, 
                        BT15,   8, 
                        BT16,   8, 
                        BT17,   8, 
                        BT18,   8, 
                        BT19,   8, 
                        BT20,   8, 
                        BT21,   8, 
                        BT22,   8, 
                        BT23,   8, 
                        BT24,   8, 
                        BT25,   8, 
                        BT26,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x3F), 
                        BTS0,   1, 
                        BTS1,   1, 
                        BTS2,   1, 
                        BTS3,   1, 
                        BTS4,   1, 
                        BTS5,   1, 
                        BTS6,   1, 
                        BTS7,   1
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x51), 
                        ST00,   8, 
                        ST01,   8, 
                        ST02,   8, 
                        ST03,   8, 
                        ST04,   8, 
                        ST05,   8, 
                        ST06,   8, 
                        ST07,   8, 
                        ST08,   8, 
                        ST09,   8, 
                        ST10,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x61), 
                        SC00,   8, 
                        SC01,   8, 
                        SC02,   8, 
                        SC03,   8, 
                        SC04,   8, 
                        SC05,   8, 
                        SC06,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x71), 
                        TM00,   8, 
                        TM01,   8, 
                        TM02,   8, 
                        TM03,   8, 
                        TM04,   8, 
                        TM05,   8, 
                        TM06,   8, 
                        TM07,   8, 
                        TM08,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x81), 
                        SM00,   8, 
                        SM01,   8, 
                        SM02,   8, 
                        SM03,   8, 
                        SM04,   8, 
                        SM05,   8, 
                        SM06,   8, 
                        SM07,   8, 
                        SM08,   8, 
                        SM09,   8, 
                        SM10,   8, 
                        SM11,   8, 
                        SM12,   8, 
                        SM13,   8, 
                        SM14,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0xD0), 
                        SFB0,   8, 
                        SFB1,   8, 
                        SFB2,   8, 
                        SFB3,   8, 
                        Offset (0xEE), 
                        Offset (0xEF), 
                        SFBE,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0xD0), 
                        SF00,   1, 
                        SF01,   1, 
                        SF02,   1, 
                        SF03,   1, 
                        SF04,   1, 
                        SF05,   1, 
                        SF06,   1, 
                        SF07,   1, 
                        SF08,   1, 
                        SF09,   1, 
                        SF10,   1, 
                        SF11,   1, 
                        SF12,   1, 
                        SF13,   1, 
                        SF14,   1, 
                        SF15,   1, 
                        SF16,   1, 
                        SF17,   1, 
                        SF18,   1, 
                        SF19,   1, 
                        SF20,   1, 
                        SF21,   1, 
                        SF22,   1, 
                        SF23,   1, 
                        SF24,   1, 
                        SF25,   1, 
                        SF26,   1, 
                        SF27,   1, 
                        SF28,   1, 
                        SF29,   1, 
                        SF30,   1, 
                        SF31,   1, 
                        SF32,   1, 
                        SF33,   1, 
                        SF34,   1, 
                        SF35,   1, 
                        SF36,   1, 
                        SF37,   1, 
                        SF38,   1, 
                        SF39,   1, 
                        Offset (0xEE), 
                        S240,   1, 
                        S241,   1, 
                        S242,   1, 
                        S243,   1, 
                        S244,   1, 
                        S245,   1, 
                        S246,   1, 
                        S247,   1, 
                        S248,   1, 
                        S249,   1, 
                        S250,   1, 
                        S251,   1, 
                        S252,   1, 
                        S253,   1, 
                        SDOC,   2
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0xFF), 
                        BNKD,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x42), 
                        FT00,   8, 
                        FT01,   8, 
                        FT02,   8, 
                        FT03,   8, 
                        FT04,   8, 
                        FT05,   8, 
                        FT06,   8, 
                        FT07,   8, 
                        FT08,   8, 
                        FT09,   8, 
                        FT10,   8, 
                        FT11,   8, 
                        FT12,   8, 
                        FT13,   8, 
                        FT14,   8, 
                        FT15,   8, 
                        FT16,   8, 
                        FT17,   8, 
                        FT18,   8, 
                        FT19,   8, 
                        FT20,   8, 
                        FT21,   8, 
                        FT22,   8, 
                        FT23,   8, 
                        FT24,   8, 
                        FT25,   8, 
                        FT26,   8, 
                        FT27,   8, 
                        FT28,   8, 
                        FT29,   8
                    }

                    Method (EC0S, 1, NotSerialized)
                    {
                        If ((Arg0 == 0x03))
                        {
                            If (ECAV ())
                            {
                                If (!Acquire (MUEC, 0xFFFF))
                                {
                                    SF28 = One
                                    Release (MUEC)
                                }
                            }
                        }

                        If (Arg0)
                        {
                            If ((Arg0 < 0x04)) {}
                        }
                    }

                    Method (EC0W, 1, NotSerialized)
                    {
                        If (Arg0)
                        {
                            If ((Arg0 < 0x04)) {}
                            If ((Arg0 == 0x03))
                            {
                                If (ECAV ())
                                {
                                    If (!Acquire (MUEC, 0xFFFF))
                                    {
                                        SF17 = One
                                        Release (MUEC)
                                    }
                                }
                            }
                        }
                    }
                }

                Scope (EC0)
                {
                    Mutex (MUEC, 0x00)
                    OperationRegion (DLYP, SystemIO, 0xE1, One)
                    Field (DLYP, ByteAcc, NoLock, Preserve)
                    {
                        DELY,   8
                    }

                    OperationRegion (KBCP, SystemIO, Zero, 0xFF)
                    Field (KBCP, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x62), 
                        EC62,   8, 
                        Offset (0x66), 
                        EC66,   8
                    }

                    Field (KBCP, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x66), 
                        ECOF,   1, 
                        ECIE,   1, 
                        Offset (0x67)
                    }

                    Method (IBFX, 0, Serialized)
                    {
                        Local0 = 0x1000
                        While ((Local0-- && ECIE))
                        {
                            DELY = Zero
                        }
                    }

                    Method (OBFX, 0, Serialized)
                    {
                        Local0 = 0x1000
                        While ((Local0-- && !ECOF))
                        {
                            DELY = Zero
                        }
                    }

                    Method (ECXW, 2, Serialized)
                    {
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                IBFX ()
                                EC66 = Arg0
                                IBFX ()
                                EC62 = Arg1
                                IBFX ()
                                Release (MUEC)
                            }
                        }
                    }

                    Method (ECXR, 1, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                IBFX ()
                                EC66 = Arg0
                                OBFX ()
                                Local0 = EC62 /* \_SB_.PCI0.SBRG.EC0_.EC62 */
                                Release (MUEC)
                            }
                        }

                        Return (Local0)
                    }

                    Method (BWRN, 1, Serialized)
                    {
                        Local2 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = (Arg0 & 0xFF)
                                Local1 = ((Arg0 & 0xFF00) >> 0x08)
                                BT12 = Local1
                                BT13 = Local0
                                Release (MUEC)
                                Local2 = Zero
                            }
                        }

                        Return (Local2)
                    }

                    Method (BLOW, 1, Serialized)
                    {
                        Local2 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = (Arg0 & 0xFF)
                                Local1 = ((Arg0 & 0xFF00) >> 0x08)
                                BT14 = Local1
                                BT15 = Local0
                                Release (MUEC)
                                Local2 = Zero
                            }
                        }

                        Return (Local2)
                    }

                    Method (BCRT, 1, Serialized)
                    {
                        Local2 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = (Arg0 & 0xFF)
                                Local1 = ((Arg0 & 0xFF00) >> 0x08)
                                BT16 = Local1
                                BT17 = Local0
                                Release (MUEC)
                                Local2 = Zero
                            }
                        }

                        Return (Local2)
                    }

                    Method (BIF1, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = BT00 /* \_SB_.PCI0.SBRG.EC0_.BT00 */
                                Local1 = BT01 /* \_SB_.PCI0.SBRG.EC0_.BT01 */
                                Local0 = ((Local0 << 0x08) | Local1)
                                Release (MUEC)
                            }
                        }

                        Return (Local0)
                    }

                    Method (BIF2, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = BT23 /* \_SB_.PCI0.SBRG.EC0_.BT23 */
                                Local1 = BT24 /* \_SB_.PCI0.SBRG.EC0_.BT24 */
                                Local0 = ((Local0 << 0x08) | Local1)
                                Release (MUEC)
                            }
                        }

                        Return (Local0)
                    }

                    Method (BIF4, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = BT02 /* \_SB_.PCI0.SBRG.EC0_.BT02 */
                                Local1 = BT03 /* \_SB_.PCI0.SBRG.EC0_.BT03 */
                                Local0 = ((Local0 << 0x08) | Local1)
                                Release (MUEC)
                            }
                        }

                        Return (Local0)
                    }

                    Method (BIF5, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = BT12 /* \_SB_.PCI0.SBRG.EC0_.BT12 */
                                Release (MUEC)
                            }
                        }

                        Return (Local0)
                    }

                    Method (BIF6, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = BT14 /* \_SB_.PCI0.SBRG.EC0_.BT14 */
                                Release (MUEC)
                            }
                        }

                        Return (Local0)
                    }

                    Method (BST1, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = BT25 /* \_SB_.PCI0.SBRG.EC0_.BT25 */
                                Local1 = BT26 /* \_SB_.PCI0.SBRG.EC0_.BT26 */
                                Local0 = ((Local0 << 0x08) | Local1)
                                Release (MUEC)
                            }
                        }

                        If ((Local0 & 0x8000))
                        {
                            Local0 = ~Local0
                            Local0 &= 0xFFFF
                            Local0 += One
                        }

                        Return (Local0)
                    }

                    Method (BST2, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = BT10 /* \_SB_.PCI0.SBRG.EC0_.BT10 */
                                Local1 = BT11 /* \_SB_.PCI0.SBRG.EC0_.BT11 */
                                Local0 = ((Local0 << 0x08) | Local1)
                                Release (MUEC)
                            }
                        }

                        Local1 = (Local0 * 0x64)
                        Divide (Local1, 0x63, Local2, Local1)
                        If ((Local1 > DerefOf (Index (PBIF, 0x02))))
                        {
                            Local0 = DerefOf (Index (PBIF, 0x02))
                        }

                        Return (Local0)
                    }

                    Method (BST3, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = BT04 /* \_SB_.PCI0.SBRG.EC0_.BT04 */
                                Local1 = BT05 /* \_SB_.PCI0.SBRG.EC0_.BT05 */
                                Local0 = ((Local0 << 0x08) | Local1)
                                Release (MUEC)
                            }
                        }

                        Return (Local0)
                    }

                    Method (EBTS, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = BT22 /* \_SB_.PCI0.SBRG.EC0_.BT22 */
                                Release (MUEC)
                            }
                        }

                        Return (Local0)
                    }

                    Method (RCTP, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = ST00 /* \_SB_.PCI0.SBRG.EC0_.ST00 */
                                Release (MUEC)
                            }
                        }

                        Return (Local0)
                    }

                    Method (ETPS, 1, Serialized)
                    {
                        Local0 = Zero
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local1 = (Arg0 ^ One)
                                SF19 = Local1
                                Release (MUEC)
                                Local0 = One
                            }
                        }

                        Return (Local0)
                    }

                    Method (ETPG, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = SF19 /* \_SB_.PCI0.SBRG.EC0_.SF19 */
                                Local0 ^= One
                                Release (MUEC)
                            }
                        }

                        Return (Local0)
                    }

                    Method (ELBS, 1, Serialized)
                    {
                        Local0 = Zero
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local1 = (Arg0 ^ One)
                                SF18 = Local1
                                Release (MUEC)
                                Local0 = One
                            }
                        }

                        Return (Local0)
                    }

                    Method (ELBG, 0, Serialized)
                    {
                        Local0 = Ones
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                Local0 = SF18 /* \_SB_.PCI0.SBRG.EC0_.SF18 */
                                Local0 ^= One
                                Release (MUEC)
                            }
                        }

                        Return (Local0)
                    }
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x0A,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x00,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x00,               // Alignment
                            0x09,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x025C,             // Range Minimum
                            0x025C,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0380,             // Range Minimum
                            0x0380,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y00)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y01)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y02)
                        Memory32Fixed (ReadWrite,
                            0xFED1C000,         // Address Base
                            0x00004000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED20000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED50000,         // Address Base
                            0x00040000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFB00000,         // Address Base
                            0x00100000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFF00000,         // Address Base
                            0x00100000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y00._MIN, GP00)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y00._MAX, GP01)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y00._LEN, GP0L)  // _LEN: Length
                        GP00 = PMBS /* \PMBS */
                        GP01 = PMBS /* \PMBS */
                        GP0L = PMLN /* \PMLN */
                        If (SMBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y01._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y01._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y01._LEN, GP1L)  // _LEN: Length
                            GP10 = SMBS /* \SMBS */
                            GP11 = SMBS /* \SMBS */
                            GP1L = SMBL /* \SMBL */
                        }

                        If (GPBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._LEN, GP2L)  // _LEN: Length
                            GP20 = GPBS /* \GPBS */
                            GP21 = GPBS /* \GPBS */
                            GP2L = GPLN /* \GPLN */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.RMSC.CRS_ */
                    }
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y03)
                    })
                    OperationRegion (^LPCR, SystemMemory, 0xFED1F404, 0x04)
                    Field (LPCR, AnyAcc, NoLock, Preserve)
                    {
                        HPTS,   2, 
                            ,   5, 
                        HPTE,   1, 
                        Offset (0x04)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSFL () == Zero))
                        {
                            If (HPTE)
                            {
                                Return (0x0F)
                            }
                        }
                        Else
                        {
                            If (HPTE)
                            {
                                Return (0x0B)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.HPET._Y03._BAS, HPT)  // _BAS: Base Address
                        Local0 = (HPTS * 0x1000)
                        HPT = (Local0 + 0xFED00000)
                        Return (CRS) /* \_SB_.PCI0.SBRG.HPET.CRS_ */
                    }
                }

                OperationRegion (RX80, PCI_Config, Zero, 0xFF)
                Field (RX80, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x80), 
                    LPCD,   16, 
                    LPCE,   16
                }

                Name (DBPT, Package (0x04)
                {
                    Package (0x08)
                    {
                        0x03F8, 
                        0x02F8, 
                        0x0220, 
                        0x0228, 
                        0x0238, 
                        0x02E8, 
                        0x0338, 
                        0x03E8
                    }, 

                    Package (0x08)
                    {
                        0x03F8, 
                        0x02F8, 
                        0x0220, 
                        0x0228, 
                        0x0238, 
                        0x02E8, 
                        0x0338, 
                        0x03E8
                    }, 

                    Package (0x03)
                    {
                        0x0378, 
                        0x0278, 
                        0x03BC
                    }, 

                    Package (0x02)
                    {
                        0x03F0, 
                        0x0370
                    }
                })
                Name (DDLT, Package (0x04)
                {
                    Package (0x02)
                    {
                        Zero, 
                        0xFFF8
                    }, 

                    Package (0x02)
                    {
                        0x04, 
                        0xFF8F
                    }, 

                    Package (0x02)
                    {
                        0x08, 
                        0xFCFF
                    }, 

                    Package (0x02)
                    {
                        0x0C, 
                        0xEFFF
                    }
                })
                Method (RRIO, 4, NotSerialized)
                {
                    If (((Arg0 <= 0x03) && (Arg0 >= Zero)))
                    {
                        Local0 = Match (DerefOf (Index (DBPT, Arg0)), MEQ, Arg2, MTR, Zero, 
                            Zero)
                        If ((Local0 != Ones))
                        {
                            Local1 = DerefOf (Index (DerefOf (Index (DDLT, Arg0)), Zero))
                            Local2 = DerefOf (Index (DerefOf (Index (DDLT, Arg0)), One))
                            Local0 <<= Local1
                            LPCD &= Local2
                            LPCD |= Local0
                            WX82 (Arg0, Arg1)
                        }
                    }

                    If ((Arg0 == 0x08))
                    {
                        If ((Arg2 == 0x0200))
                        {
                            WX82 (0x08, Arg0)
                        }
                        Else
                        {
                            If ((Arg2 == 0x0208))
                            {
                                WX82 (0x09, Arg0)
                            }
                        }
                    }

                    If (((Arg0 <= 0x0D) && (Arg0 >= 0x0A)))
                    {
                        WX82 (Arg0, Arg1)
                    }
                }

                Method (WX82, 2, NotSerialized)
                {
                    Local0 = (One << Arg0)
                    If (Arg1)
                    {
                        LPCE |= Local0
                    }
                    Else
                    {
                        Local0 = ~Local0
                        LPCE &= Local0
                    }
                }

                Method (RDMA, 3, NotSerialized)
                {
                }

                OperationRegion (SMRG, SystemIO, SMBS, 0x10)
                Field (SMRG, ByteAcc, NoLock, Preserve)
                {
                    HSTS,   8, 
                    SSTS,   8, 
                    HSTC,   8, 
                    HCMD,   8, 
                    HADR,   8, 
                    HDT0,   8, 
                    HDT1,   8, 
                    BLKD,   8
                }

                Field (SMRG, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x05), 
                    HDTW,   16
                }

                Method (SCMD, 4, NotSerialized)
                {
                    Local0 = 0x05
                    While (Local0)
                    {
                        HADR = Arg0
                        HCMD = Arg1
                        HDTW = Arg2
                        HSTS = 0xFF
                        HSTC = Arg3
                        Local7 = 0xFF
                        While (Local7)
                        {
                            Local7--
                            If ((HSTS & 0x02))
                            {
                                Local7 = Zero
                                Local0 = One
                            }
                        }

                        Local0--
                    }

                    If ((HSTS & 0x02))
                    {
                        Return (HDTW) /* \_SB_.PCI0.SBRG.HDTW */
                    }
                    Else
                    {
                        Return (Ones)
                    }
                }

                Method (SBYT, 2, NotSerialized)
                {
                    SCMD (Arg0, Arg1, Zero, 0x44)
                }

                Method (WBYT, 3, NotSerialized)
                {
                    SCMD (Arg0, Arg1, Arg2, 0x48)
                }

                Method (WWRD, 3, NotSerialized)
                {
                    SCMD (Arg0, Arg1, Arg2, 0x4C)
                }

                Method (RSBT, 2, NotSerialized)
                {
                    Arg0 |= One
                    Return (SCMD (Arg0, Arg1, Zero, 0x44))
                }

                Method (RBYT, 2, NotSerialized)
                {
                    Arg0 |= One
                    Return (SCMD (Arg0, Arg1, Zero, 0x48))
                }

                Method (RWRD, 2, NotSerialized)
                {
                    Arg0 |= One
                    Return (SCMD (Arg0, Arg1, Zero, 0x4C))
                }

                Scope (\)
                {
                    OperationRegion (RAMW, SystemMemory, (TOPM - 0x00010000), 0x00010000)
                    Field (RAMW, ByteAcc, NoLock, Preserve)
                    {
                        PAR0,   32, 
                        PAR1,   32, 
                        PAR2,   32
                    }

                    OperationRegion (IOB2, SystemIO, 0xB2, 0x02)
                    Field (IOB2, ByteAcc, NoLock, Preserve)
                    {
                        SMIC,   8, 
                        SMIS,   8
                    }

                    Method (ISMI, 1, Serialized)
                    {
                        SMIC = Arg0
                    }

                    Method (GNVS, 1, Serialized)
                    {
                        PAR0 = Arg0
                        ISMI (0x70)
                        Return (PAR1) /* \PAR1 */
                    }

                    Method (SNVS, 2, Serialized)
                    {
                        PAR0 = Arg0
                        PAR1 = Arg1
                        ISMI (0x71)
                    }

                    Name (ARBF, Buffer (0x10) {})
                    CreateDWordField (ARBF, Zero, REAX)
                    CreateDWordField (ARBF, 0x04, REBX)
                    CreateDWordField (ARBF, 0x08, RECX)
                    CreateDWordField (ARBF, 0x0C, REDX)
                    Method (SMSR, 1, Serialized)
                    {
                        CreateDWordField (Arg0, Zero, AEAX)
                        CreateDWordField (Arg0, 0x04, AEBX)
                        CreateDWordField (Arg0, 0x08, AECX)
                        CreateDWordField (Arg0, 0x0C, AEDX)
                        PAR0 = AECX /* \SMSR.AECX */
                        PAR1 = AEAX /* \SMSR.AEAX */
                        PAR2 = AEDX /* \SMSR.AEDX */
                        ISMI (0x7C)
                    }

                    Method (GMSR, 1, Serialized)
                    {
                        PAR0 = Arg0
                        ISMI (0x7B)
                        RECX = Arg0
                        REAX = PAR1 /* \PAR1 */
                        REDX = PAR2 /* \PAR2 */
                        Return (ARBF) /* \ARBF */
                    }
                }

                Device (^PCIE)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x11)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xE0000000,         // Address Base
                            0x10000000,         // Address Length
                            _Y04)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y04._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y04._LEN, LEN1)  // _LEN: Length
                        BAS1 = PCIB /* \PCIB */
                        LEN1 = PCIL /* \PCIL */
                        Return (CRS) /* \_SB_.PCI0.PCIE.CRS_ */
                    }
                }

                Scope (\)
                {
                }

                Device (OMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y05)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y06)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (APIC)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y05._LEN, ML01)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y05._BAS, MB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y06._LEN, ML02)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y06._BAS, MB02)  // _BAS: Base Address
                            MB01 = 0xFEC00000
                            ML01 = 0x1000
                            MB02 = 0xFEE00000
                            ML02 = 0x1000
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.OMSC.CRS_ */
                    }
                }

                Device (^^RMEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x000A0000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y07)
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            _Y08)
                        Memory32Fixed (ReadWrite,
                            0x00100000,         // Address Base
                            0x00000000,         // Address Length
                            _Y09)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0A)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.RMEM._Y07._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y07._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y08._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y08._LEN, LEN2)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y09._LEN, LEN3)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0A._BAS, BAS4)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0A._LEN, LEN4)  // _LEN: Length
                        If (OSFL ()) {}
                        Else
                        {
                            If (MG1B)
                            {
                                If ((MG1B > 0x000C0000))
                                {
                                    BAS1 = 0x000C0000
                                    LEN1 = (MG1B - BAS1) /* \_SB_.RMEM._CRS.BAS1 */
                                }
                            }
                            Else
                            {
                                BAS1 = 0x000C0000
                                LEN1 = 0x00020000
                            }

                            If (Local0 = (MG1B + MG1L) /* \MG1L */)
                            {
                                BAS2 = Local0
                                LEN2 = (0x00100000 - BAS2) /* \_SB_.RMEM._CRS.BAS2 */
                            }
                        }

                        LEN3 = (MG2B - 0x00100000)
                        BAS4 = (MG2B + MG2L) /* \MG2L */
                        LEN4 = (Zero - BAS4) /* \_SB_.RMEM._CRS.BAS4 */
                        Return (CRS) /* \_SB_.RMEM.CRS_ */
                    }
                }

                Scope (\)
                {
                    Field (\_SB.PCI0.SBRG.GPBX, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x0C), 
                            ,   1, 
                        SB01,   1, 
                            ,   4, 
                        SB06,   1, 
                        SB07,   1, 
                            ,   1, 
                        SB09,   1, 
                        SB10,   1, 
                        SB11,   1, 
                            ,   1, 
                        SB13,   1, 
                        SB14,   1, 
                        SB15,   1, 
                            ,   6, 
                        SB22,   1, 
                        Offset (0x0F), 
                        SB24,   1, 
                            ,   1, 
                        SB26,   1, 
                        SB27,   1, 
                        SB28,   1, 
                        Offset (0x18), 
                            ,   25, 
                        BLNK,   1, 
                        Offset (0x2C), 
                            ,   11, 
                        IV0B,   1, 
                        Offset (0x38), 
                        SB32,   1, 
                        SB33,   1, 
                        SB34,   1, 
                        SB35,   1, 
                        SB36,   1, 
                        SB37,   1, 
                        SB38,   1, 
                        SB39,   1
                    }

                    OperationRegion (RCBA, SystemMemory, 0xFED1C000, 0x4000)
                    Field (RCBA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x3418), 
                        FDRT,   32
                    }
                }

                Scope (\_SB.PCI0.SBRG)
                {
                    Method (OEMI, 0, NotSerialized)
                    {
                    }

                    Method (OEMS, 1, NotSerialized)
                    {
                        If ((Arg0 == 0x03)) {}
                    }

                    Name (CLKB, Buffer (0x20) {})
                    Method (RCLK, 0, NotSerialized)
                    {
                        RBLK (0xD2, 0x1F, CLKB, 0x1F)
                    }

                    Method (WCLK, 0, NotSerialized)
                    {
                        WBLK (0xD2, 0x1F, 0x1F, CLKB)
                    }

                    Method (RCKB, 1, NotSerialized)
                    {
                        RCLK ()
                        Local0 = DerefOf (Index (CLKB, Arg0))
                        Return (Local0)
                    }

                    Method (WCKB, 2, NotSerialized)
                    {
                        Index (CLKB, Arg0) = Arg1
                    }

                    Name (DATA, Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                    Mutex (SMBA, 0x00)
                    Method (SMBC, 4, NotSerialized)
                    {
                        Acquire (SMBA, 0xFFFF)
                        HSTS = 0xFF
                        Sleep (0x0A)
                        Local0 = HSTS /* \_SB_.PCI0.SBRG.HSTS */
                        Local0 &= 0x1F
                        Local1 = 0xFF
                        While (((Local1 > Zero) && (Local0 != Zero)))
                        {
                            Local1--
                            HSTS = 0xFF
                            Sleep (0x0A)
                            Local0 = HSTS /* \_SB_.PCI0.SBRG.HSTS */
                            Local0 &= 0x1F
                        }

                        If (Local0)
                        {
                            HSTC = 0x02
                            Sleep (0x0A)
                            HSTC = Zero
                            HSTS = 0xFF
                            Sleep (0x0A)
                            Local0 = HSTS /* \_SB_.PCI0.SBRG.HSTS */
                            Local0 &= 0x1F
                            Local1 = 0xFF
                            While (((Local1 > Zero) && (Local0 != Zero)))
                            {
                                Local1--
                                HSTS = 0xFF
                                Sleep (0x0A)
                                Local0 = HSTS /* \_SB_.PCI0.SBRG.HSTS */
                                Local0 &= 0x1F
                            }

                            If (Local0)
                            {
                                Index (DATA, Zero) = One
                                Return (DATA) /* \_SB_.PCI0.SBRG.DATA */
                            }
                        }

                        HCMD = Arg1
                        HADR = Arg0
                        Local0 = (Arg0 & One)
                        If (!Local0)
                        {
                            Local0 = (Arg2 & 0x04)
                            If (Local0)
                            {
                                HDTW = Arg3
                            }
                            Else
                            {
                                HDT0 = Arg3
                            }
                        }

                        HSTC = Arg2
                        Sleep (0x0A)
                        Local0 = HSTS /* \_SB_.PCI0.SBRG.HSTS */
                        Local1 = 0xFF
                        While ((Local1 > Zero))
                        {
                            Local2 = (Local0 & 0x1C)
                            If (Local2)
                            {
                                Index (DATA, Zero) = One
                                Return (DATA) /* \_SB_.PCI0.SBRG.DATA */
                            }

                            Local2 = (Local0 & 0x02)
                            If (Local2)
                            {
                                Index (DATA, Zero) = Zero
                                Local2 = (Arg2 & 0x04)
                                If (Local0)
                                {
                                    Index (DATA, One) = HDTW /* \_SB_.PCI0.SBRG.HDTW */
                                }
                                Else
                                {
                                    Index (DATA, One) = HDT0 /* \_SB_.PCI0.SBRG.HDT0 */
                                }

                                Return (DATA) /* \_SB_.PCI0.SBRG.DATA */
                            }

                            Sleep (0x0A)
                            Local0 = HSTS /* \_SB_.PCI0.SBRG.HSTS */
                            Local1--
                        }

                        Index (DATA, Zero) = One
                        Release (SMBA)
                        Return (DATA) /* \_SB_.PCI0.SBRG.DATA */
                    }

                    Method (SMBB, 2, NotSerialized)
                    {
                        HCMD = Zero
                        Sleep (0x02)
                        HADR = Arg0
                        Sleep (0x02)
                        HSTS = 0xFF
                        Sleep (0x02)
                        HSTC = 0x54
                        Local0 = 0xFF
                        While (Local0)
                        {
                            Local0--
                            Sleep (0x02)
                            If ((HSTS & 0x02))
                            {
                                Local0 = Zero
                                Local1 = One
                            }
                        }

                        Local2 = HDT0 /* \_SB_.PCI0.SBRG.HDT0 */
                        Return (Local2)
                    }

                    Method (WBLK, 4, NotSerialized)
                    {
                        Acquire (SMBA, 0xFFFF)
                        Local0 = HSTC /* \_SB_.PCI0.SBRG.HSTC */
                        Local0 = Arg2
                        Local1 = Zero
                        While (Local0)
                        {
                            BLKD = DerefOf (Index (Arg3, Local1))
                            Local0--
                            Local1++
                        }

                        Local0 = HSTC /* \_SB_.PCI0.SBRG.HSTC */
                        HDT0 = Arg2
                        SMBB (Arg0, Arg1)
                        Release (SMBA)
                    }

                    Method (RBLK, 4, NotSerialized)
                    {
                        Acquire (SMBA, 0xFFFF)
                        Local0 = (Arg0 | One)
                        Local1 = SMBB (Local0, Arg1)
                        Local0 = HSTC /* \_SB_.PCI0.SBRG.HSTC */
                        Local0 = Arg3
                        Local2 = (Local1 + One)
                        Local1 = Zero
                        While (Local0)
                        {
                            Index (Arg2, Local1) = BLKD /* \_SB_.PCI0.SBRG.BLKD */
                            Local0--
                            Local1++
                        }

                        Release (SMBA)
                    }

                    Name (CKFG, Package (0x06)
                    {
                        Package (0x09)
                        {
                            0x3C, 
                            0x54, 
                            0xAD, 
                            0x21, 
                            0x94, 
                            0x68, 
                            0xF2, 
                            0x23, 
                            One
                        }, 

                        Package (0x09)
                        {
                            0x24, 
                            0x30, 
                            0x13, 
                            0x20, 
                            0x94, 
                            0x68, 
                            0xF2, 
                            0x23, 
                            One
                        }, 

                        Package (0x09)
                        {
                            0x24, 
                            0x24, 
                            0x0C, 
                            0x18, 
                            0x94, 
                            0x68, 
                            0xF2, 
                            0x23, 
                            Zero
                        }, 

                        Package (0x09)
                        {
                            0xBC, 
                            0x34, 
                            0x0A, 
                            0x15, 
                            0x94, 
                            0x68, 
                            0xF2, 
                            0x23, 
                            One
                        }, 

                        Package (0x09)
                        {
                            0x3C, 
                            0x32, 
                            0x09, 
                            0x14, 
                            0x94, 
                            0x68, 
                            0xF2, 
                            0x23, 
                            One
                        }, 

                        Package (0x09)
                        {
                            0x3C, 
                            0x28, 
                            0x06, 
                            0x10, 
                            0x94, 
                            0x68, 
                            0xF2, 
                            0x23, 
                            Zero
                        }
                    })
                    Name (CKFT, Package (0x04)
                    {
                        Package (0x09)
                        {
                            0xE4, 
                            0x2B, 
                            0x3B, 
                            0x1D, 
                            0x94, 
                            0x68, 
                            0xFF, 
                            0x23, 
                            One
                        }, 

                        Package (0x09)
                        {
                            0xA4, 
                            0x28, 
                            0x0F, 
                            0x1B, 
                            0x94, 
                            0x68, 
                            0xFF, 
                            0x23, 
                            One
                        }, 

                        Package (0x09)
                        {
                            0xBC, 
                            0x2E, 
                            0xA2, 
                            0x12, 
                            0x94, 
                            0x68, 
                            0xF2, 
                            0x23, 
                            One
                        }, 

                        Package (0x09)
                        {
                            0x3C, 
                            0x2B, 
                            0x2E, 
                            0x11, 
                            0x94, 
                            0x68, 
                            0xF2, 
                            0x23, 
                            One
                        }
                    })
                    Name (CKGX, Zero)
                    Name (CKTX, Zero)
                    Name (DOCE, Zero)
                    Method (FSBA, 1, NotSerialized)
                    {
                        Local0 = Arg0
                        Local0 &= 0xFF
                        CKGX = Zero
                        CKTX = Zero
                        DOCE = One
                        Local1 = MFSB /* \MFSB */
                        Local1 &= 0x07
                        If ((Local1 == 0x03))
                        {
                            CKGX = 0x03
                            CKTX = 0x02
                        }

                        ^EC0.ECXW (0xE1, One)
                        If ((Local0 != 0x03))
                        {
                            If ((DOCE == Zero))
                            {
                                RCLK ()
                                Local2 = (RCKB (Zero) & 0xDF)
                                WCKB (Zero, Local2)
                                WCLK ()
                                Sleep (0x0A)
                            }

                            If ((FS70 == Zero))
                            {
                                If ((DOCE != One))
                                {
                                    FSBX ((One + CKGX))
                                }
                                Else
                                {
                                    ^EC0.SDOC = Zero
                                }
                            }

                            Sleep (0x0A)
                            If ((Local0 == Zero))
                            {
                                If ((DOCE != One))
                                {
                                    FSBX ((Zero + CKGX))
                                }
                                Else
                                {
                                    ^EC0.SDOC = 0x02
                                }
                            }

                            If ((DOCE == Zero))
                            {
                                RCLK ()
                                Local2 = (RCKB (Zero) | 0x20)
                                WCKB (Zero, Local2)
                                WCLK ()
                                Sleep (0x0A)
                            }
                        }
                        Else
                        {
                            If (ACPS)
                            {
                                If ((DOCE != One))
                                {
                                    FSBX ((One + CKGX))
                                }
                                Else
                                {
                                    ^EC0.SDOC = Zero
                                }
                            }
                            Else
                            {
                                ^EC0.ECXW (0xE1, Zero)
                            }
                        }

                        If ((Local0 == 0x02))
                        {
                            ^EC0.ECXW (0xE1, Zero)
                        }

                        Return (One)
                    }

                    Method (STOD, 0, NotSerialized)
                    {
                        FSBX (One)
                    }

                    Method (DTOP, 0, NotSerialized)
                    {
                        FSBT (0x03)
                        FSBT (0x04)
                        FSBT (0x05)
                        FSBT (0x06)
                        FSBT (0x07)
                        FSBX (0x02)
                    }

                    Method (PTOD, 0, NotSerialized)
                    {
                        FSBT (0x07)
                        FSBT (0x06)
                        FSBT (0x05)
                        FSBT (0x04)
                        FSBT (0x03)
                        FSBX (One)
                    }

                    Method (DTOS, 0, NotSerialized)
                    {
                        FSBX (Zero)
                    }

                    Method (FSBX, 1, NotSerialized)
                    {
                        RCLK ()
                        WCKB (0x0B, DerefOf (Index (DerefOf (Index (CKFG, Arg0)), Zero)))
                        WCKB (0x0C, DerefOf (Index (DerefOf (Index (CKFG, Arg0)), One)))
                        WCKB (0x0D, DerefOf (Index (DerefOf (Index (CKFG, Arg0)), 0x02)))
                        WCKB (0x0E, DerefOf (Index (DerefOf (Index (CKFG, Arg0)), 0x03)))
                        WCLK ()
                        Sleep (0x32)
                        RCLK ()
                        WCKB (0x0F, DerefOf (Index (DerefOf (Index (CKFG, Arg0)), 0x04)))
                        WCKB (0x10, DerefOf (Index (DerefOf (Index (CKFG, Arg0)), 0x05)))
                        WCKB (0x11, DerefOf (Index (DerefOf (Index (CKFG, Arg0)), 0x06)))
                        WCKB (0x12, DerefOf (Index (DerefOf (Index (CKFG, Arg0)), 0x07)))
                        WCLK ()
                        Sleep (0x32)
                    }

                    Method (FSBT, 1, NotSerialized)
                    {
                        RCLK ()
                        WCKB (0x0B, DerefOf (Index (DerefOf (Index (CKFT, Arg0)), Zero)))
                        WCKB (0x0C, DerefOf (Index (DerefOf (Index (CKFT, Arg0)), One)))
                        WCKB (0x0D, DerefOf (Index (DerefOf (Index (CKFT, Arg0)), 0x02)))
                        WCKB (0x0E, DerefOf (Index (DerefOf (Index (CKFT, Arg0)), 0x03)))
                        WCLK ()
                        Sleep (0x32)
                        RCLK ()
                        WCKB (0x0F, DerefOf (Index (DerefOf (Index (CKFT, Arg0)), 0x04)))
                        WCKB (0x10, DerefOf (Index (DerefOf (Index (CKFT, Arg0)), 0x05)))
                        WCKB (0x11, DerefOf (Index (DerefOf (Index (CKFT, Arg0)), 0x06)))
                        WCKB (0x12, DerefOf (Index (DerefOf (Index (CKFT, Arg0)), 0x07)))
                        WCLK ()
                        Sleep (0x32)
                    }

                    Method (CCSS, 1, NotSerialized)
                    {
                        If (Arg0)
                        {
                            RCLK ()
                            Local2 = (RCKB (Zero) | 0x20)
                            WCKB (Zero, Local2)
                            WCLK ()
                            Sleep (0x0A)
                        }
                        Else
                        {
                            RCLK ()
                            Local2 = (RCKB (Zero) & 0xDF)
                            WCKB (Zero, Local2)
                            WCLK ()
                            Sleep (0x0A)
                        }
                    }

                    Method (KCRD, 1, Serialized)
                    {
                        If (Arg0)
                        {
                            RCLK ()
                            Local0 = (RCKB (0x02) | 0x08)
                            WCKB (0x02, Local0)
                            WCLK ()
                            Sleep (0x0A)
                        }
                        Else
                        {
                            RCLK ()
                            Local0 = (RCKB (0x02) & 0xF7)
                            WCKB (0x02, Local0)
                            WCLK ()
                            Sleep (0x0A)
                        }
                    }

                    Method (FSBG, 0, Serialized)
                    {
                        Local0 = 0x03
                        Local1 = GNVS (0x2550)
                        Local0 <<= 0x08
                        Return ((Local0 + Local1))
                    }
                }

                Scope (\)
                {
                    Method (OCRS, 1, Serialized)
                    {
                        Local0 = Arg0
                        Local0 ^= One
                        SNVS (0x14F5, Local0)
                        If (Arg0)
                        {
                            \_SB.PCI0.SBRG.KCRD (Arg0)
                            SB24 = Zero
                        }
                        Else
                        {
                            SB24 = One
                            \_SB.PCI0.SBRG.KCRD (Arg0)
                        }

                        Sleep (0x64)
                        Notify (\_SB.PCI0.USB2, Zero) // Bus Check
                        Return (One)
                    }

                    Method (OCRG, 0, Serialized)
                    {
                        Local0 = GNVS (0x14F5)
                        Local0 ^= One
                        Return (Local0)
                    }

                    Method (OWLS, 1, Serialized)
                    {
                        Local0 = Arg0
                        Local0 ^= One
                        SNVS (0x1500, Local0)
                        If (Arg0)
                        {
                            SB34 = One
                            SB10 = Zero
                            Sleep (0x64)
                            Notify (\_SB.PCI0.P0P5, Zero) // Bus Check
                        }
                        Else
                        {
                            SB34 = Zero
                            SB10 = One
                            Sleep (0x64)
                            Notify (\_SB.PCI0.P0P5, Zero) // Bus Check
                        }

                        Return (One)
                    }

                    Method (OWLG, 0, Serialized)
                    {
                        Local0 = GNVS (0x1500)
                        Local0 ^= One
                        Return (Local0)
                    }

                    Method (OBTS, 1, Serialized)
                    {
                        Local0 = Arg0
                        Local0 ^= One
                        SNVS (0x14FB, Local0)
                        If (Arg0)
                        {
                            SB33 = One
                            SB34 = One
                            Sleep (0x03E8)
                            Notify (\_SB.PCI0.USB3, Zero) // Bus Check
                            Sleep (0x64)
                            Notify (\_SB.PCI0.USB3, Zero) // Bus Check
                        }
                        Else
                        {
                            SB33 = Zero
                            Local2 = GNVS (0x1500)
                            If (Local2)
                            {
                                SB34 = Zero
                            }

                            Sleep (0x64)
                            Notify (\_SB.PCI0.USB3, Zero) // Bus Check
                            Sleep (0x64)
                            Notify (\_SB.PCI0.USB3, Zero) // Bus Check
                        }

                        Return (One)
                    }

                    Method (OBTG, 0, Serialized)
                    {
                        Local0 = GNVS (0x155B)
                        If ((Local0 == Zero))
                        {
                            Return (0x80000002)
                        }

                        Local0 = GNVS (0x14FB)
                        Local0 ^= One
                        Return (Local0)
                    }

                    Method (USBC, 1, Serialized)
                    {
                        Local0 = (Arg0 & 0x03)
                        DBG8 = Local0
                        SNVS (0x2552, Local0)
                        Return (One)
                    }

                    Method (USBT, 0, Serialized)
                    {
                        Local0 = GNVS (0x2552)
                        Return (Local0)
                    }
                }

                Scope (\)
                {
                    Name (MNAM, "1215N")
                    Field (RAMW, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        ACPS,   1, 
                        DCPS,   1, 
                        LCDC,   1, 
                        CPUC,   1, 
                        TPLK,   1, 
                        FANC,   1, 
                        BLTS,   1, 
                        DC2S,   1, 
                        FS70,   8, 
                        BCAT,   16, 
                        BLTC,   8, 
                        BCGS,   8, 
                        DSAF,   32, 
                        MDLC,   32, 
                        HWIF,   32, 
                        MDL1,   32, 
                        Offset (0xB0), 
                        TRTY,   8, 
                        FSFN,   8, 
                        FSTA,   16, 
                        FADR,   32, 
                        FSIZ,   16, 
                        Offset (0xC0), 
                        USBI,   32, 
                        WAKT,   8, 
                        SHE0,   8
                    }

                    Field (RAMW, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x16), 
                        DAWL,   1, 
                        DABT,   1, 
                        DAIR,   1, 
                        DACM,   1, 
                        DATV,   1, 
                        DAGP,   1, 
                        DADS,   1, 
                        DAMD,   1, 
                        DACR,   1, 
                        DA3G,   1, 
                        DAWX,   1, 
                        Offset (0x1A)
                    }

                    Field (RAMW, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x100), 
                        FN00,   8, 
                        FN01,   8, 
                        FN02,   8, 
                        FN03,   8, 
                        FN04,   8, 
                        FN05,   8, 
                        FN06,   8, 
                        FN07,   8, 
                        FN08,   8, 
                        FN09,   8, 
                        FN10,   8, 
                        FN11,   8, 
                        FN12,   8, 
                        FN13,   8, 
                        FN14,   8, 
                        FN15,   8, 
                        FN16,   8, 
                        FN17,   8, 
                        FN18,   8, 
                        FN19,   8, 
                        FN20,   8, 
                        FN21,   8, 
                        FN22,   8, 
                        FN23,   8, 
                        FN24,   8, 
                        FN25,   8, 
                        FN26,   8, 
                        FN27,   8, 
                        FN28,   8, 
                        FN29,   8, 
                        FA00,   8, 
                        FA01,   8, 
                        FA02,   8, 
                        FA03,   8, 
                        FA04,   8, 
                        FA05,   8, 
                        FA06,   8, 
                        FA07,   8, 
                        FA08,   8, 
                        FA09,   8, 
                        FA10,   8, 
                        FA11,   8, 
                        FA12,   8, 
                        FA13,   8, 
                        FA14,   8, 
                        FA15,   8, 
                        FA16,   8, 
                        FA17,   8, 
                        FA18,   8, 
                        FA19,   8, 
                        FA20,   8, 
                        FA21,   8, 
                        FA22,   8, 
                        FA23,   8, 
                        FA24,   8, 
                        FA25,   8, 
                        FA26,   8, 
                        FA27,   8, 
                        FA28,   8, 
                        FA29,   8, 
                        FC00,   8, 
                        FC01,   8, 
                        FC02,   8, 
                        FC03,   8, 
                        FC04,   8, 
                        FC05,   8, 
                        FC06,   8, 
                        FC07,   8, 
                        FC08,   8, 
                        FC09,   8, 
                        FC10,   8, 
                        FC11,   8, 
                        FC12,   8, 
                        FC13,   8, 
                        FC14,   8, 
                        FC15,   8, 
                        FC16,   8, 
                        FC17,   8, 
                        FC18,   8, 
                        FC19,   8, 
                        FC20,   8, 
                        FC21,   8, 
                        FC22,   8, 
                        FC23,   8, 
                        FC24,   8, 
                        FC25,   8, 
                        FC26,   8, 
                        FC27,   8, 
                        FC28,   8, 
                        FC29,   8
                    }

                    Method (ATKN, 1, NotSerialized)
                    {
                        Local1 = Zero
                        If (\_SB.LID.LIDS)
                        {
                            Local1 = ATKR (Arg0)
                        }

                        Return (Local1)
                    }

                    Method (ATKR, 1, NotSerialized)
                    {
                        Local1 = Zero
                        If (\_SB.ATKP)
                        {
                            Notify (\_SB.ATKD, Arg0)
                            Local1 = One
                        }

                        Return (Local1)
                    }
                }

                Scope (\_SB)
                {
                    Name (ATKP, Zero)
                    Device (ATKD)
                    {
                        Name (_HID, "ASUS010")  // _HID: Hardware ID
                        Name (_UID, 0x01010100)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((MSOS () >= MSW7))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (TYPE, 0, Serialized)
                        {
                            Return (0x20313041)
                        }

                        Method (TYP1, 0, Serialized)
                        {
                            Return (0x20205048)
                        }

                        Method (BIOS, 0, Serialized)
                        {
                            Local0 = (0x05 << 0x08)
                            Local1 = 0x03
                            Return ((Local0 + Local1))
                        }

                        Method (VERG, 0, Serialized)
                        {
                            Local0 = (One << 0x08)
                            Local1 = 0x62
                            Return ((Local0 + Local1))
                        }

                        Method (QURY, 1, Serialized)
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            _T_0 = Arg0
                            If ((_T_0 == 0x534C4250))
                            {
                                Local1 = One
                            }
                            Else
                            {
                                If ((_T_0 == 0x474C4250))
                                {
                                    Local1 = One
                                }
                                Else
                                {
                                    If ((_T_0 == 0x50534453))
                                    {
                                        Local1 = One
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x53564643))
                                        {
                                            Local1 = One
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x47564643))
                                            {
                                                Local1 = One
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x53444C57))
                                                {
                                                    Local1 = One
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x47444C57))
                                                    {
                                                        Local1 = One
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x53445243))
                                                        {
                                                            Local1 = One
                                                        }
                                                        Else
                                                        {
                                                            If ((_T_0 == 0x47445243))
                                                            {
                                                                Local1 = One
                                                            }
                                                            Else
                                                            {
                                                                If ((_T_0 == 0x53504448))
                                                                {
                                                                    Local1 = One
                                                                }
                                                                Else
                                                                {
                                                                    If ((_T_0 == 0x45505954))
                                                                    {
                                                                        Local1 = One
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((_T_0 == 0x31505954))
                                                                        {
                                                                            Local1 = One
                                                                        }
                                                                        Else
                                                                        {
                                                                            If ((_T_0 == 0x53485442))
                                                                            {
                                                                                Local1 = One
                                                                            }
                                                                            Else
                                                                            {
                                                                                If ((_T_0 == 0x47485442))
                                                                                {
                                                                                    Local1 = One
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If ((_T_0 == 0x534F4942))
                                                                                    {
                                                                                        Local1 = One
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If ((_T_0 == 0x47504250))
                                                                                        {
                                                                                            Local1 = One
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If ((_T_0 == 0x53504250))
                                                                                            {
                                                                                                Local1 = One
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                If ((_T_0 == 0x46435748))
                                                                                                {
                                                                                                    Local1 = One
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    Local1 = Zero
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Return (Local1)
                        }

                        Method (INIT, 1, Serialized)
                        {
                            ATKP = One
                            DSAF = Arg0
                            Return (One)
                        }

                        Method (CMSG, 0, Serialized)
                        {
                            Local0 = 0x1300
                            Local0 |= One
                            Local1 = GNVS (0x155B)
                            If ((Local1 != Zero))
                            {
                                Local0 |= 0x02
                            }

                            Local0 |= 0x0400
                            Local0 |= 0x00100000
                            Return (Local0)
                        }

                        Method (WLDS, 1, Serialized)
                        {
                            Return (OWLS (Arg0))
                        }

                        Method (WLDG, 0, Serialized)
                        {
                            Return (OWLG ())
                        }

                        Method (PBLS, 1, Serialized)
                        {
                            Local0 = Arg0
                            Local1 = 0x0B
                            Local1--
                            If ((Local0 > Local1))
                            {
                                Local0 = Local1
                            }

                            SNVS (0x43C8, Local0)
                            ^^PCI0.SBRG.EC0.STBR ()
                            Return (One)
                        }

                        Method (PBLG, 0, Serialized)
                        {
                            Local0 = GNVS (0x43C8)
                            Local1 = 0x0B
                            Local0 |= (Local1 << 0x08)
                            Return (Local0)
                        }

                        Method (CFVS, 1, Serialized)
                        {
                            Local0 = (CFVG () & 0xFF)
                            If ((Local0 != Arg0))
                            {
                                ^^PCI0.SBRG.FSBA (Arg0)
                            }

                            Return (One)
                        }

                        Method (CFVG, 0, Serialized)
                        {
                            Return (^^PCI0.SBRG.FSBG ())
                        }

                        Method (BTHS, 1, Serialized)
                        {
                            Return (OBTS (Arg0))
                        }

                        Method (BTHG, 0, Serialized)
                        {
                            Return (OBTG ())
                        }

                        Method (SDSP, 1, Serialized)
                        {
                            ^^PCI0.VGA.SWHD (Arg0)
                            Return (One)
                        }

                        Method (CRDS, 1, Serialized)
                        {
                            Return (OCRS (Arg0))
                        }

                        Method (CRDG, 0, Serialized)
                        {
                            Return (OCRG ())
                        }

                        Method (HDPS, 1, Serialized)
                        {
                            Local0 = Arg0
                            Local1 = Arg0
                            Local0 >>= 0x08
                            Local1 &= 0xFF
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            _T_0 = Local1
                            If ((_T_0 == 0x04)) {}
                            Else
                            {
                                If ((_T_0 == 0x06)) {}
                                Else
                                {
                                    If ((_T_0 == 0x07)) {}
                                    Else
                                    {
                                        If ((_T_0 == 0x0B)) {}
                                        Else
                                        {
                                            If ((_T_0 == 0x0C)) {}
                                            Else
                                            {
                                                If ((_T_0 == 0x0E)) {}
                                                Else
                                                {
                                                    Return (Zero)
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            If (((Local0 < 0x05) & (Local0 > Zero)))
                            {
                                SNVS (0x81C0, Local1)
                                SNVS (0x81C8, Local0)
                                SNVS (0x8180, 0x46)
                                SNVS (0x8188, 0x57)
                                SNVS (0x8198, (GNVS (0x8198) | 0x40))
                                Return (One)
                            }

                            Return (Zero)
                        }

                        Method (MDBG, 1, Serialized)
                        {
                            Local0 = (Arg0 & 0xFF)
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            _T_0 = Local0
                            If ((_T_0 == One))
                            {
                                Local1 = (Arg0 >> 0x08)
                                Local2 = (Local1 & 0xFF)
                                ATKN (Local2)
                                Return (One)
                            }
                            Else
                            {
                                If ((_T_0 == 0x02))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Method (PBPS, 1, Serialized)
                        {
                            Local0 = Arg0
                            Local0 ^= One
                            ^^PCI0.SBRG.EC0.SF18 = Local0
                            ^^PCI0.SBRG.EC0.ELBS (Arg0)
                            Return (One)
                        }

                        Method (PBPG, 0, Serialized)
                        {
                            Local0 = ^^PCI0.SBRG.EC0.SF18 /* \_SB_.PCI0.SBRG.EC0_.SF18 */
                            Local0 ^= One
                            Return (^^PCI0.SBRG.EC0.ELBG ())
                        }

                        Method (HWCF, 0, Serialized)
                        {
                            Local0 = 0xFFFFF1FF
                            Return (Local0)
                        }

                        Method (KBFT, 1, Serialized)
                        {
                            If (^^PCI0.SBRG.EC0.ECAV ())
                            {
                                If (!Acquire (^^PCI0.SBRG.EC0.MUEC, 0xFFFF))
                                {
                                    ^^PCI0.SBRG.EC0.S251 = Arg0
                                    Release (^^PCI0.SBRG.EC0.MUEC)
                                    Return (One)
                                }
                            }

                            Return (Zero)
                        }

                        Method (HKEY, 0, Serialized)
                        {
                            If (^^PCI0.SBRG.EC0.ECAV ())
                            {
                                If (!Acquire (^^PCI0.SBRG.EC0.MUEC, 0xFFFF))
                                {
                                    Local0 = ^^PCI0.SBRG.EC0.SM08 /* \_SB_.PCI0.SBRG.EC0_.SM08 */
                                    Release (^^PCI0.SBRG.EC0.MUEC)
                                    Return (One)
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Scope (\)
                    {
                        Name (OSLX, 0x10)
                        Name (OSMS, 0x20)
                        Name (MS98, 0x21)
                        Name (MSME, 0x22)
                        Name (MS2K, 0x23)
                        Name (MSXP, 0x24)
                        Name (MSVT, 0x25)
                        Name (MSW7, 0x26)
                        Name (OSFG, Ones)
                        Method (MSOS, 0, NotSerialized)
                        {
                            If ((OSFG != Ones))
                            {
                                Return (OSFG) /* \OSFG */
                            }

                            OSFG = Zero
                            If (CondRefOf (_OSI, Local0))
                            {
                                If (_OSI ("Windows 2001"))
                                {
                                    OSFG = MSXP /* \MSXP */
                                }

                                If (_OSI ("Windows 2001 SP1"))
                                {
                                    OSFG = MSXP /* \MSXP */
                                }

                                If (_OSI ("Windows 2001 SP2"))
                                {
                                    OSFG = MSXP /* \MSXP */
                                }

                                If (_OSI ("Windows 2006"))
                                {
                                    OSFG = MSVT /* \MSVT */
                                }

                                If (_OSI ("Windows 2009"))
                                {
                                    OSFG = MSW7 /* \MSW7 */
                                }

                                If (_OSI ("Linux"))
                                {
                                    OSFG = OSLX /* \OSLX */
                                }

                                Return (OSFG) /* \OSFG */
                            }
                            Else
                            {
                                If (MCTH (_OS, "Microsoft Windows"))
                                {
                                    OSFG = MS98 /* \MS98 */
                                }
                                Else
                                {
                                    If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
                                    {
                                        OSFG = MSME /* \MSME */
                                    }
                                    Else
                                    {
                                        If (MCTH (_OS, "Microsoft Windows NT"))
                                        {
                                            OSFG = MS2K /* \MS2K */
                                        }
                                        Else
                                        {
                                            OSFG = MSXP /* \MSXP */
                                        }
                                    }
                                }
                            }

                            Return (OSFG) /* \OSFG */
                        }

                        OperationRegion (PMIO, SystemIO, 0x0800, 0x80)
                        Field (PMIO, ByteAcc, NoLock, Preserve)
                        {
                            Offset (0x10), 
                                ,   1, 
                            TDTY,   3, 
                            TENA,   1, 
                            TTDT,   3, 
                            TTEN,   1, 
                                ,   8, 
                            THLS,   1
                        }

                        Method (BLCS, 0, NotSerialized)
                        {
                            If ((\_SB.PCI0.VGA.TCHE & 0x02))
                            {
                                DBG8 = 0x45
                            }
                            Else
                            {
                                Local0 = \_SB.PCI0.VGA.CBLV
                                Local0 &= 0xFF
                                Local1 = Zero
                                Local3 = 0x0B
                                Local3--
                                While (((Local1 <= Local3) && (Local0 != DerefOf (Index (\_SB.PCI0.VGA.LCDD.BBPS, 
                                    Local1)))))
                                {
                                    Local1++
                                }

                                If ((Local1 <= Local3))
                                {
                                    Local1 = (Local3 - Local1)
                                    SNVS (0x43C8, Local1)
                                }
                            }
                        }

                        Method (LPFS, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x05))
                            {
                                SNVS (0x8098, GNVS (0x8078))
                            }

                            \_SB.PCI0.SBRG.FSBA (One)
                        }

                        Method (LPWK, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x03))
                            {
                                \_SB.PCI0.SBRG.EC0.UAPF ()
                                \_SB.PCI0.SBRG.EC0.UBPF ()
                                \_SB.PCI0.SBRG.EC0.STBR ()
                            }

                            WAKT = Arg0
                            Notify (\_SB.PCI0.BAT0, 0x81) // Information Change
                            Notify (\_SB.PCI0.AC0, 0x81) // Information Change
                            If (!GNVS (0x155C))
                            {
                                Notify (\_SB.PWRB, 0x02) // Device Wake
                            }

                            Notify (\_PR.CPU1, 0x80) // Target object type does not support notifies
                            Notify (\_PR.CPU1, 0x81) // Target object type does not support notifies
                            Sleep (0x0A)
                            If (Ones)
                            {
                                Notify (\_PR.CPU2, 0x80) // Target object type does not support notifies
                                Notify (\_PR.CPU2, 0x81) // Target object type does not support notifies
                            }
                        }
                    }

                    Scope (\_SB)
                    {
                        Device (LID)
                        {
                            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                            Name (LIDS, One)
                            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                            {
                                If (^^PCI0.SBRG.EC0.ECAV ())
                                {
                                    If (!Acquire (^^PCI0.SBRG.EC0.MUEC, 0xFFFF))
                                    {
                                        LIDS = ^^PCI0.SBRG.EC0.SF13 /* \_SB_.PCI0.SBRG.EC0_.SF13 */
                                        Release (^^PCI0.SBRG.EC0.MUEC)
                                    }
                                }

                                Return (LIDS) /* \_SB_.LID_.LIDS */
                            }
                        }

                        Device (SLPB)
                        {
                            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
                        }
                    }

                    Scope (PCI0.SBRG.EC0)
                    {
                        Name (BRLV, Package (0x0B)
                        {
                            0x0D, 
                            0x12, 
                            0x17, 
                            0x1C, 
                            0x21, 
                            0x26, 
                            0x2B, 
                            0x30, 
                            0x3C, 
                            0x4D, 
                            0x64
                        })
                        Method (GTBR, 1, Serialized)
                        {
                            Local0 = Arg0
                            Local0 = DerefOf (Index (BRLV, Local0))
                            Local0 = ((Local0 * 0xFF) / 0x64)
                            Return (Local0)
                        }

                        Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            Notify (SLPB, 0x80) // Status Change
                        }

                        Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            If ((DSAF && One))
                            {
                                Local0 = 0x10
                            }
                            Else
                            {
                                Local0 = ^^^^ATKD.WLDG ()
                                Local0 ^= One
                                ^^^^ATKD.WLDS (Local0)
                                If (Local0)
                                {
                                    Local0 = 0x10
                                }
                                Else
                                {
                                    Local0 = 0x11
                                }
                            }

                            ATKN (Local0)
                            \AMW0.AMWN (0x5D)
                        }

                        Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            Local0 = MSOS ()
                            If (((Local0 != OSLX) && (Local0 != Zero))) {}
                            Local0 = GNVS (0x43C8)
                            If ((Local0 > Zero))
                            {
                                Local0--
                            }

                            Local1 = 0x0B
                            Local1--
                            If ((Local0 > Local1))
                            {
                                Local0 = Local1
                            }

                            If ((MSOS () == MSW7))
                            {
                                Notify (^^^VGA.LCDD, 0x87) // Device-Specific
                            }
                            Else
                            {
                                SNVS (0x43C8, Local0)
                                STBR ()
                            }

                            ATKN ((Local0 + 0x20))
                            \AMW0.AMWN ((Local0 + 0x20))
                        }

                        Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            Local0 = MSOS ()
                            If (((Local0 != OSLX) && (Local0 != Zero))) {}
                            Local0 = GNVS (0x43C8)
                            Local1 = 0x0B
                            Local1--
                            If ((Local0 < Local1))
                            {
                                Local0++
                            }
                            Else
                            {
                                Local0 = Local1
                            }

                            If ((MSOS () == MSW7))
                            {
                                Notify (^^^VGA.LCDD, 0x86) // Device-Specific
                            }
                            Else
                            {
                                SNVS (0x43C8, Local0)
                                STBR ()
                            }

                            ATKN ((Local0 + 0x20))
                            \AMW0.AMWN ((Local0 + 0x10))
                        }

                        Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            If ((^^^VGA.DOSF >= 0x02))
                            {
                                If ((^^^VGA.DOSF == 0x03))
                                {
                                    Notify (VGA, 0x82) // Device-Specific Change
                                }
                            }
                            Else
                            {
                                Local0 = ^^^VGA.GETN ()
                                If (!ATKP)
                                {
                                    ^^^VGA.SWHD (Local0)
                                }
                            }

                            ATKN ((Local0 + 0x2F))
                            \AMW0.AMWN (0xCC)
                        }

                        Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            ATKN (0x37)
                            \AMW0.AMWN (0x6B)
                        }

                        Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            ATKN (0x13)
                            \AMW0.AMWN (0x32)
                        }

                        Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            ATKN (0x14)
                            \AMW0.AMWN (0x31)
                        }

                        Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            ATKN (0x15)
                            \AMW0.AMWN (0x30)
                        }

                        Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            \AMW0.AMWN (0xE9)
                            ATKN (0x16)
                        }

                        Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query
                        {
                        }

                        Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query
                        {
                        }

                        Method (_Q1B, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            ATKN (0x39)
                            \AMW0.AMWN (0x5C)
                        }

                        Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            \AMW0.AMWN (0xE8)
                        }

                        Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            \AMW0.AMWN (0xBD)
                        }

                        Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            \AMW0.AMWN (0x5C)
                            ATKN (0x39)
                        }

                        Method (_Q28, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            ATKN (0x1B)
                        }

                        Method (_Q29, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            ATKN (0x1C)
                        }

                        Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            ATKN (0x1D)
                        }

                        Method (_Q2B, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            Notify (LID, 0x80) // Status Change
                        }

                        Method (_Q2C, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            Notify (LID, 0x80) // Status Change
                        }

                        Method (_Q31, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            UAPF ()
                            If (^^^VGA.BRNC) {}
                            Else
                            {
                                STBR ()
                            }

                            Notify (AC0, 0x80) // Status Change
                            Notify (BAT0, 0x80) // Status Change
                            Sleep (0x0A)
                            If (ACPS)
                            {
                                ATKN (0x50)
                                \AMW0.AMWN (0x58)
                            }
                            Else
                            {
                                ATKN (0x51)
                                \AMW0.AMWN (0x57)
                            }

                            Notify (\_PR.CPU1, 0x80) // Target object type does not support notifies
                            Notify (\_PR.CPU1, 0x81) // Target object type does not support notifies
                            Sleep (0x0A)
                            If (Ones)
                            {
                                Notify (\_PR.CPU2, 0x80) // Target object type does not support notifies
                                Notify (\_PR.CPU2, 0x81) // Target object type does not support notifies
                            }
                        }

                        Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            UBPF ()
                            If (DCPS)
                            {
                                Sleep (0x01F4)
                            }

                            STBR ()
                            Notify (BAT0, One) // Device Check
                            Notify (BAT0, 0x81) // Information Change
                            Notify (AC0, 0x80) // Status Change
                        }

                        Method (_Q33, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            Notify (BAT0, 0x80) // Status Change
                            Notify (BAT0, 0x81) // Information Change
                            Notify (AC0, 0x80) // Status Change
                        }

                        Method (_Q35, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            Notify (BAT0, 0x80) // Status Change
                            Notify (AC0, 0x80) // Status Change
                        }

                        Method (_Q36, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            Notify (BAT0, 0x80) // Status Change
                            Notify (AC0, 0x80) // Status Change
                        }

                        Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query
                        {
                            If ((ATKN (0x52) | \AMW0.AMWN (0x6E)))
                            {
                                Notify (BAT0, 0x80) // Status Change
                            }
                        }

                        Method (_Q48, 0, NotSerialized)  // _Qxx: EC Query
                        {
                        }

                        Method (STBR, 0, Serialized)
                        {
                            Local0 = MSOS ()
                            If (((Local0 != OSLX) && (Local0 != Zero)))
                            {
                                If ((^^^VGA.TCHE & 0x02))
                                {
                                    Local0 = GNVS (0x43C8)
                                    Local0 = GTBR (Local0)
                                    SNVS (0x8538, Local0)
                                    ^^^VGA.SBLB (Local0)
                                }
                                Else
                                {
                                    ISMI (0x78)
                                }
                            }
                            Else
                            {
                                ISMI (0x78)
                            }
                        }

                        Method (UBPF, 0, Serialized)
                        {
                            If (ECAV ())
                            {
                                If (!Acquire (MUEC, 0xFFFF))
                                {
                                    Local0 = SF01 /* \_SB_.PCI0.SBRG.EC0_.SF01 */
                                    Release (MUEC)
                                    DCPS = Local0
                                }
                            }
                        }

                        Method (UAPF, 0, Serialized)
                        {
                            If (ECAV ())
                            {
                                If (!Acquire (MUEC, 0xFFFF))
                                {
                                    Local0 = SF00 /* \_SB_.PCI0.SBRG.EC0_.SF00 */
                                    Release (MUEC)
                                    ACPS = Local0
                                }
                            }
                        }

                        Method (UBCF, 0, Serialized)
                        {
                            BCAT = BIF1 ()
                        }

                        Method (UBCS, 0, Serialized)
                        {
                            If (ACPS)
                            {
                                BCGS = 0x02
                                Local1 = EBTS ()
                                If ((Local1 != Ones))
                                {
                                    If ((Local1 & 0x40))
                                    {
                                        BCGS = Zero
                                    }
                                }
                            }
                            Else
                            {
                                BCGS = One
                            }
                        }

                        Method (UBEC, 0, Serialized)
                        {
                            If (DCPS) {}
                        }
                    }

                    Scope (\_GPE)
                    {
                        Method (_L1D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
                        {
                            While ((SB13 == Zero))
                            {
                                Sleep (0x1E)
                            }

                            If ((DSAF && One))
                            {
                                Local0 = 0x10
                            }
                            Else
                            {
                                Local0 = \_SB.ATKD.WLDG ()
                                Local0 ^= One
                                \_SB.ATKD.WLDS (Local0)
                                If (Local0)
                                {
                                    Local0 = 0x10
                                }
                                Else
                                {
                                    Local0 = 0x11
                                }
                            }

                            ATKN (Local0)
                            \AMW0.AMWN (0x5D)
                        }
                    }
                }

                Scope (^^PCI0)
                {
                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, Zero)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            PCI0
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (CSTA ())
                        }

                        Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                        {
                            If ((DCPS == Zero))
                            {
                                Return (NBIF) /* \_SB_.PCI0.NBIF */
                            }

                            CBIF ()
                            Return (PBIF) /* \_SB_.PCI0.PBIF */
                        }

                        Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                        {
                            If ((0x10 & _STA ()))
                            {
                                CBST ()
                            }

                            Return (PBST) /* \_SB_.PCI0.PBST */
                        }
                    }

                    Name (NBIF, Package (0x0D)
                    {
                        One, 
                        Ones, 
                        Ones, 
                        One, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        " ", 
                        " ", 
                        " ", 
                        " "
                    })
                    Name (PBIF, Package (0x0D)
                    {
                        One, 
                        0x10CC, 
                        0x1068, 
                        One, 
                        0x36D0, 
                        0x01A4, 
                        0xD2, 
                        0x1C, 
                        0x050A, 
                        "1215N", 
                        " ", 
                        "LION", 
                        "ASUS"
                    })
                    Name (BATF, Buffer (0x02) {})
                    CreateWordField (BATF, Zero, DATW)
                    Name (BAF1, Buffer (0x02) {})
                    CreateWordField (BAF1, Zero, DAT2)
                    Method (CSTA, 0, Serialized)
                    {
                        Local0 = DCPS /* \DCPS */
                        If (Local0)
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (CBIF, 0, Serialized)
                    {
                        ^SBRG.EC0.UBCS ()
                        ^SBRG.EC0.UBEC ()
                        Local0 = ^SBRG.EC0.BIF1 ()
                        If ((Local0 != Ones))
                        {
                            Index (PBIF, One) = Local0
                        }

                        Local0 = ^SBRG.EC0.BIF2 ()
                        If ((Local0 != Ones))
                        {
                            Index (PBIF, 0x02) = Local0
                        }

                        Local0 = ^SBRG.EC0.BIF4 ()
                        If ((Local0 != Ones))
                        {
                            Index (PBIF, 0x04) = Local0
                        }

                        Local0 = ^SBRG.EC0.BIF5 ()
                        If ((Local0 != Ones))
                        {
                            Index (PBIF, 0x05) = Local0
                        }

                        Local0 = ^SBRG.EC0.BIF6 ()
                        If ((Local0 != Ones))
                        {
                            Index (PBIF, 0x06) = Local0
                        }

                        Local0 = ^SBRG.EC0.BIF1 ()
                        If ((Local0 != Ones))
                        {
                            Divide (Local0, 0x64, Local1, Local0)
                            Index (PBIF, 0x07) = Local0
                            Index (PBIF, 0x08) = Local0
                        }
                    }

                    Name (PBST, Package (0x04)
                    {
                        Zero, 
                        0x8000, 
                        0x8000, 
                        0x36B0
                    })
                    Method (CBST, 0, Serialized)
                    {
                        ^SBRG.EC0.UBCS ()
                        Index (PBST, Zero) = BCGS /* \BCGS */
                        Local0 = ^SBRG.EC0.BST1 ()
                        If ((Local0 != Ones))
                        {
                            Index (PBST, One) = Local0
                        }

                        Local0 = ^SBRG.EC0.BST2 ()
                        If ((Local0 != Ones))
                        {
                            Index (PBST, 0x02) = Local0
                        }

                        DATW = ^SBRG.EC0.BST3 ()
                        If ((DATW != Ones))
                        {
                            Index (PBST, 0x03) = DATW /* \_SB_.PCI0.DATW */
                        }
                    }

                    Method (UBLP, 0, Serialized)
                    {
                        If ((BCGS == One))
                        {
                            BLTC = 0x64
                        }

                        If (((BCGS == Zero) || (BCGS == 0x02)))
                        {
                            BLTC = Zero
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (AC0)
                        {
                            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                            {
                                Return (ACPS) /* \ACPS */
                            }

                            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                            {
                                PCI0
                            })
                        }
                    }
                }
            }

            Device (IDE1)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                Name (\FZTF, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         /* ....... */
                })
                Name (REGF, One)
                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        REGF = Arg1
                    }
                }

                Name (TIM0, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x78, 
                        0xB4, 
                        0xF0, 
                        0x0384
                    }, 

                    Package (0x04)
                    {
                        0x23, 
                        0x21, 
                        0x10, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0B, 
                        0x09, 
                        0x04, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        0x70, 
                        0x49, 
                        0x36, 
                        0x27, 
                        0x19, 
                        0x14
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        One, 
                        0x02, 
                        One, 
                        0x02, 
                        One
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        One, 
                        One, 
                        One
                    }, 

                    Package (0x04)
                    {
                        0x04, 
                        0x03, 
                        0x02, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        One, 
                        Zero, 
                        Zero
                    }
                })
                Name (TMD0, Buffer (0x14) {})
                CreateDWordField (TMD0, Zero, PIO0)
                CreateDWordField (TMD0, 0x04, DMA0)
                CreateDWordField (TMD0, 0x08, PIO1)
                CreateDWordField (TMD0, 0x0C, DMA1)
                CreateDWordField (TMD0, 0x10, CHNF)
                OperationRegion (CFG2, PCI_Config, 0x40, 0x20)
                Field (CFG2, DWordAcc, NoLock, Preserve)
                {
                    PMPT,   4, 
                    PSPT,   4, 
                    PMRI,   6, 
                    Offset (0x02), 
                    SMPT,   4, 
                    SSPT,   4, 
                    SMRI,   6, 
                    Offset (0x04), 
                    PSRI,   4, 
                    SSRI,   4, 
                    Offset (0x08), 
                    PM3E,   1, 
                    PS3E,   1, 
                    SM3E,   1, 
                    SS3E,   1, 
                    Offset (0x0A), 
                    PMUT,   2, 
                        ,   2, 
                    PSUT,   2, 
                    Offset (0x0B), 
                    SMUT,   2, 
                        ,   2, 
                    SSUT,   2, 
                    Offset (0x0C), 
                    Offset (0x14), 
                    PM6E,   1, 
                    PS6E,   1, 
                    SM6E,   1, 
                    SS6E,   1, 
                    PMCR,   1, 
                    PSCR,   1, 
                    SMCR,   1, 
                    SSCR,   1, 
                        ,   4, 
                    PMAE,   1, 
                    PSAE,   1, 
                    SMAE,   1, 
                    SSAE,   1
                }

                Name (GMPT, Zero)
                Name (GMUE, Zero)
                Name (GMUT, Zero)
                Name (GMCR, Zero)
                Name (GSPT, Zero)
                Name (GSUE, Zero)
                Name (GSUT, Zero)
                Name (GSCR, Zero)
                Device (CHN0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (PSCR << One)
                        Local0 = (PMCR | Local1)
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << One)
                        Local3 |= Local4
                        Local1 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << One)
                        Local3 |= Local4
                        Local2 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (PMRI, Local1, PMUT, PSRI, Local2, PSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (PMAE << 0x02)
                        Local4 = (PM6E << One)
                        Local3 |= Local4
                        Local0 = (PM3E | Local3)
                        Local3 = (PMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (PSAE << 0x02)
                        Local4 = (PS6E << One)
                        Local3 |= Local4
                        Local1 = (PS3E | Local3)
                        Local3 = (PSPT << 0x04)
                        Local1 |= Local3
                        GMPT = PMRI /* \_SB_.PCI0.IDE1.PMRI */
                        GMUE = Local0
                        GMUT = PMUT /* \_SB_.PCI0.IDE1.PMUT */
                        GMCR = PMCR /* \_SB_.PCI0.IDE1.PMCR */
                        GSPT = PSRI /* \_SB_.PCI0.IDE1.PSRI */
                        GSUE = Local1
                        GSUT = PSUT /* \_SB_.PCI0.IDE1.PSUT */
                        GSCR = PSCR /* \_SB_.PCI0.IDE1.PSCR */
                        STM ()
                        PMRI = GMPT /* \_SB_.PCI0.IDE1.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.IDE1.GMUE */
                        PMUT = GMUT /* \_SB_.PCI0.IDE1.GMUT */
                        PMCR = GMCR /* \_SB_.PCI0.IDE1.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.IDE1.GSUE */
                        PSUT = GSUT /* \_SB_.PCI0.IDE1.GSUT */
                        PSCR = GSCR /* \_SB_.PCI0.IDE1.GSCR */
                        If ((Local0 & One))
                        {
                            PM3E = One
                        }
                        Else
                        {
                            PM3E = Zero
                        }

                        If ((Local0 & 0x02))
                        {
                            PM6E = One
                        }
                        Else
                        {
                            PM6E = Zero
                        }

                        If ((Local0 & 0x04))
                        {
                            PMAE = One
                        }
                        Else
                        {
                            PMAE = Zero
                        }

                        If ((Local1 & One))
                        {
                            PS3E = One
                        }
                        Else
                        {
                            PS3E = Zero
                        }

                        If ((Local1 & 0x02))
                        {
                            PS6E = One
                        }
                        Else
                        {
                            PS6E = Zero
                        }

                        If ((Local1 & 0x04))
                        {
                            PSAE = One
                        }
                        Else
                        {
                            PSAE = Zero
                        }

                        ATA0 = GTF (Zero, Arg1)
                        ATA1 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA0))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA1))
                        }
                    }
                }

                Device (CHN1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local1 = (SSCR << One)
                        Local0 = (SMCR | Local1)
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << One)
                        Local3 |= Local4
                        Local1 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local1 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << One)
                        Local3 |= Local4
                        Local2 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local2 |= Local3
                        Return (GTM (SMRI, Local1, SMUT, SSRI, Local2, SSUT, Local0))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Debug = Arg0
                        TMD0 = Arg0
                        Local3 = (SMAE << 0x02)
                        Local4 = (SM6E << One)
                        Local3 |= Local4
                        Local0 = (SM3E | Local3)
                        Local3 = (SMPT << 0x04)
                        Local0 |= Local3
                        Local3 = (SSAE << 0x02)
                        Local4 = (SS6E << One)
                        Local3 |= Local4
                        Local1 = (SS3E | Local3)
                        Local3 = (SSPT << 0x04)
                        Local1 |= Local3
                        GMPT = SMRI /* \_SB_.PCI0.IDE1.SMRI */
                        GMUE = Local0
                        GMUT = SMUT /* \_SB_.PCI0.IDE1.SMUT */
                        GMCR = SMCR /* \_SB_.PCI0.IDE1.SMCR */
                        GSPT = SSRI /* \_SB_.PCI0.IDE1.SSRI */
                        GSUE = Local1
                        GSUT = SSUT /* \_SB_.PCI0.IDE1.SSUT */
                        GSCR = SSCR /* \_SB_.PCI0.IDE1.SSCR */
                        STM ()
                        SMRI = GMPT /* \_SB_.PCI0.IDE1.GMPT */
                        Local0 = GMUE /* \_SB_.PCI0.IDE1.GMUE */
                        SMUT = GMUT /* \_SB_.PCI0.IDE1.GMUT */
                        SMCR = GMCR /* \_SB_.PCI0.IDE1.GMCR */
                        Local1 = GSUE /* \_SB_.PCI0.IDE1.GSUE */
                        SSUT = GSUT /* \_SB_.PCI0.IDE1.GSUT */
                        SSCR = GSCR /* \_SB_.PCI0.IDE1.GSCR */
                        If ((Local0 & One))
                        {
                            SM3E = One
                        }
                        Else
                        {
                            SM3E = Zero
                        }

                        If ((Local0 & 0x02))
                        {
                            SM6E = One
                        }
                        Else
                        {
                            SM6E = Zero
                        }

                        If ((Local0 & 0x04))
                        {
                            SMAE = One
                        }
                        Else
                        {
                            SMAE = Zero
                        }

                        If ((Local1 & One))
                        {
                            SS3E = One
                        }
                        Else
                        {
                            SS3E = Zero
                        }

                        If ((Local1 & 0x02))
                        {
                            SS6E = One
                        }
                        Else
                        {
                            SS6E = Zero
                        }

                        If ((Local1 & 0x04))
                        {
                            SSAE = One
                        }
                        Else
                        {
                            SSAE = Zero
                        }

                        ATA2 = GTF (Zero, Arg1)
                        ATA3 = GTF (One, Arg2)
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA2))
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (RATA (ATA3))
                        }
                    }
                }

                Method (GTM, 7, Serialized)
                {
                    PIO0 = Ones
                    PIO1 = Ones
                    DMA0 = Ones
                    DMA1 = Ones
                    CHNF = 0x10
                    If (REGF) {}
                    Else
                    {
                        Return (TMD0) /* \_SB_.PCI0.IDE1.TMD0 */
                    }

                    If ((Arg1 & 0x20))
                    {
                        CHNF |= 0x02
                    }

                    Local6 = Match (DerefOf (Index (TIM0, One)), MEQ, Arg0, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (Index (DerefOf (Index (TIM0, Zero)), Local6))
                    DMA0 = Local7
                    PIO0 = Local7
                    If ((Arg4 & 0x20))
                    {
                        CHNF |= 0x08
                    }

                    Local6 = Match (DerefOf (Index (TIM0, 0x02)), MEQ, Arg3, MTR, Zero, 
                        Zero)
                    Local7 = DerefOf (Index (DerefOf (Index (TIM0, Zero)), Local6))
                    DMA1 = Local7
                    PIO1 = Local7
                    If ((Arg1 & 0x07))
                    {
                        Local5 = Arg2
                        If ((Arg1 & 0x02))
                        {
                            Local5 += 0x02
                        }

                        If ((Arg1 & 0x04))
                        {
                            Local5 += 0x04
                        }

                        DMA0 = DerefOf (Index (DerefOf (Index (TIM0, 0x03)), Local5))
                        CHNF |= One
                    }

                    If ((Arg4 & 0x07))
                    {
                        Local5 = Arg5
                        If ((Arg4 & 0x02))
                        {
                            Local5 += 0x02
                        }

                        If ((Arg4 & 0x04))
                        {
                            Local5 += 0x04
                        }

                        DMA1 = DerefOf (Index (DerefOf (Index (TIM0, 0x03)), Local5))
                        CHNF |= 0x04
                    }

                    Debug = TMD0 /* \_SB_.PCI0.IDE1.TMD0 */
                    Return (TMD0) /* \_SB_.PCI0.IDE1.TMD0 */
                }

                Method (STM, 0, Serialized)
                {
                    If (REGF)
                    {
                        GMUE = Zero
                        GMUT = Zero
                        GSUE = Zero
                        GSUT = Zero
                        If ((CHNF & One))
                        {
                            Local0 = Match (DerefOf (Index (TIM0, 0x03)), MLE, DMA0, MTR, Zero, 
                                Zero)
                            If ((Local0 > 0x05))
                            {
                                Local0 = 0x05
                            }

                            GMUT = DerefOf (Index (DerefOf (Index (TIM0, 0x04)), Local0))
                            GMUE |= One
                            If ((Local0 > 0x02))
                            {
                                GMUE |= 0x02
                            }

                            If ((Local0 > 0x04))
                            {
                                GMUE &= 0xFD
                                GMUE |= 0x04
                            }
                        }
                        Else
                        {
                            If (((PIO0 == Ones) | (PIO0 == Zero)))
                            {
                                If (((DMA0 < Ones) & (DMA0 > Zero)))
                                {
                                    PIO0 = DMA0 /* \_SB_.PCI0.IDE1.DMA0 */
                                    GMUE |= 0x80
                                }
                            }
                        }

                        If ((CHNF & 0x04))
                        {
                            Local0 = Match (DerefOf (Index (TIM0, 0x03)), MLE, DMA1, MTR, Zero, 
                                Zero)
                            If ((Local0 > 0x05))
                            {
                                Local0 = 0x05
                            }

                            GSUT = DerefOf (Index (DerefOf (Index (TIM0, 0x04)), Local0))
                            GSUE |= One
                            If ((Local0 > 0x02))
                            {
                                GSUE |= 0x02
                            }

                            If ((Local0 > 0x04))
                            {
                                GSUE &= 0xFD
                                GSUE |= 0x04
                            }
                        }
                        Else
                        {
                            If (((PIO1 == Ones) | (PIO1 == Zero)))
                            {
                                If (((DMA1 < Ones) & (DMA1 > Zero)))
                                {
                                    PIO1 = DMA1 /* \_SB_.PCI0.IDE1.DMA1 */
                                    GSUE |= 0x80
                                }
                            }
                        }

                        If ((CHNF & 0x02))
                        {
                            GMUE |= 0x20
                        }

                        If ((CHNF & 0x08))
                        {
                            GSUE |= 0x20
                        }

                        Local0 = (Match (DerefOf (Index (TIM0, Zero)), MGE, PIO0, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = DerefOf (Index (DerefOf (Index (TIM0, One)), Local0))
                        GMPT = Local1
                        If ((Local0 < 0x03))
                        {
                            GMUE |= 0x50
                        }

                        Local0 = (Match (DerefOf (Index (TIM0, Zero)), MGE, PIO1, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = DerefOf (Index (DerefOf (Index (TIM0, 0x02)), Local0))
                        GSPT = Local1
                        If ((Local0 < 0x03))
                        {
                            GSUE |= 0x50
                        }
                    }
                }

                Name (AT01, Buffer (0x07)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF         /* ....... */
                })
                Name (AT02, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90         /* ....... */
                })
                Name (AT03, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6         /* ....... */
                })
                Name (AT04, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91         /* ....... */
                })
                Name (AT05, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         /* ....... */
                })
                Name (AT07, Buffer (0x07)
                {
                     0x10, 0x06, 0x00, 0x00, 0x00, 0x00, 0xEF         /* ....... */
                })
                Name (AT08, Buffer (0x07)
                {
                     0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF         /* A...... */
                })
                Name (AT81, Buffer (0x07)
                {
                     0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF         /* ....... */
                })
                Name (ATA0, Buffer (0x1D) {})
                Name (ATA1, Buffer (0x1D) {})
                Name (ATA2, Buffer (0x1D) {})
                Name (ATA3, Buffer (0x1D) {})
                Name (ATAB, Buffer (0x1D) {})
                CreateByteField (ATAB, Zero, CMDC)
                Method (GTFB, 3, Serialized)
                {
                    Local0 = (CMDC * 0x38)
                    Local1 = (Local0 + 0x08)
                    CreateField (ATAB, Local1, 0x38, CMDX)
                    Local0 = (CMDC * 0x07)
                    CreateByteField (ATAB, (Local0 + 0x02), A001)
                    CreateByteField (ATAB, (Local0 + 0x06), A005)
                    CMDX = Arg0
                    A001 = Arg1
                    A005 = Arg2
                    CMDC++
                }

                Method (GTF, 2, Serialized)
                {
                    Debug = Arg1
                    CMDC = Zero
                    Name (ID49, 0x0C00)
                    Name (ID59, Zero)
                    Name (ID53, 0x04)
                    Name (ID63, 0x0F00)
                    Name (ID88, 0x0F00)
                    Name (IRDY, One)
                    Name (PIOT, Zero)
                    Name (DMAT, Zero)
                    If ((SizeOf (Arg1) == 0x0200))
                    {
                        CreateWordField (Arg1, 0x62, IW49)
                        ID49 = IW49 /* \_SB_.PCI0.IDE1.GTF_.IW49 */
                        CreateWordField (Arg1, 0x6A, IW53)
                        ID53 = IW53 /* \_SB_.PCI0.IDE1.GTF_.IW53 */
                        CreateWordField (Arg1, 0x7E, IW63)
                        ID63 = IW63 /* \_SB_.PCI0.IDE1.GTF_.IW63 */
                        CreateWordField (Arg1, 0x76, IW59)
                        ID59 = IW59 /* \_SB_.PCI0.IDE1.GTF_.IW59 */
                        CreateWordField (Arg1, 0xB0, IW88)
                        ID88 = IW88 /* \_SB_.PCI0.IDE1.GTF_.IW88 */
                    }

                    Local7 = 0xA0
                    If (Arg0)
                    {
                        Local7 = 0xB0
                        IRDY = (CHNF & 0x08)
                        If ((CHNF & 0x10))
                        {
                            PIOT = PIO1 /* \_SB_.PCI0.IDE1.PIO1 */
                        }
                        Else
                        {
                            PIOT = PIO0 /* \_SB_.PCI0.IDE1.PIO0 */
                        }

                        If ((CHNF & 0x04))
                        {
                            If ((CHNF & 0x10))
                            {
                                DMAT = DMA1 /* \_SB_.PCI0.IDE1.DMA1 */
                            }
                            Else
                            {
                                DMAT = DMA0 /* \_SB_.PCI0.IDE1.DMA0 */
                            }
                        }
                    }
                    Else
                    {
                        IRDY = (CHNF & 0x02)
                        PIOT = PIO0 /* \_SB_.PCI0.IDE1.PIO0 */
                        If ((CHNF & One))
                        {
                            DMAT = DMA0 /* \_SB_.PCI0.IDE1.DMA0 */
                        }
                    }

                    If ((((ID53 & 0x04) && (ID88 & 0xFF00)) && DMAT))
                    {
                        Local1 = Match (DerefOf (Index (TIM0, 0x03)), MLE, DMAT, MTR, Zero, 
                            Zero)
                        If ((Local1 > 0x05))
                        {
                            Local1 = 0x05
                        }

                        GTFB (AT01, (0x40 | Local1), Local7)
                    }
                    Else
                    {
                        If (((ID63 & 0xFF00) && PIOT))
                        {
                            Local0 = (Match (DerefOf (Index (TIM0, Zero)), MGE, PIOT, MTR, Zero, 
                                Zero) & 0x03)
                            Local1 = (0x20 | DerefOf (Index (DerefOf (Index (TIM0, 0x07)), Local0)))
                            GTFB (AT01, Local1, Local7)
                        }
                    }

                    If (IRDY)
                    {
                        Local0 = (Match (DerefOf (Index (TIM0, Zero)), MGE, PIOT, MTR, Zero, 
                            Zero) & 0x07)
                        Local1 = (0x08 | DerefOf (Index (DerefOf (Index (TIM0, 0x06)), Local0)))
                        GTFB (AT01, Local1, Local7)
                    }
                    Else
                    {
                        If ((ID49 & 0x0400))
                        {
                            GTFB (AT01, One, Local7)
                        }
                    }

                    If (((ID59 & 0x0100) && (ID59 & 0xFF)))
                    {
                        GTFB (AT03, (ID59 & 0xFF), Local7)
                    }

                    Debug = ATAB /* \_SB_.PCI0.IDE1.ATAB */
                    Return (ATAB) /* \_SB_.PCI0.IDE1.ATAB */
                }

                Method (RATA, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, CMDN)
                    Local0 = (CMDN * 0x38)
                    CreateField (Arg0, 0x08, Local0, RETB)
                    Debug = RETB /* \_SB_.PCI0.IDE1.RATA.RETB */
                    Return (Concatenate (RETB, FZTF))
                }

                Name (ATP0, Buffer (0x32) {})
                Device (PRT0)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        ATP0 = AGTF (Zero, Arg0)
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (IATA (ATP0))
                    }
                }

                Name (ATP1, Buffer (0x32) {})
                Device (PRT1)
                {
                    Name (_ADR, 0x0001FFFF)  // _ADR: Address
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        ATP1 = AGTF (Zero, Arg0)
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (IATA (ATP1))
                    }
                }

                Method (AGTF, 2, Serialized)
                {
                    Local0 = 0xA0
                    CMDC = Zero
                    If ((SizeOf (Arg1) == 0x0200))
                    {
                        CreateWordField (Arg1, 0x0100, I128)
                        If ((I128 & One))
                        {
                            GTFB (AT05, Zero, Local0)
                        }
                    }

                    Return (ATAB) /* \_SB_.PCI0.IDE1.ATAB */
                }

                Method (IATA, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, CMDN)
                    Local0 = (CMDN * 0x38)
                    CreateField (Arg0, 0x08, Local0, RETB)
                    Return (RETB) /* \_SB_.PCI0.IDE1.IATA.RETB */
                }
            }

            Device (USB0)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, One)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = Zero
                    }
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, One)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = Zero
                    }
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, One)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = Zero
                    }
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                OperationRegion (BAR0, PCI_Config, 0xC4, One)
                Field (BAR0, ByteAcc, NoLock, Preserve)
                {
                    USBW,   2, 
                    Offset (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        USBW = 0x03
                    }
                    Else
                    {
                        USBW = Zero
                    }
                }
            }

            Device (EUSB)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
            }

            Device (P0P4)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }

                Device (GFX0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (P0P5)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PR05 */
                }
            }

            Device (P0P6)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PR06 */
                }
            }

            Device (P0P7)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PR07 */
                }
            }

            Device (VGA)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Name (VGAB, Buffer (0x02) {})
                CreateWordField (VGAB, Zero, DISD)
                CreateByteField (VGAB, Zero, NXTD)
                CreateByteField (VGAB, One, AVLD)
                Name (HPWR, Zero)
                Name (LCDM, One)
                Name (CRTM, 0x02)
                Name (TVOM, 0x04)
                Name (DONE, Zero)
                Name (DOSF, One)
                Name (BRNC, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    DISD = GETD ()
                    DONE = One
                    HPWR = One
                    HINI ()
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSF = (Arg0 & 0x03)
                    BRNC = (Arg0 >> 0x02)
                    BRNC &= One
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Return (Package (0x03)
                    {
                        0x00010100, 
                        0x00010200, 
                        0x00010400
                    })
                }

                Method (CDCS, 1, NotSerialized)
                {
                    Local0 = 0x0D
                    If ((NXTD & Arg0))
                    {
                        Local0 |= 0x02
                    }

                    If ((AVLD & Arg0))
                    {
                        Local0 |= 0x10
                    }

                    Return (Local0)
                }

                Method (CDGS, 1, NotSerialized)
                {
                    If ((NXTD & Arg0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Device (CRTD)
                {
                    Name (_ADR, 0x0100)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDCS (CRTM))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (CDGS (CRTM))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & 0x40000000))
                        {
                            If ((Arg0 & 0x80000000))
                            {
                                DONE = One
                            }
                        }
                    }
                }

                Device (TVOD)
                {
                    Name (_ADR, 0x0200)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDCS (TVOM))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (CDGS (TVOM))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & 0x40000000))
                        {
                            If ((Arg0 & 0x80000000))
                            {
                                DONE = One
                            }
                        }
                    }
                }

                Device (LCDD)
                {
                    Name (_ADR, 0x0400)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDCS (LCDM))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (CDGS (LCDM))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & 0x40000000))
                        {
                            If ((Arg0 & 0x80000000))
                            {
                                DONE = One
                            }
                        }
                    }

                    Name (BBPS, Package (0x0B)
                    {
                        0x0A, 
                        0x09, 
                        0x08, 
                        0x07, 
                        0x06, 
                        0x05, 
                        0x04, 
                        0x03, 
                        0x02, 
                        One, 
                        Zero
                    })
                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Index (BBPS, 0x0A) = (BCLM >> 0x08)
                        Index (BBPS, 0x09) = (BCL1 >> 0x08)
                        Index (BBPS, 0x08) = (BCL2 >> 0x08)
                        Index (BBPS, 0x07) = (BCL3 >> 0x08)
                        Index (BBPS, 0x06) = (BCL4 >> 0x08)
                        Index (BBPS, 0x05) = (BCL5 >> 0x08)
                        Index (BBPS, 0x04) = (BCL6 >> 0x08)
                        Index (BBPS, 0x03) = (BCL7 >> 0x08)
                        Index (BBPS, 0x02) = (BCL8 >> 0x08)
                        Index (BBPS, One) = (BCL9 >> 0x08)
                        Index (BBPS, Zero) = (BCLA >> 0x08)
                        Return (BBPS) /* \_SB_.PCI0.VGA_.LCDD.BBPS */
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        Local0 = Arg0
                        Local1 = Zero
                        Local3 = 0x0B
                        Local3--
                        While (((Local1 <= Local3) && (Local0 < DerefOf (Index (BBPS, Local1
                            )))))
                        {
                            Local1++
                        }

                        Local1 = (Local3 - Local1)
                        SNVS (0x43C8, Local1)
                        SNVS (0x8538, Local0)
                        ^^^SBRG.EC0.STBR ()
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Return (^^^^ATKD.PBLG ())
                    }
                }

                Method (SWHD, 1, Serialized)
                {
                    If (DOSF)
                    {
                        PAR1 = Arg0
                        ISMI (0x73)
                    }
                    Else
                    {
                        Notify (VGA, 0x80) // Status Change
                    }

                    DONE = One
                }

                Method (GETD, 0, NotSerialized)
                {
                    ISMI (0x72)
                    Return (PAR1) /* \PAR1 */
                }

                Method (GETN, 0, Serialized)
                {
                    If (DONE)
                    {
                        DISD = GETD ()
                    }

                    DONE = Zero
                    Local0 = Zero
                    While ((NXTD != Local0))
                    {
                        NXTD++
                        If ((NXTD == 0x07))
                        {
                            NXTD++
                        }

                        If ((NXTD & 0xF8))
                        {
                            NXTD = One
                        }

                        Local0 = (NXTD & AVLD) /* \_SB_.PCI0.VGA_.AVLD */
                    }

                    Return (NXTD) /* \_SB_.PCI0.VGA_.NXTD */
                }

                OperationRegion (GFXR, PCI_Config, 0xF0, 0x02)
                Field (GFXR, ByteAcc, NoLock, Preserve)
                {
                        ,   13, 
                    GFXL,   1
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.P0P4, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P5, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P6, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P7, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Device (AMW0)
    {
        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_WDG, Buffer (0x50)
        {
            /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  /* .^..mN.. */
            /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  /* .9.. ..f */
            /* 0010 */  0x42, 0x43, 0x01, 0x02, 0xA0, 0x47, 0x67, 0x46,  /* BC...GgF */
            /* 0018 */  0xEC, 0x70, 0xDE, 0x11, 0x8A, 0x39, 0x08, 0x00,  /* .p...9.. */
            /* 0020 */  0x20, 0x0C, 0x9A, 0x66, 0x42, 0x44, 0x01, 0x02,  /*  ..fBD.. */
            /* 0028 */  0x72, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  /* r....... */
            /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  /* ....)... */
            /* 0038 */  0xD2, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  /* ....!... */
            /* 0040 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  /* f....... */
            /* 0048 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   /* ..).MO.. */
        })
        Name (CCAC, Zero)
        Name (ECD2, Zero)
        Name (EID2, Zero)
        Method (WED2, 1, NotSerialized)
        {
            ECD2 = Arg0
        }

        Method (WMBC, 3, NotSerialized)
        {
            Local0 = One
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = Arg1
            If ((_T_0 == 0x43455053))
            {
                Return (SPEC (Arg2))
            }
            Else
            {
                If ((_T_0 == 0x50564544))
                {
                    Return (DEVP (Arg2))
                }
                Else
                {
                    If ((_T_0 == 0x53564643))
                    {
                        Return (CFVS (Arg2))
                    }
                    Else
                    {
                        If ((_T_0 == 0x53564544))
                        {
                            Return (DEVS (Arg2))
                        }
                        Else
                        {
                            If ((_T_0 == 0x53544344))
                            {
                                Return (DSTS (Arg2))
                            }
                            Else
                            {
                                If ((_T_0 == 0x5446424B))
                                {
                                    Return (KBFT (Arg2))
                                }
                                Else
                                {
                                    If ((_T_0 == 0x59454B48))
                                    {
                                        Return (HKEY ())
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x0F))
                                        {
                                            Return (HDPS (Arg2))
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Return (Local0)
        }

        Method (WMBD, 3, NotSerialized)
        {
            Local0 = One
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = Arg1
            If ((_T_0 == 0x424D5352))
            {
                Return (RSMB (Arg2))
            }
            Else
            {
                If ((_T_0 == 0x424D5357))
                {
                    Return (WSMB (Arg2))
                }
                Else
                {
                    If ((_T_0 == 0x574D5352))
                    {
                        Return (RSMW (Arg2))
                    }
                    Else
                    {
                        If ((_T_0 == 0x574D5357))
                        {
                            Return (WSMW (Arg2))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }
            }

            Return (Local0)
        }

        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
        {
            If ((Arg0 == 0xD2))
            {
                Return (EID2) /* \AMW0.EID2 */
            }

            Return (Zero)
        }

        Method (AMWR, 1, Serialized)
        {
            Local1 = Zero
            If (ECD2)
            {
                EID2 = Arg0
                Notify (AMW0, 0xD2) // Hardware-Specific
                Local1 = One
            }
            Else
            {
                DBG8 = 0xFA
            }

            Return (Local1)
        }

        Method (AMWN, 1, Serialized)
        {
            If (\_SB.LID.LIDS)
            {
                Local0 = AMWR (Arg0)
                Return (Local0)
            }
        }

        Name (WQMO, Buffer (0x0A01)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  /* FOMB.... */
            /* 0008 */  0xF1, 0x09, 0x00, 0x00, 0x7A, 0x3D, 0x00, 0x00,  /* ....z=.. */
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  /* DS...}.T */
            /* 0018 */  0xA8, 0x4F, 0x9D, 0x00, 0x01, 0x06, 0x18, 0x42,  /* .O.....B */
            /* 0020 */  0x10, 0x07, 0x10, 0x4A, 0x68, 0x87, 0x42, 0x04,  /* ...Jh.B. */
            /* 0028 */  0x0A, 0x0D, 0xA1, 0x38, 0x0A, 0x60, 0x30, 0x12,  /* ...8.`0. */
            /* 0030 */  0x20, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,  /*  $.B.... */
            /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,  /* ...*.... */
            /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94,  /*  ....$8. */
            /* 0048 */  0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E,  /* ..I.`^.n */
            /* 0050 */  0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80,  /* .....`Z. */
            /* 0058 */  0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A,  /* cH*...X. */
            /* 0060 */  0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00,  /* ...P.... */
            /* 0068 */  0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08,  /* ...,.2.. */
            /* 0070 */  0x3C, 0x8A, 0xC8, 0x46, 0xE3, 0x04, 0x65, 0x43,  /* <..F..eC */
            /* 0078 */  0xA3, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0xC0,  /* .d@..... */
            /* 0080 */  0x84, 0xC0, 0xEE, 0x05, 0x98, 0x13, 0xE0, 0x4D,  /* .......M */
            /* 0088 */  0x80, 0xB8, 0x61, 0xC8, 0xDA, 0x00, 0x04, 0x55,  /* ..a....U */
            /* 0090 */  0x98, 0x00, 0x5B, 0x30, 0x42, 0xA9, 0x0D, 0x46,  /* ..[0B..F */
            /* 0098 */  0x28, 0x8D, 0x21, 0x68, 0x18, 0x46, 0x89, 0x78,  /* (.!h.F.x */
            /* 00A0 */  0x48, 0x9D, 0xC1, 0x0A, 0x25, 0x62, 0x98, 0x10,  /* H...%b.. */
            /* 00A8 */  0x11, 0x2A, 0xC3, 0x20, 0xC3, 0x0A, 0x15, 0x2D,  /* .*. ...- */
            /* 00B0 */  0x6E, 0x84, 0xF6, 0x07, 0x41, 0xA2, 0xAD, 0x58,  /* n...A..X */
            /* 00B8 */  0x43, 0x75, 0xA4, 0xD1, 0xA0, 0x86, 0x97, 0xE0,  /* Cu...... */
            /* 00C0 */  0x70, 0x3D, 0xD4, 0x73, 0xEC, 0x5C, 0x80, 0x74,  /* p=.s.\.t */
            /* 00C8 */  0x60, 0x81, 0x04, 0x3F, 0x8B, 0x3A, 0xC7, 0x49,  /* `..?.:.I */
            /* 00D0 */  0x40, 0x12, 0x18, 0xEB, 0xF8, 0xD9, 0xC0, 0xF1,  /* @....... */
            /* 00D8 */  0xAE, 0x01, 0x35, 0xE3, 0xE3, 0x65, 0x82, 0xE0,  /* ..5..e.. */
            /* 00E0 */  0x50, 0x43, 0xF4, 0x40, 0xC3, 0x9D, 0xC0, 0x21,  /* PC.@...! */
            /* 00E8 */  0x32, 0x40, 0xCF, 0xE9, 0x68, 0x30, 0x07, 0x00,  /* 2@..h0.. */
            /* 00F0 */  0x3B, 0x9C, 0x8C, 0xEE, 0x01, 0xA5, 0x0A, 0x30,  /* ;......0 */
            /* 00F8 */  0x3B, 0x66, 0x59, 0x04, 0xD2, 0x78, 0x0C, 0x7D,  /* ;fY..x.} */
            /* 0100 */  0xBA, 0xE7, 0x73, 0xC2, 0x09, 0x2C, 0x7F, 0x10,  /* ..s..,.. */
            /* 0108 */  0xA8, 0x91, 0x19, 0xDA, 0x06, 0xA7, 0x25, 0xCC,  /* ......%. */
            /* 0110 */  0x90, 0x87, 0x7F, 0x58, 0x4C, 0x2C, 0x84, 0x3E,  /* ...XL,.> */
            /* 0118 */  0x08, 0x1E, 0x0F, 0xBC, 0xFF, 0xFF, 0x78, 0xC0,  /* ......x. */
            /* 0120 */  0xA3, 0xF8, 0x4C, 0x20, 0x84, 0x57, 0x82, 0xD8,  /* ..L .W.. */
            /* 0128 */  0x1E, 0xD0, 0x73, 0x82, 0x81, 0xB1, 0x03, 0xB2,  /* ..s..... */
            /* 0130 */  0x5F, 0x01, 0x08, 0xC1, 0xCB, 0x1C, 0x91, 0x9C,  /* _....... */
            /* 0138 */  0x22, 0x68, 0x4C, 0xC6, 0x68, 0x15, 0x42, 0x43,  /* "hL.h.BC */
            /* 0140 */  0x08, 0x6D, 0x88, 0xB3, 0x8B, 0x7F, 0xF0, 0x86,  /* .m...... */
            /* 0148 */  0x39, 0x77, 0x13, 0x14, 0x39, 0x02, 0x94, 0x98,  /* 9w..9... */
            /* 0150 */  0x11, 0xA0, 0x8E, 0x01, 0xD1, 0x43, 0x9F, 0x4D,  /* .....C.M */
            /* 0158 */  0xF4, 0xE3, 0x89, 0x72, 0x12, 0x07, 0xE4, 0x33,  /* ...r...3 */
            /* 0160 */  0x83, 0x11, 0x82, 0x97, 0x7B, 0x48, 0x20, 0x9A,  /* ....{H . */
            /* 0168 */  0xE7, 0xA0, 0x13, 0xC3, 0x39, 0x1D, 0x02, 0x53,  /* ....9..S */
            /* 0170 */  0xE2, 0x66, 0x9C, 0x2C, 0xCA, 0x52, 0x65, 0x63,  /* .f.,.Rec */
            /* 0178 */  0xA9, 0x1E, 0x04, 0x15, 0x04, 0xA4, 0xB9, 0x1B,  /* ........ */
            /* 0180 */  0xE2, 0xA4, 0x8D, 0x1C, 0x38, 0x46, 0xF5, 0xC3,  /* ....8F.. */
            /* 0188 */  0xA6, 0x22, 0xE0, 0x74, 0xD8, 0xF0, 0xB8, 0x1D,  /* .".t.... */
            /* 0190 */  0x9F, 0x44, 0xD1, 0x07, 0x44, 0xE1, 0x1C, 0xF6,  /* .D..D... */
            /* 0198 */  0xCC, 0x41, 0x41, 0x0C, 0xE8, 0x24, 0x10, 0x72,  /* .AA..$.r */
            /* 01A0 */  0x72, 0x14, 0x40, 0x69, 0x19, 0x27, 0x19, 0xD7,  /* r.@i.'.. */
            /* 01A8 */  0xA9, 0xBD, 0x09, 0x78, 0x5A, 0x8F, 0x05, 0x87,  /* ...xZ... */
            /* 01B0 */  0x71, 0x5C, 0x67, 0x6D, 0xD1, 0x37, 0x06, 0x3A,  /* q\gm.7.: */
            /* 01B8 */  0x1F, 0xDF, 0x05, 0xB8, 0x06, 0x08, 0xCD, 0xC8,  /* ........ */
            /* 01C0 */  0xF0, 0x56, 0x03, 0x48, 0xC1, 0xF8, 0x49, 0xE0,  /* .V.H..I. */
            /* 01C8 */  0x11, 0xC0, 0x04, 0xD6, 0x75, 0x20, 0x80, 0x7E,  /* ....u .~ */
            /* 01D0 */  0xD9, 0xF0, 0xF0, 0x7D, 0xC2, 0x78, 0xBC, 0x48,  /* ...}.x.H */
            /* 01D8 */  0x50, 0xDF, 0x7D, 0x00, 0x14, 0x40, 0x3E, 0x00,  /* P.}..@>. */
            /* 01E0 */  0x58, 0xE9, 0x1D, 0x80, 0x8E, 0x21, 0x44, 0x98,  /* X....!D. */
            /* 01E8 */  0x68, 0x46, 0xE7, 0x12, 0x56, 0xAA, 0xFF, 0xFF,  /* hF..V... */
            /* 01F0 */  0x68, 0xF9, 0x41, 0xC5, 0xA3, 0x35, 0x88, 0x47,  /* h.A..5.G */
            /* 01F8 */  0xEB, 0x40, 0xA3, 0x45, 0x1F, 0x33, 0xAC, 0x70,  /* .@.E.3.p */
            /* 0200 */  0x54, 0xF2, 0x39, 0x01, 0x0D, 0x17, 0x06, 0x41,  /* T.9....A */
            /* 0208 */  0xE1, 0x07, 0x0E, 0x68, 0x80, 0xA7, 0xF7, 0x66,  /* ...h...f */
            /* 0210 */  0xE0, 0x99, 0x18, 0xCE, 0xF3, 0xE5, 0x70, 0x9E,  /* ......p. */
            /* 0218 */  0x2F, 0x1F, 0x8E, 0x0F, 0x14, 0xF0, 0x07, 0x8C,  /* /....... */
            /* 0220 */  0x25, 0x28, 0x70, 0xC2, 0x20, 0x87, 0xC7, 0x08,  /* %(p. ... */
            /* 0228 */  0x1E, 0x2C, 0x95, 0x35, 0x2E, 0xD4, 0xFD, 0xC0,  /* .,.5.... */
            /* 0230 */  0x27, 0x1A, 0x86, 0x7D, 0xA8, 0x47, 0xF3, 0x96,  /* '..}.G.. */
            /* 0238 */  0x70, 0x86, 0x6F, 0x13, 0x07, 0xF5, 0xEE, 0x61,  /* p.o....a */
            /* 0240 */  0xA7, 0x42, 0x2D, 0x3A, 0x84, 0xF5, 0x48, 0x39,  /* .B-:..H9 */
            /* 0248 */  0xAC, 0xD1, 0xC2, 0x1E, 0xF0, 0x73, 0x87, 0xEF,  /* .....s.. */
            /* 0250 */  0x19, 0xFC, 0x4A, 0xE3, 0x63, 0x08, 0x5D, 0x85,  /* ..J.c.]. */
            /* 0258 */  0x4E, 0x15, 0x5C, 0x14, 0x84, 0xE2, 0xAD, 0x45,  /* N.\....E */
            /* 0260 */  0xC3, 0x3F, 0x0B, 0x8F, 0xEB, 0x15, 0xC3, 0x57,  /* .?.....W */
            /* 0268 */  0x80, 0x87, 0x13, 0x9F, 0x01, 0xE2, 0x07, 0x3A,  /* .......: */
            /* 0270 */  0x82, 0x17, 0x11, 0x9F, 0x7D, 0x7C, 0x79, 0xF1,  /* ....}|y. */
            /* 0278 */  0x21, 0x83, 0x9D, 0x2C, 0x78, 0x08, 0x0A, 0xC5,  /* !..,x... */
            /* 0280 */  0x38, 0x1C, 0xA0, 0x84, 0xC3, 0x08, 0xCE, 0x20,  /* 8......  */
            /* 0288 */  0x1E, 0x9E, 0x83, 0x1C, 0x0E, 0xD0, 0xE7, 0x20,  /* .......  */
            /* 0290 */  0x0F, 0x84, 0x0D, 0xC2, 0x20, 0xE7, 0xF1, 0xF2,  /* .... ... */
            /* 0298 */  0xC3, 0x2E, 0x16, 0xF8, 0xFF, 0xFF, 0xC5, 0x02,  /* ........ */
            /* 02A0 */  0x78, 0xA5, 0x19, 0x14, 0x5A, 0xCF, 0xA0, 0x20,  /* x...Z..  */
            /* 02A8 */  0x60, 0x3C, 0x3F, 0x78, 0xBC, 0x9E, 0xAD, 0xA7,  /* `<?x.... */
            /* 02B0 */  0x05, 0xDE, 0x11, 0xFB, 0xFC, 0x01, 0x9C, 0xC3,  /* ........ */
            /* 02B8 */  0x1F, 0x5E, 0x50, 0x71, 0x87, 0x44, 0x41, 0x7C,  /* .^Pq.DA| */
            /* 02C0 */  0x36, 0x70, 0x94, 0xF1, 0xA2, 0x67, 0xE2, 0xC3,  /* 6p...g.. */
            /* 02C8 */  0x90, 0x8F, 0x0B, 0x4F, 0x37, 0x98, 0xC3, 0x07,  /* ...O7... */
            /* 02D0 */  0xB8, 0x47, 0xE2, 0xC3, 0x07, 0xF0, 0xF8, 0xFF,  /* .G...... */
            /* 02D8 */  0x1F, 0x3E, 0x80, 0x9F, 0x44, 0x8B, 0x5A, 0x85,  /* .>..D.Z. */
            /* 02E0 */  0x1E, 0x3E, 0xC0, 0x15, 0xE4, 0x84, 0x84, 0x96,  /* .>...... */
            /* 02E8 */  0x73, 0xF8, 0x40, 0x4E, 0x24, 0x4C, 0x74, 0x9F,  /* s.@N$Lt. */
            /* 02F0 */  0x91, 0x5E, 0x3C, 0x2C, 0xE1, 0xE0, 0x81, 0x0A,  /* .^<,.... */
            /* 02F8 */  0x4F, 0xA2, 0xF8, 0xA7, 0x02, 0x54, 0xE0, 0x53,  /* O....T.S */
            /* 0300 */  0x01, 0x05, 0x31, 0xA0, 0x0F, 0x15, 0x70, 0x66,  /* ..1...pf */
            /* 0308 */  0xF0, 0xEC, 0x85, 0x99, 0x07, 0x8C, 0x33, 0x12,  /* ......3. */
            /* 0310 */  0x60, 0xEB, 0x50, 0x01, 0xDE, 0xFF, 0xFF, 0xA1,  /* `.P..... */
            /* 0318 */  0x02, 0x38, 0x1C, 0x90, 0x00, 0x59, 0x12, 0x2F,  /* .8...Y./ */
            /* 0320 */  0x48, 0x0F, 0x15, 0xE0, 0x3A, 0x70, 0xFA, 0x50,  /* H...:p.P */
            /* 0328 */  0xC1, 0x0F, 0x9A, 0x16, 0x05, 0xA4, 0x23, 0x9E,  /* ......#. */
            /* 0330 */  0x0F, 0x15, 0x30, 0x2E, 0x42, 0x86, 0x7F, 0xAD,  /* ..0.B... */
            /* 0338 */  0x3B, 0x96, 0xE7, 0x30, 0x72, 0xAE, 0x40, 0xC7,  /* ;..0r.@. */
            /* 0340 */  0x3E, 0x18, 0xA0, 0x82, 0x8E, 0x9E, 0x82, 0x18,  /* >....... */
            /* 0348 */  0xD0, 0x29, 0x0E, 0x06, 0x68, 0x1D, 0xE7, 0x0A,  /* .)..h... */
            /* 0350 */  0xD4, 0x31, 0x0E, 0xF8, 0xFD, 0xFF, 0xCF, 0x14,  /* .1...... */
            /* 0358 */  0xC0, 0x49, 0xC4, 0xD1, 0x0A, 0x35, 0x5C, 0x8F,  /* .I...5\. */
            /* 0360 */  0xD5, 0x20, 0x1E, 0xAB, 0x8F, 0xA1, 0x1E, 0x2B,  /* . .....+ */
            /* 0368 */  0xEE, 0x1B, 0xE0, 0x23, 0x00, 0xFE, 0xE8, 0x84,  /* ...#.... */
            /* 0370 */  0x03, 0x7B, 0xAE, 0x00, 0x4C, 0x7B, 0x3C, 0x57,  /* .{..L{<W */
            /* 0378 */  0x80, 0x4E, 0xFA, 0xB9, 0x02, 0x35, 0x34, 0xAF,  /* .N...54. */
            /* 0380 */  0xC5, 0x67, 0x1F, 0x3E, 0xA5, 0xF7, 0xD0, 0xE3,  /* .g.>.... */
            /* 0388 */  0x74, 0xF0, 0xA3, 0x1B, 0x1D, 0x92, 0x23, 0x93,  /* t.....#. */
            /* 0390 */  0xE8, 0xA0, 0xE8, 0x73, 0x01, 0x8F, 0x09, 0xA1,  /* ...s.... */
            /* 0398 */  0xFF, 0x3F, 0x9C, 0x41, 0x0C, 0xE8, 0x0C, 0xE7,  /* .?.A.... */
            /* 03A0 */  0x02, 0xB4, 0x0A, 0x10, 0xCD, 0xE6, 0xC0, 0x7C,  /* .......| */
            /* 03A8 */  0xFA, 0xF4, 0xA1, 0x07, 0x60, 0xF5, 0xFF, 0xDF,  /* ....`... */
            /* 03B0 */  0xA1, 0x46, 0xAD, 0x4E, 0x4F, 0x13, 0xE0, 0x8A,  /* .F.NO... */
            /* 03B8 */  0x70, 0x9A, 0x40, 0x71, 0x58, 0xC8, 0x69, 0x02,  /* p.@qX.i. */
            /* 03C0 */  0x75, 0xC0, 0xB4, 0xF7, 0x6B, 0x2B, 0xB9, 0x90,  /* u...k+.. */
            /* 03C8 */  0x3F, 0xF9, 0xF8, 0x8E, 0xF2, 0x90, 0xCE, 0x4E,  /* ?......N */
            /* 03D0 */  0x14, 0x00, 0x37, 0xFF, 0xFF, 0xA7, 0x60, 0xC0,  /* ..7...`. */
            /* 03D8 */  0x82, 0xC7, 0x13, 0x05, 0xC8, 0xA4, 0x9D, 0x1C,  /* ........ */
            /* 03E0 */  0xD1, 0x01, 0xD7, 0xAA, 0x73, 0x2C, 0xFE, 0x14,  /* ....s,.. */
            /* 03E8 */  0xCC, 0x08, 0x86, 0x3A, 0x4F, 0x50, 0x08, 0xC7,  /* ...:OP.. */
            /* 03F0 */  0xA1, 0x50, 0x98, 0x73, 0x15, 0x4A, 0x3E, 0x1C,  /* .P.s.J>. */
            /* 03F8 */  0x05, 0xF1, 0xD0, 0x1C, 0xE6, 0x04, 0x0C, 0x9A,  /* ........ */
            /* 0400 */  0x63, 0x01, 0xBC, 0x1B, 0x05, 0x3B, 0x16, 0xC0,  /* c....;.. */
            /* 0408 */  0x26, 0xF0, 0xB1, 0x00, 0x7C, 0x71, 0x86, 0x85,  /* &...|q.. */
            /* 0410 */  0x1E, 0xAD, 0x6F, 0xCF, 0xB8, 0xA3, 0x88, 0x21,  /* ..o....! */
            /* 0418 */  0x0E, 0xFD, 0xE9, 0x01, 0xEE, 0xB8, 0xE0, 0xFD,  /* ........ */
            /* 0420 */  0xFF, 0x4F, 0x0F, 0x80, 0xB7, 0x63, 0xAC, 0x4E,  /* .O...c.N */
            /* 0428 */  0x0F, 0x20, 0x4B, 0x72, 0x7A, 0x40, 0x0D, 0xD8,  /* . Krz@.. */
            /* 0430 */  0x7A, 0x80, 0x74, 0x4E, 0xC0, 0x5E, 0x47, 0x02,  /* z.tN.^G. */
            /* 0438 */  0xBF, 0x01, 0x84, 0x38, 0xD1, 0xA7, 0x39, 0x2B,  /* ...8..9+ */
            /* 0440 */  0x38, 0x20, 0xA2, 0xB2, 0x93, 0x28, 0xF9, 0x19,  /* 8 ...(.. */
            /* 0448 */  0x05, 0x95, 0x75, 0xEC, 0x14, 0xC4, 0x80, 0x3E,  /* ..u....> */
            /* 0450 */  0x8F, 0x03, 0x3E, 0xEE, 0x37, 0xE0, 0xFA, 0xFF,  /* ..>.7... */
            /* 0458 */  0xDF, 0x6F, 0x60, 0x6E, 0xD4, 0x93, 0xE5, 0x91,  /* .o`n.... */
            /* 0460 */  0x27, 0x4B, 0x41, 0x3C, 0x59, 0x5F, 0x2A, 0x80,  /* 'KA<Y_*. */
            /* 0468 */  0xC3, 0x0D, 0x07, 0xF0, 0x29, 0xD1, 0xA1, 0xD4,  /* ....)... */
            /* 0470 */  0x4B, 0x05, 0xC8, 0xE4, 0xDD, 0x70, 0xD0, 0x21,  /* K....p.! */
            /* 0478 */  0xD7, 0xAA, 0x0B, 0x13, 0x3B, 0xF4, 0x7B, 0xDC,  /* ....;.{. */
            /* 0480 */  0xBE, 0xAF, 0x72, 0x82, 0xC1, 0x6E, 0x38, 0xA8,  /* ..r..n8. */
            /* 0488 */  0x48, 0x14, 0x0A, 0x74, 0x2E, 0x40, 0x45, 0x80,  /* H..t.@E. */
            /* 0490 */  0xA3, 0x20, 0x1E, 0x9A, 0xCF, 0x05, 0x56, 0x72,  /* . ....Vr */
            /* 0498 */  0x2E, 0x40, 0xDF, 0xCA, 0x5E, 0x28, 0x3C, 0x38,  /* .@..^(<8 */
            /* 04A0 */  0xDF, 0x0B, 0x0C, 0x53, 0xFC, 0x50, 0x74, 0xEF,  /* ...S.Pt. */
            /* 04A8 */  0x31, 0xCC, 0xFF, 0xFF, 0xB9, 0x00, 0xCC, 0x57,  /* 1......W */
            /* 04B0 */  0x1C, 0x70, 0x19, 0x13, 0xA0, 0x0D, 0x92, 0x04,  /* .p...... */
            /* 04B8 */  0x1A, 0x17, 0x7A, 0x1C, 0x1E, 0xD5, 0x31, 0xC5,  /* ..z...1. */
            /* 04C0 */  0x7C, 0x78, 0x0B, 0xF2, 0x04, 0xC7, 0xE6, 0x85,  /* |x...... */
            /* 04C8 */  0x39, 0x3F, 0x00, 0xD3, 0x81, 0xF1, 0xEB, 0x2A,  /* 9?.....* */
            /* 04D0 */  0x10, 0x17, 0x6A, 0x52, 0xE2, 0xF9, 0x01, 0x5C,  /* ..jR...\ */
            /* 04D8 */  0x21, 0x6E, 0xD5, 0x68, 0x29, 0x37, 0x42, 0x14,  /* !n.h)7B. */
            /* 04E0 */  0xC6, 0x2B, 0x49, 0x0C, 0xDF, 0xF2, 0x8D, 0x6D,  /* .+I....m */
            /* 04E8 */  0x98, 0x07, 0x40, 0xCC, 0x95, 0x10, 0xC6, 0xFF,  /* ..@..... */
            /* 04F0 */  0xFF, 0x4A, 0x08, 0xF0, 0xFF, 0xFF, 0x7F, 0xA4,  /* .J...... */
            /* 04F8 */  0xC0, 0xBA, 0x54, 0xA8, 0x51, 0xEA, 0x91, 0x02,  /* ..T.Q... */
            /* 0500 */  0x5C, 0x77, 0x40, 0xDF, 0xC2, 0x70, 0x92, 0x80,  /* \w@..p.. */
            /* 0508 */  0x74, 0xE1, 0x3F, 0x8D, 0x07, 0x00, 0x5F, 0x29,  /* t.?..._) */
            /* 0510 */  0x60, 0x5C, 0xDB, 0xD9, 0x11, 0x87, 0xC7, 0x3F,  /* `\.....? */
            /* 0518 */  0x16, 0x00, 0xFD, 0x2B, 0x21, 0x38, 0x8F, 0x05,  /* ...+!8.. */
            /* 0520 */  0xC0, 0x5B, 0xA4, 0x4B, 0x8B, 0x66, 0x8F, 0x05,  /* .[.K.f.. */
            /* 0528 */  0xE0, 0x12, 0xBF, 0x0A, 0x7A, 0x50, 0xB1, 0x5C,  /* ....zP.\ */
            /* 0530 */  0x18, 0x94, 0x84, 0xB1, 0x43, 0xF8, 0xFF, 0x8F,  /* ....C... */
            /* 0538 */  0xC6, 0x83, 0x39, 0x86, 0xE0, 0xEC, 0x0C, 0x63,  /* ..9....c */
            /* 0540 */  0x38, 0x3E, 0x50, 0x4F, 0xBD, 0xF9, 0x69, 0xE8,  /* 8>PO..i. */
            /* 0548 */  0x8A, 0xE6, 0x2B, 0x9E, 0xEF, 0xA3, 0x74, 0x88,  /* ..+...t. */
            /* 0550 */  0xA8, 0xAB, 0x9E, 0xC7, 0xFA, 0x56, 0x70, 0x6A,  /* .....Vpj */
            /* 0558 */  0xCF, 0x7A, 0xBE, 0xB6, 0xF8, 0xB2, 0xCC, 0x86,  /* .z...... */
            /* 0560 */  0xC8, 0xD0, 0x38, 0xC1, 0x3B, 0x92, 0xA1, 0xB9,  /* ..8.;... */
            /* 0568 */  0x0C, 0x08, 0xDD, 0x95, 0x5E, 0x03, 0x3C, 0x37,  /* ....^.<7 */
            /* 0570 */  0x13, 0x74, 0x3F, 0x74, 0x29, 0x44, 0xD0, 0x09,  /* .t?t)D.. */
            /* 0578 */  0xE0, 0x9D, 0xA0, 0x46, 0x01, 0xDE, 0xAE, 0x02,  /* ...F.... */
            /* 0580 */  0xB2, 0x25, 0x40, 0xDC, 0xE8, 0x85, 0xF5, 0x56,  /* .%@....V */
            /* 0588 */  0x14, 0x25, 0x44, 0x84, 0xA0, 0x51, 0x8C, 0x17,  /* .%D..Q.. */
            /* 0590 */  0x21, 0x54, 0x88, 0x28, 0x51, 0x9B, 0x03, 0xD1,  /* !T.(Q... */
            /* 0598 */  0xE5, 0x28, 0x6A, 0x90, 0x68, 0xC1, 0x8C, 0xC0,  /* .(j.h... */
            /* 05A0 */  0xEC, 0x0F, 0x82, 0xDC, 0xFA, 0x7D, 0x99, 0x71,  /* .....}.q */
            /* 05A8 */  0xA4, 0xD1, 0xA0, 0xCE, 0x52, 0x7C, 0xA8, 0xE7,  /* ....R|.. */
            /* 05B0 */  0xF8, 0xA8, 0xC8, 0x40, 0x5E, 0x0B, 0xAD, 0x73,  /* ...@^..s */
            /* 05B8 */  0x9C, 0xE4, 0x90, 0x63, 0x70, 0x9D, 0x21, 0xA0,  /* ...cp.!. */
            /* 05C0 */  0xB9, 0x06, 0xD4, 0x8C, 0x8F, 0x97, 0x7D, 0x35,  /* ......}5 */
            /* 05C8 */  0x0C, 0xC7, 0x87, 0xE8, 0x43, 0x85, 0x27, 0x70,  /* ....C.'p */
            /* 05D0 */  0x88, 0x0C, 0xD0, 0x87, 0x08, 0xF8, 0xE3, 0x31,  /* .......1 */
            /* 05D8 */  0xF4, 0x53, 0x84, 0x27, 0xFC, 0x42, 0x4B, 0x06,  /* .S.'.BK. */
            /* 05E0 */  0x81, 0x3A, 0x69, 0xF0, 0x91, 0xBE, 0x02, 0x1A,  /* .:i..... */
            /* 05E8 */  0xF2, 0xED, 0xC3, 0x04, 0x16, 0x7B, 0x76, 0xA0,  /* .....{v. */
            /* 05F0 */  0xE3, 0x01, 0xBF, 0xE2, 0x33, 0x81, 0xAE, 0x71,  /* ....3..q */
            /* 05F8 */  0xC6, 0xF6, 0xC9, 0xC8, 0x11, 0x0E, 0x22, 0xE4,  /* ......". */
            /* 0600 */  0xFF, 0x3F, 0x1E, 0x2C, 0xE8, 0xB3, 0x09, 0xBF,  /* .?.,.... */
            /* 0608 */  0x79, 0xB0, 0xA3, 0x05, 0x17, 0x75, 0xB4, 0x40,  /* y....u.@ */
            /* 0610 */  0x9D, 0x16, 0x7C, 0x50, 0x60, 0x88, 0x0F, 0x9F,  /* ..|P`... */
            /* 0618 */  0x86, 0x78, 0xB2, 0x60, 0x47, 0x1D, 0x70, 0xCA,  /* .x.`G.p. */
            /* 0620 */  0x3B, 0x84, 0x80, 0x02, 0xC4, 0x27, 0x0B, 0x36,  /* ;....'.6 */
            /* 0628 */  0x2F, 0x0C, 0x81, 0x45, 0xC2, 0xA3, 0x0E, 0x1D,  /* /..E.... */
            /* 0630 */  0x86, 0xE7, 0xA7, 0x84, 0xC7, 0x11, 0x86, 0xFD,  /* ........ */
            /* 0638 */  0x46, 0xE2, 0x29, 0x1C, 0x8E, 0x8F, 0x14, 0x46,  /* F.)....F */
            /* 0640 */  0x08, 0x5E, 0xEE, 0xC9, 0x82, 0x5C, 0x6C, 0x8E,  /* .^...\l. */
            /* 0648 */  0xEE, 0x09, 0x06, 0x33, 0x54, 0x0F, 0x81, 0x9F,  /* ...3T... */
            /* 0650 */  0x17, 0x3C, 0x04, 0x3E, 0x80, 0x56, 0x67, 0x47,  /* .<.>.VgG */
            /* 0658 */  0xCE, 0x27, 0xE7, 0x84, 0x1B, 0x2F, 0x1F, 0x13,  /* .'.../.. */
            /* 0660 */  0x76, 0x00, 0x3C, 0xF8, 0x92, 0x7C, 0x16, 0xA1,  /* v.<..|.. */
            /* 0668 */  0x31, 0x96, 0xEF, 0xE3, 0x08, 0x20, 0x67, 0x12,  /* 1.... g. */
            /* 0670 */  0x4F, 0x20, 0xFF, 0xFF, 0x08, 0x2F, 0x23, 0x41,  /* O .../#A */
            /* 0678 */  0x42, 0x1C, 0xCB, 0x6B, 0x88, 0x41, 0x62, 0xBC,  /* B..k.Ab. */
            /* 0680 */  0x1D, 0xF9, 0x38, 0xC2, 0x61, 0x9E, 0x49, 0x0C,  /* ..8.a.I. */
            /* 0688 */  0xF7, 0x70, 0xF0, 0x2A, 0xF2, 0x42, 0x62, 0x98,  /* .p.*.Bb. */
            /* 0690 */  0x47, 0x11, 0x9F, 0x0F, 0x62, 0x18, 0x33, 0x54,  /* G...b.3T */
            /* 0698 */  0xB4, 0x13, 0xF0, 0x71, 0x84, 0x1D, 0x2B, 0x3D,  /* ...q..+= */
            /* 06A0 */  0x54, 0x1F, 0x47, 0x00, 0x7E, 0x1C, 0x11, 0x70,  /* T.G.~..p */
            /* 06A8 */  0xA7, 0x0D, 0xB8, 0xF7, 0x89, 0x10, 0x4F, 0x1A,  /* ......O. */
            /* 06B0 */  0x2F, 0x09, 0xCF, 0x1A, 0xC0, 0x45, 0xA8, 0x96,  /* /....E.. */
            /* 06B8 */  0x73, 0x0F, 0x4B, 0xF3, 0x18, 0xD0, 0xF1, 0x8C,  /* s.K..... */
            /* 06C0 */  0xFD, 0xFF, 0x07, 0xCA, 0x34, 0x01, 0x69, 0x98,  /* ....4.i. */
            /* 06C8 */  0xFC, 0xCA, 0xED, 0x73, 0xC1, 0xD9, 0x3D, 0x72,  /* ...s..=r */
            /* 06D0 */  0x1B, 0x26, 0xC8, 0x13, 0xC1, 0x6B, 0x94, 0xC1,  /* .&...k.. */
            /* 06D8 */  0x05, 0xA9, 0xF3, 0x23, 0x4F, 0x4F, 0x21, 0xDD,  /* ...#OO!. */
            /* 06E0 */  0x27, 0x5A, 0x94, 0xD2, 0x63, 0x1A, 0x05, 0xF1,  /* 'Z..c... */
            /* 06E8 */  0x19, 0xC1, 0x21, 0xCE, 0x31, 0xE8, 0xE1, 0x7B,  /* ..!.1..{ */
            /* 06F0 */  0x0E, 0x67, 0x74, 0x20, 0xEF, 0x01, 0xEC, 0xFE,  /* .gt .... */
            /* 06F8 */  0x08, 0x3C, 0x4F, 0x3A, 0x78, 0x74, 0xDF, 0x14,  /* .<O:xt.. */
            /* 0700 */  0xCE, 0xF3, 0x9D, 0x1C, 0xCC, 0x33, 0xF5, 0x05,  /* .....3.. */
            /* 0708 */  0x13, 0x38, 0x87, 0xB8, 0x0B, 0xA0, 0x64, 0xDF,  /* .8....d. */
            /* 0710 */  0x05, 0x28, 0x88, 0x27, 0xE6, 0xAB, 0x1F, 0x1C,  /* .(.'.... */
            /* 0718 */  0xFC, 0x57, 0x3F, 0xB0, 0xFC, 0xFF, 0xAF, 0x7E,  /* .W?....~ */
            /* 0720 */  0xE0, 0xB8, 0x2C, 0xF8, 0x9A, 0x04, 0xBE, 0x53,  /* ..,....S */
            /* 0728 */  0x3F, 0xFE, 0xC2, 0xE0, 0xDB, 0xC0, 0xC3, 0x13,  /* ?....... */
            /* 0730 */  0x1B, 0x14, 0xF8, 0xA1, 0x7C, 0x3D, 0x04, 0x3C,  /* ....|=.< */
            /* 0738 */  0x29, 0x75, 0x6A, 0x53, 0xE1, 0xF5, 0x10, 0x5C,  /* )ujS...\ */
            /* 0740 */  0x51, 0xAE, 0x25, 0xA8, 0x5B, 0x93, 0x05, 0x01,  /* Q.%.[... */
            /* 0748 */  0xE9, 0x7E, 0xFE, 0x7C, 0x63, 0x4C, 0x9F, 0x4B,  /* .~.|cL.K */
            /* 0750 */  0xE0, 0xDD, 0x41, 0xB5, 0x2A, 0xDD, 0x4B, 0x78,  /* ..A.*.Kx */
            /* 0758 */  0x70, 0x0A, 0x45, 0x3F, 0x3C, 0xA0, 0xC2, 0x1E,  /* p.E?<... */
            /* 0760 */  0x1E, 0x28, 0x88, 0x2F, 0x46, 0xBE, 0x97, 0xE0,  /* .(./F... */
            /* 0768 */  0xFE, 0xFF, 0xF7, 0x12, 0xC0, 0xFF, 0x4D, 0x1B,  /* ......M. */
            /* 0770 */  0xCE, 0xD1, 0x02, 0x33, 0x23, 0xB0, 0x9E, 0x08,  /* ...3#... */
            /* 0778 */  0x7C, 0xD3, 0x06, 0x1C, 0x9D, 0x5C, 0xFC, 0xFF,  /* |....\.. */
            /* 0780 */  0x3F, 0xB9, 0x00, 0x8F, 0x53, 0x09, 0xE0, 0xCA,  /* ?...S... */
            /* 0788 */  0xEB, 0xA9, 0x04, 0x74, 0x77, 0x2F, 0x30, 0x5D,  /* ...tw/0] */
            /* 0790 */  0x4D, 0xCE, 0x24, 0x5A, 0x70, 0xDF, 0xBD, 0x00,  /* M.$Zp... */
            /* 0798 */  0x4F, 0xFF, 0xFF, 0xBB, 0x17, 0xC0, 0xFF, 0xFF,  /* O....... */
            /* 07A0 */  0xFF, 0xDD, 0x0B, 0x10, 0xE2, 0xF5, 0xEE, 0x05,  /* ........ */
            /* 07A8 */  0xBC, 0xCE, 0x25, 0x98, 0xBB, 0x17, 0xC0, 0x85,  /* ..%..... */
            /* 07B0 */  0xFF, 0xFF, 0xDD, 0x0B, 0xE0, 0xFF, 0xFF, 0xFF,  /* ........ */
            /* 07B8 */  0xEE, 0x05, 0x92, 0x53, 0x09, 0xC8, 0xB2, 0x9D,  /* ...S.... */
            /* 07C0 */  0x4A, 0xD0, 0x0A, 0xCF, 0xD1, 0x50, 0x27, 0x70,  /* J....P'p */
            /* 07C8 */  0x28, 0x4F, 0x18, 0xAF, 0xEA, 0x09, 0xAC, 0xE7,  /* (O...... */
            /* 07D0 */  0xF2, 0x85, 0x52, 0x02, 0xA3, 0xCB, 0x17, 0xC0,  /* ..R..... */
            /* 07D8 */  0xB2, 0xFF, 0x3F, 0x3A, 0x0F, 0x74, 0x17, 0x40,  /* ..?:.t.@ */
            /* 07E0 */  0x45, 0xB8, 0x0B, 0x50, 0x10, 0x5F, 0xBE, 0x00,  /* E..P._.. */
            /* 07E8 */  0x2F, 0xA1, 0x20, 0x64, 0xE4, 0x26, 0x41, 0x2F,  /* /. d.&A/ */
            /* 07F0 */  0x5F, 0x70, 0x2E, 0x0E, 0xBE, 0x1F, 0x79, 0x50,  /* _p....yP */
            /* 07F8 */  0xE0, 0x1A, 0xCC, 0x79, 0x17, 0x7B, 0x52, 0xA4,  /* ...y.{R. */
            /* 0800 */  0xD7, 0x13, 0xB8, 0x77, 0x0E, 0x8F, 0x0D, 0x1C,  /* ...w.... */
            /* 0808 */  0xE2, 0xAE, 0x60, 0xC0, 0xDE, 0xE5, 0xED, 0x04,  /* ..`..... */
            /* 0810 */  0x1C, 0xFF, 0xFF, 0xDB, 0x09, 0xD7, 0xB6, 0x76,  /* .......v */
            /* 0818 */  0xDD, 0x4E, 0x70, 0x09, 0x8F, 0xD3, 0x90, 0x8F,  /* .Np..... */
            /* 0820 */  0x27, 0x98, 0x3C, 0xB7, 0x13, 0x54, 0x12, 0x18,  /* '.<..T.. */
            /* 0828 */  0x65, 0x21, 0xD1, 0x11, 0x82, 0xAB, 0xBF, 0x89,  /* e!...... */
            /* 0830 */  0x51, 0x10, 0x5B, 0xB8, 0x9D, 0x00, 0x74, 0x18,  /* Q.[...t. */
            /* 0838 */  0x33, 0x9C, 0x11, 0xBD, 0x57, 0x18, 0xD2, 0x67,  /* 3...W..g */
            /* 0840 */  0x30, 0x60, 0xFA, 0xFF, 0x0F, 0x74, 0x04, 0x41,  /* 0`...t.A */
            /* 0848 */  0x5F, 0xD2, 0xB0, 0x09, 0x6E, 0x20, 0x74, 0x46,  /* _...n tF */
            /* 0850 */  0xF0, 0x2E, 0x20, 0x70, 0x27, 0x06, 0xEB, 0x00,  /* .. p'... */
            /* 0858 */  0x02, 0xBE, 0xB3, 0x1A, 0x60, 0xF0, 0x00, 0xE0,  /* ....`... */
            /* 0860 */  0xB3, 0x1A, 0x60, 0xE6, 0xFF, 0x7F, 0x56, 0x83,  /* ..`...V. */
            /* 0868 */  0x70, 0x7B, 0x01, 0x99, 0x42, 0x9B, 0x3E, 0x35,  /* p{..B.>5 */
            /* 0870 */  0x1A, 0xB5, 0x6A, 0x50, 0xA6, 0x46, 0x99, 0x06,  /* ..jP.F.. */
            /* 0878 */  0xB5, 0xFA, 0x54, 0x6A, 0xCC, 0xD8, 0x0D, 0xC5,  /* ..Tj.... */
            /* 0880 */  0x31, 0x6E, 0x4F, 0x54, 0xC4, 0x72, 0x04, 0x62,  /* 1nOT.r.b */
            /* 0888 */  0xDD, 0x14, 0x32, 0x72, 0xD9, 0x30, 0x88, 0x80,  /* ..2r.0.. */
            /* 0890 */  0x2C, 0x7B, 0xD1, 0x02, 0x22, 0x20, 0x02, 0xB2,  /* ,{.." .. */
            /* 0898 */  0x90, 0x77, 0x83, 0x80, 0xAC, 0x0A, 0x44, 0x40,  /* .w....D@ */
            /* 08A0 */  0x4E, 0x05, 0x44, 0x23, 0x02, 0xD1, 0x38, 0x1E,  /* N.D#..8. */
            /* 08A8 */  0x80, 0x58, 0x38, 0x10, 0x01, 0x59, 0x9D, 0x09,  /* .X8..Y.. */
            /* 08B0 */  0x20, 0x26, 0x15, 0x44, 0x77, 0x08, 0xF2, 0xB9,  /*  &.Dw... */
            /* 08B8 */  0x10, 0x90, 0x45, 0x82, 0x08, 0xC8, 0x19, 0xD7,  /* ..E..... */
            /* 08C0 */  0x27, 0x20, 0x07, 0x06, 0x11, 0x90, 0x43, 0x7E,  /* ' ....C~ */
            /* 08C8 */  0x43, 0x04, 0xE4, 0xC8, 0x20, 0x02, 0xB2, 0x4A,  /* C... ..J */
            /* 08D0 */  0x1D, 0x40, 0x4C, 0x32, 0x88, 0x80, 0x2C, 0xCF,  /* .@L2..,. */
            /* 08D8 */  0x07, 0x10, 0x13, 0x0B, 0x22, 0x20, 0xE7, 0x7C,  /* ...." .| */
            /* 08E0 */  0x0C, 0x08, 0xC8, 0xA1, 0x41, 0x04, 0xE4, 0x80,  /* ....A... */
            /* 08E8 */  0x34, 0x02, 0x72, 0x5C, 0x0A, 0x01, 0x59, 0xEC,  /* 4.r\..Y. */
            /* 08F0 */  0xDB, 0x41, 0x40, 0x96, 0x0E, 0x22, 0x20, 0x47,  /* .A@.." G */
            /* 08F8 */  0x07, 0xA2, 0x42, 0xA4, 0x00, 0xB1, 0x18, 0x56,  /* ..B....V */
            /* 0900 */  0x80, 0x58, 0x26, 0x10, 0x01, 0x39, 0x83, 0x16,  /* .X&..9.. */
            /* 0908 */  0x20, 0x96, 0x08, 0x44, 0x40, 0x56, 0xF4, 0x0A,  /*  ..D@V.. */
            /* 0910 */  0x10, 0x90, 0xF5, 0x81, 0x08, 0xC8, 0x09, 0x81,  /* ........ */
            /* 0918 */  0x68, 0x5E, 0x20, 0x2A, 0xF6, 0xF9, 0x21, 0x20,  /* h^ *..!  */
            /* 0920 */  0x2B, 0x07, 0xD1, 0xE0, 0x88, 0x1B, 0x20, 0xA6,  /* +..... . */
            /* 0928 */  0x19, 0x44, 0x40, 0x4E, 0xFC, 0x94, 0x10, 0x90,  /* .D@N.... */
            /* 0930 */  0xF3, 0x83, 0x08, 0xC8, 0x3A, 0xFD, 0x80, 0xB0,  /* ....:... */
            /* 0938 */  0x94, 0x20, 0x54, 0xE7, 0x7B, 0x44, 0x43, 0x26,  /* . T.{DC& */
            /* 0940 */  0x8A, 0x40, 0x98, 0x42, 0x47, 0x20, 0x2C, 0xCB,  /* .@.BG ,. */
            /* 0948 */  0x2F, 0x49, 0xE0, 0x0E, 0x06, 0x22, 0x20, 0xAB,  /* /I..." . */
            /* 0950 */  0xB1, 0x04, 0xE4, 0xFF, 0x3F, 0x41, 0x69, 0x20,  /* ....?Ai  */
            /* 0958 */  0x02, 0xB2, 0x0C, 0x4D, 0x40, 0x4C, 0x14, 0x88,  /* ...M@L.. */
            /* 0960 */  0x8E, 0x03, 0x04, 0x88, 0x86, 0x03, 0xA2, 0xD2,  /* ........ */
            /* 0968 */  0x44, 0x01, 0x31, 0x9D, 0x20, 0x02, 0x72, 0x38,  /* D.1. .r8 */
            /* 0970 */  0x20, 0x9A, 0x14, 0x88, 0xEA, 0x33, 0x75, 0x04,  /*  ....3u. */
            /* 0978 */  0xA0, 0x20, 0x3A, 0x68, 0x12, 0x55, 0x40, 0x4C,  /* . :h.U@L */
            /* 0980 */  0x26, 0x88, 0x80, 0x1C, 0xD1, 0xD5, 0x50, 0x29,  /* &.....P) */
            /* 0988 */  0x88, 0x80, 0x2C, 0xF2, 0x29, 0x21, 0x20, 0x2B,  /* ..,.)! + */
            /* 0990 */  0x06, 0xD1, 0x31, 0x81, 0xD8, 0x02, 0x62, 0x5A,  /* ..1...bZ */
            /* 0998 */  0x41, 0x34, 0x48, 0x02, 0x44, 0x33, 0x03, 0x51,  /* A4H.D3.Q */
            /* 09A0 */  0xC5, 0xBE, 0x80, 0x98, 0x7C, 0x10, 0x01, 0x39,  /* ....|..9 */
            /* 09A8 */  0x33, 0x10, 0x7D, 0x87, 0xF8, 0x18, 0x41, 0x40,  /* 3.}...A@ */
            /* 09B0 */  0x04, 0xE4, 0x0C, 0x40, 0x54, 0xAF, 0x31, 0x20,  /* ...@T.1  */
            /* 09B8 */  0xA6, 0x1E, 0x44, 0x40, 0xCE, 0xFE, 0x0D, 0xD1,  /* ..D@.... */
            /* 09C0 */  0xD1, 0x80, 0xBC, 0x44, 0x02, 0x11, 0xF5, 0x20,  /* ...D...  */
            /* 09C8 */  0x02, 0x72, 0x14, 0x20, 0x2A, 0x5B, 0xDA, 0xB1,  /* .r. *[.. */
            /* 09D0 */  0x82, 0x82, 0xE8, 0x3A, 0x44, 0xAC, 0x0D, 0x9C,  /* ...:D... */
            /* 09D8 */  0x82, 0x08, 0xC8, 0xB1, 0xB4, 0x01, 0xB1, 0x8C,  /* ........ */
            /* 09E0 */  0x20, 0x1A, 0x28, 0xF1, 0x06, 0xC4, 0x54, 0x82,  /*  .(...T. */
            /* 09E8 */  0x68, 0xD0, 0x04, 0x88, 0x26, 0x05, 0xA2, 0x6A,  /* h...&..j */
            /* 09F0 */  0xFF, 0x37, 0x3A, 0x3A, 0x10, 0x10, 0x1D, 0x11,  /* .7::.... */
            /* 09F8 */  0x88, 0xB9, 0x23, 0x02, 0x05, 0x11, 0x90, 0xFF,  /* ..#..... */
            /* 0A00 */  0xFF                                             /* . */
        })
        Method (DEVS, 1, Serialized)
        {
            Name (FOO, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
            })
            FOO = Arg0
            CreateDWordField (FOO, Zero, DVID)
            CreateDWordField (FOO, 0x04, CPAR)
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = DVID /* \AMW0.DEVS.DVID */
            If ((_T_0 == 0x00010011))
            {
                Return (OWLS (CPAR))
            }
            Else
            {
                If ((_T_0 == 0x00010013))
                {
                    Return (OBTS (CPAR))
                }
                Else
                {
                    If ((_T_0 == 0x00060013))
                    {
                        Return (DUMY (CPAR))
                    }
                    Else
                    {
                        If ((_T_0 == 0x00010019))
                        {
                            Return (DUMY (CPAR))
                        }
                        Else
                        {
                            If ((_T_0 == 0x00050011))
                            {
                                Return (\_SB.ATKD.PBPS (CPAR))
                            }
                            Else
                            {
                                If ((_T_0 == 0x00050012))
                                {
                                    Return (DUMY (CPAR))
                                }
                                Else
                                {
                                    If ((_T_0 == 0x00100011))
                                    {
                                        Return (DUMY (CPAR))
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x00060021))
                                        {
                                            Return (USBC (CPAR))
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0xFF))
                                            {
                                                DBGM (CPAR)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        Method (DUMY, 1, Serialized)
        {
            Return (Zero)
        }

        Method (DSTS, 1, Serialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = Arg0
            If ((_T_0 == 0x00010011))
            {
                Local1 = OWLG ()
                Local1 |= 0x00070000
                Return (Local1)
            }
            Else
            {
                If ((_T_0 == 0x00010013))
                {
                    Local1 = OBTG ()
                    If ((Local1 == 0x80000002))
                    {
                        Return (0x00060000)
                    }

                    Local1 |= 0x00070000
                    Return (Local1)
                }
                Else
                {
                    If ((_T_0 == 0x00060013))
                    {
                        Local1 = NDVS ()
                        If ((Local1 == 0x80000002))
                        {
                            Return (0x00060000)
                        }

                        Local1 |= 0x00070000
                        Return (Local1)
                    }
                    Else
                    {
                        If ((_T_0 == 0x00010019))
                        {
                            Local1 = NDVS ()
                            If ((Local1 == 0x80000002))
                            {
                                Return (0x00060000)
                            }

                            Local1 |= 0x00070000
                            Return (Local1)
                        }
                        Else
                        {
                            If ((_T_0 == 0x00050011))
                            {
                                Local1 = \_SB.ATKD.PBPG ()
                                Local1 |= 0x00070000
                                Return (Local1)
                            }
                            Else
                            {
                                If ((_T_0 == 0x00050012))
                                {
                                    Local1 = \_SB.ATKD.PBLG ()
                                    Local1 |= 0x00070000
                                    Return (Local1)
                                }
                                Else
                                {
                                    If ((_T_0 == 0x00100011))
                                    {
                                        Local1 = DUMS ()
                                        Local1 |= 0x00070000
                                        Return (Local1)
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x00050001))
                                        {
                                            Return (0x00060000)
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x00060021))
                                            {
                                                Local1 = USBT ()
                                                If ((Local1 == 0x02))
                                                {
                                                    Local1 = Zero
                                                }
                                                Else
                                                {
                                                    Local1 |= 0x00030000
                                                }

                                                Return (Local1)
                                            }
                                            Else
                                            {
                                                Return (DUMS ())
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        Method (DUMS, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (NDVS, 0, NotSerialized)
        {
            Return (0x80000002)
        }

        Method (CFVS, 1, Serialized)
        {
            Name (JTST, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            JTST = Arg0
            CreateDWordField (JTST, Zero, FSBT)
            Return (\_SB.PCI0.SBRG.FSBA (FSBT))
        }

        Method (SPEC, 1, Serialized)
        {
            Return (AMWV) /* \AMWV */
        }

        Method (DEVP, 1, Serialized)
        {
            Name (BUFF, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
            })
            BUFF = Arg0
            CreateDWordField (BUFF, Zero, DVID)
            CreateDWordField (BUFF, 0x04, PARA)
            If ((PARA == One))
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                _T_0 = DVID /* \AMW0.DEVP.DVID */
                If ((_T_0 == 0x00010011))
                {
                    DSAF |= One
                }
                Else
                {
                    If ((_T_0 == 0x00010013))
                    {
                        DSAF |= 0x02
                    }
                    Else
                    {
                        If ((_T_0 == 0x00060013))
                        {
                            DSAF |= 0x08
                        }
                        Else
                        {
                            If ((_T_0 == 0x00010015))
                            {
                                DSAF |= 0x10
                            }
                            Else
                            {
                                If ((_T_0 == 0x00090011))
                                {
                                    DSAF |= 0x20
                                }
                                Else
                                {
                                    If ((_T_0 == 0x00070011))
                                    {
                                        DSAF |= 0x40
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x00080013))
                                        {
                                            DSAF |= 0x80
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x00010019))
                                            {
                                                DSAF |= 0x0100
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x00010017))
                                                {
                                                    DSAF |= 0x0200
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x00060017))
                                                    {
                                                        DSAF |= 0x0400
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x00050011))
                                                        {
                                                            DSAF |= 0x0800
                                                        }
                                                        Else
                                                        {
                                                            If ((_T_0 == 0x00050012))
                                                            {
                                                                DSAF |= 0x1000
                                                            }
                                                            Else
                                                            {
                                                                If ((_T_0 == 0x00100011))
                                                                {
                                                                    DSAF |= 0x2000
                                                                }
                                                                Else
                                                                {
                                                                    If ((_T_0 == 0x00080013))
                                                                    {
                                                                        DSAF |= 0x4000
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((_T_0 == 0x00050001))
                                                                        {
                                                                            DSAF |= 0x8000
                                                                        }
                                                                        Else
                                                                        {
                                                                            If ((_T_0 == 0x00060021))
                                                                            {
                                                                                DSAF |= 0x00020000
                                                                            }
                                                                            Else
                                                                            {
                                                                                Return (Zero)
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Return (One)
        }

        Method (KBFT, 1, Serialized)
        {
            Name (KBFG, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            KBFG = Arg0
            CreateDWordField (KBFG, Zero, KBF1)
            Local0 = (KBF1 & One)
            Return (\_SB.ATKD.KBFT (Local0))
        }

        Method (HKEY, 0, Serialized)
        {
            Return (\_SB.ATKD.HKEY ())
        }

        Method (HDPS, 1, Serialized)
        {
            Name (HDPW, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            HDPW = Arg0
            CreateDWordField (HDPW, Zero, HDP0)
            Return (\_SB.ATKD.HDPS (HDP0))
        }

        Method (DBGM, 1, Serialized)
        {
            AMWN (Arg0)
        }

        Method (RSMB, 1, Serialized)
        {
            Name (RBFF, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
            })
            CreateDWordField (Arg0, Zero, SLAD)
            CreateDWordField (Arg0, 0x04, COMD)
            CreateDWordField (RBFF, Zero, RSLT)
            CreateDWordField (RBFF, 0x04, DATA)
            DATA = \_SB.PCI0.SBRG.RBYT (SLAD, COMD)
            Acquire (\_SB.PCI0.SBRG.SMBA, 0xFFFF)
            RSLT = One
            Release (\_SB.PCI0.SBRG.SMBA)
            Return (RBFF) /* \AMW0.RSMB.RBFF */
        }

        Method (WSMB, 1, Serialized)
        {
            Name (RBFF, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            CreateDWordField (Arg0, Zero, SLAD)
            CreateDWordField (Arg0, 0x04, COMD)
            CreateDWordField (Arg0, 0x08, DATA)
            CreateDWordField (RBFF, Zero, RSLT)
            \_SB.PCI0.SBRG.WBYT (SLAD, COMD, DATA)
            Acquire (\_SB.PCI0.SBRG.SMBA, 0xFFFF)
            RSLT = One
            Release (\_SB.PCI0.SBRG.SMBA)
            Return (RBFF) /* \AMW0.WSMB.RBFF */
        }

        Method (RSMW, 1, Serialized)
        {
            Name (RBFF, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
            })
            CreateDWordField (Arg0, Zero, SLAD)
            CreateDWordField (Arg0, 0x04, COMD)
            CreateDWordField (RBFF, Zero, RSLT)
            CreateDWordField (RBFF, 0x04, DATA)
            DATA = \_SB.PCI0.SBRG.RWRD (SLAD, COMD)
            Acquire (\_SB.PCI0.SBRG.SMBA, 0xFFFF)
            RSLT = One
            Release (\_SB.PCI0.SBRG.SMBA)
            Return (RBFF) /* \AMW0.RSMW.RBFF */
        }

        Method (WSMW, 1, Serialized)
        {
            Name (RBFF, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            CreateDWordField (Arg0, Zero, SLAD)
            CreateDWordField (Arg0, 0x04, COMD)
            CreateDWordField (Arg0, 0x08, DATA)
            CreateDWordField (RBFF, Zero, RSLT)
            \_SB.PCI0.SBRG.WWRD (SLAD, COMD, DATA)
            Acquire (\_SB.PCI0.SBRG.SMBA, 0xFFFF)
            RSLT = One
            Release (\_SB.PCI0.SBRG.SMBA)
            Return (RBFF) /* \AMW0.WSMW.RBFF */
        }
    }

    OperationRegion (_SB.PCI0.SBRG.PIX0, PCI_Config, 0x60, 0x0C)
    Field (\_SB.PCI0.SBRG.PIX0, ByteAcc, NoLock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        Offset (0x08), 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8
    }

    Scope (_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        CreateWordField (BUFA, One, IRA0)
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRA & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRA & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRB & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRB & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRC & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRD & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRD & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRE & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRE & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRF & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRF & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRG & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRG & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRH & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRH & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    OperationRegion (SMRG, SystemIO, SMBS, 0x10)
    Field (SMRG, ByteAcc, NoLock, Preserve)
    {
        HSTS,   8, 
        SSTS,   8, 
        HSTC,   8, 
        HCMD,   8, 
        HADR,   8, 
        HDT0,   8, 
        HDT1,   8, 
        BLKD,   8
    }

    Field (SMRG, ByteAcc, NoLock, Preserve)
    {
        Offset (0x05), 
        HDTW,   16
    }

    Method (SCMD, 4, NotSerialized)
    {
        Local0 = 0x05
        While (Local0)
        {
            HADR = Arg0
            HCMD = Arg1
            HDTW = Arg2
            HSTS = 0xFF
            HSTC = Arg3
            Local7 = 0xFF
            While (Local7)
            {
                Local7--
                If ((HSTS & 0x02))
                {
                    Local7 = Zero
                    Local0 = One
                }
            }

            Local0--
        }

        If ((HSTS & 0x02))
        {
            Return (HDTW) /* \HDTW */
        }
        Else
        {
            Return (Ones)
        }
    }

    Method (SBYT, 2, NotSerialized)
    {
        SCMD (Arg0, Arg1, Zero, 0x44)
    }

    Method (WBYT, 3, NotSerialized)
    {
        SCMD (Arg0, Arg1, Arg2, 0x48)
    }

    Method (WWRD, 3, NotSerialized)
    {
        SCMD (Arg0, Arg1, Arg2, 0x4C)
    }

    Method (RSBT, 2, NotSerialized)
    {
        Arg0 |= One
        Return (SCMD (Arg0, Arg1, Zero, 0x44))
    }

    Method (RBYT, 2, NotSerialized)
    {
        Arg0 |= One
        Return (SCMD (Arg0, Arg1, Zero, 0x48))
    }

    Method (RWRD, 2, NotSerialized)
    {
        Arg0 |= One
        Return (SCMD (Arg0, Arg1, Zero, 0x4C))
    }

    Scope (_TZ)
    {
        Name (LTMP, 0x3C)
        Name (TCRT, 0x5F)
        Name (TSP, 0x1E)
        Name (TPSV, 0x5C)
        Method (KELV, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFF)
            Local0 *= 0x0A
            Local0 += 0x0AAC
            Return (Local0)
        }

        Method (RTMP, 0, Serialized)
        {
            Local0 = \_SB.PCI0.SBRG.EC0.RCTP ()
            If ((Local0 < 0xFF))
            {
                LTMP = Local0
            }

            Return (LTMP) /* \_TZ_.LTMP */
        }

        Method (LFNT, 1, Serialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = Arg0
            If ((_T_0 == Zero))
            {
                If (\_SB.PCI0.SBRG.EC0.ECAV ())
                {
                    If (!Acquire (\_SB.PCI0.SBRG.EC0.MUEC, 0xFFFF))
                    {
                        \_SB.PCI0.SBRG.EC0.BNKD = One
                        \_SB.PCI0.SBRG.EC0.FT00 = 0xFF
                        \_SB.PCI0.SBRG.EC0.FT29 = FN29 /* \FN29 */
                        \_SB.PCI0.SBRG.EC0.FT28 = FN28 /* \FN28 */
                        \_SB.PCI0.SBRG.EC0.FT27 = FN27 /* \FN27 */
                        \_SB.PCI0.SBRG.EC0.FT26 = FN26 /* \FN26 */
                        \_SB.PCI0.SBRG.EC0.FT25 = FN25 /* \FN25 */
                        \_SB.PCI0.SBRG.EC0.FT24 = FN24 /* \FN24 */
                        \_SB.PCI0.SBRG.EC0.FT23 = FN23 /* \FN23 */
                        \_SB.PCI0.SBRG.EC0.FT22 = FN22 /* \FN22 */
                        \_SB.PCI0.SBRG.EC0.FT21 = FN21 /* \FN21 */
                        \_SB.PCI0.SBRG.EC0.FT20 = FN20 /* \FN20 */
                        \_SB.PCI0.SBRG.EC0.FT19 = FN19 /* \FN19 */
                        \_SB.PCI0.SBRG.EC0.FT18 = FN18 /* \FN18 */
                        \_SB.PCI0.SBRG.EC0.FT17 = FN17 /* \FN17 */
                        \_SB.PCI0.SBRG.EC0.FT16 = FN16 /* \FN16 */
                        \_SB.PCI0.SBRG.EC0.FT15 = FN15 /* \FN15 */
                        \_SB.PCI0.SBRG.EC0.FT14 = FN14 /* \FN14 */
                        \_SB.PCI0.SBRG.EC0.FT13 = FN13 /* \FN13 */
                        \_SB.PCI0.SBRG.EC0.FT12 = FN12 /* \FN12 */
                        \_SB.PCI0.SBRG.EC0.FT11 = FN11 /* \FN11 */
                        \_SB.PCI0.SBRG.EC0.FT10 = FN10 /* \FN10 */
                        \_SB.PCI0.SBRG.EC0.FT09 = FN09 /* \FN09 */
                        \_SB.PCI0.SBRG.EC0.FT08 = FN08 /* \FN08 */
                        \_SB.PCI0.SBRG.EC0.FT07 = FN07 /* \FN07 */
                        \_SB.PCI0.SBRG.EC0.FT06 = FN06 /* \FN06 */
                        \_SB.PCI0.SBRG.EC0.FT05 = FN05 /* \FN05 */
                        \_SB.PCI0.SBRG.EC0.FT04 = FN04 /* \FN04 */
                        \_SB.PCI0.SBRG.EC0.FT03 = FN03 /* \FN03 */
                        \_SB.PCI0.SBRG.EC0.FT02 = FN02 /* \FN02 */
                        \_SB.PCI0.SBRG.EC0.FT01 = FN01 /* \FN01 */
                        \_SB.PCI0.SBRG.EC0.FT00 = FN00 /* \FN00 */
                        \_SB.PCI0.SBRG.EC0.BNKD = Zero
                        Release (\_SB.PCI0.SBRG.EC0.MUEC)
                    }
                }
            }
            Else
            {
                If ((_T_0 == One))
                {
                    If (\_SB.PCI0.SBRG.EC0.ECAV ())
                    {
                        If (!Acquire (\_SB.PCI0.SBRG.EC0.MUEC, 0xFFFF))
                        {
                            \_SB.PCI0.SBRG.EC0.BNKD = One
                            \_SB.PCI0.SBRG.EC0.FT00 = 0xFF
                            \_SB.PCI0.SBRG.EC0.FT29 = FA29 /* \FA29 */
                            \_SB.PCI0.SBRG.EC0.FT28 = FA28 /* \FA28 */
                            \_SB.PCI0.SBRG.EC0.FT27 = FA27 /* \FA27 */
                            \_SB.PCI0.SBRG.EC0.FT26 = FA26 /* \FA26 */
                            \_SB.PCI0.SBRG.EC0.FT25 = FA25 /* \FA25 */
                            \_SB.PCI0.SBRG.EC0.FT24 = FA24 /* \FA24 */
                            \_SB.PCI0.SBRG.EC0.FT23 = FA23 /* \FA23 */
                            \_SB.PCI0.SBRG.EC0.FT22 = FA22 /* \FA22 */
                            \_SB.PCI0.SBRG.EC0.FT21 = FA21 /* \FA21 */
                            \_SB.PCI0.SBRG.EC0.FT20 = FA20 /* \FA20 */
                            \_SB.PCI0.SBRG.EC0.FT19 = FA19 /* \FA19 */
                            \_SB.PCI0.SBRG.EC0.FT18 = FA18 /* \FA18 */
                            \_SB.PCI0.SBRG.EC0.FT17 = FA17 /* \FA17 */
                            \_SB.PCI0.SBRG.EC0.FT16 = FA16 /* \FA16 */
                            \_SB.PCI0.SBRG.EC0.FT15 = FA15 /* \FA15 */
                            \_SB.PCI0.SBRG.EC0.FT14 = FA14 /* \FA14 */
                            \_SB.PCI0.SBRG.EC0.FT13 = FA13 /* \FA13 */
                            \_SB.PCI0.SBRG.EC0.FT12 = FA12 /* \FA12 */
                            \_SB.PCI0.SBRG.EC0.FT11 = FA11 /* \FA11 */
                            \_SB.PCI0.SBRG.EC0.FT10 = FA10 /* \FA10 */
                            \_SB.PCI0.SBRG.EC0.FT09 = FA09 /* \FA09 */
                            \_SB.PCI0.SBRG.EC0.FT08 = FA08 /* \FA08 */
                            \_SB.PCI0.SBRG.EC0.FT07 = FA07 /* \FA07 */
                            \_SB.PCI0.SBRG.EC0.FT06 = FA06 /* \FA06 */
                            \_SB.PCI0.SBRG.EC0.FT05 = FA05 /* \FA05 */
                            \_SB.PCI0.SBRG.EC0.FT04 = FA04 /* \FA04 */
                            \_SB.PCI0.SBRG.EC0.FT03 = FA03 /* \FA03 */
                            \_SB.PCI0.SBRG.EC0.FT02 = FA02 /* \FA02 */
                            \_SB.PCI0.SBRG.EC0.FT01 = FA01 /* \FA01 */
                            \_SB.PCI0.SBRG.EC0.FT00 = FA00 /* \FA00 */
                            \_SB.PCI0.SBRG.EC0.BNKD = Zero
                            Release (\_SB.PCI0.SBRG.EC0.MUEC)
                        }
                    }
                }
            }
        }

        ThermalZone (TZ00)
        {
            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Return (KELV (TCRT))
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Local1 = 0x05
                While (Local1)
                {
                    Local0 = RTMP ()
                    If ((Local0 > TCRT))
                    {
                        Local1--
                    }
                    Else
                    {
                        Local1 = Zero
                    }
                }

                Return (KELV (Local0))
            }

            Name (_PSL, Package (0x02)  // _PSL: Passive List
            {
                \_PR.P001, 
                \_PR.P002
            })
            Name (_TSP, 0x1E)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x02)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x0A)  // _TC2: Thermal Constant 2
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                Return (KELV (TPSV))
            }
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query
        {
            Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
        }

        Method (_Q3A, 0, NotSerialized)  // _Qxx: EC Query
        {
            Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
        }

        Method (_Q3B, 0, NotSerialized)  // _Qxx: EC Query
        {
            Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
        }

        Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query
        {
        }
    }

    Scope (_SB)
    {
        Name (XCPD, Zero)
        Name (XNPT, One)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == Ones))
            {
                Return (Zero)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (One)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.USB0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x1,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x1,
                    PLD_EjectRequired  = 0x1,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x1,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x1,
                    PLD_EjectRequired  = 0x1,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }
        }
    }

    Scope (_SB.PCI0.USB1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x1,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x1,
                    PLD_EjectRequired  = 0x1,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x0,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x0,
                    PLD_EjectRequired  = 0x0,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }
        }
    }

    Scope (_SB.PCI0.USB2)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x1,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x1,
                    PLD_EjectRequired  = 0x1,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x0,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x0,
                    PLD_EjectRequired  = 0x0,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }
        }
    }

    Scope (_SB.PCI0.USB3)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x0,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x0,
                    PLD_EjectRequired  = 0x0,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x0,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x0,
                    PLD_EjectRequired  = 0x0,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }
        }
    }

    Scope (_SB.PCI0.EUSB)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x1,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x1,
                    PLD_EjectRequired  = 0x1,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x1,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x1,
                    PLD_EjectRequired  = 0x1,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x1,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x1,
                    PLD_EjectRequired  = 0x1,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x0,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x0,
                    PLD_EjectRequired  = 0x0,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x1,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x1,
                    PLD_EjectRequired  = 0x1,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x0,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x0,
                    PLD_EjectRequired  = 0x0,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }

            Device (PRT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x0,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x0,
                    PLD_EjectRequired  = 0x0,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }

            Device (PRT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_PLD, ToPLD (
                    PLD_Revision       = 0x1,
                    PLD_IgnoreColor    = 0x1,
                    PLD_Red            = 0x0,
                    PLD_Green          = 0x0,
                    PLD_Blue           = 0x0,
                    PLD_Width          = 0x0,
                    PLD_Height         = 0x0,
                    PLD_UserVisible    = 0x0,
                    PLD_Dock           = 0x0,
                    PLD_Lid            = 0x0,
                    PLD_Panel          = "UNKNOWN",
                    PLD_VerticalPosition = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape          = "HORIZONTALRECTANGLE",
                    PLD_GroupOrientation = 0x0,
                    PLD_GroupToken     = 0x0,
                    PLD_GroupPosition  = 0x0,
                    PLD_Bay            = 0x0,
                    PLD_Ejectable      = 0x0,
                    PLD_EjectRequired  = 0x0,
                    PLD_CabinetNumber  = 0x0,
                    PLD_CardCageNumber = 0x0,
                    PLD_Reference      = 0x0,
                    PLD_Rotation       = 0x0,
                    PLD_Order          = 0x0,
                    PLD_VerticalOffset = 0x0,
                    PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
            }
        }
    }

    Scope (\)
    {
        Mutex (MUTE, 0x00)
        Method (BDFR, 4, NotSerialized)
        {
            Arg0 <<= 0x14
            Arg1 <<= 0x0F
            Arg2 <<= 0x0C
            Local0 = (Arg0 + Zero)
            Local0 += Arg1
            Local0 += Arg2
            Local0 += Arg3
            Return (Local0)
        }

        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + 0xE0000000)
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \RBPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + 0xE0000000)
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }
    }

    Scope (_SB.PCI0.P0P4)
    {
        OperationRegion (PEGM, SystemMemory, 0xE00E0000, 0x0FF0)
        Field (PEGM, ByteAcc, NoLock, Preserve)
        {
            REG0,   32, 
            REG1,   32, 
            REG2,   32, 
            Offset (0x19), 
            RE19,   8, 
            RE1A,   8, 
            Offset (0x3E), 
            RE3E,   8, 
            Offset (0x50), 
            ASPM,   2, 
                ,   2, 
            LNKD,   1, 
            Offset (0x53), 
                ,   3, 
            LTST,   1, 
            RSCC,   1, 
            Offset (0x54), 
                ,   6, 
            HPCP,   1, 
            SPLV,   8, 
            SPLS,   2, 
                ,   2, 
            PHSN,   13, 
            Offset (0xA4), 
            PWST,   2
        }

        OperationRegion (DMIM, SystemMemory, 0xFED18000, 0x0D00)
        Field (DMIM, ByteAcc, NoLock, Preserve)
        {
            Offset (0xC34), 
            DC34,   32
        }
    }

    Scope (_SB.PCI0.P0P4.GFX0)
    {
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            Offset (0x200), 
            VBSE,   32
        }

        Name (_PSC, Zero)  // _PSC: Power State Current
        Name (P3MO, Zero)
        Name (DGPS, Zero)
        Method (OWAK, 1, NotSerialized)
        {
            If (^^^SBRG.EC0.ECAV ())
            {
                HDAC = GNVS (0x1557)
                SHDA ()
            }
        }

        OperationRegion (GFXM, SystemMemory, ((RE19 << 0x14) + 0xE0000000), 0x0500)
        Field (GFXM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x2C), 
            SVID,   32, 
            Offset (0x488), 
                ,   25, 
            NHDA,   1
        }

        Field (GFXM, ByteAcc, NoLock, Preserve)
        {
            VREG,   2048
        }

        OperationRegion (HDNV, SystemMemory, (((RE19 << 0x14) + 0xE0000000) + 0x1000), 0x0500)
        Field (HDNV, ByteAcc, NoLock, Preserve)
        {
            HREG,   2048
        }

        Name (HDAC, Zero)
        Method (SHDA, 0, NotSerialized)
        {
            If ((SVID != Ones))
            {
                NHDA = HDAC /* \_SB_.PCI0.P0P4.GFX0.HDAC */
                Notify (P0P4, Zero) // Bus Check
                Notify (GFX0, One) // Device Check
            }
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            Debug = "PS0"
            _PSC = Zero
            If ((DGPS != Zero))
            {
                PWST = Zero
                If ((SB06 == One))
                {
                    SB07 = Zero
                    Sleep (0x64)
                    SB06 = Zero
                    Local0 = SB39 /* \SB39 */
                    While (!Local0)
                    {
                        Sleep (0x0A)
                        Local0 = SB39 /* \SB39 */
                    }

                    Sleep (0x19)
                    SB07 = One
                    Sleep (0x64)
                }

                ^^^VGA.RSTO ()
                DGPS = Zero
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            Debug = "PS3"
            If ((P3MO == One))
            {
                ^^^VGA.SAVO ()
                Local1 = \BDFR (RE19, Zero, Zero, 0x34)
                Local0 = \RBPE (Local1)
                Local2 = One
                While (Local2)
                {
                    If ((Local0 != Zero))
                    {
                        Local1 = \BDFR (RE19, Zero, Zero, Local0)
                        Local0 = \RBPE (Local1)
                        If ((Local0 != 0x10))
                        {
                            Local1 += One
                            Local0 = \RBPE (Local1)
                        }
                        Else
                        {
                            Local1 += 0x10
                            Local2 = Zero
                        }
                    }
                    Else
                    {
                        Local2 = Zero
                    }
                }

                Local0 = \RBPE (Local1)
                \WBPE (Local1, Zero)
                SB07 = Zero
                Sleep (0x32)
                SB06 = One
                Sleep (0x64)
                _PSC = 0x03
                DGPS = One
            }

            P3MO = Zero
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            Return (^^^VGA._DSM (Arg0, Arg1, Arg2, Arg3))
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            Return (Package (0x01)
            {
                0x80007330
            })
        }

        Method (_ROM, 2, NotSerialized)  // _ROM: Read-Only Memory
        {
            Local0 = (Arg0 + VBSE) /* \_SB_.PCI0.P0P4.GFX0.VBSE */
            Local1 = (Arg1 << 0x03)
            Name (VBUF, Buffer (Arg1) {})
            OperationRegion (VROM, SystemMemory, Local0, Local1)
            Field (VROM, ByteAcc, NoLock, Preserve)
            {
                ROMI,   65536
            }

            VBUF = ROMI /* \_SB_.PCI0.P0P4.GFX0._ROM.ROMI */
            Return (VBUF) /* \_SB_.PCI0.P0P4.GFX0._ROM.VBUF */
        }
    }

    Scope (_SB)
    {
        Method (BDFR, 4, NotSerialized)
        {
            Arg0 <<= 0x14
            Arg1 <<= 0x0F
            Arg2 <<= 0x0C
            Local0 = (Arg0 + Zero)
            Local0 += Arg1
            Local0 += Arg2
            Local0 += Arg3
            Return (Local0)
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (_Q49, 0, NotSerialized)  // _Qxx: EC Query
        {
            Notify (WMI1, 0x80) // Status Change
            Notify (^^^P0P4.GFX0, 0x81) // Information Change
        }
    }

    Scope (_SB.PCI0.VGA)
    {
        Name (RST0, Buffer (0x0100)
        {
             0x00                                             /* . */
        })
        Name (RST1, Buffer (0x0100)
        {
             0x00                                             /* . */
        })
        Method (RSTO, 0, NotSerialized)
        {
            ^^P0P4.GFX0.VREG = RST0 /* \_SB_.PCI0.VGA_.RST0 */
            Local0 = ^^P0P4.GFX0.NHDA /* \_SB_.PCI0.P0P4.GFX0.NHDA */
            ^^P0P4.GFX0.NHDA = One
            Sleep (0x02)
            ^^P0P4.GFX0.HREG = RST1 /* \_SB_.PCI0.VGA_.RST1 */
            ^^P0P4.GFX0.NHDA = Local0
        }

        Method (SAVO, 0, NotSerialized)
        {
            RST0 = ^^P0P4.GFX0.VREG /* \_SB_.PCI0.P0P4.GFX0.VREG */
            Local0 = ^^P0P4.GFX0.NHDA /* \_SB_.PCI0.P0P4.GFX0.NHDA */
            ^^P0P4.GFX0.NHDA = One
            Sleep (0x02)
            RST1 = ^^P0P4.GFX0.HREG /* \_SB_.PCI0.P0P4.GFX0.HREG */
            ^^P0P4.GFX0.NHDA = Local0
        }

        Method (HINI, 0, NotSerialized)
        {
            SAVO ()
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("a486d8f8-0bda-471b-a72b-6042a6b5bee0")))
            {
                Debug = "debug _dsm"
                Local0 = Zero
                Local0 = (DerefOf (Index (Arg3, 0x03)) << 0x18)
                Local0 += (DerefOf (Index (Arg3, 0x02)) << 0x10)
                Local0 += (DerefOf (Index (Arg3, One)) << 0x08)
                Local0 += (DerefOf (Index (Arg3, Zero)) << Zero)
                If ((Arg1 != 0x0100))
                {
                    Return (Buffer (0x04)
                    {
                         0x02, 0x00, 0x00, 0x80                           /* .... */
                    })
                }

                Name (SUBF, Zero)
                SUBF = Arg2
                DBG8 = SUBF /* \_SB_.PCI0.VGA_._DSM.SUBF */
                If ((SUBF == Zero))
                {
                    Return (Buffer (0x04)
                    {
                         0x21, 0x00, 0x03, 0x0C                           /* !... */
                    })
                }
                Else
                {
                    If ((SUBF == 0x05))
                    {
                        If (^^SBRG.EC0.ECAV ())
                        {
                            If ((^^SBRG.EC0.SF39 == One))
                            {
                                Return (Buffer (0x04)
                                {
                                     0x00, 0x00, 0x30, 0x00                           /* ..0. */
                                })
                            }
                            Else
                            {
                                Return (Buffer (0x04)
                                {
                                     0x00, 0x00, 0x20, 0x00                           /* .. . */
                                })
                            }
                        }
                    }

                    If ((SUBF == 0x10))
                    {
                        If (((Local0 >> 0x10) == 0x564B))
                        {
                            DBG8 = 0x11
                            Return (VKBF) /* \VKBF */
                        }
                    }

                    If ((SUBF == 0x1A))
                    {
                        If ((Local0 & One))
                        {
                            Local2 = (Local0 >> 0x18)
                            If ((Local2 == 0x03))
                            {
                                ^^P0P4.GFX0.P3MO = One
                            }
                            Else
                            {
                                ^^P0P4.GFX0.P3MO = Zero
                            }
                        }

                        If (^^P0P4.GFX0.DGPS)
                        {
                            Return (Buffer (0x04)
                            {
                                 0x41, 0x00, 0x00, 0x11                           /* A... */
                            })
                        }
                        Else
                        {
                            Return (Buffer (0x04)
                            {
                                 0x59, 0x00, 0x00, 0x11                           /* Y... */
                            })
                        }
                    }

                    If ((SUBF == 0x1B))
                    {
                        If ((Local0 & One))
                        {
                            DBG8 = 0x35
                            SNVS (0x1557, One)
                            ^^P0P4.GFX0.HDAC = One
                        }
                        Else
                        {
                            DBG8 = 0x65
                            SNVS (0x1557, Zero)
                            ^^P0P4.GFX0.HDAC = Zero
                        }

                        If ((Local0 & 0x02))
                        {
                            ^^P0P4.GFX0.SHDA ()
                        }

                        If (^^P0P4.GFX0.NHDA)
                        {
                            Return (Unicode ("\x01"))
                        }
                        Else
                        {
                            Return (Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           /* .... */
                            })
                        }
                    }

                    Return (Buffer (0x04)
                    {
                         0x02, 0x00, 0x00, 0x80                           /* .... */
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        OperationRegion (HOSG, PCI_Config, Zero, 0x0100)
        Field (HOSG, ByteAcc, NoLock, Preserve)
        {
            REG0,   32, 
            REG1,   32, 
            REG2,   32, 
            Offset (0x54), 
                ,   1, 
            D1EN,   1
        }

        OperationRegion (MCHB, SystemMemory, 0xFED14000, 0x4000)
        Field (MCHB, DWordAcc, Lock, Preserve)
        {
            Offset (0xC14), 
            CLKD,   6
        }
    }

    Scope (_SB.PCI0)
    {
        Method (NWM1, 1, NotSerialized)
        {
            Notify (WMI1, Arg0)
        }

        Device (WMI1)
        {
            Name (_HID, "pnp0c14")  // _HID: Hardware ID
            Name (_UID, "MXM2")  // _UID: Unique ID
            Name (_WDG, Buffer (0xA0)
            {
                /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  /* <\.....N */
                /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  /* .w...*,. */
                /* 0010 */  0x4D, 0x58, 0x01, 0x02, 0x40, 0x2F, 0x1A, 0x92,  /* MX..@/.. */
                /* 0018 */  0xC4, 0x0D, 0x2D, 0x40, 0xAC, 0x18, 0xB4, 0x84,  /* ..-@.... */
                /* 0020 */  0x44, 0xEF, 0x9E, 0xD2, 0xD0, 0x00, 0x01, 0x08,  /* D....... */
                /* 0028 */  0x61, 0xD3, 0x2A, 0xC1, 0xA9, 0x9F, 0x74, 0x4C,  /* a.*...tL */
                /* 0030 */  0x90, 0x1F, 0x95, 0xCB, 0x09, 0x45, 0xCF, 0x3E,  /* .....E.> */
                /* 0038 */  0xD9, 0x00, 0x01, 0x08, 0x64, 0x35, 0x4F, 0xEF,  /* ....d5O. */
                /* 0040 */  0xC8, 0x48, 0x94, 0x48, 0x85, 0xC8, 0xB4, 0x6C,  /* .H.H...l */
                /* 0048 */  0x26, 0xB8, 0x42, 0xC0, 0xDA, 0x00, 0x01, 0x08,  /* &.B..... */
                /* 0050 */  0x06, 0x80, 0x84, 0x42, 0x86, 0x88, 0x0E, 0x49,  /* ...B...I */
                /* 0058 */  0x8C, 0x72, 0x2B, 0xDC, 0xA9, 0x3A, 0x8A, 0x09,  /* .r+..:.. */
                /* 0060 */  0xDB, 0x00, 0x01, 0x08, 0x62, 0xDE, 0x6B, 0xE0,  /* ....b.k. */
                /* 0068 */  0x75, 0xEE, 0xF4, 0x48, 0xA5, 0x83, 0xB2, 0x3E,  /* u..H...> */
                /* 0070 */  0x69, 0xAB, 0xF8, 0x91, 0x80, 0x00, 0x01, 0x08,  /* i....... */
                /* 0078 */  0x0F, 0xBD, 0xDE, 0x3A, 0x5F, 0x0C, 0xED, 0x46,  /* ...:_..F */
                /* 0080 */  0xAB, 0x2E, 0x04, 0x96, 0x2B, 0x4F, 0xDC, 0xBC,  /* ....+O.. */
                /* 0088 */  0x81, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  /* ....!... */
                /* 0090 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  /* f....... */
                /* 0098 */  0xC9, 0x06, 0x29, 0x10, 0x58, 0x4D, 0x01, 0x00   /* ..).XM.. */
            })
            Method (WMMX, 3, NotSerialized)
            {
                If ((SizeOf (Arg2) >= 0x04))
                {
                    CreateDWordField (Arg2, Zero, FUNC)
                    CreateDWordField (Arg2, 0x04, ARGS)
                    CreateDWordField (Arg2, 0x08, XARG)
                    If ((FUNC == 0x444F445F))
                    {
                        If ((Arg1 == 0x10))
                        {
                            Return (^^VGA._DOD ())
                        }
                        Else
                        {
                        }
                    }
                    Else
                    {
                        If ((FUNC == 0x534F525F))
                        {
                            If ((SizeOf (Arg2) >= 0x08))
                            {
                                If ((Arg1 != 0x10))
                                {
                                    Return (^^P0P4.GFX0._ROM (ARGS, XARG))
                                }
                            }
                        }
                        Else
                        {
                            If ((FUNC == 0x4D53445F))
                            {
                                If ((SizeOf (Arg2) >= 0x18))
                                {
                                    CreateField (Arg2, 0x20, 0x80, MUID)
                                    CreateDWordField (Arg2, 0x14, REVI)
                                    CreateDWordField (Arg2, 0x18, SFNC)
                                    CreateField (Arg2, 0xE0, 0x20, SARG)
                                    If ((Arg1 != 0x10))
                                    {
                                        Return (^^VGA._DSM (MUID, REVI, SFNC, SARG))
                                    }
                                }
                            }
                        }
                    }

                    If ((FUNC == 0x47504F4E))
                    {
                        ^^P0P4.GFX0.DGPS = One
                        ^^P0P4.GFX0._PS0 ()
                    }
                }

                Return (Zero)
            }

            Name (WQXM, Buffer (0x029C)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  /* FOMB.... */
                /* 0008 */  0x8B, 0x02, 0x00, 0x00, 0x0C, 0x08, 0x00, 0x00,  /* ........ */
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  /* DS...}.T */
                /* 0018 */  0x18, 0xD2, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  /* .......B */
                /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0xE6, 0x80, 0x42, 0x04,  /* ......B. */
                /* 0028 */  0x92, 0x43, 0xA4, 0x30, 0x30, 0x28, 0x0B, 0x20,  /* .C.00(.  */
                /* 0030 */  0x86, 0x90, 0x0B, 0x26, 0x26, 0x40, 0x04, 0x84,  /* ...&&@.. */
                /* 0038 */  0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24, 0x88, 0xFA,  /* ...).$.. */
                /* 0040 */  0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25, 0x04, 0x42,  /* ..(..%.B */
                /* 0048 */  0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B, 0x80, 0x61,  /* .....[.a */
                /* 0050 */  0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0, 0x18, 0x92,  /* ........ */
                /* 0058 */  0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02, 0x21, 0xA1,  /* J.....!. */
                /* 0060 */  0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40, 0x3B, 0xA2,  /* ....-@;. */
                /* 0068 */  0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02, 0x8F, 0x82,  /* $...#... */
                /* 0070 */  0xA1, 0x71, 0x68, 0xEC, 0x30, 0x2C, 0x13, 0x4C,  /* .qh.0,.L */
                /* 0078 */  0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45, 0x60, 0xDC,  /* .8...E`. */
                /* 0080 */  0x4E, 0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78,  /* N... L.x */
                /* 0088 */  0x54, 0x61, 0x34, 0x07, 0x45, 0xE0, 0x42, 0x63,  /* Ta4.E.Bc */
                /* 0090 */  0x64, 0x40, 0xC8, 0xA3, 0x00, 0xAB, 0xA3, 0xD0,  /* d@...... */
                /* 0098 */  0xA4, 0x12, 0xD8, 0xBD, 0x00, 0x8D, 0x02, 0xB4,  /* ........ */
                /* 00A0 */  0x09, 0x70, 0x28, 0x40, 0xA1, 0x00, 0x6B, 0x18,  /* .p(@..k. */
                /* 00A8 */  0x72, 0x06, 0x21, 0x5B, 0xD8, 0xC2, 0x68, 0x50,  /* r.![..hP */
                /* 00B0 */  0x80, 0x45, 0x14, 0x8D, 0xE0, 0x2C, 0x2A, 0x9E,  /* .E...,*. */
                /* 00B8 */  0x93, 0x50, 0x02, 0xDA, 0x1B, 0x82, 0xF0, 0x8C,  /* .P...... */
                /* 00C0 */  0xD9, 0x18, 0x9E, 0x10, 0x83, 0x54, 0x86, 0x21,  /* .....T.! */
                /* 00C8 */  0x88, 0xB8, 0x11, 0x8E, 0xA5, 0xFD, 0x41, 0x10,  /* ......A. */
                /* 00D0 */  0xF9, 0xAB, 0xD7, 0xB8, 0x1D, 0x69, 0x34, 0xA8,  /* .....i4. */
                /* 00D8 */  0xB1, 0x26, 0x38, 0x76, 0x8F, 0xE6, 0x84, 0x3B,  /* .&8v...; */
                /* 00E0 */  0x17, 0x20, 0x7D, 0x6E, 0x02, 0x39, 0xBA, 0xD3,  /* . }n.9.. */
                /* 00E8 */  0xA8, 0x73, 0xD0, 0x64, 0x78, 0x0C, 0x2B, 0xC1,  /* .s.dx.+. */
                /* 00F0 */  0x7F, 0x80, 0x4F, 0x01, 0x78, 0xD7, 0x80, 0x9A,  /* ..O.x... */
                /* 00F8 */  0xFE, 0xC1, 0x33, 0x41, 0x70, 0xA8, 0x21, 0x7A,  /* ..3Ap.!z */
                /* 0100 */  0xD4, 0xE1, 0x4E, 0xE0, 0xBC, 0x8E, 0x84, 0x41,  /* ..N....A */
                /* 0108 */  0x1C, 0xD1, 0x71, 0x63, 0x67, 0x75, 0x32, 0x07,  /* ..qcgu2. */
                /* 0110 */  0x5D, 0xAA, 0x00, 0xB3, 0x07, 0x00, 0x0D, 0x2E,  /* ]....... */
                /* 0118 */  0xC1, 0x69, 0x9F, 0x49, 0xE8, 0xF7, 0x80, 0xF3,  /* .i.I.... */
                /* 0120 */  0xE9, 0x79, 0x6C, 0x6C, 0x10, 0xA8, 0x91, 0xF9,  /* .yll.... */
                /* 0128 */  0xFF, 0x0F, 0xED, 0x41, 0x9E, 0x56, 0xCC, 0x90,  /* ...A.V.. */
                /* 0130 */  0xCF, 0x02, 0x87, 0xC5, 0xC4, 0x1E, 0x19, 0xE8,  /* ........ */
                /* 0138 */  0x78, 0xC0, 0x7F, 0x00, 0x78, 0x34, 0x88, 0xF0,  /* x...x4.. */
                /* 0140 */  0x66, 0xE0, 0xF9, 0x9A, 0x60, 0x50, 0x08, 0x39,  /* f...`P.9 */
                /* 0148 */  0x19, 0x0F, 0x4A, 0xCC, 0xF9, 0x80, 0xCC, 0x25,  /* ..J....% */
                /* 0150 */  0xC4, 0x43, 0xC0, 0x31, 0xC4, 0x08, 0x7A, 0x46,  /* .C.1..zF */
                /* 0158 */  0x45, 0x23, 0x6B, 0x22, 0x3E, 0x03, 0x78, 0xDC,  /* E#k">.x. */
                /* 0160 */  0x96, 0x05, 0x42, 0x09, 0x0C, 0xEC, 0x73, 0xC3,  /* ..B...s. */
                /* 0168 */  0x3B, 0x84, 0x61, 0x71, 0xA3, 0x09, 0xEC, 0xF3,  /* ;.aq.... */
                /* 0170 */  0x85, 0x05, 0x0E, 0x0A, 0x05, 0xEB, 0xBB, 0x42,  /* .......B */
                /* 0178 */  0xCC, 0xE7, 0x81, 0xE3, 0x3C, 0x60, 0x0B, 0x9F,  /* ....<`.. */
                /* 0180 */  0x28, 0x01, 0x3E, 0x24, 0x8F, 0x06, 0xDE, 0x20,  /* (.>$...  */
                /* 0188 */  0xE1, 0x5B, 0x3F, 0x02, 0x10, 0xE0, 0x27, 0x06,  /* .[?...'. */
                /* 0190 */  0x13, 0x58, 0x1E, 0x30, 0x7A, 0x94, 0xF6, 0x2B,  /* .X.0z..+ */
                /* 0198 */  0x00, 0x21, 0xF8, 0x8B, 0xC5, 0x53, 0xC0, 0xEB,  /* .!...S.. */
                /* 01A0 */  0x40, 0x84, 0x63, 0x81, 0x29, 0x72, 0x6C, 0x68,  /* @.c.)rlh */
                /* 01A8 */  0x78, 0x7E, 0x70, 0x88, 0x1E, 0xF5, 0x5C, 0xC2,  /* x~p...\. */
                /* 01B0 */  0x1F, 0x4D, 0x94, 0x53, 0x38, 0x1C, 0x1F, 0x39,  /* .M.S8..9 */
                /* 01B8 */  0x8C, 0x10, 0xFE, 0x49, 0xE3, 0xC9, 0xC3, 0x9A,  /* ...I.... */
                /* 01C0 */  0xEF, 0x00, 0x9A, 0xD2, 0x5B, 0xC0, 0xFB, 0x83,  /* ....[... */
                /* 01C8 */  0x47, 0x80, 0x11, 0x20, 0xE1, 0x68, 0x82, 0x89,  /* G.. .h.. */
                /* 01D0 */  0x7C, 0x3A, 0x01, 0xD5, 0xFF, 0xFF, 0x74, 0x02,  /* |:....t. */
                /* 01D8 */  0xB8, 0xBA, 0x01, 0x14, 0x37, 0x6A, 0x9D, 0x49,  /* ....7j.I */
                /* 01E0 */  0x7C, 0x2C, 0xF1, 0xAD, 0xE4, 0xBC, 0x43, 0xC5,  /* |,....C. */
                /* 01E8 */  0x7F, 0x93, 0x78, 0x3A, 0xF1, 0x34, 0x1E, 0x4C,  /* ..x:.4.L */
                /* 01F0 */  0x42, 0x44, 0x89, 0x18, 0x21, 0xA2, 0xEF, 0x27,  /* BD..!..' */
                /* 01F8 */  0x46, 0x08, 0x15, 0x31, 0x6C, 0xA4, 0x37, 0x80,  /* F..1l.7. */
                /* 0200 */  0xE7, 0x13, 0xE3, 0x84, 0x08, 0xF4, 0x74, 0xC2,  /* ......t. */
                /* 0208 */  0x42, 0x3E, 0x34, 0xA4, 0xE1, 0x74, 0x02, 0x50,  /* B>4..t.P */
                /* 0210 */  0xE0, 0xFF, 0x7F, 0x3A, 0x81, 0x1F, 0xF5, 0x74,  /* ...:...t */
                /* 0218 */  0x82, 0x1E, 0xAE, 0x4F, 0x19, 0x18, 0xE4, 0x03,  /* ...O.... */
                /* 0220 */  0xF2, 0xA9, 0xC3, 0xF7, 0x1F, 0x13, 0xF8, 0x78,  /* .......x */
                /* 0228 */  0xC2, 0x45, 0x1D, 0x4F, 0x50, 0xA7, 0x07, 0x1F,  /* .E.OP... */
                /* 0230 */  0x4F, 0xD8, 0x19, 0xE1, 0x2C, 0x1E, 0x03, 0x7C,  /* O...,..| */
                /* 0238 */  0x3A, 0xC1, 0xDC, 0x13, 0x7C, 0x3A, 0x01, 0xDB,  /* :...|:.. */
                /* 0240 */  0x68, 0x60, 0x1C, 0x4F, 0xC0, 0x77, 0x74, 0xC1,  /* h`.O.wt. */
                /* 0248 */  0x1D, 0x4F, 0xC0, 0x30, 0x18, 0x18, 0xE7, 0x13,  /* .O.0.... */
                /* 0250 */  0xE0, 0x31, 0x5E, 0xDC, 0x31, 0xC0, 0x43, 0xE0,  /* .1^.1.C. */
                /* 0258 */  0x03, 0x78, 0xDC, 0x38, 0x3D, 0x2B, 0x9D, 0x14,  /* .x.8=+.. */
                /* 0260 */  0xF2, 0x24, 0xC2, 0x07, 0x85, 0x39, 0xB0, 0xE0,  /* .$...9.. */
                /* 0268 */  0x14, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83,  /* ......U. */
                /* 0270 */  0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52,  /* 25.4...R */
                /* 0278 */  0x63, 0xC6, 0xCE, 0x19, 0x0E, 0xF8, 0x10, 0xD0,  /* c....... */
                /* 0280 */  0x89, 0xC0, 0xF2, 0x9E, 0x0D, 0x02, 0xB1, 0x0C,  /* ........ */
                /* 0288 */  0x0A, 0x81, 0x58, 0xFA, 0xAB, 0x45, 0x20, 0x0E,  /* ..X..E . */
                /* 0290 */  0x0E, 0xA2, 0xFF, 0x3F, 0x88, 0x23, 0xD2, 0x0A,  /* ...?.#.. */
                /* 0298 */  0xC4, 0xFF, 0x7F, 0x7F                           /* .... */
            })
        }
    }

    Scope (\)
    {
        Name (VKBF, Buffer (0xE2)
        {
            /* 0000 */  0x92, 0x9E, 0xAC, 0xAE, 0x78, 0x93, 0x23, 0xD7,  /* ....x.#. */
            /* 0008 */  0x4B, 0x56, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x00,  /* KV...... */
            /* 0010 */  0x32, 0x37, 0x34, 0x35, 0x39, 0x31, 0x32, 0x35,  /* 27459125 */
            /* 0018 */  0x33, 0x36, 0x38, 0x37, 0x47, 0x65, 0x6E, 0x75,  /* 3687Genu */
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  /* ine NVID */
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  /* IA Certi */
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x4F, 0x70, 0x74,  /* fied Opt */
            /* 0038 */  0x69, 0x6D, 0x75, 0x73, 0x20, 0x52, 0x65, 0x61,  /* imus Rea */
            /* 0040 */  0x64, 0x79, 0x20, 0x4D, 0x6F, 0x74, 0x68, 0x65,  /* dy Mothe */
            /* 0048 */  0x72, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x20, 0x66,  /* rboard f */
            /* 0050 */  0x6F, 0x72, 0x20, 0x61, 0x73, 0x75, 0x73, 0x20,  /* or asus  */
            /* 0058 */  0x31, 0x32, 0x31, 0x35, 0x4E, 0x20, 0x6E, 0x31,  /* 1215N n1 */
            /* 0060 */  0x31, 0x6D, 0x2D, 0x70, 0x74, 0x32, 0x20, 0x20,  /* 1m-pt2   */
            /* 0068 */  0x2D, 0x20, 0x4D, 0x4D, 0x59, 0x57, 0x3B, 0x42,  /* - MMYW;B */
            /* 0070 */  0x3A, 0x4D, 0x22, 0x3B, 0x56, 0x2D, 0x43, 0x33,  /* :M";V-C3 */
            /* 0078 */  0x2A, 0x38, 0x4D, 0x26, 0x5A, 0x2D, 0x3C, 0x3F,  /* *8M&Z-<? */
            /* 0080 */  0x3C, 0x48, 0x24, 0x53, 0x51, 0x2B, 0x39, 0x28,  /* <H$SQ+9( */
            /* 0088 */  0x5B, 0x41, 0x48, 0x42, 0x23, 0x50, 0x31, 0x26,  /* [AHB#P1& */
            /* 0090 */  0x39, 0x47, 0x26, 0x4B, 0x50, 0x3D, 0x45, 0x44,  /* 9G&KP=ED */
            /* 0098 */  0x5F, 0x5D, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70,  /* _] - Cop */
            /* 00A0 */  0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32,  /* yright 2 */
            /* 00A8 */  0x30, 0x30, 0x39, 0x20, 0x4E, 0x56, 0x49, 0x44,  /* 009 NVID */
            /* 00B0 */  0x49, 0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F,  /* IA Corpo */
            /* 00B8 */  0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41,  /* ration A */
            /* 00C0 */  0x6C, 0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74,  /* ll Right */
            /* 00C8 */  0x73, 0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,  /* s Reserv */
            /* 00D0 */  0x65, 0x64, 0x2D, 0x32, 0x37, 0x34, 0x35, 0x39,  /* ed-27459 */
            /* 00D8 */  0x31, 0x32, 0x35, 0x33, 0x36, 0x38, 0x37, 0x28,  /* 1253687( */
            /* 00E0 */  0x52, 0x29                                       /* R) */
        })
    }

    Scope (_SB.PCI0.VGA)
    {
        OperationRegion (IGDM, SystemMemory, 0xAF66E0D4, 0x2000)
        Field (IGDM, AnyAcc, NoLock, Preserve)
        {
            SIGN,   128, 
            SIZE,   32, 
            OVER,   32, 
            SVER,   256, 
            VVER,   128, 
            GVER,   128, 
            MBOX,   32, 
            DMOD,   32, 
            Offset (0xE0), 
            KSV0,   32, 
            KSV1,   8, 
            Offset (0xF0), 
            IBTT,   8, 
            IPSC,   2, 
            IPAT,   4, 
            Offset (0xF2), 
            IBIA,   3, 
            IBLC,   2, 
                ,   1, 
            ITVF,   4, 
            ITVM,   4, 
            Offset (0xF4), 
            IDVM,   1, 
            IDVS,   2, 
            ISSC,   1, 
            PAVP,   4, 
            CSTE,   16, 
            NSTE,   16, 
            Offset (0x100), 
            DRDY,   32, 
            CSTS,   32, 
            CEVT,   32, 
            Offset (0x120), 
            DIDL,   32, 
            DDL2,   32, 
            DDL3,   32, 
            DDL4,   32, 
            DDL5,   32, 
            DDL6,   32, 
            DDL7,   32, 
            DDL8,   32, 
            CPDL,   32, 
            CPL2,   32, 
            CPL3,   32, 
            CPL4,   32, 
            CPL5,   32, 
            CPL6,   32, 
            CPL7,   32, 
            CPL8,   32, 
            CADL,   32, 
            CAL2,   32, 
            CAL3,   32, 
            CAL4,   32, 
            CAL5,   32, 
            CAL6,   32, 
            CAL7,   32, 
            CAL8,   32, 
            NADL,   32, 
            NDL2,   32, 
            NDL3,   32, 
            NDL4,   32, 
            NDL5,   32, 
            NDL6,   32, 
            NDL7,   32, 
            NDL8,   32, 
            ASLP,   32, 
            TIDX,   32, 
            CHPD,   32, 
            CLID,   32, 
            CDCK,   32, 
            SXSW,   32, 
            EVTS,   32, 
            CNOT,   32, 
            NRDY,   32, 
            Offset (0x200), 
            SCIE,   1, 
            GEFC,   4, 
            GXFC,   3, 
            GESF,   8, 
            Offset (0x204), 
            PARM,   32, 
            DSLP,   32, 
            Offset (0x300), 
            ARDY,   32, 
            ASLC,   32, 
            TCHE,   32, 
            ALSI,   32, 
            BCLP,   32, 
            PFIT,   32, 
            CBLV,   32, 
            BCLM,   16, 
            BCL1,   16, 
            BCL2,   16, 
            BCL3,   16, 
            BCL4,   16, 
            BCL5,   16, 
            BCL6,   16, 
            BCL7,   16, 
            BCL8,   16, 
            BCL9,   16, 
            BCLA,   16, 
            BCLB,   16, 
            BCLC,   16, 
            BCLD,   16, 
            BCLE,   16, 
            BCLF,   16, 
            BC16,   16, 
            BC17,   16, 
            BC18,   16, 
            BC19,   16, 
            CPFM,   32, 
            EPFM,   32, 
            PLUT,   592, 
            PFMB,   32, 
            DDCV,   32, 
            Offset (0x400), 
            GVD1,   49152, 
            PHED,   32, 
            BDDC,   2048
        }

        OperationRegion (TCOI, SystemIO, TOBS, 0x08)
        Field (TCOI, WordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
                ,   9, 
            SCIS,   1, 
            Offset (0x06)
        }

        Name (DBTB, Package (0x15)
        {
            Zero, 
            0x07, 
            0x38, 
            0x01C0, 
            0x0E00, 
            0x3F, 
            0x01C7, 
            0x0E07, 
            0x01F8, 
            0x0E38, 
            0x0FC0, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x7000, 
            0x7007, 
            0x7038, 
            0x71C0, 
            0x7E00
        })
        Method (GSCI, 0, Serialized)
        {
            If ((GEFC == 0x04))
            {
                GXFC = GBDA ()
            }

            If ((GEFC == 0x06))
            {
                GXFC = SBCB ()
            }

            GEFC = Zero
            SCIS = One
            GSSE = Zero
            SCIE = Zero
            Return (Zero)
        }

        Method (GBDA, 0, Serialized)
        {
            If ((GESF == Zero))
            {
                If ((DVMT >= 0x05))
                {
                    PARM = 0x0679
                }
                Else
                {
                    PARM = 0x0279
                }

                GESF = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == One))
            {
                PARM = 0x0240
                GESF = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x04))
            {
                PARM &= 0xEFFF0000
                PARM &= (DerefOf (Index (DBTB, IBTT)) << 0x10)
                PARM |= IBTT /* \_SB_.PCI0.VGA_.PARM */
                GESF = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x05))
            {
                PARM = IPSC /* \_SB_.PCI0.VGA_.IPSC */
                PARM |= (IPAT << 0x08)
                PARM += 0x0100
                PARM |= (LIDS << 0x10)
                PARM += 0x00010000
                PARM |= (IBIA << 0x14)
                GESF = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x06))
            {
                PARM = ITVF /* \_SB_.PCI0.VGA_.ITVF */
                PARM |= (ITVM << 0x04)
                GESF = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x07))
            {
                If ((DVMT >= 0x05))
                {
                    PARM = GIVD /* \_SB_.PCI0.VGA_.GIVD */
                    PARM ^= One
                    PARM |= (GMFN << One)
                    PARM |= 0x1800
                    PARM |= (IDVS << 0x11)
                    PARM |= (CDCT << 0x15) /* \_SB_.PCI0.VGA_.PARM */
                }
                Else
                {
                    Name (MEMS, 0x0D)
                    PARM = GIVD /* \_SB_.PCI0.VGA_.GIVD */
                    PARM ^= One
                    PARM |= (GMFN << One)
                    PARM |= 0x1000
                    PARM |= (CDCT << 0x15) /* \_SB_.PCI0.VGA_.PARM */
                    If ((IDVM == One))
                    {
                        MEMS = 0x11
                    }

                    If ((TASM < M512))
                    {
                        PARM |= (One << MEMS)
                    }
                    Else
                    {
                        If ((TASM < M1GB))
                        {
                            If ((IDVS < 0x03))
                            {
                                PARM |= (IDVS << MEMS)
                            }
                            Else
                            {
                                PARM |= (0x02 << MEMS)
                            }
                        }
                        Else
                        {
                            PARM |= (IDVS << MEMS)
                        }
                    }
                }

                GESF = One
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x0A))
            {
                PARM = Zero
                If (ISSC)
                {
                    PARM |= 0x03
                }

                GESF = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x0B))
            {
                PARM = KSV0 /* \_SB_.PCI0.VGA_.KSV0 */
                GESF = KSV1 /* \_SB_.PCI0.VGA_.KSV1 */
                Return (SUCC) /* \SUCC */
            }

            GESF = Zero
            Return (CRIT) /* \CRIT */
        }

        Method (SBCB, 0, Serialized)
        {
            If ((GESF == Zero))
            {
                PARM = 0x20
                GESF = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == One))
            {
                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x03))
            {
                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x04))
            {
                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x05))
            {
                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x06))
            {
                ITVF = (PARM & 0x0F)
                ITVM = ((PARM & 0xF0) >> 0x04)
                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x07))
            {
                If ((PARM == Zero))
                {
                    Local0 = CLID /* \_SB_.PCI0.VGA_.CLID */
                    If ((0x80000000 & Local0))
                    {
                        CLID &= 0x0F
                        GLID (CLID)
                    }
                }

                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x08))
            {
                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x09))
            {
                IBTT = (PARM & 0xFF)
                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x0A))
            {
                IPSC = (PARM & 0xFF)
                If (((PARM >> 0x08) & 0xFF))
                {
                    IPAT = ((PARM >> 0x08) & 0xFF)
                    IPAT--
                }

                IBIA = ((PARM >> 0x14) & 0x07)
                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x0B))
            {
                If ((((PARM >> 0x0B) & 0x03) >= 0x02))
                {
                    Local0 = ((PARM >> 0x0D) & 0x0F)
                    Local1 = ((PARM >> 0x11) & 0x0F)
                    If (Local0)
                    {
                        IDVM = Zero
                        IDVS = Local0
                    }

                    If (Local1)
                    {
                        IDVM = One
                        IDVS = Local1
                    }
                }

                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x10))
            {
                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x11))
            {
                PARM = (LIDS << 0x08)
                PARM += 0x0100
                GESF = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x12))
            {
                If ((PARM & One))
                {
                    If (((PARM >> One) == One))
                    {
                        ISSC = One
                    }
                    Else
                    {
                        GESF = Zero
                        Return (CRIT) /* \CRIT */
                    }
                }
                Else
                {
                    ISSC = Zero
                }

                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((GESF == 0x13))
            {
                GESF = Zero
                PARM = Zero
                Return (SUCC) /* \SUCC */
            }

            If ((DVMT >= 0x05))
            {
                If ((GESF == 0x14))
                {
                    PAVP = (PARM & 0x0F)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \SUCC */
                }
            }

            GESF = Zero
            Return (SUCC) /* \SUCC */
        }

        Scope (^^PCI0)
        {
            OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
            Field (MCHP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x60), 
                TASM,   10, 
                Offset (0x62)
            }
        }

        OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
        Field (IGDP, AnyAcc, NoLock, Preserve)
        {
            Offset (0x12), 
                ,   1, 
            GIVD,   1, 
                ,   2, 
            GUMA,   3, 
            Offset (0x14), 
                ,   4, 
            GMFN,   1, 
            Offset (0x18), 
            Offset (0x8C), 
            CDCT,   10, 
            Offset (0x8E), 
            Offset (0xA4), 
            ASLE,   8, 
            Offset (0xA8), 
            GSSE,   1, 
            GSSB,   14, 
            GSES,   1, 
            Offset (0xB0), 
                ,   12, 
            CDVL,   1, 
            Offset (0xB2), 
            Offset (0xB5), 
            LBPC,   8, 
            Offset (0xBC), 
            ASLS,   32
        }

        Name (M512, 0x04)
        Name (M1GB, 0x08)
        Method (PDRD, 0, NotSerialized)
        {
            If (!DRDY)
            {
                Sleep (ASLP)
            }

            Return (!DRDY)
        }

        Method (PSTS, 0, NotSerialized)
        {
            If ((CSTS > 0x02))
            {
                Sleep (ASLP)
            }

            Return ((CSTS == 0x03))
        }

        Method (OSYS, 0, NotSerialized)
        {
            Local1 = 0x07D0
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    Local1 = One
                }

                If (_OSI ("Windows 2001"))
                {
                    Local1 = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    Local1 = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    Local1 = 0x07D2
                }

                If (_OSI ("Windows 2006"))
                {
                    Local1 = 0x07D6
                }
            }

            Return (Local1)
        }

        Method (GNOT, 2, NotSerialized)
        {
            If (PDRD ())
            {
                Return (One)
            }

            CEVT = Arg0
            CSTS = 0x03
            If (((CHPD == Zero) && (Arg1 == Zero)))
            {
                If (((OSYS () > 0x07D0) || (OSYS () < 0x07D6)))
                {
                    Notify (PCI0, Arg1)
                }
                Else
                {
                    Notify (VGA, Arg1)
                }
            }

            Notify (VGA, 0x80) // Status Change
            Return (Zero)
        }

        Method (GHDS, 1, NotSerialized)
        {
            TIDX = Arg0
            Return (GNOT (One, Zero))
        }

        Method (GLID, 1, NotSerialized)
        {
            CLID = Arg0
            Return (GNOT (0x02, Zero))
        }

        Method (GDCK, 1, NotSerialized)
        {
            CDCK = Arg0
            Return (GNOT (0x04, Zero))
        }

        Method (PARD, 0, NotSerialized)
        {
            If (!ARDY)
            {
                Sleep (ASLP)
            }

            Return (!ARDY)
        }

        Method (AINT, 2, NotSerialized)
        {
            If (!(TCHE & (One << Arg0)))
            {
                Return (One)
            }

            If (PARD ())
            {
                Return (One)
            }

            If ((Arg0 == 0x02))
            {
                If (CPFM)
                {
                    Local0 = (CPFM & 0x0F)
                    Local1 = (EPFM & 0x0F)
                    If ((Local0 == One))
                    {
                        If ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        Else
                        {
                            If ((Local1 & 0x08))
                            {
                                PFIT = 0x08
                            }
                            Else
                            {
                                PFIT = One
                            }
                        }
                    }

                    If ((Local0 == 0x06))
                    {
                        If ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        Else
                        {
                            If ((Local1 & One))
                            {
                                PFIT = One
                            }
                            Else
                            {
                                PFIT = 0x06
                            }
                        }
                    }

                    If ((Local0 == 0x08))
                    {
                        If ((Local1 & One))
                        {
                            PFIT = One
                        }
                        Else
                        {
                            If ((Local1 & 0x06))
                            {
                                PFIT = 0x06
                            }
                            Else
                            {
                                PFIT = 0x08
                            }
                        }
                    }
                }
                Else
                {
                    PFIT ^= 0x07
                }

                PFIT |= 0x80000000
                ASLC = 0x04
            }
            Else
            {
                If ((Arg0 == One))
                {
                    BCLP = ((Arg1 * 0xFF) / 0x64)
                    BCLP |= 0x80000000
                    ASLC = 0x02
                }
                Else
                {
                    If ((Arg0 == Zero))
                    {
                        ALSI = Arg1
                        ASLC = One
                    }
                    Else
                    {
                        Return (One)
                    }
                }
            }

            LBPC = Zero
            Return (Zero)
        }

        Method (SBLB, 1, NotSerialized)
        {
            If (!(TCHE & 0x02))
            {
                Return (One)
            }

            If (PARD ())
            {
                Return (One)
            }

            BCLP = Arg0
            BCLP |= 0x80000000
            ASLC = 0x02
            LBPC = Zero
            Return (Zero)
        }

        Method (GBLB, 0, NotSerialized)
        {
            Local0 = BCLP /* \_SB_.PCI0.VGA_.BCLP */
            Local0 &= 0xFF
            Return (Local0)
        }

        Method (SCIP, 0, NotSerialized)
        {
            If (~GIVD)
            {
                If ((OVER != Zero))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }

        Scope (\_GPE)
        {
            Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                \_SB.PCI0.VGA.GSCI ()
            }
        }

        Name (OPBS, 0xFFFFFF00)
        Method (OPTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                OPBS = ASLS /* \_SB_.PCI0.VGA_.ASLS */
            }
        }

        Method (OWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                ASLS = OPBS /* \_SB_.PCI0.VGA_.OPBS */
                GSES = One
            }
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Name (CRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
            })
            CreateDWordField (CRS, \_SB.PCI0._Y0B._MIN, MIN5)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y0B._MAX, MAX5)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y0B._LEN, LEN5)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y0C._MIN, MIN6)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y0C._MAX, MAX6)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y0C._LEN, LEN6)  // _LEN: Length
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = MG1L /* \MG1L */
                If (Local0)
                {
                    MIN5 = MG1B /* \MG1B */
                    LEN5 = MG1L /* \MG1L */
                    MAX5 = (MIN5 + Local0--)
                }

                MIN6 = MG2B /* \MG2B */
                LEN6 = MG2L /* \MG2L */
                Local0 = MG2L /* \MG2L */
                MAX6 = (MIN6 + Local0--)
                Return (CRS) /* \_SB_.PCI0.CRS_ */
            }
        }
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        PTS (Arg0)
        Index (WAKP, Zero) = Zero
        Index (WAKP, One) = Zero
        If (((Arg0 == 0x04) && (OSFL () == 0x02)))
        {
            Sleep (0x0BB8)
        }

        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        AAXB = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (Index (WAKP, Zero)))
        {
            Index (WAKP, One) = Zero
        }
        Else
        {
            Index (WAKP, One) = Arg0
        }

        Return (WAKP) /* \WAKP */
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.SBRG.EC0.EC0S (Arg0)
            \_SB.PCI0.SBRG.SPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
            \_SB.PCI0.VGA.OPTS (Arg0)
            LPFS (Arg0)
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            Return (OSFL ())
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \_SB.PCI0.SBRG.EC0.EC0W (Arg0)
        \_SB.PCI0.SBRG.SWAK (Arg0)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.P0P4.GFX0.OWAK (Arg0)
        \_SB.PCI0.VGA.OWAK (Arg0)
        LPWK (Arg0)
    }
}



ECDT
----
[000h 0000   4]                    Signature : "ECDT"    [Embedded Controller Boot Resources Table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 66
[00Ah 0010   6]                       Oem ID : "A_M_I_"
[010h 0016   8]                 Oem Table ID : "OEMECDT "
[018h 0024   4]                 Oem Revision : 09001007
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


[024h 0036  12]      Command/Status Register : [Generic Address Structure]
[024h 0036   1]                     Space ID : 01 [SystemIO]
[025h 0037   1]                    Bit Width : 08
[026h 0038   1]                   Bit Offset : 00
[027h 0039   1]         Encoded Access Width : 00 [Undefined/Legacy]
[028h 0040   8]                      Address : 0000000000000066

[030h 0048  12]                Data Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 01 [SystemIO]
[031h 0049   1]                    Bit Width : 08
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 00 [Undefined/Legacy]
[034h 0052   8]                      Address : 0000000000000062

[03Ch 0060   4]                          UID : 00000000
[040h 0064   1]                   GPE Number : 1C
[041h 0065  20]                     Namepath : "\\_SB.PCI0.SBRG.EC0"

Raw Table Data: Length 85 (0x55)

  0000: 45 43 44 54 55 00 00 00 01 66 41 5F 4D 5F 49 5F  // ECDTU....fA_M_I_
  0010: 4F 45 4D 45 43 44 54 20 07 10 00 09 4D 53 46 54  // OEMECDT ....MSFT
  0020: 97 00 00 00 01 08 00 00 66 00 00 00 00 00 00 00  // ........f.......
  0030: 01 08 00 00 62 00 00 00 00 00 00 00 00 00 00 00  // ....b...........
  0040: 1C 5C 5C 5F 53 42 2E 50 43 49 30 2E 53 42 52 47  // .\\_SB.PCI0.SBRG
  0050: 2E 45 43 30 00                                   // .EC0.


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : F3
[00Ah 0010   6]                       Oem ID : "A_M_I_"
[010h 0016   8]                 Oem Table ID : "OEMFACP "
[018h 0024   4]                 Oem Revision : 09001007
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]                 FACS Address : AF66E000
[028h 0040   4]                 DSDT Address : AF6604A0
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : E1
[035h 0053   1]           ACPI Disable Value : 1E
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : E2
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000820
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000828
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : E3
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000000A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000AF66E000
[08Ch 0140   8]                 DSDT Address : 00000000AF6604A0
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 20
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000828

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 20
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

  0000: 46 41 43 50 F4 00 00 00 04 F3 41 5F 4D 5F 49 5F  // FACP......A_M_I_
  0010: 4F 45 4D 46 41 43 50 20 07 10 00 09 4D 53 46 54  // OEMFACP ....MSFT
  0020: 97 00 00 00 00 E0 66 AF A0 04 66 AF 01 02 09 00  // ......f...f.....
  0030: B2 00 00 00 E1 1E 00 E2 00 08 00 00 00 00 00 00  // ................
  0040: 04 08 00 00 00 00 00 00 20 08 00 00 08 08 00 00  // ........ .......
  0050: 28 08 00 00 00 00 00 00 04 02 01 04 08 00 00 E3  // (...............
  0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 03 00 00  // e...........2...
  0070: A5 00 00 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
  0080: 06 00 00 00 00 E0 66 AF 00 00 00 00 A0 04 66 AF  // ......f.......f.
  0090: 00 00 00 00 01 20 00 00 00 08 00 00 00 00 00 00  // ..... ..........
  00A0: 01 20 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // . ..............
  00B0: 04 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00D0: 01 20 00 00 08 08 00 00 00 00 00 00 01 40 00 00  // . ...........@..
  00E0: 28 08 00 00 00 00 00 00 01 20 00 00 00 00 00 00  // (........ ......
  00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


GSCI
----
[000h 0000   4]                    Signature : "GSCI"    
[004h 0004   4]                 Table Length : 00002024
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DB     /* Incorrect checksum, should be 89 */
[00Ah 0010   6]                       Oem ID : "A_M_I_"
[010h 0016   8]                 Oem Table ID : "GMCHSCI "
[018h 0024   4]                 Oem Revision : 09001007
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


**** Unknown ACPI table signature [GSCI]


Raw Table Data: Length 8228 (0x2024)

  0000: 47 53 43 49 24 20 00 00 01 DB 41 5F 4D 5F 49 5F  // GSCI$ ....A_M_I_
  0010: 47 4D 43 48 53 43 49 20 07 10 00 09 4D 53 46 54  // GMCHSCI ....MSFT
  0020: 97 00 00 00 49 6E 74 65 6C 47 72 61 70 68 69 63  // ....IntelGraphic
  0030: 73 4D 65 6D 00 20 00 00 00 00 01 01 41 6D 65 72  // sMem. ......Amer
  0040: 69 63 61 6E 20 4D 65 67 61 74 72 65 6E 64 73 20  // ican Megatrends 
  0050: 49 6E 63 2E 20 20 20 20 20 20 20 20 32 30 30 31  // Inc.        2001
  0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0070: 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00 00  // ................
  0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0110: 00 00 00 00 00 08 00 00 07 00 00 00 00 00 00 00  // ................
  0120: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
  0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0140: 00 00 00 00 00 01 00 00 00 02 00 00 00 04 00 00  // ................
  0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0180: 00 00 00 00 00 01 00 00 00 02 00 00 00 04 00 00  // ................
  0190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  01D0: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  01F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0220: 00 00 00 00 20 00 00 00 20 00 00 00 00 00 00 00  // .... ... .......
  0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  02B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  02D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0320: 00 00 00 00 01 00 00 00 00 00 00 00 02 00 00 00  // ................
  0330: 00 00 00 00 FF 00 00 80 06 00 00 80 64 00 00 80  // ............d...
  0340: 21 0D 2D 12 3A 17 47 1C 54 21 60 26 6D 2B 7A 30  // !.-.:.G.T!`&m+z0
  0350: 99 3C C4 4D FF 64 00 00 00 00 00 00 00 00 00 00  // .<.M.d..........
  0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  03B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  03D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0420: 00 00 00 00 24 56 42 54 20 50 49 4E 45 56 49 45  // ....$VBT PINEVIE
  0430: 57 20 20 20 20 20 20 20 64 00 30 00 92 0E C9 00  // W       d.0.....
  0440: 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 0...............
  0450: 00 00 00 00 42 49 4F 53 5F 44 41 54 41 5F 42 4C  // ....BIOS_DATA_BL
  0460: 4F 43 4B 20 90 00 16 00 62 0E FE EA 00 00 64 01  // OCK ....b.....d.
  0470: 01 02 01 32 30 30 31 49 6E 74 65 6C 28 72 29 50  // ...2001Intel(r)P
  0480: 69 6E 65 56 69 65 77 20 50 43 49 20 41 63 63 65  // ineView PCI Acce
  0490: 6C 65 72 61 74 65 64 20 53 56 47 41 20 42 49 4F  // lerated SVGA BIO
  04A0: 53 0D 0A 42 75 69 6C 64 20 4E 75 6D 62 65 72 3A  // S..Build Number:
  04B0: 20 32 30 30 31 20 50 43 20 31 34 2E 33 34 20 20  //  2001 PC 14.34  
  04C0: 30 33 2F 30 31 2F 32 30 31 30 20 20 30 32 3A 33  // 03/01/2010  02:3
  04D0: 34 3A 33 31 0D 0A 44 45 43 4F 4D 50 49 4C 41 54  // 4:31..DECOMPILAT
  04E0: 49 4F 4E 20 4F 52 20 44 49 53 41 53 53 45 4D 42  // ION OR DISASSEMB
  04F0: 4C 59 20 50 52 4F 48 49 42 49 54 45 44 0D 0A 00  // LY PROHIBITED...
  0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0510: 00 00 43 6F 70 79 72 69 67 68 74 20 28 43 29 20  // ..Copyright (C) 
  0520: 32 30 30 30 2D 32 30 30 33 20 49 6E 74 65 6C 20  // 2000-2003 Intel 
  0530: 43 6F 72 70 2E 20 41 6C 6C 20 52 69 67 68 74 73  // Corp. All Rights
  0540: 20 52 65 73 65 72 76 65 64 2E 0D 0A 0D 0A 00 00  //  Reserved.......
  0550: C0 03 08 04 01 00 00 01 05 00 07 01 00 01 01 FE  // ................
  0560: 20 00 44 04 06 04 09 01 0A 02 0C 04 03 01 05 05  //  .D.............
  0570: 0D 05 0B 01 07 05 15 05 45 05 0E 04 46 04 4C 04  // ........E...F.L.
  0580: 48 40 02 AA 00 02 04 00 00 21 08 00 22 10 00 4C  // H@.......!.."..L
  0590: 46 50 00 00 00 00 00 00 00 00 04 00 00 03 00 00  // FP..............
  05A0: 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00  // ..... ..........
  05B0: 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
  05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  05D0: 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // . ..............
  05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  05F0: 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00  // .. .............
  0600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0610: 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00  // ... ............
  0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03  // ................
  0630: 01 00 00 04 1C 00 30 32 34 36 38 3A 3C 40 42 44  // ......02468:<@BD
  0640: 46 48 4A 4C 50 52 54 56 58 5A 5C 80 81 82 83 84  // FHJLPRTVXZ\.....
  0650: 1A 00 FE 6A 00 00 00 01 00 00 00 00 00 00 00 00  // ...j............
  0660: 00 01 00 0E 01 20 00 1F 07 1E 00 B9 03 28 00 E6  // ..... .......(..
  0670: 03 02 00 F0 03 38 00 31 04 C8 00 7F 06 30 00 B2  // .....8.1.....0..
  0680: 06 18 00 CD 06 18 00 E8 06 18 00 EB 07 08 00 FB  // ................
  0690: 07 12 00 0D 08 12 00 1F 08 12 00 31 08 12 00 46  // ...........1...F
  06A0: 08 0A 00 50 08 0A 00 5A 08 0A 00 64 08 0A 00 71  // ...P...Z...d...q
  06B0: 08 0A 00 7B 08 0A 00 85 08 0A 00 8F 08 0A 00 06  // ...{............
  06C0: 75 01 FC FF 02 00 60 00 00 74 00 20 00 04 60 00  // u.....`..t. ..`.
  06D0: 00 74 00 20 00 10 60 00 00 00 01 80 00 40 60 00  // .t. ..`......@`.
  06E0: 00 74 00 20 00 44 60 00 00 74 00 20 00 14 60 00  // .t. .D`..t. ..`.
  06F0: 00 00 00 80 84 48 60 00 00 74 00 20 00 4C 60 00  // .....H`..t. .L`.
  0700: 00 74 00 20 00 18 60 00 00 00 00 80 84 00 20 00  // .t. ..`....... .
  0710: 00 00 00 00 00 00 04 07 00 00 00 20 00 80 00 07  // ........... ....
  0720: 00 00 00 00 00 80 01 07 00 00 00 00 00 80 11 07  // ................
  0730: 00 00 00 00 01 80 21 07 00 00 00 00 00 00 14 07  // ......!.........
  0740: 00 00 00 00 80 9C 01 07 00 00 00 00 00 9C 11 07  // ................
  0750: 00 00 00 00 00 00 00 06 00 7F 02 1F 03 04 00 06  // ................
  0760: 00 87 02 17 03 08 00 06 00 8F 02 EF 02 0C 00 06  // ................
  0770: 00 DF 01 0C 02 10 00 06 00 E7 01 04 02 14 00 06  // ................
  0780: 00 E9 01 EB 01 1C 00 06 00 DF 01 7F 02 00 10 06  // ................
  0790: 00 7F 02 1F 03 04 10 06 00 87 02 17 03 08 10 06  // ................
  07A0: 00 8F 02 EF 02 0C 10 06 00 DF 01 0C 02 10 10 06  // ................
  07B0: 00 E7 01 04 02 14 10 06 00 E9 01 EB 01 1C 10 06  // ................
  07C0: 00 DF 01 7F 02 D8 20 00 00 06 01 06 03 DC 20 00  // ...... ....... .
  07D0: 00 06 03 00 00 30 00 07 00 9C 1D 00 00 08 00 07  // .....0..........
  07E0: 00 00 00 00 80 08 10 07 00 00 00 00 80 00 14 07  // ................
  07F0: 00 8E 00 00 00 00 11 06 00 18 8C 00 00 40 11 06  // .............@..
  0800: 00 00 00 30 00 60 11 06 00 00 00 30 00 00 00 00  // ...0.`.....0....
  0810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0830: 00 00 00 00 00 FF FF 07 07 00 FE FF CE 18 00 FF  // ................
  0840: FF 08 3D 00 FC FF 02 10 14 07 00 01 00 00 01 14  // ..=.............
  0850: 14 07 00 00 00 00 00 18 14 07 00 00 00 00 00 1C  // ................
  0860: 14 07 00 00 00 03 03 20 14 07 00 00 00 00 00 24  // ....... .......$
  0870: 14 07 00 01 00 00 00 28 14 07 00 00 00 00 00 FF  // .......(........
  0880: FF 0A CB 00 0A 00 00 00 00 00 00 00 00 FF FF 00  // ................
  0890: 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00 00  // ................
  08A0: 00 FF FF 00 00 00 00 00 00 00 00 FF FF 00 00 00  // ................
  08B0: 00 00 00 00 00 FF FF 00 00 00 00 00 00 00 00 FF  // ................
  08C0: FF 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00  // ................
  08D0: 00 00 00 FF FF 00 00 00 00 00 00 00 00 FF FF 00  // ................
  08E0: 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00 00  // ................
  08F0: 00 FF FF 00 00 00 00 00 00 00 00 FF FF 00 00 00  // ................
  0900: 00 00 00 00 00 FF FF 00 00 00 00 00 00 00 00 FF  // ................
  0910: FF 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00  // ................
  0920: 00 00 00 FF FF 00 00 00 00 00 00 00 00 FF FF 00  // ................
  0930: 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00 00  // ................
  0940: 00 FF FF 00 00 00 00 00 00 00 00 FF FF 00 00 0B  // ................
  0950: C7 00 21 10 00 00 00 03 20 00 00 00 00 00 00 00  // ..!..... .......
  0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0970: 00 00 00 00 10 00 00 00 03 20 00 00 00 00 00 00  // ......... ......
  0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0990: 00 00 00 00 00 10 00 00 00 03 20 00 00 00 00 00  // .......... .....
  09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  09B0: 00 00 00 00 00 00 60 00 00 00 03 20 00 00 00 00  // ......`.... ....
  09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  09D0: 00 00 00 00 00 00 00 10 00 00 00 03 20 00 00 00  // ............ ...
  09E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  09F0: 00 00 00 00 00 00 00 00 20 00 00 00 03 20 00 00  // ........ .... ..
  0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0A10: 00 00 00 00 00 00 00 00 00 0C 11 00 4A 00 04 58  // ............J..X
  0A20: 02 10 3C 80 0C 00 00 00 00 00 55 00 00 0D 03 00  // ..<.......U.....
  0A30: 78 00 0A 0E 09 00 01 F0 05 5A 00 4C 06 2D 00 0F  // x........Z.L.-..
  0A40: 8B 00 09 0A 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09 05  // ................
  0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 10 84 00  // ................
  0AD0: 10 00 03 01 00 00 01 08 00 00 08 00 02 00 00 01  // ................
  0AE0: 04 00 04 00 00 04 08 00 00 00 00 00 00 00 00 00  // ................
  0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0B00: 00 00 00 08 00 03 01 00 00 01 08 00 00 08 00 02  // ................
  0B10: 00 00 01 04 00 04 00 00 04 08 00 00 00 00 08 00  // ................
  0B20: 03 01 00 00 01 08 00 00 08 00 02 00 00 01 04 00  // ................
  0B30: 04 00 00 04 08 00 00 00 00 08 00 03 01 00 00 01  // ................
  0B40: 08 00 00 08 00 02 00 00 01 04 00 04 00 00 04 08  // ................
  0B50: 00 00 00 00 11 08 00 00 00 00 00 00 00 00 00 12  // ................
  0B60: 0C 00 01 00 00 00 00 00 00 00 00 00 00 00 13 20  // ............... 
  0B70: 00 0F 02 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0B90: 00 14 9E 00 06 1A 00 00 00 00 00 00 07 3C 00 00  // .............<..
  0BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0BB0: 00 00 00 00 00 00 07 3C 00 00 00 00 00 00 00 00  // .......<........
  0BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0BD0: 07 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .<..............
  0BE0: 00 00 00 00 00 00 00 00 00 00 07 3C 00 00 00 00  // ...........<....
  0BF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0C00: 00 00 00 00 07 3C 00 00 00 00 00 00 00 00 00 00  // .....<..........
  0C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 3C  // ...............<
  0C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0C30: 00 00 16 17 00 00 00 03 07 00 00 00 00 08 01 00  // ................
  0C40: 00 00 00 00 00 00 00 30 84 0E 00 00 17 48 00 64  // .......0.....H.d
  0C50: 19 00 40 41 00 26 30 18 88 36 00 00 00 00 00 00  // ..@A.&0..6......
  0C60: 18 30 2A 00 98 51 00 30 40 30 70 13 00 00 00 00  // .0*..Q.0@0p.....
  0C70: 00 00 1E A8 2F 78 E0 51 1A 26 40 58 98 13 00 00  // ..../x.Q.&@X....
  0C80: 00 00 00 00 1E 48 3F 40 30 62 B0 32 40 40 C0 13  // .....H?@0b.2@@..
  0C90: 00 00 00 00 00 00 1E 18 28 00 36 7F 03 00 01 00  // ........(.6.....
  0CA0: 00 00 00 0C 36 7F 05 00 02 00 00 00 00 0C 36 7F  // ....6.........6.
  0CB0: 01 90 03 00 00 00 00 0C 36 7F 06 00 04 00 00 00  // ........6.......
  0CC0: 00 0C 19 28 00 19 00 FA 00 FA 00 19 00 90 01 20  // ...(........... 
  0CD0: 00 20 00 20 00 20 00 C8 00 40 00 40 00 40 00 40  // . . . ...@.@.@.@
  0CE0: 00 2C 01 40 00 40 00 40 00 40 00 2C 01 1A 02 00  // .,.@.@.@.@.,....
  0CF0: 00 00 28 0E 00 02 00 73 00 55 55 55 55 3C 00 FF  // ..(....s.UUUU<..
  0D00: 00 3C 00 29 91 00 03 46 09 28 74 09 12 86 09 0A  // .<.)...F.(t.....
  0D10: 90 09 28 BE 09 12 D0 09 0A DA 09 28 08 0A 12 1A  // ..(........(....
  0D20: 0A 0A 24 0A 28 52 0A 12 64 0A 0A 6E 0A 28 9C 0A  // ..$.(R..d..n.(..
  0D30: 12 AE 0A 0A B8 0A 28 E6 0A 12 F8 0A 0A 02 0B 28  // ......(........(
  0D40: 30 0B 12 42 0B 0A 4C 0B 28 7A 0B 12 8C 0B 0A 96  // 0..B..L.(z......
  0D50: 0B 28 C4 0B 12 D6 0B 0A E0 0B 28 0E 0C 12 20 0C  // .(........(... .
  0D60: 0A 2A 0C 28 58 0C 12 6A 0C 0A 74 0C 28 A2 0C 12  // .*.(X..j..t.(...
  0D70: B4 0C 0A BE 0C 28 EC 0C 12 FE 0C 0A 08 0D 28 36  // .....(........(6
  0D80: 0D 12 48 0D 0A 52 0D 28 80 0D 12 92 0D 0A 9C 0D  // ..H..R.(........
  0D90: 28 CA 0D 12 DC 0D 0A 2A A0 04 80 02 E0 01 80 11  // (......*........
  0DA0: 06 00 00 03 00 40 08 12 06 00 D0 07 58 02 0C 12  // .....@......X...
  0DB0: 06 00 D0 07 F4 01 10 12 06 00 05 0F 27 00 30 12  // ............'.0.
  0DC0: 06 00 68 06 00 00 FF FF D6 09 80 A0 20 E0 2D 10  // ..h......... .-.
  0DD0: 10 60 52 00 00 00 00 00 00 1E 36 7F 01 00 01 00  // .`R.......6.....
  0DE0: 00 00 00 0C 20 03 58 02 80 11 06 00 00 03 00 40  // .... .X........@
  0DF0: 08 12 06 00 D0 07 58 02 0C 12 06 00 D0 07 F4 01  // ......X.........
  0E00: 10 12 06 00 05 0F 27 00 30 12 06 00 68 06 00 00  // ......'.0...h...
  0E10: FF FF A0 0F 20 00 31 58 1C 20 28 80 14 00 00 00  // .... .1X. (.....
  0E20: 00 00 00 1E 36 7F 02 00 02 00 00 00 00 0C 00 04  // ....6...........
  0E30: 58 02 80 11 06 00 00 03 00 40 08 12 06 00 98 08  // X........@......
  0E40: 90 01 0C 12 06 00 98 08 14 00 10 12 06 00 0D 0F  // ................
  0E50: 27 00 30 12 06 00 68 06 00 00 FF FF EC 13 00 E2  // '.0...h.........
  0E60: 40 58 50 20 5D 23 15 04 DC 81 00 00 00 19 36 7F  // @XP ]#........6.
  0E70: 03 00 03 00 00 00 00 0C 00 04 58 02 80 11 06 00  // ..........X.....
  0E80: 3C 03 00 40 08 12 06 00 D0 07 58 02 0C 12 06 00  // <..@......X.....
  0E90: D0 07 F4 01 10 12 06 00 05 0F 27 00 30 12 06 00  // ..........'.0...
  0EA0: 68 06 00 00 FF FF 2D 11 00 A0 40 58 13 20 30 20  // h.....-...@X. 0 
  0EB0: 3A 00 DE 7D 00 00 00 18 36 7F 03 00 03 00 00 00  // :..}....6.......
  0EC0: 00 0C 00 04 58 02 80 11 06 00 3C 03 00 40 08 12  // ....X.....<..@..
  0ED0: 06 00 D0 07 58 02 0C 12 06 00 D0 07 F4 01 10 12  // ....X...........
  0EE0: 06 00 05 0F 27 00 30 12 06 00 68 06 00 00 FF FF  // ....'.0...h.....
  0EF0: B0 13 00 40 41 58 19 20 18 88 31 00 DF 7D 00 00  // ...@AX. ..1..}..
  0F00: 00 18 36 7F 03 00 03 00 00 00 00 0C 00 04 58 02  // ..6...........X.
  0F10: 80 11 06 00 3C 03 00 40 08 12 06 00 D0 07 58 02  // ....<..@......X.
  0F20: 0C 12 06 00 D0 07 F4 01 10 12 06 00 05 0F 27 00  // ..............'.
  0F30: 30 12 06 00 68 06 00 00 FF FF 94 11 00 B0 40 58  // 0...h.........@X
  0F40: 19 20 35 23 45 00 DC 81 00 00 00 19 36 7F 03 00  // . 5#E.......6...
  0F50: 03 00 00 00 00 0C 00 04 58 02 80 11 06 00 3C 03  // ........X.....<.
  0F60: 00 40 08 12 06 00 D0 07 58 02 0C 12 06 00 D0 07  // .@......X.......
  0F70: F4 01 10 12 06 00 05 0F 27 00 30 12 06 00 68 06  // ........'.0...h.
  0F80: 00 00 FF FF C0 12 00 00 41 58 19 20 53 41 45 00  // ........AX. SAE.
  0F90: DC 81 00 00 00 19 36 7F 03 00 03 00 00 00 00 0C  // ......6.........
  0FA0: 00 05 00 03 80 11 06 00 00 03 00 40 08 12 06 00  // ...........@....
  0FB0: D0 07 58 02 0C 12 06 00 D0 07 F4 01 10 12 06 00  // ..X.............
  0FC0: 05 0F 27 00 30 12 06 00 68 06 00 00 FF FF A9 1A  // ..'.0...h.......
  0FD0: 00 A0 50 00 0A 30 30 20 2A 00 00 00 00 00 00 1E  // ..P..00 *.......
  0FE0: 36 7F 03 90 08 00 00 00 00 01 00 00 00 00 80 11  // 6...............
  0FF0: 06 00 3C 03 00 40 08 12 06 00 D0 07 58 02 0C 12  // ..<..@......X...
  1000: 06 00 D0 07 F4 01 10 12 06 00 05 0F 27 00 30 12  // ............'.0.
  1010: 06 00 68 06 00 00 FF FF 7C 2E 90 A0 60 1A 1E 40  // ..h.....|...`..@
  1020: 30 20 36 00 00 00 00 00 00 1E 36 7F 04 90 09 00  // 0 6.......6.....
  1030: 00 00 00 0C 00 00 00 00 80 11 06 00 3C 03 00 40  // ............<..@
  1040: 08 12 06 00 D0 07 58 02 0C 12 06 00 D0 07 F4 01  // ......X.........
  1050: 10 12 06 00 05 0F 27 00 30 12 06 00 68 06 00 00  // ......'.0...h...
  1060: FF FF 28 3C 80 A0 70 B0 23 40 30 20 2A 00 00 00  // ..(<..p.#@0 *...
  1070: 00 00 00 1E 36 7F 05 90 0A 00 00 00 00 0C 00 04  // ....6...........
  1080: 00 03 80 11 06 00 00 03 00 40 08 12 06 00 D0 07  // .........@......
  1090: 58 02 0C 12 06 00 D0 07 F4 01 10 12 06 00 05 0F  // X...............
  10A0: 27 00 30 12 06 00 68 06 00 00 FF FF 64 19 00 40  // '.0...h.....d..@
  10B0: 41 00 26 30 18 88 36 00 00 00 00 00 00 1E 36 7F  // A.&0..6.......6.
  10C0: 03 00 0B 00 00 00 00 0C 00 04 00 03 80 11 06 00  // ................
  10D0: 00 03 00 40 08 12 06 00 D0 07 58 02 0C 12 06 00  // ...@......X.....
  10E0: D0 07 F4 01 10 12 06 00 05 0F 27 00 30 12 06 00  // ..........'.0...
  10F0: 68 06 00 00 FF FF 64 19 00 40 41 00 26 30 18 88  // h.....d..@A.&0..
  1100: 36 00 00 00 00 00 00 1E 36 7F 03 00 0C 00 00 00  // 6.......6.......
  1110: 00 0C 00 04 00 03 80 11 06 00 00 03 00 40 08 12  // .............@..
  1120: 06 00 D0 07 58 02 0C 12 06 00 D0 07 F4 01 10 12  // ....X...........
  1130: 06 00 05 0F 27 00 30 12 06 00 68 06 00 00 FF FF  // ....'.0...h.....
  1140: 64 19 00 40 41 00 26 30 18 88 36 00 00 00 00 00  // d..@A.&0..6.....
  1150: 00 1E 36 7F 03 00 0D 00 00 00 00 0C 00 05 20 03  // ..6........... .
  1160: 80 11 06 00 00 03 00 40 08 12 06 00 D0 07 58 02  // .......@......X.
  1170: 0C 12 06 00 D0 07 F4 01 10 12 06 00 05 0F 27 00  // ..............'.
  1180: 30 12 06 00 68 06 00 00 FF FF EA 1A 00 A0 50 20  // 0...h.........P 
  1190: 17 30 0C 30 43 00 00 00 00 00 00 1E 36 7F 03 90  // .0.0C.......6...
  11A0: 0E 00 00 00 00 0C 00 05 58 02 80 11 06 00 00 03  // ........X.......
  11B0: 00 40 08 12 06 00 D0 07 58 02 0C 12 06 00 D0 07  // .@......X.......
  11C0: F4 01 10 12 06 00 05 0F 27 00 30 12 06 00 68 06  // ........'.0...h.
  11D0: 00 00 FF FF 06 18 00 70 51 58 15 20 38 80 13 00  // .......pQX. 8...
  11E0: 00 00 00 00 00 1E 36 7F 03 00 0F 00 00 00 00 0C  // ......6.........
  11F0: 00 00 00 00 80 11 06 00 3C 03 00 40 08 12 06 00  // ........<..@....
  1200: D0 07 58 02 0C 12 06 00 D0 07 F4 01 10 12 06 00  // ..X.............
  1210: 05 0F 27 00 30 12 06 00 68 06 00 00 FF FF 29 40  // ..'.0...h.....)@
  1220: 00 60 80 00 13 60 10 10 11 00 00 00 00 00 00 1E  // .`...`..........
  1230: 36 7F 03 00 10 00 00 00 00 0C 2B 61 00 06 4E C8  // 6.........+a..N.
  1240: 00 00 58 AA 4E C8 00 00 58 AA 4A E3 00 00 58 AA  // ..X.N...X.J...X.
  1250: 4A 20 4E 00 58 AA 4A 20 4E 00 58 AA 4A 20 4E 00  // J N.X.J N.X.J N.
  1260: 58 AA 4A 20 4E 00 58 AA 4E C8 00 00 58 AA 4E C8  // X.J N.X.N...X.N.
  1270: 00 00 58 AA 4E C8 00 00 58 AA 4E C8 00 00 58 AA  // ..X.N...X.N...X.
  1280: 4E C8 00 00 58 AA 4E C8 00 00 58 AA 4E C8 00 00  // N...X.N...X.N...
  1290: 58 AA 4E C8 00 00 58 AA 4E C8 00 00 58 AA 2C 15  // X.N...X.N...X.,.
  12A0: 00 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  12B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  12C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  12D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  12E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  12F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  13A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  13B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  13C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  13D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  13E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  13F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  14A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  14B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  14C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  14D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  14E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  14F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  15A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  15B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  15C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  15D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  15E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  15F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  16A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  16B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  16C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  16D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  16E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  16F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  17A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  17B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  17C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  17D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  17E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  17F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  18A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  18B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  18C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  18D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  18E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  18F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  19A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  19B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  19C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  19D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  19E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  19F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1BF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1C30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1D30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1DB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1EB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  1FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  2000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  2010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  2020: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 88
[00Ah 0010   6]                       Oem ID : "A_M_I_"
[010h 0016   8]                 Oem Table ID : "OEMHPET "
[018h 0024   4]                 Oem Revision : 09001007
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]            Hardware Block ID : FFFFFFFF

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 88 41 5F 4D 5F 49 5F  // HPET8.....A_M_I_
  0010: 4F 45 4D 48 50 45 54 20 07 10 00 09 4D 53 46 54  // OEMHPET ....MSFT
  0020: 97 00 00 00 FF FF FF FF 00 08 00 00 00 00 D0 FE  // ................
  0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C4
[00Ah 0010   6]                       Oem ID : "A_M_I_"
[010h 0016   8]                 Oem Table ID : "OEMMCFG "
[018h 0024   4]                 Oem Revision : 09001007
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 C4 41 5F 4D 5F 49 5F  // MCFG<.....A_M_I_
  0010: 4F 45 4D 4D 43 46 47 20 07 10 00 09 4D 53 46 54  // OEMMCFG ....MSFT
  0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
  0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


OEMB
----
[000h 0000   4]                    Signature : "OEMB"    
[004h 0004   4]                 Table Length : 00000061
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : ED
[00Ah 0010   6]                       Oem ID : "A_M_I_"
[010h 0016   8]                 Oem Table ID : "AMI_OEM "
[018h 0024   4]                 Oem Revision : 09001007
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


**** OEM-defined ACPI table [OEMB], unknown contents


Raw Table Data: Length 97 (0x61)

  0000: 4F 45 4D 42 61 00 00 00 01 ED 41 5F 4D 5F 49 5F  // OEMBa.....A_M_I_
  0010: 41 4D 49 5F 4F 45 4D 20 07 10 00 09 4D 53 46 54  // AMI_OEM ....MSFT
  0020: 97 00 00 00 0C 00 14 00 00 70 AF 00 00 F0 FF 00  // .........p......
  0030: 00 0D 00 00 00 01 00 00 00 70 AF 00 00 69 4F 00  // .........p...iO.
  0040: 83 D0 FE 0E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0060: 00                                               // .


RSDP
----
[000h 0000   8]                    Signature : "RSD PTR "
[008h 0008   1]                     Checksum : 1F
[009h 0009   6]                       Oem ID : "ACPIAM"
[00Fh 0015   1]                     Revision : 02
[010h 0016   4]                 RSDT Address : AF660000
[014h 0020   4]                       Length : 00000024
[018h 0024   8]                 XSDT Address : 00000000AF660100
[020h 0032   1]            Extended Checksum : C6
[021h 0033   3]                     Reserved : 000000

Raw Table Data: Length 36 (0x24)

  0000: 52 53 44 20 50 54 52 20 1F 41 43 50 49 41 4D 02  // RSD PTR .ACPIAM.
  0010: 00 00 66 AF 24 00 00 00 00 01 66 AF 00 00 00 00  // ..f.$.....f.....
  0020: C6 00 00 00                                      // ....


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 00000048
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DF
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 09001007
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]       ACPI Table Address   0 : AF660200
[028h 0040   4]       ACPI Table Address   1 : AF660390
[02Ch 0044   4]       ACPI Table Address   2 : AF660400
[030h 0048   4]       ACPI Table Address   3 : AF660440
[034h 0052   4]       ACPI Table Address   4 : AF66E040
[038h 0056   4]       ACPI Table Address   5 : AF669E80
[03Ch 0060   4]       ACPI Table Address   6 : AF66E0B0
[040h 0064   4]       ACPI Table Address   7 : AF6708A0
[044h 0068   4]       ACPI Table Address   8 : AF669EC0

Raw Table Data: Length 72 (0x48)

  0000: 52 53 44 54 48 00 00 00 01 DF 5F 41 53 55 53 5F  // RSDTH....._ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 07 10 00 09 4D 53 46 54  // Notebook....MSFT
  0020: 97 00 00 00 00 02 66 AF 90 03 66 AF 00 04 66 AF  // ......f...f...f.
  0030: 40 04 66 AF 40 E0 66 AF 80 9E 66 AF B0 E0 66 AF  // @.f.@.f...f...f.
  0040: A0 08 67 AF C0 9E 66 AF                          // ..g...f.


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A3
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 09001007
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 83 A4 C2 5B \
    5A 18 2A FE 79 59 DB D9 7E EA 3D 26 20 88 CE 6B \
    D0 EA 79 D3 85 2B 95 00 9A C4 55 BF EA 39 A0 8F \
    BE 23 61 59 60 73 C8 2C 5B E5 A8 8A 7F 74 F5 BF \
    CB 00 2D 99 76 AB 94 8C E3 CF 9E 47 28 61 91 B2 \
    B5 F8 C8 DB D9 87 04 8A 48 EB 9B 7F B3 38 0A FB \
    6F DD 86 75 A5 42 49 33 E2 2E 39 BE 64 8E 49 7D \
    78 DD 83 36 62 88 67 02 77 79 AF 3B 2F D4 04 53 \
    F9 0E DA C5 38 F5 4B 7F 9C 69 63 B1 01 00 00 00 \
    B6 00 00 00 00 00 02 00 5F 41 53 55 53 5F 4E 6F \
    74 65 62 6F 6F 6B 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 9E D5 31 E9 0B 0F 73 70 D1 14 24 5D 8E 2C \
    20 5C 93 CF C6 6A EE 30 93 12 AA 53 BA 3B 8F BE \
    76 9A ED AD 91 F3 7E 5E 31 01 F6 A3 B2 E8 28 B5 \
    20 F4 DE 57 92 E4 51 42 0D 94 E3 D8 33 50 8D E5 \
    66 D2 47 94 AA 57 B7 CB C2 9A 6E B1 9D 71 24 AD \
    33 0D 3C A8 26 71 3D B9 14 AA 1F A1 05 1A 8A FB \
    63 E6 DD 7F 98 E2 5B E1 6B 8E 47 E1 F7 18 12 B1 \
    7E 50 B3 71 05 A7 EF 12 9E C7 09 AD 29 46 DD 75 \
    52 E2 

Raw Table Data: Length 374 (0x176)

  0000: 53 4C 49 43 76 01 00 00 01 A3 5F 41 53 55 53 5F  // SLICv....._ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 07 10 00 09 4D 53 46 54  // Notebook....MSFT
  0020: 97 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
  0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
  0040: 83 A4 C2 5B 5A 18 2A FE 79 59 DB D9 7E EA 3D 26  // ...[Z.*.yY..~.=&
  0050: 20 88 CE 6B D0 EA 79 D3 85 2B 95 00 9A C4 55 BF  //  ..k..y..+....U.
  0060: EA 39 A0 8F BE 23 61 59 60 73 C8 2C 5B E5 A8 8A  // .9...#aY`s.,[...
  0070: 7F 74 F5 BF CB 00 2D 99 76 AB 94 8C E3 CF 9E 47  // .t....-.v......G
  0080: 28 61 91 B2 B5 F8 C8 DB D9 87 04 8A 48 EB 9B 7F  // (a..........H...
  0090: B3 38 0A FB 6F DD 86 75 A5 42 49 33 E2 2E 39 BE  // .8..o..u.BI3..9.
  00A0: 64 8E 49 7D 78 DD 83 36 62 88 67 02 77 79 AF 3B  // d.I}x..6b.g.wy.;
  00B0: 2F D4 04 53 F9 0E DA C5 38 F5 4B 7F 9C 69 63 B1  // /..S....8.K..ic.
  00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 5F 41 53 55  // ............_ASU
  00D0: 53 5F 4E 6F 74 65 62 6F 6F 6B 57 49 4E 44 4F 57  // S_NotebookWINDOW
  00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
  00F0: 00 00 00 00 00 00 9E D5 31 E9 0B 0F 73 70 D1 14  // ........1...sp..
  0100: 24 5D 8E 2C 20 5C 93 CF C6 6A EE 30 93 12 AA 53  // $]., \...j.0...S
  0110: BA 3B 8F BE 76 9A ED AD 91 F3 7E 5E 31 01 F6 A3  // .;..v.....~^1...
  0120: B2 E8 28 B5 20 F4 DE 57 92 E4 51 42 0D 94 E3 D8  // ..(. ..W..QB....
  0130: 33 50 8D E5 66 D2 47 94 AA 57 B7 CB C2 9A 6E B1  // 3P..f.G..W....n.
  0140: 9D 71 24 AD 33 0D 3C A8 26 71 3D B9 14 AA 1F A1  // .q$.3.<.&q=.....
  0150: 05 1A 8A FB 63 E6 DD 7F 98 E2 5B E1 6B 8E 47 E1  // ....c.....[.k.G.
  0160: F7 18 12 B1 7E 50 B3 71 05 A7 EF 12 9E C7 09 AD  // ....~P.q........
  0170: 29 46 DD 75 52 E2                                // )F.uR.


SSDT1
-----
DefinitionBlock ("ssdt1.aml", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{

    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x00000000, 
            0xF000EEF3, 
            "CPU1IST ", 
            0x00000000, 
            0xF000EEF3, 
            "CPU0CST ", 
            0xAF670170, 
            0x00000724, 
            "CPU1CST ", 
            0xAF6700E0, 
            0x00000085
        })
        Name (CFGD, 0x01240010)
        Name (NOPS, 0x00000000)
        Name (NCPU, 0x00000004)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\SDTL, 0x00)
    }

    Scope (\_PR.P001)
    {
        Name (HI0, 0x00)
        Name (HC0, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                Index (STS0, 0x00) = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                Index (STS0, 0x00) = 0x0A
                Return (Arg3)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.P001._OSC.CAP0 */
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC0 & 0x09) == 
                    0x09)) && !(SDTL & 0x01)))
                {
                    SDTL |= 0x01
                    OperationRegion (IST0, SystemMemory, DerefOf (Index (SSDT, 0x01)), DerefOf (Index (SSDT, 0x02)))
                    Load (IST0, HI0) /* \_PR_.P001.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (Index (SSDT, 0x07)), DerefOf (Index (SSDT, 0x08)))
                    Load (CST0, HC0) /* \_PR_.P001.HC0_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.P002)
    {
        Name (HI1, 0x00)
        Name (HC1, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS1, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Concatenate (STS1, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS1)
            CreateDWordField (Arg3, 0x04, CAP1)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                Index (STS1, 0x00) = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                Index (STS1, 0x00) = 0x0A
                Return (Arg3)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.P002._OSC.CAP1 */
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC1 & 0x09) == 
                    0x09)) && !(SDTL & 0x10)))
                {
                    SDTL |= 0x10
                    OperationRegion (IST1, SystemMemory, DerefOf (Index (SSDT, 0x04)), DerefOf (Index (SSDT, 0x05)))
                    Load (IST1, HI1) /* \_PR_.P002.HI1_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC1 & 0x18)) && !
                    (SDTL & 0x20)))
                {
                    SDTL |= 0x20
                    OperationRegion (CST1, SystemMemory, DerefOf (Index (SSDT, 0x0A)), DerefOf (Index (SSDT, 0x0B)))
                    Load (CST1, HC1) /* \_PR_.P002.HC1_ */
                }
            }

            Return (Arg3)
        }
    }
}



SSDT2
-----
DefinitionBlock ("ssdt2.aml", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{

    External (_PR_.P001, DeviceObj)
    External (ACPS, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.P001)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0200)))
            {
                If ((CFGD & 0x0200))
                {
                    If (\ACPS)
                    {
                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                0x01, 
                                0x01, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000010, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                0x02, 
                                0x01, 
                                0x01F4
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            0x03, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                0x01, 
                                0x01, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000010, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                0x02, 
                                0x01, 
                                0x01F4
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000050, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x03, 
                                0xA2, 
                                0x64
                            }
                        })
                    }
                }

                If ((CFGD & 0x80))
                {
                    If (\ACPS)
                    {
                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                0x01, 
                                0x01, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000010, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                0x02, 
                                0x01, 
                                0x01F4
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            0x03, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                0x01, 
                                0x01, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000010, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                0x02, 
                                0x01, 
                                0x01F4
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000030, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x03, 
                                0x39, 
                                0x64
                            }
                        })
                    }
                }

                If ((!(CFGD & 0x80) && (CFGD & 0x40)))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x11, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0100)))
            {
                If ((CFGD & 0x80))
                {
                    If (\ACPS)
                    {
                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                0x01, 
                                0x01, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000814, // Address
                                        ,)
                                }, 

                                0x02, 
                                0x01, 
                                0x01F4
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            0x03, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                0x01, 
                                0x01, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000814, // Address
                                        ,)
                                }, 

                                0x02, 
                                0x01, 
                                0x01F4
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000816, // Address
                                        ,)
                                }, 

                                0x03, 
                                0x39, 
                                0x64
                            }
                        })
                    }
                }

                If ((!(CFGD & 0x80) && (CFGD & 0x40)))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000814, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000815, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x11, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000814, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }
                })
            }

            If ((CFGD & 0x0200))
            {
                If (\ACPS)
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000814, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000814, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000818, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xA2, 
                            0x64
                        }
                    })
                }
            }

            If ((CFGD & 0x80))
            {
                If (\ACPS)
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000814, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000814, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000816, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x39, 
                            0x64
                        }
                    })
                }
            }

            If ((!(CFGD & 0x80) && (CFGD & 0x40)))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000814, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x03, 
                        0x11, 
                        0x64
                    }
                })
            }

            If ((CFGD & 0x20))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000814, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01, 
                        0x01F4
                    }
                })
            }

            Return (Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03E8
                }
            })
        }
    }
}



SSDT3
-----
DefinitionBlock ("ssdt3.aml", "SSDT", 1, "PmRef", "Cpu1Cst", 0x00003000)
{

    External (_PR_.P001._CST, IntObj)
    External (_PR_.P002, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.P002)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.P001._CST) /* External reference */
        }
    }
}



XSDT
----
[000h 0000   4]                    Signature : "XSDT"    [Extended System Description Table]
[004h 0004   4]                 Table Length : 0000006C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 25
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 09001007
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]       ACPI Table Address   0 : 00000000AF660290
[02Ch 0044   8]       ACPI Table Address   1 : 00000000AF660390
[034h 0052   8]       ACPI Table Address   2 : 00000000AF660400
[03Ch 0060   8]       ACPI Table Address   3 : 00000000AF660440
[044h 0068   8]       ACPI Table Address   4 : 00000000AF66E040
[04Ch 0076   8]       ACPI Table Address   5 : 00000000AF669E80
[054h 0084   8]       ACPI Table Address   6 : 00000000AF66E0B0
[05Ch 0092   8]       ACPI Table Address   7 : 00000000AF6708A0
[064h 0100   8]       ACPI Table Address   8 : 00000000AF669EC0

Raw Table Data: Length 108 (0x6C)

  0000: 58 53 44 54 6C 00 00 00 01 25 5F 41 53 55 53 5F  // XSDTl....%_ASUS_
  0010: 4E 6F 74 65 62 6F 6F 6B 07 10 00 09 4D 53 46 54  // Notebook....MSFT
  0020: 97 00 00 00 90 02 66 AF 00 00 00 00 90 03 66 AF  // ......f.......f.
  0030: 00 00 00 00 00 04 66 AF 00 00 00 00 40 04 66 AF  // ......f.....@.f.
  0040: 00 00 00 00 40 E0 66 AF 00 00 00 00 80 9E 66 AF  // ....@.f.......f.
  0050: 00 00 00 00 B0 E0 66 AF 00 00 00 00 A0 08 67 AF  // ......f.......g.
  0060: 00 00 00 00 C0 9E 66 AF 00 00 00 00              // ......f.....


