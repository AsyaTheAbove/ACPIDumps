
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  FACS  0x00000040  0x00
 02)  MCFG  0x0000003C  0x01  "_ASUS_"  "NoteBook"  0x06222004  "MSFT"   0x00000097
 03)  APIC  0x000000CC  0x02  "_ASUS_"  "NoteBook"  0x06222004  "MSFT"   0x00010013
 04)  ECDT  0x000000C1  0x01  "_ASUS_"  "NoteBook"  0x06222004  "AMI "   0x00000000
 05)  SLIC  0x00000176  0x01  "_ASUS_"  "Notebook"  0x06222004  "ASUS"   0x00000001
 06)  SSDT  0x00000996  0x01  "PmRef "  "CpuPm   "  0x00003000  "INTL"   0x20091112
 07)  DSDT  0x0000D9E3  0x01  "_ASUS_"  "NoteBook"  0x00000000  "INTL"   0x20091112
 08)  FACS  0x00000040  0x01
 09)  SSDT  0x000002EF  0x01  "SataRe"  "SataTabl"  0x00001000  "INTL"   0x20091112
 10)  FACP  0x000000F4  0x04  "_ASUS_"  "NoteBook"  0x06222004  "MSFT"   0x00010013
 11)  SSDT  0x00000799  0x01  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20091112
 12)  HPET  0x00000038  0x01  "_ASUS_"  "NoteBook"  0x06222004  "AMI."   0x00000003
 13)  SSDT  0x0000073F  0x01  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20091112
 14)  SSDT  0x00000303  0x01  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20091112
 15)  SSDT  0x00000119  0x01  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20091112

Found 15 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 000000CC
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : F7
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "NoteBook"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 01
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 04
[050h 0080   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 05
[058h 0088   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : 06
[060h 0096   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 09
[06Fh 0111   1]                Local Apic ID : 08
[070h 0112   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 0A
[077h 0119   1]                Local Apic ID : 09
[078h 0120   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0B
[07Fh 0127   1]                Local Apic ID : 0A
[080h 0128   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0C
[087h 0135   1]                Local Apic ID : 0B
[088h 0136   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0D
[08Fh 0143   1]                Local Apic ID : 0C
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0E
[097h 0151   1]                Local Apic ID : 0D
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0F
[09Fh 0159   1]                Local Apic ID : 0E
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 10
[0A7h 0167   1]                Local Apic ID : 0F
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 01 [I/O APIC]
[0ADh 0173   1]                       Length : 0C
[0AEh 0174   1]                  I/O Apic ID : 02
[0AFh 0175   1]                     Reserved : 00
[0B0h 0176   4]                      Address : FEC00000
[0B4h 0180   4]                    Interrupt : 00000000

[0B8h 0184   1]                Subtable Type : 02 [Interrupt Source Override]
[0B9h 0185   1]                       Length : 0A
[0BAh 0186   1]                          Bus : 00
[0BBh 0187   1]                       Source : 00
[0BCh 0188   4]                    Interrupt : 00000002
[0C0h 0192   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0C2h 0194   1]                Subtable Type : 02 [Interrupt Source Override]
[0C3h 0195   1]                       Length : 0A
[0C4h 0196   1]                          Bus : 00
[0C5h 0197   1]                       Source : 09
[0C6h 0198   4]                    Interrupt : 00000009
[0CAh 0202   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 204 (0xCC)

    0000: 41 50 49 43 CC 00 00 00 02 F7 5F 41 53 55 53 5F  // APIC......_ASUS_
    0010: 4E 6F 74 65 42 6F 6F 6B 04 20 22 06 4D 53 46 54  // NoteBook. ".MSFT
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 01  // ................
    0040: 01 00 00 00 00 08 04 03 01 00 00 00 00 08 05 04  // ................
    0050: 00 00 00 00 00 08 06 05 00 00 00 00 00 08 07 06  // ................
    0060: 00 00 00 00 00 08 08 07 00 00 00 00 00 08 09 08  // ................
    0070: 00 00 00 00 00 08 0A 09 00 00 00 00 00 08 0B 0A  // ................
    0080: 00 00 00 00 00 08 0C 0B 00 00 00 00 00 08 0D 0C  // ................
    0090: 00 00 00 00 00 08 0E 0D 00 00 00 00 00 08 0F 0E  // ................
    00A0: 00 00 00 00 00 08 10 0F 00 00 00 00 01 0C 02 00  // ................
    00B0: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    00C0: 00 00 02 0A 00 09 09 00 00 00 0D 00              // ............


DSDT
----
DefinitionBlock ("", "DSDT", 1, "_ASUS_", "NoteBook", 0x00000000)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (HNOT, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (PDC4, UnknownObj)
    External (PDC5, UnknownObj)
    External (PDC6, UnknownObj)
    External (PDC7, UnknownObj)

    Name (SS1, 0x01)
    Name (SS2, 0x00)
    Name (SS3, 0x01)
    Name (SS4, 0x01)
    Name (IOST, 0x4400)
    Name (TOPM, 0xAF9FFFFF)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, 0x01)
    Name (MG1B, 0x00000000)
    Name (MG1L, 0x00000000)
    Name (MG2B, 0xAFA00000)
    Name (MG2L, 0x34B0C000)
    Name (SMBS, 0xEFA0)
    Name (SMBL, 0x10)
    Name (PBLK, 0x0410)
    Name (PMBS, 0x0400)
    Name (PMLN, 0x80)
    Name (LVL2, 0x0414)
    Name (LVL3, 0x0415)
    Name (LVL4, 0x0416)
    Name (SMIP, 0xB2)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (PM30, 0x0430)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED1F404)
    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x4000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED18000)
    Name (DMIL, 0x1000)
    Name (IFPB, 0xFED14000)
    Name (IFPL, 0x1000)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x04000000)
    Name (TTTB, 0xFED20000)
    Name (TTTL, 0x00020000)
    Name (ACPH, 0xDE)
    Name (ASSB, 0x00)
    Name (AOTB, 0x00)
    Name (AAXB, 0x00)
    Name (PEHP, 0x00)
    Name (SHPC, 0x01)
    Name (PEPM, 0x00)
    Name (PEER, 0x00)
    Name (PECS, 0x00)
    Name (ITKE, 0x00)
    Name (DSSP, 0x00)
    Name (FHPP, 0x01)
    Name (FMBL, 0x01)
    Name (FDTP, 0x02)
    Name (FUPS, 0x03)
    Name (BSH, 0x00)
    Name (BEL, 0x01)
    Name (BEH, 0x02)
    Name (BRH, 0x03)
    Name (BTF, 0x04)
    Name (BHC, 0x05)
    Name (BYB, 0x06)
    Name (BPH, 0x07)
    Name (BSHS, 0x08)
    Name (BELS, 0x09)
    Name (BRHS, 0x0A)
    Name (BTFS, 0x0B)
    Name (BEHS, 0x0C)
    Name (BPHS, 0x0D)
    Name (BTL, 0x10)
    Name (BSR, 0x14)
    Name (BSC, 0x1B)
    Name (BCC, 0x1C)
    Name (BOF, 0x20)
    Name (BEF, 0x21)
    Name (BLLE, 0x22)
    Name (BLLC, 0x23)
    Name (BLCA, 0x24)
    Name (BLLS, 0x25)
    Name (BLLP, 0x26)
    Name (BLLD, 0x27)
    Name (BHBE, 0x30)
    Name (BHBC, 0x31)
    Name (BHBN, 0x32)
    Name (BHBM, 0x33)
    Name (TRTP, 0x01)
    Name (WDTE, 0x01)
    Name (TRTD, 0x02)
    Name (TRTI, 0x03)
    Name (GCDD, 0x01)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x0C)
    Name (DSLC, 0x0E)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (SOOT, 0x35)
    Name (PDBR, 0x4D)
    Name (MBEC, 0x00)
    OperationRegion (GNVS, SystemMemory, 0xAAF9CE18, 0x01A8)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x25), 
        REVN,   8, 
        Offset (0x28), 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        KSV0,   32, 
        KSV1,   8, 
        Offset (0x67), 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        Offset (0x6E), 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x74), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x78), 
        TPMP,   8, 
        TPME,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        BID,    8, 
        Offset (0xAA), 
        ASLB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        I409,   8, 
        I509,   8, 
        I609,   8, 
        I709,   8, 
        IPCF,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        GSMI,   8, 
        PAVP,   8, 
        Offset (0xE1), 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        Offset (0xEB), 
        DSEN,   8, 
        ECON,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        Offset (0x100), 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        EBAS,   32, 
        CPSP,   32, 
        EECP,   32, 
        EVCP,   32, 
        XBAS,   32, 
        OBS1,   32, 
        OBS2,   32, 
        OBS3,   32, 
        OBS4,   32, 
        OBS5,   32, 
        OBS6,   32, 
        OBS7,   32, 
        OBS8,   32, 
        Offset (0x157), 
        ATMC,   8, 
        PTMC,   8, 
        ATRA,   8, 
        PTRA,   8, 
        PNHM,   32, 
        TBAB,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        ATPC,   8, 
        PTPC,   8, 
        PFLV,   8, 
        BREV,   8, 
        SGMD,   8, 
        SGFL,   8, 
        PWOK,   8, 
        HLRS,   8, 
        DSEL,   8, 
        ESEL,   8, 
        PSEL,   8, 
        PWEN,   8, 
        PRST,   8, 
        MXD1,   32, 
        MXD2,   32, 
        MXD3,   32, 
        MXD4,   32, 
        MXD5,   32, 
        MXD6,   32, 
        MXD7,   32, 
        MXD8,   32, 
        GBAS,   16, 
        Offset (0x19D), 
        ALFP,   8, 
        IMON,   8, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        RSV2,   8, 
        RSV3,   8
    }

    Scope (\_SB)
    {
        Name (PR00, Package (0x24)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKF, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKH, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x01, 
                LNKF, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }
        })
        Name (AR00, Package (0x24)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x01, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x10
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR09, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }
        })
        Name (AR09, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }
        })
        Name (PR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PR01, Package (0x14)
        {
            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKF, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKF, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKF, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKH, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKF, 
                0x00
            }
        })
        Name (AR01, Package (0x14)
        {
            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x17
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x17
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x15
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {1,3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (0x00)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00 ())
                }

                Return (PR00 ())
            }

            OperationRegion (HBUS, PCI_Config, 0x00, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x1100)
            Field (MCHT, ByteAcc, NoLock, Preserve)
            {
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFEB00000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED44FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00005000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((\PELN >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((\PELN >> 0x14) - 0x01)
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                M1MN = (TLUD << 0x14)
                M1LN = ((M1MX - M1MN) + 0x01)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, 0x00, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (((Arg0 == GUID) && NEXP))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Scope (\_SB.PCI0)
            {
                Method (AR00, 0, NotSerialized)
                {
                    Return (\_SB.AR00)
                }

                Method (PR00, 0, NotSerialized)
                {
                    Return (\_SB.PR00)
                }

                Method (AR01, 0, NotSerialized)
                {
                    Return (\_SB.AR01)
                }

                Method (PR01, 0, NotSerialized)
                {
                    Return (\_SB.PR01)
                }

                Method (AR02, 0, NotSerialized)
                {
                    Return (\_SB.AR02)
                }

                Method (PR02, 0, NotSerialized)
                {
                    Return (\_SB.PR02)
                }

                Method (AR04, 0, NotSerialized)
                {
                    Return (\_SB.AR04)
                }

                Method (PR04, 0, NotSerialized)
                {
                    Return (\_SB.PR04)
                }

                Method (AR05, 0, NotSerialized)
                {
                    Return (\_SB.AR05)
                }

                Method (PR05, 0, NotSerialized)
                {
                    Return (\_SB.PR05)
                }

                Method (AR06, 0, NotSerialized)
                {
                    Return (\_SB.AR06)
                }

                Method (PR06, 0, NotSerialized)
                {
                    Return (\_SB.PR06)
                }

                Method (AR07, 0, NotSerialized)
                {
                    Return (\_SB.AR07)
                }

                Method (PR07, 0, NotSerialized)
                {
                    Return (\_SB.PR07)
                }

                Method (AR08, 0, NotSerialized)
                {
                    Return (\_SB.AR08)
                }

                Method (PR08, 0, NotSerialized)
                {
                    Return (\_SB.PR08)
                }

                Method (AR09, 0, NotSerialized)
                {
                    Return (\_SB.AR09)
                }

                Method (PR09, 0, NotSerialized)
                {
                    Return (\_SB.PR09)
                }

                Method (AR0A, 0, NotSerialized)
                {
                    Return (\_SB.AR0A)
                }

                Method (PR0A, 0, NotSerialized)
                {
                    Return (\_SB.PR0A)
                }

                Method (AR0B, 0, NotSerialized)
                {
                    Return (\_SB.AR0B)
                }

                Method (PR0B, 0, NotSerialized)
                {
                    Return (\_SB.PR0B)
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01 ())
                    }

                    Return (PR01 ())
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB)
                {
                    OperationRegion (\_SB.PCI0.LPCB.LPC1, PCI_Config, 0x40, 0xC0)
                    Field (\_SB.PCI0.LPCB.LPC1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x20), 
                        PARC,   8, 
                        PBRC,   8, 
                        PCRC,   8, 
                        PDRC,   8, 
                        Offset (0x28), 
                        PERC,   8, 
                        PFRC,   8, 
                        PGRC,   8, 
                        PHRC,   8
                    }

                    Device (LNKA)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PARC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSA) /* \_SB_.PRSA */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLA, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y0F)
                                    {}
                            })
                            CreateWordField (RTLA, \_SB.LNKA._CRS._Y0F._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PARC & 0x0F))
                            Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PARC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PARC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKB)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PBRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSB) /* \_SB_.PRSB */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLB, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y10)
                                    {}
                            })
                            CreateWordField (RTLB, \_SB.LNKB._CRS._Y10._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PBRC & 0x0F))
                            Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PBRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PBRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKC)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PCRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSC) /* \_SB_.PRSC */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLC, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y11)
                                    {}
                            })
                            CreateWordField (RTLC, \_SB.LNKC._CRS._Y11._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PCRC & 0x0F))
                            Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PCRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PCRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKD)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PDRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSD) /* \_SB_.PRSD */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLD, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y12)
                                    {}
                            })
                            CreateWordField (RTLD, \_SB.LNKD._CRS._Y12._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PDRC & 0x0F))
                            Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PDRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PDRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKE)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PERC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSE) /* \_SB_.PRSE */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLE, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y13)
                                    {}
                            })
                            CreateWordField (RTLE, \_SB.LNKE._CRS._Y13._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PERC & 0x0F))
                            Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PERC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PERC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKF)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PFRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSF) /* \_SB_.PRSF */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLF, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y14)
                                    {}
                            })
                            CreateWordField (RTLF, \_SB.LNKF._CRS._Y14._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PFRC & 0x0F))
                            Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PFRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PFRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKG)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PGRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSG) /* \_SB_.PRSG */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLG, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y15)
                                    {}
                            })
                            CreateWordField (RTLG, \_SB.LNKG._CRS._Y15._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PGRC & 0x0F))
                            Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PGRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PGRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKH)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PHRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSH) /* \_SB_.PRSH */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLH, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y16)
                                    {}
                            })
                            CreateWordField (RTLH, \_SB.LNKH._CRS._Y16._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PHRC & 0x0F))
                            Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PHRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PHRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }
                }

                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0xB0), 
                    RAEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                OperationRegion (PKBS, SystemIO, 0x60, 0x05)
                Field (PKBS, ByteAcc, Lock, Preserve)
                {
                    PKBD,   8, 
                    Offset (0x02), 
                    Offset (0x03), 
                    Offset (0x04), 
                    PKBC,   8
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y17)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        ElseIf (HPAE)
                        {
                            Return (0x0B)
                        }

                        Return (0x00)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y17._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == 0x01))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x164E,             // Range Minimum
                            0x164E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x54,               // Length
                            )
                        IO (Decode16,
                            0x0458,             // Range Minimum
                            0x0458,             // Range Maximum
                            0x01,               // Alignment
                            0x28,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x164E,             // Range Minimum
                            0x164E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x1000,             // Range Minimum
                            0x1000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x54,               // Length
                            )
                        IO (Decode16,
                            0x0458,             // Range Minimum
                            0x0458,             // Range Maximum
                            0x01,               // Alignment
                            0x28,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x164E,             // Range Minimum
                            0x164E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (CWDT)
                {
                    Name (_HID, EisaId ("INT3F0D") /* ACPI Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0454,             // Range Minimum
                            0x0454,             // Range Maximum
                            0x04,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Return (BUF0) /* \_SB_.PCI0.LPCB.CWDT.BUF0 */
                    }
                }

                Scope (\_SB.PCI0.LPCB)
                {
                    Device (EC0)
                    {
                        Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                        })
                        Name (_GPE, 0x1B)  // _GPE: General Purpose Events
                        Name (REGC, 0x00)
                        Method (_INI, 0, NotSerialized)  // _INI: Initialize
                        {
                            If ((\OSFG <= \OSME))
                            {
                                REGC = One
                            }
                        }

                        Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                        {
                            If ((Arg0 == 0x03))
                            {
                                REGC = Arg1
                            }
                        }

                        Method (ECAV, 0, NotSerialized)
                        {
                            Return (REGC) /* \_SB_.PCI0.LPCB.EC0_.REGC */
                        }

                        OperationRegion (PECO, SystemIO, 0x0260, 0x08)
                        Field (PECO, ByteAcc, Lock, Preserve)
                        {
                            HSTS,   8, 
                            HCTL,   8, 
                            HCMD,   8, 
                            HTAR,   8, 
                            HWLR,   8, 
                            HRLR,   8, 
                            HWDR,   8, 
                            HRDR,   8
                        }

                        Method (PECI, 7, Serialized)
                        {
                            While (((\_SB.PCI0.LPCB.EC0.PBSY & 0x02) == 0x02))
                            {
                                If ((Arg6 > 0x1000))
                                {
                                    Return (0x00)
                                }

                                Arg6 += 0x01
                                Sleep (0x0A)
                            }

                            \_SB.PCI0.LPCB.EC0.PBSY &= 0xFD
                            HTAR = Arg0
                            HWLR = Arg1
                            HRLR = Arg2
                            HCMD = Arg3
                            Name (TEMP, 0x00)
                            TEMP = 0x00
                            If ((Arg1 != 0x00))
                            {
                                Switch (ToInteger (HCMD))
                                {
                                    Case (0xF7)
                                    {
                                        TEMP = 0x00
                                        Break
                                    }
                                    Case (0x01)
                                    {
                                        TEMP = 0x00
                                        Break
                                    }
                                    Case (0x02)
                                    {
                                        TEMP = 0x00
                                        Break
                                    }
                                    Case (0xA1)
                                    {
                                        TEMP = (Arg1 - 0x01)
                                        Break
                                    }
                                    Case (0xA2)
                                    {
                                        TEMP = (Arg1 - 0x01)
                                        Break
                                    }
                                    Case (0xB1)
                                    {
                                        TEMP = (Arg1 - 0x01)
                                        Break
                                    }
                                    Case (0xB2)
                                    {
                                        TEMP = (Arg1 - 0x01)
                                        Break
                                    }
                                    Case (0x61)
                                    {
                                        TEMP = (Arg1 - 0x01)
                                        Break
                                    }
                                    Case (0x62)
                                    {
                                        TEMP = (Arg1 - 0x01)
                                        Break
                                    }
                                    Case (0xE1)
                                    {
                                        TEMP = (Arg1 - 0x01)
                                        Break
                                    }
                                    Case (0xE2)
                                    {
                                        TEMP = (Arg1 - 0x01)
                                        Break
                                    }
                                    Case (0xA5)
                                    {
                                        HCTL |= 0x40
                                        TEMP = (Arg1 - 0x02)
                                        Break
                                    }
                                    Case (0xA6)
                                    {
                                        HCTL |= 0x40
                                        TEMP = (Arg1 - 0x02)
                                        Break
                                    }
                                    Case (0xB5)
                                    {
                                        HCTL |= 0x40
                                        TEMP = (Arg1 - 0x02)
                                        Break
                                    }
                                    Case (0xB6)
                                    {
                                        HCTL |= 0x40
                                        TEMP = (Arg1 - 0x02)
                                        Break
                                    }
                                    Case (0x65)
                                    {
                                        HCTL |= 0x40
                                        TEMP = (Arg1 - 0x02)
                                        Break
                                    }
                                    Case (0x66)
                                    {
                                        HCTL |= 0x40
                                        TEMP = (Arg1 - 0x02)
                                        Break
                                    }
                                    Case (0xE5)
                                    {
                                        HCTL |= 0x40
                                        TEMP = (Arg1 - 0x02)
                                        Break
                                    }
                                    Case (0xE6)
                                    {
                                        HCTL |= 0x40
                                        TEMP = (Arg1 - 0x02)
                                        Break
                                    }
                                    Default
                                    {
                                        \_SB.PCI0.LPCB.EC0.PBSY &= 0xFE
                                        Return (0x00)
                                    }

                                }
                            }

                            If ((TEMP > 0x00))
                            {
                                Local0 = 0x00
                                While ((Local0 < TEMP))
                                {
                                    HWDR = DerefOf (Arg4 [Local0])
                                    Local0 += 0x01
                                }
                            }

                            HCTL |= 0x01
                            Name (TIME, 0x5000)
                            Local0 = 0x00
                            While ((Local0 < TIME))
                            {
                                If ((HSTS & 0x80))
                                {
                                    HSTS = 0x80
                                    \_SB.PCI0.LPCB.EC0.PBSY &= 0xFE
                                    Return (0x00)
                                }

                                If ((HSTS & 0x40))
                                {
                                    HSTS = 0x40
                                    \_SB.PCI0.LPCB.EC0.PBSY &= 0xFE
                                    Return (0x00)
                                }

                                If ((HSTS & 0x20))
                                {
                                    HSTS = 0x20
                                    \_SB.PCI0.LPCB.EC0.PBSY &= 0xFE
                                    Return (0x00)
                                }

                                If ((HSTS & 0x08))
                                {
                                    HSTS = 0x08
                                    \_SB.PCI0.LPCB.EC0.PBSY &= 0xFE
                                    Return (0x00)
                                }

                                If ((HSTS & 0x04))
                                {
                                    HSTS = 0x04
                                    \_SB.PCI0.LPCB.EC0.PBSY &= 0xFE
                                    Return (0x00)
                                }

                                If ((HSTS & 0x02))
                                {
                                    HSTS = 0x02
                                    Break
                                }
                            }

                            If ((Local0 == TIME))
                            {
                                \_SB.PCI0.LPCB.EC0.PBSY &= 0xFE
                                Return (0x00)
                            }
                            Else
                            {
                                Local0 = 0x00
                                While ((Local0 < HRLR))
                                {
                                    Local1 = HRDR /* \_SB_.PCI0.LPCB.EC0_.HRDR */
                                    Arg5 [Local0] = Local1
                                    Local0 += 0x01
                                }

                                \_SB.PCI0.LPCB.EC0.PBSY &= 0xFE
                                Return (0x01)
                            }

                            \_SB.PCI0.LPCB.EC0.PBSY &= 0xFE
                        }

                        OperationRegion (ECOR, EmbeddedControl, 0x00, 0xFF)
                        Field (ECOR, ByteAcc, Lock, Preserve)
                        {
                            Offset (0x04), 
                            CMD1,   8, 
                            CDT1,   8, 
                            CDT2,   8, 
                            CDT3,   8, 
                            Offset (0x80), 
                            Offset (0x81), 
                            Offset (0x82), 
                            Offset (0x83), 
                            EB0R,   8, 
                            EB1R,   8, 
                            EPWF,   8, 
                            Offset (0x87), 
                            Offset (0x88), 
                            Offset (0x89), 
                            Offset (0x8A), 
                            HKEN,   1, 
                            Offset (0x93), 
                            TAH0,   16, 
                            TAH1,   16, 
                            TSTP,   8, 
                            Offset (0x9C), 
                            CDT4,   8, 
                            CDT5,   8, 
                            Offset (0xA0), 
                            Offset (0xA1), 
                            Offset (0xA2), 
                            Offset (0xA3), 
                            EACT,   8, 
                            TH1R,   8, 
                            TH1L,   8, 
                            TH0R,   8, 
                            TH0L,   8, 
                            Offset (0xB0), 
                            B0PN,   16, 
                            Offset (0xB4), 
                            Offset (0xB6), 
                            Offset (0xB8), 
                            Offset (0xBA), 
                            Offset (0xBC), 
                            Offset (0xBE), 
                            B0TM,   16, 
                            B0C1,   16, 
                            B0C2,   16, 
                            B0C3,   16, 
                            B0C4,   16, 
                            Offset (0xD0), 
                            B1PN,   16, 
                            Offset (0xD4), 
                            Offset (0xD6), 
                            Offset (0xD8), 
                            Offset (0xDA), 
                            Offset (0xDC), 
                            Offset (0xDE), 
                            B1TM,   16, 
                            B1C1,   16, 
                            B1C2,   16, 
                            B1C3,   16, 
                            B1C4,   16, 
                            Offset (0xF0), 
                            Offset (0xF2), 
                            Offset (0xF4), 
                            B0SN,   16, 
                            Offset (0xF8), 
                            Offset (0xFA), 
                            Offset (0xFC), 
                            B1SN,   16
                        }

                        OperationRegion (SMBX, EmbeddedControl, 0x18, 0x28)
                        Field (SMBX, ByteAcc, NoLock, Preserve)
                        {
                            PRTC,   8, 
                            SSTS,   5, 
                                ,   1, 
                            ALFG,   1, 
                            CDFG,   1, 
                            ADDR,   8, 
                            CMDB,   8, 
                            BDAT,   256, 
                            BCNT,   8, 
                                ,   1, 
                            ALAD,   7, 
                            ALD0,   8, 
                            ALD1,   8
                        }

                        OperationRegion (SMB2, EmbeddedControl, 0x40, 0x28)
                        Field (SMB2, ByteAcc, NoLock, Preserve)
                        {
                            PRT2,   8, 
                            SST2,   5, 
                                ,   1, 
                            ALF2,   1, 
                            CDF2,   1, 
                            ADD2,   8, 
                            CMD2,   8, 
                            BDA2,   256, 
                            BCN2,   8, 
                                ,   1, 
                            ALA2,   7, 
                            ALR0,   8, 
                            ALR1,   8
                        }

                        Field (SMB2, ByteAcc, NoLock, Preserve)
                        {
                            Offset (0x04), 
                            DA20,   8, 
                            DA21,   8
                        }

                        Field (SMBX, ByteAcc, NoLock, Preserve)
                        {
                            Offset (0x04), 
                            DAT0,   8, 
                            DAT1,   8
                        }

                        Field (SMBX, ByteAcc, NoLock, Preserve)
                        {
                            Offset (0x04), 
                            DT2B,   16
                        }

                        OperationRegion (KAID, SystemIO, 0x025D, 0x01)
                        Field (KAID, ByteAcc, NoLock, Preserve)
                        {
                            AEID,   8
                        }

                        OperationRegion (KAIC, SystemIO, 0x025C, 0x01)
                        Field (KAIC, ByteAcc, NoLock, Preserve)
                        {
                            AEIC,   8
                        }

                        Name (HKFG, 0x00)
                        Method (EC0S, 1, NotSerialized)
                        {
                            HKFG = HKEN /* \_SB_.PCI0.LPCB.EC0_.HKEN */
                        }

                        Method (EC0W, 1, NotSerialized)
                        {
                            If ((Arg0 >= 0x04))
                            {
                                HKEN = HKFG /* \_SB_.PCI0.LPCB.EC0_.HKFG */
                            }
                        }

                        OperationRegion (BRAM, SystemIO, 0x025A, 0x02)
                        Field (BRAM, ByteAcc, Lock, Preserve)
                        {
                            BRAI,   8, 
                            BRAD,   8
                        }

                        IndexField (BRAI, BRAD, ByteAcc, NoLock, Preserve)
                        {
                            Offset (0x8F), 
                            PBSY,   8, 
                            EPWS,   8, 
                            EB0S,   8, 
                            EB1S,   8, 
                            EB0T,   8, 
                            EB1T,   8, 
                            Offset (0x98), 
                            ECPU,   8, 
                            ECRT,   8, 
                            EPSV,   8, 
                            Offset (0xA0), 
                            B0VL,   16, 
                            B0RC,   16, 
                            B0FC,   16, 
                            B0MD,   16, 
                            B0ST,   16, 
                            B0CC,   16, 
                            B0DC,   16, 
                            B0DV,   16, 
                            B1VL,   16, 
                            B1RC,   16, 
                            B1FC,   16, 
                            B1MD,   16, 
                            B1ST,   16, 
                            B1CC,   16, 
                            B1DC,   16, 
                            B1DV,   16
                        }
                    }
                }

                Scope (\_SB.PCI0.LPCB.EC0)
                {
                    Mutex (MUEC, 0x00)
                    Mutex (MU4T, 0x00)
                    OperationRegion (KBCP, SystemIO, 0x60, 0x07)
                    Field (KBCP, ByteAcc, Lock, Preserve)
                    {
                        KBCD,   8, 
                        Offset (0x02), 
                        EC62,   8, 
                        Offset (0x04), 
                        KBCC,   8, 
                        Offset (0x06), 
                        EC66,   8
                    }

                    Field (KBCP, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        KBOF,   1, 
                        KBIE,   1, 
                        Offset (0x05), 
                        Offset (0x06), 
                        ECOF,   1, 
                        ECIE,   1, 
                        Offset (0x07)
                    }

                    Method (ECCM, 4, Serialized)
                    {
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                CDT1 = Arg0
                                CDT2 = Arg1
                                CDT3 = Arg2
                                CMD1 = Arg3
                                Local0 = 0x1388
                                While ((Local0-- && CMD1))
                                {
                                    Stall (0x0A)
                                }

                                If (CMD1)
                                {
                                    Local0 = Ones
                                }
                                Else
                                {
                                    Local0 = CDT1 /* \_SB_.PCI0.LPCB.EC0_.CDT1 */
                                }

                                Release (MUEC)
                                Return (Local0)
                            }
                        }

                        Return (Ones)
                    }

                    Method (SPIN, 2, Serialized)
                    {
                        Local0 = Arg0
                        If (Arg1)
                        {
                            Local0 |= 0x20
                        }
                        Else
                        {
                            Local0 |= 0x40
                        }

                        \_SB.PCI0.LPCB.EC0.ECCM (Local0, 0xFF, 0xFF, 0xC5)
                    }

                    Method (RPIN, 1, Serialized)
                    {
                        Local0 = (Arg0 & 0x1F)
                        Return (\_SB.PCI0.LPCB.EC0.ECCM (Local0, 0xFF, 0xFF, 0xC5))
                    }

                    Method (RRAM, 1, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) == 0x00))
                            {
                                Local0 = Arg0
                                Local1 = (Local0 & 0xFF)
                                Local0 >>= 0x08
                                Local0 &= 0xFF
                                CDT3 = Local1
                                CDT2 = Local0
                                CDT1 = 0x80
                                CMD1 = 0xB6
                                Local0 = 0x7F
                                While ((Local0 && CMD1))
                                {
                                    Sleep (0x01)
                                    Local0--
                                }

                                If ((CMD1 == Zero))
                                {
                                    Local0 = CDT1 /* \_SB_.PCI0.LPCB.EC0_.CDT1 */
                                }
                                Else
                                {
                                    Local0 = Ones
                                }

                                Release (MUEC)
                                Return (Local0)
                            }
                        }

                        Return (Ones)
                    }

                    Method (WRAM, 2, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) == 0x00))
                            {
                                Local0 = Arg0
                                Local1 = (Local0 & 0xFF)
                                Local0 >>= 0x08
                                Local0 &= 0xFF
                                CDT3 = Local1
                                CDT2 = Local0
                                CDT1 = 0x81
                                CDT4 = Arg1
                                CMD1 = 0xB6
                                Local0 = 0x7F
                                While ((Local0 && CMD1))
                                {
                                    Sleep (0x01)
                                    Local0--
                                }

                                If ((CMD1 == Zero))
                                {
                                    Local0 = One
                                }
                                Else
                                {
                                    Local0 = Ones
                                }

                                Release (MUEC)
                                Return (Local0)
                            }
                        }

                        Return (Ones)
                    }

                    Method (RFOV, 1, Serialized)
                    {
                        Return (\_SB.PCI0.LPCB.EC0.ECCM (0x83, Arg0, 0xFF, 0xB6))
                    }

                    Method (SBRV, 1, Serialized)
                    {
                        \_SB.PCI0.LPCB.EC0.ECCM (0x86, 0x00, Arg0, 0xB6)
                    }

                    Method (GBRV, 0, Serialized)
                    {
                        Return (\_SB.PCI0.LPCB.EC0.ECCM (0x85, 0x00, 0xFF, 0xB6))
                    }

                    Name (WRQK, 0x02)
                    Name (RDQK, 0x03)
                    Name (SDBT, 0x04)
                    Name (RCBT, 0x05)
                    Name (WRBT, 0x06)
                    Name (RDBT, 0x07)
                    Name (WRWD, 0x08)
                    Name (RDWD, 0x09)
                    Name (WRBL, 0x0A)
                    Name (RDBL, 0x0B)
                    Name (PCLL, 0x0C)
                    Name (GOOD, 0x00)
                    Name (UKER, 0x07)
                    Name (DAER, 0x10)
                    Name (CMDN, 0x12)
                    Name (UKE2, 0x13)
                    Name (DADN, 0x17)
                    Name (SBTO, 0x18)
                    Name (USPT, 0x19)
                    Name (SBBY, 0x1A)
                    Method (SWTC, 1, Serialized)
                    {
                        Local0 = UKER /* \_SB_.PCI0.LPCB.EC0_.UKER */
                        Local1 = 0x03
                        While ((Local0 && Local1))
                        {
                            Local2 = 0x23
                            While (Local2)
                            {
                                If (PRTC)
                                {
                                    Sleep (0x01)
                                    Local2--
                                }
                                Else
                                {
                                    Local2 = Zero
                                    Local0 = SSTS /* \_SB_.PCI0.LPCB.EC0_.SSTS */
                                }
                            }

                            If (Local0)
                            {
                                PRTC = Zero
                                Local1--
                                If (Local1)
                                {
                                    Sleep (0x01)
                                    PRTC = Arg0
                                }
                            }
                        }

                        Return (Local0)
                    }

                    Method (SMBR, 3, Serialized)
                    {
                        Local0 = Package (0x03)
                            {
                                0x07, 
                                0x00, 
                                0x00
                            }
                        If (!ECAV ())
                        {
                            Return (Local0)
                        }

                        If ((Arg0 != RDBL))
                        {
                            If ((Arg0 != RDWD))
                            {
                                If ((Arg0 != RDBT))
                                {
                                    If ((Arg0 != RCBT))
                                    {
                                        If ((Arg0 != RDQK))
                                        {
                                            Return (Local0)
                                        }
                                    }
                                }
                            }
                        }

                        If ((Acquire (MUEC, 0xFFFF) == 0x00))
                        {
                            Local1 = PRTC /* \_SB_.PCI0.LPCB.EC0_.PRTC */
                            Local2 = Zero
                            While ((Local1 != 0x00))
                            {
                                Stall (0x0A)
                                Local2++
                                If ((Local2 > 0x03E8))
                                {
                                    Local0 [0x00] = SBBY /* \_SB_.PCI0.LPCB.EC0_.SBBY */
                                    Local1 = Zero
                                }
                                Else
                                {
                                    Local1 = PRTC /* \_SB_.PCI0.LPCB.EC0_.PRTC */
                                }
                            }

                            If ((Local2 <= 0x03E8))
                            {
                                Local3 = (Arg1 << 0x01)
                                Local3 |= 0x01
                                ADDR = Local3
                                If ((Arg0 != RDQK))
                                {
                                    If ((Arg0 != RCBT))
                                    {
                                        CMDB = Arg2
                                    }
                                }

                                BDAT = 0x00
                                PRTC = Arg0
                                Local0 [0x00] = SWTC (Arg0)
                                If ((DerefOf (Local0 [0x00]) == 0x00))
                                {
                                    If ((Arg0 == RDBL))
                                    {
                                        Local0 [0x01] = BCNT /* \_SB_.PCI0.LPCB.EC0_.BCNT */
                                        Local0 [0x02] = BDAT /* \_SB_.PCI0.LPCB.EC0_.BDAT */
                                    }

                                    If ((Arg0 == RDWD))
                                    {
                                        Local0 [0x01] = 0x02
                                        Local0 [0x02] = DT2B /* \_SB_.PCI0.LPCB.EC0_.DT2B */
                                    }

                                    If ((Arg0 == RDBT))
                                    {
                                        Local0 [0x01] = 0x01
                                        Local0 [0x02] = DAT0 /* \_SB_.PCI0.LPCB.EC0_.DAT0 */
                                    }

                                    If ((Arg0 == RCBT))
                                    {
                                        Local0 [0x01] = 0x01
                                        Local0 [0x02] = DAT0 /* \_SB_.PCI0.LPCB.EC0_.DAT0 */
                                    }
                                }
                            }

                            Release (MUEC)
                        }

                        Return (Local0)
                    }

                    Method (SMBW, 5, Serialized)
                    {
                        Local0 = Package (0x01)
                            {
                                0x07
                            }
                        If (!ECAV ())
                        {
                            Return (Local0)
                        }

                        If ((Arg0 != WRBL))
                        {
                            If ((Arg0 != WRWD))
                            {
                                If ((Arg0 != WRBT))
                                {
                                    If ((Arg0 != SDBT))
                                    {
                                        If ((Arg0 != WRQK))
                                        {
                                            Return (Local0)
                                        }
                                    }
                                }
                            }
                        }

                        If ((Acquire (MUEC, 0xFFFF) == 0x00))
                        {
                            Local1 = PRTC /* \_SB_.PCI0.LPCB.EC0_.PRTC */
                            Local2 = Zero
                            While ((Local1 != 0x00))
                            {
                                Stall (0x0A)
                                Local2++
                                If ((Local2 > 0x03E8))
                                {
                                    Local0 [0x00] = SBBY /* \_SB_.PCI0.LPCB.EC0_.SBBY */
                                    Local1 = Zero
                                }
                                Else
                                {
                                    Local1 = PRTC /* \_SB_.PCI0.LPCB.EC0_.PRTC */
                                }
                            }

                            If ((Local2 <= 0x03E8))
                            {
                                BDAT = 0x00
                                Local3 = (Arg1 << 0x01)
                                ADDR = Local3
                                If ((Arg0 != WRQK))
                                {
                                    If ((Arg0 != SDBT))
                                    {
                                        CMDB = Arg2
                                    }
                                }

                                If ((Arg0 == WRBL))
                                {
                                    BCNT = Arg3
                                    BDAT = Arg4
                                }

                                If ((Arg0 == WRWD))
                                {
                                    DT2B = Arg4
                                }

                                If ((Arg0 == WRBT))
                                {
                                    DAT0 = Arg4
                                }

                                If ((Arg0 == SDBT))
                                {
                                    DAT0 = Arg4
                                }

                                PRTC = Arg0
                                Local0 [0x00] = SWTC (Arg0)
                            }

                            Release (MUEC)
                        }

                        Return (Local0)
                    }

                    Mutex (MUEP, 0x00)
                    Method (RBEP, 1, NotSerialized)
                    {
                        Local1 = 0xFFFF
                        If ((Acquire (MUEP, 0xFFFF) == 0x00))
                        {
                            Local3 = RRAM (0x0620)
                            Local4 = (Local3 & 0x7F)
                            WRAM (0x0620, Local4)
                            Local2 = 0x10
                            Local1 = 0x10
                            While (((Local1 == 0x10) & (Local2 != 0x00)))
                            {
                                SMBW (WRWD, 0x0B, 0x00, 0x02, 0x0635)
                                SMBW (WRWD, 0x0B, 0x00, 0x02, 0x0606)
                                Local0 = SMBR (RDBT, 0x50, Arg0)
                                Local1 = DerefOf (Local0 [0x00])
                                Local2--
                            }

                            WRAM (0x0620, Local3)
                            Local1 <<= 0x08
                            Local1 |= DerefOf (Local0 [0x02])
                            Release (MUEP)
                        }

                        Return (Local1)
                    }

                    Method (WBEP, 2, NotSerialized)
                    {
                        Local1 = 0xFFFF
                        If ((Acquire (MUEP, 0xFFFF) == 0x00))
                        {
                            Local3 = RRAM (0x0620)
                            Local4 = (Local3 & 0x7F)
                            WRAM (0x0620, Local4)
                            Local2 = 0x10
                            Local1 = 0x10
                            While (((Local1 == 0x10) & (Local2 != 0x00)))
                            {
                                SMBW (WRWD, 0x0B, 0x00, 0x02, 0x0635)
                                SMBW (WRWD, 0x0B, 0x00, 0x02, 0x0606)
                                Local0 = SMBW (WRBT, 0x50, Arg0, 0x01, Arg1)
                                Local1 = DerefOf (Local0 [0x00])
                                Local2--
                            }

                            WRAM (0x0620, Local3)
                            Release (MUEP)
                        }

                        Return (Local1)
                    }

                    Method (ECXT, 6, NotSerialized)
                    {
                        Local1 = Package (0x06)
                            {
                                0x10, 
                                0x00, 
                                0x00, 
                                0x00, 
                                0x00, 
                                0x00
                            }
                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) == 0x00))
                            {
                                CDT1 = Arg1
                                CDT2 = Arg2
                                CDT3 = Arg3
                                CDT4 = Arg4
                                CDT5 = Arg5
                                CMD1 = Arg0
                                Local0 = 0x7F
                                While ((Local0 && CMD1))
                                {
                                    Sleep (0x01)
                                    Local0--
                                }

                                If (Local0)
                                {
                                    Local1 [0x00] = 0x00
                                    Local1 [0x01] = CDT1 /* \_SB_.PCI0.LPCB.EC0_.CDT1 */
                                    Local1 [0x02] = CDT2 /* \_SB_.PCI0.LPCB.EC0_.CDT2 */
                                    Local1 [0x03] = CDT3 /* \_SB_.PCI0.LPCB.EC0_.CDT3 */
                                    Local1 [0x04] = CDT4 /* \_SB_.PCI0.LPCB.EC0_.CDT4 */
                                    Local1 [0x05] = CDT5 /* \_SB_.PCI0.LPCB.EC0_.CDT5 */
                                }
                                Else
                                {
                                    Local1 [0x00] = 0x10
                                }

                                Release (MUEC)
                            }
                        }

                        Return (Local1)
                    }

                    Method (ECSB, 6, NotSerialized)
                    {
                        Local1 = Package (0x05)
                            {
                                0x11, 
                                0x00, 
                                0x00, 
                                0x00, 
                                0x00
                            }
                        If ((Arg0 > 0x01))
                        {
                            Return (Local1)
                        }

                        If (ECAV ())
                        {
                            If ((Acquire (MUEC, 0xFFFF) == 0x00))
                            {
                                If ((Arg0 == 0x00))
                                {
                                    ADDR = Arg2
                                    CMDB = Arg3
                                    DAT0 = Arg4
                                    DAT1 = Arg5
                                    PRTC = Arg1
                                }
                                Else
                                {
                                    ADD2 = Arg2
                                    CMD2 = Arg3
                                    DA20 = Arg4
                                    DA21 = Arg5
                                    PRT2 = Arg1
                                }

                                Local0 = 0x7F
                                While (PRTC)
                                {
                                    Sleep (0x01)
                                    Local0--
                                }

                                If (Local0)
                                {
                                    If ((Arg0 == 0x00))
                                    {
                                        Local0 = SSTS /* \_SB_.PCI0.LPCB.EC0_.SSTS */
                                        Local1 [0x01] = DAT0 /* \_SB_.PCI0.LPCB.EC0_.DAT0 */
                                        Local1 [0x02] = DAT1 /* \_SB_.PCI0.LPCB.EC0_.DAT1 */
                                        Local1 [0x03] = BCNT /* \_SB_.PCI0.LPCB.EC0_.BCNT */
                                        Local1 [0x04] = BDAT /* \_SB_.PCI0.LPCB.EC0_.BDAT */
                                    }
                                    Else
                                    {
                                        Local0 = SST2 /* \_SB_.PCI0.LPCB.EC0_.SST2 */
                                        Local1 [0x01] = DA20 /* \_SB_.PCI0.LPCB.EC0_.DA20 */
                                        Local1 [0x02] = DA21 /* \_SB_.PCI0.LPCB.EC0_.DA21 */
                                        Local1 [0x03] = BCN2 /* \_SB_.PCI0.LPCB.EC0_.BCN2 */
                                        Local1 [0x04] = BDA2 /* \_SB_.PCI0.LPCB.EC0_.BDA2 */
                                    }

                                    Local0 &= 0x1F
                                    If (Local0)
                                    {
                                        Local0 += 0x10
                                    }

                                    Local1 [0x00] = Local0
                                }
                                Else
                                {
                                    Local1 [0x00] = 0x10
                                }

                                Release (MUEC)
                            }
                        }

                        Return (Local1)
                    }

                    OperationRegion (ECID, SystemIO, 0x0257, 0x01)
                    Field (ECID, ByteAcc, NoLock, Preserve)
                    {
                        EC4D,   8
                    }

                    OperationRegion (ECIC, SystemIO, 0x0258, 0x01)
                    Field (ECIC, ByteAcc, NoLock, Preserve)
                    {
                        EC4C,   8
                    }

                    Method (WEIE, 0, Serialized)
                    {
                        Local0 = 0xFFFF
                        While (((EC4C & 0x02) == 0x02))
                        {
                            If ((Local0 == 0x00))
                            {
                                Return (Ones)
                            }

                            Local0--
                        }

                        Return (Zero)
                    }

                    Method (WEOF, 0, Serialized)
                    {
                        Local0 = 0xFFFF
                        While (((EC4C & 0x01) != 0x01))
                        {
                            If ((Local0 == 0x00))
                            {
                                Return (Ones)
                            }

                            Local0--
                            Sleep (0x05)
                        }

                        Return (Zero)
                    }

                    Method (WEOE, 0, NotSerialized)
                    {
                        Local0 = 0xFFFF
                        While (((EC4C & 0x01) == 0x01))
                        {
                            If ((Local0 == 0x00))
                            {
                                Return (Ones)
                            }

                            Local0--
                            Sleep (0x05)
                            Local1 = EC4D /* \_SB_.PCI0.LPCB.EC0_.EC4D */
                        }

                        Return (Zero)
                    }

                    Method (ST95, 2, Serialized)
                    {
                        If (ECAV ())
                        {
                            If ((Acquire (MU4T, 0xFFFF) == 0x00))
                            {
                                If ((WEOE () != Zero))
                                {
                                    Release (MU4T)
                                    Return (Ones)
                                }

                                If ((WEIE () != Zero))
                                {
                                    Release (MU4T)
                                    Return (Ones)
                                }

                                EC4C = 0xFF
                                If ((WEIE () != Zero))
                                {
                                    Release (MU4T)
                                    Return (Ones)
                                }

                                EC4C = 0x95
                                If ((WEIE () != Zero))
                                {
                                    Release (MU4T)
                                    Return (Ones)
                                }

                                EC4D = Arg0
                                If ((WEIE () != Zero))
                                {
                                    Release (MU4T)
                                    Return (Ones)
                                }

                                EC4D = Arg1
                                If ((WEIE () != Zero))
                                {
                                    Release (MU4T)
                                    Return (Ones)
                                }

                                If ((Arg0 == 0x00))
                                {
                                    If ((WEOF () != Zero))
                                    {
                                        Release (MU4T)
                                        Return (Ones)
                                    }

                                    Local0 = EC4D /* \_SB_.PCI0.LPCB.EC0_.EC4D */
                                }

                                Release (MU4T)
                                If ((Arg0 == 0x00))
                                {
                                    Return (Local0)
                                }

                                Return (Zero)
                            }
                        }

                        Return (Ones)
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                }

                Device (PS2M)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If ((\_SB.TPID == 0x01))
                        {
                            Return (0x170A2E4F)
                        }
                        ElseIf ((\_SB.TPID == 0x03))
                        {
                            Return (0x01018416)
                        }
                        Else
                        {
                            Return (0x170A2E4F)
                        }
                    }

                    Name (SCID, Package (0x03)
                    {
                        0x000A2E4F, 
                        0x02002E4F, 
                        0x130FD041
                    })
                    Name (ECID, Package (0x04)
                    {
                        0x0E0FD041, 
                        0x030FD041, 
                        0x120FD041, 
                        0x0B0FD041
                    })
                    Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
                    {
                        If ((\_SB.TPID == 0x01))
                        {
                            Return (SCID) /* \_SB_.PCI0.LPCB.PS2M.SCID */
                        }
                        ElseIf ((\_SB.TPID == 0x03))
                        {
                            Return (ECID) /* \_SB_.PCI0.LPCB.PS2M.ECID */
                        }
                        Else
                        {
                            Return (SCID) /* \_SB_.PCI0.LPCB.PS2M.SCID */
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (0x01 << 0x0E)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }

                        Return (0x00)
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = (0x01 << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (CRS1) /* \_SB_.PCI0.LPCB.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.LPCB.PS2M.CRS2 */
                        }
                    }
                }

                Scope (\_SB)
                {
                    Name (ATKP, Zero)
                    Name (AITM, 0x00)
                    Name (PLMD, 0x00)
                    Name (MUTX, 0x01)
                    Name (LEDS, 0x00)
                    Device (ATKD)
                    {
                        Name (_HID, "pnp0c14")  // _HID: Hardware ID
                        Name (_UID, "ATK")  // _UID: Unique ID
                        Name (ATKQ, Package (0x10)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Name (AQHI, Zero)
                        Name (AQTI, 0x0F)
                        Name (AQNO, Zero)
                        Method (IANQ, 1, Serialized)
                        {
                            If ((AQNO >= 0x10))
                            {
                                Local0 = 0x64
                                While ((Local0 && (AQNO >= 0x10)))
                                {
                                    Local0--
                                    Sleep (0x0A)
                                }

                                If ((Local0 && (AQNO >= 0x10)))
                                {
                                    Return (Zero)
                                }
                            }

                            AQTI++
                            AQTI &= 0x0F
                            ATKQ [AQTI] = Arg0
                            AQNO++
                            Return (One)
                        }

                        Method (GANQ, 0, Serialized)
                        {
                            If (AQNO)
                            {
                                AQNO--
                                Local0 = DerefOf (ATKQ [AQHI])
                                AQHI++
                                AQHI &= 0x0F
                                Return (Local0)
                            }

                            Return (Ones)
                        }

                        Method (IANE, 1, Serialized)
                        {
                            IANQ (Arg0)
                            Notify (ATKD, 0xFF) // Hardware-Specific
                        }

                        Name (_WDG, Buffer (0x28)
                        {
                            /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                            /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                            /* 0010 */  0x4E, 0x42, 0x01, 0x02, 0x35, 0xBB, 0x3C, 0x0B,  // NB..5.<.
                            /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  // ...E..LZ
                            /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08   // m.].....
                        })
                        Method (WMNB, 3, Serialized)
                        {
                            CreateDWordField (Arg2, 0x00, IIA0)
                            CreateDWordField (Arg2, 0x04, IIA1)
                            Local0 = (Arg1 & 0xFFFFFFFF)
                            Switch (Local0)
                            {
                                Case (0x54494E49)
                                {
                                    INIT (IIA0)
                                    Return (0x01)
                                }
                                Case (0x53545342)
                                {
                                    Return (BSTS ())
                                }
                                Case (0x4E554653)
                                {
                                    Return (SFUN ())
                                }
                                Case (0x494E424B)
                                {
                                    Return (KBNI ())
                                }
                                Case (0x5256534F)
                                {
                                    OSVR (IIA0)
                                    Return (0x00)
                                }
                                Case (0x53545344)
                                {
                                    If ((IIA0 == 0x00010002))
                                    {
                                        Return (0x00050002)
                                    }

                                    If ((IIA0 == 0x00020011))
                                    {
                                        Return ((GALE (0x01) | 0x00050000))
                                    }

                                    If ((IIA0 == 0x00020012))
                                    {
                                        Return ((GALE (0x02) | 0x00050000))
                                    }

                                    If ((IIA0 == 0x00020013))
                                    {
                                        Return ((GALE (0x04) | 0x00050000))
                                    }

                                    If ((IIA0 == 0x00040015))
                                    {
                                        Return ((GALE (0x08) | 0x00050000))
                                    }

                                    If ((IIA0 == 0x00020014))
                                    {
                                        Return ((GALE (0x10) | 0x00050000))
                                    }

                                    If ((IIA0 == 0x00020015))
                                    {
                                        Return ((GALE (0x20) | 0x00050000))
                                    }

                                    If ((IIA0 == 0x00020016))
                                    {
                                        Return ((GALE (0x40) | 0x00050000))
                                    }

                                    If ((IIA0 == 0x00110011))
                                    {
                                        Return ((TMPR () & 0xFFFF))
                                    }

                                    If ((IIA0 == 0x00110012))
                                    {
                                        Local0 = TMPR ()
                                        Local1 = Local0
                                        Local0 = ((Local0 & 0xF0000000) >> 0x1C)
                                        Local1 = ((Local1 & 0x0F000000) >> 0x18)
                                        Local1 <<= 0x08
                                        Return ((Local0 + Local1))
                                    }

                                    If ((IIA0 == 0x00050012))
                                    {
                                        Local0 = (0x0B - 0x01)
                                        Local0 <<= 0x08
                                        Return ((GPLV () + Local0))
                                    }

                                    If ((IIA0 == 0x00010011))
                                    {
                                        If (\_SB.WLSS)
                                        {
                                            Return ((\_SB.WRST + 0x00030000))
                                        }
                                    }

                                    If ((IIA0 == 0x00010013))
                                    {
                                        If (\_SB.BLTS)
                                        {
                                            Return ((\_SB.BRST + 0x00050000))
                                        }
                                    }

                                    If ((IIA0 == 0x00010001))
                                    {
                                        Return (0x00050001)
                                    }

                                    If ((IIA0 == 0x00120012))
                                    {
                                        Return (PSTC (0x00))
                                    }

                                    Return (0x02)
                                }
                                Case (0x53564544)
                                {
                                    If ((IIA0 == 0x00020011))
                                    {
                                        Return (SALE ((IIA1 + 0x02)))
                                    }

                                    If ((IIA0 == 0x00020012))
                                    {
                                        Return (SALE ((IIA1 + 0x04)))
                                    }

                                    If ((IIA0 == 0x00020013))
                                    {
                                        Return (SALE ((IIA1 + 0x08)))
                                    }

                                    If ((IIA0 == 0x00040015))
                                    {
                                        Return (SALE ((IIA1 + 0x10)))
                                    }

                                    If ((IIA0 == 0x00020014))
                                    {
                                        Return (SALE ((IIA1 + 0x20)))
                                    }

                                    If ((IIA0 == 0x00020015))
                                    {
                                        Return (SALE ((IIA1 + 0x40)))
                                    }

                                    If ((IIA0 == 0x00020016))
                                    {
                                        Return (SALE ((IIA1 + 0x80)))
                                    }

                                    If ((IIA0 == 0x00020018))
                                    {
                                        If ((IIA1 == 0x01))
                                        {
                                            \_SB.EGC2 = 0x01
                                            Return (0x01)
                                        }

                                        If ((IIA1 == 0x02))
                                        {
                                            \_SB.EGC2 = 0x02
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    If ((IIA0 == 0x00050012))
                                    {
                                        SPLV (IIA1)
                                        Return (0x01)
                                    }

                                    If ((IIA0 == 0x00010002))
                                    {
                                        OWGD (IIA1)
                                        Return (0x01)
                                    }

                                    If ((IIA0 == 0x00010012))
                                    {
                                        WLED (IIA1)
                                        Return (0x01)
                                    }

                                    If ((IIA0 == 0x00010013))
                                    {
                                        BLED (IIA1)
                                        Return (0x01)
                                    }

                                    If ((IIA0 == 0x00010003))
                                    {
                                        Return (CWAP (IIA1))
                                    }

                                    If ((IIA0 == 0x00120012))
                                    {
                                        Return (PSTC ((IIA1 + 0x01)))
                                    }

                                    Return (0x00)
                                }
                                Case (0x48534C46)
                                {
                                    FLSH (IIA0)
                                    Return (0x01)
                                }
                                Case (0x494E4946)
                                {
                                    Return (FINI (IIA0))
                                }
                                Case (0x53524546)
                                {
                                    Return (FERS (IIA0))
                                }
                                Case (0x49525746)
                                {
                                    Return (FWRI (IIA0))
                                }
                                Case (0x50525746)
                                {
                                    Return (FWRP ())
                                }
                                Case (0x52534345)
                                {
                                    Return (ECSR (IIA0))
                                }
                                Case (0x43534C46)
                                {
                                    Return (FLSC (IIA0))
                                }
                                Case (0x43455246)
                                {
                                    Return (FREC (IIA0))
                                }
                                Case (0x50534453)
                                {
                                    SDSP (IIA0)
                                    Return (0x01)
                                }
                                Case (0x50534447)
                                {
                                    Return (GDSP (IIA0))
                                }
                                Case (0x44495047)
                                {
                                    Return (GPID ())
                                }
                                Case (0x44434C47)
                                {
                                    Return (GLCD ())
                                }
                                Case (0x49564E41)
                                {
                                    Return (ANVI (IIA0))
                                }
                                Case (0x46494243)
                                {
                                    Return (CBIF (IIA0))
                                }
                                Case (0x4E464741)
                                {
                                    Return (AGFN (IIA0))
                                }
                                Case (0x46494643)
                                {
                                    CFIF (IIA0)
                                    Return (0x01)
                                }
                                Case (0x44495046)
                                {
                                    Return (FPID ())
                                }
                                Case (0x59454B48)
                                {
                                    HKEY ()
                                    Return (0x01)
                                }
                                Case (0x5446424B)
                                {
                                    KBFT (IIA0)
                                    Return (0x01)
                                }
                                Default
                                {
                                    Return (0xFFFFFFFE)
                                }

                            }
                        }

                        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                        {
                            If ((Arg0 == 0xFF))
                            {
                                Return (GANQ ())
                            }

                            Return (Ones)
                        }

                        Method (INIT, 1, NotSerialized)
                        {
                            ATKP = One
                            Return (\MNAM)
                        }

                        Method (BSTS, 0, NotSerialized)
                        {
                            Local0 = 0x00
                            If (\_SB.ACPS)
                            {
                                Local0 &= 0xFF7F
                            }
                            Else
                            {
                                Local0 = \_SB.PCI0.LPCB.EC0.RRAM (0x04FE)
                                If (((Local0 & 0xFF) == 0x34))
                                {
                                    Local0 = 0x05
                                }
                                Else
                                {
                                    Local0 &= 0x037F
                                }
                            }

                            Return (Local0)
                        }

                        Method (KBNI, 0, NotSerialized)
                        {
                            Return (One)
                        }

                        Method (TMPR, 0, NotSerialized)
                        {
                            Local0 = \_TZ.KELV (\_TZ.RTMP ())
                            Local0 |= (\_TZ.RFAN () << 0x10)
                            Local0 |= (\GTHS () << 0x18)
                            Local3 = \RFSE ()
                            Local3 <<= 0x1C
                            Local0 += Local3
                            Return (Local0)
                        }

                        Method (SFUN, 0, NotSerialized)
                        {
                            Return (0x001A0AF7)
                        }

                        Method (SDSP, 1, NotSerialized)
                        {
                            SWHG (Arg0)
                        }

                        Method (GDSP, 1, NotSerialized)
                        {
                            If (\NATK ())
                            {
                                If ((Arg0 == 0x80))
                                {
                                    Return (0x01)
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Return (\CDVG ())
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }

                            Return (0x00)
                        }

                        Method (RSTS, 0, NotSerialized)
                        {
                            Local0 = 0x00
                            If (\_SB.BRST)
                            {
                                Local0 |= 0x02
                            }

                            If (\_SB.WRST)
                            {
                                Local0 |= 0x01
                            }

                            If (\_SB.WMST)
                            {
                                Local0 |= 0x08
                            }

                            Return (Local0)
                        }

                        Method (HWRS, 0, NotSerialized)
                        {
                            Return (\OHWR ())
                        }

                        Method (WLED, 1, NotSerialized)
                        {
                            \OWLD (Arg0)
                        }

                        Method (BLED, 1, NotSerialized)
                        {
                            \OBTD (Arg0)
                        }

                        Method (WMXC, 1, NotSerialized)
                        {
                            \OWMD (Arg0)
                        }

                        Name (WAPF, 0x00)
                        Method (CWAP, 1, NotSerialized)
                        {
                            WAPF |= Arg0 /* \_SB_.ATKD.WAPF */
                            Return (0x01)
                        }

                        Method (GALE, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x04))
                            {
                                If ((LEDS && 0x04))
                                {
                                    Return (0x01)
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }

                            If ((Arg0 == 0x08))
                            {
                                If ((LEDS && 0x08))
                                {
                                    Return (0x01)
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }

                            If ((Arg0 == 0x10))
                            {
                                If ((LEDS && 0x10))
                                {
                                    Return (0x01)
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }

                            Return (0x02)
                        }

                        Method (SALE, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x10)){}
                            If ((Arg0 == 0x11)){}
                            Return (One)
                        }

                        Method (GPID, 0, NotSerialized)
                        {
                            Return (LCDR) /* \_SB_.LCDR */
                        }

                        Method (GLCD, 0, NotSerialized)
                        {
                            Return (LCDV) /* \_SB_.LCDV */
                        }

                        Method (KBFT, 1, NotSerialized)
                        {
                            \_SB.PCI0.LPCB.EC0.HKEN = Arg0
                            Return (0x00)
                        }

                        Method (HKEY, 0, NotSerialized)
                        {
                            Local0 = \_SB.PCI0.LPCB.EC0.CDT1
                        }

                        Method (GPLV, 0, NotSerialized)
                        {
                            Return (LBTN) /* \_SB_.LBTN */
                        }

                        Method (SPLV, 1, NotSerialized)
                        {
                            LBTN = Arg0
                            STBR ()
                        }

                        Method (SPBL, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x80))
                            {
                                Return (0x01)
                            }

                            If ((Arg0 == 0x0100))
                            {
                                Local0 = 0x0B
                                Local0--
                                Return (Local0)
                            }
                        }

                        Method (ANVI, 1, Serialized)
                        {
                            If ((Acquire (MPAR, 0xFFFF) == 0x00))
                            {
                                ALPR = Arg0
                                ISMI (0xA3)
                                Local0 = ALPR /* \_SB_.ALPR */
                                Release (MPAR)
                                Return (Local0)
                            }
                        }

                        Method (CBIF, 1, Serialized)
                        {
                            If ((Acquire (MPAR, 0xFFFF) == 0x00))
                            {
                                ALPR = 0x03
                                TMPB = Arg0
                                ISMI (0xA3)
                                Release (MPAR)
                            }

                            Return (0x01)
                        }

                        Method (CFIF, 1, Serialized)
                        {
                            If ((Acquire (MPAR, 0xFFFF) == 0x00))
                            {
                                PAR0 = Arg0
                                ISMI (0x9B)
                                Release (MPAR)
                            }

                            Return (0x01)
                        }

                        Method (FPID, 0, NotSerialized)
                        {
                            Return (0x0115)
                        }

                        Method (PSTC, 1, Serialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                Return (\_SB.PSTN)
                            }

                            If (\_SB.ACPS)
                            {
                                Local0 = (\_SB.PSTN >> 0x08)
                            }
                            Else
                            {
                                Local0 = (\_SB.PSTN & 0xFF)
                            }

                            If ((Arg0 > Local0))
                            {
                                Return (Ones)
                            }

                            \_SB.SLMT = Arg0
                            \PNOT ()
                            Return (0x00)
                        }

                        Method (OSVR, 1, NotSerialized)
                        {
                            \OSFG = Arg0
                            \_SB.COSF = Arg0
                        }
                    }
                }

                Scope (\_SB.PCI0)
                {
                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, 0x00)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            \_SB.PCI0
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (\_SB.DCPS)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                        {
                            If ((\_SB.DCPS == 0x00))
                            {
                                Return (NBIF) /* \_SB_.PCI0.NBIF */
                            }

                            CBIF (0x00)
                            Return (PBIF) /* \_SB_.PCI0.PBIF */
                        }

                        Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                        {
                            If ((0x10 & _STA ()))
                            {
                                CBST (0x00)
                            }

                            Return (PBST) /* \_SB_.PCI0.PBST */
                        }
                    }

                    Name (NBIF, Package (0x0D)
                    {
                        0x01, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0x01, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        " ", 
                        " ", 
                        " ", 
                        " "
                    })
                    Name (PBIF, Package (0x0D)
                    {
                        0x01, 
                        0x10CC, 
                        0x1068, 
                        0x01, 
                        0x36D0, 
                        0x01A4, 
                        0xD2, 
                        0x1C, 
                        0x050A, 
                        "[MKF_BASEBOARD_ID]", 
                        " ", 
                        "LION", 
                        "[MKF_CUSTOMER]"
                    })
                    Name (BATF, Buffer (0x02){})
                    CreateWordField (BATF, 0x00, DATW)
                    Method (CBIF, 1, Serialized)
                    {
                        Local0 = GDCP (Arg0)
                        If ((Local0 != Ones))
                        {
                            PBIF [0x01] = Local0
                        }

                        Local0 = GFCC (Arg0)
                        If ((Local0 != Ones))
                        {
                            PBIF [0x02] = Local0
                            Local1 = (Local0 * 0x0A)
                            Divide (Local1, 0x64, Local2, Local1)
                            PBIF [0x05] = Local1
                            Local2 = (Local0 * 0x01)
                            Divide (Local2, 0x64, Local3, Local2)
                            PBIF [0x06] = Local2
                            Local2 = (Local1 - Local2)
                            Divide (Local2, 0x64, Local3, Local2)
                            PBIF [0x07] = Local2
                            Local1 = (Local0 - Local1)
                            Divide (Local1, 0x64, Local2, Local1)
                            PBIF [0x08] = Local1
                        }

                        Local0 = GBDV (Arg0)
                        If ((Local0 != Ones))
                        {
                            PBIF [0x04] = Local0
                        }
                    }

                    Name (PBST, Package (0x04)
                    {
                        0x00, 
                        0x8000, 
                        0x8000, 
                        0x36B0
                    })
                    Method (CBST, 1, Serialized)
                    {
                        DATW = GBCR (Arg0)
                        If ((DATW != Ones))
                        {
                            If ((DATW & 0x8000))
                            {
                                DATW--
                                DATW = ~DATW /* \_SB_.PCI0.DATW */
                            }

                            PBST [0x01] = DATW /* \_SB_.PCI0.DATW */
                        }

                        Local0 = 0x00
                        If (\_SB.ACPS)
                        {
                            Local0 |= CHGS (Arg0)
                        }
                        Else
                        {
                            Local0 = 0x01
                        }

                        PBST [0x00] = Local0
                        Local0 = GBRC (Arg0)
                        If ((Local0 != Ones))
                        {
                            PBST [0x02] = Local0
                        }

                        Local0 = GBVT (Arg0)
                        If ((Local0 != Ones))
                        {
                            PBST [0x03] = Local0
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (AC0)
                        {
                            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                            {
                                Return (\_SB.ACPS)
                            }

                            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                            {
                                \_SB.PCI0
                            })
                        }
                    }
                }

                Scope (\_TZ)
                {
                    Name (LTMP, 0x3C)
                    Name (STMP, 0x3C)
                    Name (FANS, 0xFF)
                    Name (TCRT, 0x78)
                    Name (TPSV, 0x5A)
                    Name (TSP, 0x1E)
                    Name (TC1, 0x02)
                    Name (TC2, 0x0A)
                    Name (CNT, 0x00)
                    Method (KELV, 1, NotSerialized)
                    {
                        Local0 = (Arg0 & 0xFF)
                        Local0 *= 0x0A
                        Local0 += 0x0AAC
                        Return (Local0)
                    }

                    Method (RFAN, 0, Serialized)
                    {
                        Return (GFAN ())
                    }

                    Method (RTMP, 0, Serialized)
                    {
                        Return (GTMP ())
                    }

                    Method (RLTM, 0, Serialized)
                    {
                        Return (GLTM ())
                    }

                    ThermalZone (TZ00)
                    {
                        Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
                        {
                            Return (KELV (GCRT ()))
                        }

                        Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
                        {
                            Local1 = 0x05
                            While (Local1)
                            {
                                Local0 = RTMP ()
                                If ((Local0 > GCRT ()))
                                {
                                    Local1--
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }

                            Return (KELV (Local0))
                        }

                        Method (_PSL, 0, Serialized)  // _PSL: Passive List
                        {
                            If ((\_SB.CPUN >= 0x02))
                            {
                                Return (Package (0x02)
                                {
                                    \_PR.CPU0, 
                                    \_PR.CPU1
                                })
                            }

                            Return (Package (0x01)
                            {
                                \_PR.CPU0
                            })
                        }

                        Method (_TSP, 0, NotSerialized)  // _TSP: Thermal Sampling Period
                        {
                            Local0 = (TSP * 0x01)
                            Return (Local0)
                        }

                        Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
                        {
                            Return (KELV (GPSV ()))
                        }

                        Method (_TC1, 0, NotSerialized)  // _TC1: Thermal Constant 1
                        {
                            Return (TC1) /* \_TZ_.TC1_ */
                        }

                        Method (_TC2, 0, NotSerialized)  // _TC2: Thermal Constant 2
                        {
                            Return (TC2) /* \_TZ_.TC2_ */
                        }
                    }
                }

                Scope (\_SB)
                {
                    Device (LID)
                    {
                        Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                        Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                        {
                            Local0 = One
                            Local0 = \GLID ()
                            Return (Local0)
                        }
                    }
                }

                Scope (\_SB.PCI0.LPCB.EC0)
                {
                    Method (_Q83, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \TGLD ()
                        Notify (\_SB.LID, 0x80) // Status Change
                    }
                }

                Scope (\_SB)
                {
                    Device (SLPB)
                    {
                        Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
                    }
                }
            }

            Device (SBUS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
                Field (SMBP, DWordAcc, NoLock, Preserve)
                {
                        ,   2, 
                    I2CE,   1
                }

                OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
                Field (SMPB, DWordAcc, NoLock, Preserve)
                {
                        ,   5, 
                    SBAR,   11
                }

                OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
                Field (SMBI, ByteAcc, NoLock, Preserve)
                {
                    HSTS,   8, 
                    Offset (0x02), 
                    HCON,   8, 
                    HCOM,   8, 
                    TXSA,   8, 
                    DAT0,   8, 
                    DAT1,   8, 
                    HBDR,   8, 
                    PECR,   8, 
                    RXSA,   8, 
                    SDAT,   16
                }

                Method (SSXB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SRXB, 1, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCON = 0x44
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SWRB, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = Arg2
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SRDB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SWRW, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT1 = (Arg2 & 0xFF)
                    DAT0 = ((Arg2 >> 0x08) & 0xFF)
                    HCON = 0x4C
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SRDW, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCOM = Arg1
                    HCON = 0x4C
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (((DAT0 << 0x08) | DAT1))
                    }

                    Return (0xFFFFFFFF)
                }

                Method (SBLW, 4, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = Arg3
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = SizeOf (Arg2)
                    Local1 = 0x00
                    HBDR = DerefOf (Arg2 [0x00])
                    HCON = 0x54
                    While ((SizeOf (Arg2) > Local1))
                    {
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (0x00)
                        }

                        HSTS = 0x80
                        Local1++
                        If ((SizeOf (Arg2) > Local1))
                        {
                            HBDR = DerefOf (Arg2 [Local1])
                        }
                    }

                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SBLR, 3, Serialized)
                {
                    Name (TBUF, Buffer (0x0100){})
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = Arg2
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCOM = Arg1
                    HCON = 0x54
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (0x00)
                    }

                    TBUF [0x00] = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                    HSTS = 0x80
                    Local1 = 0x01
                    While ((Local1 < DerefOf (TBUF [0x00])))
                    {
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (0x00)
                        }

                        TBUF [Local1] = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                        HSTS = 0x80
                        Local1++
                    }

                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                    }

                    Return (0x00)
                }

                Method (STRT, 0, Serialized)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        If ((HSTS & 0x40))
                        {
                            Local0--
                            Sleep (0x01)
                            If ((Local0 == 0x00))
                            {
                                Return (0x01)
                            }
                        }
                        Else
                        {
                            Local0 = 0x00
                        }
                    }

                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & 0x01))
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == 0x00))
                            {
                                KILL ()
                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Return (0x01)
                }

                Method (COMP, 0, Serialized)
                {
                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & 0x02))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == 0x00))
                            {
                                KILL ()
                            }
                        }
                    }

                    Return (0x00)
                }

                Method (KILL, 0, Serialized)
                {
                    HCON |= 0x02
                    HSTS |= 0xFF
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (PWKE, PCI_Config, 0x62, 0x04)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                        ,   1, 
                    PWUC,   8
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PWUC = Ones
                    }
                    Else
                    {
                        PWUC = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x03))
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x03, 0x03))
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x03))
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0C, 0x03))
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x001D0004)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x03))
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                OperationRegion (PWKE, PCI_Config, 0x62, 0x04)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                        ,   1, 
                    PWUC,   6
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PWUC = Ones
                    }
                    Else
                    {
                        PWUC = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x03))
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x001A0001)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x05, 0x03))
                }
            }

            Device (USB6)
            {
                Name (_ADR, 0x001A0002)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x20, 0x03))
                }
            }

            Device (USB7)
            {
                Name (_ADR, 0x001A0003)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x25, 0x03))
                }
            }

            Device (HDEF)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
                Field (HDAR, WordAcc, NoLock, Preserve)
                {
                    DCKA,   1, 
                    Offset (0x01), 
                    DCKM,   1, 
                        ,   6, 
                    DCKS,   1, 
                    Offset (0x08), 
                        ,   15, 
                    PMES,   1
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    PMPD,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = 0x01
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }

                    Return (PR04 ())
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    PMPD,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = 0x01
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }

                    Return (PR05 ())
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    PMPD,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = 0x01
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }

                    Return (PR06 ())
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    PMPD,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = 0x01
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }

                    Return (PR07 ())
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    PMPD,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = 0x01
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08 ())
                    }

                    Return (PR08 ())
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    PMPD,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = 0x01
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09 ())
                    }

                    Return (PR09 ())
                }

                Device (GLAN)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    PMPD,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = 0x01
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E) /* \_SB_.AR0E */
                    }

                    Return (PR0E) /* \_SB_.PR0E */
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                    Offset (0x11), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    PMPD,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMSX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMSX = 0x01
                            If (PMSX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        Notify (PXSX, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F) /* \_SB_.AR0F */
                    }

                    Return (PR0F) /* \_SB_.PR0F */
                }
            }

            Device (GLAN)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }
            }

            Device (PEG1)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A ())
                    }

                    Return (PR0A ())
                }
            }

            Device (PEG2)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B ())
                    }

                    Return (PR0B ())
                }
            }

            Device (PEG3)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PR0C) /* \_SB_.PR0C */
                }
            }

            Device (B0D4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (PEGR)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02 ())
                    }

                    Return (PR02 ())
                }

                Device (PEGP)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }

                Device (GFX0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (VSID, PCI_Config, 0x00, 0x04)
                Field (VSID, ByteAcc, NoLock, Preserve)
                {
                    REG0,   32
                }

                Name (BLAC, Package (0x0B){})
                Scope (\_SB.PCI0)
                {
                    OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                    Field (MCHP, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x60), 
                        TASM,   10, 
                        Offset (0x62)
                    }
                }

                OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
                Field (IGDP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x12), 
                        ,   1, 
                    GIVD,   1, 
                        ,   2, 
                    GUMA,   3, 
                    Offset (0x14), 
                        ,   4, 
                    GMFN,   1, 
                    Offset (0x18), 
                    Offset (0xA4), 
                    ASLE,   8, 
                    Offset (0xA8), 
                    GSSE,   1, 
                    GSSB,   14, 
                    GSES,   1, 
                    Offset (0xB0), 
                        ,   12, 
                    CDVL,   1, 
                    Offset (0xB2), 
                    Offset (0xB5), 
                    LBPC,   8, 
                    Offset (0xBC), 
                    ASLS,   32
                }

                OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
                Field (IGDM, AnyAcc, NoLock, Preserve)
                {
                    SIGN,   128, 
                    SIZE,   32, 
                    OVER,   32, 
                    SVER,   256, 
                    VVER,   128, 
                    GVER,   128, 
                    MBOX,   32, 
                    DMOD,   32, 
                    Offset (0x100), 
                    DRDY,   32, 
                    CSTS,   32, 
                    CEVT,   32, 
                    Offset (0x120), 
                    DIDL,   32, 
                    DDL2,   32, 
                    DDL3,   32, 
                    DDL4,   32, 
                    DDL5,   32, 
                    DDL6,   32, 
                    DDL7,   32, 
                    DDL8,   32, 
                    CPDL,   32, 
                    CPL2,   32, 
                    CPL3,   32, 
                    CPL4,   32, 
                    CPL5,   32, 
                    CPL6,   32, 
                    CPL7,   32, 
                    CPL8,   32, 
                    CADL,   32, 
                    CAL2,   32, 
                    CAL3,   32, 
                    CAL4,   32, 
                    CAL5,   32, 
                    CAL6,   32, 
                    CAL7,   32, 
                    CAL8,   32, 
                    NADL,   32, 
                    NDL2,   32, 
                    NDL3,   32, 
                    NDL4,   32, 
                    NDL5,   32, 
                    NDL6,   32, 
                    NDL7,   32, 
                    NDL8,   32, 
                    ASLP,   32, 
                    TIDX,   32, 
                    CHPD,   32, 
                    CLID,   32, 
                    CDCK,   32, 
                    SXSW,   32, 
                    EVTS,   32, 
                    CNOT,   32, 
                    NRDY,   32, 
                    Offset (0x200), 
                    SCIE,   1, 
                    GEFC,   4, 
                    GXFC,   3, 
                    GESF,   8, 
                    Offset (0x204), 
                    PARM,   32, 
                    DSLP,   32, 
                    Offset (0x300), 
                    ARDY,   32, 
                    ASLC,   32, 
                    TCHE,   32, 
                    ALSI,   32, 
                    BCLP,   32, 
                    PFIT,   32, 
                    CBLV,   32, 
                    BCLM,   320, 
                    CPFM,   32, 
                    EPFM,   32, 
                    PLUT,   592, 
                    PFMB,   32, 
                    CCDV,   32, 
                    PCFT,   32, 
                    Offset (0x400), 
                    GVD1,   49152, 
                    PHED,   32, 
                    BDDC,   2048
                }

                Name (DBTB, Package (0x15)
                {
                    0x00, 
                    0x07, 
                    0x38, 
                    0x01C0, 
                    0x0E00, 
                    0x3F, 
                    0x01C7, 
                    0x0E07, 
                    0x01F8, 
                    0x0E38, 
                    0x0FC0, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x7000, 
                    0x7007, 
                    0x7038, 
                    0x71C0, 
                    0x7E00
                })
                Name (CDCT, Package (0x05)
                {
                    Package (0x02)
                    {
                        0xE4, 
                        0x0140
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        0x00, 
                        0x00
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }
                })
                Name (SUCC, 0x01)
                Name (NVLD, 0x02)
                Name (CRIT, 0x04)
                Name (NCRT, 0x06)
                Method (GSCI, 0, Serialized)
                {
                    Method (GBDA, 0, Serialized)
                    {
                        If ((GESF == 0x00))
                        {
                            PARM = 0x0679
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x01))
                        {
                            PARM = 0x0240
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            PARM &= 0xEFFF0000
                            PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                            PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            PARM = IPSC /* \IPSC */
                            PARM |= (IPAT << 0x08)
                            PARM += 0x0100
                            PARM |= (LIDS << 0x10)
                            PARM += 0x00010000
                            PARM |= (IBIA << 0x14)
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            PARM = ITVF /* \ITVF */
                            PARM |= (ITVM << 0x04)
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                            PARM ^= 0x01
                            PARM |= (GMFN << 0x01)
                            PARM |= (0x03 << 0x0B)
                            PARM |= (IDMS << 0x11)
                            PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                                0x15) /* \_SB_.PCI0.GFX0.PARM */
                            GESF = 0x01
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            PARM = 0x00
                            If (ISSC)
                            {
                                PARM |= 0x03
                            }

                            GESF = 0x00
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            PARM = KSV0 /* \KSV0 */
                            GESF = KSV1 /* \KSV1 */
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                    }

                    Method (SBCB, 0, Serialized)
                    {
                        If ((GESF == 0x00))
                        {
                            PARM = 0x00
                            PARM = 0x000F87FD
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x01))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x03))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            ITVF = (PARM & 0x0F)
                            ITVM = ((PARM & 0xF0) >> 0x04)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            If ((PARM == 0x00))
                            {
                                Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x08))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x09))
                        {
                            IBTT = (PARM & 0xFF)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            IPSC = (PARM & 0xFF)
                            If (((PARM >> 0x08) & 0xFF))
                            {
                                IPAT = ((PARM >> 0x08) & 0xFF)
                                IPAT--
                            }

                            IBIA = ((PARM >> 0x14) & 0x07)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            IF1E = ((PARM >> 0x01) & 0x01)
                            If ((PARM & (0x0F << 0x0D)))
                            {
                                IDMS = ((PARM >> 0x0D) & 0x0F)
                            }
                            Else
                            {
                                IDMS = ((PARM >> 0x11) & 0x0F)
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x10))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x11))
                        {
                            PARM = (LIDS << 0x08)
                            PARM += 0x0100
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x12))
                        {
                            If ((PARM & 0x01))
                            {
                                If (((PARM >> 0x01) == 0x01))
                                {
                                    ISSC = 0x01
                                }
                                Else
                                {
                                    GESF = Zero
                                    Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                                }
                            }
                            Else
                            {
                                ISSC = 0x00
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x13))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x14))
                        {
                            PAVP = (PARM & 0x0F)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GEFC == 0x04))
                    {
                        GXFC = GBDA ()
                    }

                    If ((GEFC == 0x06))
                    {
                        GXFC = SBCB ()
                    }

                    GEFC = 0x00
                    SCIS = 0x01
                    GSSE = 0x00
                    SCIE = 0x00
                    Return (Zero)
                }

                Method (PDRD, 0, NotSerialized)
                {
                    If (!DRDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!DRDY)
                }

                Method (PSTS, 0, NotSerialized)
                {
                    If ((CSTS > 0x02))
                    {
                        Sleep (ASLP)
                    }

                    Return ((CSTS == 0x03))
                }

                Method (GNOT, 2, NotSerialized)
                {
                    If (PDRD ())
                    {
                        Return (0x01)
                    }

                    CEVT = Arg0
                    CSTS = 0x03
                    If (((CHPD == 0x00) && (Arg1 == 0x00)))
                    {
                        If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                        {
                            Notify (\_SB.PCI0, Arg1)
                        }
                        Else
                        {
                            Notify (\_SB.PCI0.GFX0, Arg1)
                        }
                    }

                    If (CondRefOf (HNOT))
                    {
                        HNOT (Arg0)
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                    }

                    Return (0x00)
                }

                Method (GHDS, 1, NotSerialized)
                {
                    TIDX = Arg0
                    Return (GNOT (0x01, 0x00))
                }

                Method (GLID, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        CLID = 0x03
                    }
                    Else
                    {
                        CLID = Arg0
                    }

                    Return (GNOT (0x02, 0x00))
                }

                Method (GDCK, 1, NotSerialized)
                {
                    CDCK = Arg0
                    Return (GNOT (0x04, 0x00))
                }

                Method (PARD, 0, NotSerialized)
                {
                    If (!ARDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!ARDY)
                }

                Method (AINT, 2, NotSerialized)
                {
                    If (!(TCHE & (0x01 << Arg0)))
                    {
                        Return (0x01)
                    }

                    If (PARD ())
                    {
                        Return (0x01)
                    }

                    If ((Arg0 == 0x02))
                    {
                        If (CPFM)
                        {
                            Local0 = (CPFM & 0x0F)
                            Local1 = (EPFM & 0x0F)
                            If ((Local0 == 0x01))
                            {
                                If ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                ElseIf ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                Else
                                {
                                    PFIT = 0x01
                                }
                            }

                            If ((Local0 == 0x06))
                            {
                                If ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                ElseIf ((Local1 & 0x01))
                                {
                                    PFIT = 0x01
                                }
                                Else
                                {
                                    PFIT = 0x06
                                }
                            }

                            If ((Local0 == 0x08))
                            {
                                If ((Local1 & 0x01))
                                {
                                    PFIT = 0x01
                                }
                                ElseIf ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                Else
                                {
                                    PFIT = 0x08
                                }
                            }
                        }
                        Else
                        {
                            PFIT ^= 0x07
                        }

                        PFIT |= 0x80000000
                        ASLC = 0x04
                    }
                    ElseIf ((Arg0 == 0x01))
                    {
                        BCLP = ((Arg1 * 0xFF) / 0x64)
                        BCLP |= 0x80000000
                        ASLC = 0x02
                    }
                    ElseIf ((Arg0 == 0x00))
                    {
                        ALSI = Arg1
                        ASLC = 0x01
                    }
                    Else
                    {
                        Return (0x01)
                    }

                    ASLE = 0x01
                    Return (0x00)
                }

                Method (SCIP, 0, NotSerialized)
                {
                    If ((OVER != 0x00))
                    {
                        Return (!GSMI)
                    }

                    Return (0x00)
                }

                Method (PRST, 0, NotSerialized)
                {
                    If ((REG0 == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Name (LCDM, 0x0808)
                Name (CRTM, 0x0101)
                Name (TVOM, 0x0202)
                Name (HDMM, 0x0404)
                Name (DVIM, 0x4040)
                Name (DPOM, 0x8080)
                Name (DOSF, One)
                Name (BRNC, Zero)
                Name (UPDN, One)
                Name (NXTD, 0x01)
                Name (LFID, 0xFFFFFFFF)
                Name (CRID, 0xFFFFFFFF)
                Name (TVID, 0xFFFFFFFF)
                Name (DPID, 0xFFFFFFFF)
                Name (HDID, 0xFFFFFFFF)
                Name (DVID, 0xFFFFFFFF)
                Name (DDID, 0x00)
                Name (CONT, 0x00)
                Name (RST0, Buffer (0x0100)
                {
                     0x00                                             // .
                })
                Name (RST1, Buffer (0x0100)
                {
                     0x00                                             // .
                })
                Method (MD2A, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((Arg0 & LCDM))
                    {
                        Local0 |= 0x01
                    }

                    If ((Arg0 & CRTM))
                    {
                        Local0 |= 0x02
                    }

                    If ((Arg0 & TVOM))
                    {
                        Local0 |= 0x04
                    }

                    If ((Arg0 & DVIM))
                    {
                        Local0 |= 0x08
                    }

                    If ((Arg0 & HDMM))
                    {
                        Local0 |= 0x10
                    }

                    If ((Arg0 & DPOM))
                    {
                        Local0 |= 0x20
                    }

                    If (!Local0)
                    {
                        Return (NXTD) /* \_SB_.PCI0.GFX0.NXTD */
                    }

                    Return (Local0)
                }

                Method (MA2D, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((Arg0 & 0x01))
                    {
                        Local0 |= LCDM /* \_SB_.PCI0.GFX0.LCDM */
                    }

                    If ((Arg0 & 0x02))
                    {
                        Local0 |= CRTM /* \_SB_.PCI0.GFX0.CRTM */
                    }

                    If ((Arg0 & 0x04))
                    {
                        Local0 |= TVOM /* \_SB_.PCI0.GFX0.TVOM */
                    }

                    If ((Arg0 & 0x08))
                    {
                        Local0 |= DVIM /* \_SB_.PCI0.GFX0.DVIM */
                    }

                    If ((Arg0 & 0x10))
                    {
                        Local0 |= HDMM /* \_SB_.PCI0.GFX0.HDMM */
                    }

                    If ((Arg0 & 0x20))
                    {
                        Local0 |= DPOM /* \_SB_.PCI0.GFX0.DPOM */
                    }

                    If (!Local0)
                    {
                        Return (LCDM) /* \_SB_.PCI0.GFX0.LCDM */
                    }

                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((OSYS > 0x07D0) && (OSYS < 0x07D6)))
                    {
                        \_SB.PCI0.LPCB.EC0.TSDS ()
                        \_SB.PCI0.PEGR.GFX0.DOFF ()
                    }

                    Return (0x0F)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((SGEN & 0x01))
                    {
                        HINI ()
                    }
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSF = (Arg0 & 0x03)
                    BRNC = (Arg0 >> 0x02)
                    BRNC &= 0x01
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    NDID = 0x00
                    If ((DIDL != Zero))
                    {
                        DID1 = SDDL (DID1)
                    }

                    If ((DDL2 != Zero))
                    {
                        DID2 = SDDL (DDL2)
                    }

                    If ((DDL3 != Zero))
                    {
                        DID3 = SDDL (DDL3)
                    }

                    If ((DDL4 != Zero))
                    {
                        DID4 = SDDL (DDL4)
                    }

                    If ((DDL5 != Zero))
                    {
                        DID5 = SDDL (DDL5)
                    }

                    If ((NDID == 0x01))
                    {
                        Name (TMP1, Package (0x01)
                        {
                            0xFFFFFFFF
                        })
                        TMP1 [0x00] = (0x00010000 | DID1)
                        Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
                    }

                    If ((NDID == 0x02))
                    {
                        Name (TMP2, Package (0x02)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP2 [0x00] = (0x00010000 | DID1)
                        TMP2 [0x01] = (0x00010000 | DID2)
                        Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
                    }

                    If ((NDID == 0x03))
                    {
                        Name (TMP3, Package (0x03)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP3 [0x00] = (0x00010000 | DID1)
                        TMP3 [0x01] = (0x00010000 | DID2)
                        TMP3 [0x02] = (0x00010000 | DID3)
                        Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
                    }

                    If ((NDID == 0x04))
                    {
                        Name (TMP4, Package (0x04)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP4 [0x00] = (0x00010000 | DID1)
                        TMP4 [0x01] = (0x00010000 | DID2)
                        TMP4 [0x02] = (0x00010000 | DID3)
                        TMP4 [0x03] = (0x00010000 | DID4)
                        Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
                    }

                    If ((NDID > 0x04))
                    {
                        Name (TMP5, Package (0x05)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP5 [0x00] = (0x00010000 | DID1)
                        TMP5 [0x01] = (0x00010000 | DID2)
                        TMP5 [0x02] = (0x00010000 | DID3)
                        TMP5 [0x03] = (0x00010000 | DID4)
                        TMP5 [0x04] = (0x00010000 | DID5)
                        Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
                    }

                    Return (Package (0x01)
                    {
                        0x0400
                    })
                }

                Device (DD01)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID1 == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID1))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDDS (DID1))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID1))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (LCDD)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID2 == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID2))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDDS (DID2))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID2))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Local0 = 0x00
                        Local4 = \_SB.BRTI
                        Local4 <<= 0x04
                        While ((Local0 < 0x0B))
                        {
                            Local3 = (0x0B - Local0)
                            Local3 -= 0x01
                            Local3 = (Local4 + Local3)
                            Local1 = DerefOf (PWBT [Local3])
                            Local2 = ((Local1 * 0x64) / 0xFF)
                            BLAC [Local0] = Local2
                            Local0++
                        }

                        Return (BLAC) /* \_SB_.PCI0.GFX0.BLAC */
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        BCMD = One
                        Local0 = GCBL (Arg0)
                        \_SB.LBTN = ((0x0B - 0x01) - Local0)
                        If (BRNC)
                        {
                            \_SB.PCI0.GFX0.AINT (0x01, Arg0)
                        }
                        Else
                        {
                            STBR ()
                        }
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Return (\_SB.LBTN)
                    }
                }

                Device (DD03)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID3 == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID3))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID3 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID3))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID3))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD04)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID4 == 0x00))
                        {
                            Return (0x04)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID4))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID4 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID4))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID4))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD05)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID5 == 0x00))
                        {
                            Return (0x05)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID5))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID5 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID5))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID5))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD06)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID6 == 0x00))
                        {
                            Return (0x06)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID6))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID6 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID6))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID6))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD07)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID7 == 0x00))
                        {
                            Return (0x07)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID7))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID7 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID7))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID7))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Device (DD08)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID8 == 0x00))
                        {
                            Return (0x08)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID8))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID8 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID8))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID8))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \_SB_.NSTE */
                        }
                    }
                }

                Method (SDDL, 1, NotSerialized)
                {
                    NDID++
                    Local0 = (Arg0 & 0x0F0F)
                    Local1 = (0x80000000 | Local0)
                    If ((DIDL == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL2 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL3 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL4 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL5 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL6 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL7 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL8 == Local0))
                    {
                        Return (Local1)
                    }

                    Return (0x00)
                }

                Method (CDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((0x00 == Local0))
                    {
                        Return (0x1D)
                    }

                    If ((CADL == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL2 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL3 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL4 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL5 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL6 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL7 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL8 == Local0))
                    {
                        Return (0x1F)
                    }

                    Return (0x1D)
                }

                Method (NDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((0x00 == Local0))
                    {
                        Return (0x00)
                    }

                    If ((NADL == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL2 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL3 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL4 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL5 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL6 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL7 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL8 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SWHD, 1, Serialized)
                {
                    If ((SGEN & 0x01)){}
                    UPDN = One
                    If ((DOSF == 0x01))
                    {
                        If (NATK ())
                        {
                            \_SB.PAR0 = 0x00
                        }
                        Else
                        {
                            \_SB.PAR0 = 0x04
                        }

                        \_SB.SSTE = Arg0
                        If (NATK ())
                        {
                            \_SB.NSTE = MA2D (Arg0)
                            \_SB.SSTE = \_SB.NSTE
                        }

                        If ((Acquire (\_SB.MPAR, 0xFFFF) == 0x00))
                        {
                            \_SB.PINX = 0x80000001
                            ISMI (0x9C)
                            Release (\_SB.MPAR)
                        }

                        Notify (\_SB.PCI0.GFX0, 0x81) // Information Change
                    }
                    Else
                    {
                        \_SB.PCI0.GFX0.CEVT = 0x01
                        \_SB.PCI0.GFX0.CSTS = 0x03
                        If ((\_SB.CADL != \_SB.PADL))
                        {
                            \_SB.PADL = \_SB.CADL
                            If ((OSFG == OSXP))
                            {
                                Notify (\_SB.PCI0, 0x00) // Bus Check
                            }
                            Else
                            {
                                Notify (\_SB.PCI0.GFX0, 0x00) // Bus Check
                            }

                            Sleep (0x03E8)
                        }

                        \_SB.NSTE = MA2D (NXTD)
                        WNDD (\_SB.NSTE)
                        Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                    }
                }

                Method (GCDD, 0, NotSerialized)
                {
                    \_SB.PAR0 = 0x01
                    If ((Acquire (\_SB.MPAR, 0xFFFF) == 0x00))
                    {
                        \_SB.PINX = 0x80000000
                        ISMI (0x9C)
                        Release (\_SB.MPAR)
                    }

                    Return (\_SB.CSTE)
                }

                Method (GNDD, 0, NotSerialized)
                {
                    \_SB.PAR0 = 0x05
                    If ((Acquire (\_SB.MPAR, 0xFFFF) == 0x00))
                    {
                        \_SB.PINX = 0x80000000
                        ISMI (0x9C)
                        Release (\_SB.MPAR)
                    }

                    Return (\_SB.NSTE)
                }

                Method (GCDS, 0, NotSerialized)
                {
                    Return (MD2A (GCDD ()))
                }

                Method (GCAD, 0, NotSerialized)
                {
                    \_SB.PAR0 = 0x02
                    If ((Acquire (\_SB.MPAR, 0xFFFF) == 0x00))
                    {
                        \_SB.PINX = 0x80000000
                        ISMI (0x9C)
                        Release (\_SB.MPAR)
                    }

                    Return (\_SB.CADL)
                }

                Method (GVIF, 0, NotSerialized)
                {
                    \_SB.VBIF = 0x67
                    \_SB.PAR0 = 0x00
                    Sleep (0x0BB8)
                    If ((Acquire (\_SB.MPAR, 0xFFFF) == 0x00))
                    {
                        \_SB.PINX = 0x80000000
                        ISMI (0x9C)
                        Release (\_SB.MPAR)
                    }

                    Return (\_SB.VBIF)
                }

                Method (ADVD, 0, NotSerialized)
                {
                    If ((SGEN & 0x01)){}
                    If ((DOSF & 0x03))
                    {
                        GCDD ()
                        GCAD ()
                        GVIF ()
                    }
                    Else
                    {
                        OGCA ()
                        OGCD ()
                    }

                    If (NATK ())
                    {
                        If (UPDN)
                        {
                            NXTD = MD2A (\_SB.CSTE)
                            UPDN = Zero
                        }

                        Local0 = Zero
                        Local1 = MD2A (\_SB.CADL)
                        Local2 = Zero
                        If ((\_SB.VGAF & 0x01))
                        {
                            Local2 = (\_SB.VBIF & 0x08)
                        }

                        If (((Local2 == 0x08) & (\_SB.VGAF & 0x01)))
                        {
                            NXTD &= Local1
                            Local0 = NXTD /* \_SB_.PCI0.GFX0.NXTD */
                        }

                        While ((NXTD != Local0))
                        {
                            NXTD++
                            If (((DOSF == 0x01) && (NXTD == 0x03)))
                            {
                                NXTD++
                            }

                            If ((DOSF & 0x03))
                            {
                                If ((NXTD == 0x05))
                                {
                                    NXTD++
                                }

                                If ((NXTD == 0x06))
                                {
                                    NXTD++
                                }
                            }

                            If ((NXTD == 0x07))
                            {
                                NXTD++
                            }

                            If ((DOSF & 0x03))
                            {
                                If ((NXTD == 0x09))
                                {
                                    NXTD++
                                }
                            }

                            If (((DOSF == 0x01) && (NXTD == 0x0A)))
                            {
                                NXTD++
                            }

                            If ((NXTD == 0x0B))
                            {
                                NXTD++
                            }

                            If (((DOSF == 0x01) && (NXTD == 0x0C)))
                            {
                                NXTD++
                            }

                            While (((NXTD > 0x0C) && (NXTD < 0x10)))
                            {
                                NXTD++
                            }

                            If ((DOSF == 0x01))
                            {
                                If ((NXTD == 0x11))
                                {
                                    NXTD++
                                }

                                If ((NXTD == 0x12))
                                {
                                    NXTD++
                                }
                            }

                            If ((NXTD == 0x13))
                            {
                                NXTD++
                            }

                            If ((DOSF == 0x01))
                            {
                                While (((NXTD >= 0x14) && (NXTD < 0x20)))
                                {
                                    NXTD++
                                }

                                If ((NXTD == 0x21))
                                {
                                    NXTD++
                                }

                                If ((NXTD == 0x22))
                                {
                                    NXTD++
                                }
                            }

                            If ((NXTD == 0x23))
                            {
                                NXTD++
                            }

                            If (((DOSF == 0x01) && (NXTD == 0x24)))
                            {
                                NXTD++
                            }

                            While (((NXTD > 0x24) && (NXTD < 0x28)))
                            {
                                NXTD++
                            }

                            If (((DOSF == 0x01) && (NXTD == 0x28)))
                            {
                                NXTD++
                            }

                            While (((NXTD > 0x28) && (NXTD < 0x30)))
                            {
                                NXTD++
                            }

                            If (((DOSF == 0x01) && (NXTD == 0x30)))
                            {
                                NXTD++
                            }

                            If ((NXTD > 0x30))
                            {
                                NXTD = One
                            }

                            Local0 = (NXTD & Local1)
                        }

                        Return (NXTD) /* \_SB_.PCI0.GFX0.NXTD */
                    }

                    Return (GNDD ())
                }

                Method (NATK, 0, NotSerialized)
                {
                    Return (One)
                }

                Name (BCMD, 0x00)
                Method (UPBL, 0, NotSerialized)
                {
                    If ((SGEN & 0x01))
                    {
                        HUPB ()
                        Return (Zero)
                    }

                    If (BRNC)
                    {
                        Local0 = CBLV /* \_SB_.PCI0.GFX0.CBLV */
                        BCMD = Zero
                        Notify (LCDD, 0x86) // Device-Specific
                        Local2 = 0x0BB8
                        Local1 = (Local0 & 0x7FFFFFFF)
                        If ((Local1 >= DerefOf (BLAC [0x01])))
                        {
                            Local2 = Zero
                            Local1 = One
                        }

                        While ((!BCMD && Local2))
                        {
                            Local1 = CBLV /* \_SB_.PCI0.GFX0.CBLV */
                            If (!(Local1 & 0x80000000))
                            {
                                Local1 = Local0
                            }

                            If ((Local0 == Local1))
                            {
                                Sleep (0x0A)
                                Local2--
                                Local1 = Zero
                            }
                            Else
                            {
                                Local2 = Zero
                                Local1 = One
                            }
                        }

                        If ((!BCMD && Local1))
                        {
                            Local3 = GCBL (CBLV)
                            Local3 = ((0x0B - 0x01) - Local3)
                            LBTN = Local3
                        }
                    }
                    Else
                    {
                        If ((LBTN < 0x0F))
                        {
                            LBTN++
                        }
                        Else
                        {
                            LBTN = 0x0F
                        }

                        STBR ()
                    }

                    Return (Zero)
                }

                Method (DWBL, 0, NotSerialized)
                {
                    If ((SGEN & 0x01))
                    {
                        HDWB ()
                        Return (Zero)
                    }

                    If (BRNC)
                    {
                        Local0 = CBLV /* \_SB_.PCI0.GFX0.CBLV */
                        BCMD = Zero
                        Notify (LCDD, 0x87) // Device-Specific
                        Local2 = 0x0BB8
                        Local1 = (Local0 & 0x7FFFFFFF)
                        If ((Local1 <= DerefOf (BLAC [(0x0B - 0x01)])))
                        {
                            Local2 = Zero
                            Local1 = One
                        }

                        While ((!BCMD && Local2))
                        {
                            Local1 = CBLV /* \_SB_.PCI0.GFX0.CBLV */
                            If (!(Local1 & 0x80000000))
                            {
                                Local1 = Local0
                            }

                            If ((Local0 == Local1))
                            {
                                Sleep (0x0A)
                                Local2--
                                Local1 = Zero
                            }
                            Else
                            {
                                Local2 = Zero
                                Local1 = One
                            }
                        }

                        If ((!BCMD && Local1))
                        {
                            Local3 = GCBL (CBLV)
                            Local3 = ((0x0B - 0x01) - Local3)
                            LBTN = Local3
                        }
                    }
                    Else
                    {
                        If ((LBTN > 0x00))
                        {
                            LBTN--
                        }

                        If ((LBTN > 0x0F))
                        {
                            LBTN = 0x0F
                        }

                        STBR ()
                    }

                    Return (Zero)
                }

                Method (GCBL, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Arg0 &= 0x7FFFFFFF
                    While ((Local0 < (0x0B - 0x01)))
                    {
                        Local1 = DerefOf (BLAC [Local0])
                        Local2 = DerefOf (BLAC [(Local0 + 0x01)])
                        If (((Arg0 <= Local1) && (Arg0 > Local2)))
                        {
                            Break
                        }

                        Local0++
                    }

                    Return (Local0)
                }

                Method (GDTP, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F00)
                    If ((Local0 == 0x0100))
                    {
                        CRID = Arg0
                    }

                    If ((Local0 == 0x0200))
                    {
                        TVID = Arg0
                    }

                    If ((Local0 == 0x0400))
                    {
                        LFID = Arg0
                    }

                    If ((Local0 == 0x0300))
                    {
                        HDID = Arg0
                    }
                }

                Method (SDTP, 0, NotSerialized)
                {
                    GDTP (CPDL)
                    GDTP (CPL2)
                    GDTP (CPL3)
                    GDTP (CPL4)
                    GDTP (CPL5)
                    GDTP (CPL6)
                    GDTP (CPL7)
                    GDTP (CPL8)
                }

                Method (OA2D, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((Arg0 == LFID))
                    {
                        Local0 |= LCDM /* \_SB_.PCI0.GFX0.LCDM */
                    }

                    If ((Arg0 == CRID))
                    {
                        Local0 |= CRTM /* \_SB_.PCI0.GFX0.CRTM */
                    }

                    If ((Arg0 == TVID))
                    {
                        Local0 |= TVOM /* \_SB_.PCI0.GFX0.TVOM */
                    }

                    If ((Arg0 == HDID))
                    {
                        Local0 |= HDMM /* \_SB_.PCI0.GFX0.HDMM */
                    }

                    If ((Arg0 == DVID))
                    {
                        Local0 |= DVIM /* \_SB_.PCI0.GFX0.DVIM */
                    }

                    If ((Arg0 == DPID))
                    {
                        Local0 |= DPOM /* \_SB_.PCI0.GFX0.DPOM */
                    }

                    Return (Local0)
                }

                Method (OGCD, 0, NotSerialized)
                {
                    If ((CADL == 0x00))
                    {
                        \_SB.CSTE = LCDM /* \_SB_.PCI0.GFX0.LCDM */
                        Return (Zero)
                    }

                    \_SB.CSTE = OA2D (CADL)
                    If ((CAL2 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CSTE |= OA2D (CAL2)
                    If ((CAL3 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CSTE |= OA2D (CAL3)
                    If ((CAL4 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CSTE |= OA2D (CAL4)
                    If ((CAL5 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CSTE |= OA2D (CAL5)
                    If ((CAL6 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CSTE |= OA2D (CAL6)
                    If ((CAL7 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CSTE |= OA2D (CAL7)
                    If ((CAL8 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CSTE |= OA2D (CAL8)
                    Return (Zero)
                }

                Method (OGCA, 0, NotSerialized)
                {
                    SDTP ()
                    If ((CPDL == 0x00))
                    {
                        \_SB.CADL = LCDM /* \_SB_.PCI0.GFX0.LCDM */
                        Return (Zero)
                    }

                    \_SB.CADL = OA2D (CPDL)
                    If ((CPL2 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CADL |= OA2D (CPL2)
                    If ((CPL3 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CADL |= OA2D (CPL3)
                    If ((CPL4 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CADL |= OA2D (CPL4)
                    If ((CPL5 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CADL |= OA2D (CPL5)
                    If ((CPL6 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CADL |= OA2D (CPL6)
                    If ((CPL7 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CADL |= OA2D (CPL7)
                    If ((CPL8 == 0x00))
                    {
                        Return (Zero)
                    }

                    \_SB.CADL |= OA2D (CPL8)
                    Return (Zero)
                }

                Method (GDID, 1, NotSerialized)
                {
                    While ((CONT < 0x08))
                    {
                        Local0 = 0x01
                        Local0 <<= CONT /* \_SB_.PCI0.GFX0.CONT */
                        Local1 = (\_SB.NSTE & Local0)
                        CONT++
                        If ((Local1 & LCDM))
                        {
                            Return (LFID) /* \_SB_.PCI0.GFX0.LFID */
                        }

                        If ((Local1 & CRTM))
                        {
                            Return (CRID) /* \_SB_.PCI0.GFX0.CRID */
                        }

                        If ((Local1 & TVOM))
                        {
                            Return (TVID) /* \_SB_.PCI0.GFX0.TVID */
                        }

                        If ((Local1 & HDMM))
                        {
                            Return (HDID) /* \_SB_.PCI0.GFX0.HDID */
                        }

                        If ((Local1 & DVIM))
                        {
                            Return (DVID) /* \_SB_.PCI0.GFX0.DVID */
                        }
                    }

                    Return (0x00)
                }

                Method (WNDD, 1, NotSerialized)
                {
                    DDID = GDID (Arg0)
                    NADL = DDID /* \_SB_.PCI0.GFX0.DDID */
                    DDID = GDID (Arg0)
                    NDL2 = DDID /* \_SB_.PCI0.GFX0.DDID */
                    DDID = GDID (Arg0)
                    NDL3 = DDID /* \_SB_.PCI0.GFX0.DDID */
                    DDID = GDID (Arg0)
                    NDL4 = DDID /* \_SB_.PCI0.GFX0.DDID */
                    DDID = GDID (Arg0)
                    NDL5 = DDID /* \_SB_.PCI0.GFX0.DDID */
                    DDID = GDID (Arg0)
                    NDL6 = DDID /* \_SB_.PCI0.GFX0.DDID */
                    DDID = GDID (Arg0)
                    NDL7 = DDID /* \_SB_.PCI0.GFX0.DDID */
                    DDID = GDID (Arg0)
                    NDL8 = DDID /* \_SB_.PCI0.GFX0.DDID */
                    CONT = 0x00
                }

                Name (HGCK, 0x00)
                Name (HPWR, 0x00)
                Name (HPOK, 0x00)
                Name (HGDP, 0x00)
                Name (HGAP, 0x00)
                Name (HPLG, 0x00)
                Name (HPEJ, 0x00)
                Name (HPLE, 0x00)
                Name (HLMX, 0x00)
                Name (HLMM, 0x00)
                Name (HCMX, 0x00)
                Name (HCMM, 0x00)
                Name (HDMX, 0x00)
                Name (HDMU, 0x00)
                Name (HHMX, 0x00)
                Name (HHMM, 0x00)
                Name (HPMX, 0x00)
                Name (HPMM, 0x00)
                Name (HVGF, 0x00)
                Name (BOTF, Zero)
                Name (DONE, Zero)
                Name (CMO1, 0x00)
                Name (TLST, 0x01)
                Name (DSM2, 0x00)
                Name (DSM5, 0x00)
                Name (QATH, 0x00)
                Name (HGDD, 0x01)
                Name (HHKM, One)
                Name (BLCD, 0x0101)
                Name (BCRT, 0x0202)
                Name (BTVO, 0x0808)
                Name (BHDM, 0x0404)
                Name (BDVI, 0x4040)
                Name (BDPO, 0x8080)
                Method (HINI, 0, NotSerialized)
                {
                    HPWR = 0x01
                    HPOK = 0x01
                    HGDP = 0x00
                    HGAP = 0x00
                    HPLG = 0x00
                    HPEJ = 0x00
                    HPLE = 0x01
                    HLMX = 0x00
                    HLMM = 0x00
                    HCMX = 0x00
                    HCMM = 0x00
                    HDMX = 0x00
                    HDMU = 0x00
                    HHMX = 0x00
                    HHMM = 0x00
                    SAVO ()
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("a486d8f8-0bda-471b-a72b-6042a6b5bee0") /* Unknown UUID */))
                    {
                        Local0 = Zero
                        Local0 = (DerefOf (Arg3 [0x03]) << 0x18)
                        Local0 += (DerefOf (Arg3 [0x02]) << 0x10)
                        Local0 += (DerefOf (Arg3 [One]) << 0x08)
                        Local0 += (DerefOf (Arg3 [Zero]) << Zero)
                        If ((Arg1 != 0x0100))
                        {
                            Return (Buffer (0x04)
                            {
                                 0x02, 0x00, 0x00, 0x80                           // ....
                            })
                        }

                        Debug = "Optimus _DSM is called "
                        Switch (Arg2)
                        {
                            Case (0x00)
                            {
                                Debug = "Optimus _DSM subfunc 0, return 0x04000001 "
                                Return (Buffer (0x04)
                                {
                                     0x01, 0x00, 0x03, 0x04                           // ....
                                })
                            }
                            Case (0x1A)
                            {
                                Debug = "Optimus _DSM subfunc 26 "
                                If ((Local0 & One))
                                {
                                    Local2 = (Local0 >> 0x18)
                                    If ((Local2 == 0x03))
                                    {
                                        Debug = "Optimus _DSM subfunc 26, OMPR=3"
                                        \OMPR = 0x03
                                    }

                                    If ((Local2 == 0x02))
                                    {
                                        \OMPR = 0x02
                                    }
                                }

                                If ((\PO54 == Zero))
                                {
                                    Return (Buffer (0x04)
                                    {
                                         0x59, 0x00, 0x00, 0x01                           // Y...
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x04)
                                    {
                                         0x41, 0x00, 0x00, 0x01                           // A...
                                    })
                                }
                            }
                            Default
                            {
                                Return (Buffer (0x04)
                                {
                                     0x02, 0x00, 0x00, 0x80                           // ....
                                })
                            }

                        }
                    }

                    Return (0x00)
                }

                Method (RSTO, 0, NotSerialized)
                {
                    OperationRegion (PEGR, SystemMemory, 0xE0008000, 0x0100)
                    Field (PEGR, ByteAcc, NoLock, Preserve)
                    {
                        PREG,   2048
                    }

                    PREG = RST0 /* \_SB_.PCI0.GFX0.RST0 */
                    OperationRegion (VGAR, SystemMemory, 0xE0100000, 0x0100)
                    Field (VGAR, ByteAcc, NoLock, Preserve)
                    {
                        VREG,   2048
                    }

                    VREG = RST1 /* \_SB_.PCI0.GFX0.RST1 */
                }

                Method (SAVO, 0, NotSerialized)
                {
                    OperationRegion (PEGR, SystemMemory, 0xE0008000, 0x0100)
                    Field (PEGR, ByteAcc, NoLock, Preserve)
                    {
                        PREG,   2048
                    }

                    RST0 = PREG /* \_SB_.PCI0.GFX0.SAVO.PREG */
                    OperationRegion (VGAR, SystemMemory, 0xE0100000, 0x0100)
                    Field (VGAR, ByteAcc, NoLock, Preserve)
                    {
                        VREG,   2048
                    }

                    RST1 = VREG /* \_SB_.PCI0.GFX0.SAVO.VREG */
                }

                Method (HHKW, 0, Serialized)
                {
                    While (!HHKM)
                    {
                        Sleep (0x64)
                    }

                    HHKM = Zero
                }

                Method (HHKS, 0, Serialized)
                {
                    HHKM = One
                }

                Method (TGPU, 1, NotSerialized)
                {
                    HHKW ()
                    HGDP = Arg0
                    Local0 = Zero
                    Local0 += Arg0
                    \_SB.PCI0.GFX0.DSM2 = Local0
                    Notify (\_SB.PCI0.GFX0, 0xD0) // Hardware-Specific
                    Local0 = 0x1E
                    While (Local0)
                    {
                        If ((HGAP != Arg0))
                        {
                            Sleep (0x01F4)
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    \_SB.PCI0.GFX0.DSM2 = 0x00
                    HHKS ()
                }

                Method (MXDS, 1, NotSerialized)
                {
                    If ((Arg0 & 0x00))
                    {
                        Return (!HLMX)
                    }
                    Else
                    {
                        HLMX = Zero
                        HCMX = Zero
                        Sleep (0x64)
                    }
                }

                Method (MXMX, 1, NotSerialized)
                {
                    HLMM = One
                    HCMM = One
                    HDMU = One
                    HHMM = One
                    HLMX = Zero
                    HCMX = Zero
                    HDMX = Zero
                    HHMX = Zero
                    Return (0x01)
                }

                Method (HUPB, 0, NotSerialized)
                {
                    If ((HGAP == 0x01))
                    {
                        Notify (LCDD, 0x86) // Device-Specific
                        Notify (\_SB.PCI0.PEGR.GFX0.LCDD, 0x86) // Device-Specific
                    }
                }

                Method (HDWB, 0, NotSerialized)
                {
                    If ((HGAP == 0x01))
                    {
                        Notify (LCDD, 0x87) // Device-Specific
                        Notify (\_SB.PCI0.PEGR.GFX0.LCDD, 0x87) // Device-Specific
                    }
                }

                Method (HDVG, 0, NotSerialized)
                {
                    If ((HGAP == 0x01))
                    {
                        HGCA ()
                        HGCD ()
                        \CADL &= 0xFF
                        \CSTE &= 0xFF
                        If (UPDN)
                        {
                            NXTD = HD2A (\CSTE)
                            UPDN = Zero
                        }

                        Local1 = \_SB.PCI0.GFX0.HD2A (\CADL)
                    }
                    Else
                    {
                        \_SB.PCI0.GFX0.QATH = 0x01
                        \_SB.PCI0.GFX0.EV80 ()
                        Local0 = 0x01F4
                        While (Local0)
                        {
                            If (\_SB.PCI0.GFX0.QATH)
                            {
                                Sleep (0x0A)
                                Local0--
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        \CADL &= 0x0FFF
                        \CSTE &= 0x0FFF
                        If (UPDN)
                        {
                            NXTD = MD2A (\CSTE)
                            UPDN = Zero
                        }

                        Local1 = \_SB.PCI0.GFX0.MD2A (\CADL)
                    }

                    Local0 = Zero
                    While ((NXTD != Local0))
                    {
                        NXTD++
                        If ((NXTD == 0x07))
                        {
                            NXTD++
                        }

                        If ((NXTD == 0x0B))
                        {
                            NXTD++
                        }

                        If (((NXTD >= 0x0D) && (NXTD <= 0x0F)))
                        {
                            NXTD++
                        }

                        If ((NXTD == 0x13))
                        {
                            NXTD++
                        }

                        If (((NXTD >= 0x15) && (NXTD <= 0x17)))
                        {
                            NXTD++
                        }

                        If (((NXTD >= 0x19) && (NXTD <= 0x1F)))
                        {
                            NXTD++
                        }

                        If ((NXTD == 0x23))
                        {
                            NXTD++
                        }

                        If (((NXTD >= 0x25) && (NXTD <= 0x27)))
                        {
                            NXTD++
                        }

                        If (((NXTD >= 0x29) && (NXTD <= 0x2F)))
                        {
                            NXTD++
                        }

                        If ((NXTD > 0x30))
                        {
                            NXTD = One
                        }

                        Local0 = (NXTD & Local1)
                    }

                    Return (NXTD) /* \_SB_.PCI0.GFX0.NXTD */
                }

                Method (GATD, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        Return (0x01)
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Return (0x02)
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        Return (0x03)
                    }
                    ElseIf ((Arg0 == 0x10))
                    {
                        Return (0x04)
                    }
                    ElseIf ((Arg0 == 0x11))
                    {
                        Return (0x05)
                    }
                    ElseIf ((Arg0 == 0x12))
                    {
                        Return (0x06)
                    }
                    ElseIf ((Arg0 == 0x20))
                    {
                        Return (0x07)
                    }
                    ElseIf ((Arg0 == 0x21))
                    {
                        Return (0x08)
                    }
                    ElseIf ((Arg0 == 0x22))
                    {
                        Return (0x09)
                    }
                    ElseIf ((Arg0 == 0x30))
                    {
                        Return (0x0A)
                    }
                    Else
                    {
                        Return (0x01)
                    }
                }

                Method (HWHG, 1, Serialized)
                {
                    If (((Arg0 & 0x00) && (HGAP == 0x01)))
                    {
                        \_SB.PCI0.GFX0.TGPU (0x02)
                        Sleep (0x2AF8)
                    }

                    UPDN = One
                    DONE = Zero
                    \_SB.PCI0.GFX0.TLST = GATD (Arg0)
                    \_SB.PCI0.GFX0.EV80 ()
                    Local0 = 0x01F4
                    While (Local0)
                    {
                        If (DONE)
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Sleep (0x0A)
                            Local0--
                        }
                    }

                    Sleep (0x64)
                }

                Method (HGCD, 0, NotSerialized)
                {
                    If ((CADL == 0x00))
                    {
                        \CSTE = BLCD /* \_SB_.PCI0.GFX0.BLCD */
                        Return (Zero)
                    }

                    \CSTE = HA2D (CADL)
                    If ((CAL2 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CSTE |= HA2D (CAL2)
                    If ((CAL3 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CSTE |= HA2D (CAL3)
                    If ((CAL4 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CSTE |= HA2D (CAL4)
                    If ((CAL5 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CSTE |= HA2D (CAL5)
                    If ((CAL6 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CSTE |= HA2D (CAL6)
                    If ((CAL7 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CSTE |= HA2D (CAL7)
                    If ((CAL8 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CSTE |= HA2D (CAL8)
                    Return (Zero)
                }

                Method (HGTP, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0FFF)
                    If ((Local0 == 0x0100))
                    {
                        CRID = Arg0
                    }

                    If ((Local0 == 0x0110))
                    {
                        LFID = Arg0
                    }

                    If ((Local0 == 0x0340))
                    {
                        DPID = Arg0
                    }

                    If ((Local0 == 0x0330))
                    {
                        HDID = Arg0
                    }
                }

                Method (HDTP, 0, NotSerialized)
                {
                    HGTP (CPDL)
                    HGTP (CPL2)
                    HGTP (CPL3)
                    HGTP (CPL4)
                    HGTP (CPL5)
                    HGTP (CPL6)
                    HGTP (CPL7)
                    HGTP (CPL8)
                }

                Method (HGCA, 0, NotSerialized)
                {
                    HDTP ()
                    If ((CPDL == 0x00))
                    {
                        \CADL = BLCD /* \_SB_.PCI0.GFX0.BLCD */
                        Return (Zero)
                    }

                    \CADL = HA2D (CPDL)
                    If ((CPL2 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CADL |= HA2D (CPL2)
                    If ((CPL3 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CADL |= HA2D (CPL3)
                    If ((CPL4 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CADL |= HA2D (CPL4)
                    If ((CPL5 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CADL |= HA2D (CPL5)
                    If ((CPL6 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CADL |= HA2D (CPL6)
                    If ((CPL7 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CADL |= HA2D (CPL7)
                    If ((CPL8 == 0x00))
                    {
                        Return (Zero)
                    }

                    \CADL |= HA2D (CPL8)
                    Return (Zero)
                }

                Method (HA2D, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((Arg0 == LFID))
                    {
                        Local0 |= BLCD /* \_SB_.PCI0.GFX0.BLCD */
                    }

                    If ((Arg0 == CRID))
                    {
                        Local0 |= BCRT /* \_SB_.PCI0.GFX0.BCRT */
                    }

                    If ((Arg0 == TVID))
                    {
                        Local0 |= BTVO /* \_SB_.PCI0.GFX0.BTVO */
                    }

                    If ((Arg0 == HDID))
                    {
                        Local0 |= BHDM /* \_SB_.PCI0.GFX0.BHDM */
                    }

                    If ((Arg0 == DVID))
                    {
                        Local0 |= BDVI /* \_SB_.PCI0.GFX0.BDVI */
                    }

                    If ((Arg0 == DPID))
                    {
                        Local0 |= BDPO /* \_SB_.PCI0.GFX0.BDPO */
                    }

                    Return (Local0)
                }

                Method (HD2A, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((Arg0 & BLCD))
                    {
                        Local0 |= 0x01
                    }

                    If ((Arg0 & BCRT))
                    {
                        Local0 |= 0x02
                    }

                    If ((Arg0 & BTVO))
                    {
                        Local0 |= 0x04
                    }

                    If ((Arg0 & BDVI))
                    {
                        Local0 |= 0x08
                    }

                    If ((Arg0 & BHDM))
                    {
                        Local0 |= 0x10
                    }

                    If ((Arg0 & BDPO))
                    {
                        Local0 |= 0x20
                    }

                    If (!Local0)
                    {
                        Return (NXTD) /* \_SB_.PCI0.GFX0.NXTD */
                    }

                    Return (Local0)
                }

                Method (EVD0, 0, NotSerialized)
                {
                    Notify (\_SB.PCI0.GFX0, 0xD0) // Hardware-Specific
                    \_SB.PCI0.NWM1 (0xD0)
                }

                Method (EVD9, 0, NotSerialized)
                {
                    Notify (\_SB.PCI0.GFX0, 0xD9) // Hardware-Specific
                    \_SB.PCI0.NWM1 (0xD9)
                }

                Method (EVDA, 0, NotSerialized)
                {
                    Notify (\_SB.PCI0.GFX0, 0xDA) // Hardware-Specific
                    \_SB.PCI0.NWM1 (0xDA)
                }

                Method (EV80, 0, NotSerialized)
                {
                    Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                    \_SB.PCI0.NWM1 (0x80)
                }

                Method (EV81, 0, NotSerialized)
                {
                    Notify (\_SB.PCI0.GFX0, 0x81) // Information Change
                    \_SB.PCI0.NWM1 (0x81)
                }

                Device (\_SB.MEM2)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x20000000,         // Address Base
                            0x00200000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x40000000,         // Address Base
                            0x00200000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (CRS) /* \_SB_.MEM2.CRS_ */
                    }
                }

                Scope (\_GPE)
                {
                    Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
                        {
                            \_SB.PCI0.GFX0.GSCI ()
                        }
                    }
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
            }

            Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
                Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
                Notify (\_SB.PCI0.GLAN, 0x02) // Device Wake
            }

            Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
            }

            Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
            }

            Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
            }

            Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
            }

            Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
            }

            Method (_L20, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB6, 0x02) // Device Wake
            }

            Method (_L25, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.USB7, 0x02) // Device Wake
            }

            Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.RP06.GLAN, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEG1, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEG2, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEG3, 0x02) // Device Wake
                Notify (\_SB.PCI0.B0D4, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEGR, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEGR.PEGP, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEGR.GFX0, 0x02) // Device Wake
            }
        }
    }

    Scope (\_SB)
    {
        Device (PTID)
        {
            Name (CADR, 0x00)
            Name (WLEN, 0x00)
            Name (RLEN, 0x00)
            Name (CAMD, 0x00)
            Name (OBUF, Buffer (0x10){})
            Name (IBUF, Buffer (0x0F){})
            Name (ERRN, 0x00)
            Name (_HID, EisaId ("INT340E") /* Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (IVER, 0x00030000)
            Name (TSDL, Package (0x04)
            {
                0x00, 
                "CPU Temperature", 
                0x05, 
                "PCH Temperature"
            })
            Name (TMPV, Package (0x02)
            {
                0x80000000, 
                0x80000000
            })
            Name (PSDL, Package (0x04)
            {
                0x00, 
                "CPU Power", 
                0x01, 
                "Gfx Power"
            })
            Name (PWRV, Package (0x02)
            {
                0x80000000, 
                0x80000000
            })
            Name (OSDL, Package (0x06)
            {
                0x04, 
                "Fan RPM", 
                "RPM", 
                0x0C, 
                "Battery Capaciy", 
                "mAh"
            })
            Name (OSDV, Package (0x02)
            {
                0x80000000, 
                0x80000000
            })
            Method (TSDD, 0, NotSerialized)
            {
                Name (TMPC, 0x00)
                TMPC = \_SB.PCI0.LPCB.EC0.ECPU
                TMPV [0x00] = TMPC /* \_SB_.PTID.TSDD.TMPC */
                TMPC = \_SB.PCI0.LPCB.EC0.ECPU
                TMPV [0x01] = TMPC /* \_SB_.PTID.TSDD.TMPC */
                Return (TMPV) /* \_SB_.PTID.TMPV */
            }

            Method (PWRG, 0, NotSerialized)
            {
                Return (Ones)
            }

            Method (PSDD, 0, NotSerialized)
            {
                Name (PWRC, 0x00)
                PWRC = PWRG ()
                PWRV [0x00] = PWRC /* \_SB_.PTID.PSDD.PWRC */
                PWRC = PWRG ()
                PWRV [0x01] = PWRC /* \_SB_.PTID.PSDD.PWRC */
                Return (PWRV) /* \_SB_.PTID.PWRV */
            }

            Method (OSDG, 0, NotSerialized)
            {
                Return (Ones)
            }

            Method (OSDD, 0, NotSerialized)
            {
                Name (OSDC, 0x00)
                OSDC = OSDG ()
                OSDV [0x00] = OSDC /* \_SB_.PTID.OSDD.OSDC */
                OSDC = OSDG ()
                OSDV [0x01] = OSDC /* \_SB_.PTID.OSDD.OSDC */
                Return (OSDV) /* \_SB_.PTID.OSDV */
            }

            Method (SDSP, 0, NotSerialized)
            {
                Return (0x0A)
            }

            Name (MBOX, Buffer (0x1A){})
            Name (PADA, Package (0x0A)
            {
                0x01, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x1A, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (PADD, Package (0x0A)
            {
                0x02, 
                0x0271, 
                0x0270, 
                0x1A, 
                0x62, 
                0x63, 
                0x60, 
                0x61, 
                0x65, 
                0x64
            })
            Method (PADT, 0, NotSerialized)
            {
                Local0 = (\_SB.PCI0.LPCB.EC0.PBSY & 0x80)
                If ((Local0 == 0x00))
                {
                    Return (PADD) /* \_SB_.PTID.PADD */
                }

                Return (PADA) /* \_SB_.PTID.PADA */
            }

            Method (RPMD, 0, NotSerialized)
            {
                Local0 = 0x00
                Local1 = 0x0A
                Local1 += WLEN
                While ((Local0 < RLEN))
                {
                    MBOX [Local1] = DerefOf (IBUF [Local0])
                    Local0 += 0x01
                    Local1 += 0x01
                }

                Return (MBOX) /* \_SB_.PTID.MBOX */
            }

            Method (WPMD, 1, NotSerialized)
            {
                If ((SizeOf (Arg0) != 0x1A))
                {
                    Return (0xFFFFFFFF)
                }

                Local0 = 0x00
                While ((Local0 < 0x1A))
                {
                    MBOX [Local0] = DerefOf (Arg0 [Local0])
                    Local0 += 0x01
                }

                CADR = DerefOf (Arg0 [0x06])
                WLEN = DerefOf (Arg0 [0x07])
                RLEN = DerefOf (Arg0 [0x08])
                CAMD = DerefOf (Arg0 [0x09])
                Name (CUNT, 0x00)
                CUNT = 0x00
                Local0 = 0x0A
                While ((CUNT < WLEN))
                {
                    OBUF [CUNT] = DerefOf (Arg0 [Local0])
                    CUNT += 0x01
                    Local0 += 0x01
                }

                Return (0x00)
            }

            Name (CYCT, 0x00)
            Method (ISPC, 0, NotSerialized)
            {
                CYCT = DerefOf (MBOX [0x03])
                CYCT <<= 0x08
                CYCT += DerefOf (MBOX [0x02])
                CYCT <<= 0x08
                CYCT += DerefOf (MBOX [0x01])
                CYCT <<= 0x08
                CYCT += DerefOf (MBOX [0x00])
                If ((CYCT >= 0x01))
                {
                    Local0 = DerefOf (MBOX [0x04])
                    Local0 *= 0x0A
                    Sleep (Local0)
                }

                Local0 = \_SB.PCI0.LPCB.EC0.PECI (CADR, WLEN, RLEN, CAMD, OBUF, IBUF, ERRN)
                If ((Local0 == 0x01))
                {
                    If ((CYCT > 0x00))
                    {
                        CYCT -= 0x01
                        MBOX [0x00] = (CYCT & 0xFF)
                        Local0 = (CYCT & 0xFF00)
                        MBOX [0x01] = (Local0 >> 0x08)
                        Local0 = (CYCT & 0x00FF0000)
                        MBOX [0x02] = (Local0 >> 0x10)
                        Local0 = (CYCT & 0xFF000000)
                        MBOX [0x03] = (Local0 >> 0x18)
                    }
                }
            }

            Method (ENPC, 0, NotSerialized)
            {
                CYCT = 0x00
            }

            Method (RPCS, 0, NotSerialized)
            {
                Name (TPCS, 0x00)
                If ((CYCT > 0x00))
                {
                    TPCS = 0x01
                    ISPC ()
                }
                Else
                {
                    TPCS = 0x00
                }

                Return (TPCS) /* \_SB_.PTID.RPCS.TPCS */
            }

            Method (RPEC, 0, NotSerialized)
            {
                Name (TPEC, 0x00)
                TPEC = ERRN /* \_SB_.PTID.ERRN */
                Return (TPEC) /* \_SB_.PTID.RPEC.TPEC */
            }
        }
    }

    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == 0x00))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == 0x01))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (\_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        PTS (Arg0)
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        WAK (Arg0)
        Return (Package (0x02)
        {
            0x00, 
            0x00
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > 0x01))
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }

            If ((PDC4 & 0x08))
            {
                Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                If ((PDC4 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU4, 0x81) // C-State Change
                }
            }

            If ((PDC5 & 0x08))
            {
                Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                If ((PDC5 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU5, 0x81) // C-State Change
                }
            }

            If ((PDC6 & 0x08))
            {
                Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                If ((PDC6 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU6, 0x81) // C-State Change
                }
            }

            If ((PDC7 & 0x08))
            {
                Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                If ((PDC7 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU7, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == \TRTP))
        {
            TRP0 = 0x00
        }

        If ((Arg0 == \TRTD))
        {
            DTSF = Arg1
            TRPD = 0x00
            Return (DTSF) /* \DTSF */
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (\_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSYS = 0x07D0
            If (CondRefOf (\_OSI, Local0))
            {
                If (\_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                }

                If (\_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (\_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (\_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (\_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x07D3
                }

                If (\_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (\_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If (\_SB.ACPS)
                {
                    \_SB.SLMT = (\_SB.PSTN >> 0x08)
                }
                Else
                {
                    \_SB.SLMT = (\_SB.PSTN & 0xFF)
                }
            }
        }

        Method (NHPG, 0, Serialized)
        {
            ^RP01.HPEX = 0x00
            ^RP02.HPEX = 0x00
            ^RP03.HPEX = 0x00
            ^RP04.HPEX = 0x00
            ^RP01.HPSX = 0x01
            ^RP02.HPSX = 0x01
            ^RP03.HPSX = 0x01
            ^RP04.HPSX = 0x01
        }

        Method (NPME, 0, Serialized)
        {
            ^RP01.PMEX = 0x00
            ^RP02.PMEX = 0x00
            ^RP03.PMEX = 0x00
            ^RP04.PMEX = 0x00
            ^RP05.PMEX = 0x00
            ^RP07.PMEX = 0x00
            ^RP08.PMEX = 0x00
            ^RP01.PMSX = 0x01
            ^RP02.PMSX = 0x01
            ^RP03.PMSX = 0x01
            ^RP04.PMSX = 0x01
            ^RP05.PMSX = 0x01
            ^RP07.PMSX = 0x01
            ^RP08.PMSX = 0x01
        }
    }

    Scope (\)
    {
        Name (PICM, 0x00)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [0x00] = Arg0
            Local0 = (SS1 << 0x01)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((0x01 << Arg1) & Local0))
            {
                PRWP [0x01] = Arg1
            }
            Else
            {
                Local0 >>= 0x01
                FindSetLeftBit (Local0, PRWP [0x01])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (\)
    {
        OperationRegion (IO_T, SystemIO, 0x1000, 0x10)
        Field (IO_T, ByteAcc, NoLock, Preserve)
        {
            TRPI,   16, 
            Offset (0x04), 
            Offset (0x06), 
            Offset (0x08), 
            TRP0,   8, 
            Offset (0x0A), 
            Offset (0x0B), 
            Offset (0x0C), 
            Offset (0x0D), 
            Offset (0x0E), 
            Offset (0x0F), 
            Offset (0x10)
        }

        OperationRegion (IO_D, SystemIO, 0x0810, 0x04)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }

        OperationRegion (PMIO, SystemIO, \PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x28), 
            Offset (0x2A), 
                ,   3, 
            GPE3,   1, 
            Offset (0x3C), 
                ,   1, 
            UPRW,   1, 
            Offset (0x42), 
                ,   1, 
            GPEC,   1
        }

        Field (PMIO, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x20), 
            Offset (0x22), 
                ,   3, 
            GPS3,   1, 
            Offset (0x64), 
                ,   9, 
            SCIS,   1, 
            Offset (0x66)
        }

        OperationRegion (GPIO, SystemIO, \GPBS, 0x64)
        Field (GPIO, ByteAcc, NoLock, Preserve)
        {
            GU00,   8, 
            GU01,   8, 
            GU02,   8, 
            GU03,   8, 
            GIO0,   8, 
            GIO1,   8, 
            GIO2,   8, 
            GIO3,   8, 
            Offset (0x0C), 
            GL00,   8, 
            GL01,   8, 
            GL02,   8, 
                ,   3, 
            GP27,   1, 
            GP28,   1, 
            Offset (0x10), 
            Offset (0x18), 
            GB00,   8, 
            GB01,   8, 
            GB02,   8, 
            GB03,   8, 
            Offset (0x2C), 
            GIV0,   8, 
            GIV1,   8, 
            GIV2,   8, 
            GIV3,   8, 
            GU04,   8, 
            GU05,   8, 
            GU06,   8, 
            GU07,   8, 
            GIO4,   8, 
            GIO5,   8, 
            GIO6,   8, 
            GIO7,   8, 
            GL04,   8, 
            GL05,   8, 
            GL06,   8, 
            GL07,   8, 
            Offset (0x40), 
            GU08,   8, 
            GU09,   8, 
            GU0A,   8, 
            GU0B,   8, 
            GIO8,   8, 
            GIO9,   8, 
            GIOA,   8, 
            GIOB,   8, 
            GL08,   8, 
            GL09,   8, 
            GL0A,   8, 
            GL0B,   8
        }

        OperationRegion (RCRB, SystemMemory, \SRCB, 0x4000)
        Field (RCRB, DWordAcc, Lock, Preserve)
        {
            Offset (0x1000), 
            Offset (0x3000), 
            Offset (0x3404), 
            HPAS,   2, 
                ,   5, 
            HPAE,   1, 
            Offset (0x3418), 
                ,   1, 
                ,   1, 
            SATD,   1, 
            SMBD,   1, 
            HDAD,   1, 
            Offset (0x341A), 
            RP1D,   1, 
            RP2D,   1, 
            RP3D,   1, 
            RP4D,   1, 
            RP5D,   1, 
            RP6D,   1, 
            RP7D,   1, 
            RP8D,   1, 
            Offset (0x359C), 
            UP0D,   1, 
            UP1D,   1, 
            UP2D,   1, 
            UP3D,   1, 
            UP4D,   1, 
            UP5D,   1, 
            UP6D,   1, 
            UP7D,   1, 
            UP8D,   1, 
            UP9D,   1, 
            UPAD,   1, 
            UPBD,   1, 
            UPCD,   1, 
            UPDD,   1, 
                ,   1, 
            Offset (0x359E)
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (SAT0)
        {
            Name (_ADR, 0x001F0002)  // _ADR: Address
        }

        Device (SAT1)
        {
            Name (_ADR, 0x001F0005)  // _ADR: Address
        }
    }

    Scope (\_SB.PCI0)
    {
    }

    Scope (\_SB)
    {
        Name (RAMB, 0xAAF8A018)
        OperationRegion (RAMW, SystemMemory, RAMB, 0x00010000)
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            TPID,   8, 
            PAR0,   32, 
            PAR1,   32, 
            PAR2,   32, 
            PINX,   32, 
            ACPE,   8, 
            GNBF,   32, 
            BIPA,   32, 
            DSMA,   32, 
            WRPS,   8, 
            WRST,   8, 
            WMST,   8, 
            BRPS,   8, 
            BRST,   8, 
            LBTN,   8, 
            ALSL,   8, 
            ALAE,   8, 
            CAPM,   8, 
            COSF,   8, 
            EGCP,   8, 
            EGC2,   8, 
            ACPS,   8, 
            DCPS,   8, 
            CPUN,   8, 
            BLTS,   8, 
            WLSS,   8, 
            WMDP,   8, 
            DC2S,   8, 
            ACPF,   8, 
            DCPF,   8, 
            DCP2,   8, 
            DSYN,   8, 
            CPUP,   8, 
            PSTN,   16, 
            SLMT,   8, 
            CPUH,   8, 
            MODE,   8, 
            CTBO,   8, 
            SLPT,   8, 
            PTAB,   32, 
            CPCH,   32, 
            HTPT,   32, 
            TRTY,   8, 
            FADR,   32, 
            FSIZ,   16, 
            FSTA,   16, 
            FSFN,   8, 
            PTIM,   8, 
            PTMP,   8, 
            ALPR,   32, 
            TMPB,   8, 
            THKA,   32, 
            VVID,   16, 
            VGAF,   8, 
            VBIF,   16, 
            PADL,   16, 
            CADL,   16, 
            CSTE,   16, 
            NSTE,   16, 
            SSTE,   16, 
            ACTD,   8, 
            AVLD,   8, 
            SETD,   8, 
            BRTI,   8, 
            LCDV,   32, 
            LCDR,   8, 
            GPUF,   8, 
            RBUF,   32, 
            RVBS,   32, 
            SGEN,   8
        }

        Mutex (MPAR, 0x00)
        Name (ARBF, Buffer (0x10){})
        CreateDWordField (ARBF, 0x00, REAX)
        CreateDWordField (ARBF, 0x04, REBX)
        CreateDWordField (ARBF, 0x08, RECX)
        CreateDWordField (ARBF, 0x0C, REDX)
        OperationRegion (IOB2, SystemIO, SMIP, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8, 
            SMIS,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SMIC = Arg0
        }

        Method (GMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == 0x00))
            {
                PINX = 0x80000000
                PAR0 = Arg0
                ISMI (0x90)
                RECX = Arg0
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (SMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == 0x00))
            {
                CreateDWordField (Arg0, 0x00, AEAX)
                CreateDWordField (Arg0, 0x04, AEBX)
                CreateDWordField (Arg0, 0x08, AECX)
                CreateDWordField (Arg0, 0x0C, AEDX)
                PINX = 0x80000001
                PAR0 = AECX /* \_SB_.SMSR.AECX */
                PAR1 = AEAX /* \_SB_.SMSR.AEAX */
                PAR2 = AEDX /* \_SB_.SMSR.AEDX */
                ISMI (0x90)
                Release (MPAR)
            }

            Return (Ones)
        }

        Method (PRID, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == 0x00))
            {
                PINX = 0x80000002
                PAR0 = Arg0
                ISMI (0x90)
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (SARM, 1, Serialized)
        {
            If ((Arg0 != 0x03))
            {
                ISMI (0x92)
            }
        }
    }

    Scope (\_PR)
    {
        Processor (CPU0, 0x01, 0x00000410, 0x06){}
        Processor (CPU1, 0x02, 0x00000410, 0x06){}
        Processor (CPU2, 0x03, 0x00000410, 0x06){}
        Processor (CPU3, 0x04, 0x00000410, 0x06){}
        Processor (CPU4, 0x05, 0x00000410, 0x06){}
        Processor (CPU5, 0x06, 0x00000410, 0x06){}
        Processor (CPU6, 0x07, 0x00000410, 0x06){}
        Processor (CPU7, 0x08, 0x00000410, 0x06){}
    }

    Scope (\_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y18)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y1A)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1B)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1C)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y1D)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y19)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y18._BAS, RBR0)  // _BAS: Base Address
                RBR0 = (\_SB.PCI0.LPCB.RCBA << 0x0E)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y19._BAS, TBR0)  // _BAS: Base Address
                TBR0 = TBAB /* \TBAB */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y19._LEN, TBLN)  // _LEN: Length
                If ((TBAB == 0x00))
                {
                    TBLN = 0x00
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1A._BAS, MBR0)  // _BAS: Base Address
                MBR0 = (\_SB.PCI0.MHBR << 0x0F)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1B._BAS, DBR0)  // _BAS: Base Address
                DBR0 = (\_SB.PCI0.DIBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1C._BAS, EBR0)  // _BAS: Base Address
                EBR0 = (\_SB.PCI0.EPBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1D._BAS, XBR0)  // _BAS: Base Address
                XBR0 = (\_SB.PCI0.PXBR << 0x1A)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1D._LEN, XSZ0)  // _LEN: Length
                XSZ0 = (0x10000000 >> \_SB.PCI0.PXSZ)
                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Scope (\_SB.PCI0.SAT0)
    {
        Device (PRT1)
        {
            Name (OFLG, 0x01)
            Name (_ADR, 0x0001FFFF)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (0x01)
                                {
                                    If ((PFLV == FDTP))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                    Return (Buffer (0x01)
                                    {
                                         0x0F                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (0x01)
                        {
                            Return (0x01)
                        }
                        Case (0x02)
                        {
                            GPE3 = 0x00
                            GPS3 = 0x01
                            OFLG = 0x00
                            If (((GL00 & 0x08) == 0x08))
                            {
                                GIV0 |= 0x08
                            }
                            Else
                            {
                                GIV0 &= 0xF7
                            }

                            GL08 |= 0x10
                            Sleep (0xC8)
                            OFLG = 0x01
                            GPS3 = 0x01
                            GPE3 = 0x01
                            Return (0x01)
                        }
                        Case (0x03)
                        {
                            If (OFLG)
                            {
                                GPE3 = 0x00
                                GPS3 = 0x01
                                GL08 &= 0xEF
                                Return (0x01)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                        Default
                        {
                            Return (0x00)
                        }

                    }
                }
                Else
                {
                    Return (0x00)
                }
            }
        }

        Device (PRT2)
        {
            Name (OFLG, 0x01)
            Name (_ADR, 0x0002FFFF)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (0x01)
                                {
                                    If ((PFLV == FDTP))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                    Return (Buffer (0x01)
                                    {
                                         0x0F                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (0x01)
                        {
                            Return (0x01)
                        }
                        Case (0x02)
                        {
                            GPE3 = 0x00
                            GPS3 = 0x01
                            OFLG = 0x00
                            If (((GL00 & 0x08) == 0x08))
                            {
                                GIV0 |= 0x08
                            }
                            Else
                            {
                                GIV0 &= 0xF7
                            }

                            GL08 |= 0x10
                            Sleep (0xC8)
                            OFLG = 0x01
                            GPS3 = 0x01
                            GPE3 = 0x01
                            Return (0x01)
                        }
                        Case (0x03)
                        {
                            If (OFLG)
                            {
                                GPE3 = 0x00
                                GPS3 = 0x01
                                GL08 &= 0xEF
                                Return (0x01)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                        Default
                        {
                            Return (0x00)
                        }

                    }
                }
                Else
                {
                    Return (0x00)
                }
            }
        }
    }

    Scope (\_GPE)
    {
        Method (_L13, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((PFLV == FDTP))
            {
                Return (Zero)
            }

            If ((\_SB.PCI0.SAT0.PRT1.OFLG && \_SB.PCI0.SAT0.PRT2.OFLG))
            {
                GPE3 = 0x00
                GL08 &= 0xEF
                Sleep (0x0320)
                Notify (\_SB.PCI0.SAT0, 0x81) // Information Change
                Notify (\_SB.PCI0.SAT0, 0x82) // Device-Specific Change
            }

            Return (Zero)
        }
    }

    Scope (\_SB.ATKD)
    {
        Method (AGFN, 1, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.GNBF)
            }

            Local0 = 0x00
            OperationRegion (PARM, SystemMemory, Arg0, 0x1000)
            Field (PARM, DWordAcc, NoLock, Preserve)
            {
                MFUN,   16, 
                SFUN,   16, 
                LEN,    16, 
                STAS,   8, 
                EROR,   8
            }

            EROR = 0x00
            STAS = 0x01
            If ((MFUN == 0x20))
            {
                BSMI (Arg0)
                STAS &= 0xFE
            }

            Local0 = (MFUN & 0xF0)
            If ((Local0 == 0x10))
            {
                MF1X (Arg0, LEN, MFUN, SFUN)
            }

            If ((MFUN == 0x30))
            {
                MF30 (Arg0, SFUN, LEN)
                STAS &= 0xFE
            }

            AGLN (Arg0, MFUN, SFUN, LEN)
            If ((STAS == 0x01))
            {
                EROR = 0x01
                STAS |= 0x02
            }

            STAS &= 0xFE
            STAS |= 0x80
            Return (0x00)
        }

        Method (BSMI, 1, Serialized)
        {
            BIPA = Arg0
            ISMI (0x9A)
        }

        Method (MF1X, 4, NotSerialized)
        {
            OperationRegion (FM1X, SystemMemory, Arg0, 0x08)
            Field (FM1X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM1X,   8, 
                EM1X,   8
            }

            Local0 = 0x01
            If ((Arg2 == 0x11))
            {
                Local0 = MF11 (Arg0, Arg1, Arg3)
            }

            If ((Arg2 == 0x1F))
            {
                Local0 = MF1F (Arg0, Arg1, Arg3)
            }

            SM1X &= 0xFE
            If (Local0)
            {
                EM1X = Local0
                SM1X |= 0x02
            }

            SM1X |= 0x80
        }

        Method (MF1F, 3, NotSerialized)
        {
            BSMI (Arg0)
            Return (0x00)
        }

        Method (MF11, 3, NotSerialized)
        {
            Local0 = 0x01
            If ((Arg2 == 0x00))
            {
                Local0 = G11V (Arg0, Arg1)
            }

            If ((Arg2 == 0x01))
            {
                Local0 = GBAT (Arg0, Arg1)
            }

            If ((Arg2 == 0x02))
            {
                Local0 = ASBR (Arg0, Arg1)
            }

            If ((Arg2 == 0x03))
            {
                Local0 = ASBE (Arg0, Arg1)
            }

            If ((Arg2 == 0x04))
            {
                Local0 = BTCR (Arg0, Arg1)
            }

            Return (Local0)
        }

        Method (G11V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F110, SystemMemory, Arg0, Arg1)
            Field (\F110, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = 0x00
            SVER = 0x00
            Return (0x00)
        }

        Method (GBAT, 2, NotSerialized)
        {
            If ((Arg1 < 0x0A))
            {
                Return (0x02)
            }

            OperationRegion (\F111, SystemMemory, Arg0, Arg1)
            Field (\F111, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BTNM,   8, 
                BTTP,   8
            }

            BTNM = 0x01
            BTTP = 0x00
            Return (0x00)
        }

        Method (ASBR, 2, NotSerialized)
        {
            If ((Arg1 < 0x30))
            {
                Return (0x02)
            }

            OperationRegion (\F112, SystemMemory, Arg0, Arg1)
            Field (\F112, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BATN,   8, 
                BATA,   8, 
                REGS,   8, 
                BDAT,   16, 
                BLEN,   8, 
                BREV,   16, 
                BLK1,   32, 
                BLK2,   32, 
                BLK3,   32, 
                BLK4,   32, 
                BLK5,   32, 
                BLK6,   32, 
                BLK7,   32, 
                BLK8,   32
            }

            If ((BATN >= 0x01))
            {
                Return (0x11)
            }

            If ((BATA == 0x00))
            {
                Local0 = \_SB.PCI0.LPCB.EC0.SMBR (\_SB.PCI0.LPCB.EC0.RDWD, 0x0B, REGS)
                BDAT = DerefOf (Local0 [0x02])
                Local2 = DerefOf (Local0 [0x00])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == 0x01))
            {
                Local0 = \_SB.PCI0.LPCB.EC0.SMBW (\_SB.PCI0.LPCB.EC0.WRWD, 0x0B, REGS, 0x02, BDAT)
                Local2 = DerefOf (Local0 [0x00])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == 0x02))
            {
                Local0 = \_SB.PCI0.LPCB.EC0.SMBR (\_SB.PCI0.LPCB.EC0.RDBL, 0x0B, REGS)
                Name (BKUF, Buffer (0x20){})
                CreateDWordField (BKUF, 0x00, DAT1)
                CreateDWordField (BKUF, 0x04, DAT2)
                CreateDWordField (BKUF, 0x08, DAT3)
                CreateDWordField (BKUF, 0x0C, DAT4)
                CreateDWordField (BKUF, 0x10, DAT5)
                CreateDWordField (BKUF, 0x14, DAT6)
                CreateDWordField (BKUF, 0x18, DAT7)
                CreateDWordField (BKUF, 0x1C, DAT8)
                BKUF = DerefOf (Local0 [0x02])
                BLK1 = DAT1 /* \_SB_.ATKD.ASBR.DAT1 */
                BLK2 = DAT2 /* \_SB_.ATKD.ASBR.DAT2 */
                BLK3 = DAT3 /* \_SB_.ATKD.ASBR.DAT3 */
                BLK4 = DAT4 /* \_SB_.ATKD.ASBR.DAT4 */
                BLK5 = DAT5 /* \_SB_.ATKD.ASBR.DAT5 */
                BLK6 = DAT6 /* \_SB_.ATKD.ASBR.DAT6 */
                BLK7 = DAT7 /* \_SB_.ATKD.ASBR.DAT7 */
                BLK8 = DAT8 /* \_SB_.ATKD.ASBR.DAT8 */
                BLEN = DerefOf (Local0 [0x01])
                Local2 = DerefOf (Local0 [0x00])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            Return (0x10)
        }

        Method (ASBE, 2, Serialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F113, SystemMemory, Arg0, Arg1)
            Field (\F113, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BATN,   8, 
                BATA,   8, 
                REGS,   8, 
                BDAT,   8
            }

            If ((BATN > 0x01))
            {
                Return (0x11)
            }

            If ((BATA == 0x00))
            {
                Local2 = \_SB.PCI0.LPCB.EC0.RBEP (REGS)
                Local3 = (Local2 & 0xFF)
                BDAT = Local3
                Local2 >>= 0x08
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == 0x01))
            {
                Local2 = \_SB.PCI0.LPCB.EC0.WBEP (REGS, BDAT)
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            Return (0x10)
        }

        Method (GBTL, 0, Serialized)
        {
            Return (\_SB.PCI0.LPCB.EC0.RPIN (0x00))
        }

        Method (SBTL, 1, Serialized)
        {
            \_SB.PCI0.LPCB.EC0.SPIN (0x00, Arg0)
        }

        Method (BTCR, 2, NotSerialized)
        {
            If ((Arg1 < 0x09))
            {
                Return (0x02)
            }

            OperationRegion (\F114, SystemMemory, Arg0, Arg1)
            Field (\F114, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BCDC,   8
            }

            SBTL (BCDC)
            Return (0x00)
        }

        Method (MF30, 3, NotSerialized)
        {
            OperationRegion (FM30, SystemMemory, Arg0, 0x08)
            Field (FM30, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM30,   8, 
                EM30,   8
            }

            Local0 = 0x01
            If ((Arg1 == 0x00))
            {
                Local0 = G30V (Arg0, Arg2)
            }

            If ((Arg1 == 0x01))
            {
                Local0 = EC01 (Arg0, Arg2)
            }

            If ((Arg1 == 0x02))
            {
                Local0 = EC02 (Arg0, Arg2)
            }

            If (Local0)
            {
                EM30 = Local0
                SM30 |= 0x02
            }

            SM30 |= 0x80
            Return (0x00)
        }

        Method (G30V, 2, NotSerialized)
        {
            If ((Arg1 < 0x0C))
            {
                Return (0x02)
            }

            OperationRegion (\F300, SystemMemory, Arg0, Arg1)
            Field (\F300, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                SVER,   16, 
                MVER,   16
            }

            MVER = 0x00
            SVER = 0x00
            Return (0x00)
        }

        Method (EC01, 2, NotSerialized)
        {
            If ((Arg1 < 0x10))
            {
                Return (0x02)
            }

            OperationRegion (FEC1, SystemMemory, Arg0, Arg1)
            Field (FEC1, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ECMD,   8, 
                EDA1,   8, 
                EDA2,   8, 
                EDA3,   8, 
                EDA4,   8, 
                EDA5,   8
            }

            Local0 = \_SB.PCI0.LPCB.EC0.ECXT (ECMD, EDA1, EDA2, EDA3, EDA4, EDA5)
            EDA1 = DerefOf (Local0 [0x01])
            EDA2 = DerefOf (Local0 [0x02])
            EDA3 = DerefOf (Local0 [0x03])
            EDA4 = DerefOf (Local0 [0x04])
            EDA5 = DerefOf (Local0 [0x05])
            Return (DerefOf (Local0 [0x00]))
        }

        Method (EC02, 2, NotSerialized)
        {
            If ((Arg1 < 0x30))
            {
                Return (0x02)
            }

            OperationRegion (FEC2, SystemMemory, Arg0, Arg1)
            Field (FEC2, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BUSN,   8, 
                PROT,   8, 
                DADD,   8, 
                DREG,   8, 
                DAT0,   8, 
                DAT1,   8, 
                BLEN,   8, 
                REVB,   8, 
                BLK1,   32, 
                BLK2,   32, 
                BLK3,   32, 
                BLK4,   32, 
                BLK5,   32, 
                BLK6,   32, 
                BLK7,   32, 
                BLK8,   32
            }

            Local0 = \_SB.PCI0.LPCB.EC0.ECSB (BUSN, PROT, DADD, DREG, DAT0, DAT1)
            DAT0 = DerefOf (Local0 [0x01])
            DAT1 = DerefOf (Local0 [0x02])
            BLEN = DerefOf (Local0 [0x03])
            Name (BKUF, Buffer (0x20){})
            CreateDWordField (BKUF, 0x00, DD01)
            CreateDWordField (BKUF, 0x04, DD02)
            CreateDWordField (BKUF, 0x08, DD03)
            CreateDWordField (BKUF, 0x0C, DD04)
            CreateDWordField (BKUF, 0x10, DD05)
            CreateDWordField (BKUF, 0x14, DD06)
            CreateDWordField (BKUF, 0x18, DD07)
            CreateDWordField (BKUF, 0x1C, DD08)
            BKUF = DerefOf (Local0 [0x04])
            BLK1 = DD01 /* \_SB_.ATKD.EC02.DD01 */
            BLK2 = DD02 /* \_SB_.ATKD.EC02.DD02 */
            BLK3 = DD03 /* \_SB_.ATKD.EC02.DD03 */
            BLK4 = DD04 /* \_SB_.ATKD.EC02.DD04 */
            BLK5 = DD05 /* \_SB_.ATKD.EC02.DD05 */
            BLK6 = DD06 /* \_SB_.ATKD.EC02.DD06 */
            BLK7 = DD07 /* \_SB_.ATKD.EC02.DD07 */
            BLK8 = DD08 /* \_SB_.ATKD.EC02.DD08 */
            Local2 = DerefOf (Local0 [0x00])
            Local2 &= 0x3F
            Return (Local2)
        }
    }

    Scope (\_SB.ATKD)
    {
        Method (AGLN, 4, NotSerialized)
        {
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (RESC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x09)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1E)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.RESC._Y1E._BAS, PTB0)  // _BAS: Base Address
                PTB0 = \_SB.PTAB
                CreateDWordField (BUF0, \_SB.PCI0.RESC._Y1E._LEN, PTLN)  // _LEN: Length
                If ((\_SB.PTAB == 0x00))
                {
                    PTLN = 0x00
                }

                Return (BUF0) /* \_SB_.PCI0.RESC.BUF0 */
            }
        }
    }

    Scope (\)
    {
        OperationRegion (DEBG, SystemIO, 0x80, 0x02)
        Field (DEBG, ByteAcc, Lock, Preserve)
        {
            DBG8,   8
        }

        Method (\DIAG, 1, NotSerialized)
        {
            P8XH (0x00, Arg0)
            \_SB.PCI0.SBUS.SSXB (0x00, Arg0)
        }

        Name (MNAM, "K53SC")
        Name (ONAM, "ASUSTEK")
        Name (OSFG, 0x00)
        Name (OS9X, 0x01)
        Name (OS98, 0x02)
        Name (OSME, 0x04)
        Name (OS2K, 0x08)
        Name (OSXP, 0x10)
        Name (OSVT, 0x20)
        Name (OSEG, 0x40)
        Name (OSW7, 0x80)
        Name (AVNC, Package (0x19)
        {
            0x00, 
            0x61, 
            0x62, 
            0x63, 
            0x64, 
            0x65, 
            0x66, 
            0x67, 
            0xA0, 
            0xA1, 
            0xA2, 
            0xA4, 
            0xA3, 
            0xA5, 
            0xA6, 
            0xA7, 
            0x8C, 
            0x8D, 
            0x8E, 
            0x90, 
            0x8F, 
            0x91, 
            0x92, 
            0x93, 
            0x00
        })
        Method (ATKN, 1, NotSerialized)
        {
            If (\_SB.LID._LID ())
            {
                Return (ATKR (Arg0))
            }

            Return (0x00)
        }

        Method (ATKR, 1, NotSerialized)
        {
            If (\_SB.ATKP)
            {
                \_SB.ATKD.IANE (Arg0)
                Return (0x01)
            }
        }

        Method (NBFS, 1, NotSerialized)
        {
            \_SB.PCI0.LPCB.EC0.EC0S (Arg0)
        }

        Method (NBWK, 1, NotSerialized)
        {
            \_SB.ACPS = GACS ()
            \_SB.DCPS = GDCS (0x00)
            Notify (\_SB.PCI0.AC0, 0x80) // Status Change
            Notify (\_SB.PCI0.BAT0, 0x80) // Status Change
            \_SB.PCI0.LPCB.EC0.EC0W (Arg0)
        }

        Method (CDVG, 0, NotSerialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                Return (\_SB.PCI0.GFX0.GCDS ())
            }

            If (\_SB.PCI0.PEGR.GFX0.PRST ())
            {
                Return (\_SB.PCI0.PEGR.GFX0.GCDS ())
            }

            Return (0x01)
        }

        Method (ADVG, 0, NotSerialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                Return (\_SB.PCI0.GFX0.ADVD ())
            }

            If (\_SB.PCI0.PEGR.GFX0.PRST ())
            {
                Return (\_SB.PCI0.PEGR.GFX0.ADVD ())
            }

            Return (0x03)
        }

        Method (NATK, 0, NotSerialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                Return (\_SB.PCI0.GFX0.NATK ())
            }

            If (\_SB.PCI0.PEGR.GFX0.PRST ())
            {
                Return (\_SB.PCI0.PEGR.GFX0.NATK ())
            }

            Return (One)
        }

        Method (SWHG, 1, Serialized)
        {
            If (\_SB.PCI0.GFX0.PRST ())
            {
                \_SB.PCI0.GFX0.SWHD (Arg0)
                Return (One)
            }

            If (\_SB.PCI0.PEGR.GFX0.PRST ())
            {
                \_SB.PCI0.PEGR.GFX0.SWHD (Arg0)
                Return (One)
            }

            Return (Zero)
        }

        Name (PWBT, Buffer (0x16)
        {
            /* 0000 */  0x21, 0x2E, 0x3B, 0x48, 0x55, 0x61, 0x6E, 0x7B,  // !.;HUan{
            /* 0008 */  0x9A, 0xC5, 0xFF, 0x33, 0x40, 0x4D, 0x5A, 0x67,  // ...3@MZg
            /* 0010 */  0x73, 0x80, 0x8D, 0xA7, 0xCD, 0xFF               // s.....
        })
        Method (STBR, 0, Serialized)
        {
            If ((Acquire (\_SB.MPAR, 0xFFFF) == 0x00))
            {
                \_SB.PAR0 = \_SB.LBTN
                \_SB.PINX = 0x80000003
                \_SB.ISMI (0x9C)
                Release (\_SB.MPAR)
            }
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ATKN (0x52)
        }

        Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ATKN (0x53)
        }

        Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ATKN (0x54)
        }

        Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ATKN (0x55)
        }

        Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ATKN (0x56)
        }

        Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Sleep (0x01F4)
            \_SB.ACPS = GACS ()
            Local0 = (\_SB.ACPS + 0x57)
            If (\_SB.ACPS)
            {
                If ((\_SB.CTBO == 0x01))
                {
                    \OBCP (0x00)
                }
            }
            ElseIf ((\_SB.CTBO == 0x01))
            {
                If (\_SB.PCI0.PEGR.GFX0.PRST ())
                {
                    \OBCP (0x01)
                }
            }

            Notify (\_SB.PCI0.AC0, 0x80) // Status Change
            Notify (\_SB.PCI0.BAT0, 0x80) // Status Change
            \PNOT ()
            ATKR (Local0)
        }

        Method (_QA1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            \_SB.DCPS = GDCS (0x00)
            If (\_SB.DCPS)
            {
                Sleep (0x07D0)
            }

            Notify (\_SB.PCI0.BAT0, 0x80) // Status Change
            Notify (\_SB.PCI0.BAT0, 0x81) // Information Change
        }

        Method (_QA5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x6E)
            }
            ElseIf (DCPS)
            {
                Notify (\_SB.PCI0.BAT0, 0x80) // Status Change
            }
        }

        Method (_QA3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (DCPS)
            {
                Local0 = BCLE (0x00)
                If ((Local0 == 0x00))
                {
                    Notify (\_SB.PCI0.BAT0, 0x81) // Information Change
                }
                Else
                {
                    Notify (\_SB.PCI0.BAT0, 0x81) // Information Change
                    Notify (\_SB.PCI0.AC0, 0x80) // Status Change
                }
            }
        }

        Method (_QB0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Notify (\_TZ.TZ00, 0x80) // Thermal Status Change
        }

        Method (_QB3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ATKN (0x6D)
        }

        Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Notify (\_SB.SLPB, 0x80) // Status Change
        }

        Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((\_SB.ATKD.WAPF & 0x04))
            {
                If (\_SB.ATKP)
                {
                    ATKN (0x88)
                }
            }
            Else
            {
                Local0 = OHWR ()
                If ((Local0 & 0x02))
                {
                    If ((Local0 & 0x01))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = One
                }

                If (Local0)
                {
                    If ((\_SB.ATKD.WAPF & 0x01))
                    {
                        If ((WLSS && BLTS))
                        {
                            Local0 = WRST /* \_SB_.WRST */
                            Local0 |= (BRST << 0x01)
                            Local0++
                            If ((Local0 > 0x03))
                            {
                                Local0 = 0x00
                            }

                            Local1 = DerefOf (WBTL [Local0])
                            If ((Local1 == 0x00))
                            {
                                ATKN (0x5D)
                                Sleep (0x0DAC)
                                \OBTD (0x00)
                                ATKN (0x7E)
                            }

                            If ((Local1 == 0x01))
                            {
                                ATKN (0x5D)
                                Sleep (0x0DAC)
                                \OBTD (0x00)
                                ATKN (0x7E)
                            }

                            If ((Local1 == 0x02))
                            {
                                ATKN (0x5D)
                                Sleep (0x0DAC)
                                \OBTD (0x01)
                                ATKN (0x7D)
                            }

                            If ((Local1 == 0x03))
                            {
                                ATKN (0x5D)
                                Sleep (0x0DAC)
                                \OBTD (0x01)
                                ATKN (0x7D)
                            }
                        }
                        ElseIf (WLSS)
                        {
                            ATKN (0x5D)
                        }
                        ElseIf (BLTS)
                        {
                            If (BRST)
                            {
                                \OBTD (0x00)
                                ATKN (0x7E)
                            }
                            Else
                            {
                                \OBTD (0x01)
                                ATKN (0x7D)
                            }
                        }
                    }
                    Else
                    {
                        Local0 = (WLSS && BLTS)
                        Local1 = (OSFG != OSEG)
                        If ((Local0 && Local1))
                        {
                            Local0 = WRST /* \_SB_.WRST */
                            Local0 |= (BRST << 0x01)
                            Local0++
                            If ((Local0 > 0x03))
                            {
                                Local0 = 0x00
                            }

                            Local1 = DerefOf (WBTL [Local0])
                            If ((Local1 == 0x00))
                            {
                                \OWLD (0x00)
                                ATKN (0x5F)
                                Sleep (0x0DAC)
                                \OBTD (0x00)
                                ATKN (0x7E)
                                \WBLD (0x00)
                            }

                            If ((Local1 == 0x01))
                            {
                                \OWLD (0x01)
                                ATKN (0x5E)
                                Sleep (0x0DAC)
                                \OBTD (0x00)
                                ATKN (0x7E)
                                \WBLD (0x01)
                            }

                            If ((Local1 == 0x02))
                            {
                                \OWLD (0x00)
                                ATKN (0x5F)
                                Sleep (0x0DAC)
                                \OBTD (0x01)
                                ATKN (0x7D)
                                \WBLD (0x01)
                            }

                            If ((Local1 == 0x03))
                            {
                                \OWLD (0x01)
                                ATKN (0x5E)
                                Sleep (0x0DAC)
                                \OBTD (0x01)
                                ATKN (0x7D)
                                \WBLD (0x01)
                            }
                        }
                        ElseIf (WLSS)
                        {
                            If (WRST)
                            {
                                \OWLD (0x00)
                                ATKN (0x5F)
                                \WBLD (0x00)
                            }
                            Else
                            {
                                \OWLD (0x01)
                                ATKN (0x5E)
                                \WBLD (0x01)
                            }
                        }
                        ElseIf (BLTS)
                        {
                            If (BRST)
                            {
                                \OBTD (0x00)
                                ATKN (0x7E)
                                \WBLD (0x00)
                            }
                            Else
                            {
                                \OBTD (0x01)
                                ATKN (0x7D)
                                \WBLD (0x01)
                            }
                        }
                    }
                }
                Else
                {
                    If (WLSS)
                    {
                        ATKN (0x5F)
                    }

                    If ((OSFG != OSEG))
                    {
                        If ((WLSS && BLTS))
                        {
                            Sleep (0x0DAC)
                        }

                        If (BLTS)
                        {
                            ATKN (0x7E)
                        }
                    }
                }
            }
        }

        Name (WBTL, Package (0x04)
        {
            0x00, 
            0x01, 
            0x02, 
            0x03
        })
        Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x50)
            }
        }

        Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x51)
            }
        }

        Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((OSFG >= OSVT))
            {
                Local0 = \_SB.PCI0.GFX0.CBLV
                Local1 = (Local0 & 0x7FFFFFFF)
                Local0 = \_SB.PCI0.GFX0.GCBL (Local1)
                \_SB.LBTN = ((0x0B - 0x01) - Local0)
            }

            Local1 = 0x0B
            Local1--
            Local0 = \_SB.LBTN
            If ((Local0 > 0x00))
            {
                Local0--
            }

            If ((Local0 > Local1))
            {
                Local0 = Local1
            }

            ATKN ((Local0 + 0x20))
            Sleep (0x05)
            \_SB.LBTN = Local0
            If ((OSFG == OSW7))
            {
                If (\_SB.PCI0.GFX0.PRST ())
                {
                    Notify (\_SB.PCI0.GFX0.LCDD, 0x87) // Device-Specific
                    Sleep (0x0A)
                }
                Else
                {
                    STBR ()
                }
            }
            Else
            {
                STBR ()
            }

            Return (One)
        }

        Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local2 = 0x0B
            Local2--
            If ((OSFG >= OSVT))
            {
                Local0 = \_SB.PCI0.GFX0.CBLV
                Local1 = (Local0 & 0x7FFFFFFF)
                Local0 = \_SB.PCI0.GFX0.GCBL (Local1)
                \_SB.LBTN = ((0x0B - 0x01) - Local0)
            }

            Local0 = \_SB.LBTN
            If ((Local0 < Local2))
            {
                Local0++
            }
            Else
            {
                Local0 = Local2
            }

            ATKN ((Local0 + 0x10))
            Sleep (0x05)
            \_SB.LBTN = Local0
            If ((OSFG == OSW7))
            {
                If (\_SB.PCI0.GFX0.PRST ())
                {
                    Notify (\_SB.PCI0.GFX0.LCDD, 0x86) // Device-Specific
                    Sleep (0x0A)
                }
                Else
                {
                    STBR ()
                }
            }
            Else
            {
                STBR ()
            }

            Return (One)
        }

        Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local0 = 0x01
            Local0 = \_SB.PCI0.LPCB.EC0.RPIN (0x11)
            Local0 ^= 0x01
            \_SB.PCI0.LPCB.EC0.SPIN (0x11, Local0)
            If (\_SB.ATKP)
            {
                Local0 = (0x34 - Local0)
                ATKN (Local0)
            }
        }

        Method (_Q11, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            FHKW ()
            Local0 = \ADVG ()
            If (\NATK ())
            {
                If ((Local0 < 0x08))
                {
                    Local1 = (Local0 + 0x60)
                }
                ElseIf ((Local0 < 0x10))
                {
                    Local1 = (Local0 - 0x08)
                    Local1 += 0x8C
                }
                ElseIf ((Local0 < 0x20))
                {
                    Local1 = (Local0 & 0x07)
                    Local1 += 0xA0
                }
                ElseIf ((Local0 < 0x40))
                {
                    Switch (ToInteger (Local0))
                    {
                        Case (0x20)
                        {
                            Local1 = 0xD0
                        }
                        Case (0x21)
                        {
                            Local1 = 0xD1
                        }
                        Case (0x22)
                        {
                            Local1 = 0xD2
                        }
                        Case (0x24)
                        {
                            Local1 = 0xD3
                        }
                        Case (0x28)
                        {
                            Local1 = 0xD4
                        }
                        Case (0x30)
                        {
                            Local1 = 0xD5
                        }

                    }
                }

                If (\_SB.ATKP)
                {
                    ATKN (Local1)
                }
                Else
                {
                    \SWHG (Local0)
                }
            }
            Else
            {
                \SWHG (Local0)
            }

            FHKS ()
        }

        Name (FHKM, One)
        Method (FHKW, 0, Serialized)
        {
            While (!FHKM)
            {
                Sleep (0x0A)
            }

            FHKM = Zero
        }

        Method (FHKS, 0, Serialized)
        {
            FHKM = One
        }

        Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (!(\_SB.DSYN & 0x01))
            {
                If (\_SB.ATKP)
                {
                    ATKN (0x6B)
                }
            }
        }

        Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x32)
            }
        }

        Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x31)
            }
        }

        Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x30)
            }
        }

        Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_Q71, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x5C)
            }
        }

        Method (_Q72, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x8A)
            }
        }

        Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x82)
            }
        }

        Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x45)
            }
        }

        Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x43)
            }
        }

        Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x40)
            }
        }

        Method (_Q6D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x41)
            }
        }

        Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x5C)
            }
        }

        Method (_Q84, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local0 = OHWR ()
            If ((Local0 & 0x02))
            {
                If ((\_SB.ATKD.WAPF & 0x04))
                {
                    If (\_SB.ATKP)
                    {
                        If ((Local0 & 0x01))
                        {
                            ATKN (0x80)
                        }
                        Else
                        {
                            ATKN (0x81)
                        }
                    }
                }
                ElseIf ((\_SB.ATKD.WAPF & 0x01))
                {
                    If ((Local0 & 0x01))
                    {
                        If (WLSS)
                        {
                            Sleep (0x09C4)
                            If ((WRPS == WRST))
                            {
                                If (WRPS)
                                {
                                    ATKN (0x5E)
                                }
                                Else
                                {
                                    ATKN (0x5F)
                                }
                            }
                            Else
                            {
                                ATKN (0x5D)
                            }
                        }

                        If ((WLSS && BLTS))
                        {
                            Sleep (0x0DAC)
                        }

                        If (BLTS)
                        {
                            If (BRPS)
                            {
                                \OBTD (0x01)
                                ATKN (0x7D)
                            }
                            Else
                            {
                                \OBTD (0x00)
                                ATKN (0x7E)
                            }
                        }
                    }
                    Else
                    {
                        If (WLSS)
                        {
                            WRPS = WRST /* \_SB_.WRST */
                            If (WRST)
                            {
                                ATKN (0x5D)
                            }
                            Else
                            {
                                ATKN (0x5F)
                            }
                        }

                        If ((WLSS && BLTS))
                        {
                            Sleep (0x0DAC)
                        }

                        If (BLTS)
                        {
                            BRPS = BRST /* \_SB_.BRST */
                            \OBTD (0x00)
                            ATKN (0x7E)
                        }
                    }
                }
                ElseIf ((Local0 & 0x01))
                {
                    If (WLSS)
                    {
                        If (WRPS)
                        {
                            \OWLD (0x01)
                            ATKN (0x5E)
                        }
                        Else
                        {
                            \OWLD (0x00)
                            ATKN (0x5F)
                        }
                    }

                    If ((OSFG != OSEG))
                    {
                        If ((WLSS && BLTS))
                        {
                            Sleep (0x0DAC)
                        }

                        If (BLTS)
                        {
                            If (BRPS)
                            {
                                \OBTD (0x01)
                                ATKN (0x7D)
                            }
                            Else
                            {
                                \OBTD (0x00)
                                ATKN (0x7E)
                            }
                        }
                    }
                }
                Else
                {
                    If (WLSS)
                    {
                        WRPS = WRST /* \_SB_.WRST */
                        \OWLD (0x00)
                        ATKN (0x5F)
                    }

                    If ((OSFG != OSEG))
                    {
                        If ((WLSS && BLTS))
                        {
                            Sleep (0x0DAC)
                        }

                        If (BLTS)
                        {
                            BRPS = BRST /* \_SB_.BRST */
                            \OBTD (0x00)
                            ATKN (0x7E)
                        }
                    }
                }
            }
        }

        Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x32)
            }
        }

        Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x31)
            }
        }

        Method (_Q88, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x30)
            }
        }

        Method (_Q89, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (\_SB.ATKP)
            {
                ATKN (0x45)
            }
        }

        Method (_QA8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            \DIAG (0xA8)
            If (\_SB.ACPS)
            {
                If ((\_SB.CTBO == 0x01))
                {
                    \OBCP (0x00)
                }
            }
            ElseIf ((\_SB.CTBO == 0x01))
            {
                If (\_SB.PCI0.PEGR.GFX0.PRST ())
                {
                    \OBCP (0x01)
                }
                Else
                {
                    \OBCP (0x00)
                }
            }
        }
    }

    Scope (\_SB.ATKD)
    {
        Method (FSMI, 1, NotSerialized)
        {
            FSFN = Arg0
            Local0 = (Arg0 | 0xA0)
            ISMI (0x97)
            Return (FSTA) /* \_SB_.FSTA */
        }

        Method (FLSH, 1, NotSerialized)
        {
            FSTA = Arg0
            FSMI (0x00)
        }

        Method (FINI, 1, NotSerialized)
        {
            FADR = Arg0
            Return (FSMI (0x01))
        }

        Method (FERS, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x02))
        }

        Method (FWRI, 1, NotSerialized)
        {
            FADR = Arg0
            FSIZ = 0x1000
            Return ((0x1000 - FSMI (0x03)))
        }

        Method (FWRP, 0, NotSerialized)
        {
            FSIZ = 0x00
            Return ((0x1000 - FSMI (0x03)))
        }

        Method (FEBW, 1, NotSerialized)
        {
            FADR = Arg0
            Return (FSMI (0x04))
        }

        Method (FEBR, 1, NotSerialized)
        {
            FADR = Arg0
            Return (FSMI (0x05))
        }

        Method (FEDW, 0, NotSerialized)
        {
            Return (FSMI (0x06))
        }

        Method (ECSR, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x07))
        }

        Method (FLSC, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x08))
        }

        Method (IGME, 1, NotSerialized)
        {
            If (((Arg0 == 0x04) | (Arg0 == 0x05)))
            {
                Local0 = FADR /* \_SB_.FADR */
                ISMI (Local0)
                FSTA = 0x00
                Return (FSTA) /* \_SB_.FSTA */
            }

            FSTA = Arg0
            Return (FSMI (0x09))
        }

        Method (FREC, 1, NotSerialized)
        {
            FSTA = Arg0
            Return (FSMI (0x0A))
        }
    }

    Scope (\_SB.PCI0.EHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, 0x01)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0x00, 
                    0xFF, 
                    0x00, 
                    0x00
                })
                Device (PRT1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, ToPLD (
                        PLD_Revision           = 0x1,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "HORIZONTALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x0,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x1,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                }

                Device (PRT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, ToPLD (
                        PLD_Revision           = 0x1,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "HORIZONTALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x0,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x1,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, ToPLD (
                        PLD_Revision           = 0x1,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "HORIZONTALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x0,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x1,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                }

                Device (PRT4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0x00, 
                        0xFF, 
                        0x00, 
                        0x00
                    })
                }

                Device (PRT5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, ToPLD (
                        PLD_Revision           = 0x1,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x0,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "HORIZONTALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x0,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                }

                Device (PRT6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, ToPLD (
                        PLD_Revision           = 0x1,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x0,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "HORIZONTALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x0,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                }

                Device (PRT7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0x00, 
                        0xFF, 
                        0x00, 
                        0x00
                    })
                }

                Device (PRT8)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0x00, 
                        0xFF, 
                        0x00, 
                        0x00
                    })
                }
            }
        }
    }

    Scope (\_SB.PCI0.EHC2)
    {
        Device (RHUB)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, 0x01)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0x00, 
                    0xFF, 
                    0x00, 
                    0x00
                })
                Device (PRT1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, ToPLD (
                        PLD_Revision           = 0x1,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x0,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "HORIZONTALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x0,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                }

                Device (PRT2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, ToPLD (
                        PLD_Revision           = 0x1,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x0,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "HORIZONTALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x0,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0x00, 
                        0xFF, 
                        0x00, 
                        0x00
                    })
                }

                Device (PRT4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, ToPLD (
                        PLD_Revision           = 0x1,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "HORIZONTALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x0,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x1,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                }

                Device (PRT5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, ToPLD (
                        PLD_Revision           = 0x1,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x0,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "HORIZONTALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x0,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                }

                Device (PRT6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0x00, 
                        0xFF, 
                        0x00, 
                        0x00
                    })
                }

                Device (PRT7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (PRT8)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                }
            }
        }
    }

    Scope (\_SB.PCI0.PEGR)
    {
        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If ((\_SB.PCI0.PEGR.SVID != 0xFFFFFFFF))
            {
                \_SB.PCI0.PEGR.HDAE = 0x00
                Sleep (0x32)
            }

            Return (0x0F)
        }

        OperationRegion (PEGM, SystemMemory, 0xE0008000, 0x0FF0)
        Field (PEGM, ByteAcc, NoLock, Preserve)
        {
            REG0,   32, 
            REG1,   32, 
            REG2,   32, 
            Offset (0x19), 
            RE19,   8, 
            RE1A,   8, 
            Offset (0x3E), 
            RE3E,   8, 
            Offset (0x84), 
            PWST,   2, 
            Offset (0xB0), 
            ASPM,   2, 
                ,   2, 
            LNKD,   1, 
            Offset (0xB3), 
                ,   3, 
            LTST,   1, 
            RSCC,   1, 
            Offset (0xB4), 
                ,   6, 
            HPCP,   1, 
            SPLV,   8, 
            SPLS,   2, 
                ,   2, 
            PHSN,   13, 
            Offset (0x114), 
            T0V0,   1, 
            TV0M,   7, 
            Offset (0x1FC), 
            R1FC,   9, 
            Offset (0x201), 
                ,   5, 
            CGEL,   2, 
                ,   3, 
            LCRB,   1, 
            Offset (0x204), 
            RETO,   10, 
            Offset (0x214), 
            Offset (0x216), 
            LNKS,   4, 
            Offset (0x220), 
            R220,   32, 
            Offset (0x225), 
            DQDA,   1, 
            Offset (0x226), 
            R224,   32, 
            Offset (0xC28), 
            RC28,   1, 
            Offset (0xC34), 
            RC34,   32, 
            Offset (0xDFC), 
                ,   1, 
            RDFC,   3, 
            Offset (0xE08), 
                ,   30, 
            RE08,   1, 
            Offset (0xE28), 
                ,   30, 
            RE28,   1, 
            Offset (0xE48), 
                ,   30, 
            RE48,   1, 
            Offset (0xE68), 
                ,   30, 
            RE68,   1, 
            Offset (0xE88), 
                ,   30, 
            RE88,   1, 
            Offset (0xEA8), 
                ,   30, 
            REA8,   1, 
            Offset (0xEC8), 
                ,   30, 
            REC8,   1, 
            Offset (0xEE8), 
                ,   30, 
            REE8,   1, 
            Offset (0xF08), 
                ,   30, 
            RF08,   1, 
            Offset (0xF28), 
                ,   30, 
            RF28,   1, 
            Offset (0xF48), 
                ,   30, 
            RF48,   1, 
            Offset (0xF68), 
                ,   30, 
            RF68,   1, 
            Offset (0xF88), 
                ,   30, 
            RF88,   1, 
            Offset (0xFA8), 
                ,   30, 
            RFA8,   1, 
            Offset (0xFC8), 
                ,   30, 
            RFC8,   1, 
            Offset (0xFE8), 
                ,   30, 
            RFE8,   1
        }

        OperationRegion (DMIM, SystemMemory, 0xFED18000, 0x0D00)
        Field (DMIM, ByteAcc, NoLock, Preserve)
        {
            Offset (0xC34), 
            DC34,   32
        }

        OperationRegion (GFXM, SystemMemory, 0xE0100000, 0x0FF0)
        Field (GFXM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x2C), 
            SVID,   32, 
            Offset (0x48B), 
                ,   1, 
            HDAE,   1
        }
    }

    Scope (\_SB.PCI0.PEGR.GFX0)
    {
        Name (DGPS, Zero)
        Name (_PSC, Zero)  // _PSC: Power State Current
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            DBG8 = 0xD0
            _PSC = Zero
            If ((DGPS != Zero))
            {
                Debug = "PS0: Need to power on dGPU"
                DBG8 = 0xC1
                \_SB.PCI0.PEGR.GFX0.DON ()
                DBG8 = 0xC2
                DGPS = Zero
                \_SB.PCI0.PEGR.HDAE = Zero
                \_SB.PCI0.LPCB.EC0.TSES ()
            }
        }

        Method (DON, 0, NotSerialized)
        {
            If (\_SB.ACPS)
            {
                If ((\_SB.CTBO == 0x01))
                {
                    \OBCP (0x00)
                }
            }
            ElseIf ((\_SB.CTBO == 0x01))
            {
                \OBCP (0x01)
            }

            _ON ()
        }

        Method (_ON, 0, NotSerialized)  // _ON_: Power On
        {
            PWST = Zero
            \PO50 = 0x00
            Sleep (0x64)
            \PO54 = 0x00
            Sleep (0x64)
            Local0 = \PI17
            While (!Local0)
            {
                Sleep (0x0A)
                Local0 = \PI17
            }

            \PO50 = 0x01
            Sleep (0x64)
            LNKD = 0x00
            Local1 = 0x03
            While (Local1)
            {
                Local1--
                If ((LNKS == 0x07))
                {
                    Local1 = Zero
                }
                Else
                {
                    Local0 = 0x64
                    While (Local0)
                    {
                        Sleep (0x0A)
                        Local0--
                        If ((LNKS == 0x07))
                        {
                            Local0 = Zero
                            Local1 = Zero
                        }
                    }

                    If ((Local1 && (LNKS != 0x07)))
                    {
                        LNKD = One
                        Sleep (0x6E)
                    }
                }
            }

            Sleep (0x64)
            \_SB.PCI0.GFX0.RSTO ()
            \_SB.PCI0.GFX0.HPWR = 0x01
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            DBG8 = 0xD3
            If ((\OMPR == 0x03))
            {
                Debug = "PS3: Driver wants to power off dGPU"
                If ((DGPS == Zero))
                {
                    DBG8 = 0xC3
                    \_SB.PCI0.LPCB.EC0.TSDS ()
                    \_SB.PCI0.PEGR.GFX0.DOFF ()
                    DGPS = One
                    DBG8 = 0xC4
                }

                \OMPR = 0x02
                Debug = "PS3: OMPR=2 now"
            }

            _PSC = 0x03
        }

        Method (DOFF, 0, NotSerialized)
        {
            _OFF ()
            If ((\_SB.CTBO == 0x01))
            {
                \OBCP (0x00)
            }
        }

        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
        {
            If ((\_SB.PCI0.PEGR.SVID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            \_SB.PCI0.GFX0.SAVO ()
            ASPM = 0x00
            LNKD = 0x01
            Local0 = 0x01
            While (Local0)
            {
                If (!LNKS)
                {
                    Local0 = 0x00
                }
                Else
                {
                    Sleep (0x0A)
                }
            }

            \PO50 = 0x00
            Sleep (0x0A)
            \PO54 = 0x01
            \_SB.PCI0.GFX0.HPWR = 0x00
            Return (Zero)
        }

        Method (MXDS, 1, NotSerialized)
        {
            If ((Arg0 & 0x00))
            {
                Return (\_SB.PCI0.GFX0.HLMX)
            }
            Else
            {
                \_SB.PCI0.GFX0.HLMX = One
                \_SB.PCI0.GFX0.HCMX = One
                Sleep (0x64)
            }
        }

        Method (MXMX, 1, NotSerialized)
        {
            \_SB.PCI0.GFX0.HLMM = One
            \_SB.PCI0.GFX0.HCMM = One
            \_SB.PCI0.GFX0.HDMU = One
            \_SB.PCI0.GFX0.HHMM = One
            \_SB.PCI0.GFX0.HLMX = One
            \_SB.PCI0.GFX0.HCMX = One
            \_SB.PCI0.GFX0.HDMX = One
            \_SB.PCI0.GFX0.HHMX = One
            Return (0x01)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Method (DSTA, 0, Serialized)
        {
            Return (_STA ())
        }

        OperationRegion (VSID, PCI_Config, 0x00, 0x0100)
        Field (VSID, ByteAcc, NoLock, Preserve)
        {
            REG0,   32, 
            REG1,   32, 
            REG2,   32, 
            REG3,   32, 
            REG4,   32, 
            REG5,   32, 
            REG6,   32, 
            REG7,   32, 
            REG8,   32, 
            REG9,   32, 
            REGA,   32, 
            REGB,   32, 
            REGC,   32, 
            REGD,   32, 
            REGE,   32, 
            REGF,   32, 
            REGG,   32
        }

        OperationRegion (VVID, SystemMemory, 0xE0100114, 0x10)
        Field (VVID, ByteAcc, NoLock, Preserve)
        {
            T0V0,   1, 
            TV0M,   7
        }

        Name (BLAC, Package (0x0B){})
        Method (PRST, 0, NotSerialized)
        {
            If ((REG0 == 0x105110DE))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (UPDN, One)
        Name (NXTD, 0x01)
        Name (LCDM, 0x01)
        Name (CRTM, 0x02)
        Name (TVOM, 0x04)
        Name (DVIM, 0x08)
        Name (HDMM, 0x10)
        Name (PACH, Zero)
        Name (DONE, Zero)
        Name (DOSF, One)
        Name (BRNC, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
        }

        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            DOSF = (Arg0 & 0x03)
            BRNC = (Arg0 >> 0x02)
            BRNC &= 0x01
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            Return (Package (0x04)
            {
                0x0110, 
                0x80000100, 
                0x80007330, 
                0x80006340
            })
        }

        Device (CRTD)
        {
            Name (_ADR, 0x80000100)  // _ADR: Address
            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Local0 = \_SB.AVLD
                If (Local0)
                {
                    If ((Local0 & CRTM))
                    {
                        Return (0x1F)
                    }
                }

                Return (0x1D)
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                Local0 = (NXTD & CRTM) /* \_SB_.PCI0.PEGR.GFX0.CRTM */
                If (Local0)
                {
                    Return (0x01)
                }

                Return (0x00)
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                If ((Arg0 & 0x40000000))
                {
                    If ((Arg0 & 0x80000000))
                    {
                        DONE = One
                    }
                }
            }
        }

        Device (HDMI)
        {
            Name (_ADR, 0x80007330)  // _ADR: Address
            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Local0 = \_SB.AVLD
                If (Local0)
                {
                    If ((Local0 & HDMM))
                    {
                        Return (0x1F)
                    }
                }

                Return (0x1D)
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                Local0 = (NXTD & HDMM) /* \_SB_.PCI0.PEGR.GFX0.HDMM */
                If (Local0)
                {
                    Return (0x01)
                }

                Return (0x00)
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                If ((Arg0 & 0x40000000))
                {
                    If ((Arg0 & 0x80000000))
                    {
                        DONE = One
                    }
                }
            }
        }

        Device (LCDD)
        {
            Name (_ADR, 0x0110)  // _ADR: Address
            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Local0 = \_SB.AVLD
                If (Local0)
                {
                    If ((Local0 & LCDM))
                    {
                        Return (0x1F)
                    }
                }

                Return (0x1D)
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                Local0 = (NXTD & LCDM) /* \_SB_.PCI0.PEGR.GFX0.LCDM */
                If (Local0)
                {
                    Return (0x01)
                }

                Return (0x00)
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                If ((Arg0 & 0x40000000))
                {
                    If ((Arg0 & 0x80000000))
                    {
                        DONE = One
                    }
                }

                DONE = One
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                Local0 = 0x00
                Local4 = \_SB.BRTI
                Local4 <<= 0x04
                While ((Local0 < 0x0B))
                {
                    Local3 = (0x0B - Local0)
                    Local3 -= 0x01
                    Local3 = (Local4 + Local3)
                    Local1 = DerefOf (PWBT [Local3])
                    Local2 = ((Local1 * 0x64) / 0xFF)
                    BLAC [Local0] = Local2
                    Local0++
                }

                Return (BLAC) /* \_SB_.PCI0.PEGR.GFX0.BLAC */
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                Local0 = GCBL (Arg0)
                \_SB.LBTN = ((0x0B - 0x01) - Local0)
                STBR ()
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                Return (\_SB.LBTN)
            }
        }

        Method (SWHD, 1, Serialized)
        {
            \_SB.PCI0.GFX0.HWHG (Arg0)
        }

        Method (GCDD, 0, NotSerialized)
        {
            If ((Acquire (\_SB.MPAR, 0xFFFF) == 0x00))
            {
                \_SB.PINX = 0x80000000
                ISMI (0x9C)
                Release (\_SB.MPAR)
            }

            Return (\_SB.ACTD)
        }

        Method (GCDS, 0, NotSerialized)
        {
            Return (GCDD ())
        }

        Method (GNDD, 0, NotSerialized)
        {
            If ((Acquire (\_SB.MPAR, 0xFFFF) == 0x00))
            {
                \_SB.PINX = 0x80000002
                ISMI (0x9C)
                Release (\_SB.MPAR)
            }

            Return (\_SB.SETD)
        }

        Method (ADVD, 0, NotSerialized)
        {
            Return (\_SB.PCI0.GFX0.HDVG ())
        }

        Method (UPBL, 0, NotSerialized)
        {
            If ((\_SB.PCI0.GFX0.HGAP == 0x02))
            {
                Notify (\_SB.PCI0.GFX0.LCDD, 0x86) // Device-Specific
                Notify (LCDD, 0x86) // Device-Specific
            }
        }

        Method (DWBL, 0, NotSerialized)
        {
            If ((\_SB.PCI0.GFX0.HGAP == 0x02))
            {
                Notify (\_SB.PCI0.GFX0.LCDD, 0x87) // Device-Specific
                Notify (LCDD, 0x87) // Device-Specific
            }
        }

        Method (NATK, 0, NotSerialized)
        {
            Return (One)
        }

        Method (GCBL, 1, NotSerialized)
        {
            Local0 = 0x00
            Arg0 &= 0x7FFFFFFF
            While ((Local0 < 0x0B))
            {
                Local1 = DerefOf (BLAC [Local0])
                If ((Local1 <= Arg0))
                {
                    Break
                }

                Local0++
            }

            If ((Local0 >= 0x0B))
            {
                Local2 = (0x0B - 0x01)
            }
            Else
            {
                Local2 = Local0
            }

            Return (Local2)
        }

        Method (_ROM, 2, NotSerialized)  // _ROM: Read-Only Memory
        {
            Local0 = (Arg0 + RBUF) /* \_SB_.RBUF */
            Local1 = (Arg1 << 0x03)
            Name (VBUF, Buffer (Arg1){})
            OperationRegion (VROM, SystemMemory, Local0, Local1)
            Field (VROM, ByteAcc, NoLock, Preserve)
            {
                ROMI,   65536
            }

            VBUF = ROMI /* \_SB_.PCI0.PEGR.GFX0._ROM.ROMI */
            Return (VBUF) /* \_SB_.PCI0.PEGR.GFX0._ROM.VBUF */
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            Return (\_SB.PCI0.GFX0._DSM (Arg0, Arg1, Arg2, Arg3))
        }
    }

    Scope (\)
    {
    }

    Scope (\_SB.PCI0)
    {
        OperationRegion (HOSG, PCI_Config, 0x00, 0x0100)
        Field (HOSG, ByteAcc, NoLock, Preserve)
        {
            REG0,   32, 
            REG1,   32, 
            REG2,   32, 
            Offset (0x54), 
                ,   1, 
            D1EN,   1
        }

        OperationRegion (MCHB, SystemMemory, 0xFED10000, 0x4000)
        Field (MCHB, DWordAcc, Lock, Preserve)
        {
            Offset (0xC14), 
            CLKD,   6
        }

        Method (NWM1, 1, NotSerialized)
        {
            Notify (WMI1, Arg0)
        }

        Device (WMI1)
        {
            Name (_HID, "pnp0c14")  // _HID: Hardware ID
            Name (_UID, "OPT1")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                /* 0010 */  0x4D, 0x58, 0x01, 0x02                           // MX..
            })
            Method (WMMX, 3, NotSerialized)
            {
                CreateDWordField (Arg2, Zero, FUNC)
                If ((FUNC == 0x4D53445F))
                {
                    If ((SizeOf (Arg2) >= 0x1C))
                    {
                        CreateField (Arg2, Zero, 0x80, MUID)
                        CreateDWordField (Arg2, 0x10, REVI)
                        CreateDWordField (Arg2, 0x14, SFNC)
                        CreateField (Arg2, 0xE0, 0x20, XRG0)
                        Return (\_SB.PCI0.GFX0._DSM (MUID, REVI, SFNC, XRG0))
                    }
                }

                If ((FUNC == 0x47504F4E))
                {
                    \_SB.PCI0.PEGR.GFX0.DGPS = One
                    \_SB.PCI0.PEGR.GFX0._PS0 ()
                }

                Return (Zero)
            }
        }
    }

    Scope (\)
    {
        Name (OMPR, 0x02)
        Name (HHPS, 0x00)
        Name (OPVK, Buffer (0xE2)
        {
            /* 0000 */  0x33, 0x7A, 0x56, 0x7D, 0x47, 0x91, 0x24, 0x5A,  // 3zV}G.$Z
            /* 0008 */  0x4B, 0x56, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x32, 0x37, 0x34, 0x35, 0x39, 0x31, 0x32, 0x35,  // 27459125
            /* 0018 */  0x33, 0x36, 0x38, 0x37, 0x47, 0x65, 0x6E, 0x75,  // 3687Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x4F, 0x70, 0x74,  // fied Opt
            /* 0038 */  0x69, 0x6D, 0x75, 0x73, 0x20, 0x52, 0x65, 0x61,  // imus Rea
            /* 0040 */  0x64, 0x79, 0x20, 0x4D, 0x6F, 0x74, 0x68, 0x65,  // dy Mothe
            /* 0048 */  0x72, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x20, 0x66,  // rboard f
            /* 0050 */  0x6F, 0x72, 0x20, 0x61, 0x73, 0x75, 0x73, 0x20,  // or asus 
            /* 0058 */  0x6E, 0x36, 0x31, 0x6A, 0x76, 0x20, 0x62, 0x75,  // n61jv bu
            /* 0060 */  0x67, 0x20, 0x36, 0x34, 0x33, 0x35, 0x38, 0x20,  // g 64358 
            /* 0068 */  0x2D, 0x20, 0x21, 0x2A, 0x4E, 0x59, 0x32, 0x42,  // - !*NY2B
            /* 0070 */  0x37, 0x5B, 0x4C, 0x5E, 0x4A, 0x40, 0x3B, 0x41,  // 7[L^J@;A
            /* 0078 */  0x52, 0x43, 0x5F, 0x31, 0x3E, 0x41, 0x23, 0x2D,  // RC_1>A#-
            /* 0080 */  0x27, 0x4F, 0x3F, 0x25, 0x24, 0x48, 0x2C, 0x43,  // 'O?%$H,C
            /* 0088 */  0x48, 0x4C, 0x48, 0x5B, 0x5D, 0x45, 0x54, 0x45,  // HLH[]ETE
            /* 0090 */  0x50, 0x35, 0x2F, 0x4B, 0x29, 0x33, 0x59, 0x26,  // P5/K)3Y&
            /* 0098 */  0x3D, 0x33, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70,  // =3 - Cop
            /* 00A0 */  0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32,  // yright 2
            /* 00A8 */  0x30, 0x30, 0x39, 0x20, 0x4E, 0x56, 0x49, 0x44,  // 009 NVID
            /* 00B0 */  0x49, 0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F,  // IA Corpo
            /* 00B8 */  0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41,  // ration A
            /* 00C0 */  0x6C, 0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74,  // ll Right
            /* 00C8 */  0x73, 0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,  // s Reserv
            /* 00D0 */  0x65, 0x64, 0x2D, 0x32, 0x37, 0x34, 0x35, 0x39,  // ed-27459
            /* 00D8 */  0x31, 0x32, 0x35, 0x33, 0x36, 0x38, 0x37, 0x28,  // 1253687(
            /* 00E0 */  0x52, 0x29                                       // R)
        })
        OperationRegion (SBGP, SystemIO, 0x0500, 0x4A)
        Field (SBGP, ByteAcc, Lock, Preserve)
        {
            Offset (0x0C), 
                ,   17, 
            PI17,   1, 
            Offset (0x38), 
                ,   5, 
            PI37,   1, 
                ,   12, 
            PO50,   1, 
                ,   1, 
            PO52,   1, 
            PO53,   1, 
            PO54,   1, 
            Offset (0x48), 
                ,   3
        }

        Method (GTHS, 0, Serialized)
        {
            Return (0x00)
        }

        Method (OEMS, 1, NotSerialized)
        {
        }

        Method (SOEM, 1, NotSerialized)
        {
            \_SB.SLPT = Arg0
        }

        Method (OEMW, 1, NotSerialized)
        {
            \_SB.SLPT = Zero
            If (\_SB.ACPS)
            {
                If ((\_SB.CTBO == 0x01))
                {
                    \OBCP (0x00)
                }
            }
            ElseIf ((\_SB.CTBO == 0x01))
            {
                If (\_SB.PCI0.PEGR.GFX0.PRST ())
                {
                    \OBCP (0x01)
                }
                Else
                {
                    \OBCP (0x00)
                }
            }
        }

        Method (OBCP, 1, Serialized)
        {
            OperationRegion (MCBA, SystemMemory, 0xFED10000, 0x8000)
            Field (MCBA, ByteAcc, NoLock, Preserve)
            {
                Offset (0x5990), 
                PRPL,   8
            }

            If (Arg0)
            {
                PRPL = \_SB.CPUH
            }
            Else
            {
                PRPL = 0xFF
            }
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Method (TSDS, 0, Serialized)
        {
            WRAM (0x052E, 0x00)
            WRAM (0x052F, 0x00)
            WRAM (0x052B, 0x00)
            WRAM (0x0520, 0x95)
            WRAM (0x0521, 0x8D)
        }

        Method (TSES, 0, Serialized)
        {
            WRAM (0x052E, 0x00)
            WRAM (0x052F, 0x00)
            WRAM (0x052B, 0x9E)
            WRAM (0x0520, 0x97)
            WRAM (0x0521, 0xAD)
        }
    }

    Scope (\)
    {
        Method (GACS, 0, Serialized)
        {
            Local0 = \_SB.PCI0.LPCB.EC0.RPIN (0x03)
            Local0 ^= 0x01
            Return (Local0)
        }

        Method (GDCS, 1, Serialized)
        {
            Local0 = \_SB.PCI0.LPCB.EC0.RPIN (0x04)
            If (Arg0)
            {
                Local0 = \_SB.PCI0.LPCB.EC0.RPIN (0x05)
            }

            Local0 ^= 0x01
            Return (Local0)
        }

        Method (GDCP, 1, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                If (Arg0)
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B1DC
                }
                Else
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B0DC
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (GFCC, 1, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                If (Arg0)
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B1FC
                }
                Else
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B0FC
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (GBDV, 1, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                If (Arg0)
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B1DV
                }
                Else
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B0DV
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (GBCR, 1, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                If (Arg0)
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B1CC
                }
                Else
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B0CC
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (CHGS, 1, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                If (Arg0)
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.EB1S
                }
                Else
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.EB0S
                }

                If ((Local0 != 0xFF))
                {
                    Local0 &= 0x02
                }
                Else
                {
                    Local0 = Zero
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (GBRC, 1, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                If (Arg0)
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B1RC
                }
                Else
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B0RC
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (GBVT, 1, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                If (Arg0)
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B1VL
                }
                Else
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.B0VL
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BCLE, 1, Serialized)
        {
            If (Arg0)
            {
                If (\_SB.PCI0.LPCB.EC0.ECAV ())
                {
                    Local1 = \_SB.PCI0.LPCB.EC0.EB1S
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = 0x00
                        }
                        ElseIf ((Local1 == 0x02))
                        {
                            Local0 = 0x01
                        }
                        ElseIf ((Local1 == 0x10))
                        {
                            Local0 = 0x01
                        }
                    }

                    Local0 = Ones
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
            Else
            {
                If (\_SB.PCI0.LPCB.EC0.ECAV ())
                {
                    Local1 = \_SB.PCI0.LPCB.EC0.EB0S
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = 0x00
                        }
                        ElseIf ((Local1 == 0x02))
                        {
                            Local0 = 0x01
                        }
                        ElseIf ((Local1 == 0x10))
                        {
                            Local0 = 0x01
                        }
                    }

                    Local0 = Ones
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
        }

        Method (GFAN, 0, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.EC0.TAH0
                Local0 &= 0xFFFF
                If ((Local0 != 0x00))
                {
                    If ((Local0 == 0xFFFF))
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Local1 = 0x80
                        Local2 = 0x02
                        Local3 = (Local1 * Local2)
                        Local4 = (Local0 * Local3)
                        Divide (0x03938700, Local4, Local5, Local6)
                        Local6 *= 0x0A
                        Local0 = Local6
                    }
                }

                Divide (Local0, 0x64, Local1, Local0)
                Local0 += 0x01
                If ((Local0 <= 0x3C))
                {
                    \_TZ.FANS = Local0
                }
                Else
                {
                    Local0 = \_TZ.FANS
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (RFSE, 0, NotSerialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Local1 = \_SB.PCI0.LPCB.EC0.RFOV (0x00)
                If ((Local1 < 0x80))
                {
                    If ((Local1 < 0x0A))
                    {
                        Local0 = 0x00
                    }
                    Else
                    {
                        Local0 = 0x01
                    }
                }
                ElseIf ((Local1 < 0xF5))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = 0x0F
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (GTMP, 0, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ECPU
                If ((Local0 < 0x80))
                {
                    \_TZ.LTMP = Local0
                }
            }

            Return (\_TZ.LTMP)
        }

        Method (GLTM, 0, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.EC0.TH0L
                If ((Local0 < 0x80))
                {
                    \_TZ.STMP = Local0
                }
            }

            Return (\_TZ.STMP)
        }

        Method (GCRT, 0, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ECRT
                If ((Local0 < 0x80))
                {
                    \_TZ.TCRT = Local0
                }
            }

            Return (\_TZ.TCRT)
        }

        Method (GPSV, 0, Serialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.EC0.EPSV
                If ((Local0 < 0x80))
                {
                    \_TZ.TPSV = Local0
                }
            }

            Return (\_TZ.TPSV)
        }

        Method (GLID, 0, Serialized)
        {
            Local0 = \_SB.PCI0.LPCB.EC0.RPIN (0x06)
            If ((Local0 != 0x00))
            {
                Local0 = One
            }

            If ((\_SB.VGAF & 0x01))
            {
                \_SB.PCI0.GFX0.CLID = 0x01
            }

            Return (Local0)
        }

        Method (TGLD, 0, Serialized)
        {
        }

        Method (OWGD, 1, Serialized)
        {
            If (Arg0)
            {
                GL02 |= 0x40
            }
            Else
            {
                GL02 &= 0xBF
            }
        }

        Method (WBLD, 1, Serialized)
        {
            If (Arg0)
            {
                GL02 |= 0x40
            }
            Else
            {
                GL02 &= 0xBF
            }
        }

        Method (OWLD, 1, Serialized)
        {
            \_SB.WRST = Arg0
            If (Arg0)
            {
                If (((\_SB.ATKD.WAPF && 0x05) == 0x00))
                {
                    GP28 |= 0x01
                }
            }
            ElseIf (((\_SB.ATKD.WAPF && 0x05) == 0x00))
            {
                GP28 &= 0x00
            }
        }

        Method (OBTD, 1, Serialized)
        {
            \_SB.BRST = Arg0
            If (Arg0)
            {
                GL07 |= 0x02
            }
            Else
            {
                GL07 &= 0xFD
            }
        }

        Method (OWMD, 1, Serialized)
        {
            \_SB.WMST = Arg0
            Return (0x01)
        }

        Method (OHWR, 0, Serialized)
        {
            Local0 = Zero
            Local0 |= (\_SB.BLTS << 0x08)
            Local0 |= (\_SB.WLSS << 0x07)
            Return (Local0)
        }

        Method (ODWR, 0, Serialized)
        {
            Local0 = 0x00
            Local0 |= 0x08
            Return (Local0)
        }

        Method (OQDC, 0, Serialized)
        {
            Local0 = 0x02
            Return (Local0)
        }

        Method (OQDG, 0, Serialized)
        {
            Local0 = 0x02
            Return (Local0)
        }

        Method (OQDS, 0, Serialized)
        {
            Local0 = 0x02
            Return (Local0)
        }

        Method (OQDM, 0, Serialized)
        {
            Local0 = 0x02
            If (\_SB.PCI0.LPCB.EC0.RPIN (0x1D))
            {
                Local0 = 0x01
            }
            Else
            {
                Local0 = 0x00
            }

            Return (Local0)
        }

        Method (ONDC, 0, Serialized)
        {
            Return (0x00)
        }

        Method (ONDG, 0, Serialized)
        {
            Return (0x00)
        }

        Method (ONDS, 0, Serialized)
        {
            Return (0x00)
        }

        Method (ONDM, 0, Serialized)
        {
            \_SB.PCI0.LPCB.EC0.SPIN (0x1D, 0x00)
            Return (0x01)
        }

        Method (OFDC, 0, Serialized)
        {
            Return (0x00)
        }

        Method (OFDG, 0, Serialized)
        {
            Return (0x00)
        }

        Method (OFDS, 0, Serialized)
        {
            Return (0x00)
        }

        Method (OFDM, 0, Serialized)
        {
            \_SB.PCI0.LPCB.EC0.SPIN (0x1D, 0x01)
            Return (0x01)
        }

        Method (GBTL, 0, Serialized)
        {
            Return (\_SB.PCI0.LPCB.EC0.RPIN (0x00))
        }

        Method (SBTL, 1, Serialized)
        {
            \_SB.PCI0.LPCB.EC0.SPIN (0x00, Arg0)
        }
    }

    Name (\_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    If (SS1)
    {
        Name (\_S1, Package (0x04)  // _S1_: S1 System State
        {
            0x01, 
            0x00, 
            0x00, 
            0x00
        })
    }

    If (SS3)
    {
        Name (\_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            0x00, 
            0x00, 
            0x00
        })
    }

    If (SS4)
    {
        Name (\_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            0x00, 
            0x00, 
            0x00
        })
    }

    Name (\_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \SOEM (Arg0)
            \_SB.SARM (Arg0)
            \NBFS (Arg0)
            \OEMS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \NBWK (Arg0)
        \OEMW (Arg0)
    }
}



ECDT
----
[000h 0000   4]                    Signature : "ECDT"    [Embedded Controller Boot Resources Table]
[004h 0004   4]                 Table Length : 000000C1
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0C
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "NoteBook"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000000


[024h 0036  12]      Command/Status Register : [Generic Address Structure]
[024h 0036   1]                     Space ID : 01 [SystemIO]
[025h 0037   1]                    Bit Width : 08
[026h 0038   1]                   Bit Offset : 00
[027h 0039   1]         Encoded Access Width : 00 [Undefined/Legacy]
[028h 0040   8]                      Address : 0000000000000066

[030h 0048  12]                Data Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 01 [SystemIO]
[031h 0049   1]                    Bit Width : 08
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 00 [Undefined/Legacy]
[034h 0052   8]                      Address : 0000000000000062

[03Ch 0060   4]                          UID : 00000000
[040h 0064   1]                   GPE Number : 1B
[041h 0065  19]                     Namepath : "\_SB.PCI0.LPCB.EC0"

Raw Table Data: Length 193 (0xC1)

    0000: 45 43 44 54 C1 00 00 00 01 0C 5F 41 53 55 53 5F  // ECDT......_ASUS_
    0010: 4E 6F 74 65 42 6F 6F 6B 04 20 22 06 41 4D 49 20  // NoteBook. ".AMI 
    0020: 00 00 00 00 01 08 00 00 66 00 00 00 00 00 00 00  // ........f.......
    0030: 01 08 00 00 62 00 00 00 00 00 00 00 00 00 00 00  // ....b...........
    0040: 1B 5C 5F 53 42 2E 50 43 49 30 2E 4C 50 43 42 2E  // .\_SB.PCI0.LPCB.
    0050: 45 43 30 00 00 00 00 00 00 00 00 00 00 00 00 00  // EC0.............
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00                                               // .


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : B2
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "NoteBook"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : AAFE5E40
[028h 0040   4]                 DSDT Address : AAF7C018
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 80
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000450
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 85
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 7D
[06Bh 0107   1]        RTC Month Alarm Index : 7E
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000386A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000AAFE5D40
[08Ch 0140   8]                 DSDT Address : 00000000AAF7C018
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000450

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 80
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 04 B2 5F 41 53 55 53 5F  // FACP......_ASUS_
    0010: 4E 6F 74 65 42 6F 6F 6B 04 20 22 06 4D 53 46 54  // NoteBook. ".MSFT
    0020: 13 00 01 00 40 5E FE AA 18 C0 F7 AA 01 02 09 00  // ....@^..........
    0030: B2 00 00 00 A0 A1 00 80 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 00 85  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 7D 7E 32 13 00 00  // e.........}~2...
    0070: A5 86 03 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 40 5D FE AA 00 00 00 00 18 C0 F7 AA  // ....@]..........
    0090: 00 00 00 00 01 20 00 00 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
    00B0: 04 04 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 50 04 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 00 08 04 00 00 00 00 00 00 01 80 00 00  // . ..............
    00E0: 20 04 00 00 00 00 00 00 01 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00                                      // ....


FACS1
-----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 00
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FACS2
-----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 86
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "NoteBook"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "AMI."
[020h 0032   4]        Asl Compiler Revision : 00000003

[024h 0036   4]            Hardware Block ID : 8086A701

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 86 5F 41 53 55 53 5F  // HPET8....._ASUS_
    0010: 4E 6F 74 65 42 6F 6F 6B 04 20 22 06 41 4D 49 2E  // NoteBook. ".AMI.
    0020: 03 00 00 00 01 A7 86 80 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4F
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "NoteBook"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 4F 5F 41 53 55 53 5F  // MCFG<....O_ASUS_
    0010: 4E 6F 74 65 42 6F 6F 6B 04 20 22 06 4D 53 46 54  // NoteBook. ".MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0B
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 06222004
[01Ch 0028   4]              Asl Compiler ID : "ASUS"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 83 A4 C2 5B \
    5A 18 2A FE 79 59 DB D9 7E EA 3D 26 20 88 CE 6B \
    D0 EA 79 D3 85 2B 95 00 9A C4 55 BF EA 39 A0 8F \
    BE 23 61 59 60 73 C8 2C 5B E5 A8 8A 7F 74 F5 BF \
    CB 00 2D 99 76 AB 94 8C E3 CF 9E 47 28 61 91 B2 \
    B5 F8 C8 DB D9 87 04 8A 48 EB 9B 7F B3 38 0A FB \
    6F DD 86 75 A5 42 49 33 E2 2E 39 BE 64 8E 49 7D \
    78 DD 83 36 62 88 67 02 77 79 AF 3B 2F D4 04 53 \
    F9 0E DA C5 38 F5 4B 7F 9C 69 63 B1 01 00 00 00 \
    B6 00 00 00 00 00 02 00 5F 41 53 55 53 5F 4E 6F \
    74 65 62 6F 6F 6B 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 9E D5 31 E9 0B 0F 73 70 D1 14 24 5D 8E 2C \
    20 5C 93 CF C6 6A EE 30 93 12 AA 53 BA 3B 8F BE \
    76 9A ED AD 91 F3 7E 5E 31 01 F6 A3 B2 E8 28 B5 \
    20 F4 DE 57 92 E4 51 42 0D 94 E3 D8 33 50 8D E5 \
    66 D2 47 94 AA 57 B7 CB C2 9A 6E B1 9D 71 24 AD \
    33 0D 3C A8 26 71 3D B9 14 AA 1F A1 05 1A 8A FB \
    63 E6 DD 7F 98 E2 5B E1 6B 8E 47 E1 F7 18 12 B1 \
    7E 50 B3 71 05 A7 EF 12 9E C7 09 AD 29 46 DD 75 \
    52 E2 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 0B 5F 41 53 55 53 5F  // SLICv....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 04 20 22 06 41 53 55 53  // Notebook. ".ASUS
    0020: 01 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 83 A4 C2 5B 5A 18 2A FE 79 59 DB D9 7E EA 3D 26  // ...[Z.*.yY..~.=&
    0050: 20 88 CE 6B D0 EA 79 D3 85 2B 95 00 9A C4 55 BF  //  ..k..y..+....U.
    0060: EA 39 A0 8F BE 23 61 59 60 73 C8 2C 5B E5 A8 8A  // .9...#aY`s.,[...
    0070: 7F 74 F5 BF CB 00 2D 99 76 AB 94 8C E3 CF 9E 47  // .t....-.v......G
    0080: 28 61 91 B2 B5 F8 C8 DB D9 87 04 8A 48 EB 9B 7F  // (a..........H...
    0090: B3 38 0A FB 6F DD 86 75 A5 42 49 33 E2 2E 39 BE  // .8..o..u.BI3..9.
    00A0: 64 8E 49 7D 78 DD 83 36 62 88 67 02 77 79 AF 3B  // d.I}x..6b.g.wy.;
    00B0: 2F D4 04 53 F9 0E DA C5 38 F5 4B 7F 9C 69 63 B1  // /..S....8.K..ic.
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 5F 41 53 55  // ............_ASU
    00D0: 53 5F 4E 6F 74 65 62 6F 6F 6B 57 49 4E 44 4F 57  // S_NotebookWINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 9E D5 31 E9 0B 0F 73 70 D1 14  // ........1...sp..
    0100: 24 5D 8E 2C 20 5C 93 CF C6 6A EE 30 93 12 AA 53  // $]., \...j.0...S
    0110: BA 3B 8F BE 76 9A ED AD 91 F3 7E 5E 31 01 F6 A3  // .;..v.....~^1...
    0120: B2 E8 28 B5 20 F4 DE 57 92 E4 51 42 0D 94 E3 D8  // ..(. ..W..QB....
    0130: 33 50 8D E5 66 D2 47 94 AA 57 B7 CB C2 9A 6E B1  // 3P..f.G..W....n.
    0140: 9D 71 24 AD 33 0D 3C A8 26 71 3D B9 14 AA 1F A1  // .q$.3.<.&q=.....
    0150: 05 1A 8A FB 63 E6 DD 7F 98 E2 5B E1 6B 8E 47 E1  // ....c.....[.k.G.
    0160: F7 18 12 B1 7E 50 B3 71 05 A7 EF 12 9E C7 09 AD  // ....~P.q........
    0170: 29 46 DD 75 52 E2                                // )F.uR.


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x01ECD018, 
            0x00000799, 
            "APIST   ", 
            0xAADBDA98, 
            0x00000303, 
            "CPU0CST ", 
            0xAADBC798, 
            0x0000073F, 
            "APCST   ", 
            0xAADBBD98, 
            0x00000119
        })
        Name (CFGD, 0x0071F6FF)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & 0x3E))
            {
                If ((((CFGD & 0x0400) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC0 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC0 & 0x18))
            {
                APCT ()
            }

            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x2E) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & One))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & One))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS4)
            CreateDWordField (Arg0, 0x04, CAP4)
            If (((STS4 == 0x06) || (STS4 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS4 & One))
            {
                CAP4 &= 0x0BFF
                Return (Zero)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4.GCAP.CAP4 */
            If (((PDC4 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC4 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS5)
            CreateDWordField (Arg0, 0x04, CAP5)
            If (((STS5 == 0x06) || (STS5 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS5 & One))
            {
                CAP5 &= 0x0BFF
                Return (Zero)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5.GCAP.CAP5 */
            If (((PDC5 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC5 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS6)
            CreateDWordField (Arg0, 0x04, CAP6)
            If (((STS6 == 0x06) || (STS6 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS6 & One))
            {
                CAP6 &= 0x0BFF
                Return (Zero)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6.GCAP.CAP6 */
            If (((PDC6 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC6 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS7)
            CreateDWordField (Arg0, 0x04, CAP7)
            If (((STS7 == 0x06) || (STS7 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS7 & One))
            {
                CAP7 &= 0x0BFF
                Return (Zero)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7.GCAP.CAP7 */
            If (((PDC7 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC7 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "SataRe", "SataTabl", 0x00001000)
{
    External (_SB_.PCI0.SAT0, DeviceObj)
    External (DSSP, UnknownObj)
    External (FHPP, UnknownObj)

    Scope (\)
    {
        Name (STFE, Buffer (0x07)
        {
             0x10, 0x06, 0x00, 0x00, 0x00, 0x00, 0xEF         // .......
        })
        Name (STFD, Buffer (0x07)
        {
             0x90, 0x06, 0x00, 0x00, 0x00, 0x00, 0xEF         // .......
        })
        Name (FZTF, Buffer (0x07)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         // .......
        })
        Name (DCFL, Buffer (0x07)
        {
             0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1         // .......
        })
        Name (SCBF, Buffer (0x15){})
        Name (CMDC, 0x00)
        Method (GTFB, 2, Serialized)
        {
            Local0 = (CMDC * 0x38)
            CreateField (SCBF, Local0, 0x38, CMDX)
            Local0 = (CMDC * 0x07)
            CreateByteField (SCBF, (Local0 + 0x01), A001)
            CMDX = Arg0
            A001 = Arg1
            CMDC++
        }
    }

    Scope (\_SB.PCI0.SAT0)
    {
        Device (SPT0)
        {
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = 0x00
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, 0x00)
                GTFB (DCFL, 0x00)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT1)
        {
            Name (_ADR, 0x0001FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = 0x00
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, 0x00)
                GTFB (DCFL, 0x00)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT2)
        {
            Name (_ADR, 0x0002FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = 0x00
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, 0x00)
                GTFB (DCFL, 0x00)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT3)
        {
            Name (_ADR, 0x0003FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = 0x00
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, 0x00)
                GTFB (DCFL, 0x00)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT4)
        {
            Name (_ADR, 0x0004FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = 0x00
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, 0x00)
                GTFB (DCFL, 0x00)
                Return (SCBF) /* \SCBF */
            }
        }

        Device (SPT5)
        {
            Name (_ADR, 0x0005FFFF)  // _ADR: Address
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = 0x00
                If ((DSSP || FHPP))
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, 0x00)
                GTFB (DCFL, 0x00)
                Return (SCBF) /* \SCBF */
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_SB_.CPUP, UnknownObj)
    External (_SB_.SLMT, UnknownObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)
    External (TCNT, IntObj)

    Scope (\_PR.CPU0)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Local0 = (\_SB.CPUP - \_SB.SLMT) /* External reference */
            Return (Local0)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & One))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x08)
        {
            Package (0x06)
            {
                0x000008FD, 
                0x000088B8, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000088B8, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000064A6, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000056F9, 
                0x0000006E, 
                0x0000000A, 
                0x00000383, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000049D8, 
                0x0000006E, 
                0x0000000A, 
                0x00000483, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00003E7C, 
                0x0000006E, 
                0x0000000A, 
                0x00000583, 
                0x00000005
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000326B, 
                0x0000006E, 
                0x0000000A, 
                0x00000683, 
                0x00000006
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000026E4, 
                0x0000006E, 
                0x0000000A, 
                0x00000783, 
                0x00000007
            }
        })
        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Name (_PSS, Package (0x08)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008FD, 
                0x000088B8, 
                0x0000000A, 
                0x0000000A, 
                0x00001D00, 
                0x00001D00
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000088B8, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000064A6, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000056F9, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000049D8, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00003E7C, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000326B, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000026E4, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU0.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU0.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (_SB_.PCI0.AC0_._PSR, IntObj)
    External (CFGD, UnknownObj)
    External (FMBL, UnknownObj)
    External (PDC0, UnknownObj)
    External (PFLV, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (C1LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000000, // Address
                    0x01,               // Access Size
                    )
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C1LH, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C3LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000010, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x02, 
            0x9C, 
            0x01F4
        })
        Name (C7SM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000031, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xC7, 
            0xC8
        })
        Name (C7LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000030, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xC7, 
            0xC8
        })
        Name (C6LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000020, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xB5, 
            0x015E
        })
        Name (C3LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000414, // Address
                    ,)
            }, 

            0x02, 
            0x9C, 
            0x01F4
        })
        Name (C6LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000415, // Address
                    ,)
            }, 

            0x03, 
            0xB5, 
            0x015E
        })
        Name (C7LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000416, // Address
                    ,)
            }, 

            0x03, 
            0xC7, 
            0xC8
        })
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00){}, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00){}
        })
        Name (CSTF, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            PWRS = \_SB.PCI0.AC0._PSR /* External reference */
            If ((!CSTF && (CFGD & 0x00400000)))
            {
                C3LI [0x02] = 0x50
                C3LM [0x02] = 0x50
                C7SM [0x02] = 0x6D
                C7LM [0x02] = 0x6D
                C6LM [0x02] = 0x68
                C7LI [0x02] = 0x6D
                C6LI [0x02] = 0x68
                CSTF = Ones
            }

            If (((CFGD & 0x1000) && (PDC0 & 0x0200)))
            {
                If ((!PWRS || (PFLV != FMBL)))
                {
                    If ((CFGD & 0x00010000))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C7SM /* \_PR_.CPU0.C7SM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7SM /* \_PR_.CPU0.C7SM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x20))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C7LM /* \_PR_.CPU0.C7LM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7LM /* \_PR_.CPU0.C7LM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x10))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C6LM /* \_PR_.CPU0.C6LM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C6LM /* \_PR_.CPU0.C6LM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x08))
                    {
                        C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        C2ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                    Else
                    {
                        C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        Return (C1ST) /* \_PR_.CPU0.C1ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C6LM /* \_PR_.CPU0.C6LM */
                    DerefOf (C2ST [0x02]) [One] = 0x02
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                ElseIf ((CFGD & 0x08))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If (((CFGD & 0x1000) && (PDC0 & 0x0100)))
            {
                If ((!PWRS || (PFLV != FMBL)))
                {
                    If ((CFGD & 0x20))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                            C3ST [0x03] = C7LI /* \_PR_.CPU0.C7LI */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7LI /* \_PR_.CPU0.C7LI */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x10))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                            C3ST [0x03] = C6LI /* \_PR_.CPU0.C6LI */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x08))
                    {
                        C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                    Else
                    {
                        C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        Return (C1ST) /* \_PR_.CPU0.C1ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                    DerefOf (C2ST [0x02]) [One] = 0x02
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                ElseIf ((CFGD & 0x08))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If ((!PWRS || (PFLV != FMBL)))
            {
                If ((CFGD & 0x20))
                {
                    If ((CFGD & 0x08))
                    {
                        C3ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        C3ST [0x03] = C7LI /* \_PR_.CPU0.C7LI */
                        Return (C3ST) /* \_PR_.CPU0.C3ST */
                    }
                    Else
                    {
                        C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C2ST [0x02] = C7LI /* \_PR_.CPU0.C7LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    If ((CFGD & 0x08))
                    {
                        C3ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        C3ST [0x03] = C6LI /* \_PR_.CPU0.C6LI */
                        Return (C3ST) /* \_PR_.CPU0.C3ST */
                    }
                    Else
                    {
                        C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                }

                If ((CFGD & 0x08))
                {
                    C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                    C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If ((CFGD & 0x10))
            {
                C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            ElseIf ((CFGD & 0x08))
            {
                C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            Else
            {
                C1ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                Return (C1ST) /* \_PR_.CPU0.C1ST */
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{
    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSD, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



