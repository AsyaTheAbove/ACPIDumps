
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20180531
Copyright (c) 2000 - 2018 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "_ASUS_"  "Notebook"  0x01072009  "MSFT"   0x00010013
 02)  APIC  0x00000062  0x03  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 03)  SSDT  0x0000168E  0x02  "AMD   "  "ALIB    "  0x00000001  "MSFT"   0x04000000
 04)  DSDT  0x0000BB27  0x02  "_ASUS_"  "Notebook"  0x00000214  "INTL"   0x20091112
 05)  FACP  0x000000F4  0x04  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 06)  SSDT  0x000003EB  0x01  "AMD   "  "POWERNOW"  0x00000001  "AMD "   0x00000001
 07)  HPET  0x00000038  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00000004
 08)  FACS  0x00000040  0x02

Found 8 ACPI tables in /root/HW_PROBE/LATEST/hw.info/logs/acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000062
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : FA
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 01 [I/O APIC]
[03Dh 0061   1]                       Length : 0C
[03Eh 0062   1]                  I/O Apic ID : 03
[03Fh 0063   1]                     Reserved : 00
[040h 0064   4]                      Address : FEC00000
[044h 0068   4]                    Interrupt : 00000000

[048h 0072   1]                Subtable Type : 02 [Interrupt Source Override]
[049h 0073   1]                       Length : 0A
[04Ah 0074   1]                          Bus : 00
[04Bh 0075   1]                       Source : 00
[04Ch 0076   4]                    Interrupt : 00000002
[050h 0080   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[052h 0082   1]                Subtable Type : 02 [Interrupt Source Override]
[053h 0083   1]                       Length : 0A
[054h 0084   1]                          Bus : 00
[055h 0085   1]                       Source : 09
[056h 0086   4]                    Interrupt : 00000009
[05Ah 0090   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[05Ch 0092   1]                Subtable Type : 04 [Local APIC NMI]
[05Dh 0093   1]                       Length : 06
[05Eh 0094   1]                 Processor ID : FF
[05Fh 0095   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[061h 0097   1]         Interrupt Input LINT : 01

Raw Table Data: Length 98 (0x62)

    0000: 41 50 49 43 62 00 00 00 03 FA 5F 41 53 55 53 5F  // APICb....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 01 01 00 00 00 01 0C 03 00  // ................
    0040: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0050: 00 00 02 0A 00 09 09 00 00 00 0F 00 04 06 FF 05  // ................
    0060: 00 01                                            // ..


DSDT
----
DefinitionBlock ("", "DSDT", 2, "_ASUS_", "Notebook", 0x00000214)
{
    External (_PR_.P001._PPC, UnknownObj)
    External (_PR_.P001._PSS, UnknownObj)
    External (_PR_.P002._PPC, UnknownObj)
    External (_PR_.TCNM, UnknownObj)
    External (ALIB, IntObj)

    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (SPIB, 0xFEC10000)
    Name (SPIL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (HPTL, 0x1000)
    Name (GIOB, 0xFED80100)
    Name (IOMB, 0xFED80D00)
    Name (SMIB, 0xFED80200)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xE0000000)
    Name (PEBL, 0x10000000)
    Name (DSSP, Zero)
    Name (FHPP, One)
    Name (ATIS, 0x55)
    Name (MBEC, Zero)
    Name (OSFG, Zero)
    Name (FUIF, 0xA5)
    Name (SMIP, 0xB2)
    Name (SOAO, 0x4D)
    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
            \_SB.DIAG (0xAA)
            \_SB.IRQC ()
        }
        Else
        {
            DBG8 = 0xAC
            \_SB.DIAG (0xAC)
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = One
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Linux"))
            {
                OSVR = 0x03
            }

            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x4400)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x10)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ICMS,   8, 
        DCMS,   8, 
        Offset (0x0E), 
        P80,    8
    }

    IndexField (ICMS, DCMS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        BS_A,   32
    }

    OperationRegion (CFGS, SystemMemory, BS_A, 0x0100)
    Field (CFGS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x0C), 
        PCIE,   32, 
        Offset (0x7F), 
            ,   5, 
        GGN2,   1, 
        Offset (0x87), 
        GECE,   1, 
        IR_E,   1, 
        Offset (0x93), 
            ,   5, 
        OSCF,   1, 
        Offset (0x9E), 
        PRS0,   1, 
        DET0,   1, 
        Offset (0xA2), 
        PRS1,   1, 
        DET1,   1, 
        Offset (0xA6), 
        PRS2,   1, 
        DET2,   1, 
        Offset (0xAA), 
        PRS3,   1, 
        DET3,   1, 
        Offset (0xB2), 
            ,   6, 
        ABPS,   1, 
            ,   3, 
        GPPS,   1
    }

    OperationRegion (CMPT, SystemIO, 0x0C50, 0x03)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        CMID,   8, 
            ,   6, 
        GPCT,   2, 
        GP0I,   1, 
        GP1I,   1, 
        GP2I,   1, 
        GP3I,   1, 
        GP4I,   1, 
        GP5I,   1, 
        GP6I,   1, 
        GP7I,   1
    }

    OperationRegion (PCFG, SystemMemory, PCIE, 0x02000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x20078), 
        Offset (0x2007A), 
        PMSA,   1, 
        Offset (0x28078), 
        Offset (0x2807A), 
        PMSB,   1, 
        Offset (0x48078), 
        Offset (0x4807A), 
        PMSC,   1, 
        Offset (0x8800A), 
        STCL,   16, 
        Offset (0xA0004), 
        SMIE,   1, 
        SMME,   1, 
        Offset (0xA0008), 
        RVID,   8, 
        Offset (0xA0014), 
        SMB1,   32, 
        Offset (0xA0082), 
            ,   2, 
        G31O,   1, 
        Offset (0xA00E1), 
            ,   6, 
        ACIR,   1, 
        Offset (0xA4004), 
        PCMD,   2, 
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        INPM,   8, 
        DAPM,   8
    }

    IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
    {
        Offset (0x24), 
        MMSO,   32, 
        Offset (0x60), 
        P1EB,   16
    }

    OperationRegion (ERMM, SystemMemory, MMSO, 0x1000)
    Field (ERMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x132), 
            ,   7, 
        GP51,   1, 
        Offset (0x136), 
            ,   7, 
        GP55,   1, 
        Offset (0x13A), 
            ,   7, 
        GP59,   1, 
        Offset (0x13D), 
        GP62,   8, 
        Offset (0x13F), 
            ,   7, 
        GP64,   1, 
        Offset (0x164), 
            ,   7, 
        Offset (0x165), 
            ,   5, 
        P66E,   1, 
        P66O,   1, 
        P66I,   1, 
        Offset (0x16A), 
            ,   7, 
        GE11,   1, 
            ,   7, 
        GE12,   1, 
        Offset (0x16E), 
            ,   7, 
        BATS,   1, 
        Offset (0x1FF), 
        E00S,   1, 
        E01S,   1, 
            ,   3, 
        E05S,   1, 
        E06S,   1, 
        Offset (0x200), 
        Offset (0x207), 
            ,   1, 
        E01C,   1, 
            ,   3, 
            ,   1, 
        E06C,   1, 
        Offset (0x208), 
            ,   1, 
            ,   1, 
            ,   3, 
        Offset (0x287), 
            ,   1, 
        CLPS,   1, 
        Offset (0x298), 
            ,   7, 
        G15A,   1, 
        Offset (0x2AF), 
            ,   2, 
        SLPS,   2, 
        Offset (0x376), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BA), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BD), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3EF), 
        PHYD,   1, 
            ,   1, 
            ,   1, 
        US5R,   1, 
        Offset (0x3F5), 
        GECD,   1
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        INAB = Arg0
        Return (DAAB) /* \DAAB */
    }

    Method (WTAB, 2, NotSerialized)
    {
        INAB = Arg0
        DAAB = Arg1
    }

    Method (RWAB, 3, NotSerialized)
    {
        Local0 = (RDAB (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (GHPS, 2, NotSerialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, Zero)
                DET0 = One
            }

            If ((Arg1 == 0x02))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, Zero)
                DET2 = One
            }

            Stall (0xC8)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
                DET0 = Zero
            }

            If ((Arg1 == 0x02))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
                DET2 = Zero
            }

            Stall (0xC8)
        }

        If (GGN2)
        {
            If ((Arg0 == Zero))
            {
                GEN2 ()
                Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                Local0 &= 0xFF
                Local1 = 0x01F4
                While (((Local1 > Zero) && (Local0 != 0x10)))
                {
                    Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                    Local0 &= 0xFF
                    Local1--
                    Stall (0xC8)
                    Stall (0xC8)
                }

                If ((Local0 != 0x10))
                {
                    GEN1 ()
                }
            }
        }
    }

    Method (GEN2, 0, NotSerialized)
    {
        TLS2 = 0x02
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, One)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
        RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
        Stall (0xC8)
        Stall (0xC8)
    }

    Method (GEN1, 0, NotSerialized)
    {
        TLS2 = One
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, Zero)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        Stall (0xC8)
        Stall (0xC8)
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        PCMD = One
        P80 = Arg0
        CPMS ()
        CPMS ()
        PEWS = One
    }

    Method (SWAK, 1, NotSerialized)
    {
        CPMS ()
        CPMS ()
        PEWS = One
    }

    Method (TRMD, 1, NotSerialized)
    {
    }

    Method (CPMS, 0, NotSerialized)
    {
        If ((EPNM == Zero))
        {
            PMSA = One
            PMSB = One
            PMSC = One
            PMS0 = One
            PMS1 = One
            PMS2 = One
            PMS3 = One
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x17)
        {
            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }
        })
        Name (AR00, Package (0x17)
        {
            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }
        })
        Name (PR20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR14, Package (0x02)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }
        })
        Name (AR14, Package (0x02)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }
        })
        Name (PR15, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }
        })
        Name (AR15, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }
        })
        Name (PR16, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }
        })
        Name (AR16, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }
        })
        Name (PR17, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }
        })
        Name (AR17, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }
        })
        Name (PR18, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR18, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x14
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00180000)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Name (CPRB, One)
            Name (LVGA, 0x55)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xB0000000)
            Name (MBL, 0x50000000)
            Name (MABL, 0x00000000)
            Name (MABH, 0x00000000)
            Name (MALL, 0x00000000)
            Name (MALH, 0x00000000)
            Name (MAML, 0x00000000)
            Name (MAMH, 0x00000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y00)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y01, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDFC0000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y06)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y08, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y07, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                BreakPoint
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y00._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y00._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y00._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y03._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y03._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y03._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, LEN3)  // _LEN: Length
                    MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                    Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                    MAX3 = (MIN3 + Local0--)
                    If ((MALH || MALL))
                    {
                        CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MN8L)  // _MIN: Minimum Base Address
                        Local0 = (0xB4 + 0x04)
                        CreateDWordField (CRS1, Local0, MN8H)
                        MN8L = MABL /* \_SB_.PCI0.MABL */
                        MN8H = MABH /* \_SB_.PCI0.MABH */
                        CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MX8L)  // _MAX: Maximum Base Address
                        Local1 = (0xBC + 0x04)
                        CreateDWordField (CRS1, Local1, MX8H)
                        CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LN8L)  // _LEN: Length
                        Local2 = (0xCC + 0x04)
                        CreateDWordField (CRS1, Local2, LN8H)
                        MN8L = MABL /* \_SB_.PCI0.MABL */
                        MN8H = MABH /* \_SB_.PCI0.MABH */
                        LN8L = MALL /* \_SB_.PCI0.MALL */
                        LN8H = MALH /* \_SB_.PCI0.MALH */
                        MX8L = MAML /* \_SB_.PCI0.MAML */
                        MX8H = MAMH /* \_SB_.PCI0.MAMH */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y06._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y06._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y06._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y07._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y07._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y07._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y09._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y09._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y09._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0A._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0A._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0A._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = MBL /* \_SB_.PCI0.MBL_ */
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    If ((MALH || MALL))
                    {
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, MN9L)  // _MIN: Minimum Base Address
                        Local0 = (0x72 + 0x04)
                        CreateDWordField (CRS2, Local0, MN9H)
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, MX9L)  // _MAX: Maximum Base Address
                        Local1 = (0x7A + 0x04)
                        CreateDWordField (CRS2, Local1, MX9H)
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, LN9L)  // _LEN: Length
                        Local2 = (0x8A + 0x04)
                        CreateDWordField (CRS2, Local2, LN9H)
                        MN9L = MABL /* \_SB_.PCI0.MABL */
                        MN9H = MABH /* \_SB_.PCI0.MABH */
                        LN9L = MALL /* \_SB_.PCI0.MALL */
                        LN9H = MALH /* \_SB_.PCI0.MALH */
                        MX9L = MAML /* \_SB_.PCI0.MAML */
                        MX9H = MAMH /* \_SB_.PCI0.MAMH */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Scope (\_SB)
            {
                Scope (PCI0)
                {
                    Method (XCMP, 2, NotSerialized)
                    {
                        If ((0x10 != SizeOf (Arg0)))
                        {
                            Return (Zero)
                        }

                        If ((0x10 != SizeOf (Arg1)))
                        {
                            Return (Zero)
                        }

                        Local0 = Zero
                        While ((Local0 < 0x10))
                        {
                            If ((DerefOf (Arg0 [Local0]) != DerefOf (Arg1 [Local0]
                                )))
                            {
                                Return (Zero)
                            }

                            Local0++
                        }

                        Return (One)
                    }

                    Device (AMDN)
                    {
                        Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                        Name (_UID, 0xC8)  // _UID: Unique ID
                        Name (_STA, 0x0F)  // _STA: Status
                        Name (NPTR, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000000,         // Address Length
                                _Y0C)
                        })
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y0C._LEN, PL)  // _LEN: Length
                            CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y0C._BAS, PB)  // _BAS: Base Address
                            PB = PEBS /* \PEBS */
                            PL = PEBL /* \PEBL */
                            Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                        }
                    }
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SMBS, PCI_Config, Zero, 0x0100)
                Field (SMBS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    REV,    8, 
                    Offset (0x62), 
                    I1F,    1, 
                    I12F,   1, 
                        ,   2, 
                    MT3A,   1, 
                    Offset (0xF8), 
                    EIDX,   8, 
                    Offset (0xFC), 
                    EDAT,   32
                }

                IndexField (EIDX, EDAT, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    Offset (0x05), 
                        ,   3, 
                    G39E,   1, 
                    G41E,   1, 
                    Offset (0x06), 
                    Offset (0x07), 
                        ,   3, 
                    G39O,   1, 
                    G41O,   1
                }

                OperationRegion (WIDE, PCI_Config, 0xAD, One)
                Field (WIDE, AnyAcc, NoLock, Preserve)
                {
                    DUM1,   4, 
                    SOPT,   1
                }
            }

            Device (IDEC)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x5A, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    0x0F, 
                    Zero
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    Zero
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    Zero
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, AnyAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F)
                    Local1 = (Arg0 >> 0x04)
                    Return ((0x1E * ((Local0 + One) + (Local1 + One)
                        )))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, PIT1)
                    CreateByteField (Arg0, One, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateDWordField (BUF, Zero, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If ((PICX & One))
                    {
                        Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                    }

                    PIO0 = GETT (PIT0)
                    PIO1 = GETT (PIT1)
                    If ((UDCX & One))
                    {
                        FLAG |= One
                        DMA0 = DerefOf (UDMT [(UDMX & 0x0F)])
                    }
                    Else
                    {
                        DMA0 = GETT (MDT0)
                    }

                    If ((UDCX & 0x02))
                    {
                        FLAG |= 0x04
                        DMA1 = DerefOf (UDMT [(UDMX >> 0x04)])
                    }
                    Else
                    {
                        DMA1 = GETT (MDT1)
                    }

                    FLAG |= 0x1A
                    Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, Zero, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                    })
                    CreateByteField (BUF, Zero, PIT1)
                    CreateByteField (BUF, One, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Local0 = Match (PIOT, MLE, PIO0, MTR, Zero, Zero)
                    Local0 %= 0x05
                    Local1 = Match (PIOT, MLE, PIO1, MTR, Zero, Zero)
                    Local1 %= 0x05
                    PIMX = ((Local1 << 0x04) | Local0)
                    PIT0 = DerefOf (PITR [Local0])
                    PIT1 = DerefOf (PITR [Local1])
                    If ((FLAG & One))
                    {
                        Local0 = Match (UDMT, MLE, DMA0, MTR, Zero, Zero)
                        Local0 %= 0x07
                        UDMX |= Local0
                        UDCX |= One
                    }
                    ElseIf ((DMA0 != 0xFFFFFFFF))
                    {
                        Local0 = Match (MDMT, MLE, DMA0, MTR, Zero, Zero)
                        MDT0 = DerefOf (MDTR [Local0])
                    }

                    If ((FLAG & 0x04))
                    {
                        Local0 = Match (UDMT, MLE, DMA1, MTR, Zero, Zero)
                        Local0 %= 0x07
                        UDMX |= (Local0 << 0x04)
                        UDCX |= 0x02
                    }
                    ElseIf ((DMA1 != 0xFFFFFFFF))
                    {
                        Local0 = Match (MDMT, MLE, DMA1, MTR, Zero, Zero)
                        MDT1 = DerefOf (MDTR [Local0])
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.STM_.BUF_ */
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, Zero, MDT1)
                    CreateByteField (Arg1, One, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If ((Arg0 == 0xA0))
                    {
                        Local0 = (PIMX & 0x0F)
                        Local1 = MDT0 /* \_SB_.PCI0.IDEC.GTF_.MDT0 */
                        Local2 = (UDCX & One)
                        Local3 = (UDMX & 0x0F)
                    }
                    Else
                    {
                        Local0 = (PIMX >> 0x04)
                        Local1 = MDT1 /* \_SB_.PCI0.IDEC.GTF_.MDT1 */
                        Local2 = (UDCX & 0x02)
                        Local3 = (UDMX >> 0x04)
                    }

                    Name (BUF, Buffer (0x15)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xF5                     // .....
                    })
                    CreateByteField (BUF, One, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    CreateByteField (BUF, 0x13, CMDC)
                    CMDA = Arg0
                    CMDB = Arg0
                    CMDC = Arg0
                    PMOD = (Local0 | 0x08)
                    If (Local2)
                    {
                        DMOD = (Local3 | 0x40)
                    }
                    Else
                    {
                        Local4 = Match (MDMT, MLE, GETT (Local1), MTR, Zero, Zero)
                        If ((Local4 < 0x03))
                        {
                            DMOD = (0x20 | Local4)
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.GTF_.BUF_ */
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            VPIT = PPIT /* \_SB_.PCI0.IDEC.PPIT */
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIC = PPIC /* \_SB_.PCI0.IDEC.PPIC */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                        }
                        Else
                        {
                            VPIT = SPIT /* \_SB_.PCI0.IDEC.SPIT */
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIC = SPIC /* \_SB_.PCI0.IDEC.SPIC */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                        }

                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            PPIT = VPIT /* \_SB_.PCI0.IDEC.PRID._STM.VPIT */
                            PMDT = VMDT /* \_SB_.PCI0.IDEC.PRID._STM.VMDT */
                            PPIM = VPIM /* \_SB_.PCI0.IDEC.PRID._STM.VPIM */
                            PUDC = VUDC /* \_SB_.PCI0.IDEC.PRID._STM.VUDC */
                            PUDM = VUDM /* \_SB_.PCI0.IDEC.PRID._STM.VUDM */
                        }
                        Else
                        {
                            SPIT = VPIT /* \_SB_.PCI0.IDEC.PRID._STM.VPIT */
                            SMDT = VMDT /* \_SB_.PCI0.IDEC.PRID._STM.VMDT */
                            SPIM = VPIM /* \_SB_.PCI0.IDEC.PRID._STM.VPIM */
                            SUDC = VUDC /* \_SB_.PCI0.IDEC.PRID._STM.VUDC */
                            SUDM = VUDM /* \_SB_.PCI0.IDEC.PRID._STM.VUDM */
                        }
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }
                            Else
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }

                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }
                            Else
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }

                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            VPIT = SPIT /* \_SB_.PCI0.IDEC.SPIT */
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIC = SPIC /* \_SB_.PCI0.IDEC.SPIC */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                        }
                        Else
                        {
                            VPIT = PPIT /* \_SB_.PCI0.IDEC.PPIT */
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIC = PPIC /* \_SB_.PCI0.IDEC.PPIC */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                        }

                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            SPIT = VPIT /* \_SB_.PCI0.IDEC.SECD._STM.VPIT */
                            SMDT = VMDT /* \_SB_.PCI0.IDEC.SECD._STM.VMDT */
                            SPIM = VPIM /* \_SB_.PCI0.IDEC.SECD._STM.VPIM */
                            SUDC = VUDC /* \_SB_.PCI0.IDEC.SECD._STM.VUDC */
                            SUDM = VUDM /* \_SB_.PCI0.IDEC.SECD._STM.VUDM */
                        }
                        Else
                        {
                            PPIT = VPIT /* \_SB_.PCI0.IDEC.SECD._STM.VPIT */
                            PMDT = VMDT /* \_SB_.PCI0.IDEC.SECD._STM.VMDT */
                            PPIM = VPIM /* \_SB_.PCI0.IDEC.SECD._STM.VPIM */
                            PUDC = VUDC /* \_SB_.PCI0.IDEC.SECD._STM.VUDC */
                            PUDM = VUDM /* \_SB_.PCI0.IDEC.SECD._STM.VUDM */
                        }
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }
                            Else
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }

                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }
                            Else
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }

                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }

            Device (SBAZ)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, Zero, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x1B, 0x04))
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                OperationRegion (RMBS, PCI_Config, Zero, 0x0100)
                Field (RMBS, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x6C), 
                    LR2S,   16, 
                    LR2E,   16
                }

                Method (SPTS, 1, NotSerialized)
                {
                }

                Method (SWAK, 1, NotSerialized)
                {
                }

                Device (S800)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x0700)  // _UID: Unique ID
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x040B,             // Range Minimum
                            0x040B,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C52,             // Range Minimum
                            0x0C52,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD2,             // Range Minimum
                            0x0CD2,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD4,             // Range Minimum
                            0x0CD4,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD6,             // Range Minimum
                            0x0CD6,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD8,             // Range Minimum
                            0x0CD8,             // Range Maximum
                            0x00,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0D)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y10)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0F)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0E)
                        IO (Decode16,
                            0x0900,             // Range Minimum
                            0x0900,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0910,             // Range Minimum
                            0x0910,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x00,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y11)
                        Memory32Fixed (ReadWrite,
                            0xFEE00000,         // Address Base
                            0x00001000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED80000,         // Address Base
                            0x00010000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED61000,         // Address Base
                            0x00010000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y12)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y13)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y14)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0D._MIN, PBB)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0D._MAX, PBH)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.S800._Y0D._LEN, PML)  // _LEN: Length
                        PBB = PMBS /* \PMBS */
                        PBH = PMBS /* \PMBS */
                        PML = PMLN /* \PMLN */
                        If (SMBB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0E._MIN, SMB1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0E._MAX, SMH1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.S800._Y0E._LEN, SML1)  // _LEN: Length
                            SMB1 = SMBB /* \SMBB */
                            SMH1 = SMBB /* \SMBB */
                            SML1 = SMBL /* \SMBL */
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0F._MIN, SMB0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0F._MAX, SMH0)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.S800._Y0F._LEN, SML0)  // _LEN: Length
                            SMB0 = SMB0 /* \_SB_.PCI0.SBRG.S800._CRS.SMB0 */
                            SMH0 = SMB0 /* \_SB_.PCI0.SBRG.S800._CRS.SMB0 */
                            SML0 = SMBM /* \SMBM */
                        }

                        If (GPBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y10._MIN, IGB)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y10._MAX, IGH)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.S800._Y10._LEN, IGL)  // _LEN: Length
                            IGB = GPBS /* \GPBS */
                            IGH = GPBS /* \GPBS */
                            IGL = GPLN /* \GPLN */
                        }

                        If (APCB)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y11._BAS, APB)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y11._LEN, APL)  // _LEN: Length
                            APB = APCB /* \APCB */
                            APL = APCL /* \APCL */
                        }

                        If (SPIB)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y12._BAS, SPIB)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y12._LEN, SPIL)  // _LEN: Length
                            SPIB = \SPIB
                            SPIL = \SPIL
                        }

                        If (HPTB)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y13._BAS, HXTB)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y13._LEN, HXTL)  // _LEN: Length
                            HXTB = HPTB /* \HPTB */
                            HXTL = HPTL /* \HPTL */
                        }

                        CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y14._BAS, ROMB)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y14._LEN, ROML)  // _LEN: Length
                        If (LR2S)
                        {
                            ROMB = (LR2S << 0x10)
                            ROML = (((LR2E - LR2S) + One) << 0x10)
                        }
                        Else
                        {
                            ROMB = ROMS /* \ROMS */
                            ROML = (Zero - ROMS) /* \ROMS */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.S800.CRS_ */
                    }
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((MBEC & 0xFFFF))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.RMSC.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.RMSC.CRS2 */
                        }
                    }
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (NBRM)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x99)  // _UID: Unique ID
                    Name (CRS, Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (CRS) /* \_SB_.PCI0.SBRG.NBRM.CRS_ */
                    }
                }

                Device (PS2M)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If ((TPVD == One))
                        {
                            Return (0x02018416)
                        }
                        Else
                        {
                            Return (0x41C18C4E)
                        }
                    }

                    Name (_CID, Package (0x05)  // _CID: Compatible ID
                    {
                        EisaId ("PNP0F13") /* PS/2 Mouse */, 
                        EisaId ("PNP0F0E"), 
                        EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */, 
                        EisaId ("PNP0F12"), 
                        EisaId ("PNP0F0B")
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local1 = (MICE & One)
                        If (Local1)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }
                }

                Scope (\)
                {
                    Name (MSFG, One)
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            FixedIO (
                                0x0060,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0064,             // Address
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }
                }

                Scope (\)
                {
                    Name (KBFG, One)
                }
            }

            Device (P0PC)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x04))
                }
            }

            Device (GEC)
            {
                Name (_ADR, 0x00140006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x13, 0x04))
                }
            }

            Device (UHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC2)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC4)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC6)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC7)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                If ((STCL == 0x0101))
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                    }

                    OperationRegion (SACS, PCI_Config, Zero, 0x40)
                    Field (SACS, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x24), 
                        STB5,   32
                    }

                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Device (PRID)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (PRIS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x120), 
                                    ,   7, 
                                PMBY,   1, 
                                Offset (0x128), 
                                PMS0,   4, 
                                Offset (0x129), 
                                PMS1,   4, 
                                Offset (0x220), 
                                    ,   7, 
                                PSBY,   1, 
                                Offset (0x228), 
                                PSS0,   4, 
                                Offset (0x229), 
                                PSS1,   4, 
                                Offset (0x2A0), 
                                    ,   7
                            }

                            If (((OSTY == 0x06) || (OSTY == 0x04)))
                            {
                                If (PMS1)
                                {
                                    Local0 = 0x32
                                    While (((PMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (PSS1)
                                {
                                    Local0 = 0x32
                                    While (((PSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            PRIS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            PRIS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (PRIS) /* \_SB_.PCI0.SATA.PRID.PRIS */
                        }

                        Device (P_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x128), 
                                    PMS0,   4, 
                                    Offset (0x129), 
                                    PMS1,   4
                                }

                                If (~(PMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x120), 
                                        ,   7, 
                                    PMBY,   1
                                }

                                Local0 = 0x32
                                While (((PMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D0.S12P */
                            }
                        }

                        Device (P_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x228), 
                                    PSS0,   4, 
                                    Offset (0x229), 
                                    PSS1,   4
                                }

                                If (~(PSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x220), 
                                        ,   7, 
                                    PSBY,   1
                                }

                                Local0 = 0x32
                                While (((PSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D1.S12P */
                            }
                        }
                    }

                    Device (SECD)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (SECS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x1A0), 
                                    ,   7, 
                                SMBY,   1, 
                                Offset (0x1A8), 
                                SMS0,   4, 
                                Offset (0x1A9), 
                                SMS1,   4, 
                                Offset (0x2A0), 
                                    ,   7, 
                                SSBY,   1, 
                                Offset (0x2A8), 
                                SSS0,   4, 
                                Offset (0x2A9), 
                                SSS1,   4, 
                                Offset (0x2AC)
                            }

                            If (((OSTY == 0x06) || (OSTY == 0x04)))
                            {
                                If (SMS1)
                                {
                                    Local0 = 0x32
                                    While (((SMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (SSS1)
                                {
                                    Local0 = 0x32
                                    While (((SSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            SECS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SECS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (SECS) /* \_SB_.PCI0.SATA.SECD.SECS */
                        }

                        Device (S_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A8), 
                                    SMS0,   4, 
                                    Offset (0x1A9), 
                                    SMS1,   4
                                }

                                If (~(SMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x1000)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A0), 
                                        ,   7, 
                                    SMBY,   1
                                }

                                Local0 = 0x32
                                While (((SMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D0.S12P */
                            }
                        }

                        Device (S_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A8), 
                                    SSS0,   4, 
                                    Offset (0x2A9), 
                                    SSS1,   4
                                }

                                If (~(SSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A0), 
                                        ,   7, 
                                    SSBY,   1
                                }

                                Local0 = 0x32
                                While (((SSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D1.S12P */
                            }
                        }
                    }
                }
            }

            Device (PE20)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0F, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR20) /* \_SB_.AR20 */
                    }

                    Return (PR20) /* \_SB_.PR20 */
                }
            }

            Device (PE21)
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x10, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR21) /* \_SB_.AR21 */
                    }

                    Return (PR21) /* \_SB_.PR21 */
                }
            }

            Device (PE22)
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR22) /* \_SB_.AR22 */
                    }

                    Return (PR22) /* \_SB_.PR22 */
                }
            }

            Device (PE23)
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x12, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR23) /* \_SB_.AR23 */
                    }

                    Return (PR23) /* \_SB_.PR23 */
                }
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Scope (\)
                {
                    OperationRegion (ATFB, SystemMemory, 0x975E8018, 0x0105)
                    Field (ATFB, AnyAcc, NoLock, Preserve)
                    {
                        BCMD,   8, 
                        DID,    32, 
                        INFO,   2048
                    }

                    Field (ATFB, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x05), 
                        INF0,   8, 
                        INF1,   8, 
                        INF2,   8, 
                        INF3,   8, 
                        INF4,   8, 
                        INF5,   8, 
                        INF6,   8, 
                        INF7,   8
                    }

                    Field (ATFB, AnyAcc, NoLock, Preserve)
                    {
                        AccessAs (ByteAcc, 0x00), 
                        Offset (0x05), 
                        INF,    8
                    }
                }

                OperationRegion (NBRV, PCI_Config, 0x08, One)
                Field (NBRV, ByteAcc, NoLock, Preserve)
                {
                    PREV,   8
                }

                OperationRegion (NBBR, PCI_Config, 0x1C, 0x08)
                Field (NBBR, DWordAcc, NoLock, Preserve)
                {
                    BR3L,   32, 
                    BR3H,   32
                }

                OperationRegion (NBBI, PCI_Config, 0x84, 0x04)
                Field (NBBI, DWordAcc, NoLock, Preserve)
                {
                    PARB,   32
                }

                OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
                Field (NBMS, DWordAcc, NoLock, Preserve)
                {
                    MIDX,   32, 
                    MIDR,   32
                }

                Mutex (NBMM, 0x00)
                Method (NBMR, 1, NotSerialized)
                {
                    Acquire (NBMM, 0xFFFF)
                    Local0 = (Arg0 & 0x7F)
                    MIDX = Local0
                    Local0 = MIDR /* \_SB_.PCI0.GNBD.MIDR */
                    MIDX = 0x7F
                    Release (NBMM)
                    Return (Local0)
                }

                Method (NBMW, 2, NotSerialized)
                {
                    Acquire (NBMM, 0xFFFF)
                    Local0 = (Arg0 & 0x7F)
                    Local0 |= 0x80
                    MIDX = Local0
                    MIDR = Arg1
                    MIDX = Local0 &= 0x7F
                    Release (NBMM)
                }

                OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
                Field (NBXP, DWordAcc, NoLock, Preserve)
                {
                    NBXI,   32, 
                    NBXD,   32
                }

                Mutex (NBXM, 0x00)
                Method (NBXR, 1, NotSerialized)
                {
                    Acquire (NBXM, 0xFFFF)
                    NBXI = Arg0
                    Local0 = NBXD /* \_SB_.PCI0.GNBD.NBXD */
                    NBXI = Zero
                    Release (NBXM)
                    Return (Local0)
                }

                Method (NBXW, 2, NotSerialized)
                {
                    Acquire (NBXM, 0xFFFF)
                    NBXI = Arg0
                    NBXD = Arg1
                    NBXI = Zero
                    Release (NBXM)
                }

                Method (GFXM, 0, NotSerialized)
                {
                    Local0 = NBMR (0x08)
                    Local0 &= 0x0F
                    Return (Local0)
                }

                Method (GPPM, 0, NotSerialized)
                {
                    Local0 = NBMR (0x67)
                    Local0 &= 0xF0
                    Return (Local0)
                }

                Method (GPPX, 0, NotSerialized)
                {
                    Local0 = NBMR (0x2D)
                    Local0 >>= 0x07
                    Local0 &= 0x0F
                    Return (Local0)
                }

                Method (XPTR, 2, NotSerialized)
                {
                    If (((Arg0 < 0x02) && (Arg0 > 0x07)))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Local0 = GPPM ()
                        Local1 = GPPX ()
                        Local0 = One
                        If ((Arg0 < 0x04))
                        {
                            Local1 = (Arg0 + 0x02)
                        }
                        Else
                        {
                            Local1 = (Arg0 + 0x11)
                        }

                        Local0 <<= Local1
                        Local2 = NBMR (0x08)
                        If (Arg1)
                        {
                            Local2 &= ~Local0
                        }
                        Else
                        {
                            Local2 |= Local0
                        }

                        NBMW (0x08, Local2)
                        Return (Ones)
                    }
                }

                Name (PX3L, 0x80000000)
                Name (PX3H, 0x80000000)
                Name (PX3S, 0x10000000)
                Name (PX3K, 0xF0000000)
                Mutex (BR3X, 0x00)
                Method (BR3M, 0, NotSerialized)
                {
                    Local0 = PARB /* \_SB_.PCI0.GNBD.PARB */
                    Local0 >>= 0x10
                    Local0 &= 0x07
                    If (Local0)
                    {
                        Local1 = (One << Local0)
                        Local1 = (0x1000 - Local1)
                        Local1 <<= 0x14
                        PX3K = Local1
                        Local0 = (0x00100000 >> Local0)
                        PX3S = Local0
                    }

                    Acquire (BR3X, 0xFFFF)
                    Local0 = NBMR (Zero)
                    Local0 &= 0xFFFFFFF7
                    NBMW (Zero, Local0)
                    Local0 = BR3L /* \_SB_.PCI0.GNBD.BR3L */
                    Local0 &= PX3K /* \_SB_.PCI0.GNBD.PX3K */
                    PX3L = Local0
                    Local0 = BR3H /* \_SB_.PCI0.GNBD.BR3H */
                    Local0 &= 0xFF
                    PX3H = Local0
                    Local0 = NBMR (Zero)
                    Local0 |= 0x08
                    NBMW (Zero, Local0)
                    Release (BR3X)
                    Return (PX3L) /* \_SB_.PCI0.GNBD.PX3L */
                }

                OperationRegion (NB2, PCI_Config, Zero, 0x0100)
                Field (NB2, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    MI,     32, 
                    MD,     32, 
                    Offset (0x90), 
                    TOM,    32, 
                    OI,     32, 
                    OD,     32, 
                    Offset (0xE0), 
                    LI,     32, 
                    LD,     32
                }

                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x18000000)
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y15)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GNBD.BROD._Y15._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GNBD.BROD._Y15._LEN, LEN1)  // _LEN: Length
                        LEN1 = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        BAS1 = (TOM - LEN1) /* \_SB_.PCI0.GNBD.BROD._CRS.LEN1 */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (VGA)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x2C), 
                    SVID,   32, 
                    Offset (0x4C), 
                    SMID,   32
                }

                Name (STAT, Zero)
                Name (GDTS, Zero)
                Name (CRTA, Zero)
                Name (LCDA, Zero)
                Name (DPTA, Zero)
                Name (DOSP, Zero)
                Name (BLVL, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x20, 0x30, 0x40, 0x50, 0x58, 0x60, 0x70,  // . 0@PX`p
                    /* 0008 */  0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xFF   // ........
                })
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSP = Arg0
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Return (Package (0x05)
                    {
                        0x00010100, 
                        0x00010110, 
                        0x0200, 
                        0x00010210, 
                        0x00010220
                    })
                }

                Device (CRT)
                {
                    Name (_ADR, 0x0100)  // _ADR: Address
                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Local0 = CRTA /* \_SB_.PCI0.VGA_.CRTA */
                        Return (Local0)
                    }
                }

                Device (LCD)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x0110)
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        If ((AF7E == 0x80000001))
                        {
                            Return (Package (0x11)
                            {
                                0x52, 
                                0x22, 
                                0x02, 
                                0x08, 
                                0x0E, 
                                0x16, 
                                0x1C, 
                                0x22, 
                                0x2A, 
                                0x30, 
                                0x36, 
                                0x3E, 
                                0x44, 
                                0x4B, 
                                0x52, 
                                0x58, 
                                0x64
                            })
                        }
                        Else
                        {
                            Return (Package (0x0D)
                            {
                                0x2D, 
                                0x2D, 
                                0x14, 
                                0x19, 
                                0x1E, 
                                0x23, 
                                0x28, 
                                0x2D, 
                                0x32, 
                                0x37, 
                                0x41, 
                                0x50, 
                                0x64
                            })
                        }
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        LBTN = Arg0
                        If ((AF7E == 0x80000001))
                        {
                            Divide (((Arg0 * 0x03) + 0x13), 0x14, Local1, Local0)
                            Local3 = DerefOf (BLVL [Local0])
                            AFN7 (Local3)
                        }
                        Else
                        {
                            Acquire (^^^SMBS.PSMX, 0xFFFF)
                            INF0 = One
                            INF1 = Arg0
                            BCMD = 0x8A
                            ^^^SBRG.SMIC = ATIS /* \ATIS */
                            Release (^^^SMBS.PSMX)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Local0 = LCDA /* \_SB_.PCI0.VGA_.LCDA */
                        Return (Local0)
                    }
                }

                Device (DPT)
                {
                    Name (_ADR, 0x0210)  // _ADR: Address
                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Local0 = DPTA /* \_SB_.PCI0.VGA_.DPTA */
                        Return (Local0)
                    }
                }
            }

            Device (BR15)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR15) /* \_SB_.AR15 */
                    }

                    Return (PR15) /* \_SB_.PR15 */
                }
            }

            Device (PCE6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR16) /* \_SB_.AR16 */
                    }

                    Return (PR16) /* \_SB_.PR16 */
                }
            }

            Device (PCE7)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR17) /* \_SB_.AR17 */
                    }

                    Return (PR17) /* \_SB_.PR17 */
                }
            }

            Device (PCE8)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR18) /* \_SB_.AR18 */
                    }

                    Return (PR18) /* \_SB_.PR18 */
                }
            }

            Device (PCE4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                OperationRegion (XPEX, SystemMemory, 0xE0020100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    Local0 = Zero
                    If ((VC0S & 0x00020000))
                    {
                        Local0 = Ones
                    }

                    Return (Local0)
                }

                Method (XPRD, 1, NotSerialized)
                {
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PCE4.XPID */
                    XPIR = Zero
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PCE4._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Local1 = Zero
                    Local0 = XPPB ()
                    If ((0x04 > Local0))
                    {
                        Local1 = Zero
                    }

                    If ((0x08 > Local0))
                    {
                        Local1 = 0x00010000
                    }

                    If ((0x0B > Local0))
                    {
                        Local1 = 0x00020000
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Local0 = XPPB ()
                    Local2 = ^^GNBD.GPPX ()
                    Local3 = ^^GNBD.GFXM ()
                    Local1 = Zero
                    If ((0x10 == Local0))
                    {
                        Local1 = 0xFFFF
                        If (Local3)
                        {
                            Local1 = 0x0F0F
                        }
                    }

                    If ((0x18 == Local0))
                    {
                        Local1 = 0xF0F0
                    }

                    If ((0x20 == Local0))
                    {
                        Local1 = 0x1010
                    }

                    If ((0x28 == Local0))
                    {
                        Local1 = 0x2020
                    }

                    If ((0x30 == Local0))
                    {
                        Local1 = 0x4040
                    }

                    If ((0x38 == Local0))
                    {
                        Local1 = 0x8080
                    }

                    If ((0x48 == Local0))
                    {
                        Local1 = Zero
                        If ((0x02 == Local2))
                        {
                            Local1 = 0x0303
                        }

                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0101
                        }
                    }

                    If ((0x50 == Local0))
                    {
                        Local1 = Zero
                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0202
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Local1 = XPPD ()
                    If ((Zero != Local1))
                    {
                        Local2 = ^^GNBD.NBXR ((0x65 + XPCN ()))
                        If (Arg0)
                        {
                            Local2 &= ~Local1
                        }
                        Else
                        {
                            Local2 |= Local1
                        }

                        ^^GNBD.NBXW ((0x65 + XPCN ()), Local2)
                    }
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PCE4.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PCE4.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPLL, 1, NotSerialized)
                {
                    Local0 = ^^GNBD.GFXM ()
                    Local1 = XPPB ()
                    Local2 = Zero
                    If ((0x10 == Local1))
                    {
                        Local2 = One
                        Local3 = 0x00770070
                        If (Local0)
                        {
                            Local3 = 0x00330030
                        }
                    }

                    If (((0x18 == Local1) && Local0))
                    {
                        Local2 = One
                        Local3 = 0x00440040
                    }

                    Local0 = ^^GNBD.NBMR (0x07)
                    Local1 = ^^GNBD.NBXR (0x65)
                    If ((Local0 && 0x0201F000))
                    {
                        Local4 = 0x00440040
                        Local5 = Local4
                        If ((~Local1 && 0xF0F0))
                        {
                            Local5 = Zero
                        }
                    }
                    Else
                    {
                        Local4 = 0x00110010
                        Local5 = Local4
                        If ((~Local1 && 0x0F0F))
                        {
                            Local5 = Zero
                        }
                    }

                    If (Local2)
                    {
                        Local6 = (Local3 | Local4)
                        Local0 = (Local5 & Local4)
                        Local7 = (Local3 | Local0)
                        Local0 = ^^GNBD.NBMR (0x2E)
                        If (Arg0)
                        {
                            Local0 &= ~Local6
                        }
                        Else
                        {
                            Local0 |= Local7
                        }

                        ^^GNBD.NBMW (0x2E, Local0)
                    }
                }

                Method (XPPR, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        XPLL (One)
                        XPLP (One)
                        Sleep (0xC8)
                        ^^GNBD.XPTR ((XPPB () << 0x03), One)
                        Sleep (0x14)
                    }
                    Else
                    {
                        ^^GNBD.XPTR ((XPPB () << 0x03), Zero)
                        XPLP (Zero)
                        XPLL (Zero)
                    }

                    Return (Ones)
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (STAT, Zero)
                    Name (GDTS, Zero)
                    Name (CRTA, Zero)
                    Name (LCDA, Zero)
                    Name (DPTA, Zero)
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSP, Zero)
                    Name (BLVL, Buffer (0x10)
                    {
                        /* 0000 */  0x00, 0x20, 0x30, 0x40, 0x50, 0x58, 0x60, 0x70,  // . 0@PX`p
                        /* 0008 */  0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xFF   // ........
                    })
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSP = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Device (CRT)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Local0 = CRTA /* \_SB_.PCI0.PCE4.VGA_.CRTA */
                            Return (Local0)
                        }
                    }

                    Device (LCD)
                    {
                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Local0 = LCDA /* \_SB_.PCI0.PCE4.VGA_.LCDA */
                            Return (Local0)
                        }

                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x0110)
                        }

                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            If ((^^^^VGA.AF7E == 0x80000001))
                            {
                                Return (Package (0x11)
                                {
                                    0x52, 
                                    0x22, 
                                    0x02, 
                                    0x08, 
                                    0x0E, 
                                    0x16, 
                                    0x1C, 
                                    0x22, 
                                    0x2A, 
                                    0x30, 
                                    0x36, 
                                    0x3E, 
                                    0x44, 
                                    0x4B, 
                                    0x52, 
                                    0x58, 
                                    0x64
                                })
                            }
                            Else
                            {
                                Return (Package (0x0D)
                                {
                                    0x2D, 
                                    0x2D, 
                                    0x14, 
                                    0x19, 
                                    0x1E, 
                                    0x23, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x37, 
                                    0x41, 
                                    0x50, 
                                    0x64
                                })
                            }
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            LBTN = Arg0
                            If ((^^^^VGA.AF7E == 0x80000001))
                            {
                                Divide (((Arg0 * 0x03) + 0x13), 0x14, Local1, Local0)
                                Local3 = DerefOf (BLVL [Local0])
                                ^^^^VGA.AFN7 (Local3)
                            }
                            Else
                            {
                                Acquire (^^^^SMBS.PSMX, 0xFFFF)
                                INF0 = One
                                INF1 = Arg0
                                BCMD = 0x8A
                                ^^^^SBRG.SMIC = ATIS /* \ATIS */
                                Release (^^^^SMBS.PSMX)
                            }
                        }
                    }

                    Device (DPT)
                    {
                        Name (_ADR, 0x0210)  // _ADR: Address
                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Local0 = DPTA /* \_SB_.PCI0.PCE4.VGA_.DPTA */
                            Return (Local0)
                        }
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }
                }

                Method (XPDT, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        Local0 = Zero
                        Local2 = Zero
                        While ((Local2 < 0x0F))
                        {
                            PDC2 = One
                            Local4 = One
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                Local6 = XPRD (0xA5)
                                Local6 &= 0x7F
                                If (((Local6 >= 0x10) && (Local6 != 0x7F)))
                                {
                                    Local4 = Zero
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                Local5 = XPDL ()
                                If (Local5)
                                {
                                    XPRT ()
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    INFO = (XPPB () << 0x03)
                                    BCMD = 0x87
                                    ^^SBRG.SMIC = Zero
                                    If ((XPR2 () == Ones))
                                    {
                                        Local0 = One
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        Local0 = Zero
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!Local0)
                        {
                            XPDT (Zero)
                            XPPR (Zero)
                            Return (Zero)
                        }

                        Return (Ones)
                    }
                    Else
                    {
                        PDC2 = One
                        Local7 = ^VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                        Sleep (0x0A)
                        Local4 = One
                        Local5 = 0x05
                        While ((Local4 && Local5))
                        {
                            Local6 = XPRD (0xA5)
                            Local6 &= 0x7F
                            If ((Local6 <= 0x04))
                            {
                                Local4 = Zero
                            }
                            Else
                            {
                                Local7 = ^VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                                Sleep (0x05)
                                Local5--
                            }
                        }

                        Return (Ones)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PR14) /* \_SB_.PR14 */
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.SBAZ, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.P0PC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L13, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.GEC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.UHC1, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC2, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC4, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC6, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC7, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.PE20, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.PE21, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L11, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.PE22, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L12, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.PE23, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x10), 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x15), 
            GEC,    8, 
            Offset (0x30), 
            USB1,   8, 
            USB2,   8, 
            USB3,   8, 
            USB4,   8, 
            USB5,   8, 
            USB6,   8, 
            USB7,   8, 
            Offset (0x40), 
            IDE,    8, 
            SATA,   8, 
            Offset (0x50), 
            GPP0,   8, 
            GPP1,   8, 
            GPP2,   8, 
            GPP3,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (IRQC, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
            GEC = Arg0
            GPP0 = Arg0
            GPP0 = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
            USB2 = Arg0
            USB4 = Arg0
            USB6 = Arg0
            GPP1 = Arg0
            IDE = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
            USB5 = Arg0
            USB7 = Arg0
            GPP2 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
            GPP3 = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    OperationRegion (EXBU, SystemMemory, 0x9761D018, 0x1015)
    Field (EXBU, AnyAcc, Lock, Preserve)
    {
        XID,    8, 
        FADR,   32, 
        FSIZ,   16, 
        FSTA,   16, 
        FSFN,   8, 
        BAML,   8, 
        BIPA,   32, 
        AMLA,   32, 
        RTCW,   16, 
        AMLB,   32768
    }

    Scope (_SB.PCI0.SBRG)
    {
        Method (RGPM, 0, NotSerialized)
        {
            Local0 = ^^SMBS.GPXC /* \_SB_.PCI0.SMBS.GPXC */
            Local0 &= 0xFFFFFFFFFFFFFF3F
            ^^SMBS.GPXC = Local0
            Local1 = ^^SMBS.CLGP /* \_SB_.PCI0.SMBS.CLGP */
            Return (Local1)
        }
    }

    Scope (_GPE)
    {
        Name (WLAN, One)
        Name (WLST, One)
    }

    Scope (_SB.PCI0.SMBS)
    {
        OperationRegion (LCLM, SystemIO, 0x0C50, 0x03)
        Field (LCLM, ByteAcc, NoLock, Preserve)
        {
            CLMI,   8, 
            CLMD,   8, 
            CLGP,   8
        }

        IndexField (CLMI, CLMD, ByteAcc, NoLock, Preserve)
        {
            IDRG,   8, 
            Offset (0x02), 
            TSTS,   8, 
            TINT,   8, 
            Offset (0x12), 
            I2CC,   8, 
            GPXC,   8
        }

        OperationRegion (GPIO, SystemMemory, GIOB, 0x0100)
        Field (GPIO, AnyAcc, NoLock, Preserve)
        {
            Offset (0x06), 
                ,   5, 
            G06E,   1, 
            G06O,   1, 
            G06I,   1, 
            G07B,   8, 
            Offset (0x0B), 
            G0BB,   8, 
            Offset (0x0E), 
            G0EB,   8, 
            Offset (0x14), 
                ,   5, 
            G14E,   1, 
            G14O,   1, 
            G14I,   1, 
                ,   5, 
            G15E,   1, 
            G15O,   1, 
            G15I,   1, 
            Offset (0x1C), 
                ,   7, 
            G1CI,   1, 
            Offset (0x2D), 
                ,   5, 
            G2DE,   1, 
            G2DO,   1, 
            G2DI,   1, 
            Offset (0x36), 
                ,   6, 
            G36O,   1, 
            G36I,   1, 
                ,   5, 
            G37E,   1, 
            G37O,   1, 
            G37I,   1, 
            Offset (0x65), 
                ,   7, 
            GE05,   1, 
            Offset (0x6F), 
                ,   7, 
            GE15,   1, 
                ,   7, 
            GE16,   1, 
            Offset (0x76), 
                ,   7, 
            GE22,   1, 
            Offset (0xAA), 
                ,   5, 
            GAAE,   1, 
            GAAO,   1, 
            GAAI,   1, 
            Offset (0xAF), 
            GAFB,   8, 
            GB0B,   8
        }

        OperationRegion (GPMX, SystemMemory, IOMB, 0x0100)
        Field (GPMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x06), 
            G06M,   8, 
            G07M,   8, 
            Offset (0x0B), 
            G0BM,   8, 
            Offset (0x0E), 
            G0EM,   8, 
            Offset (0x14), 
            G14M,   8, 
            G15M,   8, 
            Offset (0x1C), 
            G1CM,   8, 
            Offset (0x2D), 
            G2DM,   8, 
            Offset (0x37), 
            G37M,   8, 
            Offset (0x70), 
            G70M,   8, 
            Offset (0x76), 
            G76M,   8, 
            Offset (0xAF), 
            GAFM,   8, 
            GB0M,   8
        }

        OperationRegion (GEVT, SystemMemory, SMIB, 0x0100)
        Field (GEVT, AnyAcc, NoLock, Preserve)
        {
                ,   9, 
            GESA,   1, 
            Offset (0x08), 
                ,   5, 
            E05C,   1, 
            Offset (0x09), 
            E08C,   1, 
            E09C,   1, 
            Offset (0x0B), 
                ,   4, 
            E1CC,   1
        }
    }

    Scope (_SB.PCI0.GNBD)
    {
    }

    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Scope (_SB.PCI0.SBRG)
    {
        OperationRegion (SMIP, SystemIO, SMIO, One)
        Field (SMIP, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8
        }
    }

    Scope (_GPE)
    {
        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Name (HPOK, Zero)
            P80H = 0x66
            If (\_SB.PCI0.SMBS.E05C)
            {
                P80H = 0x11CC
                Sleep (0x14)
                Local0 = \_SB.PCI0.SMBS.GE05
                If (Local0)
                {
                    P80H = 0x12CC
                    \_SB.PCI0.SMBS.E05C = Zero
                    Debug = "HotPlug:04: Removal Event"
                    P80H = 0x0F05
                }
            }
            Else
            {
                Sleep (0x14)
                P80H = 0x21CC
                Local0 = \_SB.PCI0.SMBS.GE05
                If (!(Local0 & One))
                {
                    \_SB.PCI0.SMBS.E05C = One
                    Debug = "HotPlug:04: Insertion Event"
                    Sleep (0x64)
                    Sleep (0x64)
                    Sleep (0x14)
                    P80H = 0x0205
                }
            }

            Notify (\_SB.PCI0.PE20, Zero) // Bus Check
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((RVID <= 0x13)){}
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Scope (SBRG)
            {
                Method (RRIO, 4, NotSerialized)
                {
                    Debug = "RRIO"
                }

                Method (RDMA, 3, NotSerialized)
                {
                    Debug = "rDMA"
                }
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Name (CRS, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED00000,         // Address Base
                0x00000400,         // Address Length
                _Y16)
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateDWordField (CRS, \HPET._Y16._BAS, HPT)  // _BAS: Base Address
            HPT = 0xFED00000
            Return (CRS) /* \HPET.CRS_ */
        }
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        \_SB.DIAG (Arg0)
        If (((Arg0 == 0x04) && (OSFL () == 0x02)))
        {
            Sleep (0x0BB8)
        }

        PTS (Arg0)
        WAKP [Zero] = Zero
        WAKP [One] = Zero
        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        AAXB = Zero
        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.SBRG.EC0.USBW = One
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.SBRG.EC0.S4EN = One
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        Local0 = (Arg0 << 0x04)
        \_SB.DIAG (Local0)
        WAK (Arg0)
        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }

        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.SBRG.EC0.USBW = Zero
            If ((\_SB.PCI0.SBRG.EC0.LLBA == One))
            {
                \_SB.PCI0.SBRG.EC0._Q22 ()
            }
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.SBRG.EC0.S4RS = One
        }

        Return (WAKP) /* \WAKP */
    }

    Device (OMSC)
    {
        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
        Name (_UID, 0x0E11)  // _UID: Unique ID
    }

    Device (_SB.RMEM)
    {
        Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
    }

    Scope (_PR)
    {
        OperationRegion (SSDT, SystemMemory, 0xFFFF0000, 0xFFFF)
        Name (DCOR, 0x02)
        Name (TBLD, 0x04)
        Name (NPSS, 0x05)
        Name (HNDL, 0x80000000)
        Name (APSS, Package (0x0A)
        {
            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }
        })
        Processor (P001, 0x01, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P001._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P002, 0x02, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P002._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }
    }

    If (OSCF)
    {
        Scope (_SB.PCI0)
        {
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, Zero, CDW1)
                    CreateDWordField (Arg3, 0x04, CDW2)
                    CreateDWordField (Arg3, 0x08, CDW3)
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        (CTRL & 0x1E)
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)){}
                        If ((CTRL & 0x04))
                        {
                            EPNM = One
                        }
                        Else
                        {
                            EPNM = Zero
                        }

                        If ((CTRL & 0x10)){}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }
        }
    }

    Scope (_SB.PCI0.VGA)
    {
        Name (PXEN, 0x80000001)
        Name (PXID, 0x00040000)
        Name (PXMX, 0x80000001)
        Name (LCDT, 0x80000000)
        Name (DSCT, 0x80000000)
        Name (AF7E, 0x80000000)
        Name (PXDY, 0x80000000)
        Name (PXFX, 0x80000001)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Scope (\_SB.PCI0.VGA)
        {
            Name (ATIB, Buffer (0x0100){})
            Method (ATIF, 2, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (AF00 ())
                }

                If ((Arg0 == One))
                {
                    Return (AF01 ())
                }

                If ((Arg0 == 0x02))
                {
                    Return (AF02 ())
                }

                If ((Arg0 == 0x03))
                {
                    Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
                }
                Else
                {
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateWordField (ATIB, 0x02, VERN)
                    CreateDWordField (ATIB, 0x04, NMSK)
                    CreateDWordField (ATIB, 0x08, SFUN)
                    SSZE = Zero
                    VERN = Zero
                    NMSK = Zero
                    SFUN = Zero
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }
            }

            Method (AF00, 0, NotSerialized)
            {
                P80H = 0xF0
                DIAG (0xF0)
                CreateWordField (ATIB, Zero, SSZE)
                CreateWordField (ATIB, 0x02, VERN)
                CreateDWordField (ATIB, 0x04, NMSK)
                CreateDWordField (ATIB, 0x08, SFUN)
                SSZE = 0x0C
                VERN = One
                If ((PXEN == 0x80000000))
                {
                    NMSK = 0x11
                }
                Else
                {
                    NMSK = 0x51
                }

                If ((AF7E == 0x80000001))
                {
                    NMSK |= 0x80
                }

                MSKN = NMSK /* \_SB_.PCI0.VGA_.AF00.NMSK */
                SFUN = 0x07
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Name (NCOD, 0x81)
            Method (AF01, 0, NotSerialized)
            {
                P80H = 0xF1
                DIAG (0xF1)
                CreateWordField (ATIB, Zero, SSZE)
                CreateDWordField (ATIB, 0x02, VMSK)
                CreateDWordField (ATIB, 0x06, FLGS)
                VMSK = 0x0B
                SSZE = 0x0A
                VMSK = 0x03
                FLGS = One
                NCOD = 0x81
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Name (PSBR, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (MSKN, Zero)
            Name (SEXM, Zero)
            Name (STHG, Zero)
            Name (STHI, Zero)
            Name (SFPG, Zero)
            Name (SFPI, Zero)
            Name (SSPS, Zero)
            Name (SSDM, 0x0A)
            Name (SCDY, Zero)
            Name (SACT, Buffer (0x07)
            {
                 0x01, 0x02, 0x08, 0x80, 0x03, 0x09, 0x81         // .......
            })
            Method (AF02, 0, NotSerialized)
            {
                P80H = 0xF2
                DIAG (0xF2)
                CreateBitField (PSBR, Zero, PDSW)
                CreateBitField (PSBR, One, PEXM)
                CreateBitField (PSBR, 0x02, PTHR)
                CreateBitField (PSBR, 0x03, PFPS)
                CreateBitField (PSBR, 0x04, PSPS)
                CreateBitField (PSBR, 0x05, PDCC)
                CreateBitField (PSBR, 0x06, PXPS)
                CreateBitField (PSBR, 0x07, PBRT)
                CreateWordField (ATIB, Zero, SSZE)
                CreateDWordField (ATIB, 0x02, PSBI)
                CreateByteField (ATIB, 0x06, EXPM)
                CreateByteField (ATIB, 0x07, THRM)
                CreateByteField (ATIB, 0x08, THID)
                CreateByteField (ATIB, 0x09, FPWR)
                CreateByteField (ATIB, 0x0A, FPID)
                CreateByteField (ATIB, 0x0B, SPWR)
                CreateByteField (ATIB, 0x0C, BRTL)
                SSZE = 0x0D
                PSBI = PSBR /* \_SB_.PCI0.VGA_.PSBR */
                If (PDSW)
                {
                    P80H = 0x82
                    PDSW = Zero
                }

                If (PEXM)
                {
                    EXPM = SEXM /* \_SB_.PCI0.VGA_.SEXM */
                    SEXM = Zero
                    PEXM = Zero
                }

                If (PTHR)
                {
                    THRM = STHG /* \_SB_.PCI0.VGA_.STHG */
                    THID = STHI /* \_SB_.PCI0.VGA_.STHI */
                    STHG = Zero
                    STHI = Zero
                    PTHR = Zero
                }

                If (PFPS)
                {
                    FPWR = SFPG /* \_SB_.PCI0.VGA_.SFPG */
                    FPWR = SFPI /* \_SB_.PCI0.VGA_.SFPI */
                    SFPG = Zero
                    SFPI = Zero
                    PFPS = Zero
                }

                If (PSPS)
                {
                    SPWR = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                    PSPS = Zero
                }

                If (PXPS)
                {
                    P80H = 0xA2
                    PXPS = Zero
                }

                If (PBRT)
                {
                    P80H = 0xF7
                    PBRT = Zero
                }

                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Method (AF03, 2, NotSerialized)
            {
                P80H = 0xF3
                DIAG (0xF3)
                CreateWordField (ATIB, Zero, SSZE)
                CreateWordField (ATIB, 0x02, SSDP)
                CreateWordField (ATIB, 0x04, SCDP)
                SSDP = Arg0
                SCDP = Arg1
                Name (NXTD, 0x06)
                Name (CIDX, 0x06)
                Local1 = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                Local1 &= 0x8B
                Local2 = SCDP /* \_SB_.PCI0.VGA_.AF03.SCDP */
                If (CondRefOf (\_SB.LID._LID, Local4))
                {
                    Local2 &= 0xFFFFFFFFFFFFFFFE
                    Local2 |= Local4
                }
                Else
                {
                    Local2 |= One
                }

                P80H = Local2
                Local0 = Zero
                While ((Local0 < SizeOf (SACT)))
                {
                    Local3 = DerefOf (SACT [Local0])
                    If ((Local3 == Local1))
                    {
                        CIDX = Local0
                        Local0 = SizeOf (SACT)
                    }
                    Else
                    {
                        Local0++
                    }
                }

                Local0 = CIDX /* \_SB_.PCI0.VGA_.AF03.CIDX */
                While ((Local0 < SizeOf (SACT)))
                {
                    Local0++
                    If ((Local0 == SizeOf (SACT)))
                    {
                        Local0 = Zero
                    }

                    Local3 = DerefOf (SACT [Local0])
                    If (((Local3 & Local2) == Local3))
                    {
                        NXTD = Local0
                        Local0 = SizeOf (SACT)
                    }
                }

                If ((NXTD == SizeOf (SACT)))
                {
                    SSDP = Zero
                }
                Else
                {
                    Local0 = NXTD /* \_SB_.PCI0.VGA_.AF03.NXTD */
                    Local3 = DerefOf (SACT [Local0])
                    SSDP &= 0xFFFFFFFFFFFFFF74
                    SSDP |= Local3
                }

                SSZE = 0x04
                P80H = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Method (AFN0, 0, Serialized)
            {
                If ((MSKN & One))
                {
                    CreateBitField (PSBR, Zero, PDSW)
                    PDSW = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN3, 2, Serialized)
            {
                If ((MSKN & 0x08))
                {
                    Local0 = Arg0
                    SFPI = Local0
                    Local0 = Arg1
                    SFPG = Local0 &= 0x03
                    CreateBitField (PSBR, 0x03, PFPS)
                    PFPS = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN4, 1, Serialized)
            {
                If ((MSKN & 0x10))
                {
                    Local0 = Arg0
                    Local1 = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                    SSPS = Local0
                    If ((Local0 == Local1)){}
                    Else
                    {
                        CreateBitField (PSBR, 0x04, PSPS)
                        PSPS = One
                        Notify (VGA, NCOD)
                    }
                }
            }

            Method (AFN5, 0, Serialized)
            {
                If ((MSKN & 0x20))
                {
                    CreateBitField (PSBR, 0x05, PDCC)
                    PDCC = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN6, 0, Serialized)
            {
                If ((MSKN & 0x40))
                {
                    CreateBitField (PSBR, 0x06, PXPS)
                    PXPS = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN7, 1, Serialized)
            {
                If ((MSKN & 0x80))
                {
                    CreateBitField (PSBR, 0x07, PBRT)
                    PBRT = One
                    CreateByteField (ATIB, 0x0C, BRTL)
                    BRTL = Arg0
                    Notify (VGA, NCOD)
                }
            }

            Name (AT00, Buffer (0xFF){})
            Name (AT01, Buffer (0x03){})
            Method (ATCS, 2, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    ATC0 ()
                }

                If ((Arg0 == One))
                {
                    ATC1 ()
                }

                If ((Arg0 == 0x02))
                {
                    ATC2 (Arg1)
                }

                If ((Arg0 == 0x03))
                {
                    ATC3 ()
                }

                If ((Arg0 == 0x04))
                {
                    ATC4 (Arg1)
                }

                Return (AT00) /* \_SB_.PCI0.VGA_.AT00 */
            }

            Method (ATC0, 0, NotSerialized)
            {
                CreateWordField (AT00, Zero, SZZE)
                CreateWordField (AT00, 0x02, INTF)
                CreateDWordField (AT00, 0x04, SUPP)
                SZZE = 0x08
                INTF = One
                SUPP = 0x0F
            }

            Method (ATC1, 0, Serialized)
            {
                CreateWordField (AT00, Zero, SZZE)
                CreateDWordField (AT00, 0x02, VFMK)
                CreateDWordField (AT00, 0x06, FLAG)
                CreateField (AT00, 0x30, One, DOCK)
                SZZE = 0x0A
                VFMK = One
                FLAG = Zero
                DOCK = One
            }

            Method (ATC2, 1, Serialized)
            {
                CreateField (Arg0, 0x10, 0x03, FUCC)
                CreateField (Arg0, 0x13, 0x06, DEVV)
                CreateByteField (Arg0, 0x03, BUSS)
                CreateDWordField (Arg0, 0x04, VFMK)
                CreateDWordField (Arg0, 0x06, FLAG)
                CreateField (Arg0, 0x30, One, ADVC)
                CreateField (Arg0, 0x31, One, WFCM)
                CreateByteField (Arg0, 0x08, RQST)
                CreateByteField (Arg0, 0x09, PFRQ)
                CreateWordField (AT00, Zero, SZZE)
                CreateByteField (AT00, 0x02, RETV)
                SZZE = 0x03
                RETV = One
                0x02 = ALIB /* External reference */
                Arg0
                AT00
            }

            Method (ATC3, 0, Serialized)
            {
                CreateWordField (AT00, Zero, SZZE)
                CreateByteField (AT00, 0x02, RETV)
                CreateWordField (AT01, Zero, SZZB)
                CreateByteField (AT01, 0x02, PSPP)
                SZZE = 0x03
                RETV = One
                SZZB = 0x03
                PSPP = One
                0x03 = ALIB /* External reference */
                AT01
                AT00
            }

            Method (ATC4, 1, Serialized)
            {
                CreateField (Arg0, 0x10, 0x03, FUCC)
                CreateField (Arg0, 0x13, 0x06, DEVV)
                CreateByteField (Arg0, 0x03, BUSS)
                CreateByteField (Arg0, 0x04, NULN)
                CreateWordField (AT00, Zero, SZZE)
                CreateByteField (AT00, 0x02, NULM)
                SZZE = 0x03
                NULM = One
                0x04 = ALIB /* External reference */
                Arg0
                AT00
            }
        }

        Name (ATPB, Buffer (0x0100){})
        Name (DSID, 0xFFFFFFFF)
        Name (HSID, 0xFFFFFFFF)
        Name (CNT0, Buffer (0x05)
        {
             0x05, 0x00, 0x00, 0x10, 0x01                     // .....
        })
        Name (CNT1, Buffer (0x05)
        {
             0x05, 0x01, 0x00, 0x00, 0x01                     // .....
        })
        Name (CNT2, Buffer (0x05)
        {
             0x07, 0x03, 0x00, 0x10, 0x02                     // .....
        })
        Name (CNT3, Buffer (0x05)
        {
             0x07, 0x07, 0x00, 0x20, 0x02                     // ... .
        })
        Name (CNT4, Buffer (0x05)
        {
             0x00, 0x09, 0x00, 0x30, 0x02                     // ...0.
        })
        Name (CNT5, Buffer (0x05)
        {
             0x05, 0x00, 0x01, 0x10, 0x01                     // .....
        })
        Name (CNT6, Buffer (0x05)
        {
             0x05, 0x01, 0x01, 0x00, 0x01                     // .....
        })
        Name (CNT7, Buffer (0x05)
        {
             0x07, 0x03, 0x01, 0x10, 0x02                     // .....
        })
        Name (CNT8, Buffer (0x05)
        {
             0x07, 0x07, 0x01, 0x20, 0x02                     // ... .
        })
        Name (CNT9, Buffer (0x05)
        {
             0x00, 0x09, 0x01, 0x30, 0x02                     // ...0.
        })
        OperationRegion (REVD, SystemMemory, 0x975E811D, 0x0000F004)
        Field (REVD, AnyAcc, NoLock, Preserve)
        {
            SROM,   32, 
            VROM,   491520
        }

        Name (TVGA, Buffer (0xF000)
        {
             0x00                                             // .
        })
        Method (ATRM, 2, Serialized)
        {
            Local0 = (Arg0 + Arg1)
            If ((Local0 <= SROM))
            {
                Local1 = (Arg1 * 0x08)
                Local2 = (Arg0 * 0x08)
                TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                CreateField (TVGA, Local2, Local1, TEMP)
                Name (RETB, Buffer (Arg1){})
                RETB = TEMP /* \_SB_.PCI0.VGA_.ATRM.TEMP */
                Return (RETB) /* \_SB_.PCI0.VGA_.ATRM.RETB */
            }
            ElseIf ((Arg0 < SROM))
            {
                Local3 = (SROM - Arg0)
                Local1 = (Local3 * 0x08)
                Local2 = (Arg0 * 0x08)
                TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                CreateField (TVGA, Local2, Local1, TEM)
                Name (RETC, Buffer (Local3){})
                RETC = TEM /* \_SB_.PCI0.VGA_.ATRM.TEM_ */
                Return (RETC) /* \_SB_.PCI0.VGA_.ATRM.RETC */
            }
            Else
            {
                Name (RETD, Buffer (One){})
                Return (RETD) /* \_SB_.PCI0.VGA_.ATRM.RETD */
            }
        }

        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, VERN)
            CreateDWordField (ATPB, 0x04, SFUN)
            SSZE = Zero
            VERN = Zero
            SFUN = Zero
            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX00, 0, NotSerialized)
        {
            P80H = 0xE0
            DIAG (0xE0)
            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, VERN)
            CreateDWordField (ATPB, 0x04, SFUN)
            SSZE = 0x08
            VERN = One
            If ((PXEN == 0x80000000))
            {
                SFUN = Zero
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((PXMX == 0x80000000))
            {
                SFUN = 0x018F
            }
            Else
            {
                SFUN = 0x0183
            }

            If ((PXDY == 0x80000001))
            {
                SFUN &= 0xFFFFFFFD
            }

            If (((PXDY == 0x80000001) && (PXFX == 0x80000001)))
            {
                SFUN |= 0x02
            }

            Local0 = ^^PCE4.VGA.SVID /* \_SB_.PCI0.PCE4.VGA_.SVID */
            Local1 = ^^PCE4.HDAU.SVID /* \_SB_.PCI0.PCE4.HDAU.SVID */
            If ((Local0 != 0xFFFFFFFF))
            {
                DSID = Local0
            }

            If ((Local1 != 0xFFFFFFFF))
            {
                HSID = Local1
            }

            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX01, 0, NotSerialized)
        {
            P80H = 0xE1
            DIAG (0xE1)
            CreateWordField (ATPB, Zero, SSZE)
            CreateDWordField (ATPB, 0x02, VMSK)
            CreateDWordField (ATPB, 0x06, FLGS)
            SSZE = 0x0A
            VMSK = 0xFF
            If ((PXMX == 0x80000000))
            {
                FLGS = 0x4B
            }
            Else
            {
                FLGS = Zero
                If ((PXDY == 0x80000001))
                {
                    FLGS |= 0x80
                }
            }

            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (ATPB, Zero, SSZE)
            CreateByteField (ATPB, 0x02, PWST)
            SSZE = 0x03
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, SZZE)
            CreateField (Local7, 0x10, 0x03, FUCC)
            CreateField (Local7, 0x13, 0x05, DEVV)
            CreateByteField (Local7, 0x03, BUSS)
            CreateByteField (Local7, 0x04, HPST)
            SZZE = 0x05
            BUSS = Zero
            FUCC = Zero
            Local6 = Buffer (0x04){}
            CreateByteField (Local6, 0x02, HPOX)
            PWST = (Arg0 & One)
            Name (HPOK, Zero)
            If (PWST)
            {
                P80H = 0x11E2
                ^^SMBS.G15O = Zero
                ^^SMBS.G15E = Zero
                ^^SMBS.G2DO = Zero
                ^^SMBS.G2DE = Zero
                Sleep (0x0A)
                ^^SMBS.G2DO = One
                ^^SMBS.G2DE = Zero
                Sleep (0x0A)
                ^^SMBS.G37O = One
                ^^SMBS.G37E = Zero
                Sleep (0x0A)
                ^^SMBS.G1CM = One
                While ((^^SMBS.G1CI == Zero)){}
                ^^SMBS.G15O = One
                ^^SMBS.G15E = Zero
                P80H = 0x12E2
                HPOK = Zero
                Sleep (0x64)
                Sleep (0x64)
                DEVV = 0x04
                HPST = One
                0x06 = ALIB /* External reference */
                Local7
                Local6
                Sleep (0x14)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    ^^PCE4.PDC2 = One
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = ^^PCE4.XPRD (0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Debug = "PXPGfx:04: TrainingState=0x10"
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Debug = "PXPGfx:04: Check VC Negotiation Pending"
                        Local5 = ^^PCE4.XPDL ()
                        If (Local5)
                        {
                            Debug = "PXPGfx:04: Retraining Link"
                            ^^PCE4.XPRT ()
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Debug = "PXPGfx:04: Device OK"
                            INFO = 0x20
                            BCMD = 0x87
                            ^^SBRG.SMIC = ATIS /* \ATIS */
                            Local0 = Zero
                            If ((^^PCE4.XPR2 () == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                Debug = "PXPGFx:04: Common Clock Retraining Failed"
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Debug = "PXPGfx:04: TrainingState Timeout"
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    P80H = 0x13E2
                    Debug = "PXPGfx:04: Insertion Failed: Disable Training & PowerDown"
                    Local1 = ^^PCE4.VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = ^^PCE4.XPRD (0xA5)
                        Local0 &= 0x7F
                        If ((Local0 <= 0x04))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local1 = ^^PCE4.VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    DEVV = 0x04
                    HPST = Zero
                    ALIB
                    0x06
                    Local7
                }

                P80H = 0x14E2
            }
            Else
            {
                P80H = 0x02E2
                INFO = 0x20
                BCMD = 0x84
                ^^SBRG.SMIC = ATIS /* \ATIS */
                ^^SMBS.G37O = Zero
                ^^SMBS.G37E = Zero
                Sleep (0x0A)
                ^^SMBS.G2DO = Zero
                ^^SMBS.G2DE = Zero
                P80H = 0x03E2
                ^^PCE4.PDC2 = One
                Local1 = ^^PCE4.VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = ^^PCE4.XPRD (0xA5)
                    Local0 &= 0x7F
                    If ((Local0 <= 0x04))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = ^^PCE4.VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                        Sleep (0x05)
                        Local5--
                    }
                }

                DEVV = 0x04
                HPST = Zero
                ALIB
                0x06
                Local7
                HPOK = 0x02
                P80H = 0x04E2
            }

            If (HPOK)
            {
                If (((HPOK == One) && (DSID != 0xFFFFFFFF)))
                {
                    Local1 = DSID /* \_SB_.PCI0.VGA_.DSID */
                    ^^PCE4.VGA.SMID = Local1
                    Sleep (0x0A)
                    Local1 = HSID /* \_SB_.PCI0.VGA_.HSID */
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        ^^PCE4.HDAU.SMID = Local1
                    }

                    Sleep (0x0A)
                }

                Notify (PCE4, Zero) // Bus Check
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, DPSW)
            SSZE = 0x04
            DPSW = (Arg0 & One)
            If (DPSW)
            {
                P80H = 0x02E3
                ^^SMBS.G06O = One
                ^^SMBS.G06E = Zero
            }
            Else
            {
                P80H = 0x01E3
                ^^SMBS.G06O = Zero
                ^^SMBS.G06E = Zero
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            P80H = 0xE4
            DIAG (0xE4)
            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, ICSW)
            SSZE = 0x04
            ICSW = (Arg0 & One)
            If (ICSW)
            {
                P80H = 0x02E4
                ^^SMBS.G14O = One
                ^^SMBS.G14E = Zero
            }
            Else
            {
                P80H = 0x01E4
                ^^SMBS.G14O = Zero
                ^^SMBS.G14E = Zero
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            P80H = 0xE8
            DIAG (0xE8)
            CreateWordField (ATPB, Zero, CNUM)
            CreateWordField (ATPB, 0x02, CSSZ)
            CNUM = 0x0A
            CSSZ = 0x05
            CreateField (ATPB, 0x20, 0x28, CTI0)
            CTI0 = CNT0 /* \_SB_.PCI0.VGA_.CNT0 */
            CreateField (ATPB, 0x48, 0x28, CTI1)
            CTI1 = CNT1 /* \_SB_.PCI0.VGA_.CNT1 */
            CreateField (ATPB, 0x70, 0x28, CTI2)
            CreateByteField (CNT2, Zero, FLG2)
            If ((LCDT == 0x80000001))
            {
                If ((DSCT == 0x80000001))
                {
                    FLG2 = Zero
                }

                If ((DSCT == 0x80000002))
                {
                    FLG2 = 0x07
                }
            }

            CTI2 = CNT2 /* \_SB_.PCI0.VGA_.CNT2 */
            CreateField (ATPB, 0x98, 0x28, CTI3)
            CreateByteField (CNT3, Zero, FLG3)
            If ((LCDT == 0x80000000))
            {
                FLG3 = 0x07
            }

            If ((LCDT == 0x80000001))
            {
                FLG3 = Zero
                If ((DSCT == 0x80000002))
                {
                    FLG3 = Zero
                }
            }

            If ((LCDT == 0x80000002))
            {
                FLG3 = Zero
                If ((DSCT == 0x80000002))
                {
                    FLG3 = 0x07
                }
            }

            CTI3 = CNT3 /* \_SB_.PCI0.VGA_.CNT3 */
            CreateField (ATPB, 0xC0, 0x28, CTI4)
            CTI4 = CNT4 /* \_SB_.PCI0.VGA_.CNT4 */
            CreateField (ATPB, 0xE8, 0x28, CTI5)
            CTI5 = CNT5 /* \_SB_.PCI0.VGA_.CNT5 */
            CreateField (ATPB, 0x0110, 0x28, CTI6)
            CTI6 = CNT6 /* \_SB_.PCI0.VGA_.CNT6 */
            CreateField (ATPB, 0x0138, 0x28, CTI7)
            CreateByteField (CNT7, Zero, FLG7)
            If ((LCDT == 0x80000001))
            {
                If ((DSCT == 0x80000001))
                {
                    FLG7 = Zero
                }

                If ((DSCT == 0x80000002))
                {
                    FLG7 = 0x07
                }
            }

            CTI7 = CNT7 /* \_SB_.PCI0.VGA_.CNT7 */
            CreateField (ATPB, 0x0160, 0x28, CTI8)
            CreateByteField (CNT8, Zero, FLG8)
            If ((LCDT == 0x80000000))
            {
                FLG8 = 0x07
            }

            If ((LCDT == 0x80000001))
            {
                FLG8 = Zero
            }

            If ((LCDT == 0x80000002))
            {
                FLG8 = Zero
            }

            If ((DSCT == 0x80000002))
            {
                FLG8 = 0x07
            }

            CTI8 = CNT8 /* \_SB_.PCI0.VGA_.CNT8 */
            CreateField (ATPB, 0x0188, 0x28, CTI9)
            CreateByteField (CNT9, Zero, FLG9)
            If ((DSCT == 0x80000002))
            {
                FLG9 = 0x07
            }

            CTI9 = CNT9 /* \_SB_.PCI0.VGA_.CNT9 */
            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX09, 0, NotSerialized)
        {
            P80H = 0xE9
            DIAG (0xE9)
            CreateWordField (ATPB, Zero, CNUM)
            CreateWordField (ATPB, 0x02, CSSZ)
            CNUM = Zero
            CSSZ = Zero
            CreateByteField (ATPB, 0x04, ATI0)
            CreateByteField (ATPB, 0x05, HPD0)
            CreateByteField (ATPB, 0x06, DDC0)
            ATI0 = Zero
            HPD0 = Zero
            DDC0 = Zero
            CreateByteField (ATPB, 0x07, ATI1)
            CreateByteField (ATPB, 0x08, HPD1)
            CreateByteField (ATPB, 0x09, DDC1)
            ATI1 = Zero
            HPD1 = Zero
            DDC1 = Zero
            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }
    }

    Scope (_SB.PCI0.SMBS)
    {
        Mutex (PSMX, 0x00)
    }

    Scope (_SB)
    {
        Method (ECOK, 0, NotSerialized)
        {
            If ((^PCI0.SBRG.EC0.ECON == One))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x0B, 
                    0x04
                })
            }
        }

        Device (LID)
        {
            Name (FLID, One)
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If ((^^PCI0.SBRG.EC0.LIDF == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Zero
                }

                Local0 = P66I /* \P66I */
                Return (Local0)
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            \_SB.LDON = One
            DBG8 = 0x1D
            E06C = ~E06C /* \E06C */
            E06S = One
            Notify (\_SB.LID, 0x80) // Status Change
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            Name (_GPE, 0x03)  // _GPE: General Purpose Events
            Mutex (MUEC, 0x00)
            Mutex (MU4T, 0x00)
            Name (ECFL, Ones)
            OperationRegion (EC68, SystemIO, 0x68, One)
            Field (EC68, ByteAcc, NoLock, Preserve)
            {
                P68H,   8
            }

            OperationRegion (EC6C, SystemIO, 0x6C, One)
            Field (EC6C, ByteAcc, NoLock, Preserve)
            {
                P6CH,   8
            }

            Method (EECD, 3, NotSerialized)
            {
                While (((P6CH & 0x80) == 0x80))
                {
                    Sleep (0x0A)
                }

                While (((P6CH & 0x02) == 0x02))
                {
                    Sleep (0x0A)
                }

                P6CH = Arg0
                While (((P6CH & 0x02) == 0x02))
                {
                    Sleep (0x0A)
                }

                P68H = Arg1
                If ((Arg2 != Zero))
                {
                    While (((P6CH & One) == Zero))
                    {
                        Sleep (0x0A)
                    }

                    Local0 = P68H /* \_SB_.PCI0.SBRG.EC0_.P68H */
                    While (((P6CH & 0x02) == 0x02))
                    {
                        Sleep (0x0A)
                    }

                    P6CH = 0xFF
                    Return (Local0)
                }

                While (((P6CH & 0x02) == 0x02))
                {
                    Sleep (0x0A)
                }

                P6CH = 0xFF
            }

            Method (DPDT, 0, NotSerialized)
            {
                Local0 = ^^^^ATKD.AGFN (Zero)
                OperationRegion (\DPRG, SystemMemory, Local0, 0x0A)
                Field (DPRG, ByteAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    BLEN,   16, 
                    STAS,   8, 
                    EROR,   8, 
                    ECMD,   8, 
                    EDA1,   8
                }

                MFUN = 0x15
                SFUN = 0x03
                BIPA = Local0
                WISM (0xA1)
            }

            Method (ECCD, 2, NotSerialized)
            {
                Local0 = ^^^^ATKD.AGFN (Zero)
                OperationRegion (\ECBF, SystemMemory, Local0, 0x0E)
                Field (ECBF, ByteAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    BLEN,   16, 
                    STAS,   8, 
                    EROR,   8, 
                    ECMD,   8, 
                    EDA1,   8, 
                    EDA2,   8, 
                    EDA3,   8, 
                    EDA4,   8, 
                    EDA5,   8
                }

                MFUN = 0x30
                SFUN = One
                ECMD = Arg0
                Local1 = SizeOf (Arg1)
                If ((Local1 >= One))
                {
                    EDA1 = DerefOf (Arg1 [Zero])
                }

                If ((Local1 >= 0x02))
                {
                    EDA2 = DerefOf (Arg1 [One])
                }

                If ((Local1 >= 0x03))
                {
                    EDA3 = DerefOf (Arg1 [0x02])
                }

                If ((Local1 >= 0x04))
                {
                    EDA4 = DerefOf (Arg1 [0x03])
                }

                If ((Local1 >= 0x05))
                {
                    EDA5 = DerefOf (Arg1 [0x04])
                }

                BIPA = Local0
                WISM (0xA1)
                Return (Package (0x05)
                {
                    EDA1, 
                    EDA2, 
                    EDA3, 
                    EDA4, 
                    EDA5
                })
            }

            Method (SMAN, 0, NotSerialized)
            {
                OperationRegion (\SMAN, SystemMemory, AMLA, 0x20)
                Field (\SMAN, ByteAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    BLEN,   16, 
                    STAS,   8, 
                    EROR,   8, 
                    REWR,   8, 
                    OFST,   16, 
                    LENG,   8, 
                    Offset (0x10), 
                    DATA,   64
                }

                MFUN = 0x19
                SFUN = One
                REWR = One
                OFST = 0x4E
                LENG = One
                DATA = 0xAA
                BIPA = AMLA /* \AMLA */
                WISM (0xA1)
                MFUN = 0x19
                SFUN = One
                REWR = One
                OFST = 0x7D
                LENG = One
                DATA = 0x80
                BIPA = AMLA /* \AMLA */
                WISM (0xA1)
                Return (One)
            }

            Method (DEAF, 0, NotSerialized)
            {
                OperationRegion (\DEAF, SystemMemory, AMLA, 0x20)
                Field (\DEAF, ByteAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    BLEN,   16, 
                    STAS,   8, 
                    EROR,   8, 
                    REWR,   8, 
                    OFST,   16, 
                    LENG,   8, 
                    Offset (0x10), 
                    DATA,   64
                }

                MFUN = 0x19
                SFUN = One
                REWR = One
                OFST = 0x4E
                LENG = One
                DATA = 0xAA
                BIPA = AMLA /* \AMLA */
                WISM (0xA1)
                MFUN = 0x19
                SFUN = One
                REWR = One
                OFST = 0x7D
                LENG = One
                DATA = Zero
                BIPA = AMLA /* \AMLA */
                WISM (0xA1)
                Return (One)
            }

            Method (HDD2, 1, NotSerialized)
            {
                OperationRegion (\HDD2, SystemMemory, AMLA, 0x20)
                Field (\HDD2, ByteAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    BLEN,   16, 
                    STAS,   8, 
                    EROR,   8, 
                    ENDI,   8
                }

                MFUN = 0x1F
                SFUN = 0x07
                ENDI = Arg0
                BIPA = AMLA /* \AMLA */
                WISM (0xA1)
                Return (One)
            }

            Method (HDDP, 1, NotSerialized)
            {
                OperationRegion (\HDDP, SystemMemory, AMLA, 0x14)
                Field (\HDDP, ByteAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    BLEN,   16, 
                    STAS,   8, 
                    EROR,   8, 
                    BOOT,   16
                }

                MFUN = 0x1F
                SFUN = 0x02
                BOOT = Arg0
                BIPA = AMLA /* \AMLA */
                WISM (0xA1)
                Return (One)
            }

            Method (ECAV, 0, NotSerialized)
            {
                If ((ECFL == Ones))
                {
                    If ((_REV >= 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (ECFL) /* \_SB_.PCI0.SBRG.EC0_.ECFL */
            }

            Name (ECON, Zero)
            OperationRegion (PECO, SystemIO, 0x0260, 0x08)
            Field (PECO, ByteAcc, Lock, Preserve)
            {
                HSTS,   8, 
                HCTL,   8, 
                HCMD,   8, 
                HTAR,   8, 
                HWLR,   8, 
                HRLR,   8, 
                HWDR,   8, 
                HRDR,   8
            }

            OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
            Field (ERAM, ByteAcc, Lock, Preserve)
            {
                Offset (0x5A), 
                Offset (0x5B), 
                Offset (0x5C), 
                Offset (0x5D), 
                ERIB,   16, 
                ERBD,   8, 
                Offset (0x90), 
                BMFN,   72, 
                BATD,   56, 
                Offset (0xA1), 
                    ,   1, 
                VIDO,   1, 
                TOUP,   1, 
                LDOF,   1, 
                Offset (0xA2), 
                ODTS,   8, 
                OSTP,   3, 
                    ,   4, 
                ADPT,   1, 
                PWAK,   1, 
                MWAK,   1, 
                LWAK,   1, 
                RWAK,   1, 
                WWAK,   1, 
                USBW,   1, 
                KWAK,   1, 
                TWAK,   1, 
                CCAC,   1, 
                AOAC,   1, 
                BLAC,   1, 
                PSRC,   1, 
                BOAC,   1, 
                LCAC,   1, 
                AAAC,   1, 
                ACAC,   1, 
                FSRM,   8, 
                OSTT,   8, 
                OSST,   8, 
                THLT,   8, 
                TCNL,   8, 
                MODE,   1, 
                    ,   2, 
                INIT,   1, 
                FAN1,   1, 
                FAN2,   1, 
                FANT,   1, 
                SKNM,   1, 
                SDTM,   8, 
                FSSN,   4, 
                FANU,   4, 
                PTVL,   4, 
                    ,   2, 
                SWTO,   1, 
                TTHR,   1, 
                TTHM,   1, 
                THTL,   1, 
                    ,   2, 
                NPST,   4, 
                CTMP,   8, 
                CTML,   8, 
                SKTA,   8, 
                SKTB,   8, 
                SKTC,   8, 
                Offset (0xB6), 
                NTMP,   8, 
                    ,   1, 
                SKEY,   1, 
                DIGM,   1, 
                CDLE,   1, 
                S4EN,   1, 
                S4RS,   1, 
                Offset (0xB8), 
                    ,   1, 
                LIDF,   1, 
                PMEE,   1, 
                PWBE,   1, 
                RNGE,   1, 
                BTWE,   1, 
                Offset (0xB9), 
                BRTS,   8, 
                CNTS,   8, 
                WLRF,   1, 
                BTAT,   1, 
                WLEX,   1, 
                BTEX,   1, 
                KLSW,   1, 
                WLLD,   1, 
                AT3G,   1, 
                EX3G,   1, 
                PJID,   8, 
                CPUN,   8, 
                BOL0,   1, 
                BOL1,   1, 
                    ,   2, 
                BCC0,   1, 
                BCC1,   1, 
                Offset (0xBF), 
                BPU0,   1, 
                BPU1,   1, 
                    ,   2, 
                BOS0,   1, 
                BOS1,   1, 
                Offset (0xC0), 
                BTY0,   1, 
                BAM0,   1, 
                BAL0,   1, 
                    ,   1, 
                BMF0,   3, 
                Offset (0xC1), 
                BST0,   8, 
                BRC0,   16, 
                BSN0,   16, 
                BPV0,   16, 
                BDV0,   16, 
                BDC0,   16, 
                BFC0,   16, 
                GAU0,   8, 
                CYC0,   8, 
                BPC0,   16, 
                BAC0,   16, 
                BTW0,   8, 
                BVL0,   8, 
                BTM0,   8, 
                BTT0,   8, 
                BCG0,   16, 
                BCT0,   8, 
                BCI0,   8, 
                BCM0,   8, 
                BOT0,   8, 
                BSSB,   16, 
                BOV0,   8, 
                BCF0,   8, 
                BAD0,   8, 
                BCV1,   16, 
                BCV2,   16, 
                BCV3,   16, 
                BCV4,   16, 
                Offset (0xF0), 
                BAEX,   1, 
                BAFU,   1, 
                BAEM,   1, 
                BAFI,   1, 
                    ,   2, 
                BARC,   1, 
                BALN,   1, 
                LLBA,   1, 
                CED1,   1, 
                SED1,   1, 
                BAST,   1, 
                STRB,   1, 
                STCC,   1, 
                Offset (0xF2), 
                BFCS,   1, 
                BBDC,   1, 
                BCCF,   1, 
                DBCS,   1, 
                BCSC,   1, 
                BSCC,   1, 
                BAOV,   1, 
                BAOT,   1, 
                BTCT,   1, 
                SCAT,   1, 
                SCSB,   1, 
                    ,   1, 
                SCOF,   1, 
                WBNA,   1, 
                Offset (0xF4), 
                MADA,   16, 
                REAV,   16, 
                BDN0,   8
            }

            OperationRegion (SMBX, EmbeddedControl, 0x60, 0x29)
            Field (SMBX, ByteAcc, NoLock, Preserve)
            {
                PRTC,   8, 
                SSTS,   5, 
                    ,   1, 
                ALFG,   1, 
                CDFG,   1, 
                ADDR,   8, 
                CMDB,   8, 
                BDAT,   256, 
                BCNT,   8, 
                    ,   1, 
                ALAD,   7, 
                ALD0,   8, 
                ALD1,   8, 
                SMBN,   8
            }

            Field (SMBX, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                DAT0,   8, 
                DAT1,   8
            }

            Field (SMBX, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                DT2B,   16
            }

            Name (SMBF, Zero)
            OperationRegion (BRAM, SystemIO, 0x025A, 0x02)
            Field (BRAM, ByteAcc, Lock, Preserve)
            {
                BRAI,   8, 
                BRAD,   8
            }

            IndexField (BRAI, BRAD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x8F), 
                PBSY,   8, 
                EPWS,   8, 
                EB0S,   8, 
                EB1S,   8, 
                EB0T,   8, 
                EB1T,   8, 
                Offset (0x98), 
                ECPU,   8, 
                ECRT,   8, 
                EPSV,   8, 
                Offset (0xA0), 
                B0VL,   16, 
                B0RC,   16, 
                B0FC,   16, 
                B0MD,   16, 
                B0ST,   16, 
                B0CC,   16, 
                B0DC,   16, 
                B0DV,   16, 
                B1VL,   16, 
                B1RC,   16, 
                B1FC,   16, 
                B1MD,   16, 
                B1ST,   16, 
                B1CC,   16, 
                B1DC,   16, 
                B1DV,   16
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                ECFL = Zero
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    ECFL = Arg1
                }

                If (((Arg0 == 0x03) && (Arg1 == One)))
                {
                    ECON = One
                    If (_OSI ("Windows 2009"))
                    {
                        OSTP = 0x03
                    }
                    ElseIf (_OSI ("Windows 2006"))
                    {
                        OSTP = One
                    }
                    Else
                    {
                        OSTP = Zero
                    }
                }
            }

            Name (FHKM, One)
            Method (FHKW, 0, Serialized)
            {
                While (!FHKM)
                {
                    Sleep (0x0A)
                }

                FHKM = Zero
            }

            Method (FHKS, 0, Serialized)
            {
                FHKM = One
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = One
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x52)
                }
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x02
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x53)
                }
            }

            Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x03
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x54)
                }
            }

            Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x05
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x56)
                }
            }

            Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x0C
                ^^^^ATKD.IANE (0xC5)
            }

            Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x0D
                ^^^^ATKD.IANE (0xC4)
            }

            Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x0E
            }

            Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x0F
            }

            Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x10
                Local0 = One
                If (ATKP)
                {
                    Local0 = (0x34 - Local0)
                    ^^^^ATKD.IANE (Local0)
                }
            }

            Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x11
                Local0 = ^^^^ATKD.GPLV ()
                If ((0x0E == Local0))
                {
                    Return (Zero)
                }

                If ((Local0 < Zero))
                {
                    Local0 = Zero
                }

                If ((Local0 > 0x0A))
                {
                    Local0 = 0x0A
                }

                If ((Local0 > Zero))
                {
                    Local0--
                }

                LBT1 = Local0
                ^^^^ATKD.IANE ((Local0 + 0x20))
                If (((BDID == One) | (BDID == 0x03)))
                {
                    Notify (^^^VGA.LCD, 0x87) // Device-Specific
                }
                ElseIf ((BDID == 0x04))
                {
                    Notify (^^^PCE4.VGA.LCD, 0x87) // Device-Specific
                }
                ElseIf ((Zero == ^^^SMBS.G2DO))
                {
                    Notify (^^^VGA.LCD, 0x87) // Device-Specific
                }
                Else
                {
                    Notify (^^^PCE4.VGA.LCD, 0x87) // Device-Specific
                }

                Return (One)
            }

            Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x12
                Local0 = ^^^^ATKD.GPLV ()
                If ((0x0E == Local0))
                {
                    Return (Zero)
                }

                If ((Local0 < Zero))
                {
                    Local0 = Zero
                }

                If ((Local0 > 0x0A))
                {
                    Local0 = 0x0A
                }

                If ((Local0 < 0x0A))
                {
                    Local0++
                }

                LBT1 = Local0
                ^^^^ATKD.IANE ((Local0 + 0x10))
                If (((BDID == One) | (BDID == 0x03)))
                {
                    Notify (^^^VGA.LCD, 0x86) // Device-Specific
                }
                ElseIf ((BDID == 0x04))
                {
                    Notify (^^^PCE4.VGA.LCD, 0x86) // Device-Specific
                }
                ElseIf ((Zero == ^^^SMBS.G2DO))
                {
                    Notify (^^^VGA.LCD, 0x86) // Device-Specific
                }
                Else
                {
                    Notify (^^^PCE4.VGA.LCD, 0x86) // Device-Specific
                }

                Return (One)
            }

            Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x13
                Notify (SLPB, 0x80) // Status Change
            }

            Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x14
                If ((^^^^ATKD.WAPF & 0x04))
                {
                    If (ATKP)
                    {
                        ^^^^ATKD.IANE (0x88)
                    }
                }
                ElseIf ((!WLEX && !BTEX))
                {
                    ^^^^ATKD.IANE (0x74)
                }
                ElseIf ((^^^^ATKD.RSTS () > Zero))
                {
                    WLLD = Zero
                    WLRF = Zero
                    BTAT = Zero
                    ^^^SMBS.G36O = Zero
                    WLST = Zero
                    BTST = Zero
                    ^^^^ATKD.IANE (0x74)
                }
                Else
                {
                    WLLD = One
                    WLRF = One
                    BTAT = One
                    ^^^SMBS.G36O = One
                    WLST = One
                    BTST = One
                    ^^^^ATKD.IANE (0x73)
                }
            }

            Name (WBTL, Package (0x04)
            {
                Zero, 
                One, 
                0x02, 
                0x03
            })
            Method (_Q1C, 0, Serialized)  // _Qxx: EC Query
            {
                P80H = 0x1C
            }

            Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x1D
                If ((CTMP >= OSST))
                {
                    Notify (\_TZ.THRM, 0x80) // Thermal Status Change
                }
                ElseIf ((CTMP >= OSTT))
                {
                    \_PR.P001._PPC = PTVL /* \_SB_.PCI0.SBRG.EC0_.PTVL */
                    Notify (\_PR.P001, 0x80) // Performance Capability Change
                    If ((\_PR.TCNM == 0x02))
                    {
                        \_PR.P002._PPC = PTVL /* \_SB_.PCI0.SBRG.EC0_.PTVL */
                        Notify (\_PR.P002, 0x80) // Performance Capability Change
                    }
                }
            }

            Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x1E
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x50)
                }
            }

            Method (_Q1F, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x1F
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x51)
                }
            }

            Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x20
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x32)
                }
            }

            Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x21
                If ((AVOL < 0x0F))
                {
                    AVOL++
                }

                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x31)
                }
            }

            Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x22
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x6E)
                }
                Else
                {
                    P80H = 0x80
                    Notify (BAT1, 0x80) // Status Change
                }
            }

            Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x24
                If ((AVOL > Zero))
                {
                    AVOL--
                }

                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x30)
                }
            }

            Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query
            {
                Debug = "=====QUERY_25====="
                Sleep (0x03E8)
                Notify (BAT1, 0x81) // Information Change
                Sleep (0x03E8)
                Notify (BAT1, 0x80) // Status Change
            }

            Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x26
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x5C)
                }
            }

            Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x27
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x8A)
                }
            }

            Method (_Q28, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x28
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x82)
                }
            }

            Method (_Q29, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x29
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0xB5)
                }
            }

            Method (_Q2C, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x2C
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x43)
                }
            }

            Method (_Q2D, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x2D
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x45)
                }
            }

            Method (_Q2E, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x2E
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x40)
                }
            }

            Method (_Q2F, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x2F
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x41)
                }
            }

            Method (_Q30, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x30
                Local0 = One
                If (LDOF)
                {
                    Local0 = (0x34 - Local0)
                    ^^^^ATKD.IANE (Local0)
                }
                Else
                {
                    ^^^^ATKD.IANE (0x34)
                }
            }

            Method (_Q31, 0, Serialized)  // _Qxx: EC Query
            {
                P80H = 0x31
                DPDT ()
                If ((One == ATKP))
                {
                    If ((BDID == 0x04))
                    {
                        If ((Zero == ^^^PCE4.VGA.STAT))
                        {
                            ^^^^ATKD.IANE (0x61)
                        }

                        If ((One == ^^^PCE4.VGA.STAT))
                        {
                            If ((One & DPSD))
                            {
                                ^^^^ATKD.IANE (0x62)
                            }
                            Else
                            {
                                ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                            }
                        }

                        If ((0x02 == ^^^PCE4.VGA.STAT))
                        {
                            If ((One & DPSD))
                            {
                                ^^^^ATKD.IANE (0x63)
                            }
                            Else
                            {
                                ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                            }
                        }

                        If ((0x03 == ^^^PCE4.VGA.STAT))
                        {
                            If ((0x08 & DPSD))
                            {
                                ^^^^ATKD.IANE (0xA0)
                            }
                            Else
                            {
                                ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                            }
                        }

                        If ((0x04 == ^^^PCE4.VGA.STAT))
                        {
                            If ((0x08 & DPSD))
                            {
                                ^^^^ATKD.IANE (0xA1)
                            }
                            Else
                            {
                                ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                            }
                        }

                        If ((0x05 == ^^^PCE4.VGA.STAT))
                        {
                            If ((0x09 == (0x09 & DPSD)))
                            {
                                ^^^^ATKD.IANE (0xA2)
                            }
                            Else
                            {
                                ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                            }
                        }

                        If ((0x06 == ^^^PCE4.VGA.STAT))
                        {
                            ^^^^ATKD.IANE (0x61)
                        }

                        If ((^^^PCE4.VGA.STAT == 0x06))
                        {
                            ^^^PCE4.VGA.STAT = One
                        }
                        Else
                        {
                            ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                        }
                    }
                    Else
                    {
                        If ((Zero == ^^^VGA.STAT))
                        {
                            ^^^^ATKD.IANE (0x61)
                        }

                        If ((One == ^^^VGA.STAT))
                        {
                            If ((One & DPSD))
                            {
                                ^^^^ATKD.IANE (0x62)
                            }
                            Else
                            {
                                ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                            }
                        }

                        If ((0x02 == ^^^VGA.STAT))
                        {
                            If ((One & DPSD))
                            {
                                ^^^^ATKD.IANE (0x63)
                            }
                            Else
                            {
                                ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                            }
                        }

                        If ((0x03 == ^^^VGA.STAT))
                        {
                            If ((0x08 & DPSD))
                            {
                                ^^^^ATKD.IANE (0xA0)
                            }
                            Else
                            {
                                ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                            }
                        }

                        If ((0x04 == ^^^VGA.STAT))
                        {
                            If ((0x08 & DPSD))
                            {
                                ^^^^ATKD.IANE (0xA1)
                            }
                            Else
                            {
                                ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                            }
                        }

                        If ((0x05 == ^^^VGA.STAT))
                        {
                            If ((0x09 == (0x09 & DPSD)))
                            {
                                ^^^^ATKD.IANE (0xA2)
                            }
                            Else
                            {
                                ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                            }
                        }

                        If ((0x06 == ^^^VGA.STAT))
                        {
                            ^^^^ATKD.IANE (0x61)
                        }

                        If ((^^^VGA.STAT == 0x06))
                        {
                            ^^^VGA.STAT = One
                        }
                        Else
                        {
                            ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                        }
                    }
                }
                ElseIf ((BDID == 0x04))
                {
                    If ((^^^PCE4.VGA.DOSP == Zero))
                    {
                        If ((^^^PCE4.VGA.STAT == Zero))
                        {
                            ^^^PCE4.VGA.LCDA = One
                            ^^^PCE4.VGA.CRTA = Zero
                            ^^^PCE4.VGA.DPTA = Zero
                        }

                        If ((^^^PCE4.VGA.STAT == One))
                        {
                            If ((One & DPSD))
                            {
                                ^^^PCE4.VGA.LCDA = Zero
                                ^^^PCE4.VGA.CRTA = One
                                ^^^PCE4.VGA.DPTA = Zero
                            }
                            Else
                            {
                                ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                            }
                        }

                        If ((^^^PCE4.VGA.STAT == 0x02))
                        {
                            If ((One & DPSD))
                            {
                                ^^^PCE4.VGA.LCDA = One
                                ^^^PCE4.VGA.CRTA = One
                                ^^^PCE4.VGA.DPTA = Zero
                            }
                            Else
                            {
                                ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                            }
                        }

                        If ((^^^PCE4.VGA.STAT == 0x03))
                        {
                            If ((0x08 & DPSD))
                            {
                                ^^^PCE4.VGA.LCDA = Zero
                                ^^^PCE4.VGA.CRTA = Zero
                                ^^^PCE4.VGA.DPTA = One
                            }
                            Else
                            {
                                ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                            }
                        }

                        If ((^^^PCE4.VGA.STAT == 0x04))
                        {
                            If ((0x08 & DPSD))
                            {
                                ^^^PCE4.VGA.LCDA = One
                                ^^^PCE4.VGA.CRTA = Zero
                                ^^^PCE4.VGA.DPTA = One
                            }
                            Else
                            {
                                ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                            }
                        }

                        If ((^^^PCE4.VGA.STAT == 0x05))
                        {
                            If ((0x09 == (0x09 & DPSD)))
                            {
                                ^^^PCE4.VGA.LCDA = Zero
                                ^^^PCE4.VGA.CRTA = One
                                ^^^PCE4.VGA.DPTA = One
                            }
                            Else
                            {
                                ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                            }
                        }

                        If ((^^^PCE4.VGA.STAT == 0x06))
                        {
                            ^^^PCE4.VGA.LCDA = One
                            ^^^PCE4.VGA.CRTA = Zero
                            ^^^PCE4.VGA.DPTA = Zero
                        }

                        Notify (^^^PCE4.VGA, 0x80) // Status Change
                        If ((^^^PCE4.VGA.STAT == 0x06))
                        {
                            ^^^PCE4.VGA.STAT = One
                        }
                        Else
                        {
                            ^^^PCE4.VGA.STAT += One /* \_SB_.PCI0.PCE4.VGA_.STAT */
                        }
                    }
                }
                Else
                {
                    If ((Zero == ^^^VGA.STAT))
                    {
                        ^^^^ATKD.IANE (0x61)
                    }

                    If ((One == ^^^VGA.STAT))
                    {
                        If ((One & DPSD))
                        {
                            ^^^^ATKD.IANE (0x62)
                        }
                        Else
                        {
                            ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                        }
                    }

                    If ((0x02 == ^^^VGA.STAT))
                    {
                        If ((One & DPSD))
                        {
                            ^^^^ATKD.IANE (0x63)
                        }
                        Else
                        {
                            ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                        }
                    }

                    If ((0x03 == ^^^VGA.STAT))
                    {
                        If ((0x08 & DPSD))
                        {
                            ^^^^ATKD.IANE (0xA0)
                        }
                        Else
                        {
                            ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                        }
                    }

                    If ((0x04 == ^^^VGA.STAT))
                    {
                        If ((0x08 & DPSD))
                        {
                            ^^^^ATKD.IANE (0xA1)
                        }
                        Else
                        {
                            ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                        }
                    }

                    If ((0x05 == ^^^VGA.STAT))
                    {
                        If ((0x09 == (0x09 & DPSD)))
                        {
                            ^^^^ATKD.IANE (0xA2)
                        }
                        Else
                        {
                            ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                        }
                    }

                    If ((0x06 == ^^^VGA.STAT))
                    {
                        ^^^^ATKD.IANE (0x61)
                    }

                    If ((^^^VGA.STAT == 0x06))
                    {
                        ^^^VGA.STAT = One
                    }
                    Else
                    {
                        ^^^VGA.STAT += One /* \_SB_.PCI0.VGA_.STAT */
                    }
                }
            }

            Method (_Q33, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x33
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x84)
                }
            }

            Method (_Q36, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x36
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x6B)
                }
            }

            Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x70
            }

            Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x73
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x99)
                }
            }

            Method (_Q83, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x83
                Notify (LID, 0x80) // Status Change
            }

            Method (_Q84, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0x84
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x95)
                }

                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x95)
                }
            }

            Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query
            {
                Notify (ACAD, 0x80) // Status Change
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x58)
                }
            }

            Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query
            {
                Notify (ACAD, 0x80) // Status Change
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x57)
                }
            }

            Method (_QB3, 0, NotSerialized)  // _Qxx: EC Query
            {
                P80H = 0xB3
                ^^^^ATKD.IANE (0x6D)
            }

            OperationRegion (CCLK, SystemIO, 0x0410, 0x04)
            Field (CCLK, DWordAcc, NoLock, Preserve)
            {
                    ,   1, 
                DUTY,   3, 
                THEN,   1, 
                Offset (0x01), 
                FTT,    1, 
                    ,   8, 
                TSTS,   1
            }

            Mutex (FAMX, 0x00)
            Method (FANG, 1, NotSerialized)
            {
                Acquire (FAMX, 0xFFFF)
                ERIB = Arg0
                Local0 = ERBD /* \_SB_.PCI0.SBRG.EC0_.ERBD */
                Release (FAMX)
                Return (Local0)
            }

            Method (FANW, 2, NotSerialized)
            {
                Acquire (FAMX, 0xFFFF)
                ERIB = Arg0
                ERBD = Arg1
                Release (FAMX)
                Return (Arg1)
            }

            Method (TUVR, 1, NotSerialized)
            {
                Return (0x03)
            }

            Method (THRO, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (CLCK, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    THEN = Zero
                }
                Else
                {
                    DUTY = Arg0
                    THEN = One
                }

                Return (THEN) /* \_SB_.PCI0.SBRG.EC0_.THEN */
            }
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (BMDL, Zero)
            Name (BFCT, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (ECOK ())
                {
                    If (^^EC0.BOL0)
                    {
                        Sleep (0x14)
                        Return (0x1F)
                    }
                    Else
                    {
                        Sleep (0x14)
                        Return (0x0F)
                    }
                }
                Else
                {
                    Sleep (0x14)
                    Return (0x1F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Name (STAT, Package (0x0D)
                {
                    One, 
                    0x1770, 
                    0x1770, 
                    One, 
                    0x2A30, 
                    0x0258, 
                    0xB4, 
                    0x0108, 
                    0x0EC4, 
                    "PA3533U ", 
                    "41167", 
                    "Li-Ion", 
                    "TOSHIBA"
                })
                If (ECOK ())
                {
                    Local0 = ^^EC0.BDN0 /* \_SB_.PCI0.SBRG.EC0_.BDN0 */
                    BMDL = Local0
                    BFCT = ^^EC0.BFC0 /* \_SB_.PCI0.SBRG.EC0_.BFC0 */
                    Sleep (0x14)
                    STAT [One] = ^^EC0.BDC0 /* \_SB_.PCI0.SBRG.EC0_.BDC0 */
                    Sleep (0x14)
                    STAT [0x04] = ^^EC0.BDV0 /* \_SB_.PCI0.SBRG.EC0_.BDV0 */
                    Sleep (0x14)
                }
                Else
                {
                    STAT [0x0B] = "Li-Ion"
                    STAT [One] = BFCT /* \_SB_.PCI0.SBRG.BAT1.BFCT */
                }

                If (BFCT)
                {
                    Divide (BFCT, 0x64, Local0, Local1)
                    Local1 *= 0x0A
                    STAT [0x05] = Local1
                    Divide (BFCT, 0x64, Local0, Local1)
                    Local1 *= 0x03
                    STAT [0x06] = Local1
                    STAT [0x02] = BFCT /* \_SB_.PCI0.SBRG.BAT1.BFCT */
                }

                Return (STAT) /* \_SB_.PCI0.SBRG.BAT1._BIF.STAT */
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Name (PBST, Package (0x04)
                {
                    Zero, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0x2A30
                })
                Local3 = 0x2A30
                If (ECOK ())
                {
                    Sleep (0x14)
                    Local0 = ^^EC0.BST0 /* \_SB_.PCI0.SBRG.EC0_.BST0 */
                    Sleep (0x14)
                    Local4 = ^^EC0.BAC0 /* \_SB_.PCI0.SBRG.EC0_.BAC0 */
                    Local4 = (0xFFFF - Local4)
                    Sleep (0x14)
                    Local2 = ^^EC0.BRC0 /* \_SB_.PCI0.SBRG.EC0_.BRC0 */
                    Sleep (0x14)
                    Local3 = ^^EC0.BPV0 /* \_SB_.PCI0.SBRG.EC0_.BPV0 */
                    Sleep (0x14)
                    PBST [Zero] = Local0
                    PBST [One] = Local4
                    PBST [0x02] = Local2
                    PBST [0x03] = Local3
                }

                If (ECOK ())
                {
                    If ((^^EC0.BDN0 != BMDL))
                    {
                        Notify (BAT1, 0x81) // Information Change
                    }
                }

                Return (PBST) /* \_SB_.PCI0.SBRG.BAT1._BST.PBST */
            }
        }

        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                If (ECOK ())
                {
                    Local0 = ^^EC0.ADPT /* \_SB_.PCI0.SBRG.EC0_.ADPT */
                    Return (Local0)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMS, SystemIO, 0x72, 0x02)
        Field (ECMS, ByteAcc, Lock, Preserve)
        {
            EIND,   8, 
            EDAT,   8
        }

        IndexField (EIND, EDAT, ByteAcc, NoLock, Preserve)
        {
            Offset (0x40), 
            IKFG,   8, 
            Offset (0x43), 
            RAMB,   32, 
            AVOL,   8, 
            LBTN,   8, 
            ERRF,   8, 
            OCLK,   8, 
            WIDE,   1, 
            OVCK,   2, 
            SLPN,   3, 
            ACRD,   1, 
            VGAS,   1, 
            CPUR,   6, 
            CPUF,   2, 
            LBT1,   4, 
            LBT2,   4, 
            PCMS,   8, 
            ALSL,   8, 
            ALAE,   1, 
            ALDE,   1, 
            ALSP,   1, 
            Offset (0x51), 
            WLDP,   1, 
            BTDP,   1, 
            WRST,   1, 
            BRST,   1, 
            WRPS,   1, 
            BRPS,   1, 
            Offset (0x52), 
            SYNA,   1, 
            ALPS,   1, 
            ELAN,   1, 
            Offset (0x53), 
            IKF2,   8, 
            UHDB,   8, 
            OSPM,   8, 
            TCGF,   8, 
            PPIS,   8, 
            PPIR,   8, 
            SIDE,   1, 
            PWBS,   1, 
            WFFG,   1, 
            OCST,   3, 
            SMTT,   1, 
            LDON,   1, 
            SP80,   1, 
            Offset (0x5B), 
            SWD2,   1, 
            F9KP,   1, 
            HACF,   6, 
            UWDP,   1, 
            WMDP,   1, 
            GPDP,   1, 
            TGDP,   1, 
            UWST,   1, 
            WMST,   1, 
            GPST,   1, 
            TGST,   1, 
            UWPS,   1, 
            WMPS,   1, 
            GPSP,   1, 
            TGPS,   1, 
            Offset (0x5E), 
            SPDC,   8, 
            DROK,   1, 
            SPDG,   1, 
            Offset (0x60), 
            KBLV,   8, 
            FVGA,   1, 
            P4HN,   1, 
            USSC,   1, 
            MFTM,   1, 
            Offset (0x62), 
            EGCP,   7, 
            PA3D,   1, 
            Offset (0xF6), 
            DPSB,   8, 
            DPSD,   8, 
            Offset (0xFB), 
            WLST,   1, 
            BTST,   1, 
            RSST,   6
        }

        OperationRegion (SCMS, SystemIO, 0x70, 0x02)
        Field (SCMS, ByteAcc, Lock, Preserve)
        {
            CB1I,   8, 
            CB1D,   8
        }

        IndexField (CB1I, CB1D, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            MCMS,   8, 
            YCMS,   8
        }
    }

    Scope (_SB)
    {
        Name (ATKP, Zero)
        Name (AITM, Zero)
        Name (PLMD, Zero)
        Name (MUTX, One)
        Name (LEDS, Zero)
        OperationRegion (WSMI, SystemIO, 0xB2, 0x02)
        Field (WSMI, ByteAcc, NoLock, Preserve)
        {
            WSCP,   8, 
            WSSP,   8
        }

        Mutex (MMTX, 0x00)
        Method (WISM, 1, NotSerialized)
        {
            Acquire (MMTX, 0xFFFF)
            WSCP = Arg0
            Release (MMTX)
        }

        Device (ATKD)
        {
            Name (_HID, "PnP0C14")  // _HID: Hardware ID
            Name (_UID, "ATK")  // _UID: Unique ID
            Name (ATKQ, Package (0x10)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (AQHI, Zero)
            Name (AQTI, 0x0F)
            Name (AQNO, Zero)
            Name (WAPF, Zero)
            Name (PCDV, Zero)
            Method (IANQ, 1, Serialized)
            {
                If ((AQNO >= 0x10))
                {
                    Local0 = 0x64
                    While ((Local0 && (AQNO >= 0x10)))
                    {
                        Local0--
                        Sleep (0x0A)
                    }

                    If ((Local0 && (AQNO >= 0x10)))
                    {
                        Return (Zero)
                    }
                }

                AQTI++
                AQTI &= 0x0F
                ATKQ [AQTI] = Arg0
                AQNO++
                Return (One)
            }

            Method (GANQ, 0, Serialized)
            {
                If (AQNO)
                {
                    AQNO--
                    Local0 = DerefOf (ATKQ [AQHI])
                    AQHI++
                    AQHI &= 0x0F
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (IANE, 1, Serialized)
            {
                IANQ (Arg0)
                Notify (ATKD, 0xFF) // Hardware-Specific
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x4E, 0x42, 0x01, 0x02, 0x35, 0xBB, 0x3C, 0x0B,  // NB..5.<.
                /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  // ...E..LZ
                /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08   // m.].....
            })
            Method (WMNB, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, IIA0)
                CreateDWordField (Arg2, 0x04, IIA1)
                Local0 = (Arg1 & 0xFFFFFFFF)
                Switch (Local0)
                {
                    Case (0x54494E49)
                    {
                        INIT (IIA0)
                        Return (One)
                    }
                    Case (0x53545342)
                    {
                        Return (BSTS ())
                    }
                    Case (0x4E554653)
                    {
                        Return (SFUN ())
                    }
                    Case (0x474F4457)
                    {
                        Return (WDOG (IIA0))
                    }
                    Case (0x494E424B)
                    {
                        Return (KBNI ())
                    }
                    Case (0x43455053)
                    {
                        Return (0x00070006)
                    }
                    Case (0x5256534F)
                    {
                        OSVR (IIA0)
                        Return (Zero)
                    }
                    Case (0x53545344)
                    {
                        If ((IIA0 == 0x00020011))
                        {
                            Return ((GALE (One) | 0x00050000))
                        }

                        If ((IIA0 == 0x00020012))
                        {
                            Return ((GALE (0x02) | 0x00050000))
                        }

                        If ((IIA0 == 0x00020013))
                        {
                            Return ((GALE (0x04) | 0x00050000))
                        }

                        If ((IIA0 == 0x00040015))
                        {
                            Return ((GALE (0x08) | 0x00050000))
                        }

                        If ((IIA0 == 0x00020014))
                        {
                            Return ((GALE (0x10) | 0x00050000))
                        }

                        If ((IIA0 == 0x00020015))
                        {
                            Return ((GALE (0x20) | 0x00050000))
                        }

                        If ((IIA0 == 0x00020016))
                        {
                            Return ((GALE (0x40) | 0x00050000))
                        }

                        If ((IIA0 == 0x00030001))
                        {
                            Return ((GMLE (One) + 0x00050000))
                        }

                        If ((IIA0 == 0x00030011)){}
                        If ((IIA0 == 0x00030012)){}
                        If ((IIA0 == 0x00040016))
                        {
                            Return ((GMLE (0x03) + 0x00050000))
                        }

                        If ((IIA0 == 0x00110011))
                        {
                            Return ((TMPR () & 0xFFFF))
                        }

                        If ((IIA0 == 0x00110012))
                        {
                            Local0 = TMPR ()
                            Local1 = Local0
                            Local0 = ((Local0 & 0xF0000000) >> 0x1C)
                            Local1 = ((Local1 & 0x0F000000) >> 0x18)
                            Local1 <<= 0x08
                            Return ((Local0 + Local1))
                        }

                        If ((IIA0 == 0x00050012))
                        {
                            Local0 = 0x0A
                            Local0 <<= 0x08
                            Local1 = (GPLV () + Local0)
                            Return (Local1)
                        }

                        If ((IIA0 == 0x00050001)){}
                        If ((IIA0 == 0x00050013)){}
                        If ((IIA0 == 0x00010011))
                        {
                            If (^^PCI0.SBRG.EC0.WLEX)
                            {
                                Return ((^^PCI0.SBRG.EC0.WLLD + 0x00030000))
                            }
                        }

                        If ((IIA0 == 0x00010013))
                        {
                            If (^^PCI0.SBRG.EC0.BTEX)
                            {
                                Return ((^^PCI0.SBRG.EC0.BTAT + 0x00050000))
                            }
                        }

                        If ((IIA0 == 0x00010021))
                        {
                            If (UWDP)
                            {
                                Return ((UWST + 0x00050000))
                            }
                        }

                        If ((IIA0 == 0x00010017))
                        {
                            If (WMDP)
                            {
                                Return ((WMST + 0x00050000))
                            }
                        }

                        If ((IIA0 == 0x00010015))
                        {
                            If (GPDP)
                            {
                                Return ((GPST + 0x00050000))
                            }
                        }

                        If ((IIA0 == 0x00010019))
                        {
                            If (TGDP)
                            {
                                Return ((TGST + 0x00050000))
                            }
                        }

                        If ((IIA0 == 0x00010001))
                        {
                            Return (0x00050001)
                        }

                        If ((IIA0 == 0x00120012))
                        {
                            Return (PSTC (Zero))
                        }

                        If ((IIA0 == 0x00050021))
                        {
                            Return (0x8000)
                        }

                        Return (0x02)
                    }
                    Case (0x53564544)
                    {
                        If ((IIA0 == 0x00020011))
                        {
                            Return (SALE ((IIA1 + 0x02)))
                        }

                        If ((IIA0 == 0x00020012))
                        {
                            Return (SALE ((IIA1 + 0x04)))
                        }

                        If ((IIA0 == 0x00020013))
                        {
                            Return (SALE ((IIA1 + 0x08)))
                        }

                        If ((IIA0 == 0x00040015))
                        {
                            Return (SALE ((IIA1 + 0x10)))
                        }

                        If ((IIA0 == 0x00020014))
                        {
                            Return (SALE ((IIA1 + 0x20)))
                        }

                        If ((IIA0 == 0x00020015))
                        {
                            Return (SALE ((IIA1 + 0x40)))
                        }

                        If ((IIA0 == 0x00020016))
                        {
                            Return (SALE ((IIA1 + 0x80)))
                        }

                        If ((IIA0 == 0x00030001))
                        {
                            Return (SMLE ((IIA1 + 0x02)))
                        }

                        If ((IIA0 == 0x00030011))
                        {
                            If ((IIA1 == Zero))
                            {
                                Return (SMLE (0x04))
                            }

                            Return (SMLE (0x05))
                        }

                        If ((IIA0 == 0x00030012))
                        {
                            If ((IIA1 == Zero))
                            {
                                Return (SMLE (0x04))
                            }

                            Return (SMLE (0x09))
                        }

                        If ((IIA0 == 0x00040016))
                        {
                            Return (SMLE ((IIA1 + 0x80)))
                        }

                        If ((IIA0 == 0x00050012))
                        {
                            SPLV (IIA1)
                            Return (One)
                        }

                        If ((IIA0 == 0x00050001))
                        {
                            Return (ALSC (IIA1))
                        }

                        If ((IIA0 == 0x00050013))
                        {
                            Return (ALSL (IIA1))
                        }

                        If ((IIA0 == 0x00010012))
                        {
                            WLED (IIA1)
                            Return (One)
                        }

                        If ((IIA0 == 0x00010013))
                        {
                            BLED (IIA1)
                            Return (One)
                        }

                        If ((IIA0 == 0x00010003))
                        {
                            Return (CWAP (IIA1))
                        }

                        If ((IIA0 == 0x00010015))
                        {
                            GPSC (IIA1)
                            Return (One)
                        }

                        If ((IIA0 == 0x00010019))
                        {
                            GSMC (IIA1)
                            Return (One)
                        }

                        If ((IIA0 == 0x00010017))
                        {
                            WMXC (IIA1)
                            Return (One)
                        }

                        If ((IIA0 == 0x00010021))
                        {
                            UWBC (IIA1)
                            Return (One)
                        }

                        If ((IIA0 == 0x00120012))
                        {
                            Return (PSTC ((IIA1 + One)))
                        }

                        If ((IIA0 == 0x00100012))
                        {
                            TLED (IIA1)
                            Return (One)
                        }

                        If ((IIA0 == 0x00050021))
                        {
                            SLKB (IIA1)
                            Return (One)
                        }

                        Return (Zero)
                    }
                    Case (0x48534C46)
                    {
                        FSTA = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                        FSFN = Zero
                        WISM (FUIF)
                        Return (FSTA) /* \FSTA */
                    }
                    Case (0x494E4946)
                    {
                        FADR = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                        FSFN = One
                        WISM (FUIF)
                        Return (FSTA) /* \FSTA */
                    }
                    Case (0x53524546)
                    {
                        FSTA = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                        FSFN = 0x02
                        WISM (FUIF)
                        Return (FSTA) /* \FSTA */
                    }
                    Case (0x49525746)
                    {
                        FADR = IIA0 /* \_SB_.ATKD.WMNB.IIA0 */
                        FSFN = 0x03
                        FSIZ = 0x1000
                        WISM (FUIF)
                        Return ((0x1000 - FSTA))
                    }
                    Case (0x50525746)
                    {
                        FSFN = 0x03
                        FSIZ = Zero
                        WISM (FUIF)
                        Return ((0x1000 - FSTA))
                    }
                    Case (0x52534345)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (Zero)
                        }

                        If ((Arg0 == 0x02))
                        {
                            Return (One)
                        }
                    }
                    Case (0x43534C46)
                    {
                        Return (Zero)
                    }
                    Case (0x43455246)
                    {
                        Return (Zero)
                    }
                    Case (0x454D4946)
                    {
                        Return (Zero)
                    }
                    Case (0x4C425053)
                    {
                        If ((IIA0 == 0x80))
                        {
                            Return (One)
                        }

                        If ((IIA0 > 0x0F))
                        {
                            Return (Zero)
                        }

                        If ((IIA0 < Zero))
                        {
                            Return (Zero)
                        }

                        SPLV (IIA0)
                        Return (One)
                    }
                    Case (0x50534453)
                    {
                        SDSP (IIA0)
                        Return (One)
                    }
                    Case (0x50534447)
                    {
                        Return (GDSP (IIA0))
                    }
                    Case (0x44495047)
                    {
                        Return (GPID ())
                    }
                    Case (0x44434C47)
                    {
                        Return (GLCD ())
                    }
                    Case (0x444F4D51)
                    {
                        Return (QMOD (IIA0))
                    }
                    Case (0x49564E41)
                    {
                        Return (ANVI (IIA0))
                    }
                    Case (0x46494243)
                    {
                        Return (CBIF (IIA0))
                    }
                    Case (0x4E464741)
                    {
                        Return (AGFN (IIA0))
                    }
                    Case (0x56454443)
                    {
                        If ((IIA0 == One))
                        {
                            Local0 = DPWR (IIA0)
                            Local1 = Zero
                            If ((Local0 && One))
                            {
                                Local1 |= One
                            }

                            If ((Local0 && 0x02))
                            {
                                Local1 |= 0x04
                            }

                            If ((Local0 && 0x04))
                            {
                                Local1 |= 0x10
                            }

                            If ((Local0 && 0x08))
                            {
                                Local1 |= 0x40
                            }

                            Return (Local1)
                        }

                        If ((IIA0 == Zero))
                        {
                            Local0 = QDEV (One)
                            ((QDEV (0x02) << 0x02) + Local0)
                            ((QDEV (0x04) << 0x04) + Local0)
                            ((QDEV (0x08) << 0x06) + Local0)
                            Return (Local0)
                        }

                        If ((IIA0 == 0x83))
                        {
                            Return (SDON (One))
                        }

                        If ((IIA0 == 0x85))
                        {
                            Return (SDON (0x02))
                        }

                        If ((IIA0 == 0x89))
                        {
                            Return (SDON (0x04))
                        }

                        If ((IIA0 == 0x91))
                        {
                            Return (SDON (0x08))
                        }

                        If ((IIA0 == 0x82))
                        {
                            Return (SDOF (One))
                        }

                        If ((IIA0 == 0x84))
                        {
                            Return (SDOF (0x02))
                        }

                        If ((IIA0 == 0x88))
                        {
                            Return (SDOF (0x04))
                        }

                        If ((IIA0 == 0x90))
                        {
                            Return (SDOF (0x08))
                        }
                    }
                    Case (0x46494643)
                    {
                        CFIF (IIA0)
                        Return (One)
                    }
                    Case (0x44495046)
                    {
                        Return (FPID ())
                    }
                    Case (0x59454B48)
                    {
                        Return (One)
                    }
                    Case (0x5446424B)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (0xFFFFFFFE)
                    }

                }
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
                If ((Arg0 == 0xFF))
                {
                    Return (GANQ ())
                }

                Return (Ones)
            }

            Method (INIT, 1, NotSerialized)
            {
                ATKP = One
            }

            Method (BSTS, 0, NotSerialized)
            {
                Local0 = IKFG /* \_SB_.IKFG */
                Local0 |= (IKF2 << 0x08)
                Return (Local0)
            }

            Method (TMPR, 0, NotSerialized)
            {
                Return (Ones)
            }

            Method (SFUN, 0, NotSerialized)
            {
                Local0 = 0x37
                Local0 |= 0x0800
                Local0 |= 0x00020000
                Local0 |= 0x00080000
                Local0 |= 0x00100000
                Return (Local0)
            }

            Method (OSVR, 1, NotSerialized)
            {
                OSFG = Arg0
            }

            Method (GPLV, 0, Serialized)
            {
                Local0 = LBTN /* \_SB_.LBTN */
                Switch (Local0)
                {
                    Case (0x14)
                    {
                        Return (Zero)
                    }
                    Case (0x19)
                    {
                        Return (One)
                    }
                    Case (0x1E)
                    {
                        Return (0x02)
                    }
                    Case (0x23)
                    {
                        Return (0x03)
                    }
                    Case (0x28)
                    {
                        Return (0x04)
                    }
                    Case (0x2D)
                    {
                        Return (0x05)
                    }
                    Case (0x32)
                    {
                        Return (0x06)
                    }
                    Case (0x37)
                    {
                        Return (0x07)
                    }
                    Case (0x41)
                    {
                        Return (0x08)
                    }
                    Case (0x50)
                    {
                        Return (0x09)
                    }
                    Case (0x64)
                    {
                        Return (0x0A)
                    }
                    Default
                    {
                        Return (0x0E)
                    }

                }
            }

            Method (SPLV, 1, Serialized)
            {
                Local0 = Arg0
                Switch (Local0)
                {
                    Case (Zero)
                    {
                        Local1 = 0x14
                    }
                    Case (One)
                    {
                        Local1 = 0x19
                    }
                    Case (0x02)
                    {
                        Local1 = 0x1E
                    }
                    Case (0x03)
                    {
                        Local1 = 0x23
                    }
                    Case (0x04)
                    {
                        Local1 = 0x28
                    }
                    Case (0x05)
                    {
                        Local1 = 0x2D
                    }
                    Case (0x06)
                    {
                        Local1 = 0x32
                    }
                    Case (0x07)
                    {
                        Local1 = 0x37
                    }
                    Case (0x08)
                    {
                        Local1 = 0x41
                    }
                    Case (0x09)
                    {
                        Local1 = 0x50
                    }
                    Case (0x0A)
                    {
                        Local1 = 0x64
                    }

                }

                If (((BDID == One) | (BDID == 0x03)))
                {
                    ^^PCI0.VGA.LCD._BCM (Local1)
                }
                ElseIf ((BDID == 0x04))
                {
                    ^^PCI0.PCE4.VGA.LCD._BCM (Local1)
                }
                ElseIf ((Zero == ^^PCI0.SMBS.G2DO))
                {
                    ^^PCI0.VGA.LCD._BCM (Local1)
                }
                Else
                {
                    ^^PCI0.PCE4.VGA.LCD._BCM (Local1)
                }

                Return (One)
            }

            Method (SPBL, 1, NotSerialized)
            {
                If ((Arg0 == 0x0100))
                {
                    Return (0x0A)
                }

                If ((Arg0 == 0x80))
                {
                    Return (One)
                }

                If ((Arg0 > 0x0F))
                {
                    Return (Zero)
                }

                If ((Arg0 < Zero))
                {
                    Return (Zero)
                }

                Return (One)
            }

            Method (WLED, 1, NotSerialized)
            {
                ^^PCI0.SBRG.EC0.WLLD = Arg0
                WLST = Arg0
                Return (One)
            }

            Method (BLED, 1, NotSerialized)
            {
                ^^PCI0.SBRG.EC0.BTAT = Arg0
                ^^PCI0.SMBS.G36O = Arg0
                BTST = Arg0
                Return (One)
            }

            Method (KBNI, 0, NotSerialized)
            {
                Return (One)
            }

            Method (GALE, 1, NotSerialized)
            {
                If ((Arg0 == 0x04))
                {
                    If ((LEDS && 0x04))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == 0x08))
                {
                    If ((LEDS && 0x08))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == 0x10))
                {
                    If ((LEDS && 0x10))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (0x02)
            }

            Method (SALE, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GMLE, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (One)
                }

                If ((Arg0 == 0x02))
                {
                    Return (One)
                }

                If ((Arg0 == 0x03))
                {
                    Return (One)
                }

                Return (One)
            }

            Method (SMLE, 1, NotSerialized)
            {
                Return (One)
            }

            Method (UWBC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (WMXC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GPSC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GSMC, 1, NotSerialized)
            {
                Return (One)
            }

            Method (SDSP, 1, NotSerialized)
            {
                If ((BDID == 0x04))
                {
                    If ((One == Arg0))
                    {
                        ^^PCI0.PCE4.VGA.LCDA = One
                        ^^PCI0.PCE4.VGA.CRTA = Zero
                        ^^PCI0.PCE4.VGA.DPTA = Zero
                        DPSB = 0x02
                        Notify (^^PCI0.PCE4.VGA, 0x80) // Status Change
                    }

                    If ((0x02 == Arg0))
                    {
                        ^^PCI0.PCE4.VGA.LCDA = Zero
                        ^^PCI0.PCE4.VGA.CRTA = One
                        ^^PCI0.PCE4.VGA.DPTA = Zero
                        DPSB = One
                        Notify (^^PCI0.PCE4.VGA, 0x80) // Status Change
                    }

                    If ((0x03 == Arg0))
                    {
                        ^^PCI0.PCE4.VGA.LCDA = One
                        ^^PCI0.PCE4.VGA.CRTA = One
                        ^^PCI0.PCE4.VGA.DPTA = Zero
                        DPSB = 0x03
                        Notify (^^PCI0.PCE4.VGA, 0x80) // Status Change
                    }

                    If ((0x10 == Arg0))
                    {
                        ^^PCI0.PCE4.VGA.LCDA = Zero
                        ^^PCI0.PCE4.VGA.CRTA = Zero
                        ^^PCI0.PCE4.VGA.DPTA = One
                        DPSB = 0x08
                        Notify (^^PCI0.PCE4.VGA, 0x80) // Status Change
                    }

                    If ((0x11 == Arg0))
                    {
                        ^^PCI0.PCE4.VGA.LCDA = One
                        ^^PCI0.PCE4.VGA.CRTA = Zero
                        ^^PCI0.PCE4.VGA.DPTA = One
                        DPSB = 0x0A
                        Notify (^^PCI0.PCE4.VGA, 0x80) // Status Change
                    }

                    If ((0x12 == Arg0))
                    {
                        ^^PCI0.PCE4.VGA.LCDA = Zero
                        ^^PCI0.PCE4.VGA.CRTA = One
                        ^^PCI0.PCE4.VGA.DPTA = One
                        DPSB = 0x09
                        Notify (^^PCI0.PCE4.VGA, 0x80) // Status Change
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    If ((One == Arg0))
                    {
                        ^^PCI0.VGA.LCDA = One
                        ^^PCI0.VGA.CRTA = Zero
                        ^^PCI0.VGA.DPTA = Zero
                        DPSB = 0x02
                        Notify (^^PCI0.VGA, 0x80) // Status Change
                    }

                    If ((0x02 == Arg0))
                    {
                        ^^PCI0.VGA.LCDA = Zero
                        ^^PCI0.VGA.CRTA = One
                        ^^PCI0.VGA.DPTA = Zero
                        DPSB = One
                        Notify (^^PCI0.VGA, 0x80) // Status Change
                    }

                    If ((0x03 == Arg0))
                    {
                        ^^PCI0.VGA.LCDA = One
                        ^^PCI0.VGA.CRTA = One
                        ^^PCI0.VGA.DPTA = Zero
                        DPSB = 0x03
                        Notify (^^PCI0.VGA, 0x80) // Status Change
                    }

                    If ((0x10 == Arg0))
                    {
                        ^^PCI0.VGA.LCDA = Zero
                        ^^PCI0.VGA.CRTA = Zero
                        ^^PCI0.VGA.DPTA = One
                        DPSB = 0x08
                        Notify (^^PCI0.VGA, 0x80) // Status Change
                    }

                    If ((0x11 == Arg0))
                    {
                        ^^PCI0.VGA.LCDA = One
                        ^^PCI0.VGA.CRTA = Zero
                        ^^PCI0.VGA.DPTA = One
                        DPSB = 0x0A
                        Notify (^^PCI0.VGA, 0x80) // Status Change
                    }

                    If ((0x12 == Arg0))
                    {
                        ^^PCI0.VGA.LCDA = Zero
                        ^^PCI0.VGA.CRTA = One
                        ^^PCI0.VGA.DPTA = One
                        DPSB = 0x09
                        Notify (^^PCI0.VGA, 0x80) // Status Change
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Method (GPID, 0, NotSerialized)
            {
                Return (0x03)
            }

            Method (FPID, 0, NotSerialized)
            {
                Return (0x0118)
            }

            Method (ALSC, 1, NotSerialized)
            {
                If (Arg0){}
                Else
                {
                }

                Return (One)
            }

            Method (ALSL, 1, NotSerialized)
            {
                Return (One)
            }

            Method (HWRS, 0, NotSerialized)
            {
                Local0 = Zero
                Local0 |= One
                If ((^^PCI0.SBRG.EC0.WLEX == One))
                {
                    Local0 |= 0x80
                }

                If ((^^PCI0.SBRG.EC0.BTEX == One))
                {
                    Local0 |= 0x0100
                }

                Return (Local0)
            }

            Method (RSTS, 0, NotSerialized)
            {
                Local0 = Zero
                If ((^^PCI0.SBRG.EC0.WLLD == One))
                {
                    Local0 |= One
                }

                If ((^^PCI0.SBRG.EC0.BTAT == One))
                {
                    Local0 |= 0x02
                }

                Return (Local0)
            }

            Method (GLCD, 0, NotSerialized)
            {
                Local0 = IDMN /* \IDMN */
                Local0 <<= 0x10
                Local0 |= IDPC /* \IDPC */
                Return (Local0)
            }

            Method (CWAP, 1, NotSerialized)
            {
                WAPF |= Arg0 /* \_SB_.ATKD.WAPF */
                Return (One)
            }

            Method (WDOG, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (DPWR, 1, NotSerialized)
            {
                Return (One)
            }

            Method (QDEV, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (0x02)
                }

                If ((Arg0 == 0x02))
                {
                    Return (0x02)
                }

                If ((Arg0 == 0x04))
                {
                    Return (0x02)
                }

                If ((Arg0 == 0x08))
                {
                    Return (0x02)
                }

                Return (0x02)
            }

            Method (SDON, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x02))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x04))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x08))
                {
                    Return (Zero)
                }

                Return (Zero)
            }

            Method (SDOF, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x02))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x04))
                {
                    Return (Zero)
                }

                If ((Arg0 == 0x08))
                {
                    Return (Zero)
                }

                Return (Zero)
            }

            Method (QMOD, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (Zero)
                }

                If ((Arg0 == One)){}
                If ((Arg0 == 0x02)){}
                Return (One)
            }

            Method (ANVI, 1, Serialized)
            {
                Local0 = AGFN (Zero)
                Local0 += 0x0100
                OperationRegion (\DBUF, SystemMemory, Local0, 0x1000)
                Field (DBUF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0xD2), 
                    PJIC,   8, 
                    Offset (0xD4), 
                    SLPD,   8, 
                    Offset (0xDE), 
                    SLMK,   8
                }

                Field (DBUF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x27), 
                    OSTE,   8
                }

                FADR = Local0
                FSFN = One
                WISM (FUIF)
                FADR = 0x434E4647
                FSFN = 0x05
                WISM (FUIF)
                PJIC = SOAO /* \SOAO */
                SLPD = 0xFF
                Local0 = Arg0
                Switch (Local0)
                {
                    Case (One)
                    {
                        SLMK = One
                        Local1 = Zero
                        Break
                    }
                    Case (0x02)
                    {
                        FADR = 0x4D464730
                        FSFN = 0x05
                        WISM (FUIF)
                        Return (OSTE) /* \_SB_.ATKD.ANVI.OSTE */
                    }
                    Case (0x05)
                    {
                        SLMK = 0x05
                        Local1 = Zero
                        Break
                    }
                    Case (0x0101)
                    {
                        SLMK = One
                        SLPD = GSEC ()
                        Local1 = One
                        Break
                    }
                    Case (0x0105)
                    {
                        SLMK = 0x05
                        SLPD = GSEC ()
                        Local1 = One
                        Break
                    }
                    Default
                    {
                        Return (0xFFFF)
                    }

                }

                FADR = 0x434E4647
                FSFN = 0x04
                WISM (FUIF)
                FSTA = Zero
                FSFN = Zero
                WISM (FUIF)
                FSFN = 0x06
                WISM (FUIF)
                FSTA = One
                FSFN = Zero
                WISM (FUIF)
                Return (Local1)
            }

            Method (GSEC, 0, NotSerialized)
            {
                Local1 = ((YCMS >> 0x04) * 0x0A)
                Local1 += (YCMS & 0x0F)
                Local1 *= 0x0C
                Local0 = ((MCMS >> 0x04) * 0x0A)
                Local0 += (MCMS & 0x0F)
                Local0 += 0x03
                Local1 += Local0
                Return (Local1)
            }

            Method (PSTC, 1, Serialized)
            {
                If ((\_PR.TCNM == 0x02)){}
                Local0 = SizeOf (\_PR.P001._PSS)
                If ((Arg0 == Zero))
                {
                    Local1 = Local0
                    Local1 <<= 0x08
                    Local1 += Local0
                    Return (Local1)
                }

                If ((Arg0 > Local0))
                {
                    Return (Ones)
                }

                Local1 = Zero
                Local1 = (Local0 - Arg0)
                If ((^^PCI0.SBRG.EC0.PTVL > Local1))
                {
                    Local1 = ^^PCI0.SBRG.EC0.PTVL /* \_SB_.PCI0.SBRG.EC0_.PTVL */
                }

                \_PR.P001._PPC = Local1
                If ((\_PR.TCNM == 0x02))
                {
                    \_PR.P002._PPC = Local1
                }

                If ((^^PCI0.SBRG.EC0.ADPT == Zero))
                {
                    If ((^^PCI0.SBRG.EC0.BDC0 <= 0x0BB8))
                    {
                        Local1 = Zero
                        Local1 = (Local0 - One)
                        If ((^^PCI0.SBRG.EC0.PTVL > Local1))
                        {
                            Local1 = ^^PCI0.SBRG.EC0.PTVL /* \_SB_.PCI0.SBRG.EC0_.PTVL */
                        }

                        \_PR.P001._PPC = Local1
                        If ((\_PR.TCNM == 0x02))
                        {
                            \_PR.P002._PPC = Local1
                        }
                    }
                }

                Notify (\_PR.P001, 0x80) // Performance Capability Change
                If ((\_PR.TCNM == 0x02))
                {
                    Notify (\_PR.P002, 0x80) // Performance Capability Change
                }

                Return (Zero)
            }

            Method (SMBB, 1, Serialized)
            {
                Return (Ones)
            }

            Method (SMBW, 1, Serialized)
            {
                Return (Ones)
            }

            Method (SMBK, 1, Serialized)
            {
                Return (Ones)
            }

            Method (ECRW, 1, Serialized)
            {
                Return (Ones)
            }

            Method (CBIF, 1, Serialized)
            {
                Return (One)
            }

            Method (TLED, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GLED, 1, NotSerialized)
            {
                Return (One)
            }

            Method (CFIF, 1, Serialized)
            {
                BAML = Arg0
                WISM (0xA6)
                Return (One)
            }

            Method (GLKB, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    Return (Zero)
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Return (Zero)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Return (0x80)
                }

                Return (Ones)
            }

            Method (SLKB, 1, NotSerialized)
            {
                Return (One)
            }

            Method (GDSP, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (Zero)
                }

                If ((Arg0 == One))
                {
                    Local0 = DPSD /* \_SB_.DPSD */
                    Local1 = Zero
                    If ((One & Local0))
                    {
                        (0x02 | Local1)
                    }

                    If ((0x02 & Local0))
                    {
                        (One | Local1)
                    }

                    If ((0x04 & Local0))
                    {
                        (0x04 | Local1)
                    }

                    If ((0x10 & Local0))
                    {
                        (0x08 | Local1)
                    }

                    If ((0x08 & Local0))
                    {
                        (0x10 | Local1)
                    }

                    Return (Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = DPSB /* \_SB_.DPSB */
                    Local1 = Zero
                    If ((One & Local0))
                    {
                        (0x02 | Local1)
                    }

                    If ((0x02 & Local0))
                    {
                        (One | Local1)
                    }

                    If ((0x04 & Local0))
                    {
                        (0x04 | Local1)
                    }

                    If ((0x10 & Local0))
                    {
                        (0x08 | Local1)
                    }

                    If ((0x08 & Local0))
                    {
                        (0x10 | Local1)
                    }

                    Return (Local1)
                }

                If ((Arg0 == 0x80))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (AGFN, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (AMLA) /* \AMLA */
                }

                P80H = 0xAA
                Local0 = Zero
                OperationRegion (\PARM, SystemMemory, Arg0, 0x08)
                Field (PARM, DWordAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    LEN,    16, 
                    STAS,   8, 
                    EROR,   8
                }

                EROR = Zero
                STAS = One
                BIPA = Arg0
                Switch (MFUN)
                {
                    Case (One)
                    {
                        GVER (Arg0, LEN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        Return (One)
                    }
                    Case (0x02)
                    {
                        WISM (0xA1)
                        STAS &= 0xFE
                        STAS |= 0x80
                        Return (One)
                    }
                    Case (0x10)
                    {
                        Local0 = MF10 (Arg0, LEN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        EROR |= Local0
                        Return (One)
                    }
                    Case (0x11)
                    {
                        Local0 = MF11 (Arg0, LEN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        EROR |= Local0
                        Return (One)
                    }
                    Case (0x12)
                    {
                        Local0 = MF12 (Arg0, LEN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        EROR |= Local0
                        Return (One)
                    }
                    Case (0x13)
                    {
                        Local0 = MF13 (Arg0, LEN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        EROR |= Local0
                        Return (One)
                    }
                    Case (0x14)
                    {
                        Local0 = MF14 (Arg0, LEN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        EROR |= Local0
                        Return (One)
                    }
                    Case (0x15)
                    {
                        Local0 = MF15 (Arg0, LEN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        EROR |= Local0
                        Return (One)
                    }
                    Case (0x16)
                    {
                        Local0 = MF16 (Arg0, LEN, MFUN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        Return (One)
                    }
                    Case (0x17)
                    {
                        Local0 = MF17 (Arg0, LEN, MFUN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        EROR |= Local0
                        Return (One)
                    }
                    Case (0x18)
                    {
                        Local0 = MF18 (Arg0, LEN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        EROR |= Local0
                        Return (One)
                    }
                    Case (0x19)
                    {
                        Local0 = MF19 (Arg0, LEN, MFUN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        EROR |= Local0
                        Return (One)
                    }
                    Case (0x1F)
                    {
                        WISM (0xA1)
                        STAS &= 0xFE
                        STAS |= 0x80
                        Return (One)
                    }
                    Case (0x20)
                    {
                        WISM (0xA1)
                        STAS &= 0xFE
                        STAS |= 0x80
                        Return (One)
                    }
                    Case (0x30)
                    {
                        Local0 = MF30 (Arg0, LEN, MFUN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        EROR |= Local0
                        Return (One)
                    }
                    Case (0x32)
                    {
                        Local0 = MF32 (Arg0, LEN, MFUN, SFUN)
                        STAS &= 0xFE
                        STAS |= 0x80
                        EROR |= Local0
                        Return (One)
                    }
                    Default
                    {
                        STAS &= 0xFE
                        STAS |= 0x80
                        Return (One)
                    }

                }

                If ((STAS == One))
                {
                    EROR = One
                    STAS |= 0x02
                }

                STAS &= 0xFE
                STAS |= 0x80
                Return (Zero)
            }

            Method (GVER, 2, NotSerialized)
            {
                OperationRegion (\FGVR, SystemMemory, Arg0, Arg1)
                Field (FGVR, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    APID,   16, 
                    APRV,   32
                }

                Return (Zero)
            }

            Method (MF10, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == One))
                {
                    Local0 = SRTC (Arg0, Arg1)
                }

                If ((Arg2 == 0x02)){}
                Return (Local0)
            }

            Method (SRTC, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F101, SystemMemory, Arg0, Arg1)
                Field (F101, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    DLTM,   16
                }

                RTCW = DLTM /* \_SB_.ATKD.SRTC.DLTM */
                Return (Zero)
            }

            Method (MF11, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == One))
                {
                    Local0 = GBAT (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x02))
                {
                    Local0 = ASBR (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x03))
                {
                    Local0 = ASBE (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x04))
                {
                    Local0 = BTCR (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (GBAT, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F111, SystemMemory, Arg0, Arg1)
                Field (F111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BTNM,   8, 
                    BTTP,   8
                }

                BTNM = One
                If ((BDID == 0x04))
                {
                    BTTP = 0x04
                }
                Else
                {
                    BTTP = 0x03
                }

                Return (Zero)
            }

            Method (ASBR, 2, NotSerialized)
            {
                If ((Arg1 < 0x30))
                {
                    Return (0x02)
                }

                OperationRegion (\F112, SystemMemory, Arg0, Arg1)
                Field (F112, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BATN,   8, 
                    BATA,   8, 
                    REGS,   8, 
                    BDAT,   16, 
                    BLEN,   8, 
                    BREV,   16, 
                    BLK1,   32, 
                    BLK2,   32, 
                    BLK3,   32, 
                    BLK4,   32, 
                    BLK5,   32, 
                    BLK6,   32, 
                    BLK7,   32, 
                    BLK8,   32
                }

                If ((BATN > One))
                {
                    Return (0x11)
                }

                Return (0x10)
            }

            Method (ASBE, 2, Serialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F113, SystemMemory, Arg0, Arg1)
                Field (F113, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BATN,   8, 
                    BATA,   8, 
                    REGS,   8, 
                    BDAT,   8
                }

                If ((BATN > One))
                {
                    Return (0x11)
                }

                Return (0x10)
            }

            Method (BTCR, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                OperationRegion (\F114, SystemMemory, Arg0, Arg1)
                Field (F114, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    DCHR,   8
                }

                If ((DCHR == One))
                {
                    If (^^PCI0.SBRG.EC0.BAEX)
                    {
                        ^^PCI0.SBRG.EC0.EECD (0x59, 0x9A, Zero)
                    }
                }
                ElseIf ((DCHR == Zero))
                {
                    ^^PCI0.SBRG.EC0.EECD (0x59, 0x9B, Zero)
                }

                Return (Zero)
            }

            Method (MF12, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == One))
                {
                    Local0 = GLDI (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x02))
                {
                    Local0 = LDCR (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (GLDI, 2, NotSerialized)
            {
                If ((Arg1 < 0x10))
                {
                    Return (0x02)
                }

                OperationRegion (\F121, SystemMemory, Arg0, Arg1)
                Field (F121, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    LEDI,   64
                }

                LEDI = Zero
                Return (Zero)
            }

            Method (LDCR, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                Return (0x10)
            }

            Method (MF13, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == One))
                {
                    Local0 = GTSI (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x02))
                {
                    Local0 = GTSV (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x03))
                {
                    Local0 = GVSN (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x04))
                {
                    Local0 = GVSV (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x05))
                {
                    Local0 = GFNN (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x06))
                {
                    Local0 = GFNS (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x07))
                {
                    Local0 = SFNS (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x08))
                {
                    Local0 = GGSV (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (GTSI, 2, NotSerialized)
            {
                If ((Arg1 < 0x18))
                {
                    Return (0x02)
                }

                OperationRegion (\F131, SystemMemory, Arg0, Arg1)
                Field (F131, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    Offset (0x09), 
                    C0SE,   1, 
                    C1SE,   1, 
                    Offset (0x0A), 
                    VGSE,   1
                }

                C0SE = One
                If ((\_PR.TCNM == 0x02))
                {
                    C1SE = One
                }

                VGSE = One
                Return (Zero)
            }

            Method (GTSV, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F132, SystemMemory, Arg0, Arg1)
                Field (F132, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SNUM,   8, 
                    TEMC,   8
                }

                If ((SNUM == 0x08))
                {
                    TEMC = ^^PCI0.SBRG.EC0.CTMP /* \_SB_.PCI0.SBRG.EC0_.CTMP */
                    Return (Zero)
                }
                ElseIf ((SNUM == 0x09))
                {
                    If ((\_PR.TCNM == 0x02))
                    {
                        TEMC = ^^PCI0.SBRG.EC0.CTMP /* \_SB_.PCI0.SBRG.EC0_.CTMP */
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x10)
                    }
                }
                ElseIf ((SNUM == 0x10))
                {
                    TEMC = ^^PCI0.SBRG.EC0.SKTC /* \_SB_.PCI0.SBRG.EC0_.SKTC */
                    Return (Zero)
                }
                Else
                {
                    Return (0x10)
                }
            }

            Method (GVSN, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                OperationRegion (\F133, SystemMemory, Arg0, Arg1)
                Field (F133, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    VSNM,   8
                }

                VSNM = Zero
                Return (Zero)
            }

            Method (GVSV, 2, NotSerialized)
            {
                If ((Arg1 < 0x0B))
                {
                    Return (0x02)
                }

                Return (0x10)
            }

            Method (GFNN, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                OperationRegion (\F135, SystemMemory, Arg0, Arg1)
                Field (F135, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    FNUM,   8
                }

                FNUM = Zero
                Return (Zero)
            }

            Method (GFNS, 2, NotSerialized)
            {
                If ((Arg1 < 0x0D))
                {
                    Return (0x02)
                }

                OperationRegion (\F136, SystemMemory, Arg0, Arg1)
                Field (F136, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    FNUM,   8, 
                    FSRM,   32
                }

                FSRM = ^^PCI0.SBRG.EC0.FSRM /* \_SB_.PCI0.SBRG.EC0_.FSRM */
                Return (Zero)
            }

            Method (SFNS, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                Return (0x10)
            }

            Method (GGSV, 2, NotSerialized)
            {
                If ((Arg1 < 0x0B))
                {
                    Return (0x02)
                }

                OperationRegion (\F138, SystemMemory, Arg0, Arg1)
                Field (F138, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    SNUM,   8, 
                    VALU,   16
                }

                If ((SNUM == 0x02))
                {
                    Local0 = (^^PCI0.SBRG.EC0.CTMP * 0x0A)
                    VALU = Local0
                    Return (Zero)
                }
                ElseIf ((SNUM == 0x03))
                {
                    Local0 = (^^PCI0.SBRG.EC0.SKTC * 0x0A)
                    VALU = Local0
                    Return (Zero)
                }
                Else
                {
                    Return (0x10)
                }
            }

            Method (MF14, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == One))
                {
                    Local0 = GNBT (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x02))
                {
                    Local0 = GBTS (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (GNBT, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                OperationRegion (\F141, SystemMemory, Arg0, Arg1)
                Field (F141, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BNUM,   8
                }

                BNUM = Zero
                Return (Zero)
            }

            Method (GBTS, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                Return (0x10)
            }

            Method (MF15, 3, NotSerialized)
            {
                Local0 = Zero
                If ((Arg2 == One))
                {
                    Local0 = GLDB (Arg0, Arg1)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = SLDB (Arg0, Arg1)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = GDPI (Arg0, Arg1)
                }

                If ((Arg2 == 0x04))
                {
                    Local0 = SODP (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (GLDB, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F151, SystemMemory, Arg0, Arg1)
                Field (F151, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    CRLV,   8, 
                    MXLV,   8
                }

                MXLV = SPBL (0x0100)
                CRLV = GPLV ()
                Return (Zero)
            }

            Method (SLDB, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F152, SystemMemory, Arg0, Arg1)
                Field (F152, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BVAL,   8, 
                    BTPE,   8
                }

                Local0 = BVAL /* \_SB_.ATKD.SLDB.BVAL */
                If ((Zero == BTPE))
                {
                    If ((Local0 <= 0x0A))
                    {
                        If ((Local0 >= Zero))
                        {
                            SPLV (Local0)
                            Return (Zero)
                        }
                    }
                    Else
                    {
                        Return (0x10)
                    }
                }

                If ((One == BTPE))
                {
                    If ((Local0 <= 0x64))
                    {
                        If ((Local0 >= Zero))
                        {
                            If (((BDID == One) | (BDID == 0x03)))
                            {
                                ^^PCI0.VGA.LCD._BCM (Local0)
                                Return (Zero)
                            }
                            ElseIf ((BDID == 0x04))
                            {
                                ^^PCI0.PCE4.VGA.LCD._BCM (Local0)
                                Return (Zero)
                            }
                            ElseIf ((Zero == ^^PCI0.SMBS.G2DO))
                            {
                                ^^PCI0.VGA.LCD._BCM (Local0)
                                Return (Zero)
                            }
                            Else
                            {
                                ^^PCI0.PCE4.VGA.LCD._BCM (Local0)
                                Return (Zero)
                            }
                        }
                    }
                    Else
                    {
                        Return (0x10)
                    }
                }
                Else
                {
                    Return (0x11)
                }
            }

            Method (GDPI, 2, NotSerialized)
            {
                If ((Arg1 < 0x10))
                {
                    Return (0x02)
                }

                OperationRegion (\F153, SystemMemory, Arg0, Arg1)
                Field (F153, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    ODDI,   32, 
                    CTCS,   32
                }

                WISM (0xA1)
                Local1 = Zero
                Local0 = DPSB /* \_SB_.DPSB */
                If ((One & Local0))
                {
                    Local1 |= 0x02
                }

                If ((0x02 & Local0))
                {
                    Local1 |= One
                }

                If ((0x08 & Local0))
                {
                    Local1 |= 0x04
                }

                CTCS = Local1
                Local1 = Zero
                Local0 = DPSD /* \_SB_.DPSD */
                If ((One & Local0))
                {
                    Local1 |= 0x02
                }

                If ((0x02 & Local0))
                {
                    Local1 |= One
                }

                If ((0x08 & Local0))
                {
                    Local1 |= 0x04
                }

                ODDI = Local0
                Return (Zero)
            }

            Method (SODP, 2, NotSerialized)
            {
                If ((Arg1 < 0x0C))
                {
                    Return (0x02)
                }

                OperationRegion (\F154, SystemMemory, Arg0, Arg1)
                Field (F154, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    ODDM,   32
                }

                ^^PCI0.VGA.AF02 ()
                CreateWordField (^^PCI0.VGA.ATIB, Zero, SSZE)
                CreateDWordField (^^PCI0.VGA.ATIB, 0x02, PSBI)
                CreateByteField (^^PCI0.VGA.ATIB, 0x06, EXPM)
                Local0 = (EXPM & 0x03)
                (0x0F & ODDM)
                Local0 = ODDM /* \_SB_.ATKD.SODP.ODDM */
                If ((Local0 >= Zero))
                {
                    If ((Local0 <= 0x0F))
                    {
                        P80H = Local0
                        SDSP (Local0)
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (0x10)
                }
            }

            Method (MF16, 4, NotSerialized)
            {
                Local0 = One
                If ((Arg3 == One))
                {
                    Local0 = SFBD (Arg0, Arg1)
                }

                If ((Arg3 == 0x02))
                {
                    Local0 = LCMD (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (SFBD, 2, NotSerialized)
            {
                If ((Arg1 < 0x09))
                {
                    Return (0x02)
                }

                OperationRegion (\F161, SystemMemory, Arg0, Arg1)
                Field (F161, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    NXBD,   8
                }

                If (OFBD (NXBD))
                {
                    UHDB = NXBD /* \_SB_.ATKD.SFBD.NXBD */
                    Return (Zero)
                }
                Else
                {
                    Return (0x10)
                }
            }

            Method (OFBD, 1, NotSerialized)
            {
                Name (FBDT, Package (0x14)
                {
                    0xE0, 
                    0xE1, 
                    0xE2, 
                    0xE3, 
                    0xE4, 
                    0xE5, 
                    0xE6, 
                    0xE7, 
                    0xE8, 
                    0xE9, 
                    0xEA, 
                    0xEB, 
                    0xEC, 
                    0xED, 
                    0xEE, 
                    0xEF, 
                    0xF1, 
                    0xF2, 
                    0xF3, 
                    0xF6
                })
                Local0 = Match (FBDT, MEQ, Arg0, MTR, Zero, Zero)
                Local0++
                Return (Local0)
            }

            Method (LCMD, 2, NotSerialized)
            {
                If ((Arg1 < 0x0B))
                {
                    Return (0x02)
                }

                WISM (0xA1)
                Return (Zero)
            }

            Method (MF17, 4, NotSerialized)
            {
                Local0 = One
                If ((Arg3 == One))
                {
                    Local0 = GMDL (Arg0, Arg1)
                }
                ElseIf ((Arg3 == 0x02))
                {
                    Local0 = GBSI (Arg0, Arg1)
                }
                ElseIf ((Arg3 == 0x03))
                {
                    Local0 = GECI (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (GMDL, 2, NotSerialized)
            {
                If ((Arg1 < 0x19))
                {
                    Return (0x02)
                }

                OperationRegion (\F171, SystemMemory, Arg0, Arg1)
                Field (F171, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    MLEN,   8, 
                    MDL1,   32, 
                    MDL2,   32, 
                    MDL3,   32, 
                    MDL4,   32
                }

                MDL1 = Zero
                MDL2 = Zero
                MDL3 = Zero
                MDL4 = Zero
                Name (BBUF, Buffer (0x10){})
                CreateDWordField (BBUF, Zero, DAT1)
                CreateDWordField (BBUF, 0x04, DAT2)
                CreateDWordField (BBUF, 0x08, DAT3)
                CreateDWordField (BBUF, 0x0C, DAT4)
                Local0 = GBMN ()
                MLEN = SizeOf (Local0)
                BBUF = GBMN ()
                MDL1 = DAT1 /* \_SB_.ATKD.GMDL.DAT1 */
                MDL2 = DAT2 /* \_SB_.ATKD.GMDL.DAT2 */
                MDL3 = DAT3 /* \_SB_.ATKD.GMDL.DAT3 */
                MDL4 = DAT4 /* \_SB_.ATKD.GMDL.DAT4 */
                Return (Zero)
            }

            Method (GBMN, 0, Serialized)
            {
                Local0 = BDID /* \BDID */
                Switch (Local0)
                {
                    Case (Zero)
                    {
                        Local0 = "K43BY"
                        Break
                    }
                    Case (One)
                    {
                        Local0 = "K43U "
                        Break
                    }
                    Case (0x02)
                    {
                        Local0 = "K53BY"
                        Break
                    }
                    Case (0x03)
                    {
                        Local0 = "K53U "
                        Break
                    }
                    Case (0x04)
                    {
                        Local0 = "K73BY"
                        Break
                    }

                }

                Return (Local0)
            }

            Method (GBSI, 2, NotSerialized)
            {
                If ((Arg1 < 0x19))
                {
                    Return (0x02)
                }

                OperationRegion (\F172, SystemMemory, Arg0, Arg1)
                Field (F172, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BLEN,   8, 
                    BDL1,   32, 
                    BDL2,   32, 
                    BDL3,   32, 
                    BDL4,   32
                }

                BDL1 = Zero
                BDL2 = Zero
                BDL3 = Zero
                BDL4 = Zero
                Name (BBUF, Buffer (0x10){})
                CreateDWordField (BBUF, Zero, DAT1)
                CreateDWordField (BBUF, 0x04, DAT2)
                CreateDWordField (BBUF, 0x08, DAT3)
                CreateDWordField (BBUF, 0x0C, DAT4)
                Local0 = GBRV ()
                BLEN = SizeOf (Local0)
                BBUF = GBRV ()
                BDL1 = DAT1 /* \_SB_.ATKD.GBSI.DAT1 */
                BDL2 = DAT2 /* \_SB_.ATKD.GBSI.DAT2 */
                BDL3 = DAT3 /* \_SB_.ATKD.GBSI.DAT3 */
                BDL4 = DAT4 /* \_SB_.ATKD.GBSI.DAT4 */
                Return (Zero)
            }

            Method (GBRV, 0, NotSerialized)
            {
                Local0 = "214"
                Return (Local0)
            }

            Method (GECI, 2, NotSerialized)
            {
                If ((Arg1 < 0x19))
                {
                    Return (0x02)
                }

                OperationRegion (\F173, SystemMemory, Arg0, Arg1)
                Field (F173, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BLEN,   8, 
                    BDL1,   32, 
                    BDL2,   32, 
                    BDL3,   32, 
                    BDL4,   32
                }

                BDL1 = Zero
                BDL2 = Zero
                BDL3 = Zero
                BDL4 = Zero
                Name (BBUF, Buffer (0x10){})
                CreateDWordField (BBUF, Zero, DAT1)
                CreateDWordField (BBUF, 0x04, DAT2)
                CreateDWordField (BBUF, 0x08, DAT3)
                CreateDWordField (BBUF, 0x0C, DAT4)
                Local0 = "214"
                BLEN = SizeOf (Local0)
                BBUF = Local0
                BDL1 = DAT1 /* \_SB_.ATKD.GECI.DAT1 */
                BDL2 = DAT2 /* \_SB_.ATKD.GECI.DAT2 */
                BDL3 = DAT3 /* \_SB_.ATKD.GECI.DAT3 */
                BDL4 = DAT4 /* \_SB_.ATKD.GECI.DAT4 */
                Return (Zero)
            }

            Method (MF18, 3, NotSerialized)
            {
                Local0 = One
                If ((Arg2 == One))
                {
                    Local0 = GDVI (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x02))
                {
                    Local0 = GDVS (Arg0, Arg1)
                }
                ElseIf ((Arg2 == 0x03))
                {
                    Local0 = SDPW (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (GDVI, 2, NotSerialized)
            {
                If ((Arg1 < 0x18))
                {
                    Return (0x02)
                }

                OperationRegion (\F181, SystemMemory, Arg0, Arg1)
                Field (F181, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                    Offset (0x09), 
                    BTCT,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1
                }

                If ((^^PCI0.SBRG.EC0.BTEX == One))
                {
                    BTCT = One
                }

                Return (Zero)
            }

            Method (GDVS, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F182, SystemMemory, Arg0, Arg1)
                Field (F182, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    DNUM,   8, 
                    DSTS,   8
                }

                If ((DNUM == 0x08))
                {
                    If ((^^PCI0.SBRG.EC0.BTEX == One))
                    {
                        DSTS = ^^PCI0.SBRG.EC0.BTAT /* \_SB_.PCI0.SBRG.EC0_.BTAT */
                    }
                    Else
                    {
                        DSTS = 0x02
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (0x10)
                }
            }

            Method (SDPW, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F183, SystemMemory, Arg0, Arg1)
                Field (F183, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    DNUM,   8, 
                    DSTS,   8
                }

                If ((DNUM == 0x08))
                {
                    If ((^^PCI0.SBRG.EC0.BTEX == One))
                    {
                        BLED (DSTS)
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x10)
                    }
                }
                Else
                {
                    Return (0x10)
                }
            }

            Method (MF19, 4, NotSerialized)
            {
                Local0 = One
                If ((Arg3 == One))
                {
                    Local0 = ACMS (Arg0, Arg1)
                }

                If ((Arg3 == 0x02))
                {
                    Local0 = CSIN (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (ACMS, 2, NotSerialized)
            {
                WISM (0xA1)
                Return (Zero)
            }

            Method (CSIN, 2, NotSerialized)
            {
                If ((Arg1 < 0x0A))
                {
                    Return (0x02)
                }

                OperationRegion (\F192, SystemMemory, Arg0, Arg1)
                Field (F192, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    CMAX,   16
                }

                CMAX = 0xFF
                Return (Zero)
            }

            Method (MF30, 4, NotSerialized)
            {
                Local0 = One
                If ((Arg3 == One))
                {
                    If ((Arg1 < 0x10))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        WISM (0xA1)
                        Local0 = Zero
                    }
                }
                ElseIf ((Arg3 == 0x02))
                {
                    Local0 = EC02 (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (EC02, 2, NotSerialized)
            {
                If ((Arg1 < 0x30))
                {
                    Return (0x02)
                }

                OperationRegion (\F302, SystemMemory, Arg0, Arg1)
                Field (F302, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    BUSN,   8, 
                    PROT,   8, 
                    DADD,   8, 
                    DREG,   8, 
                    DAT0,   8, 
                    DAT1,   8, 
                    BLEN,   8, 
                    REVB,   8, 
                    BLKK,   256
                }

                Local1 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x20){}
                    }
                Local1 [Zero] = BLEN /* \_SB_.ATKD.EC02.BLEN */
                Local1 [One] = BLKK /* \_SB_.ATKD.EC02.BLKK */
                Local0 = ^^PCI0.SBRG.EC0.ECSB (BUSN, PROT, DADD, DREG, DAT0, DAT1, Local1)
                If ((DerefOf (Local0 [Zero]) == Zero))
                {
                    DAT0 = DerefOf (Local0 [One])
                    DAT1 = DerefOf (Local0 [0x02])
                    BLEN = DerefOf (Local0 [0x03])
                    BLKK = DerefOf (Local0 [0x04])
                }

                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x3F
                Return (Local2)
            }

            Method (MF32, 4, NotSerialized)
            {
                Local0 = One
                If ((Arg3 == One)){}
                If ((Arg3 == 0x02)){}
                If ((Arg3 == 0x03))
                {
                    Local0 = GPBA (Arg0, Arg1)
                }

                If ((Arg3 == 0x04))
                {
                    Local0 = SPBA (Arg0, Arg1)
                }

                Return (Local0)
            }

            Method (GPBA, 2, NotSerialized)
            {
                If ((Arg1 < 0x10))
                {
                    Return (0x02)
                }

                OperationRegion (\F323, SystemMemory, Arg0, Arg1)
                Field (F323, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    Offset (0x09), 
                    GPBX,   8
                }

                GPBX = Zero
                Return (Zero)
            }

            Method (SPBA, 2, NotSerialized)
            {
                If ((Arg1 < 0x18))
                {
                    Return (0x02)
                }

                OperationRegion (\F324, SystemMemory, Arg0, Arg1)
                Field (F324, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    Offset (0x09), 
                    SPBS,   8, 
                    SPBD,   8, 
                    SDAT,   64
                }

                Return (One)
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMB0, SystemIO, 0x0B00, 0x80)
        Field (SMB0, ByteAcc, NoLock, Preserve)
        {
            SHST,   8, 
            Offset (0x02), 
            SHTC,   8, 
            SCMD,   8, 
            SADR,   8, 
            Offset (0x0D), 
            SMAC,   8
        }

        Method (DIAG, 1, NotSerialized)
        {
            SMAC = Zero
            SADR = Zero
            SCMD = Arg0
            SHST = 0xFF
            SHTC = 0x44
        }
    }

    OperationRegion (COMP, SystemMemory, 0x97640C98, 0x0014)
    Field (COMP, AnyAcc, Lock, Preserve)
    {
        IDMN,   16, 
        IDPC,   16, 
        BDID,   8, 
        CPFB,   8, 
        PBTI,   8, 
        BRLV,   8, 
        TPVD,   8, 
        MICE,   8, 
        CG10,   8, 
        CG11,   8, 
        CG12,   8, 
        CG13,   8, 
        CG14,   8, 
        CG15,   8, 
        CG16,   8, 
        CG17,   8, 
        CG18,   8, 
        CG19,   8
    }

    Scope (_SB.PCI0.UHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (USBD)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Buffer (0x10)  // _PLD: Physical Location of Device
                {
                     0x81, 0x00, 0x30, 0x00                           // ..0.
                })
            }
        }
    }

    Scope (_SB.PCI0.UHC2)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (USBC)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Buffer (0x10)  // _PLD: Physical Location of Device
                {
                     0x81, 0x00, 0x30, 0x00                           // ..0.
                })
            }
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (CMFC, 4, Serialized)
        {
            Name (RTVL, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Switch (ToInteger (Arg0))
            {
                Case (0xFE00)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (One)
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    If ((ToInteger (Arg3) != Zero))
                                    {
                                        RTVL [Zero] = 0x8300
                                    }
                                    Else
                                    {
                                        RTVL [Zero] = Zero
                                        RTVL [One] = IDMN /* \IDMN */
                                        RTVL [0x02] = IDPC /* \IDPC */
                                    }
                                }
                                Default
                                {
                                    RTVL [Zero] = 0x8300
                                }

                            }
                        }
                        Default
                        {
                            RTVL [Zero] = 0x8000
                        }

                    }
                }
                Default
                {
                    RTVL [Zero] = 0x8000
                }

            }

            Return (RTVL) /* \_SB_.PCI0.SBRG.EC0_.CMFC.RTVL */
        }

        Name (SBBY, 0x1A)
        Method (ECSB, 7, NotSerialized)
        {
            Local1 = Package (0x05)
                {
                    0x11, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Buffer (0x20){}
                }
            If ((Arg0 > One))
            {
                Return (Local1)
            }

            Acquire (MUEC, 0xFFFF)
            Arg0++
            SMBN = Arg0
            Local0 = PRTC /* \_SB_.PCI0.SBRG.EC0_.PRTC */
            Local2 = Zero
            While ((Local0 != Zero))
            {
                Stall (0x0A)
                Local2++
                If ((Local2 > 0x03E8))
                {
                    Local1 [Zero] = SBBY /* \_SB_.PCI0.SBRG.EC0_.SBBY */
                    Local0 = Zero
                }
                Else
                {
                    Local0 = PRTC /* \_SB_.PCI0.SBRG.EC0_.PRTC */
                }
            }

            If ((Local2 <= 0x03E8))
            {
                ADDR = Arg2
                CMDB = Arg3
                DAT0 = Arg4
                DAT1 = Arg5
                BCNT = DerefOf (Arg6 [Zero])
                BDAT = DerefOf (Arg6 [One])
                PRTC = Arg1
                Local0 = 0x7F
                While (PRTC)
                {
                    Sleep (One)
                    Local0--
                }

                If (Local0)
                {
                    Local0 = SSTS /* \_SB_.PCI0.SBRG.EC0_.SSTS */
                    Local1 [One] = DAT0 /* \_SB_.PCI0.SBRG.EC0_.DAT0 */
                    Local1 [0x02] = DAT1 /* \_SB_.PCI0.SBRG.EC0_.DAT1 */
                    Local1 [0x03] = BCNT /* \_SB_.PCI0.SBRG.EC0_.BCNT */
                    Local1 [0x04] = BDAT /* \_SB_.PCI0.SBRG.EC0_.BDAT */
                    Local0 &= 0x1F
                    If (Local0)
                    {
                        Local0 += 0x10
                    }

                    Local1 [Zero] = Local0
                }
                Else
                {
                    Local1 [Zero] = 0x10
                }
            }

            SMBN = One
            Release (MUEC)
            Return (Local1)
        }
    }

    Scope (_TZ)
    {
        Name (TSP, 0x0A)
        ThermalZone (THRM)
        {
            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Return (KELV (\_SB.PCI0.SBRG.EC0.OSST))
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Return (KELV (\_SB.PCI0.SBRG.EC0.CTMP))
            }

            Method (_TSP, 0, NotSerialized)  // _TSP: Thermal Sampling Period
            {
                Local0 = (TSP * 0x0A)
                Return (Local0)
            }

            Name (_PSL, Package (0x00){})  // _PSL: Passive List
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
            }

            Method (_TC1, 0, NotSerialized)  // _TC1: Thermal Constant 1
            {
            }

            Method (_TC2, 0, NotSerialized)  // _TC2: Thermal Constant 2
            {
            }

            Method (_AC0, 0, NotSerialized)  // _ACx: Active Cooling
            {
            }

            Method (KELV, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0xFF)
                If ((Local0 >= 0x80))
                {
                    Local0 = (0x0100 - Local0)
                    Local0 *= 0x0A
                    Local0 = (0x0AAC - Local0)
                    Return (Local0)
                }

                Local0 *= 0x0A
                Local0 += 0x0AAC
                Return (Local0)
            }
        }
    }

    Method (CWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            If ((\_SB.LDON == One))
            {
                Notify (\_SB.LID, 0x80) // Status Change
                \_SB.LDON = Zero
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x04, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            SPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        SWAK (Arg0)
        \_SB.PCI0.NWAK (Arg0)
        CWAK (Arg0)
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 40
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : 97642F80
[028h 0040   4]                 DSDT Address : 975D5150
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : B7
[035h 0053   1]           ACPI Disable Value : B8
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0002
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000385A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000975D5150
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 04 40 5F 41 53 55 53 5F  // FACP.....@_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 80 2F 64 97 50 51 5D 97 01 02 09 00  // ...../d.PQ].....
    0030: B2 00 00 00 B7 B8 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 02 00 00  // e...........2...
    0070: A5 85 03 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 00 00 00 00 00 00 00 50 51 5D 97  // ............PQ].
    0090: 00 00 00 00 01 20 00 00 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 00 08 08 00 00 00 00 00 00 01 40 00 00  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 00
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000004

[024h 0036   4]            Hardware Block ID : FFFFFFFF

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 00 5F 41 53 55 53 5F  // HPET8....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 04 00 00 00 FF FF FF FF 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0D
[00Ah 0010   6]                       Oem ID : "_ASUS_"
[010h 0016   8]                 Oem Table ID : "Notebook"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 0D 5F 41 53 55 53 5F  // MCFG<....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 4D 53 46 54  // Notebook. ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "ALIB", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIC, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Scope (\_SB)
    {
        Name (A001, 0x06)
        Name (AD01, 0xE0000000)
        Alias (AD01, A086)
        Name (AD07, Package (0x08)
        {
            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x04, 0x07, 0x04, 0x07, 0x01, 0x30, 0x01, 0x01,  // .....0..
                /* 0008 */  0x02, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x03, 0x00, 0x03, 0x00, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }
        })
        Alias (AD07, A087)
        Name (A088, Buffer (0x0100){})
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x01))
            {
                Return (A026 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (A030 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (A041 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (A066 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (A089 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (A069 (Arg1))
            }

            Return (0x00)
        }

        Method (A089, 0, Serialized)
        {
            Return (0x00)
        }

        Method (A007, 2, Serialized)
        {
            Local0 = (A086 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A090, SystemMemory, Local0, 0x04)
            Field (A090, DWordAcc, NoLock, Preserve)
            {
                A091,   32
            }

            Return (A091) /* \_SB_.A007.A091 */
        }

        Method (A008, 3, Serialized)
        {
            Local0 = (A086 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A090, SystemMemory, Local0, 0x04)
            Field (A090, DWordAcc, NoLock, Preserve)
            {
                A091,   32
            }

            A091 = Arg2
        }

        Method (A052, 4, Serialized)
        {
            Local0 = A007 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A008 (Arg0, Arg1, Local0)
        }

        Mutex (A092, 0x00)
        Method (A053, 2, NotSerialized)
        {
            Acquire (A092, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A008 (Local0, 0xE0, Arg1)
            Local0 = A007 (Local0, 0xE4)
            Release (A092)
            Return (Local0)
        }

        Method (A093, 3, NotSerialized)
        {
            Acquire (A092, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A008 (Local0, 0xE0, Arg1)
            A008 (Local0, 0xE4, Arg2)
            Release (A092)
        }

        Method (A050, 4, NotSerialized)
        {
            Local0 = A053 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A093 (Arg0, Arg1, Local0)
        }

        Mutex (A094, 0x00)
        Method (A042, 3, NotSerialized)
        {
            Acquire (A094, 0xFFFF)
            A008 (Arg0, Arg1, Arg2)
            Local0 = A007 (Arg0, (Arg1 + 0x04))
            Release (A094)
            Return (Local0)
        }

        Method (A043, 4, NotSerialized)
        {
            Acquire (A094, 0xFFFF)
            A008 (Arg0, Arg1, Arg2)
            A008 (Arg0, (Arg1 + 0x04), Arg3)
            Release (A094)
        }

        Method (A028, 5, NotSerialized)
        {
            Local0 = A042 (Arg0, Arg1, Arg2)
            Local0 = ((Local0 & Arg3) | Arg4)
            A043 (Arg0, Arg1, Arg2, Local0)
        }

        Method (A073, 1, NotSerialized)
        {
            Return (DerefOf (A087 [Arg0]))
        }

        Method (A059, 2, NotSerialized)
        {
            Local1 = 0x34
            If ((A007 (Arg0, 0x00) == 0xFFFFFFFF))
            {
                Return (0x00)
            }

            Local0 = 0x01
            While ((Local0 == 0x01))
            {
                Local1 = (A007 (Arg0, Local1) & 0xFF)
                If ((Local1 == 0x00))
                {
                    Break
                }

                If (((A007 (Arg0, Local1) & 0xFF) == Arg1))
                {
                    Local0 = 0x00
                }
                Else
                {
                    Local1++
                }
            }

            Return (Local1)
        }

        Method (A058, 2, Serialized)
        {
            OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
            Field (PMIO, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
            {
                Offset (0xE0), 
                ABAR,   32
            }

            OperationRegion (ACFG, SystemIO, ABAR, 0x08)
            Field (ACFG, DWordAcc, NoLock, Preserve)
            {
                ABIX,   32, 
                ABDA,   32
            }

            Local0 = 0x00
            If ((Arg1 == 0x00))
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A058.ABDA */
                Return (Local0)
            }
            Else
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A058.ABDA */
                Local0 = ((Local0 & 0xFFFFFFFC) | Arg0)
                ABDA = Local0
            }
        }

        Method (A081, 1, NotSerialized)
        {
            Local0 = A042 (0x00, 0x60, 0xCD)
            Arg0++
            Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                 & 0x01000000))
            Local0 = ((Local0 & 0xFD00FFFF) | (Arg0 << 0x10))
            A043 (0x00, 0x60, 0xCD, Local0)
            Local0 = A042 (0x00, 0x60, 0xCE)
            Return (Local0)
        }

        Method (A082, 3, NotSerialized)
        {
            Local0 = A042 (0x00, 0x60, 0xCD)
            Local1 = (Arg1 & 0xFFFF)
            Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                 & 0x01000000))
            Local0 = ((Local0 & 0xFD000000) | (Arg0 << 0x10))
            Local0 |= 0x02000000
            Local0 |= Local1
            A043 (0x00, 0x60, 0xCD, Local0)
            If ((Arg2 == 0x01))
            {
                Local1 = (Arg1 >> 0x10)
                Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                     & 0x01000000))
                Local0 = ((Local0 & 0xFF000000) | ((Arg0 + 0x01) << 0x10
                    ))
                Local0 |= Local1
                A043 (0x00, 0x60, 0xCD, Local0)
            }
        }

        Method (A083, 2, NotSerialized)
        {
            Local0 = ((Arg0 << 0x03) | 0x01)
            A082 (0x03, Local0, 0x01)
            If ((Arg1 && 0x01))
            {
                While (((A081 (0x03) & 0x02) != 0x02)){}
            }

            If ((Arg1 && 0x02))
            {
                While (((A081 (0x03) & 0x04) != 0x04)){}
            }

            A082 (0x03, 0x00, 0x01)
        }

        Method (A004, 2, NotSerialized)
        {
            A082 (0x0B, Arg0, 0x00)
            A082 (0x05, Arg1, 0x01)
        }

        Method (A003, 1, NotSerialized)
        {
            A082 (0x0B, Arg0, 0x00)
            Local0 = A081 (0x05)
            Return (Local0)
        }

        Method (A084, 1, NotSerialized)
        {
            Local0 = ((Arg0 & 0xFF) | 0x01865000)
            Local1 = ((Arg0 & 0xFFFFFF00) | 0x04)
            Local2 = ((0x03 << 0x1E) | (0x01 << 0x12))
            A004 (0x8600, Local0)
            A004 (0x8604, Local1)
            A004 (0x8608, Local2)
            If (((Arg0 >> 0x10) == 0xFE00))
            {
                A083 (0x0D, 0x03)
            }

            If (((Arg0 >> 0x10) == 0xFE30))
            {
                A083 (0x0B, 0x03)
            }

            Return (A003 (0x8650))
        }

        Method (A085, 2, NotSerialized)
        {
            Local0 = ((Arg0 & 0xFF) | 0x01865000)
            Local1 = ((Arg0 & 0xFFFFFF00) | 0x04)
            Local2 = ((0x03 << 0x1E) | (0x01 << 0x12))
            Local2 |= (0x01 << 0x10)
            A004 (0x8600, Local0)
            A004 (0x8604, Local1)
            A004 (0x8608, Local2)
            A004 (0x8650, Arg1)
            A083 (0x0B, 0x03)
        }

        Name (AD02, 0x03)
        Alias (AD02, A009)
        Name (AD03, 0x03)
        Alias (AD03, A010)
        Name (AD04, 0x00)
        Alias (AD04, A011)
        Name (AD05, 0x03)
        Alias (AD05, A012)
        Name (AD06, Package (0x08)
        {
            0x00, 
            0x00, 
            0x02, 
            0x00, 
            0x00, 
            0x00, 
            0x02, 
            0x00
        })
        Alias (AD06, A013)
        Name (AD08, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD08, A014)
        Name (A015, 0x00)
        Name (A016, 0x00)
        Name (A017, 0x01)
        Name (A018, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A019, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A020, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (AD09, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD09, A021)
        Name (A022, Package (0x08)
        {
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01
        })
        Name (A023, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A025, 0x00)
        Method (A026, 1, Serialized)
        {
            Local1 = DerefOf (Arg0 [0x02])
            Local0 = A027 ()
            A016 = Local1
            Local2 = ((0x01 << 0x05) | (0x01 << 0x06))
            Local3 = ((A016 << 0x05) | (A017 << 0x06))
            A028 (0x00, 0x60, 0xF4, ~Local2, (Local2 & Local3))
            If ((Local1 == Local0))
            {
                Return (0x00)
            }

            A006 (A016)
            If ((A009 == 0x04))
            {
                A002 (0x01, A027 ())
            }

            If (((A009 <= 0x01) || (A009 >= 0x04)))
            {
                Return (0x00)
            }

            If ((A015 == 0x00))
            {
                Return (0x00)
            }

            A029 ()
            Return (0x00)
        }

        Method (A030, 1, NotSerialized)
        {
            Local7 = A031 (Arg0)
            Local0 = DerefOf (Local7 [0x02])
            If ((Local0 != 0x02))
            {
                Return (Local7)
            }

            A029 ()
            Return (Local7)
        }

        Method (A031, 1, NotSerialized)
        {
            Name (A032, 0x00)
            A025 = 0x00
            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A033)
            A033 = 0x03
            CreateByteField (Local7, 0x02, A034)
            A034 = 0x01
            If (((A009 <= 0x01) || (A009 >= 0x04)))
            {
                Return (Local7)
            }

            If ((A015 == 0x00))
            {
                Return (Local7)
            }

            CreateWordField (Arg0, 0x02, A035)
            CreateWordField (Arg0, 0x04, A036)
            CreateWordField (Arg0, 0x06, A037)
            CreateByteField (Arg0, 0x08, A038)
            CreateByteField (Arg0, 0x09, A039)
            A032 = ((A035 >> 0x08) & 0xFF)
            While ((A025 <= A001))
            {
                If ((A040 (A025) == 0x01))
                {
                    Local1 = A007 (((A025 + 0x02) << 0x03), 0x18)
                    Local2 = ((Local1 >> 0x10) & 0xFF)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    If (((A032 >= Local1) && (A032 <= Local2)))
                    {
                        Break
                    }
                }

                A025++
            }

            If ((A025 > A001))
            {
                Return (Local7)
            }

            If ((DerefOf (A018 [A025]) == 0x00))
            {
                A018 [A025] = A035 /* \_SB_.A031.A035 */
            }
            ElseIf ((DerefOf (A018 [A025]) != A035))
            {
                Return (Local7)
            }

            A023 [A025] = 0x00
            If ((A039 == 0x00))
            {
                A018 [A025] = 0x00
            }

            If ((A039 == 0x01))
            {
                A023 [A025] = 0x01
            }

            If ((A039 == 0x02))
            {
                A020 [A025] = 0x01
            }

            If ((A039 == 0x03))
            {
                A020 [A025] = 0x02
            }

            If (((A036 & A037) == 0x01))
            {
                A020 [A025] = DerefOf (A013 [A025])
            }

            A034 = 0x02
            Return (Local7)
        }

        Method (A040, 1, Serialized)
        {
            If ((DerefOf (A013 [Arg0]) == 0x00))
            {
                Return (0x00)
            }

            Return (0x01)
        }

        Method (A041, 1, Serialized)
        {
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            A015 = DerefOf (Arg0 [0x02])
            Local0 = A042 (0x00, 0x60, 0xF4)
            If ((A015 == 0x01))
            {
                If (((Local0 & 0x01) == 0x01))
                {
                    Return (Local7)
                }

                Local0 |= 0x01
            }

            If ((A015 == 0x00))
            {
                If (((Local0 & 0x01) == 0x00))
                {
                    Return (Local7)
                }

                Local0 &= ~0x01
            }

            Local0 |= (A009 << 0x01)
            A043 (0x00, 0x60, 0xF4, Local0)
            A044 (RefOf (A019), RefOf (A018))
            A006 (A016)
            If ((A009 == 0x04))
            {
                A002 (0x01, A027 ())
            }

            If (((A009 > 0x01) && (A009 < 0x04)))
            {
                If ((A009 == 0x02))
                {
                    A044 (RefOf (A013), RefOf (A021))
                    A025 = 0x00
                    While ((A025 <= A001))
                    {
                        If ((DerefOf (A014 [A025]) != 0x00))
                        {
                            A021 [A025] = DerefOf (A014 [A025])
                        }

                        A025++
                    }
                }
                Else
                {
                    A044 (RefOf (A022), RefOf (A021))
                }

                A029 ()
            }

            Return (Local7)
        }

        Name (A045, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Method (A029, 0, Serialized)
        {
            A025 = 0x00
            A044 (RefOf (A022), RefOf (A045))
            While ((A025 <= A001))
            {
                If ((A040 (A025) == 0x01))
                {
                    A045 [A025] = A046 (A025)
                }

                A025++
            }

            If ((Match (A023, MEQ, 0x01, MTR, 0x00, 0x00) != Ones))
            {
                A044 (RefOf (A022), RefOf (A045))
            }

            If ((Match (A045, MEQ, 0x02, MTR, 0x00, 0x00) != Ones))
            {
                A047 (A010, 0x01)
                A005 (0x02)
                A002 (0x02, A027 ())
            }

            A025 = 0x00
            While ((A025 <= A001))
            {
                If ((A040 (A025) == 0x00))
                {
                    A025++
                    Continue
                }

                Local0 = DerefOf (A021 [A025])
                Local2 = DerefOf (A045 [A025])
                If ((Local0 == Local2))
                {
                    A025++
                    Continue
                }

                A021 [A025] = Local2
                A048 (A025, Local2)
                A025++
            }

            If ((Match (A045, MEQ, 0x02, MTR, 0x00, 0x00) == Ones))
            {
                A002 (0x01, A027 ())
                A005 (0x01)
                A047 (A011, 0x00)
            }
        }

        Method (A046, 1, NotSerialized)
        {
            Local0 = 0x02
            If ((DerefOf (A018 [Arg0]) == 0x00))
            {
                If (((A027 () == 0x01) || (A009 == 0x03)))
                {
                    Local0 = 0x01
                }

                If ((DerefOf (A014 [Arg0]) != 0x00))
                {
                    Local0 = DerefOf (A014 [Arg0])
                }
            }
            Else
            {
                Local0 = DerefOf (A020 [Arg0])
            }

            Return (Local0)
        }

        Method (A048, 2, NotSerialized)
        {
            If ((Arg0 == 0x06))
            {
                A028 (0x00, 0x60, 0x80, ~0x40, 0x40)
            }

            A049 (Arg0, Arg1)
            If ((DerefOf (A018 [Arg0]) != 0x00))
            {
                A050 (Arg0, 0xA1, ~0x1000, 0x00)
            }
            Else
            {
                A050 (Arg0, 0xA1, ~0x1000, 0x1000)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = (A007 (Local1, 0x70) & 0x00400000)
            If ((Local3 != 0x00))
            {
                A051 (Arg0)
                Local2 = 0x01
                While (Local2)
                {
                    A052 (Local1, 0x68, ~0x00, 0x20)
                    Sleep (0x1E)
                    While ((A007 (Local1, 0x68) & 0x08000000))
                    {
                        Sleep (0x0A)
                    }

                    Local2 = 0x00
                    If ((Arg1 == 0x01))
                    {
                        Local4 = A053 (Arg0, 0xA4)
                        If (((Local4 & 0x0800) != 0x00))
                        {
                            Local2 = 0x01
                        }
                    }
                }

                A054 (Arg0)
            }
            Else
            {
            }

            If ((Arg0 == 0x06))
            {
                A028 (0x00, 0x60, 0x80, ~0x40, 0x00)
            }
        }

        Name (A055, Package (0x09)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A056, 0x00)
        Name (A057, 0x00)
        Method (A051, 1, Serialized)
        {
            A056 = 0x00
            A057 = 0x00
            Local1 = ((Arg0 + 0x02) << 0x03)
            If ((Arg0 == 0x06))
            {
                A055 [0x00] = A058 (0x00, 0x00)
                A058 (0x00, 0x01)
                Return (0x00)
            }

            Local3 = A007 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A007 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A056 = A059 ((Local2 + Local4), 0x10)
                If ((A056 == 0x00))
                {
                    Local4++
                    Continue
                }

                A056 += 0x10
                A057 = A007 ((Local2 + Local4), A056)
                A055 [Local4] = (A057 & 0x03)
                A052 ((Local2 + Local4), A056, ~0x03, 0x00)
                Local4++
            }
        }

        Method (A054, 1, Serialized)
        {
            A056 = 0x00
            A057 = 0x00
            If ((Arg0 == 0x06))
            {
                A058 (DerefOf (A055 [0x00]), 0x01)
                Return (0x00)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = A007 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A007 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A056 = A059 ((Local2 + Local4), 0x10)
                If ((A056 == 0x00))
                {
                    Local4++
                    Continue
                }

                A056 += 0x10
                A008 ((Local2 + Local4), A056, DerefOf (A055 [Local4]))
                Local4++
            }
        }

        Method (A049, 2, NotSerialized)
        {
            Local0 = ((Arg0 + 0x02) << 0x03)
            If ((Arg1 == 0x01))
            {
                A052 (Local0, 0x88, ~0x2F, 0x21)
                A050 (Arg0, 0xA4, ~0x20000001, 0x00)
            }
            Else
            {
                A050 (Arg0, 0xA4, ~0x20000001, 0x20000001)
                A052 (Local0, 0x88, ~0x2F, 0x02)
            }
        }

        Method (A047, 2, Serialized)
        {
            Local1 = A042 (0x00, 0x60, 0xEA)
            Local1 |= 0x02
            A043 (0x00, 0x60, 0xEA, Local1)
            Local1 &= ~(0x03 << 0x03)
            Local1 |= (Arg0 << 0x03)
            Local2 = (~Local1 & 0x04)
            Local1 = ((Local1 & ~0x04) | Local2)
            A043 (0x00, 0x60, 0xEA, Local1)
            If ((Arg1 != 0x00))
            {
                While (((Local1 << 0x02) != Local2))
                {
                    Local1 = (A042 (0x00, 0x60, 0xEB) & 0x01)
                }
            }
        }

        Method (A044, 2, NotSerialized)
        {
            Local1 = SizeOf (Arg0)
            Local0 = 0x00
            While ((Local0 < Local1))
            {
                DerefOf (Arg1) [Local0] = DerefOf (DerefOf (Arg0) [Local0])
                Local0++
            }
        }

        Method (A027, 0, NotSerialized)
        {
            Return ((A016 & A017))
        }

        Name (A060, 0x00)
        Name (A061, 0x00)
        Name (A062, 0x00)
        Name (A063, 0x00)
        Name (A064, 0x00)
        Name (A065, 0x00)
        Method (A066, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A033)
            CreateWordField (Local7, 0x02, A067)
            CreateByteField (Arg0, 0x02, A068)
            A033 = 0x03
            A067 = A068 /* \_SB_.A066.A068 */
            Return (Local7)
        }

        Method (A069, 1, Serialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            Local1 = ((Local1 >> 0x03) - 0x02)
            If ((Local0 == 0x01))
            {
                Local2 = 0x06
            }
            Else
            {
                Local2 = 0x04
            }

            Local0 = A070 (Local1, Local2)
            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A033)
            CreateByteField (Local7, 0x02, A034)
            CreateByteField (Local7, 0x03, A071)
            A033 = 0x04
            A034 = 0x00
            A071 = Local0
            Return (Local7)
        }

        Name (A072, Buffer (0x0A)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00                                       // ..
        })
        Method (A070, 2, Serialized)
        {
            Local4 = 0x00
            Local7 = A073 (Arg0)
            Local1 = DerefOf (Local7 [0x07])
            If ((Local1 != 0x01))
            {
                Return (Local4)
            }

            Local2 = Arg1
            While ((Local2 != 0x08))
            {
                If ((Local2 == 0x06))
                {
                    A014 [Arg0] = 0x00
                    A050 (Arg0, 0xA2, ~0x2000, 0x00)
                    A017 = 0x00
                    A029 ()
                    A074 (Arg0, 0x01)
                    A075 (Arg0, 0x00)
                    Local2 = 0x01
                    Local3 = 0x00
                }

                If ((Local2 == 0x01))
                {
                    Local1 = (A053 (Arg0, 0xA5) & 0x3F)
                    If ((Local1 > 0x04))
                    {
                        Local2 = 0x02
                        Local3 = 0x00
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                    }
                    Else
                    {
                        Local2 = 0x04
                    }
                }

                If ((Local2 == 0x02))
                {
                    Local1 = A053 (Arg0, 0xA5)
                    Local1 &= 0x3F
                    If ((Local1 == 0x10))
                    {
                        Local2 = 0x05
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                        Continue
                    }

                    Local2 = 0x04
                    If ((DerefOf (A014 [Arg0]) == 0x01))
                    {
                        Continue
                    }

                    If ((A076 (Arg0) == 0x01))
                    {
                        A050 (Arg0, 0xA2, ~0x2000, 0x2000)
                        A014 [Arg0] = 0x01
                        A049 (Arg0, 0x01)
                        Local2 = 0x07
                    }
                }

                If ((Local2 == 0x04))
                {
                    A075 (Arg0, 0x01)
                    A074 (Arg0, 0x00)
                    A014 [Arg0] = 0x01
                    Local2 = 0x00
                }

                If ((Local2 == 0x07))
                {
                    If (CondRefOf (\_SB.ALIC, Local6))
                    {
                        Local1 = ((Arg0 + 0x02) << 0x03)
                        \_SB.ALIC (Local1, 0x00)
                        Sleep (0x02)
                        \_SB.ALIC (Local1, 0x01)
                        Local3 = 0x00
                        Local2 = 0x01
                        Continue
                    }

                    Local2 = 0x04
                }

                If ((Local2 == 0x05))
                {
                    Local4 = 0x01
                    Local2 = 0x00
                    A074 (Arg0, 0x02)
                }

                If ((Local2 == 0x00))
                {
                    A017 = 0x01
                    A029 ()
                    Local2 = 0x08
                }
            }

            Return (Local4)
        }

        Method (A074, 2, Serialized)
        {
            Local7 = A073 (Arg0)
            A062 = DerefOf (Local7 [0x02])
            A063 = DerefOf (Local7 [0x03])
            If ((Arg1 == 0x00))
            {
                A077 (Arg0, A062, A063, 0x01)
            }

            If ((Arg1 == 0x01))
            {
                A077 (Arg0, A062, A063, 0x00)
            }

            If ((Arg1 != 0x02))
            {
                Return (0x00)
            }

            Local2 = A078 (Arg0, 0x00)
            If ((A078 (Arg0, 0x01) <= Local2))
            {
                Return (0x00)
            }

            Local1 = A079 (Arg0)
            If ((Local1 == 0x00))
            {
                Local3 = (A062 + Local2)
                Local4 = A063 /* \_SB_.A063 */
            }
            Else
            {
                Local4 = (A063 - Local2)
                Local3 = A062 /* \_SB_.A062 */
            }

            A077 (Arg0, Local3, Local4, 0x01)
            Return (0x00)
        }

        Method (A076, 1, NotSerialized)
        {
            Local1 = Buffer (0x10){}
            Local0 = 0x00
            While ((Local0 <= 0x03))
            {
                Local2 = A053 (Arg0, (Local0 + 0xA5))
                Local1 [(Local0 * 0x04)] = Local2
                Local1 [((Local0 * 0x04) + 0x01)] = (
                    Local2 >> 0x08)
                Local1 [((Local0 * 0x04) + 0x02)] = (
                    Local2 >> 0x10)
                Local1 [((Local0 * 0x04) + 0x03)] = (
                    Local2 >> 0x18)
                Local0++
            }

            Local0 = 0x00
            While ((Local0 < 0x0F))
            {
                If (((DerefOf (Local1 [Local0]) == 0x2A) && (DerefOf (
                    Local1 [(Local0 + 0x01)]) == 0x09)))
                {
                    Return (0x01)
                }

                Local0++
            }

            Return (0x00)
        }

        Method (A079, 1, Serialized)
        {
            Local7 = A073 (Arg0)
            A060 = DerefOf (Local7 [0x00])
            A061 = DerefOf (Local7 [0x01])
            Local0 = 0x00
            If ((A060 > A061))
            {
                Local0 = 0x01
            }

            Local1 = (A053 (Arg0, 0x50) & 0x01)
            Return (((Local0 ^ Local1) & 0x01))
        }

        Method (A075, 2, NotSerialized)
        {
            Local7 = A073 (Arg0)
            A065 = DerefOf (Local7 [0x04])
            A064 = ((DerefOf (Local7 [(0x05 + 0x01)]) << 
                0x08) | DerefOf (Local7 [0x05]))
            A028 (0x00, 0xE0, ((A064 << 0x10) | (0x0800 + (0x0100 * 
                A065))), ~0x01, Arg1)
        }

        Name (A080, Buffer (0x07)
        {
             0x00, 0x01, 0x02, 0x04, 0x08, 0x0C, 0x10         // .......
        })
        Method (A078, 2, NotSerialized)
        {
            If ((Arg1 == 0x00))
            {
                Local0 = ((A053 (Arg0, 0xA2) >> 0x04) & 0x07)
                Local1 = DerefOf (A080 [Local0])
            }
            Else
            {
                Local7 = A073 (Arg0)
                A060 = DerefOf (Local7 [0x00])
                A061 = DerefOf (Local7 [0x01])
                If ((A060 > A061))
                {
                    Local1 = (A060 - A061) /* \_SB_.A061 */
                }
                Else
                {
                    Local1 = (A061 - A060) /* \_SB_.A060 */
                }

                Local1++
            }

            Return (Local1)
        }

        Method (A077, 4, Serialized)
        {
            Local7 = A073 (Arg0)
            A062 = Arg1
            A063 = Arg2
            A064 = ((DerefOf (Local7 [(0x05 + 0x01)]) << 
                0x08) | DerefOf (Local7 [0x05]))
            If ((A062 > A063))
            {
                Local1 = (A062 - A063) /* \_SB_.A063 */
                Local2 = A063 /* \_SB_.A063 */
            }
            Else
            {
                Local1 = (A063 - A062) /* \_SB_.A062 */
                Local2 = A062 /* \_SB_.A062 */
            }

            Local3 = (((0x01 << (Local1 + 0x01)) - 0x01) << 
                Local2)
            Local4 = ~Local3
            If ((Arg3 == 0x01))
            {
                Local3 = 0x00
            }

            A028 (0x00, 0xE0, ((A064 << 0x10) | 0x8023), Local4, Local3)
            Stall (0x0A)
        }

        Method (A002, 2, NotSerialized)
        {
            Local0 = A003 (0x8490)
            If (((Local0 & 0xF0) != 0x00))
            {
                If ((Arg0 == 0x02))
                {
                    Local0 &= 0xFFFFFFA0
                    Local0 |= 0xA0
                }
                ElseIf ((Arg1 == 0x00))
                {
                    Local0 &= 0xFFFFFF60
                    Local0 |= 0x60
                }
                Else
                {
                    Local0 &= 0xFFFFFF20
                    Local0 |= 0x20
                }

                A004 (0x8490, Local0)
            }
        }

        Method (A005, 1, NotSerialized)
        {
        }

        Name (AD0B, 0x01)
        Method (A006, 1, NotSerialized)
        {
            If ((AD0B == 0x01))
            {
                Local1 = ((0x18 << 0x03) | 0x04)
                Local2 = A007 (Local1, 0x015C)
                If ((Arg0 == 0x00))
                {
                    Local2 |= 0x01
                }
                Else
                {
                    Local2 &= 0xFFFFFFFC
                }

                A008 (Local1, 0x015C, Local2)
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "AMD   ", "POWERNOW", 0x00000001)
{
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)

    Scope (_PR)
    {
        Name (TCNM, 0x02)
    }

    Scope (\_PR.P001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000672, 
                0x000017BB, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000528, 
                0x00000E10, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000339, 
                0x0000059A, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000672, 
                0x000017BB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000528, 
                0x00000E10, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000339, 
                0x0000059A, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001771, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000672, 
                0x000017BB, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000528, 
                0x00000E10, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000339, 
                0x0000059A, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000672, 
                0x000017BB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000528, 
                0x00000E10, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000339, 
                0x0000059A, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001771, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
    }
}



