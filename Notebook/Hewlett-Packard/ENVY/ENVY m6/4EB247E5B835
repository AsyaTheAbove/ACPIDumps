
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20141107-64 [Apr  6 2015]
Copyright (c) 2000 - 2014 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   RSDP                          "HPQOEM"
   RSDT   0x00000064     0x01    "HPQOEM"  "SLIC-MPC"   0x00000001    "HP  "     0x01000013
   XSDT   0x000000A4     0x01    "HPQOEM"  "SLIC-MPC"   0x00000001    "HP  "     0x01000013
   DSDT   0x0000F99F     0x01    "HPQOEM"  "18A6    "   0xF0000000    "ACPI"     0x00040000
   FACS   0x00000040
   FACP   0x0000010C     0x05    "HPQOEM"  "SLIC-MPC"   0x00000001    "HP  "     0x00040000
   UEFI   0x00000236     0x01    "HPQOEM"  "18A6    "   0x00000001    "HP  "     0x00040000
   HPET   0x00000038     0x01    "HPQOEM"  "18A6    "   0x00000001    "HP  "     0x00040000
   APIC   0x00000084     0x03    "HPQOEM"  "18A6    "   0x00000001    "HP  "     0x00040000
   MCFG   0x0000003C     0x01    "HPQOEM"  "18A6    "   0x00000001    "HP  "     0x00040000
   ASF!   0x000000A5     0x20    "HPQOEM"  "18A6    "   0x00000001    "HP  "     0x00040000
   BOOT   0x00000028     0x01    "HPQOEM"  "18A6    "   0x00000001    "HP  "     0x00040000
   SPCR   0x00000050     0x01    "HPQOEM"  "18A6    "   0x00000001    "HP  "     0x00040000
   WDRT   0x00000047     0x01    "HPQOEM"  "18A6    "   0x00000000    "HP  "     0x00040000
   WDAT   0x000001AC     0x01    "HPQOEM"  "18A6    "   0x00000001    "HP  "     0x00040000
   FPDT   0x00000044     0x01    "HPQOEM"  "18A6    "   0x00000001    "HP  "     0x00040000
   MSDM   0x00000055     0x03    "HPQOEM"  "SLIC-MPC"   0x00000001    "HP  "     0x00040000
   SSDT   0x00000B9C     0x01    "HPQOEM"  "18A6    "   0x00000001    "ACPI"     0x00040000
   SSDT   0x00001ECC     0x02    "HPQOEM"  "18A6    "   0x00000001    "ACPI"     0x00040000
   VFCT   0x00005084     0x01    "HPQOEM"  "18A6    "   0x00000001    "HP  "     0x00040000
   BGRT   0x00000038     0x01    "HPQOEM"  "18A6    "   0x00000001    "ACPI"     0x00040000

Found 21 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000084
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : B6
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 10
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 11
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 12
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 13
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 04
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[06Ch 0108   1]                Subtable Type : 04 [Local APIC NMI]
[06Dh 0109   1]                       Length : 06
[06Eh 0110   1]                 Processor ID : 00
[06Fh 0111   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[071h 0113   1]         Interrupt Input LINT : 01

[072h 0114   1]                Subtable Type : 04 [Local APIC NMI]
[073h 0115   1]                       Length : 06
[074h 0116   1]                 Processor ID : 01
[075h 0117   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[077h 0119   1]         Interrupt Input LINT : 01

[078h 0120   1]                Subtable Type : 04 [Local APIC NMI]
[079h 0121   1]                       Length : 06
[07Ah 0122   1]                 Processor ID : 02
[07Bh 0123   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[07Dh 0125   1]         Interrupt Input LINT : 01

[07Eh 0126   1]                Subtable Type : 04 [Local APIC NMI]
[07Fh 0127   1]                       Length : 06
[080h 0128   1]                 Processor ID : 03
[081h 0129   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[083h 0131   1]         Interrupt Input LINT : 01

Raw Table Data: Length 132 (0x84)

  0000: 41 50 49 43 84 00 00 00 03 B6 48 50 51 4F 45 4D  APIC......HPQOEM
  0010: 31 38 41 36 20 20 20 20 01 00 00 00 48 50 20 20  18A6    ....HP  
  0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 00 10  ................
  0030: 01 00 00 00 00 08 01 11 01 00 00 00 00 08 02 12  ................
  0040: 01 00 00 00 00 08 03 13 01 00 00 00 01 0C 04 00  ................
  0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  ................
  0060: 00 00 02 0A 00 09 09 00 00 00 0F 00 04 06 00 05  ................
  0070: 00 01 04 06 01 05 00 01 04 06 02 05 00 01 04 06  ................
  0080: 03 05 00 01                                      ....


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format table]
[004h 0004   4]                 Table Length : 000000A5
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : A0
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : 00
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0001
[02Ch 0044   4]              Manufacturer ID : 57010000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 01 [ASF Alerts]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 002C
[038h 0056   1]                   AssertMask : 00
[039h 0057   1]                 DeassertMask : 00
[03Ah 0058   1]                  Alert Count : 03
[03Bh 0059   1]            Alert Data Length : 0C

[03Ch 0060   1]                      Address : 80
[03Dh 0061   1]                      Command : 23
[03Eh 0062   1]                         Mask : 01
[03Fh 0063   1]                        Value : 01
[040h 0064   1]                   SensorType : 01
[041h 0065   1]                         Type : 01
[042h 0066   1]                       Offset : 00
[043h 0067   1]                   SourceType : 39
[044h 0068   1]                     Severity : 10
[045h 0069   1]                 SensorNumber : 00
[046h 0070   1]                       Entity : 07
[047h 0071   1]                     Instance : 00

[048h 0072   1]                      Address : 80
[049h 0073   1]                      Command : 23
[04Ah 0074   1]                         Mask : 02
[04Bh 0075   1]                        Value : 02
[04Ch 0076   1]                   SensorType : 01
[04Dh 0077   1]                         Type : 01
[04Eh 0078   1]                       Offset : 00
[04Fh 0079   1]                   SourceType : 39
[050h 0080   1]                     Severity : 10
[051h 0081   1]                 SensorNumber : 01
[052h 0082   1]                       Entity : 07
[053h 0083   1]                     Instance : 00

[054h 0084   1]                      Address : 80
[055h 0085   1]                      Command : 23
[056h 0086   1]                         Mask : 04
[057h 0087   1]                        Value : 04
[058h 0088   1]                   SensorType : 01
[059h 0089   1]                         Type : 01
[05Ah 0090   1]                       Offset : 00
[05Bh 0091   1]                   SourceType : 39
[05Ch 0092   1]                     Severity : 10
[05Dh 0093   1]                 SensorNumber : 02
[05Eh 0094   1]                       Entity : 07
[05Fh 0095   1]                     Instance : 00

[060h 0096   1]                Subtable Type : 02 [ASF Remote Control]
[061h 0097   1]                     Reserved : 00
[062h 0098   2]                       Length : 0018
[064h 0100   1]                Control Count : 04
[065h 0101   1]          Control Data Length : 04
[066h 0102   2]                     Reserved : 0000

[068h 0104   1]                     Function : 00
[069h 0105   1]                      Address : 71
[06Ah 0106   1]                      Command : 00
[06Bh 0107   1]                        Value : 00

[06Ch 0108   1]                     Function : 01
[06Dh 0109   1]                      Address : 71
[06Eh 0110   1]                      Command : 02
[06Fh 0111   1]                        Value : 00

[070h 0112   1]                     Function : 02
[071h 0113   1]                      Address : 71
[072h 0114   1]                      Command : 01
[073h 0115   1]                        Value : 00

[074h 0116   1]                     Function : 03
[075h 0117   1]                      Address : 71
[076h 0118   1]                      Command : 03
[077h 0119   1]                        Value : 00

[078h 0120   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121   1]                     Reserved : 00
[07Ah 0122   2]                       Length : 0017
[07Ch 0124   7]                 Capabilities : 21 F8 00 00 00 1B F0
[083h 0131   1]              Completion Code : 00
[084h 0132   4]                Enterprise ID : 57010000
[088h 0136   1]                      Command : 00
[089h 0137   2]                    Parameter : 0100
[08Bh 0139   2]                 Boot Options : 7000
[08Dh 0141   2]               Oem Parameters : 1600

[08Fh 0143   1]                Subtable Type : 00 [ASF Information]
[090h 0144   1]                     Reserved : 10
[091h 0145   2]                       Length : 00A0
[093h 0147   1]          Minimum Reset Value : A2
[094h 0148   1]     Minimum Polling Interval : A4
[095h 0149   2]                    System ID : 0000
[097h 0151   4]              Manufacturer ID : 00000000
[09Bh 0155   1]                        Flags : 00
[09Ch 0156   3]                     Reserved : 000000


Raw Table Data: Length 165 (0xA5)

  0000: 41 53 46 21 A5 00 00 00 20 A0 48 50 51 4F 45 4D  ASF!.... .HPQOEM
  0010: 31 38 41 36 20 20 20 20 01 00 00 00 48 50 20 20  18A6    ....HP  
  0020: 00 00 04 00 00 00 10 00 00 FF 01 00 00 00 01 57  ...............W
  0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 80 23 01 01  ......,......#..
  0040: 01 01 00 39 10 00 07 00 80 23 02 02 01 01 00 39  ...9.....#.....9
  0050: 10 01 07 00 80 23 04 04 01 01 00 39 10 02 07 00  .....#.....9....
  0060: 02 00 18 00 04 04 00 00 00 71 00 00 01 71 02 00  .........q...q..
  0070: 02 71 01 00 03 71 03 00 03 00 17 00 21 F8 00 00  .q...q......!...
  0080: 00 1B F0 00 00 00 01 57 00 00 01 00 70 00 16 00  .......W....p...
  0090: 10 A0 00 A2 A4 00 00 00 00 00 00 00 00 00 00 00  ................
  00A0: 00 00 00 00 00                                   .....


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F1
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   2]                      Version : 0001
[026h 0038   1]                       Status : 00
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000BCD02000
[030h 0048   4]                Image OffsetX : 000001C4
[034h 0052   4]                Image OffsetY : 000000E9

Raw Table Data: Length 56 (0x38)

  0000: 42 47 52 54 38 00 00 00 01 F1 48 50 51 4F 45 4D  BGRT8.....HPQOEM
  0010: 31 38 41 36 20 20 20 20 01 00 00 00 41 43 50 49  18A6    ....ACPI
  0020: 00 00 04 00 01 00 00 00 00 20 D0 BC 00 00 00 00  ......... ......
  0030: C4 01 00 00 E9 00 00 00                          ........


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 58
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]          Boot Register Index : 44
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

  0000: 42 4F 4F 54 28 00 00 00 01 58 48 50 51 4F 45 4D  BOOT(....XHPQOEM
  0010: 31 38 41 36 20 20 20 20 01 00 00 00 48 50 20 20  18A6    ....HP  
  0020: 00 00 04 00 44 00 00 00                          ....D...


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 1, "HPQOEM", "18A6    ", 0xF0000000)
{
    /*
     * iASL Warning: There were 3 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.APTS, MethodObj)    // Warning: Unresolved method, guessing 2 arguments
    External (_SB_.AWAK, MethodObj)    // Warning: Unresolved method, guessing 1 arguments
    External (ALIB, MethodObj)    // Warning: Unresolved method, guessing 2 arguments

    External (_PR_.C000._PPC, IntObj)
    External (_PR_.C000.PPCV, UnknownObj)
    External (_PR_.C001._PPC, UnknownObj)
    External (_PR_.C002._PPC, UnknownObj)
    External (_PR_.C003._PPC, UnknownObj)

    OperationRegion (SPRT, SystemIO, 0xB0, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    OperationRegion (CMS1, SystemIO, 0x72, 0x02)
    Field (CMS1, ByteAcc, NoLock, Preserve)
    {
        CMSI,   8, 
        CMSD,   8
    }

    IndexField (CMSI, CMSD, ByteAcc, NoLock, Preserve)
    {
        Offset (0xF7), 
        HSDC,   8, 
        HSDS,   8, 
        HBUC,   8, 
        HBUS,   8
    }

    OperationRegion (PCB0, SystemIO, 0x70, 0x02)
    Field (PCB0, ByteAcc, NoLock, Preserve)
    {
        PCI0,   8, 
        PCD0,   8
    }

    IndexField (PCI0, PCD0, ByteAcc, NoLock, Preserve)
    {
    }

    OperationRegion (PCB1, SystemIO, 0x72, 0x02)
    Field (PCB1, ByteAcc, NoLock, Preserve)
    {
        PCI1,   8, 
        PCD1,   8
    }

    IndexField (PCI1, PCD1, ByteAcc, NoLock, Preserve)
    {
        Offset (0xC8), 
        BCMV,   8, 
        BRLS,   8, 
        Offset (0xFE), 
        FFAL,   1, 
        THSD,   1, 
        PDPN,   1
    }

    Method (CMSW, 2, NotSerialized)
    {
        CMSI = Arg0
        CMSD = Arg1
    }

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DBG1, SystemIO, 0x80, 0x02)
    Field (DBG1, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
        Offset (0x24), 
        MMSO,   32, 
        Offset (0x50), 
        HPAD,   32, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xC8), 
            ,   2, 
        SPRE,   1, 
        TPDE,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, MMSO, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x132), 
            ,   7, 
        GP51,   1, 
        Offset (0x135), 
            ,   6, 
        GP54,   1, 
        Offset (0x136), 
            ,   7, 
        GP55,   1, 
        Offset (0x138), 
            ,   6, 
        GP57,   1, 
        Offset (0x13A), 
            ,   7, 
        GP59,   1, 
        Offset (0x13F), 
            ,   7, 
        GP64,   1, 
        Offset (0x160), 
            ,   7, 
        GE01,   1, 
        Offset (0x16A), 
            ,   7, 
        GE11,   1, 
            ,   7, 
        GE12,   1, 
        Offset (0x16E), 
            ,   7, 
        BATS,   1, 
        Offset (0x1FF), 
            ,   1, 
        G01S,   1, 
        Offset (0x203), 
            ,   1, 
        G01E,   1, 
        Offset (0x207), 
            ,   1, 
        TR01,   1, 
        Offset (0x20B), 
            ,   1, 
        TL01,   1, 
        Offset (0x20D), 
            ,   7, 
        ACIR,   1, 
        Offset (0x287), 
            ,   1, 
        CLPS,   1, 
        Offset (0x298), 
            ,   7, 
        G15A,   1, 
        Offset (0x2AF), 
            ,   2, 
        SLPS,   2, 
        Offset (0x376), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BA), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BD), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3DE), 
        BLNK,   2, 
        Offset (0x3EF), 
        PHYD,   1, 
        Offset (0xE80), 
            ,   2, 
        ECES,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, 0x0400, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        Index (PRWP, Zero) = Arg0
        Index (PRWP, One) = Arg1
        If (((DAS3 == Zero) && (DAS1 == Zero)))
        {
            If ((Arg1 <= 0x03))
            {
                Index (PRWP, One) = Zero
            }
        }
        Else
        {
            If (((DAS3 == Zero) && (Arg1 == 0x03)))
            {
                Index (PRWP, One) = One
            }

            If (((DAS1 == Zero) && (Arg1 == One)))
            {
                Index (PRWP, One) = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
    }

    Method (SWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PWDE = One
        PEWD = Zero
    }

    Method (CHKH, 0, NotSerialized)
    {
        If (\_SB.PCI0.SMBS.GE05)
        {
            \_SB.PCI0.SMBS.G05T = Zero
        }
        Else
        {
            \_SB.PCI0.SMBS.G05T = One
        }

        \_SB.PCI0.SMBS.G06T = ~\_SB.PCI0.SMBS.GE06
        \_SB.PCI0.SMBS.G16T = ~\_SB.PCI0.SMBS.GE16
        \_SB.PCI0.SMBS.O171 = ~\_SB.PCI0.SMBS.GE16
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        INAB = Arg0
        Return (DAAB) /* \DAAB */
    }

    Method (WTAB, 2, NotSerialized)
    {
        INAB = Arg0
        DAAB = Arg1
    }

    Method (RWAB, 3, NotSerialized)
    {
        Local0 = (RDAB (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    OperationRegion (PEBA, SystemMemory, 0xF8000000, 0x02000000)
    Field (PEBA, AnyAcc, NoLock, Preserve)
    {
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (GNVS, SystemMemory, 0xBFBBCF18, 0x00000013)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        DAS1,   8, 
        DAS3,   8, 
        TNBH,   8, 
        TCP0,   8, 
        TCP1,   8, 
        ATNB,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PWMN,   8, 
        LPTY,   8, 
        M92D,   8, 
        WKPM,   8, 
        ALST,   8, 
        AFUC,   8, 
        EXUS,   8, 
        AIRC,   8, 
        WLSH,   8, 
        TSSS,   8, 
        ODZC,   8
    }

    OperationRegion (OGNS, SystemMemory, 0xBFBBA018, 0x000010E1)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        SERN,   80, 
        MDID,   256, 
        GUID,   64, 
        UUID,   128, 
        SKUN,   96, 
        LCOD,   24, 
        MACA,   48, 
        KBMX,   8, 
        CHID,   8, 
        OSKU,   8, 
        QKPM,   8, 
        WPFL,   8, 
        DBSW,   8, 
        WPCR,   8, 
        WINA,   8, 
        GPSA,   8, 
        MSME,   8, 
        PREV,   24, 
        ODDC,   8, 
        WIN7,   8, 
        IMID,   8, 
        WSDY,   32, 
        WSDM,   16, 
        WSDD,   16, 
        CTNU,   152, 
        ESTL,   8, 
        NISC,   8, 
        Offset (0x1000), 
        HWCT,   8, 
        HWBC,   8, 
        HWRC,   8, 
        HWBF,   1024, 
        IAOR,   8, 
        CDAT,   32, 
        WLVD,   16, 
        WLDD,   16, 
        WLSV,   16, 
        WLSS,   16, 
        BTVD,   16, 
        BTDD,   16, 
        WWVD,   16, 
        WWDD,   16, 
        GPVD,   16, 
        GPDD,   16, 
        FACM,   16, 
        SMA4,   8, 
        WIVD,   16, 
        WIDD,   16, 
        RCKP,   8, 
        HDSM,   16, 
        HD1H,   64, 
        HD2H,   64, 
        OD1H,   64, 
        EBUR,   8, 
        HD1P,   16, 
        HD1M,   16, 
        HD2P,   16, 
        HD2M,   16, 
        OD1P,   16, 
        OD1M,   16, 
        HBUP,   8, 
        OAWF,   8, 
        OG01,   8, 
        OG02,   8, 
        OG03,   8, 
        OG04,   8, 
        OG05,   8, 
        OG06,   8, 
        OG07,   8, 
        OG08,   8, 
        OG09,   8, 
        OG10,   8, 
        ECON,   8, 
        OSYS,   16, 
        VTDT,   8, 
        TBSP,   8, 
        PSSP,   8, 
        SBAC,   16, 
        S3BS,   8, 
        VTST,   8
    }

    OperationRegion (SMIO, SystemIO, 0xB0, 0x02)
    Field (SMIO, ByteAcc, NoLock, Preserve)
    {
        SMIC,   8, 
        SMID,   8
    }

    OperationRegion (NVST, SystemMemory, 0xBFBBDE8E, 0x0000012B)
    Field (NVST, AnyAcc, Lock, Preserve)
    {
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        SBFN,   8, 
        DID,    32, 
        INFO,   2048, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        ROMS,   32, 
        MUXF,   8, 
        PDDN,   8
    }

    Method (SCMP, 2, NotSerialized)
    {
        Name (STG1, Buffer (0x50) {})
        Name (STG2, Buffer (0x50) {})
        STG1 = Arg0
        STG2 = Arg1
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = Zero
        While ((Local0 < SizeOf (Arg0)))
        {
            If ((DerefOf (Index (STG1, Local0)) != DerefOf (Index (STG2, Local0
                ))))
            {
                Return (Zero)
            }

            Local0++
        }

        Return (One)
    }

    Name (WNOS, Zero)
    Name (MYOS, Zero)
    Name (HTTS, Zero)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (CKOS, 0, NotSerialized)
    {
        If ((WNOS == Zero))
        {
            If (SCMP (_OS, "Microsoft Windows"))
            {
                WNOS = One
            }

            If (SCMP (_OS, "Microsoft Windows NT"))
            {
                WNOS = 0x02
            }

            If (SCMP (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                WNOS = 0x03
            }

            If (CondRefOf (\_OSI, Local0))
            {
                If (SCMP (_OS, "Windows 2006"))
                {
                    WNOS = 0x05
                }
                Else
                {
                    If (SCMP (_OS, "Windows 2009"))
                    {
                        WNOS = 0x06
                    }
                    Else
                    {
                        WNOS = 0x04
                    }
                }
            }
        }

        Return (WNOS) /* \WNOS */
    }

    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0) {})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0) {})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (Index (BUF0, Local2))
            Local4 = DerefOf (Index (BUF1, Local2))
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                OSYS = 0x07D0
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                    OSYS = 0x07DC
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                    OSYS = 0x03E8
                }
            }
            Else
            {
                If (CondRefOf (\_OS, Local0))
                {
                    If (SEQL (_OS, "Microsoft Windows"))
                    {
                        OSTB = One
                        TPOS = One
                    }
                    Else
                    {
                        If (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                        {
                            OSTB = 0x02
                            TPOS = 0x02
                        }
                        Else
                        {
                            If (SEQL (_OS, "Microsoft Windows NT"))
                            {
                                OSTB = 0x04
                                TPOS = 0x04
                            }
                            Else
                            {
                                OSTB = Zero
                                TPOS = Zero
                            }
                        }
                    }
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_PR)
    {
        Processor (C000, 0x00, 0x00000410, 0x06) {}
        Processor (C001, 0x01, 0x00000410, 0x06) {}
        Processor (C002, 0x02, 0x00000410, 0x06) {}
        Processor (C003, 0x03, 0x00000410, 0x06) {}
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((DAS1 == One))
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            One, 
            Zero, 
            Zero
        })
    }

    If ((DAS3 == One))
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            0x03, 
            Zero, 
            Zero
        })
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    Scope (_GPE)
    {
        Method (_L1C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Local1 = 0xFFFF
            Local2 = \_SB.PCI0.SMBS.MIN
            Local1 = (Local2 << 0x08)
            Local2 = \_SB.PCI0.SMBS.SEC
            Local1 |= Local2
            P80H = Local1
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.PB2, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB4, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB5, 0x02) // Device Wake
        }

        Name (CALB, Buffer (0x05) {})
        Name (XX05, Buffer (0x05) {})
        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.OHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.OHC2, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            Notify (\_SB.PCI0.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.XHC1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If (((ODZC == One) && (\_SB.PCI0.SMBS.GE16 == Zero)))
            {
                If (\_SB.PCI0.SMBS.G06T)
                {
                    Sleep (0x14)
                    If (\_SB.PCI0.SMBS.GE06)
                    {
                        If (((\_SB.PCI0.SATA.VIDI == 0x78001022) || (\_SB.PCI0.SATA.VIDI == 0x78011022))) {}
                        If (((\_SB.PCI0.SATA.VIDI == 0x78041022) || (\_SB.PCI0.SATA.VIDI == 0x78021002)))
                        {
                            If ((OSYS == 0x07DC))
                            {
                                Notify (\_SB.PCI0.SATA.ODDZ, 0x02) // Device Wake
                            }
                            Else
                            {
                                Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                            }
                        }

                        If ((\_SB.PCI0.SATA.VIDI == 0x78031022))
                        {
                            Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                        }

                        P80H = 0xDF15
                    }
                }
                Else
                {
                    Sleep (0x14)
                    If (!\_SB.PCI0.SMBS.GE06)
                    {
                        If (((\_SB.PCI0.SATA.VIDI == 0x78001022) || (\_SB.PCI0.SATA.VIDI == 0x78011022))) {}
                        If (((\_SB.PCI0.SATA.VIDI == 0x78041022) || (\_SB.PCI0.SATA.VIDI == 0x78021002)))
                        {
                            If ((OSYS == 0x07DC))
                            {
                                Notify (\_SB.PCI0.SATA.ODDZ, 0x02) // Device Wake
                            }
                            Else
                            {
                                Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                            }
                        }

                        If ((\_SB.PCI0.SATA.VIDI == 0x78031022))
                        {
                            Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                        }

                        P80H = 0xDF14
                    }
                }

                \_SB.PCI0.SMBS.G06T = ~\_SB.PCI0.SMBS.GE06
            }
        }

        Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Sleep (0xC8)
            \_SB.PCI0.SMBS.M170 = One
            \_SB.PCI0.SMBS.E170 = Zero
            \_SB.PCI0.SMBS.O170 = Zero
            If (\_SB.PCI0.SMBS.GE16)
            {
                \_SB.PCI0.SMBS.O171 = Zero
                \_SB.PCI0.SATA.PRT1.DIS ()
                Sleep (0x28)
                Notify (\_SB.PCI0.SATA, Zero) // Bus Check
                If ((ODZC == One))
                {
                    Notify (\_SB.PCI0.SATA.ODDZ, 0x81) // Information Change
                }

                If ((OSYS == 0x07DC))
                {
                    Notify (\_SB.PCI0.SATA.ODDZ, 0x02) // Device Wake
                }
                Else
                {
                    Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                }

                P80H = 0x0F17
            }
            Else
            {
                \_SB.PCI0.SATA.PRT1.ENA ()
                \_SB.PCI0.SMBS.O171 = One
                Sleep (0x28)
                Notify (\_SB.PCI0.SATA, Zero) // Bus Check
                If ((ODZC == One))
                {
                    Notify (\_SB.PCI0.SATA.ODDZ, 0x81) // Information Change
                }

                If ((OSYS == 0x07DC))
                {
                    Notify (\_SB.PCI0.SATA.ODDZ, 0x02) // Device Wake
                }
                Else
                {
                    Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                }

                P80H = 0x1F17
            }

            \_SB.PCI0.SMBS.G16T = ~\_SB.PCI0.SMBS.GE16
        }
    }

    Scope (_TZ)
    {
        Name (BOTP, Zero)
        ThermalZone (TSZ0)
        {
            Name (REGN, "Processor Thermal Zone")
            Method (FMAX, 0, NotSerialized)
            {
                If (\_SB.PCI0.LPC0.ECOK ())
                {
                    Return ((\_SB.PCI0.LPC0.EC0.FNMX * 0x64))
                }

                Return (0x1770)
            }

            Method (FMIN, 0, NotSerialized)
            {
                If (\_SB.PCI0.LPC0.ECOK ())
                {
                    Return ((\_SB.PCI0.LPC0.EC0.FNMN * 0x64))
                }

                Return (0x1770)
            }

            Method (FRSP, 0, NotSerialized)
            {
                If (\_SB.PCI0.LPC0.ECOK ())
                {
                    Return ((\_SB.PCI0.LPC0.EC0.FRPM * 0x64))
                }

                Return (0x1770)
            }

            Method (FSSP, 1, NotSerialized)
            {
                If (\_SB.PCI0.LPC0.ECOK ())
                {
                    \_SB.PCI0.LPC0.EC0.FNSW = One
                    \_SB.PCI0.LPC0.EC0.FWPM = (!Arg0 & One)
                    \_SB.PCI0.LPC0.EC0.FNSW = Zero
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (0x1388)
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If (\_SB.PCI0.LPC0.ECOK ())
                {
                    Local1 = (FFAL | PDPN)
                    If ((Local1 || BOTP))
                    {
                        Return (0x0E30)
                    }
                    Else
                    {
                        Return (0x0E8A)
                    }
                }

                Return (0x1388)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.LPC0.ECOK ())
                {
                    Local1 = (FFAL | PDPN)
                    If ((Local1 || BOTP))
                    {
                        Return (0x0E30)
                    }
                    Else
                    {
                        Return ((0x0AAC + (\_SB.PCI0.LPC0.EC0.CPUT * 0x0A)))
                    }
                }

                Return (0x0BB8)
            }
        }
    }

    Name (PICM, Zero)
    Name (GPIC, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
        GPIC = Arg0
        If (PICM)
        {
            \_SB.DSPI ()
        }
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        SPTS (Arg0)
        If ((Arg0 == One))
        {
            IO80 = 0x51
            \_SB.S80H (0x51)
        }

        If ((Arg0 == 0x03))
        {
            SBAC = \_SB.PCI0.LPC0.EC0.BAC0
            S3BS = 0x04
            If ((\_SB.PCI0.XHC0.X0SP > Zero))
            {
                \_SB.PCI0.LPC0.EC0.UWAK = One
            }

            IO80 = 0x53
            \_SB.S80H (0x53)
            \_SB.PCI0.SMBS.SLPS = One
            \_SB.PCI0.LPC0.EC0.S3ST = One
            \_SB.PCI0.LPC0.EC0.OHP0 = ((\_SB.PCI0.OHC1.RHUB.PRT1.DEVP || \_SB.PCI0.EHC1.RHUB.PRT1.DEVP) || \_SB.PCI0.XHC1.X1PW)
            \_SB.PCI0.SATA.ODDZ._PS0 ()
        }

        If ((Arg0 == 0x04))
        {
            CMSW (0xE0, 0x60)
            IO80 = 0x54
            \_SB.S80H (0x54)
            \_SB.PCI0.SMBS.SLPS = One
            RSTU = One
            \_TZ.BOTP = Zero
            \_PR.C000.PPCV = Zero
            \_SB.PCI0.LPC0.EC0.S4ST = One
        }

        If ((Arg0 == 0x05))
        {
            IO80 = 0x55
            \_SB.S80H (0x55)
            BCMD = 0x90
            \_SB.BSMI (Zero)
            \_SB.GSMI (0x03)
            \_SB.PCI0.LPC0.EC0.S5ST = One
        }

        \_SB.APTS (Arg0, \_SB.WMID.ESDT ())
        If (!\_SB.PCI0.LPC0.EC0.ADPT)
        {
            OperationRegion (SMIR, SystemMemory, 0xFED80200, 0x80)
            Field (SMIR, ByteAcc, NoLock, Preserve)
            {
                Offset (0x58), 
                SC24,   8, 
                SC25,   8, 
                SC26,   8, 
                SC27,   8, 
                Offset (0x78), 
                SC56,   8, 
                SC57,   8
            }

            SC24 = 0x07
            SC25 = 0x07
            SC26 = 0x07
            SC27 = 0x07
            SC56 = 0x07
            SC57 = 0x07
        }

        BRLS = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        SSMP = 0xC4
        CMSW (0xE0, Zero)
        SWAK (Arg0)
        \_SB.AWAK (Arg0)
        If ((Arg0 == One))
        {
            IO80 = 0xE1
            \_SB.S80H (0xE1)
            \_SB.PCI0.P2P.PR4B = 0xF1
        }

        If ((Arg0 == 0x03))
        {
            If ((\_SB.PCI0.XHC0.X0SP == Zero))
            {
                \_SB.PCI0.LPC0.EC0.UWAK = Zero
            }

            IO80 = 0xE3
            \_SB.S80H (0xE3)
            CHKH ()
            If ((OSYS == 0x07DC))
            {
                GP57 = One
                GP54 = Zero
            }
            Else
            {
                \_SB.CHWL ()
            }

            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            IO80 = 0xE4
            \_SB.S80H (0xE4)
            \_SB.PCI0._INI ()
            If (((TPOS == 0x40) || (TPOS == 0x41)))
            {
                \_SB.PCI0.EHC1.STOS ()
                \_SB.PCI0.EHC2.STOS ()
            }

            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((OSTB < 0x40))
        {
            Acquire (\_SB.PCI0.LPC0.PSMX, 0xFFFF)
            SBFN = One
            BCMD = 0x8A
            \_SB.BSMI (Zero)
            Release (\_SB.PCI0.LPC0.PSMX)
        }

        If ((Arg0 == 0x05))
        {
            IO80 = 0xE5
        }

        BRLS = One
        Return (Zero)
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            OperationRegion (SCTH, PCI_Config, 0x7A, One)
            Field (SCTH, ByteAcc, NoLock, Preserve)
            {
                RSMF,   1
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((GPIC == Zero)) {}
                Else
                {
                    DSPI ()
                }

                OSTP ()
                CHKH ()
                If ((OSYS == 0x07DC))
                {
                    GP57 = One
                    GP54 = Zero
                }
                Else
                {
                    CHWL ()
                }

                TBSW ()
                CMSW (0xE0, Zero)
            }

            OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
            Field (NBMS, DWordAcc, NoLock, Preserve)
            {
                MIDX,   32, 
                MIDR,   32
            }

            Mutex (NBMM, 0x00)
            Method (NBMR, 1, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                MIDX = Local0
                Local0 = MIDR /* \_SB_.PCI0.MIDR */
                MIDX = 0x7F
                Release (NBMM)
                Return (Local0)
            }

            Method (NBMW, 2, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                Local0 |= 0x80
                MIDX = Local0
                MIDR = Arg1
                MIDX = Local0 &= 0x7F
                Release (NBMM)
            }

            OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
            Field (NBXP, DWordAcc, NoLock, Preserve)
            {
                NBXI,   32, 
                NBXD,   32
            }

            Mutex (NBXM, 0x00)
            Method (NBXR, 1, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                Local0 = NBXD /* \_SB_.PCI0.NBXD */
                NBXI = Zero
                Release (NBXM)
                Return (Local0)
            }

            Method (NBXW, 2, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                NBXD = Arg1
                NBXI = Zero
                Release (NBXM)
            }

            Method (XPTR, 2, NotSerialized)
            {
                If (((Arg0 < 0x02) && (Arg0 > 0x07)))
                {
                    Return (Zero)
                }
                Else
                {
                    If ((Arg0 < 0x04))
                    {
                        Local1 = (Arg0 - 0x02)
                        Local0 = 0x01310800
                    }
                    Else
                    {
                        Local1 = (Arg0 - 0x04)
                        Local0 = 0x01300900
                    }

                    Local0 += (Local1 << 0x08)
                    Local0 <<= Local1
                    NBXW (Local0, Arg1)
                    Return (Ones)
                }
            }

            Method (XPLP, 2, NotSerialized)
            {
            }

            Method (XPLL, 2, NotSerialized)
            {
            }

            Name (_UID, One)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (AMHP, Zero)
            Method (XOSC, 4, NotSerialized)
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0.XOSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0.XOSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)) {}
                        If ((CTRL & 0x10)) {}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (TOM, 0, NotSerialized)
            {
                Local0 = (TOML * 0x00010000)
                Local1 = (TOMH * 0x01000000)
                Local0 += Local1
                Return (Local0)
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x78000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFED3FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02D40000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED45000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x012BB000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, BTN1)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, BTX1)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, BTL1)  // _LEN: Length
                BTMN = TOM ()
                BTLN = (0xF8000000 - BTMN) /* \_SB_.PCI0._CRS.BTMN */
                Return (CRES) /* \_SB_.PCI0.CRES */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y02)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y03)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y02._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y02._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._LEN, ML02)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        ML02 = 0x1000
                    }

                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Method (XCMP, 2, NotSerialized)
            {
                If ((0x10 != SizeOf (Arg0)))
                {
                    Return (Zero)
                }

                If ((0x10 != SizeOf (Arg1)))
                {
                    Return (Zero)
                }

                Local0 = Zero
                While ((Local0 < 0x10))
                {
                    If ((DerefOf (Index (Arg0, Local0)) != DerefOf (Index (Arg1, Local0
                        ))))
                    {
                        Return (Zero)
                    }

                    Local0++
                }

                Return (One)
            }

            Method (AFN0, 0, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN0 ()
                }

                If ((PDDN == 0x02))
                {
                    ^PB2.VGA.AFN0 ()
                }
            }

            Method (AFN1, 1, Serialized)
            {
            }

            Method (AFN2, 2, Serialized)
            {
            }

            Method (AFN3, 2, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN3 (Arg0, Arg1)
                }

                If ((PDDN == 0x02))
                {
                    ^PB2.VGA.AFN3 (Arg0, Arg1)
                }
            }

            Method (AFN4, 1, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN4 (Arg0)
                }

                If ((PDDN == 0x02))
                {
                    ^PB2.VGA.AFN4 (Arg0)
                }
            }

            Method (AFN5, 0, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN5 ()
                }

                If ((PDDN == 0x02))
                {
                    ^PB2.VGA.AFN5 ()
                }
            }

            Method (AFN6, 0, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN6 ()
                }

                If ((PDDN == 0x02))
                {
                    ^PB2.VGA.AFN6 ()
                }
            }

            Method (AFN7, 1, Serialized)
            {
                ^VGA.AFN7 (Arg0)
            }

            Name (PR00, Package (0x1B)
            {
                Package (0x04)
                {
                    0x0011FFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }
            })
            Name (AR00, Package (0x1B)
            {
                Package (0x04)
                {
                    0x0011FFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    One, 
                    Zero, 
                    0x11
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.PCI0.AR00 */
                }

                Return (PR00) /* \_SB_.PCI0.PR00 */
            }

            Device (VGA)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Name (PXEN, 0x80000000)
                Name (PXID, 0x00020000)
                Name (PXMX, 0x80000001)
                Name (PXFX, 0x80000000)
                Name (PXDY, 0x80000000)
                Name (AF7E, 0x80000001)
                OperationRegion (PCIG, PCI_Config, Zero, 0x50)
                Field (PCIG, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    GBA2,   32
                }

                OperationRegion (GFMM, SystemMemory, GBA2, 0x6000)
                Field (GFMM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x5F68), 
                    AZPS,   32
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (DOSA, Zero)
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSA = Arg0
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Name (DODL, Package (0x05)
                    {
                        0x00010100, 
                        0x00010110, 
                        0x0200, 
                        0x00010210, 
                        0x00010220
                    })
                    Return (DODL) /* \_SB_.PCI0.VGA_._DOD.DODL */
                }

                Device (LCD)
                {
                    Name (_ADR, 0x0110)  // _ADR: Address
                    Name (BRLV, Package (0x11)
                    {
                        0x52, 
                        0x22, 
                        0x02, 
                        0x08, 
                        0x0E, 
                        0x16, 
                        0x1C, 
                        0x22, 
                        0x2A, 
                        0x30, 
                        0x36, 
                        0x3E, 
                        0x44, 
                        0x4B, 
                        0x52, 
                        0x58, 
                        0x64
                    })
                    Name (PBCL, Package (0x02)
                    {
                        Package (0x0B)
                        {
                            0x07, 
                            0x09, 
                            0x0D, 
                            0x12, 
                            0x18, 
                            0x24, 
                            0x2D, 
                            0x37, 
                            0x40, 
                            0x49, 
                            0x64
                        }, 

                        Package (0x0B)
                        {
                            0x08, 
                            0x0B, 
                            0x0F, 
                            0x15, 
                            0x1E, 
                            0x27, 
                            0x33, 
                            0x3E, 
                            0x49, 
                            0x54, 
                            0x64
                        }
                    })
                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Return (Package (0x0D)
                        {
                            0x64, 
                            0x32, 
                            Zero, 
                            0x0A, 
                            0x14, 
                            0x1E, 
                            0x28, 
                            0x32, 
                            0x3C, 
                            0x46, 
                            0x50, 
                            0x5A, 
                            0x64
                        })
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        Divide (Arg0, 0x0A, Local0, Local1)
                        BCMV = Arg0
                        BRLS = Zero
                        Local2 = Package (0x0B)
                            {
                                0x06, 
                                0x0A, 
                                0x14, 
                                0x1E, 
                                0x28, 
                                0x32, 
                                0x3C, 
                                0x46, 
                                0x50, 
                                0x5A, 
                                0x64
                            }
                        If ((IDPC == 0x32EC))
                        {
                            Local2 = DerefOf (Index (PBCL, Zero))
                        }
                        Else
                        {
                            If ((IDPC == 0x15B6))
                            {
                                Local2 = DerefOf (Index (PBCL, One))
                            }
                        }

                        Local0 = DerefOf (Index (Local2, Local1))
                        If ((AF7E == 0x80000001))
                        {
                            Divide ((Local0 * 0xFF), 0x64, Local1, Local2)
                            ^^^AFN7 (Local2)
                        }
                        Else
                        {
                            Acquire (^^^LPC0.PSMX, 0xFFFF)
                            BRTL = Local0
                            BCMD = 0x72
                            BSMI (Zero)
                            Release (^^^LPC0.PSMX)
                        }
                    }

                    Method (BRAJ, 0, NotSerialized)
                    {
                        If (^^^LPC0.EC0.BRUP)
                        {
                            If ((BCMV < 0x64))
                            {
                                Local0 = (BCMV + 0x0A)
                                _BCM (Local0)
                            }
                        }

                        If (^^^LPC0.EC0.BRDN)
                        {
                            If ((BCMV > Zero))
                            {
                                Local0 = (BCMV - 0x0A)
                                _BCM (Local0)
                            }
                        }

                        BRLS = One
                    }
                }

                Name (ATIB, Buffer (0x0100) {})
                Method (ATIF, 2, Serialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Return (AF00 ())
                    }

                    If ((Arg0 == One))
                    {
                        Return (AF01 ())
                    }

                    If ((Arg0 == 0x02))
                    {
                        Return (AF02 ())
                    }

                    If ((Arg0 == 0x03))
                    {
                        Return (AF03 (DerefOf (Index (Arg1, 0x02)), DerefOf (Index (Arg1, 0x04))))
                    }

                    If ((Arg0 == 0x0F))
                    {
                        Return (AF15 ())
                    }
                    Else
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = Zero
                        VERN = Zero
                        NMSK = Zero
                        SFUN = Zero
                        Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                    }
                }

                Method (AF00, 0, NotSerialized)
                {
                    AZPS &= 0xC0000001
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateWordField (ATIB, 0x02, VERN)
                    CreateDWordField (ATIB, 0x04, NMSK)
                    CreateDWordField (ATIB, 0x08, SFUN)
                    SSZE = 0x0C
                    VERN = One
                    If ((PXEN == 0x80000000))
                    {
                        NMSK = 0x11
                    }
                    Else
                    {
                        NMSK = 0x51
                    }

                    If ((AF7E == 0x80000001))
                    {
                        NMSK |= 0x80
                    }

                    MSKN = NMSK /* \_SB_.PCI0.VGA_.AF00.NMSK */
                    SFUN = 0x4007
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Method (AF01, 0, NotSerialized)
                {
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateDWordField (ATIB, 0x02, VMSK)
                    CreateDWordField (ATIB, 0x06, FLGS)
                    SSZE = 0x0A
                    VMSK = 0x03
                    FLGS = One
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Name (PSBR, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           /* .... */
                })
                Name (MSKN, Zero)
                Name (SEXM, Zero)
                Name (STHG, Zero)
                Name (STHI, Zero)
                Name (SFPG, Zero)
                Name (SFPI, Zero)
                Name (SSPS, Zero)
                Name (SSDM, 0x0A)
                Name (SCDY, Zero)
                Name (SACT, Buffer (0x07)
                {
                     0x01, 0x02, 0x08, 0x80, 0x03, 0x09, 0x81         /* ....... */
                })
                Method (AF02, 0, NotSerialized)
                {
                    CreateBitField (PSBR, Zero, PDSW)
                    CreateBitField (PSBR, One, PEXM)
                    CreateBitField (PSBR, 0x02, PTHR)
                    CreateBitField (PSBR, 0x03, PFPS)
                    CreateBitField (PSBR, 0x04, PSPS)
                    CreateBitField (PSBR, 0x05, PDCC)
                    CreateBitField (PSBR, 0x06, PXPS)
                    CreateBitField (PSBR, 0x07, PBRT)
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateDWordField (ATIB, 0x02, PSBI)
                    CreateByteField (ATIB, 0x06, EXPM)
                    CreateByteField (ATIB, 0x07, THRM)
                    CreateByteField (ATIB, 0x08, THID)
                    CreateByteField (ATIB, 0x09, FPWR)
                    CreateByteField (ATIB, 0x0A, FPID)
                    CreateByteField (ATIB, 0x0B, SPWR)
                    CreateByteField (ATIB, 0x0C, BRTL)
                    SSZE = 0x0D
                    PSBI = PSBR /* \_SB_.PCI0.VGA_.PSBR */
                    If (PDSW)
                    {
                        PDSW = Zero
                    }

                    If (PEXM)
                    {
                        EXPM = SEXM /* \_SB_.PCI0.VGA_.SEXM */
                        SEXM = Zero
                        PEXM = Zero
                    }

                    If (PTHR)
                    {
                        THRM = STHG /* \_SB_.PCI0.VGA_.STHG */
                        THID = STHI /* \_SB_.PCI0.VGA_.STHI */
                        STHG = Zero
                        STHI = Zero
                        PTHR = Zero
                    }

                    If (PFPS)
                    {
                        FPWR = SFPG /* \_SB_.PCI0.VGA_.SFPG */
                        FPWR = SFPI /* \_SB_.PCI0.VGA_.SFPI */
                        SFPG = Zero
                        SFPI = Zero
                        PFPS = Zero
                    }

                    If (PSPS)
                    {
                        SPWR = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                        PSPS = Zero
                    }

                    If (PXPS)
                    {
                        PXPS = Zero
                    }

                    If (PBRT)
                    {
                        P80H = 0xF7
                        PBRT = Zero
                    }

                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Method (AF03, 2, NotSerialized)
                {
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateWordField (ATIB, 0x02, SSDP)
                    CreateWordField (ATIB, 0x04, SCDP)
                    SSDP = Arg0
                    SCDP = Arg1
                    Name (NXTD, 0x06)
                    Name (CIDX, 0x06)
                    Local1 = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                    Local1 &= 0x8B
                    Local2 = SCDP /* \_SB_.PCI0.VGA_.AF03.SCDP */
                    If (CondRefOf (\_SB.LID._LID, Local4))
                    {
                        Local2 &= 0xFFFFFFFE
                        Local2 |= ^^^LID._LID ()
                    }
                    Else
                    {
                        Local2 |= One
                    }

                    P80H = Local2
                    Local0 = Zero
                    While ((Local0 < SizeOf (SACT)))
                    {
                        Local3 = DerefOf (Index (SACT, Local0))
                        If ((Local3 == Local1))
                        {
                            CIDX = Local0
                            Local0 = SizeOf (SACT)
                        }
                        Else
                        {
                            Local0++
                        }
                    }

                    Local0 = CIDX /* \_SB_.PCI0.VGA_.AF03.CIDX */
                    While ((Local0 < SizeOf (SACT)))
                    {
                        Local0++
                        If ((Local0 == SizeOf (SACT)))
                        {
                            Local0 = Zero
                        }

                        Local3 = DerefOf (Index (SACT, Local0))
                        If (((Local3 & Local2) == Local3))
                        {
                            NXTD = Local0
                            Local0 = SizeOf (SACT)
                        }
                    }

                    If ((NXTD == SizeOf (SACT)))
                    {
                        SSDP = Zero
                    }
                    Else
                    {
                        Local0 = NXTD /* \_SB_.PCI0.VGA_.AF03.NXTD */
                        Local3 = DerefOf (Index (SACT, Local0))
                        SSDP &= 0xFFFFFFF4
                        SSDP |= Local3
                    }

                    SSZE = 0x04
                    P80H = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Method (AFN0, 0, Serialized)
                {
                    If ((MSKN & One))
                    {
                        CreateBitField (PSBR, Zero, PDSW)
                        PDSW = One
                        Notify (VGA, 0x81) // Information Change
                    }
                }

                Method (AFN3, 2, Serialized)
                {
                    If ((MSKN & 0x08))
                    {
                        Local0 = Arg0
                        SFPI = Local0
                        Local0 = Arg1
                        SFPG = Local0 &= 0x03
                        CreateBitField (PSBR, 0x03, PFPS)
                        PFPS = One
                        Notify (VGA, 0x81) // Information Change
                    }
                }

                Method (AFN4, 1, Serialized)
                {
                    If ((MSKN & 0x10))
                    {
                        Local0 = Arg0
                        Local1 = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                        SSPS = Local0
                        If ((Local0 == Local1)) {}
                        Else
                        {
                            CreateBitField (PSBR, 0x04, PSPS)
                            PSPS = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }
                }

                Method (AFN5, 0, Serialized)
                {
                    If ((MSKN & 0x20))
                    {
                        CreateBitField (PSBR, 0x05, PDCC)
                        PDCC = One
                        Notify (VGA, 0x81) // Information Change
                    }
                }

                Method (AFN6, 0, Serialized)
                {
                    If ((MSKN & 0x40))
                    {
                        CreateBitField (PSBR, 0x06, PXPS)
                        PXPS = One
                        Notify (VGA, 0x81) // Information Change
                    }
                }

                Method (AFN7, 1, Serialized)
                {
                    If ((MSKN & 0x80))
                    {
                        CreateBitField (PSBR, 0x07, PBRT)
                        PBRT = One
                        CreateByteField (ATIB, 0x0C, BRTL)
                        BRTL = Arg0
                        Notify (VGA, 0x81) // Information Change
                    }
                }

                Method (AF15, 0, NotSerialized)
                {
                    P80H = 0xFF
                    CreateWordField (ATIB, Zero, DNUM)
                    CreateWordField (ATIB, 0x02, DSZE)
                    CreateDWordField (ATIB, 0x04, FLAG)
                    CreateWordField (ATIB, 0x08, BUSN)
                    CreateWordField (ATIB, 0x0A, DEVN)
                    Acquire (^^LPC0.PSMX, 0xFFFF)
                    BCMD = 0x8D
                    DID = 0x0F
                    INFO = ATIB /* \_SB_.PCI0.VGA_.ATIB */
                    BSMI (Zero)
                    ATIB = INFO /* \INFO */
                    Release (^^LPC0.PSMX)
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Scope (\_SB.PCI0.VGA)
                {
                    OperationRegion (REVD, SystemMemory, 0xBFBBCE18, 0x00000008)
                    Field (REVD, AnyAcc, NoLock, Preserve)
                    {
                        SROM,   32, 
                        VROM,   32
                    }

                    Name (TVGA, Buffer (0x0004)
                    {
                         0x00                                             /* . */
                    })
                    Method (XTRM, 2, Serialized)
                    {
                        Local0 = (Arg0 + Arg1)
                        If ((Local0 <= SROM))
                        {
                            Local1 = (Arg1 * 0x08)
                            Local2 = (Arg0 * 0x08)
                            TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                            CreateField (TVGA, Local2, Local1, TEMP)
                            Name (RETB, Buffer (Arg1) {})
                            RETB = TEMP /* \_SB_.PCI0.VGA_.XTRM.TEMP */
                            Return (RETB) /* \_SB_.PCI0.VGA_.XTRM.RETB */
                        }
                        Else
                        {
                            If ((Arg0 < SROM))
                            {
                                Local3 = (SROM - Arg0)
                                Local1 = (Local3 * 0x08)
                                Local2 = (Arg0 * 0x08)
                                TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                                CreateField (TVGA, Local2, Local1, TEM)
                                Name (RETC, Buffer (Local3) {})
                                RETC = TEM /* \_SB_.PCI0.VGA_.XTRM.TEM_ */
                                Return (RETC) /* \_SB_.PCI0.VGA_.XTRM.RETC */
                            }
                            Else
                            {
                                Name (RETD, Buffer (One) {})
                                Return (RETD) /* \_SB_.PCI0.VGA_.XTRM.RETD */
                            }
                        }
                    }
                }

                Scope (\_SB.PCI0.VGA)
                {
                    Name (ATPB, Buffer (0x0100) {})
                    Name (DSID, Ones)
                    Name (HSID, Ones)
                    Name (CNT0, Buffer (0x05)
                    {
                         0x05, 0x00, 0x00, 0x10, 0x01                     /* ..... */
                    })
                    Name (CNT1, Buffer (0x05)
                    {
                         0x05, 0x01, 0x00, 0x00, 0x01                     /* ..... */
                    })
                    Name (CNT2, Buffer (0x05)
                    {
                         0x07, 0x03, 0x00, 0x10, 0x02                     /* ..... */
                    })
                    Name (CNT3, Buffer (0x05)
                    {
                         0x07, 0x07, 0x00, 0x20, 0x02                     /* ... . */
                    })
                    Name (CNT4, Buffer (0x05)
                    {
                         0x00, 0x09, 0x00, 0x30, 0x02                     /* ...0. */
                    })
                    Name (CNT5, Buffer (0x05)
                    {
                         0x01, 0x00, 0x01, 0x10, 0x01                     /* ..... */
                    })
                    Name (CNT6, Buffer (0x05)
                    {
                         0x01, 0x01, 0x01, 0x00, 0x01                     /* ..... */
                    })
                    Name (CNT7, Buffer (0x05)
                    {
                         0x03, 0x03, 0x01, 0x10, 0x02                     /* ..... */
                    })
                    Name (CNT8, Buffer (0x05)
                    {
                         0x03, 0x07, 0x01, 0x20, 0x02                     /* ... . */
                    })
                    Name (CNT9, Buffer (0x05)
                    {
                         0x00, 0x09, 0x01, 0x30, 0x02                     /* ...0. */
                    })
                    Method (ATPX, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (PX00 ())
                        }

                        If ((Arg0 == One))
                        {
                            Return (PX01 ())
                        }

                        If ((Arg0 == 0x02))
                        {
                            PX02 (DerefOf (Index (Arg1, 0x02)))
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((Arg0 == 0x03))
                        {
                            PX03 (DerefOf (Index (Arg1, 0x02)))
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((Arg0 == 0x04))
                        {
                            PX04 (DerefOf (Index (Arg1, 0x02)))
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((Arg0 == 0x08))
                        {
                            Return (PX08 ())
                        }

                        If ((Arg0 == 0x09))
                        {
                            Return (PX09 ())
                        }

                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, VERN)
                        CreateDWordField (ATPB, 0x04, SFUN)
                        SSZE = Zero
                        VERN = Zero
                        SFUN = Zero
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX00, 0, NotSerialized)
                    {
                        P80H = 0xE0
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, VERN)
                        CreateDWordField (ATPB, 0x04, SFUN)
                        SSZE = 0x08
                        VERN = One
                        If ((PXEN == 0x80000000))
                        {
                            SFUN = Zero
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((PXMX == 0x80000000))
                        {
                            SFUN = 0x018F
                        }
                        Else
                        {
                            SFUN = 0x03
                        }

                        Local0 = ^^PB2.VGA.SVID /* \_SB_.PCI0.PB2_.VGA_.SVID */
                        Local1 = ^^PB2.HDAU.SVID /* \_SB_.PCI0.PB2_.HDAU.SVID */
                        If ((Local0 != Ones))
                        {
                            DSID = Local0
                        }

                        If ((Local1 != Ones))
                        {
                            HSID = Local1
                        }

                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX01, 0, NotSerialized)
                    {
                        P80H = 0xE1
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateDWordField (ATPB, 0x02, VMSK)
                        CreateDWordField (ATPB, 0x06, FLGS)
                        SSZE = 0x0A
                        VMSK = 0x07FF
                        If ((PXMX == 0x80000000))
                        {
                            FLGS = 0x4B
                        }
                        Else
                        {
                            FLGS = Zero
                            If ((PXDY == 0x80000001))
                            {
                                FLGS |= 0x0680
                            }

                            If ((PXDY == 0x80000002))
                            {
                                FLGS |= 0x0280
                            }
                        }

                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX02, 1, NotSerialized)
                    {
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateByteField (ATPB, 0x02, PWST)
                        SSZE = 0x03
                        Local7 = Buffer (0x05) {}
                        CreateWordField (Local7, Zero, SZZE)
                        CreateField (Local7, 0x10, 0x03, FUCC)
                        CreateField (Local7, 0x13, 0x05, DEVV)
                        CreateByteField (Local7, 0x03, BUSS)
                        CreateByteField (Local7, 0x04, HPST)
                        SZZE = 0x05
                        BUSS = Zero
                        FUCC = Zero
                        Local6 = Buffer (0x04) {}
                        CreateByteField (Local6, 0x02, HPOX)
                        PWST = (Arg0 & One)
                        Name (HPOK, Zero)
                        If (PWST)
                        {
                            P80H = 0x11E2
                            ^^PB2.PDC8 = Zero
                            ^^PB2.PDS8 = Zero
                            ^^PB2.HPC8 = Zero
                            ^^SMBS.O191 = Zero
                            ^^SMBS.E191 = Zero
                            ^^SMBS.O192 = Zero
                            ^^SMBS.E192 = Zero
                            Sleep (0x0A)
                            ^^SMBS.O192 = One
                            ^^SMBS.E192 = Zero
                            Sleep (0x0A)
                            Sleep (0x0A)
                            ^^SMBS.MX51 = 0x02
                            While ((^^SMBS.I051 == Zero)) {}
                            Sleep (0x64)
                            ^^SMBS.O191 = One
                            ^^SMBS.E191 = Zero
                            P80H = 0x12E2
                            HPOK = Zero
                            Sleep (0x64)
                            Sleep (0x64)
                            If ((PXID == ^^PB2._ADR))
                            {
                                DEVV = 0x02
                            }
                            Else
                            {
                                DEVV = 0x03
                            }

                            HPST = One
                            Local6 = ALIB (0x06, Local7)
                            Sleep (0x14)
                            Local2 = Zero
                            While ((Local2 < 0x0F))
                            {
                                ^^PB2.PDC2 = One
                                Local4 = One
                                Local5 = 0xC8
                                While ((Local4 && Local5))
                                {
                                    Local0 = ^^PB2.XPRD (0xA5)
                                    Local0 &= 0x7F
                                    If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                                    {
                                        Local4 = Zero
                                    }
                                    Else
                                    {
                                        Sleep (0x05)
                                        Local5--
                                    }
                                }

                                If (!Local4)
                                {
                                    Local5 = ^^PB2.XPDL ()
                                    If (Local5)
                                    {
                                        ^^PB2.XPRT ()
                                        Sleep (0x05)
                                        Local2++
                                    }
                                    Else
                                    {
                                        Local0 = Zero
                                        If ((^^PB2.XPR2 () == Ones))
                                        {
                                            Local0 = One
                                        }

                                        If (Local0)
                                        {
                                            HPOK = One
                                            Local2 = 0x10
                                        }
                                        Else
                                        {
                                            HPOK = Zero
                                            Local2 = 0x10
                                        }
                                    }
                                }
                                Else
                                {
                                    Local2 = 0x10
                                }
                            }

                            If (!HPOK)
                            {
                                P80H = 0x13E2
                                Local1 = ^^PB2.VGA.DVID /* \_SB_.PCI0.PB2_.VGA_.DVID */
                                Sleep (0x0A)
                                Local4 = One
                                Local5 = 0x05
                                While ((Local4 && Local5))
                                {
                                    Local0 = ^^PB2.XPRD (0xA5)
                                    Local0 &= 0x7F
                                    If ((Local0 <= 0x04))
                                    {
                                        Local4 = Zero
                                    }
                                    Else
                                    {
                                        Local1 = ^^PB2.VGA.DVID /* \_SB_.PCI0.PB2_.VGA_.DVID */
                                        Sleep (0x05)
                                        Local5--
                                    }
                                }

                                DEVV = 0x02
                                HPST = Zero
                                ALIB (0x06, Local7)
                            }

                            P80H = 0x14E2
                        }
                        Else
                        {
                            P80H = 0x02E2
                            MUXF = 0x10
                            ^^SMBS.O191 = Zero
                            ^^SMBS.E191 = Zero
                            Sleep (0x0A)
                            ^^SMBS.O192 = Zero
                            ^^SMBS.E192 = Zero
                            P80H = 0x03E2
                            ^^PB2.PDC2 = One
                            Local1 = ^^PB2.VGA.DVID /* \_SB_.PCI0.PB2_.VGA_.DVID */
                            Sleep (0x0A)
                            Local4 = One
                            Local5 = 0x05
                            While ((Local4 && Local5))
                            {
                                Local0 = ^^PB2.XPRD (0xA5)
                                Local0 &= 0x7F
                                If ((Local0 <= 0x04))
                                {
                                    Local4 = Zero
                                }
                                Else
                                {
                                    Local1 = ^^PB2.VGA.DVID /* \_SB_.PCI0.PB2_.VGA_.DVID */
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            DEVV = 0x02
                            HPST = Zero
                            ALIB (0x06, Local7)
                            HPOK = 0x02
                            P80H = 0x04E2
                        }

                        If (HPOK)
                        {
                            If (((HPOK == One) && (DSID != Ones)))
                            {
                                Local1 = DSID /* \_SB_.PCI0.VGA_.DSID */
                                ^^PB2.VGA.SMID = Local1
                                Sleep (0x0A)
                                Local1 = HSID /* \_SB_.PCI0.VGA_.HSID */
                                If ((Local1 != Ones))
                                {
                                    ^^PB2.HDAU.SMID = Local1
                                }

                                Sleep (0x0A)
                            }
                        }
                    }

                    Method (PX03, 1, NotSerialized)
                    {
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, DPSW)
                        SSZE = 0x04
                        DPSW = (Arg0 & One)
                    }

                    Method (PX04, 1, NotSerialized)
                    {
                        P80H = 0xE4
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, ICSW)
                        SSZE = 0x04
                        ICSW = (Arg0 & One)
                    }

                    Method (PX08, 0, NotSerialized)
                    {
                        P80H = 0xE8
                        CreateWordField (ATPB, Zero, CNUM)
                        CreateWordField (ATPB, 0x02, CSSZ)
                        CNUM = 0x0A
                        CSSZ = 0x05
                        CreateField (ATPB, 0x20, 0x28, CTI0)
                        CTI0 = CNT0 /* \_SB_.PCI0.VGA_.CNT0 */
                        CreateField (ATPB, 0x48, 0x28, CTI1)
                        CTI1 = CNT1 /* \_SB_.PCI0.VGA_.CNT1 */
                        CreateField (ATPB, 0x70, 0x28, CTI2)
                        CreateByteField (CNT2, Zero, FLG2)
                        If ((LPTY == One))
                        {
                            If ((M92D == One))
                            {
                                FLG2 = Zero
                            }

                            If ((M92D == 0x02))
                            {
                                FLG2 = 0x07
                            }
                        }

                        CTI2 = CNT2 /* \_SB_.PCI0.VGA_.CNT2 */
                        CreateField (ATPB, 0x98, 0x28, CTI3)
                        CreateByteField (CNT3, Zero, FLG3)
                        If ((LPTY == Zero))
                        {
                            FLG3 = 0x07
                        }

                        If ((LPTY == One))
                        {
                            FLG3 = Zero
                        }

                        If ((LPTY == 0x02))
                        {
                            FLG3 = Zero
                        }

                        If ((M92D == 0x02))
                        {
                            FLG3 = 0x07
                        }

                        CTI3 = CNT3 /* \_SB_.PCI0.VGA_.CNT3 */
                        CreateField (ATPB, 0xC0, 0x28, CTI4)
                        CTI4 = CNT4 /* \_SB_.PCI0.VGA_.CNT4 */
                        CreateField (ATPB, 0xE8, 0x28, CTI5)
                        CTI5 = CNT5 /* \_SB_.PCI0.VGA_.CNT5 */
                        CreateField (ATPB, 0x0110, 0x28, CTI6)
                        CTI6 = CNT6 /* \_SB_.PCI0.VGA_.CNT6 */
                        CreateField (ATPB, 0x0138, 0x28, CTI7)
                        CreateByteField (CNT7, Zero, FLG7)
                        If ((LPTY == One))
                        {
                            If ((M92D == One))
                            {
                                FLG7 = Zero
                            }

                            If ((M92D == 0x02))
                            {
                                FLG7 = Zero
                            }
                        }

                        CTI7 = CNT7 /* \_SB_.PCI0.VGA_.CNT7 */
                        CreateField (ATPB, 0x0160, 0x28, CTI8)
                        CreateByteField (CNT8, Zero, FLG8)
                        If ((LPTY == Zero))
                        {
                            FLG8 = 0x07
                        }

                        If ((LPTY == One))
                        {
                            FLG8 = Zero
                        }

                        If ((LPTY == 0x02))
                        {
                            FLG8 = Zero
                        }

                        If ((M92D == 0x02))
                        {
                            FLG8 = 0x07
                        }

                        CTI8 = CNT8 /* \_SB_.PCI0.VGA_.CNT8 */
                        CreateField (ATPB, 0x0188, 0x28, CTI9)
                        CreateByteField (CNT9, Zero, FLG9)
                        If ((M92D == 0x02))
                        {
                            FLG9 = 0x07
                        }

                        CTI9 = CNT9 /* \_SB_.PCI0.VGA_.CNT9 */
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX09, 0, NotSerialized)
                    {
                        P80H = 0xE9
                        CreateWordField (ATPB, Zero, CNUM)
                        CreateWordField (ATPB, 0x02, CSSZ)
                        CNUM = Zero
                        CSSZ = Zero
                        CreateByteField (ATPB, 0x04, ATI0)
                        CreateByteField (ATPB, 0x05, HPD0)
                        CreateByteField (ATPB, 0x06, DDC0)
                        ATI0 = Zero
                        HPD0 = Zero
                        DDC0 = Zero
                        CreateByteField (ATPB, 0x07, ATI1)
                        CreateByteField (ATPB, 0x08, HPD1)
                        CreateByteField (ATPB, 0x09, DDC1)
                        ATI1 = Zero
                        HPD1 = Zero
                        DDC1 = Zero
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }
                }

                Name (AT00, Buffer (0xFF) {})
                Name (AT01, Buffer (0x03) {})
                Method (ATCS, 2, Serialized)
                {
                    If ((Arg0 == Zero))
                    {
                        ATC0 ()
                    }

                    If ((Arg0 == One))
                    {
                        ATC1 ()
                    }

                    If ((Arg0 == 0x02))
                    {
                        ATC2 (Arg1)
                    }

                    If ((Arg0 == 0x03))
                    {
                        ATC3 ()
                    }

                    If ((Arg0 == 0x04))
                    {
                        ATC4 (Arg1)
                    }

                    Return (AT00) /* \_SB_.PCI0.VGA_.AT00 */
                }

                Method (ATC0, 0, NotSerialized)
                {
                    CreateWordField (AT00, Zero, SZZE)
                    CreateWordField (AT00, 0x02, INTF)
                    CreateDWordField (AT00, 0x04, SUPP)
                    SZZE = 0x08
                    INTF = One
                    SUPP = 0x0F
                }

                Method (ATC1, 0, Serialized)
                {
                    CreateWordField (AT00, Zero, SZZE)
                    CreateDWordField (AT00, 0x02, VFMK)
                    CreateDWordField (AT00, 0x06, FLAG)
                    CreateField (AT00, 0x30, One, DOCK)
                    SZZE = 0x0A
                    VFMK = One
                    FLAG = Zero
                    DOCK = One
                }

                Method (ATC2, 1, Serialized)
                {
                    CreateField (Arg0, 0x10, 0x03, FUCC)
                    CreateField (Arg0, 0x13, 0x06, DEVV)
                    CreateByteField (Arg0, 0x03, BUSS)
                    CreateDWordField (Arg0, 0x04, VFMK)
                    CreateDWordField (Arg0, 0x06, FLAG)
                    CreateField (Arg0, 0x30, One, ADVC)
                    CreateField (Arg0, 0x31, One, WFCM)
                    CreateByteField (Arg0, 0x08, RQST)
                    CreateByteField (Arg0, 0x09, PFRQ)
                    CreateWordField (AT00, Zero, SZZE)
                    CreateByteField (AT00, 0x02, RETV)
                    SZZE = 0x03
                    RETV = One
                    AT00 = ALIB (0x02, Arg0)
                }

                Method (ATC3, 0, Serialized)
                {
                    CreateWordField (AT00, Zero, SZZE)
                    CreateByteField (AT00, 0x02, RETV)
                    CreateWordField (AT01, Zero, SZZB)
                    CreateByteField (AT01, 0x02, PSPP)
                    SZZE = 0x03
                    RETV = One
                    SZZB = 0x03
                    PSPP = One
                    AT00 = ALIB (0x03, AT01)
                }

                Method (ATC4, 1, Serialized)
                {
                    CreateField (Arg0, 0x10, 0x03, FUCC)
                    CreateField (Arg0, 0x13, 0x06, DEVV)
                    CreateByteField (Arg0, 0x03, BUSS)
                    CreateByteField (Arg0, 0x04, NULN)
                    CreateWordField (AT00, Zero, SZZE)
                    CreateByteField (AT00, 0x02, NULM)
                    SZZE = 0x03
                    NULM = One
                    AT00 = ALIB (0x04, Arg0)
                }
            }

            Device (PB2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Name (PR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.PCI0.PB2_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PCI0.PB2_.PR02 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF8010100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x18), 
                        ,   3, 
                    PDC8,   1, 
                        ,   2, 
                    PDS8,   1, 
                    Offset (0x19), 
                    HPC8,   1, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB2_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB2_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB2_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB2_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Name (DODL, Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                        Return (DODL) /* \_SB_.PCI0.PB2_.VGA_._DOD.DODL */
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BRLV, Package (0x11)
                        {
                            0x52, 
                            0x22, 
                            0x02, 
                            0x08, 
                            0x0E, 
                            0x16, 
                            0x1C, 
                            0x22, 
                            0x2A, 
                            0x30, 
                            0x36, 
                            0x3E, 
                            0x44, 
                            0x4B, 
                            0x52, 
                            0x58, 
                            0x64
                        })
                        Name (PBCL, Package (0x02)
                        {
                            Package (0x0B)
                            {
                                0x07, 
                                0x09, 
                                0x0D, 
                                0x12, 
                                0x18, 
                                0x24, 
                                0x2D, 
                                0x37, 
                                0x40, 
                                0x49, 
                                0x64
                            }, 

                            Package (0x0B)
                            {
                                0x08, 
                                0x0B, 
                                0x0F, 
                                0x15, 
                                0x1E, 
                                0x27, 
                                0x33, 
                                0x3E, 
                                0x49, 
                                0x54, 
                                0x64
                            }
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (Package (0x0D)
                            {
                                0x64, 
                                0x32, 
                                Zero, 
                                0x0A, 
                                0x14, 
                                0x1E, 
                                0x28, 
                                0x32, 
                                0x3C, 
                                0x46, 
                                0x50, 
                                0x5A, 
                                0x64
                            })
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Divide (Arg0, 0x0A, Local0, Local1)
                            BCMV = Arg0
                            BRLS = Zero
                            Local2 = Package (0x0B)
                                {
                                    0x06, 
                                    0x0A, 
                                    0x14, 
                                    0x1E, 
                                    0x28, 
                                    0x32, 
                                    0x3C, 
                                    0x46, 
                                    0x50, 
                                    0x5A, 
                                    0x64
                                }
                            If ((IDPC == 0x32EC))
                            {
                                Local2 = DerefOf (Index (PBCL, Zero))
                            }
                            Else
                            {
                                If ((IDPC == 0x15B6))
                                {
                                    Local2 = DerefOf (Index (PBCL, One))
                                }
                            }

                            Local0 = DerefOf (Index (Local2, Local1))
                            If ((^^^^VGA.AF7E == 0x80000001))
                            {
                                Divide ((Local0 * 0xFF), 0x64, Local1, Local2)
                                ^^^^AFN7 (Local2)
                            }
                            Else
                            {
                                Acquire (^^^^LPC0.PSMX, 0xFFFF)
                                BRTL = Local0
                                BCMD = 0x72
                                BSMI (Zero)
                                Release (^^^^LPC0.PSMX)
                            }
                        }

                        Method (BRAJ, 0, NotSerialized)
                        {
                            If (^^^^LPC0.EC0.BRUP)
                            {
                                If ((BCMV < 0x64))
                                {
                                    Local0 = (BCMV + 0x0A)
                                    _BCM (Local0)
                                }
                            }

                            If (^^^^LPC0.EC0.BRDN)
                            {
                                If ((BCMV > Zero))
                                {
                                    Local0 = (BCMV - 0x0A)
                                    _BCM (Local0)
                                }
                            }

                            BRLS = One
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Name (ATIB, Buffer (0x0100) {})
                    Method (ATIF, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (AF00 ())
                        }

                        If ((Arg0 == One))
                        {
                            Return (AF01 ())
                        }

                        If ((Arg0 == 0x02))
                        {
                            Return (AF02 ())
                        }

                        If ((Arg0 == 0x03))
                        {
                            Return (AF03 (DerefOf (Index (Arg1, 0x02)), DerefOf (Index (Arg1, 0x04))))
                        }

                        If ((Arg0 == 0x0F))
                        {
                            Return (AF15 ())
                        }
                        Else
                        {
                            CreateWordField (ATIB, Zero, SSZE)
                            CreateWordField (ATIB, 0x02, VERN)
                            CreateDWordField (ATIB, 0x04, NMSK)
                            CreateDWordField (ATIB, 0x08, SFUN)
                            SSZE = Zero
                            VERN = Zero
                            NMSK = Zero
                            SFUN = Zero
                            Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                        }
                    }

                    Method (AF00, 0, NotSerialized)
                    {
                        ^^^VGA.AZPS &= 0xC0000001
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = 0x0C
                        VERN = One
                        If ((^^^VGA.PXEN == 0x80000000))
                        {
                            NMSK = 0x11
                        }
                        Else
                        {
                            NMSK = 0x51
                        }

                        If ((^^^VGA.AF7E == 0x80000001))
                        {
                            NMSK |= 0x80
                        }

                        MSKN = NMSK /* \_SB_.PCI0.PB2_.VGA_.AF00.NMSK */
                        SFUN = 0x4007
                        Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                    }

                    Method (AF01, 0, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateDWordField (ATIB, 0x02, VMSK)
                        CreateDWordField (ATIB, 0x06, FLGS)
                        SSZE = 0x0A
                        VMSK = 0x03
                        FLGS = One
                        Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                    }

                    Name (PSBR, Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           /* .... */
                    })
                    Name (MSKN, Zero)
                    Name (SEXM, Zero)
                    Name (STHG, Zero)
                    Name (STHI, Zero)
                    Name (SFPG, Zero)
                    Name (SFPI, Zero)
                    Name (SSPS, Zero)
                    Name (SSDM, 0x0A)
                    Name (SCDY, Zero)
                    Name (SACT, Buffer (0x07)
                    {
                         0x01, 0x02, 0x08, 0x80, 0x03, 0x09, 0x81         /* ....... */
                    })
                    Method (AF02, 0, NotSerialized)
                    {
                        CreateBitField (PSBR, Zero, PDSW)
                        CreateBitField (PSBR, One, PEXM)
                        CreateBitField (PSBR, 0x02, PTHR)
                        CreateBitField (PSBR, 0x03, PFPS)
                        CreateBitField (PSBR, 0x04, PSPS)
                        CreateBitField (PSBR, 0x05, PDCC)
                        CreateBitField (PSBR, 0x06, PXPS)
                        CreateBitField (PSBR, 0x07, PBRT)
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateDWordField (ATIB, 0x02, PSBI)
                        CreateByteField (ATIB, 0x06, EXPM)
                        CreateByteField (ATIB, 0x07, THRM)
                        CreateByteField (ATIB, 0x08, THID)
                        CreateByteField (ATIB, 0x09, FPWR)
                        CreateByteField (ATIB, 0x0A, FPID)
                        CreateByteField (ATIB, 0x0B, SPWR)
                        CreateByteField (ATIB, 0x0C, BRTL)
                        SSZE = 0x0D
                        PSBI = PSBR /* \_SB_.PCI0.PB2_.VGA_.PSBR */
                        If (PDSW)
                        {
                            PDSW = Zero
                        }

                        If (PEXM)
                        {
                            EXPM = SEXM /* \_SB_.PCI0.PB2_.VGA_.SEXM */
                            SEXM = Zero
                            PEXM = Zero
                        }

                        If (PTHR)
                        {
                            THRM = STHG /* \_SB_.PCI0.PB2_.VGA_.STHG */
                            THID = STHI /* \_SB_.PCI0.PB2_.VGA_.STHI */
                            STHG = Zero
                            STHI = Zero
                            PTHR = Zero
                        }

                        If (PFPS)
                        {
                            FPWR = SFPG /* \_SB_.PCI0.PB2_.VGA_.SFPG */
                            FPWR = SFPI /* \_SB_.PCI0.PB2_.VGA_.SFPI */
                            SFPG = Zero
                            SFPI = Zero
                            PFPS = Zero
                        }

                        If (PSPS)
                        {
                            SPWR = SSPS /* \_SB_.PCI0.PB2_.VGA_.SSPS */
                            PSPS = Zero
                        }

                        If (PXPS)
                        {
                            PXPS = Zero
                        }

                        If (PBRT)
                        {
                            P80H = 0xF7
                            PBRT = Zero
                        }

                        Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                    }

                    Method (AF03, 2, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, SSDP)
                        CreateWordField (ATIB, 0x04, SCDP)
                        SSDP = Arg0
                        SCDP = Arg1
                        Name (NXTD, 0x06)
                        Name (CIDX, 0x06)
                        Local1 = SSDP /* \_SB_.PCI0.PB2_.VGA_.AF03.SSDP */
                        Local1 &= 0x8B
                        Local2 = SCDP /* \_SB_.PCI0.PB2_.VGA_.AF03.SCDP */
                        If (CondRefOf (\_SB.LID._LID, Local4))
                        {
                            Local2 &= 0xFFFFFFFE
                            Local2 |= ^^^^LID._LID ()
                        }
                        Else
                        {
                            Local2 |= One
                        }

                        P80H = Local2
                        Local0 = Zero
                        While ((Local0 < SizeOf (SACT)))
                        {
                            Local3 = DerefOf (Index (SACT, Local0))
                            If ((Local3 == Local1))
                            {
                                CIDX = Local0
                                Local0 = SizeOf (SACT)
                            }
                            Else
                            {
                                Local0++
                            }
                        }

                        Local0 = CIDX /* \_SB_.PCI0.PB2_.VGA_.AF03.CIDX */
                        While ((Local0 < SizeOf (SACT)))
                        {
                            Local0++
                            If ((Local0 == SizeOf (SACT)))
                            {
                                Local0 = Zero
                            }

                            Local3 = DerefOf (Index (SACT, Local0))
                            If (((Local3 & Local2) == Local3))
                            {
                                NXTD = Local0
                                Local0 = SizeOf (SACT)
                            }
                        }

                        If ((NXTD == SizeOf (SACT)))
                        {
                            SSDP = Zero
                        }
                        Else
                        {
                            Local0 = NXTD /* \_SB_.PCI0.PB2_.VGA_.AF03.NXTD */
                            Local3 = DerefOf (Index (SACT, Local0))
                            SSDP &= 0xFFFFFFF4
                            SSDP |= Local3
                        }

                        SSZE = 0x04
                        P80H = SSDP /* \_SB_.PCI0.PB2_.VGA_.AF03.SSDP */
                        Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                    }

                    Method (AFN0, 0, Serialized)
                    {
                        If ((MSKN & One))
                        {
                            CreateBitField (PSBR, Zero, PDSW)
                            PDSW = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AFN3, 2, Serialized)
                    {
                        If ((MSKN & 0x08))
                        {
                            Local0 = Arg0
                            SFPI = Local0
                            Local0 = Arg1
                            SFPG = Local0 &= 0x03
                            CreateBitField (PSBR, 0x03, PFPS)
                            PFPS = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AFN4, 1, Serialized)
                    {
                        If ((MSKN & 0x10))
                        {
                            Local0 = Arg0
                            Local1 = SSPS /* \_SB_.PCI0.PB2_.VGA_.SSPS */
                            SSPS = Local0
                            If ((Local0 == Local1)) {}
                            Else
                            {
                                CreateBitField (PSBR, 0x04, PSPS)
                                PSPS = One
                                Notify (VGA, 0x81) // Information Change
                            }
                        }
                    }

                    Method (AFN5, 0, Serialized)
                    {
                        If ((MSKN & 0x20))
                        {
                            CreateBitField (PSBR, 0x05, PDCC)
                            PDCC = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AFN6, 0, Serialized)
                    {
                        If ((MSKN & 0x40))
                        {
                            CreateBitField (PSBR, 0x06, PXPS)
                            PXPS = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AFN7, 1, Serialized)
                    {
                        If ((MSKN & 0x80))
                        {
                            CreateBitField (PSBR, 0x07, PBRT)
                            PBRT = One
                            CreateByteField (ATIB, 0x0C, BRTL)
                            BRTL = Arg0
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AF15, 0, NotSerialized)
                    {
                        P80H = 0xFF
                        CreateWordField (ATIB, Zero, DNUM)
                        CreateWordField (ATIB, 0x02, DSZE)
                        CreateDWordField (ATIB, 0x04, FLAG)
                        CreateWordField (ATIB, 0x08, BUSN)
                        CreateWordField (ATIB, 0x0A, DEVN)
                        Acquire (^^^LPC0.PSMX, 0xFFFF)
                        BCMD = 0x8D
                        DID = 0x0F
                        INFO = ATIB /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                        BSMI (Zero)
                        ATIB = INFO /* \INFO */
                        Release (^^^LPC0.PSMX)
                        Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                    }

                    Name (AT00, Buffer (0xFF) {})
                    Name (AT01, Buffer (0x03) {})
                    Method (ATCS, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            ATC0 ()
                        }

                        If ((Arg0 == One))
                        {
                            ATC1 ()
                        }

                        If ((Arg0 == 0x02))
                        {
                            ATC2 (Arg1)
                        }

                        If ((Arg0 == 0x03))
                        {
                            ATC3 ()
                        }

                        If ((Arg0 == 0x04))
                        {
                            ATC4 (Arg1)
                        }

                        Return (AT00) /* \_SB_.PCI0.PB2_.VGA_.AT00 */
                    }

                    Method (ATC0, 0, NotSerialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateWordField (AT00, 0x02, INTF)
                        CreateDWordField (AT00, 0x04, SUPP)
                        SZZE = 0x08
                        INTF = One
                        SUPP = 0x0F
                    }

                    Method (ATC1, 0, Serialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateDWordField (AT00, 0x02, VFMK)
                        CreateDWordField (AT00, 0x06, FLAG)
                        CreateField (AT00, 0x30, One, DOCK)
                        SZZE = 0x0A
                        VFMK = One
                        FLAG = Zero
                        DOCK = One
                    }

                    Method (ATC2, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateDWordField (Arg0, 0x04, VFMK)
                        CreateDWordField (Arg0, 0x06, FLAG)
                        CreateField (Arg0, 0x30, One, ADVC)
                        CreateField (Arg0, 0x31, One, WFCM)
                        CreateByteField (Arg0, 0x08, RQST)
                        CreateByteField (Arg0, 0x09, PFRQ)
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, RETV)
                        SZZE = 0x03
                        RETV = One
                        AT00 = ALIB (0x02, Arg0)
                    }

                    Method (ATC3, 0, Serialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, RETV)
                        CreateWordField (AT01, Zero, SZZB)
                        CreateByteField (AT01, 0x02, PSPP)
                        SZZE = 0x03
                        RETV = One
                        SZZB = 0x03
                        PSPP = One
                        AT00 = ALIB (0x03, AT01)
                    }

                    Method (ATC4, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateByteField (Arg0, 0x04, NULN)
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, NULM)
                        SZZE = 0x03
                        NULM = One
                        AT00 = ALIB (0x04, Arg0)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }
                }
            }

            Device (PB4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x05))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If ((WKPM && Arg0))
                    {
                        ^^LPC0.EC0.LWAK = One
                    }
                    Else
                    {
                        ^^LPC0.EC0.LWAK = Zero
                    }
                }

                Name (PR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.PCI0.PB4_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PCI0.PB4_.PR04 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF8020100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x18), 
                        ,   3, 
                    PDC8,   1, 
                        ,   2, 
                    PDS8,   1, 
                    Offset (0x19), 
                    HPC8,   1, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB4_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB4_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB4_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB4_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (PB5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x05))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKA, 
                        Zero
                    }
                })
                Name (AR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x10
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.PCI0.PB5_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PCI0.PB5_.PR05 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF8028100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x18), 
                        ,   3, 
                    PDC8,   1, 
                        ,   2, 
                    PDS8,   1, 
                    Offset (0x19), 
                    HPC8,   1, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB5_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB5_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB5_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB5_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((HPAD & 0x03) == 0x03))
                    {
                        If ((OSTB >= 0x40))
                        {
                            Return (0x0F)
                        }

                        HPAD = (HPAD & 0xFFFFFFE0)
                        Return (One)
                    }

                    Return (One)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y04)
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y04._BAS, HPEB)  // _BAS: Base Address
                    Local0 = HPAD /* \HPAD */
                    HPEB = (Local0 & 0xFFFFFC00)
                    Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
                }
            }

            Device (AZAL)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, Zero, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }
            }

            Device (OHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                OperationRegion (O1CS, PCI_Config, Zero, 0xC8)
                Field (O1CS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    OBAR,   32, 
                    Offset (0xC4), 
                    O1EN,   2
                }

                OperationRegion (O1BA, SystemMemory, OBAR, 0x55)
                Field (O1BA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x54), 
                    P0CS,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        O1EN = 0x03
                    }
                    Else
                    {
                        O1EN = Zero
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (OHC2)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                OperationRegion (O2CS, PCI_Config, 0xC4, 0x04)
                Field (O2CS, DWordAcc, NoLock, Preserve)
                {
                    O2EN,   2
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        O2EN = 0x03
                    }
                    Else
                    {
                        O2EN = Zero
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                OperationRegion (PCFG, PCI_Config, 0x10, 0xEF)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    EBAR,   32, 
                    Offset (0x44), 
                        ,   4, 
                    LSCW,   1, 
                    Offset (0x90), 
                    OSOW,   32
                }

                OperationRegion (E1BA, SystemMemory, EBAR, 0x65)
                Field (E1BA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x64), 
                    P0CS,   1
                }

                Method (STOS, 0, NotSerialized)
                {
                    OSOW |= 0x01000000
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        LSCW = One
                    }
                    Else
                    {
                        LSCW = Zero
                    }
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                OperationRegion (PCFG, PCI_Config, 0x10, 0xEF)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x44), 
                        ,   4, 
                    LSCW,   1, 
                    Offset (0x90), 
                    OSOW,   32
                }

                Method (STOS, 0, NotSerialized)
                {
                    OSOW |= 0x01000000
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        LSCW = One
                    }
                    Else
                    {
                        LSCW = Zero
                    }
                }
            }

            Device (XHC0)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                OperationRegion (XHC0, PCI_Config, 0x10, 0x04)
                Field (XHC0, DWordAcc, NoLock, Preserve)
                {
                    XBAR,   32
                }

                OperationRegion (X0BA, SystemMemory, XBAR, 0x24)
                Field (X0BA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x21), 
                    X0SP,   8
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        ^^LPC0.EC0.UWAK = One
                    }
                    Else
                    {
                        ^^LPC0.EC0.UWAK = Zero
                    }
                }
            }

            Device (XHC1)
            {
                Name (_ADR, 0x00100001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Name (X1PW, Zero)
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        X1PW = One
                    }
                    Else
                    {
                        X1PW = Zero
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (IRQF, PCI_Config, Zero, 0x0100)
                Field (IRQF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    RVID,   8
                }

                OperationRegion (ERMM, SystemMemory, MMSO, 0x1000)
                Field (ERMM, AnyAcc, NoLock, Preserve)
                {
                    Offset (0xFF), 
                        ,   5, 
                    E000,   1, 
                    O000,   1, 
                    I000,   1, 
                        ,   5, 
                    E001,   1, 
                    O001,   1, 
                    I001,   1, 
                    Offset (0x105), 
                        ,   5, 
                    E006,   1, 
                    O006,   1, 
                    I006,   1, 
                        ,   5, 
                    E007,   1, 
                    O007,   1, 
                    I007,   1, 
                    Offset (0x10A), 
                        ,   5, 
                    E011,   1, 
                    O011,   1, 
                    I011,   1, 
                        ,   5, 
                    E012,   1, 
                    O012,   1, 
                    I012,   1, 
                        ,   5, 
                    E013,   1, 
                    O013,   1, 
                    I013,   1, 
                        ,   5, 
                    E014,   1, 
                    O014,   1, 
                    I014,   1, 
                        ,   5, 
                    E015,   1, 
                    O015,   1, 
                    I015,   1, 
                        ,   5, 
                    E016,   1, 
                    O016,   1, 
                    I016,   1, 
                    Offset (0x113), 
                        ,   5, 
                    E020,   1, 
                    O020,   1, 
                    I020,   1, 
                        ,   5, 
                    E021,   1, 
                    O021,   1, 
                    I021,   1, 
                        ,   5, 
                    E022,   1, 
                    O022,   1, 
                    I022,   1, 
                        ,   5, 
                    E023,   1, 
                    O023,   1, 
                    I023,   1, 
                        ,   5, 
                    E024,   1, 
                    O024,   1, 
                    I024,   1, 
                        ,   5, 
                    E025,   1, 
                    O025,   1, 
                    I025,   1, 
                    Offset (0x11A), 
                        ,   5, 
                    E027,   1, 
                    O027,   1, 
                    I027,   1, 
                        ,   5, 
                    E028,   1, 
                    O028,   1, 
                    I028,   1, 
                        ,   5, 
                    E029,   1, 
                    O029,   1, 
                    I029,   1, 
                    Offset (0x11F), 
                        ,   5, 
                    E032,   1, 
                    O032,   1, 
                    I032,   1, 
                    Offset (0x122), 
                        ,   5, 
                    E035,   1, 
                    O035,   1, 
                    I035,   1, 
                    Offset (0x128), 
                        ,   1, 
                    H041,   1, 
                    S041,   1, 
                    U041,   1, 
                    D041,   1, 
                    E041,   1, 
                    O041,   1, 
                    I041,   1, 
                    Offset (0x12B), 
                        ,   5, 
                    E044,   1, 
                    O044,   1, 
                    I044,   1, 
                        ,   5, 
                    E045,   1, 
                    O045,   1, 
                    I045,   1, 
                        ,   1, 
                    H046,   1, 
                    S046,   1, 
                    U046,   1, 
                    D046,   1, 
                    E046,   1, 
                    O046,   1, 
                    I046,   1, 
                    Offset (0x132), 
                        ,   5, 
                    E051,   1, 
                    O051,   1, 
                    I051,   1, 
                    Offset (0x134), 
                        ,   5, 
                    E053,   1, 
                    O053,   1, 
                    I053,   1, 
                    Offset (0x136), 
                        ,   5, 
                    E055,   1, 
                    O055,   1, 
                    I055,   1, 
                    Offset (0x138), 
                        ,   5, 
                    E057,   1, 
                    O057,   1, 
                    I057,   1, 
                        ,   5, 
                    E058,   1, 
                    O058,   1, 
                    I058,   1, 
                        ,   5, 
                    E059,   1, 
                    O059,   1, 
                    I059,   1, 
                    Offset (0x13C), 
                        ,   1, 
                    H061,   1, 
                    S061,   1, 
                    U061,   1, 
                    D061,   1, 
                    E061,   1, 
                    O061,   1, 
                    I061,   1, 
                        ,   1, 
                    H062,   1, 
                    S062,   1, 
                    U062,   1, 
                    D062,   1, 
                    E062,   1, 
                    O062,   1, 
                    I062,   1, 
                        ,   1, 
                    H063,   1, 
                    S063,   1, 
                    U063,   1, 
                    D063,   1, 
                    E063,   1, 
                    O063,   1, 
                    I063,   1, 
                        ,   1, 
                    H064,   1, 
                    S064,   1, 
                    U064,   1, 
                    D064,   1, 
                    E064,   1, 
                    O064,   1, 
                    I064,   1, 
                    Offset (0x141), 
                        ,   5, 
                    E066,   1, 
                    O066,   1, 
                    I066,   1, 
                    Offset (0x162), 
                        ,   7, 
                    GE03,   1, 
                        ,   7, 
                    GE04,   1, 
                        ,   7, 
                    GE05,   1, 
                        ,   7, 
                    GE06,   1, 
                    Offset (0x16A), 
                        ,   7, 
                    GE09,   1, 
                        ,   7, 
                    GE12,   1, 
                        ,   7, 
                    GE13,   1, 
                        ,   7, 
                    GE14,   1, 
                        ,   7, 
                    GE15,   1, 
                        ,   7, 
                    GE16,   1, 
                    Offset (0x175), 
                        ,   5, 
                    E118,   1, 
                    O118,   1, 
                    GE22,   1, 
                    Offset (0x1A5), 
                        ,   5, 
                    E166,   1, 
                    O166,   1, 
                    I166,   1, 
                    Offset (0x1A9), 
                        ,   5, 
                    E170,   1, 
                    O170,   1, 
                    I170,   1, 
                        ,   5, 
                    E171,   1, 
                    O171,   1, 
                    I171,   1, 
                    Offset (0x1AE), 
                        ,   5, 
                    E175,   1, 
                    O175,   1, 
                    I175,   1, 
                        ,   5, 
                    E176,   1, 
                    O176,   1, 
                    I176,   1, 
                        ,   5, 
                    E177,   1, 
                    O177,   1, 
                    I177,   1, 
                        ,   5, 
                    E178,   1, 
                    O178,   1, 
                    I178,   1, 
                        ,   5, 
                    E179,   1, 
                    O179,   1, 
                    I179,   1, 
                        ,   5, 
                    E180,   1, 
                    O180,   1, 
                    I180,   1, 
                        ,   5, 
                    E181,   1, 
                    O181,   1, 
                    I181,   1, 
                        ,   5, 
                    E182,   1, 
                    O182,   1, 
                    I182,   1, 
                    Offset (0x1B7), 
                        ,   3, 
                    U184,   1, 
                    D184,   1, 
                    E184,   1, 
                    O184,   1, 
                    I184,   1, 
                    Offset (0x1BE), 
                        ,   5, 
                    E191,   1, 
                    O191,   1, 
                    I191,   1, 
                        ,   5, 
                    E192,   1, 
                    O192,   1, 
                    I192,   1, 
                    Offset (0x1C4), 
                        ,   5, 
                    E197,   1, 
                    O197,   1, 
                    I197,   1, 
                    Offset (0x1C6), 
                        ,   5, 
                    E199,   1, 
                    O199,   1, 
                    I199,   1, 
                        ,   5, 
                    E200,   1, 
                    O200,   1, 
                    I200,   1, 
                    Offset (0x1FF), 
                        ,   1, 
                    G01S,   1, 
                        ,   3, 
                    G05S,   1, 
                        ,   8, 
                    G14S,   1, 
                    G15S,   1, 
                    G16S,   1, 
                        ,   5, 
                    G22S,   1, 
                    G23S,   1, 
                    Offset (0x203), 
                        ,   1, 
                    G01E,   1, 
                        ,   3, 
                    G05E,   1, 
                        ,   8, 
                    G14E,   1, 
                    G15E,   1, 
                    G16E,   1, 
                        ,   5, 
                    G22E,   1, 
                    G23E,   1, 
                    Offset (0x207), 
                        ,   1, 
                    G01T,   1, 
                        ,   3, 
                    G05T,   1, 
                    G06T,   1, 
                        ,   6, 
                    G13T,   1, 
                    G14T,   1, 
                    G15T,   1, 
                    G16T,   1, 
                        ,   5, 
                    G22T,   1, 
                    G23T,   1, 
                    Offset (0x20B), 
                        ,   1, 
                    G01L,   1, 
                        ,   3, 
                    G05L,   1, 
                        ,   9, 
                    G15L,   1, 
                    G16L,   1, 
                        ,   5, 
                    G22L,   1, 
                    G23L,   1, 
                    Offset (0x287), 
                        ,   1, 
                    CLPS,   1, 
                    Offset (0x298), 
                        ,   7, 
                    G15A,   1, 
                    Offset (0x2AF), 
                        ,   2, 
                    SLPS,   2, 
                    Offset (0x32B), 
                    SM0E,   1, 
                    Offset (0x32D), 
                        ,   1, 
                    SM0S,   2, 
                    Offset (0x361), 
                        ,   6, 
                    MT3A,   1, 
                    Offset (0x376), 
                    EPNM,   1, 
                    DPPF,   1, 
                    Offset (0x3BA), 
                        ,   6, 
                    PWDE,   1, 
                    Offset (0x3BD), 
                        ,   5, 
                    ALLS,   1, 
                    Offset (0x3C7), 
                        ,   2, 
                    TFTE,   1, 
                    Offset (0x3DE), 
                    BLNK,   2, 
                    Offset (0x3EF), 
                    PHYD,   1, 
                    Offset (0x3FF), 
                    F0CT,   8, 
                    F0MS,   8, 
                    F0FQ,   8, 
                    F0LD,   8, 
                    F0MD,   8, 
                    F0MP,   8, 
                    LT0L,   8, 
                    LT0H,   8, 
                    MT0L,   8, 
                    MT0H,   8, 
                    HT0L,   8, 
                    HT0H,   8, 
                    LRG0,   8, 
                    LHC0,   8, 
                    Offset (0x40F), 
                    F1CT,   8, 
                    F1MS,   8, 
                    F1FQ,   8, 
                    F1LD,   8, 
                    F1MD,   8, 
                    F1MP,   8, 
                    LT1L,   8, 
                    LT1H,   8, 
                    MT1L,   8, 
                    MT1H,   8, 
                    HT1L,   8, 
                    HT1H,   8, 
                    LRG1,   8, 
                    LHC1,   8, 
                    Offset (0x41F), 
                    F2CT,   8, 
                    F2MS,   8, 
                    F2FQ,   8, 
                    F2LD,   8, 
                    F2MD,   8, 
                    F2MP,   8, 
                    LT2L,   8, 
                    LT2H,   8, 
                    MT2L,   8, 
                    MT2H,   8, 
                    HT2L,   8, 
                    HT2H,   8, 
                    LRG2,   8, 
                    LHC2,   8, 
                    Offset (0x42F), 
                    F3CT,   8, 
                    F3MS,   8, 
                    F3FQ,   8, 
                    F3LD,   8, 
                    F3MD,   8, 
                    F3MP,   8, 
                    LT3L,   8, 
                    LT3H,   8, 
                    MT3L,   8, 
                    MT3H,   8, 
                    HT3L,   8, 
                    HT3H,   8, 
                    LRG3,   8, 
                    LHC3,   8, 
                    Offset (0x6FF), 
                    SEC,    8, 
                    Offset (0x701), 
                    MIN,    8, 
                    Offset (0xD06), 
                    MX07,   8, 
                    Offset (0xD0E), 
                    MX15,   8, 
                    MX16,   8, 
                    Offset (0xD14), 
                    MX21,   8, 
                    MX22,   8, 
                    MX23,   8, 
                    Offset (0xD1A), 
                    MX27,   8, 
                    MX28,   8, 
                    Offset (0xD1F), 
                    MX32,   8, 
                    Offset (0xD2B), 
                    MX44,   8, 
                    Offset (0xD32), 
                    MX51,   8, 
                    Offset (0xD34), 
                    MX53,   8, 
                    Offset (0xD38), 
                    MX57,   8, 
                    MX58,   8, 
                    MX59,   8, 
                    Offset (0xD41), 
                    MX66,   8, 
                    Offset (0xD65), 
                    M102,   8, 
                    Offset (0xD6D), 
                    M110,   8, 
                    Offset (0xDA9), 
                    M170,   8, 
                    Offset (0xDAE), 
                    M175,   8, 
                    M176,   8, 
                    M177,   8, 
                    Offset (0xDB3), 
                    M180,   8, 
                    Offset (0xDB5), 
                    M182,   8, 
                    Offset (0xDC4), 
                    M197,   8, 
                    Offset (0xDC7), 
                    M200,   8, 
                    Offset (0xDFF), 
                    MS00,   8, 
                    MS01,   8, 
                    MS02,   8, 
                    MS03,   8, 
                    MS04,   8, 
                    Offset (0xE3F), 
                    MS40,   8, 
                    Offset (0xE80), 
                        ,   2, 
                    ECES,   1
                }

                OperationRegion (ERM1, SystemMemory, MMSO, 0x1000)
                Field (ERM1, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x100), 
                        ,   5, 
                    P01E,   1, 
                    P01O,   1, 
                    P01I,   1, 
                    Offset (0x105), 
                        ,   5, 
                    P06E,   1, 
                    P06O,   1, 
                    P06I,   1, 
                        ,   5, 
                    P07E,   1, 
                    P07O,   1, 
                    P07I,   1, 
                    Offset (0x10A), 
                        ,   5, 
                    P0BE,   1, 
                    P0BO,   1, 
                    P0BI,   1, 
                        ,   5, 
                    P0CE,   1, 
                    P0CO,   1, 
                    P0CI,   1, 
                        ,   5, 
                    P0DE,   1, 
                    P0DO,   1, 
                    P0DI,   1, 
                        ,   5, 
                    P0EE,   1, 
                    P0EO,   1, 
                    P0EI,   1, 
                        ,   5, 
                    P0FE,   1, 
                    P0FO,   1, 
                    P0FI,   1, 
                        ,   5, 
                    P10E,   1, 
                    P10O,   1, 
                    P10I,   1, 
                    Offset (0x113), 
                        ,   5, 
                    P14E,   1, 
                    P14O,   1, 
                    P14I,   1, 
                        ,   5, 
                    P15E,   1, 
                    P15O,   1, 
                    P15I,   1, 
                    Offset (0x11A), 
                        ,   5, 
                    P1BE,   1, 
                    P1BO,   1, 
                    P1BI,   1, 
                    Offset (0x11F), 
                        ,   5, 
                    P20E,   1, 
                    P20O,   1, 
                    P20I,   1, 
                        ,   5, 
                    P21E,   1, 
                    P21O,   1, 
                    P21I,   1, 
                        ,   5, 
                    P22E,   1, 
                    P22O,   1, 
                    P22I,   1, 
                        ,   5, 
                    P23E,   1, 
                    P23O,   1, 
                    P23I,   1, 
                    Offset (0x128), 
                        ,   5, 
                    P29E,   1, 
                    P29O,   1, 
                    P29I,   1, 
                    Offset (0x12B), 
                        ,   5, 
                    P2CE,   1, 
                    P2CO,   1, 
                    P2CI,   1, 
                        ,   5, 
                    P2DE,   1, 
                    P2DO,   1, 
                    P2DI,   1, 
                    PO2E,   8, 
                    Offset (0x132), 
                        ,   5, 
                    P33E,   1, 
                    P33O,   1, 
                    P33I,   1, 
                    Offset (0x134), 
                        ,   5, 
                    P35E,   1, 
                    P35O,   1, 
                    P35I,   1, 
                    Offset (0x136), 
                        ,   5, 
                    P37E,   1, 
                    P37O,   1, 
                    P37I,   1, 
                    Offset (0x138), 
                        ,   5, 
                    P39E,   1, 
                    P39O,   1, 
                    P39I,   1, 
                    Offset (0x13A), 
                        ,   5, 
                    P3BE,   1, 
                    P3BO,   1, 
                    P3BI,   1, 
                    Offset (0x13C), 
                    PO3D,   8, 
                    PO3E,   8, 
                    PO3F,   8, 
                    PO40,   8, 
                    Offset (0x164), 
                        ,   7, 
                    Offset (0x165), 
                        ,   5, 
                    P66E,   1, 
                    P66O,   1, 
                    P66I,   1, 
                    Offset (0x16A), 
                    Offset (0x16B), 
                        ,   5, 
                    P6CE,   1, 
                    P6CO,   1, 
                    P6CI,   1, 
                    Offset (0x16E), 
                        ,   7, 
                    Offset (0x16F), 
                        ,   7, 
                    Offset (0x170), 
                    Offset (0x174), 
                    Offset (0x175), 
                        ,   7, 
                    Offset (0x176), 
                    Offset (0x1A5), 
                    POA6,   8, 
                    Offset (0x1A9), 
                        ,   5, 
                    PAAE,   1, 
                    PAAO,   1, 
                    PAAI,   1, 
                    Offset (0x1AE), 
                        ,   5, 
                    PAFE,   1, 
                    PAFO,   1, 
                    PAFI,   1, 
                        ,   5, 
                    PB0E,   1, 
                    PB0O,   1, 
                    PB0I,   1, 
                        ,   5, 
                    PB1E,   1, 
                    PB1O,   1, 
                    PB1I,   1, 
                        ,   5, 
                    PB2E,   1, 
                    PB2O,   1, 
                    PB2I,   1, 
                        ,   5, 
                    PB3E,   1, 
                    PB3O,   1, 
                    PB3I,   1, 
                        ,   5, 
                    PB4E,   1, 
                    PB4O,   1, 
                    PB4I,   1, 
                        ,   5, 
                    PB5E,   1, 
                    PB5O,   1, 
                    PB5I,   1, 
                        ,   5, 
                    PB6E,   1, 
                    PB6O,   1, 
                    PB6I,   1, 
                    Offset (0x1C6), 
                        ,   5, 
                    PC7E,   1, 
                    PC7O,   1, 
                    PC7I,   1, 
                        ,   5, 
                    PC8E,   1, 
                    PC8O,   1, 
                    PC8I,   1, 
                    Offset (0x207), 
                        ,   1, 
                        ,   1, 
                        ,   3, 
                        ,   1, 
                        ,   9, 
                    Offset (0x209), 
                        ,   1, 
                        ,   5, 
                        ,   1, 
                        ,   3, 
                    E26C,   1, 
                    Offset (0xD00), 
                    MX01,   8, 
                    Offset (0xD1F), 
                    Offset (0xD20), 
                    MX33,   8, 
                    MX34,   8, 
                    Offset (0xD28), 
                    MX41,   8, 
                    Offset (0xDA9), 
                    Offset (0xDB3), 
                    Offset (0xDB4), 
                    M181,   8, 
                    Offset (0xDB6), 
                    Offset (0xDC6), 
                    M199,   8, 
                    Offset (0xDFF)
                }

                Mutex (SBX0, 0x00)
                OperationRegion (SMB0, SystemIO, 0x0B00, 0x10)
                Field (SMB0, ByteAcc, NoLock, Preserve)
                {
                    HST0,   8, 
                    SLV0,   8, 
                    CNT0,   8, 
                    CMD0,   8, 
                    ADD0,   8, 
                    DT00,   8, 
                    DT10,   8, 
                    BLK0,   8
                }

                Method (WBD0, 1, NotSerialized)
                {
                    Local0 = Arg0
                    Local2 = Zero
                    Local3 = HST0 /* \_SB_.PCI0.SMBS.HST0 */
                    Local1 = (Local3 & 0x80)
                    While ((Local1 != 0x80))
                    {
                        If ((Local0 < 0x0A))
                        {
                            Local2 = 0x18
                            Local1 = Zero
                        }
                        Else
                        {
                            Sleep (0x0A)
                            Local0 -= 0x0A
                            Local3 = HST0 /* \_SB_.PCI0.SMBS.HST0 */
                            Local1 = (Local3 & 0x80)
                        }
                    }

                    If ((Local2 != 0x18))
                    {
                        Local1 = (HST0 & 0x1C)
                        If (Local1)
                        {
                            Local2 = 0x07
                        }
                    }

                    Return (Local2)
                }

                Method (WTC0, 1, NotSerialized)
                {
                    Local0 = Arg0
                    Local2 = 0x07
                    Local1 = One
                    While ((Local1 == One))
                    {
                        Local3 = (HST0 & 0x1D)
                        If ((Local3 != Zero))
                        {
                            If ((Local3 == One))
                            {
                                If ((Local0 < 0x0A))
                                {
                                    Local2 = 0x18
                                    Local1 = Zero
                                }
                                Else
                                {
                                    Sleep (0x0A)
                                    Local0 -= 0x0A
                                }
                            }
                            Else
                            {
                                Local2 = 0x07
                                Local1 = Zero
                            }
                        }
                        Else
                        {
                            Local2 = Zero
                            Local1 = Zero
                        }
                    }

                    HST0 = (HST0 | 0x1F)
                    Return (Local2)
                }

                Method (SBR0, 3, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            0x07, 
                            Zero, 
                            Zero
                        }
                    Local4 = (Arg0 & 0x5F)
                    If ((Local4 != 0x03))
                    {
                        If ((Local4 != 0x05))
                        {
                            If ((Local4 != 0x07))
                            {
                                If ((Local4 != 0x09))
                                {
                                    If ((Local4 != 0x0B))
                                    {
                                        Index (Local0, Zero) = 0x19
                                        Return (Local0)
                                    }
                                }
                            }
                        }
                    }

                    If ((Acquire (SBX0, 0xFFFF) == Zero))
                    {
                        ADD0 = ((Arg1 << One) | One)
                        CMD0 = Arg2
                        HST0 = (HST0 | 0x1F)
                        Local1 = (Arg0 & 0xA0)
                        CNT0 = ((CNT0 & 0x5F) | Local1)
                        If ((Local4 == 0x03))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x40)
                        }

                        If ((Local4 == 0x05))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x44)
                        }

                        If ((Local4 == 0x07))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x48)
                        }

                        If ((Local4 == 0x09))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x4C)
                        }

                        If ((Local4 == 0x0B))
                        {
                            HST0 = (HST0 | 0x80)
                            DT00 = Zero
                            CNT0 = ((CNT0 & 0xA0) | 0x54)
                        }

                        Local1 = WTC0 (0x03E8)
                        Index (Local0, Zero) = Local1
                        If ((Local1 == Zero))
                        {
                            If ((Local4 == 0x05))
                            {
                                Index (Local0, One) = One
                                Index (Local0, 0x02) = DT00 /* \_SB_.PCI0.SMBS.DT00 */
                            }

                            If ((Local4 == 0x07))
                            {
                                Index (Local0, One) = One
                                Index (Local0, 0x02) = DT00 /* \_SB_.PCI0.SMBS.DT00 */
                            }

                            If ((Local4 == 0x09))
                            {
                                Index (Local0, One) = 0x02
                                Local2 = DT10 /* \_SB_.PCI0.SMBS.DT10 */
                                Local2 <<= 0x08
                                Local2 += DT00 /* \_SB_.PCI0.SMBS.DT00 */
                                Index (Local0, 0x02) = Local2
                            }

                            If ((Local4 == 0x0B))
                            {
                                Local1 = WBD0 (0x01F4)
                                If ((Local1 != Zero))
                                {
                                    Index (Local0, Zero) = Local1
                                }
                                Else
                                {
                                    Index (Local0, One) = DT00 /* \_SB_.PCI0.SMBS.DT00 */
                                    Local1 = DT00 /* \_SB_.PCI0.SMBS.DT00 */
                                    Local2 = CNT0 /* \_SB_.PCI0.SMBS.CNT0 */
                                    Local2 = Zero
                                    While ((Local2 < Local1))
                                    {
                                        Local3 = (0x02 + Local2)
                                        Index (Local0, Local3) = BLK0 /* \_SB_.PCI0.SMBS.BLK0 */
                                        Local2 += One
                                    }

                                    HST0 = (HST0 | 0x80)
                                }
                            }
                        }

                        CNT0 = (CNT0 & 0x5F)
                        Release (SBX0)
                    }

                    Return (Local0)
                }

                Method (SBW0, 5, NotSerialized)
                {
                    Local0 = Package (0x01)
                        {
                            0x07
                        }
                    Local4 = (Arg0 & 0x5F)
                    If ((Local4 != 0x02))
                    {
                        If ((Local4 != 0x04))
                        {
                            If ((Local4 != 0x06))
                            {
                                If ((Local4 != 0x08))
                                {
                                    If ((Local4 != 0x0A))
                                    {
                                        Index (Local0, Zero) = 0x19
                                        Return (Local0)
                                    }
                                }
                            }
                        }
                    }

                    If ((Acquire (SBX0, 0xFFFF) == Zero))
                    {
                        ADD0 = (Arg1 << One)
                        CMD0 = Arg2
                        HST0 = (HST0 | 0x1F)
                        Local1 = (Arg0 & 0xA0)
                        CNT0 = ((CNT0 & 0x5F) | Local1)
                        If ((Local4 == 0x02))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x40)
                        }

                        If ((Local4 == 0x04))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x44)
                        }

                        If ((Local4 == 0x06))
                        {
                            DT00 = Arg4
                            CNT0 = ((CNT0 & 0xA0) | 0x48)
                        }

                        If ((Local4 == 0x08))
                        {
                            DT00 = (Arg4 & 0xFF)
                            DT10 = (Arg4 >> 0x08)
                            CNT0 = ((CNT0 & 0xA0) | 0x4C)
                        }

                        If ((Local4 == 0x0A))
                        {
                            HST0 = (HST0 | 0x80)
                            Local1 = CNT0 /* \_SB_.PCI0.SMBS.CNT0 */
                            DT00 = Arg3
                            Local2 = Zero
                            While ((Local2 < Arg3))
                            {
                                BLK0 = Index (Arg4, Local2)
                                Local2 += One
                            }

                            CNT0 = ((CNT0 & 0xA0) | 0x54)
                        }

                        Index (Local0, Zero) = WTC0 (0x03E8)
                        CNT0 = (CNT0 & 0x5F)
                        Release (SBX0)
                    }

                    Return (Local0)
                }
            }

            Device (MSSE)
            {
                Name (_HID, "SMB0001")  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0B20,             // Range Minimum
                        0x0B20,             // Range Maximum
                        0x20,               // Alignment
                        0x20,               // Length
                        )
                    IRQ (Level, ActiveLow, Shared, )
                        {7}
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((OSYS == 0x07DC))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Mutex (PSMX, 0x00)
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (((HPAD & 0x03) == 0x03))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }

                    OperationRegion (RCM0, SystemCMOS, Zero, 0x10)
                    Field (RCM0, ByteAcc, NoLock, Preserve)
                    {
                        AccessAs (ByteAcc, 0x00), 
                        RTCS,   8, 
                        Offset (0x02), 
                        RTCM,   8, 
                        Offset (0x04), 
                        RTCH,   8, 
                        Offset (0x06), 
                        RTCW,   8
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (((HPAD & 0x03) == 0x03))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TMR_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TMR_.BUF1 */
                    }
                }

                Device (KBC0)
                {
                    Name (_HID, EisaId ("HPQ8001"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS == 0x07DC))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (KBC1)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS == 0x07DC))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                }

                Device (PS2M)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (0x771E2E4F)
                    }

                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN1E00"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x077A,             // Range Minimum
                            0x077A,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        IO (Decode16,
                            0x0840,             // Range Minimum
                            0x0840,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFF00000,         // Address Base
                            0x00100000,         // Address Length
                            _Y05)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y05._LEN, PSIZ)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y05._BAS, PBAS)  // _BAS: Base Address
                        PSIZ = ROMS /* \ROMS */
                        Local0 = (ROMS - One)
                        PBAS = (Ones - Local0)
                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }
                }

                OperationRegion (LCLM, SystemIO, 0x0C50, 0x03)
                Field (LCLM, ByteAcc, NoLock, Preserve)
                {
                    CLMI,   8, 
                    CLMD,   8, 
                    CLGP,   8
                }

                IndexField (CLMI, CLMD, ByteAcc, NoLock, Preserve)
                {
                    IDRG,   8, 
                    Offset (0x02), 
                    TSTS,   8, 
                    TINT,   8, 
                    Offset (0x12), 
                    I2CC,   8, 
                    GPIO,   8
                }

                Method (RGPM, 0, NotSerialized)
                {
                    Local0 = GPIO /* \_SB_.PCI0.LPC0.GPIO */
                    Local0 &= 0xFFFFFF3F
                    GPIO = Local0
                    Local1 = CLGP /* \_SB_.PCI0.LPC0.CLGP */
                    Return (Local1)
                }
            }

            Device (P2P)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x04, 0x05))
                    }
                    Else
                    {
                        Return (GPRW (0x04, Zero))
                    }
                }

                OperationRegion (PCPC, PCI_Config, Zero, 0xFF)
                Field (PCPC, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    PCMD,   8, 
                    Offset (0x1C), 
                    IOW1,   8, 
                    IOW2,   8, 
                    Offset (0x48), 
                    PR48,   8, 
                    PR49,   8, 
                    PR4A,   8, 
                    PR4B,   8
                }

                Name (PR09, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x0004FFFF, 
                        Zero, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        One, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x02, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x03, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR09, Package (0x08)
                {
                    Package (0x04)
                    {
                        0x0004FFFF, 
                        Zero, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        One, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x02, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x03, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.PCI0.P2P_.AR09 */
                    }

                    Return (PR09) /* \_SB_.PCI0.P2P_.PR09 */
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                Name (B5EN, Zero)
                Name (BA_5, Zero)
                Name (SBAR, 0xF0350000)
                OperationRegion (SATX, PCI_Config, Zero, 0x44)
                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    VIDI,   32, 
                    Offset (0x0A), 
                    STCL,   16, 
                    Offset (0x24), 
                    BA05,   32, 
                    Offset (0x40), 
                    WTEN,   1, 
                    Offset (0x42), 
                    DIS0,   1, 
                    DIS1,   1, 
                    DIS2,   1, 
                    DIS3,   1, 
                    DIS4,   1, 
                    DIS5,   1
                }

                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DISP,   6
                }

                Method (GBAA, 0, Serialized)
                {
                    BA_5 = BA05 /* \_SB_.PCI0.SATA.BA05 */
                    If (((BA_5 == Ones) || (STCL != 0x0101)))
                    {
                        B5EN = Zero
                        Return (SBAR) /* \_SB_.PCI0.SATA.SBAR */
                    }
                    Else
                    {
                        B5EN = One
                        Return (BA_5) /* \_SB_.PCI0.SATA.BA_5 */
                    }
                }

                OperationRegion (BAR5, SystemMemory, GBAA (), 0x1000)
                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    NOPT,   5, 
                    Offset (0x0C), 
                    PTI0,   1, 
                    PTI1,   1, 
                    PTI2,   1, 
                    PTI3,   1, 
                    PTI4,   1, 
                    PTI5,   1, 
                    PTI6,   1, 
                    PTI7,   1, 
                    Offset (0x118), 
                    CST0,   1, 
                    Offset (0x120), 
                        ,   7, 
                    BSY0,   1, 
                    Offset (0x128), 
                    DET0,   4, 
                    Offset (0x129), 
                    IPM0,   4, 
                    Offset (0x12C), 
                    DDI0,   4, 
                    Offset (0x198), 
                    CST1,   1, 
                    Offset (0x1A0), 
                        ,   7, 
                    BSY1,   1, 
                    Offset (0x1A8), 
                    DET1,   4, 
                    Offset (0x1A9), 
                    IPM1,   4, 
                    Offset (0x1AC), 
                    DDI1,   4, 
                    Offset (0x218), 
                    CST2,   1, 
                    Offset (0x220), 
                        ,   7, 
                    BSY2,   1, 
                    Offset (0x228), 
                    DET2,   4, 
                    Offset (0x229), 
                    IPM2,   4, 
                    Offset (0x22C), 
                    DDI2,   4, 
                    Offset (0x298), 
                    CST3,   1, 
                    Offset (0x2A0), 
                        ,   7, 
                    BSY3,   1, 
                    Offset (0x2A8), 
                    DET3,   4, 
                    Offset (0x2A9), 
                    IPM3,   4, 
                    Offset (0x2AC), 
                    DDI3,   4, 
                    Offset (0x318), 
                    CST4,   1, 
                    Offset (0x320), 
                        ,   7, 
                    BSY4,   1, 
                    Offset (0x328), 
                    DET4,   4, 
                    Offset (0x329), 
                    IPM4,   4, 
                    Offset (0x32C), 
                    DDI4,   4, 
                    Offset (0x398), 
                    CST5,   1, 
                    Offset (0x3A0), 
                        ,   7, 
                    BSY5,   1, 
                    Offset (0x3A8), 
                    DET5,   4, 
                    Offset (0x3A9), 
                    IPM5,   4, 
                    Offset (0x3AC), 
                    DDI5,   4
                }

                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    PTI,    6
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    GBAA ()
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           /* .... */
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.PRID.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((TPOS >= 0x40) || (TPOS == 0x04)) && B5EN))
                        {
                            If (IPM0)
                            {
                                Local0 = 0x32
                                While (((BSY0 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (IPM2)
                            {
                                Local0 = 0x32
                                While (((BSY2 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET0 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY0 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         /* .F..... */
                                }
                            Return (Local0)
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET2 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY2 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         /* .F..... */
                                }
                            Return (Local0)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           /* .... */
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.SECD.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((TPOS >= 0x40) || (TPOS == 0x04)) && B5EN))
                        {
                            If (IPM1)
                            {
                                Local0 = 0x32
                                While (((BSY1 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (IPM3)
                            {
                                Local0 = 0x32
                                While (((BSY3 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET1 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY1 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         /* .F..... */
                                }
                            Return (Local0)
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET3 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY3 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         /* .F..... */
                                }
                            Return (Local0)
                        }
                    }
                }

                Method (ENP, 2, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        DIS0 = ~Arg1
                    }
                    Else
                    {
                        If ((Arg0 == One))
                        {
                            DIS1 = ~Arg1
                        }
                        Else
                        {
                            If ((Arg0 == 0x02))
                            {
                                DIS2 = ~Arg1
                            }
                            Else
                            {
                                If ((Arg0 == 0x03))
                                {
                                    DIS3 = ~Arg1
                                }
                                Else
                                {
                                    If ((Arg0 == 0x04))
                                    {
                                        DIS4 = ~Arg1
                                    }
                                    Else
                                    {
                                        If ((Arg0 == 0x05))
                                        {
                                            DIS5 = ~Arg1
                                        }
                                    }
                                }
                            }
                        }
                    }

                    WTEN = One
                    If ((Arg0 == Zero))
                    {
                        PTI0 = Arg1
                    }
                    Else
                    {
                        If ((Arg0 == One))
                        {
                            PTI1 = Arg1
                        }
                        Else
                        {
                            If ((Arg0 == 0x02))
                            {
                                PTI2 = Arg1
                            }
                            Else
                            {
                                If ((Arg0 == 0x03))
                                {
                                    PTI3 = Arg1
                                }
                                Else
                                {
                                    If ((Arg0 == 0x04))
                                    {
                                        PTI4 = Arg1
                                    }
                                    Else
                                    {
                                        If ((Arg0 == 0x05))
                                        {
                                            PTI5 = Arg1
                                        }
                                    }
                                }
                            }
                        }
                    }

                    If ((DISP == 0x3F))
                    {
                        PTI0 = One
                    }
                    Else
                    {
                        If ((DIS0 && ((DISP & 0x3E) ^ 0x3E)))
                        {
                            PTI0 = Zero
                        }
                    }

                    Local0 = PTI /* \_SB_.PCI0.SATA.PTI_ */
                    Local1 = Zero
                    While (Local0)
                    {
                        If ((Local0 & One))
                        {
                            Local1++
                        }

                        Local0 >>= One
                    }

                    NOPT = Local1--
                    WTEN = Zero
                }

                Device (PRT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((ODZC == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (DIS, 0, NotSerialized)
                    {
                        ENP (One, Zero)
                    }

                    Method (ENA, 0, NotSerialized)
                    {
                        ENP (One, One)
                    }

                    Device (ODD)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (ODDZ)
                {
                    Name (ODPS, Zero)
                    Name (ODDB, Zero)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((OSYS == 0x07DC))
                        {
                            Return (0x0001FFFF)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((ODZC == One) && (^^^SMBS.GE16 == Zero)))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        P80H = 0xDF00
                        If (((ODZC == One) && (^^^SMBS.GE16 == Zero)))
                        {
                            If (((ODDB == One) || ((ODDB == Zero) && (IPM1 != 
                                Zero))))
                            {
                                If (((VIDI == 0x78041022) || (VIDI == 0x78011022)))
                                {
                                    DIS1 = Zero
                                    Sleep (0x28)
                                    ^^^SMBS.O171 = One
                                    ^^^SMBS.E171 = Zero
                                    Sleep (0x28)
                                    CST1 = Zero
                                    Sleep (One)
                                    DDI1 = One
                                    Sleep (One)
                                    DDI1 = Zero
                                }

                                If (((VIDI == 0x78031022) || (VIDI == 0x78021022)))
                                {
                                    DIS1 = Zero
                                    Sleep (0x28)
                                    ^^^SMBS.O171 = One
                                    ^^^SMBS.E171 = Zero
                                    Sleep (0x28)
                                    CST1 = Zero
                                    Sleep (One)
                                    DDI1 = One
                                    Sleep (One)
                                    DDI1 = Zero
                                }
                            }
                        }

                        ODDB = One
                        ODPS = Zero
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        P80H = 0xDF03
                        If (((ODZC == One) && (^^^SMBS.GE16 == Zero)))
                        {
                            If (((VIDI == 0x78041022) || (VIDI == 0x78011022)))
                            {
                                Sleep (0x28)
                                ^^^SMBS.O171 = Zero
                                ^^^SMBS.E171 = Zero
                                Sleep (0x28)
                                DIS1 = One
                            }

                            If (((VIDI == 0x78031022) || (VIDI == 0x78021022)))
                            {
                                Sleep (0x28)
                                ^^^SMBS.O171 = Zero
                                ^^^SMBS.E171 = Zero
                                Sleep (0x28)
                                DIS1 = One
                            }

                            ^^^SMBS.G06T = ~^^^SMBS.GE06
                        }

                        ODPS = 0x03
                    }

                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (ODPS) /* \_SB_.PCI0.SATA.ODDZ.ODPS */
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                    }
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (ESAT)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (One)
                        }
                    }
                }
            }

            Device (IDE)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x5A, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    Zero, 
                    Zero
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    Zero
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    Zero
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, WordAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F)
                    Local1 = (Arg0 >> 0x04)
                    Return ((0x1E * ((Local0 + One) + (Local1 + One)
                        )))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, PIT1)
                    CreateByteField (Arg0, One, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           /* .... */
                    })
                    CreateDWordField (BUF, Zero, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If ((PICX & One))
                    {
                        Return (BUF) /* \_SB_.PCI0.IDE_.GTM_.BUF_ */
                    }

                    PIO0 = GETT (PIT0)
                    PIO1 = GETT (PIT1)
                    If ((UDCX & One))
                    {
                        FLAG |= One
                        DMA0 = DerefOf (Index (UDMT, (UDMX & 0x0F)))
                    }
                    Else
                    {
                        If ((MDT0 != 0xFF))
                        {
                            DMA0 = GETT (MDT0)
                        }
                    }

                    If ((UDCX & 0x02))
                    {
                        FLAG |= 0x04
                        DMA1 = DerefOf (Index (UDMT, (UDMX >> 0x04)))
                    }
                    Else
                    {
                        If ((MDT1 != 0xFF))
                        {
                            DMA1 = GETT (MDT1)
                        }
                    }

                    FLAG |= 0x1A
                    Return (BUF) /* \_SB_.PCI0.IDE_.GTM_.BUF_ */
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, Zero, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                    })
                    CreateByteField (BUF, Zero, PIT1)
                    CreateByteField (BUF, One, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Local0 = Match (PIOT, MLE, PIO0, MTR, Zero, Zero)
                    Divide (Local0, 0x05, Local0)
                    Local1 = Match (PIOT, MLE, PIO1, MTR, Zero, Zero)
                    Divide (Local1, 0x05, Local1)
                    PIMX = ((Local1 << 0x04) | Local0)
                    PIT0 = DerefOf (Index (PITR, Local0))
                    PIT1 = DerefOf (Index (PITR, Local1))
                    If ((FLAG & One))
                    {
                        Local0 = Match (UDMT, MLE, DMA0, MTR, Zero, Zero)
                        Divide (Local0, 0x06, Local0)
                        UDMX |= Local0
                        UDCX |= One
                    }
                    Else
                    {
                        If ((DMA0 != Ones))
                        {
                            Local0 = Match (MDMT, MLE, DMA0, MTR, Zero, Zero)
                            MDT0 = DerefOf (Index (MDTR, Local0))
                        }
                    }

                    If ((FLAG & 0x04))
                    {
                        Local0 = Match (UDMT, MLE, DMA1, MTR, Zero, Zero)
                        Divide (Local0, 0x06, Local0)
                        UDMX |= (Local0 << 0x04)
                        UDCX |= 0x02
                    }
                    Else
                    {
                        If ((DMA1 != Ones))
                        {
                            Local0 = Match (MDMT, MLE, DMA1, MTR, Zero, Zero)
                            MDT1 = DerefOf (Index (MDTR, Local0))
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDE_.STM_.BUF_ */
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, Zero, MDT1)
                    CreateByteField (Arg1, One, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If ((Arg0 == 0xA0))
                    {
                        Local0 = (PIMX & 0x0F)
                        Local1 = MDT0 /* \_SB_.PCI0.IDE_.GTF_.MDT0 */
                        Local2 = (UDCX & One)
                        Local3 = (UDMX & 0x0F)
                    }
                    Else
                    {
                        Local0 = (PIMX >> 0x04)
                        Local1 = MDT1 /* \_SB_.PCI0.IDE_.GTF_.MDT1 */
                        Local2 = (UDCX & 0x02)
                        Local3 = (UDMX >> 0x04)
                    }

                    Name (BUF, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,  /* ........ */
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF               /* ...... */
                    })
                    CreateByteField (BUF, One, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    CMDA = Arg0
                    CMDB = Arg0
                    PMOD = (Local0 | 0x08)
                    If (Local2)
                    {
                        DMOD = (Local3 | 0x40)
                    }
                    Else
                    {
                        If ((Local1 != 0xFF))
                        {
                            Local4 = Match (MDMT, MLE, GETT (Local1), MTR, Zero, Zero)
                            If ((Local4 < 0x03))
                            {
                                DMOD = (0x20 | Local4)
                            }
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDE_.GTF_.BUF_ */
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = PPIT /* \_SB_.PCI0.IDE_.PPIT */
                        VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                        VPIC = PPIC /* \_SB_.PCI0.IDE_.PPIC */
                        VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                        VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        PPIT = VPIT /* \_SB_.PCI0.IDE_.PRID._STM.VPIT */
                        PMDT = VMDT /* \_SB_.PCI0.IDE_.PRID._STM.VMDT */
                        PPIM = VPIM /* \_SB_.PCI0.IDE_.PRID._STM.VPIM */
                        PUDC = VUDC /* \_SB_.PCI0.IDE_.PRID._STM.VUDC */
                        PUDM = VUDM /* \_SB_.PCI0.IDE_.PRID._STM.VUDM */
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                            VPIM = PPIM /* \_SB_.PCI0.IDE_.PPIM */
                            VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                            VPIM = PPIM /* \_SB_.PCI0.IDE_.PPIM */
                            VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = SPIT /* \_SB_.PCI0.IDE_.SPIT */
                        VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                        VPIC = SPIC /* \_SB_.PCI0.IDE_.SPIC */
                        VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                        VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        SPIT = VPIT /* \_SB_.PCI0.IDE_.SECD._STM.VPIT */
                        SMDT = VMDT /* \_SB_.PCI0.IDE_.SECD._STM.VMDT */
                        SPIM = VPIM /* \_SB_.PCI0.IDE_.SECD._STM.VPIM */
                        SUDC = VUDC /* \_SB_.PCI0.IDE_.SECD._STM.VUDC */
                        SUDM = VUDM /* \_SB_.PCI0.IDE_.SECD._STM.VUDM */
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                            VPIM = SPIM /* \_SB_.PCI0.IDE_.SPIM */
                            VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                            VPIM = SPIM /* \_SB_.PCI0.IDE_.SPIM */
                            VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }

            Name (AFCB, Buffer (0xB8) {})
            Name (CALB, Buffer (0x05) {})
            Scope (OHC1)
            {
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (DEVP, Zero)
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            If (P0CS)
                            {
                                DEVP = One
                            }
                            Else
                            {
                                DEVP = Zero
                            }

                            Return (One)
                        }
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }
                }
            }

            Scope (OHC2)
            {
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                        {
                            ToPLD (
                        })
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                        {
                            ToPLD (
                        })
                    }
                }
            }

            Scope (EHC1)
            {
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (DEVP, Zero)
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            If (P0CS)
                            {
                                DEVP = One
                            }
                            Else
                            {
                                DEVP = Zero
                            }

                            Return (One)
                        }
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }
                }
            }

            Scope (EHC2)
            {
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                        {
                            If ((OSYS == 0x07DC))
                            {
                                Return (Package (0x04)
                                {
                                    Zero, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                            }
                            Else
                            {
                                Return (Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                            }
                        }

                        Device (CAM0)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision       = 0x2,
                                    PLD_IgnoreColor    = 0x1,
                                    PLD_Red            = 0x0,
                                    PLD_Green          = 0x0,
                                    PLD_Blue           = 0x0,
                                    PLD_Width          = 0x0,
                                    PLD_Height         = 0x0,
                                    PLD_UserVisible    = 0x1,
                                    PLD_Dock           = 0x0,
                                    PLD_Lid            = 0x1,
                                    PLD_Panel          = "FRONT",
                                    PLD_VerticalPosition = "UPPER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape          = "UNKNOWN",
                                    PLD_GroupOrientation = 0x0,
                                    PLD_GroupToken     = 0x0,
                                    PLD_GroupPosition  = 0x0,
                                    PLD_Bay            = 0x0,
                                    PLD_Ejectable      = 0x0,
                                    PLD_EjectRequired  = 0x0,
                                    PLD_CabinetNumber  = 0x0,
                                    PLD_CardCageNumber = 0x0,
                                    PLD_Reference      = 0x0,
                                    PLD_Rotation       = 0x0,
                                    PLD_Order          = 0x0,
                                    PLD_VerticalOffset = 0xFFFF,
                                    PLD_HorizontalOffset = 0xFFFF)

                            })
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If ((OSYS == 0x07DC))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                        {
                            If ((OSYS == 0x07DC))
                            {
                                Return (Package (0x00) {})
                            }
                            Else
                            {
                                Return (Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                         0x81, 0x00, 0x30, 0x00                           /* ..0. */
                                    }
                                })
                            }
                        }
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                        {
                            ToPLD (
                        })
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                        {
                            ToPLD (
                        })
                    }
                }
            }

            Scope (XHC1)
            {
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }
                }
            }

            Mutex (ESMX, 0x00)
            Device (ACEL)
            {
                Name (_HID, EisaId ("HPQ0004"))  // _HID: Hardware ID
                Name (GSPN, Zero)
                Name (CNST, Zero)
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, )
                    {
                        0x00000017,
                    }
                })
                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    If (_STA ())
                    {
                        INAL ()
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (^^LPC0.EC0.ACLS)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (INAL, 0, Serialized)
                {
                    AJAL ()
                }

                Method (AJAL, 0, Serialized)
                {
                    If (((^^LPC0.EC0.ADPT == Zero) && (^^LPC0.EC0.LIDF == One))) {}
                }

                Method (CLRI, 0, Serialized)
                {
                    Local0 = Zero
                    If (^^LPC0.ECOK ())
                    {
                        If ((^^LPC0.EC0.ADPT == Zero))
                        {
                            If ((^^LPC0.BAT1._STA () == 0x1F))
                            {
                                If ((^^LPC0.EC0.BAL0 == One))
                                {
                                    Local0 = One
                                }
                            }
                        }
                    }

                    Return (Local0)
                }

                Method (ALID, 1, NotSerialized)
                {
                    Return (^^^LID._LID ())
                }

                Method (ALED, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        ^^SMBS.O029 = Zero
                    }
                    Else
                    {
                        ^^SMBS.O029 = One
                    }
                }

                Method (ADSN, 0, NotSerialized)
                {
                    Local0 = Zero
                    Return (Local0)
                }

                Method (ALRD, 1, NotSerialized)
                {
                    Local0 = Zero
                    If (^^LPC0.ECOK ())
                    {
                        Local0 = ACCR (Arg0)
                    }

                    Return (Local0)
                }

                Method (ALWR, 2, NotSerialized)
                {
                    If (^^LPC0.ECOK ())
                    {
                        ACCW (Arg0, Arg1)
                    }
                }

                Method (ACCR, 1, NotSerialized)
                {
                    Local0 = ESMR (0x52, Arg0)
                    Return (Local0)
                }

                Method (ACCW, 2, NotSerialized)
                {
                    ESMW (0x52, Arg0, Arg1)
                }

                Method (ESMR, 2, NotSerialized)
                {
                    Acquire (ESMX, 0xFFFF)
                    Local2 = 0x1A
                    Local2 <<= 0x08
                    If ((^^LPC0.ECOK () && (^^LPC0.EC0.SMPR == Zero)))
                    {
                        Local0 = 0x04
                        While (Local0)
                        {
                            ^^LPC0.EC0.SMAD = Arg0
                            ^^LPC0.EC0.SMCM = Arg1
                            ^^LPC0.EC0.SMD0 = Zero
                            ^^LPC0.EC0.SMST = Zero
                            ^^LPC0.EC0.SMPR = 0x07
                            While (^^LPC0.EC0.SMPR)
                            {
                                Sleep (0x02)
                            }

                            If ((^^LPC0.EC0.SMST == 0x80))
                            {
                                Local1 = ^^LPC0.EC0.SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                                Local2 = DerefOf (Index (Local1, Zero))
                                Break
                            }
                            Else
                            {
                                Local2 = (^^LPC0.EC0.SMST & 0x1F)
                                Local2 <<= 0x08
                            }

                            Sleep (0x14)
                            Local0 -= One
                        }
                    }

                    Release (ESMX)
                    Return (Local2)
                }

                Method (ESMW, 3, NotSerialized)
                {
                    Acquire (ESMX, 0xFFFF)
                    Local2 = 0x1A
                    Local2 <<= 0x08
                    If ((^^LPC0.ECOK () && (^^LPC0.EC0.SMPR == Zero)))
                    {
                        Local0 = 0x04
                        While (Local0)
                        {
                            ^^LPC0.EC0.SMAD = Arg0
                            ^^LPC0.EC0.SMCM = Arg1
                            ^^LPC0.EC0.SMD0 = Arg2
                            ^^LPC0.EC0.SMST = Zero
                            ^^LPC0.EC0.SMPR = 0x06
                            While (^^LPC0.EC0.SMPR)
                            {
                                Sleep (0x02)
                            }

                            If ((^^LPC0.EC0.SMST == 0x80))
                            {
                                Break
                            }
                            Else
                            {
                                Local2 = (^^LPC0.EC0.SMST & 0x1F)
                                Local2 <<= 0x08
                            }

                            Sleep (0x14)
                            Local0 -= One
                        }
                    }

                    Release (ESMX)
                    Return (Local2)
                }
            }
        }

        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x10), 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x15), 
            GEC,    8, 
            Offset (0x30), 
            USB1,   8, 
            USB2,   8, 
            USB3,   8, 
            USB4,   8, 
            USB5,   8, 
            USB6,   8, 
            USB7,   8, 
            Offset (0x40), 
            IDE,    8, 
            SATA,   8, 
            Offset (0x50), 
            GPP0,   8, 
            GPP1,   8, 
            GPP2,   8, 
            GPP3,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            If (PICM)
            {
                HDAD = Arg0
            }
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
            If (PICM)
            {
                USB2 = Arg0
                USB4 = Arg0
                IDE = Arg0
            }
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            If (PICM)
            {
                USB1 = Arg0
                USB3 = Arg0
            }
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            If (PICM)
            {
                SATA = Arg0
            }
        }

        Name (PRS1, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,7,10,11,12,14,15}
        })
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }

        Method (GSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE4
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
        }

        Method (S80H, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE5
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
        }

        Method (BSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xBE
            Stall (0xFF)
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Return (^^PCI0.SMBS.GE22) /* \_SB_.PCI0.SMBS.GE22 */
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x16, 
                0x03
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
            }
        }

        Scope (\_GPE)
        {
            Method (_L16, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                If (\_SB.PCI0.SMBS.G22T)
                {
                    Sleep (0x14)
                    If (\_SB.PCI0.SMBS.GE22)
                    {
                        \_SB.PCI0.SMBS.G22T = Zero
                        \_SB.PCI0.SMBS.G22S = One
                        P80H = 0xC001
                    }
                }
                Else
                {
                    Sleep (0x14)
                    If (!\_SB.PCI0.SMBS.GE22)
                    {
                        \_SB.PCI0.SMBS.G22T = One
                        \_SB.PCI0.SMBS.G22S = One
                        P80H = 0xC000
                    }
                }

                Notify (\_SB.LID, 0x80) // Status Change
            }
        }

        Scope (\_SB)
        {
            Method (ALIC, 2, NotSerialized)
            {
                If ((Arg0 == 0x07))
                {
                    If ((Arg1 == Zero))
                    {
                        ^PCI0.SMBS.O053 = Zero
                        ^PCI0.SMBS.E053 = Zero
                    }
                    Else
                    {
                        ^PCI0.SMBS.O053 = One
                        ^PCI0.SMBS.E053 = Zero
                    }
                }

                If ((Arg0 == 0x04))
                {
                    If ((Arg1 == Zero))
                    {
                        ^PCI0.SMBS.O025 = Zero
                        ^PCI0.SMBS.E025 = Zero
                    }
                    Else
                    {
                        ^PCI0.SMBS.O025 = One
                        ^PCI0.SMBS.E025 = Zero
                    }
                }

                If ((Arg0 == 0x05))
                {
                    If ((Arg1 == Zero))
                    {
                        ^PCI0.SMBS.O000 = Zero
                        ^PCI0.SMBS.E000 = Zero
                    }
                    Else
                    {
                        ^PCI0.SMBS.O000 = One
                        ^PCI0.SMBS.E000 = Zero
                    }
                }

                If ((Arg0 == 0x06))
                {
                    If ((Arg1 == Zero))
                    {
                        ^PCI0.SMBS.O027 = Zero
                        ^PCI0.SMBS.E027 = Zero
                    }
                    Else
                    {
                        ^PCI0.SMBS.O027 = One
                        ^PCI0.SMBS.E027 = Zero
                    }
                }
            }
        }

        Scope (\_SB)
        {
            Name (ETYP, Buffer (One) {})
            Device (WMID)
            {
                OperationRegion (EXCO, SystemIO, 0x72, 0x02)
                Field (EXCO, ByteAcc, NoLock, Preserve)
                {
                    INDX,   8, 
                    DATA,   8
                }

                IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xC0), 
                    WTCP,   8, 
                    WTGP,   8, 
                    WTSP,   8, 
                    WTFP,   8, 
                    WTBP,   8, 
                    WTHP,   8, 
                    Offset (0xC7), 
                    BTLS,   1, 
                    WLAN,   1, 
                    BLTH,   1, 
                    WWAN,   1
                }

                Name (WMIE, Zero)
                Name (WMIR, Zero)
                Name (SUBC, Zero)
                Name (SIZE, Zero)
                Name (TDA0, Zero)
                Name (RCDS, Package (0x3A)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    One, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x04, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (WCDS, Package (0x3A)
                {
                    0x04, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x04, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x04, 
                    0x04, 
                    0x0C, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x08, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x04, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x04, 
                    Zero, 
                    0x04, 
                    0x04, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x04, 
                    0x80, 
                    0x04, 
                    0x04, 
                    0x04, 
                    0x04, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x80, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x04, 
                    0x80, 
                    0x80, 
                    0x04, 
                    Zero, 
                    0x04
                })
                Name (RTCC, Zero)
                Mutex (GIMX, 0x00)
                Method (GHWI, 2, NotSerialized)
                {
                    Acquire (GIMX, 0xFFFF)
                    HWCT = Arg0
                    HWBC = Arg1
                    SSMP = 0xC3
                    If ((HWRC != Zero))
                    {
                        RTCC = HWRC /* \HWRC */
                    }

                    Release (GIMX)
                    Return (Zero)
                }

                Method (RDCF, 2, Serialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    Debug = "RDCF"
                    Debug = Arg0
                    While (One)
                    {
                        _T_0 = Arg0
                        If ((_T_0 == 0x04))
                        {
                            RTCC = Zero
                            Return (GDKS ())
                        }
                        Else
                        {
                            If ((_T_0 == 0x07))
                            {
                                CreateByteField (Arg1, 0x10, GTDA)
                                RTCC = Zero
                                Return (BATT (GTDA))
                            }
                            Else
                            {
                                If ((_T_0 == 0x08))
                                {
                                    RTCC = Zero
                                    Return (GBBT ())
                                }
                                Else
                                {
                                    If ((_T_0 == 0x09))
                                    {
                                        RTCC = Zero
                                        Return (GHKS ())
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x0A))
                                        {
                                            If (^^PCI0.LPC0.ECOK ())
                                            {
                                                RTCC = Zero
                                            }

                                            Return (GHKF ())
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x0C))
                                            {
                                                If (^^PCI0.LPC0.ECOK ())
                                                {
                                                    RTCC = Zero
                                                }

                                                Return (GBBV ())
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x0F))
                                                {
                                                    If (^^PCI0.LPC0.ECOK ())
                                                    {
                                                        RTCC = Zero
                                                    }

                                                    Return (GADP ())
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x10))
                                                    {
                                                        RTCC = Zero
                                                        Return (GWSD ())
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x1B))
                                                        {
                                                            RTCC = Zero
                                                            If ((OSYS == 0x07DC))
                                                            {
                                                                Return (Package (0x03)
                                                                {
                                                                    0x04, 
                                                                    0x80, 
                                                                    Buffer (0x80) {}
                                                                })
                                                            }
                                                            Else
                                                            {
                                                                Return (GWDS ())
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If ((_T_0 == 0x1D))
                                                            {
                                                                RTCC = Zero
                                                                Return (GDLC ())
                                                            }
                                                            Else
                                                            {
                                                                If ((_T_0 == 0x0D))
                                                                {
                                                                    RTCC = Zero
                                                                    Return (GFRT ())
                                                                }
                                                                Else
                                                                {
                                                                    If ((_T_0 == 0x1E))
                                                                    {
                                                                        RTCC = Zero
                                                                        Return (GBUS ())
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((_T_0 == 0x28))
                                                                        {
                                                                            CreateDWordField (Arg1, 0x10, DDWD)
                                                                            RTCC = Zero
                                                                            Return (GTDC (DDWD))
                                                                        }
                                                                        Else
                                                                        {
                                                                            If ((_T_0 == 0x29))
                                                                            {
                                                                                RTCC = Zero
                                                                                Return (GFCC ())
                                                                            }
                                                                            Else
                                                                            {
                                                                                If ((_T_0 == 0x2A))
                                                                                {
                                                                                    RTCC = Zero
                                                                                    Return (GPES ())
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If ((_T_0 == 0x2B))
                                                                                    {
                                                                                        RTCC = Zero
                                                                                        Return (GBCO ())
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If ((_T_0 == 0x2C))
                                                                                        {
                                                                                            RTCC = Zero
                                                                                            Return (GTCS ())
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If ((_T_0 == 0x2E))
                                                                                            {
                                                                                                RTCC = Zero
                                                                                                Return (GHTP ())
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                If ((_T_0 == 0x36))
                                                                                                {
                                                                                                    RTCC = Zero
                                                                                                    Return (GPST ())
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    If ((_T_0 == 0x37))
                                                                                                    {
                                                                                                        RTCC = Zero
                                                                                                        Return (GBCT ())
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        If ((_T_0 == 0x38))
                                                                                                        {
                                                                                                            RTCC = Zero
                                                                                                            Return (GBSW ())
                                                                                                        }
                                                                                                        Else
                                                                                                        {
                                                                                                            Local0 = Package (0x03)
                                                                                                                {
                                                                                                                    Zero, 
                                                                                                                    0x04, 
                                                                                                                    Buffer (0x04)
                                                                                                                    {
                                                                                                                         0x00, 0x00, 0x00, 0x00                           /* .... */
                                                                                                                    }
                                                                                                                }
                                                                                                            RTCC = 0x04
                                                                                                            Return (Local0)
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }
                }

                Method (WRCF, 2, Serialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    Debug = "WRCF"
                    Debug = "Cmd Type"
                    Debug = Arg0
                    Debug = "Buffer"
                    Debug = Arg1
                    CreateDWordField (Arg1, 0x10, DDWD)
                    While (One)
                    {
                        _T_0 = Arg0
                        If ((_T_0 == 0x09))
                        {
                            RTCC = Zero
                            Return (SHKS (DDWD))
                        }
                        Else
                        {
                            If ((_T_0 == 0x0A))
                            {
                                RTCC = Zero
                                Return (SHKF (DDWD))
                            }
                            Else
                            {
                                If ((_T_0 == 0x0B))
                                {
                                    RTCC = Zero
                                    Return (SHKS (DDWD))
                                }
                                Else
                                {
                                    If ((_T_0 == 0x10))
                                    {
                                        CreateDWordField (Arg1, 0x10, DAB0)
                                        CreateWordField (Arg1, 0x14, DAB1)
                                        CreateWordField (Arg1, 0x16, DAB2)
                                        RTCC = Zero
                                        Return (SWSD (DAB0, DAB1, DAB2))
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x1B))
                                        {
                                            RTCC = Zero
                                            If ((OSYS == 0x07DC))
                                            {
                                                Return (Package (0x02)
                                                {
                                                    0x04, 
                                                    Zero
                                                })
                                            }
                                            Else
                                            {
                                                Return (SWDS (DDWD))
                                            }
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x1D))
                                            {
                                                RTCC = Zero
                                                Return (SDLC (DDWD))
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x1E))
                                                {
                                                    RTCC = Zero
                                                    Return (SBUS (DDWD))
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x1F))
                                                    {
                                                        RTCC = Zero
                                                        Return (SBCR (DDWD))
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x27))
                                                        {
                                                            RTCC = Zero
                                                            Return (0xFF)
                                                        }
                                                        Else
                                                        {
                                                            If ((_T_0 == 0x28))
                                                            {
                                                                RTCC = Zero
                                                                Return (STDC (DDWD))
                                                            }
                                                            Else
                                                            {
                                                                If ((_T_0 == 0x29))
                                                                {
                                                                    RTCC = Zero
                                                                    Return (SFCC (DDWD))
                                                                }
                                                                Else
                                                                {
                                                                    If ((_T_0 == 0x2A))
                                                                    {
                                                                        RTCC = Zero
                                                                        Return (SPES (DDWD))
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((_T_0 == 0x2B))
                                                                        {
                                                                            RTCC = Zero
                                                                            Return (SBCO (DDWD))
                                                                        }
                                                                        Else
                                                                        {
                                                                            If ((_T_0 == 0x2C))
                                                                            {
                                                                                RTCC = Zero
                                                                                Return (STCS (DDWD))
                                                                            }
                                                                            Else
                                                                            {
                                                                                If ((_T_0 == 0x36))
                                                                                {
                                                                                    RTCC = Zero
                                                                                    Return (SPST (Arg1))
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If ((_T_0 == 0x37))
                                                                                    {
                                                                                        RTCC = Zero
                                                                                        Return (SBCT (Arg1))
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If ((_T_0 == 0x38))
                                                                                        {
                                                                                            RTCC = Zero
                                                                                            Return (SBSW (Arg1))
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            Local0 = Package (0x03)
                                                                                                {
                                                                                                    Zero, 
                                                                                                    0x04, 
                                                                                                    Buffer (0x04)
                                                                                                    {
                                                                                                         0x00, 0x00, 0x00, 0x00                           /* .... */
                                                                                                    }
                                                                                                }
                                                                                            RTCC = 0x04
                                                                                            Return (Local0)
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }
                }

                Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
                {
                    Concatenate (WEI1, WED1, Local0)
                    Return (Local0)
                }

                Method (GDKS, 0, NotSerialized)
                {
                    Debug = "HP WMI Command 0x04 (BIOS Read)"
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            One, 
                            Buffer (One)
                            {
                                 0x00                                             /* . */
                            }
                        }
                    Return (Local0)
                }

                Mutex (BTMX, 0x00)
                Method (BATT, 1, NotSerialized)
                {
                    Debug = "Get Battery Information-----"
                    If ((Arg0 != Zero))
                    {
                        Local0 = Package (0x02)
                            {
                                0x06, 
                                Zero
                            }
                    }
                    Else
                    {
                        If (^^PCI0.LPC0.ECOK ())
                        {
                            If ((^^PCI0.LPC0.EC0.BOL0 == Zero))
                            {
                                Local0 = Package (0x02)
                                    {
                                        0x34, 
                                        Zero
                                    }
                            }
                            Else
                            {
                                Acquire (BTMX, 0xFFFF)
                                Local0 = Package (0x03)
                                    {
                                        Zero, 
                                        0x80, 
                                        Buffer (0x80) {}
                                    }
                                If ((^^PCI0.LPC0.EC0.BAM0 == Zero))
                                {
                                    Local2 = (^^PCI0.LPC0.EC0.BFC0 * 0x2710)
                                    Divide (Local2, ^^PCI0.LPC0.EC0.BDV0, Local1, Local2)
                                }
                                Else
                                {
                                    Local2 = ^^PCI0.LPC0.EC0.BFC0 /* \_SB_.PCI0.LPC0.EC0_.BFC0 */
                                }

                                Index (DerefOf (Index (Local0, 0x02)), Zero) = Local2
                                Index (DerefOf (Index (Local0, 0x02)), One) = (Local2 >> 0x08
                                    )
                                If ((^^PCI0.LPC0.EC0.BAM0 == Zero))
                                {
                                    Local3 = (^^PCI0.LPC0.EC0.BFC0 * 0x2710)
                                    Divide (Local3, ^^PCI0.LPC0.EC0.BDV0, Local1, Local3)
                                }
                                Else
                                {
                                    Local3 = ^^PCI0.LPC0.EC0.BFC0 /* \_SB_.PCI0.LPC0.EC0_.BFC0 */
                                }

                                Index (DerefOf (Index (Local0, 0x02)), 0x02) = Local3
                                Index (DerefOf (Index (Local0, 0x02)), 0x03) = (Local3 >> 0x08
                                    )
                                If ((^^PCI0.LPC0.EC0.BAM0 == Zero))
                                {
                                    Local2 = (^^PCI0.LPC0.EC0.BRC0 * 0x2710)
                                    Divide (Local2, ^^PCI0.LPC0.EC0.BDV0, Local1, Local2)
                                }
                                Else
                                {
                                    Local2 = ^^PCI0.LPC0.EC0.BRC0 /* \_SB_.PCI0.LPC0.EC0_.BRC0 */
                                }

                                Index (DerefOf (Index (Local0, 0x02)), 0x04) = Local2
                                Index (DerefOf (Index (Local0, 0x02)), 0x05) = (Local2 >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x06) = ^^PCI0.LPC0.EC0.MXER /* \_SB_.PCI0.LPC0.EC0_.MXER */
                                Index (DerefOf (Index (Local0, 0x02)), 0x07) = (^^PCI0.LPC0.EC0.MXER >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x08) = ^^PCI0.LPC0.EC0.CYC0 /* \_SB_.PCI0.LPC0.EC0_.CYC0 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x09) = (^^PCI0.LPC0.EC0.CYC0 >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x0A) = ^^PCI0.LPC0.EC0.BAT0 /* \_SB_.PCI0.LPC0.EC0_.BAT0 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x0C) = ^^PCI0.LPC0.EC0.BPV0 /* \_SB_.PCI0.LPC0.EC0_.BPV0 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x0D) = (^^PCI0.LPC0.EC0.BPV0 >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x0E) = ^^PCI0.LPC0.EC0.BPC0 /* \_SB_.PCI0.LPC0.EC0_.BPC0 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x0F) = (^^PCI0.LPC0.EC0.BPC0 >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x10) = ^^PCI0.LPC0.EC0.BDV0 /* \_SB_.PCI0.LPC0.EC0_.BDV0 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x11) = (^^PCI0.LPC0.EC0.BDV0 >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x12) = ^^PCI0.LPC0.EC0.BSSB /* \_SB_.PCI0.LPC0.EC0_.BSSB */
                                Index (DerefOf (Index (Local0, 0x02)), 0x13) = (^^PCI0.LPC0.EC0.BSSB >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x14) = ^^PCI0.LPC0.EC0.BCV1 /* \_SB_.PCI0.LPC0.EC0_.BCV1 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x15) = (^^PCI0.LPC0.EC0.BCV1 >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x16) = ^^PCI0.LPC0.EC0.BCV2 /* \_SB_.PCI0.LPC0.EC0_.BCV2 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x17) = (^^PCI0.LPC0.EC0.BCV2 >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x18) = ^^PCI0.LPC0.EC0.BCV3 /* \_SB_.PCI0.LPC0.EC0_.BCV3 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x19) = (^^PCI0.LPC0.EC0.BCV3 >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x1A) = ^^PCI0.LPC0.EC0.BCV4 /* \_SB_.PCI0.LPC0.EC0_.BCV4 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x1B) = (^^PCI0.LPC0.EC0.BCV4 >> 0x08
                                    )
                                Local7 = ^^PCI0.LPC0.EC0.BSN0 /* \_SB_.PCI0.LPC0.EC0_.BSN0 */
                                Name (SERN, Buffer (0x06)
                                {
                                     0x30, 0x30, 0x30, 0x30, 0x30, 0x20               /* 00000  */
                                })
                                Local6 = 0x04
                                While (Local7)
                                {
                                    Divide (Local7, 0x0A, Local5, Local7)
                                    Index (SERN, Local6) = (Local5 + 0x30)
                                    Local6--
                                }

                                CreateField (DerefOf (Index (Local0, 0x02)), 0xE0, (SizeOf (SERN) * 0x08), 
                                    BSNO)
                                BSNO = SERN /* \_SB_.WMID.BATT.SERN */
                                Local7 = ^^PCI0.LPC0.EC0.BMD0 /* \_SB_.PCI0.LPC0.EC0_.BMD0 */
                                Name (BMDN, Buffer (0x0A)
                                {
                                    /* 0000 */  0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x20, 0x20,  /* 00/00/   */
                                    /* 0008 */  0x20, 0x20                                       /*    */
                                })
                                Local4 = ((Local7 >> 0x05) & 0x0F)
                                Local6 = One
                                While (Local4)
                                {
                                    Divide (Local4, 0x0A, Local5, Local4)
                                    Index (BMDN, Local6) = (Local5 + 0x30)
                                    Local6--
                                }

                                Local4 = (Local7 & 0x1F)
                                Local6 = 0x04
                                While (Local4)
                                {
                                    Divide (Local4, 0x0A, Local5, Local4)
                                    Index (BMDN, Local6) = (Local5 + 0x30)
                                    Local6--
                                }

                                Local4 = (Local7 >> 0x09)
                                Local4 += 0x07BC
                                Local6 = 0x09
                                While (Local4)
                                {
                                    Divide (Local4, 0x0A, Local5, Local4)
                                    Index (BMDN, Local6) = (Local5 + 0x30)
                                    Local6--
                                }

                                CreateField (DerefOf (Index (Local0, 0x02)), 0x0110, (SizeOf (BMDN) * 0x08), 
                                    BMNO)
                                BMNO = BMDN /* \_SB_.WMID.BATT.BMDN */
                                Local1 = ^^PCI0.LPC0.EC0.BMNN /* \_SB_.PCI0.LPC0.EC0_.BMNN */
                                Local2 = Buffer (0x09)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                                        /* 0008 */  0x00                                             /* . */
                                    }
                                CreateField (DerefOf (Index (Local0, 0x02)), 0x0160, (SizeOf (Local1) * 0x08), 
                                    BMA0)
                                CreateField (DerefOf (Index (Local0, 0x02)), 0x01A8, 0x48, BMA1)
                                BMA0 = Local1
                                BMA1 = Local2
                                Local3 = ^^PCI0.LPC0.EC0.BCTL /* \_SB_.PCI0.LPC0.EC0_.BCTL */
                                Local2 = 0x3E
                                Local4 = Zero
                                Local1 = 0x0F
                                While (Local1)
                                {
                                    Local5 = DerefOf (Index (Local3, Local4))
                                    Index (DerefOf (Index (Local0, 0x02)), Local2) = Local5
                                    Local1--
                                    Local2++
                                    Local4++
                                }

                                Index (DerefOf (Index (Local0, 0x02)), Local2) = Zero
                                Local3 = ^^PCI0.LPC0.EC0.BDVN /* \_SB_.PCI0.LPC0.EC0_.BDVN */
                                Local2 = 0x4F
                                Local4 = Zero
                                Local1 = 0x07
                                While (Local1)
                                {
                                    Local5 = DerefOf (Index (Local3, Local4))
                                    Index (DerefOf (Index (Local0, 0x02)), Local2) = Local5
                                    Local1--
                                    Local2++
                                    Local4++
                                }

                                Local3 = ^^PCI0.LPC0.EC0.BTDC /* \_SB_.PCI0.LPC0.EC0_.BTDC */
                                Local2 = 0x56
                                Local4 = Zero
                                Local1 = 0x04
                                While (Local1)
                                {
                                    Local5 = DerefOf (Index (Local3, Local4))
                                    Index (DerefOf (Index (Local0, 0x02)), Local2) = Local5
                                    Local1--
                                    Local2++
                                    Local4++
                                }

                                Index (DerefOf (Index (Local0, 0x02)), 0x5A) = ^^PCI0.LPC0.EC0.MUAC /* \_SB_.PCI0.LPC0.EC0_.MUAC */
                                Index (DerefOf (Index (Local0, 0x02)), 0x5B) = (^^PCI0.LPC0.EC0.MUAC >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x5C) = ^^PCI0.LPC0.EC0.BMD0 /* \_SB_.PCI0.LPC0.EC0_.BMD0 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x5D) = (^^PCI0.LPC0.EC0.BMD0 >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x5E) = ^^PCI0.LPC0.EC0.BCG0 /* \_SB_.PCI0.LPC0.EC0_.BCG0 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x5F) = (^^PCI0.LPC0.EC0.BCG0 >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x60) = ^^PCI0.LPC0.EC0.BACV /* \_SB_.PCI0.LPC0.EC0_.BACV */
                                Index (DerefOf (Index (Local0, 0x02)), 0x61) = (^^PCI0.LPC0.EC0.BACV >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x62) = ^^PCI0.LPC0.EC0.BAC0 /* \_SB_.PCI0.LPC0.EC0_.BAC0 */
                                Index (DerefOf (Index (Local0, 0x02)), 0x63) = (^^PCI0.LPC0.EC0.BAC0 >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x64) = ^^PCI0.LPC0.EC0.RTTE /* \_SB_.PCI0.LPC0.EC0_.RTTE */
                                Index (DerefOf (Index (Local0, 0x02)), 0x65) = (^^PCI0.LPC0.EC0.RTTE >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x66) = ^^PCI0.LPC0.EC0.ATTE /* \_SB_.PCI0.LPC0.EC0_.ATTE */
                                Index (DerefOf (Index (Local0, 0x02)), 0x67) = (^^PCI0.LPC0.EC0.ATTE >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x68) = ^^PCI0.LPC0.EC0.ATTF /* \_SB_.PCI0.LPC0.EC0_.ATTF */
                                Index (DerefOf (Index (Local0, 0x02)), 0x69) = (^^PCI0.LPC0.EC0.ATTF >> 0x08
                                    )
                                Index (DerefOf (Index (Local0, 0x02)), 0x6A) = One
                                Release (BTMX)
                            }
                        }
                    }

                    Debug = Local0
                    Return (Local0)
                }

                Method (GWDS, 0, NotSerialized)
                {
                    WMIE = One
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x80, 
                            Buffer (0x80) {}
                        }
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                    Index (DerefOf (Index (Local0, 0x02)), One) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x02) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x03) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x04) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x05) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x06) = 0x02
                    Index (DerefOf (Index (Local0, 0x02)), 0x07) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x08) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x09) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x0A) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x0B) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x0C) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x0D) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x0E) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x0F) = Zero
                    Local1 = Zero
                    If ((WLVD != Zero))
                    {
                        Local1 += One
                        Index (DerefOf (Index (Local0, 0x02)), 0x07) = Local1
                        Index (DerefOf (Index (Local0, 0x02)), (Local1 * 0x10)) = 
                            Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            One)) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x02)) = (WLVD & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x03)) = ((WLVD >> 0x08) & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x04)) = (WLDD & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x05)) = ((WLDD >> 0x08) & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x06)) = (WLSV & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x07)) = ((WLSV >> 0x08) & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x08)) = (WLSS & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x09)) = ((WLSS >> 0x08) & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local2 * 0x10) + 
                            0x0A)) = Zero
                        Local2 = Zero
                        If ((GP57 && One))
                        {
                            Local2 |= One
                        }

                        If (WLAN)
                        {
                            Local2 |= 0x02
                        }

                        Local2 |= 0x04
                        If (BTLS)
                        {
                            Local2 |= 0x08
                        }

                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x0B)) = Local2
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x0C)) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x0D)) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x0E)) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x0F)) = Zero
                    }

                    If ((BTVD != Zero))
                    {
                        Local1 += One
                        Index (DerefOf (Index (Local0, 0x02)), 0x07) = Local1
                        Index (DerefOf (Index (Local0, 0x02)), (Local1 * 0x10)) = 
                            One
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            One)) = One
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x02)) = (BTVD & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x03)) = ((BTVD >> 0x08) & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x04)) = (BTDD & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x05)) = ((BTDD >> 0x08) & 0xFF)
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x06)) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x07)) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x08)) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x09)) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x0A)) = One
                        Local2 = Zero
                        If (!GP54)
                        {
                            Local2 |= One
                        }

                        If (BLTH)
                        {
                            Local2 |= 0x02
                        }

                        Local2 |= 0x04
                        If (BTLS)
                        {
                            Local2 |= 0x08
                        }

                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x0B)) = Local2
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x0C)) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x0D)) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x0E)) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), ((Local1 * 0x10) + 
                            0x0F)) = Zero
                    }

                    Return (Local0)
                }

                Method (SWDS, 1, Serialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    WMIE = One
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local3 = Zero
                    WMIR = One
                    While (One)
                    {
                        _T_0 = (Arg0 & Ones)
                        If ((_T_0 == 0x01000001))
                        {
                            GP57 = One
                            WLAN = One
                        }
                        Else
                        {
                            If ((_T_0 == One))
                            {
                                GP57 = Zero
                                WLAN = Zero
                            }
                            Else
                            {
                                If ((_T_0 == 0x01010001))
                                {
                                    GP54 = Zero
                                    BLTH = One
                                }
                                Else
                                {
                                    If ((_T_0 == 0x00010001))
                                    {
                                        GP54 = One
                                        BLTH = Zero
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x01FE0001))
                                        {
                                            GP57 = One
                                            WLAN = One
                                            GP54 = Zero
                                            BLTH = One
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x00FE0001))
                                            {
                                                GP57 = Zero
                                                WLAN = Zero
                                                GP54 = One
                                                BLTH = Zero
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x01FF0001))
                                                {
                                                    GP54 = Zero
                                                    GP57 = One
                                                    WLAN = One
                                                    BLTH = One
                                                    BTLS = One
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x00FF0001))
                                                    {
                                                        GP54 = One
                                                        GP57 = Zero
                                                        WLAN = Zero
                                                        BLTH = Zero
                                                        BTLS = Zero
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x01FF0000))
                                                        {
                                                            GP54 = Zero
                                                            GP57 = One
                                                            WLAN = One
                                                            BLTH = One
                                                            BTLS = One
                                                        }
                                                        Else
                                                        {
                                                            WMIR = Zero
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }

                    Sleep (0xC8)
                    WEI1 = 0x05
                    WED1 = Zero
                    Notify (WMID, 0x80) // Status Change
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (GBBT, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x80, 
                            Buffer (0x80)
                            {
                                /* 0000 */  0x31, 0x01, 0x9B, 0x01, 0xFF, 0x01, 0x63, 0x02,  /* 1.....c. */
                                /* 0008 */  0xAE, 0x01, 0x64, 0x02, 0x9D, 0x01, 0xB6, 0x01,  /* ..d..... */
                                /* 0010 */  0xB7, 0x01, 0x65, 0x02, 0x66, 0x02, 0x67, 0x02,  /* ..e.f.g. */
                                /* 0018 */  0x68, 0x02, 0xFF, 0xFF, 0x9A, 0x21, 0x9B, 0x21,  /* h....!.! */
                                /* 0020 */  0x00, 0x00                                       /* .. */
                            }
                        }
                    Return (Local0)
                }

                Method (GHKS, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04) {}
                        }
                    If (^^PCI0.LPC0.ECOK ())
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = ^^PCI0.LPC0.EC0.WMIM /* \_SB_.PCI0.LPC0.EC0_.WMIM */
                    }

                    Return (Local0)
                }

                Method (SHKS, 1, Serialized)
                {
                    If (^^PCI0.LPC0.ECOK ())
                    {
                        ^^PCI0.LPC0.EC0.WMIM = Arg0
                    }

                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (HKFR, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04) {}
                        }
                    If (^^PCI0.LPC0.ECOK ())
                    {
                        Local1 = ^^PCI0.LPC0.EC0.REC1 /* \_SB_.PCI0.LPC0.EC0_.REC1 */
                        ^^PCI0.LPC0.EC0.REC1 = Zero
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = Local1
                        Local2 = ^^PCI0.LPC0.EC0.REC2 /* \_SB_.PCI0.LPC0.EC0_.REC2 */
                        ^^PCI0.LPC0.EC0.REC2 = Zero
                        Index (DerefOf (Index (Local0, 0x02)), One) = Local2
                    }

                    If (((Local1 == 0xB6) && (Local2 == One)))
                    {
                        Sleep (0x01F4)
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = ^^PCI0.LPC0.EC0.BRTS /* \_SB_.PCI0.LPC0.EC0_.BRTS */
                        Index (DerefOf (Index (Local0, 0x02)), 0x03) = 0x0A
                    }

                    If (((Local1 == 0xB7) && (Local2 == One)))
                    {
                        Sleep (0x01F4)
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = ^^PCI0.LPC0.EC0.BRTS /* \_SB_.PCI0.LPC0.EC0_.BRTS */
                        Index (DerefOf (Index (Local0, 0x02)), 0x03) = 0x0A
                    }

                    If (((Local1 == 0xAE) && (Local2 == One))) {}
                    Return (Local0)
                }

                Method (GHKF, 0, NotSerialized)
                {
                    Local1 = HKFR ()
                    Return (Local1)
                }

                Method (GBBV, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04) {}
                        }
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), One) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x02) = Zero
                    Index (DerefOf (Index (Local0, 0x02)), 0x03) = Zero
                    Return (Local0)
                }

                Method (SHKF, 1, NotSerialized)
                {
                    Local0 = (Local0 = Arg0 & 0xFF)
                    Local1 = ((Local1 = (Local1 = Arg0 >> 0x08)) & 0xFF)
                    If (^^PCI0.LPC0.ECOK ())
                    {
                        ^^PCI0.LPC0.EC0.WEC1 = Local0
                        ^^PCI0.LPC0.EC0.WEC2 = Local1
                        ^^PCI0.LPC0.EC0.REC1 = Local0
                        ^^PCI0.LPC0.EC0.REC2 = Local1
                    }

                    Return (HKFR ())
                }

                Method (GADP, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04) {}
                        }
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                    If (^^PCI0.LPC0.ECOK ())
                    {
                        Local1 = ^^PCI0.LPC0.EC0.SADP /* \_SB_.PCI0.LPC0.EC0_.SADP */
                        If ((Local1 == 0x81))
                        {
                            Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x03
                        }

                        If ((Local1 == 0x22))
                        {
                            Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x02
                        }

                        If ((Local1 == 0x13))
                        {
                            Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        }

                        If ((Local1 == Zero))
                        {
                            Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        }
                    }

                    Return (Local0)
                }

                Method (GFRT, 0, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local3 = Package (0x03)
                        {
                            Zero, 
                            0x80, 
                            Buffer (0x80) {}
                        }
                    Local0 |= 0x02
                    Local0 |= 0x10
                    Local0 |= 0x20
                    Local0 |= 0x80
                    Local1 |= VTST /* \VTST */
                    Local1 |= 0x08
                    Local1 |= 0x10
                    Local1 |= 0x40
                    Local2 |= One
                    If (PSSP)
                    {
                        Local2 |= 0x08
                    }

                    Index (DerefOf (Index (Local3, 0x02)), Zero) = Local0
                    Index (DerefOf (Index (Local3, 0x02)), One) = Local1
                    Index (DerefOf (Index (Local3, 0x02)), 0x02) = Local2
                    Return (Local3)
                }

                Method (GWSD, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x08, 
                            Buffer (0x08)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                            }
                        }
                    GHWI (0x10, One)
                    CreateField (DerefOf (Index (Local0, 0x02)), Zero, 0x40, BUFS)
                    Local1 = Buffer (0x80) {}
                    Local1 = HWBF /* \HWBF */
                    CreateQWordField (Local1, Zero, HWQ1)
                    BUFS = HWQ1 /* \_SB_.WMID.GWSD.HWQ1 */
                    Return (Local0)
                }

                Method (SWSD, 3, NotSerialized)
                {
                    Local0 = Buffer (0x80) {}
                    CreateDWordField (Local0, Zero, HWD1)
                    CreateWordField (Local0, 0x04, HWW1)
                    CreateWordField (Local0, 0x06, HWW2)
                    HWD1 = Arg0
                    HWW1 = Arg1
                    HWW2 = Arg2
                    HWBF = Local0
                    GHWI (0x10, 0x02)
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (GDLC, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           /* .... */
                            }
                        }
                    GHWI (0x1D, One)
                    CreateField (DerefOf (Index (Local0, 0x02)), Zero, 0x20, BUFS)
                    Local1 = Buffer (0x80) {}
                    Local1 = HWBF /* \HWBF */
                    CreateDWordField (Local1, Zero, HWD1)
                    BUFS = HWD1 /* \_SB_.WMID.GDLC.HWD1 */
                    Return (Local0)
                }

                Method (SDLC, 1, NotSerialized)
                {
                    Local0 = Buffer (0x80) {}
                    CreateDWordField (Local0, Zero, HWD1)
                    HWD1 = Arg0
                    HWBF = Local0
                    GHWI (0x1D, 0x02)
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (GBUS, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           /* .... */
                            }
                        }
                    GHWI (0x1E, One)
                    CreateField (DerefOf (Index (Local0, 0x02)), Zero, 0x20, BUFS)
                    Local1 = Buffer (0x80) {}
                    Local1 = HWBF /* \HWBF */
                    CreateDWordField (Local1, Zero, HWD1)
                    BUFS = HWD1 /* \_SB_.WMID.GBUS.HWD1 */
                    Return (Local0)
                }

                Method (SBUS, 1, NotSerialized)
                {
                    Local0 = Buffer (0x80) {}
                    CreateDWordField (Local0, Zero, HWD1)
                    HWD1 = Arg0
                    HWBF = Local0
                    GHWI (0x1E, 0x02)
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (GBCR, 0, Serialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    Name (GBAC, Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           /* .... */
                    })
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x01, 0x02, 0x03, 0x04                           /* .... */
                            }
                        }
                    CreateByteField (GBAC, Zero, GBL0)
                    CreateByteField (GBAC, One, GBL1)
                    CreateByteField (GBAC, 0x02, GBL2)
                    CreateByteField (GBAC, 0x03, GBL3)
                    If (^^PCI0.LPC0.EC0.BOL0)
                    {
                        GBL0 = ^^PCI0.LPC0.EC0.BST0 /* \_SB_.PCI0.LPC0.EC0_.BST0 */
                        GBL0 &= 0x03 /* \_SB_.WMID.GBCR.GBL0 */
                        While (One)
                        {
                            _T_0 = GBL0 /* \_SB_.WMID.GBCR.GBL0 */
                            If ((_T_0 == Zero))
                            {
                                GBL0 = Zero
                            }
                            Else
                            {
                                If ((_T_0 == One))
                                {
                                    GBL0 = 0x02
                                }
                                Else
                                {
                                    If ((_T_0 == 0x02))
                                    {
                                        GBL0 = One
                                    }
                                }
                            }

                            Break
                        }
                    }
                    Else
                    {
                        GBL0 = 0xFF
                    }

                    GBL1 = 0xFF
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = GBL0 /* \_SB_.WMID.GBCR.GBL0 */
                    Index (DerefOf (Index (Local0, 0x02)), One) = GBL1 /* \_SB_.WMID.GBCR.GBL1 */
                    Return (Local0)
                }

                Method (SBCR, 1, Serialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    While (One)
                    {
                        _T_0 = (Arg0 & 0x0302)
                        If ((_T_0 == Zero))
                        {
                            ^^PCI0.LPC0.EC0.WACL = Zero
                        }
                        Else
                        {
                            If ((_T_0 == 0x0100))
                            {
                                ^^PCI0.LPC0.EC0.WACL = Zero
                            }
                            Else
                            {
                                If ((_T_0 == 0x0200))
                                {
                                    ^^PCI0.LPC0.EC0.WACL = One
                                }
                            }
                        }

                        Break
                    }

                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (GTDC, 1, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x80, 
                            Buffer (0x80) {}
                        }
                    If ((Arg0 == Zero))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = ^^PCI0.LPC0.EC0.CPUT /* \_SB_.PCI0.LPC0.EC0_.CPUT */
                    }

                    If ((Arg0 == One))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = ^^PCI0.LPC0.EC0.GPTP /* \_SB_.PCI0.LPC0.EC0_.GPTP */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = ^^PCI0.LPC0.EC0.PHTP /* \_SB_.PCI0.LPC0.EC0_.PHTP */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local1 = Zero
                        Local2 = Zero
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Divide ((^^PCI0.LPC0.EC0.FRPM * 0x64), 0x17D4, Local2, Local1)
                        Local2 = (Local1 * 0x64)
                        Index (DerefOf (Index (Local0, 0x02)), One) = Local2
                    }

                    If ((Arg0 == 0x04))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = ^^PCI0.LPC0.EC0.BTTP /* \_SB_.PCI0.LPC0.EC0_.BTTP */
                    }

                    If ((Arg0 == 0x06))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        If (((^^PCI0.LPC0.EC0.CPTR & 0x3F) == Zero))
                        {
                            Index (DerefOf (Index (Local0, 0x02)), One) = Zero
                        }
                        Else
                        {
                            Index (DerefOf (Index (Local0, 0x02)), One) = One
                        }
                    }

                    If ((Arg0 == 0x10))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = WTCP /* \_SB_.WMID.WTCP */
                    }

                    If ((Arg0 == 0x11))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = WTGP /* \_SB_.WMID.WTGP */
                    }

                    If ((Arg0 == 0x12))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = WTSP /* \_SB_.WMID.WTSP */
                    }

                    If ((Arg0 == 0x13))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = WTFP /* \_SB_.WMID.WTFP */
                    }

                    If ((Arg0 == 0x14))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = WTBP /* \_SB_.WMID.WTBP */
                    }

                    If ((Arg0 == 0x15))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = WTHP /* \_SB_.WMID.WTHP */
                    }

                    If ((Arg0 == 0x20))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = ^^PCI0.LPC0.EC0.CPTV /* \_SB_.PCI0.LPC0.EC0_.CPTV */
                    }

                    If ((Arg0 == 0x21))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = ^^PCI0.LPC0.EC0.GPTV /* \_SB_.PCI0.LPC0.EC0_.GPTV */
                    }

                    If ((Arg0 == 0x22))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = ^^PCI0.LPC0.EC0.PHTV /* \_SB_.PCI0.LPC0.EC0_.PHTV */
                    }

                    If ((Arg0 == 0x23))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = ^^PCI0.LPC0.EC0.FNTV /* \_SB_.PCI0.LPC0.EC0_.FNTV */
                    }

                    If ((Arg0 == 0x24))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                        Index (DerefOf (Index (Local0, 0x02)), One) = ^^PCI0.LPC0.EC0.BTTV /* \_SB_.PCI0.LPC0.EC0_.BTTV */
                    }

                    If ((Arg0 == 0xAA))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = ^^PCI0.LPC0.EC0.RSTV /* \_SB_.PCI0.LPC0.EC0_.RSTV */
                    }

                    Return (Local0)
                }

                Method (STDC, 1, NotSerialized)
                {
                    Local1 = Arg0
                    SUBC = (Local1 & 0xFF)
                    Local1 >>= 0x08
                    SIZE = (Local1 & 0xFF)
                    Local1 >>= 0x08
                    TDA0 = (Local1 & 0xFF)
                    If ((SIZE >= 0x02))
                    {
                        Return (Package (0x02)
                        {
                            0x06, 
                            Zero
                        })
                    }

                    If ((SUBC == 0x10))
                    {
                        WTCP = TDA0 /* \_SB_.WMID.TDA0 */
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    If ((SUBC == 0x11))
                    {
                        WTGP = TDA0 /* \_SB_.WMID.TDA0 */
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    If ((SUBC == 0x12))
                    {
                        WTSP = TDA0 /* \_SB_.WMID.TDA0 */
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    If ((SUBC == 0x13))
                    {
                        WTFP = TDA0 /* \_SB_.WMID.TDA0 */
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    If ((SUBC == 0x14))
                    {
                        WTBP = TDA0 /* \_SB_.WMID.TDA0 */
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    If ((SUBC == 0x15))
                    {
                        WTHP = TDA0 /* \_SB_.WMID.TDA0 */
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    If ((SUBC == 0x20))
                    {
                        ^^PCI0.LPC0.EC0.RSTV = One
                        ^^PCI0.LPC0.EC0.CPTV = TDA0 /* \_SB_.WMID.TDA0 */
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    If ((SUBC == 0x21))
                    {
                        ^^PCI0.LPC0.EC0.RSTV = One
                        ^^PCI0.LPC0.EC0.GPTV = TDA0 /* \_SB_.WMID.TDA0 */
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    If ((SUBC == 0x22))
                    {
                        ^^PCI0.LPC0.EC0.RSTV = One
                        ^^PCI0.LPC0.EC0.PHTV = TDA0 /* \_SB_.WMID.TDA0 */
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    If ((SUBC == 0x23))
                    {
                        ^^PCI0.LPC0.EC0.RSTV = One
                        ^^PCI0.LPC0.EC0.FNTV = TDA0 /* \_SB_.WMID.TDA0 */
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    If ((SUBC == 0x24))
                    {
                        ^^PCI0.LPC0.EC0.RSTV = One
                        ^^PCI0.LPC0.EC0.BTTV = TDA0 /* \_SB_.WMID.TDA0 */
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    If ((SUBC == 0xAA))
                    {
                        ^^PCI0.LPC0.EC0.RSTV = TDA0 /* \_SB_.WMID.TDA0 */
                        ^^PCI0.LPC0.EC0.CPTV = 0xFF
                        ^^PCI0.LPC0.EC0.GPTV = 0xFF
                        ^^PCI0.LPC0.EC0.PHTV = 0xFF
                        ^^PCI0.LPC0.EC0.FNTV = 0xFF
                        ^^PCI0.LPC0.EC0.BTTV = 0xFF
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }

                    Return (Package (0x02)
                    {
                        0x06, 
                        Zero
                    })
                }

                Method (GFCC, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           /* .... */
                            }
                        }
                    GHWI (0x29, One)
                    CreateField (DerefOf (Index (Local0, 0x02)), Zero, 0x20, BUFS)
                    Local1 = Buffer (0x80) {}
                    Local1 = HWBF /* \HWBF */
                    CreateDWordField (Local1, Zero, HWD1)
                    BUFS = HWD1 /* \_SB_.WMID.GFCC.HWD1 */
                    Return (Local0)
                }

                Method (SFCC, 1, NotSerialized)
                {
                    Local0 = Buffer (0x80) {}
                    CreateDWordField (Local0, Zero, HWD1)
                    HWD1 = Arg0
                    HWBF = Local0
                    GHWI (0x29, 0x02)
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (GPES, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           /* .... */
                            }
                        }
                    GHWI (0x2A, One)
                    CreateField (DerefOf (Index (Local0, 0x02)), Zero, 0x20, BUFS)
                    Local1 = Buffer (0x80) {}
                    Local1 = HWBF /* \HWBF */
                    CreateDWordField (Local1, Zero, HWD1)
                    BUFS = HWD1 /* \_SB_.WMID.GPES.HWD1 */
                    Return (Local0)
                }

                Method (SPES, 1, NotSerialized)
                {
                    Local0 = Buffer (0x80) {}
                    CreateDWordField (Local0, Zero, HWD1)
                    HWD1 = Arg0
                    HWBF = Local0
                    GHWI (0x2A, 0x02)
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (GBCO, 0, Serialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    Name (GBAC, Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           /* .... */
                    })
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x01, 0x02, 0x03, 0x04                           /* .... */
                            }
                        }
                    CreateByteField (GBAC, Zero, GBL0)
                    CreateByteField (GBAC, One, GBL1)
                    CreateByteField (GBAC, 0x02, GBL2)
                    CreateByteField (GBAC, 0x03, GBL3)
                    If (^^PCI0.LPC0.EC0.BOL0)
                    {
                        GBL0 = ^^PCI0.LPC0.EC0.BST0 /* \_SB_.PCI0.LPC0.EC0_.BST0 */
                        GBL0 &= 0x07 /* \_SB_.WMID.GBCO.GBL0 */
                        While (One)
                        {
                            _T_0 = GBL0 /* \_SB_.WMID.GBCO.GBL0 */
                            If ((_T_0 == Zero))
                            {
                                GBL0 = Zero
                            }
                            Else
                            {
                                If ((_T_0 == One))
                                {
                                    GBL0 = 0x02
                                }
                                Else
                                {
                                    If ((_T_0 == 0x02))
                                    {
                                        GBL0 = One
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x03))
                                        {
                                            GBL0 = Zero
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x04))
                                            {
                                                GBL0 = Zero
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }

                        If (^^PCI0.LPC0.EC0.SBTC)
                        {
                            If (^^PCI0.LPC0.EC0.GBTC)
                            {
                                GBL0 = 0x03
                                ^^PCI0.LPC0.EC0.SBTC = Zero
                            }
                        }

                        If (^^PCI0.LPC0.EC0.SBIS)
                        {
                            If ((^^PCI0.LPC0.EC0.GBIS == Zero))
                            {
                                GBL0 = 0x04
                                ^^PCI0.LPC0.EC0.SBIS = Zero
                            }
                        }
                    }
                    Else
                    {
                        GBL0 = 0xFF
                    }

                    GBL1 = 0xFF
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = GBL0 /* \_SB_.WMID.GBCO.GBL0 */
                    Index (DerefOf (Index (Local0, 0x02)), One) = GBL1 /* \_SB_.WMID.GBCO.GBL1 */
                    Return (Local0)
                }

                Method (SBCO, 1, Serialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    While (One)
                    {
                        _T_0 = (Arg0 & 0x0702)
                        If ((_T_0 == Zero))
                        {
                            ^^PCI0.LPC0.EC0.WACL = Zero
                            ^^PCI0.LPC0.EC0.SBIS = Zero
                            ^^PCI0.LPC0.EC0.SBTC = Zero
                        }
                        Else
                        {
                            If ((_T_0 == 0x0100))
                            {
                                ^^PCI0.LPC0.EC0.WACL = Zero
                                ^^PCI0.LPC0.EC0.SBIS = Zero
                                ^^PCI0.LPC0.EC0.SBTC = Zero
                            }
                            Else
                            {
                                If ((_T_0 == 0x0200))
                                {
                                    ^^PCI0.LPC0.EC0.WACL = One
                                    ^^PCI0.LPC0.EC0.SBIS = Zero
                                    ^^PCI0.LPC0.EC0.SBTC = Zero
                                }
                                Else
                                {
                                    If ((_T_0 == 0x0300))
                                    {
                                        ^^PCI0.LPC0.EC0.SBTC = One
                                        ^^PCI0.LPC0.EC0.SBIS = Zero
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x0400))
                                        {
                                            ^^PCI0.LPC0.EC0.WACL = Zero
                                            ^^PCI0.LPC0.EC0.SBIS = Zero
                                            ^^PCI0.LPC0.EC0.SBTC = Zero
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x0500))
                                            {
                                                ^^PCI0.LPC0.EC0.SBIS = One
                                                ^^PCI0.LPC0.EC0.SBTC = Zero
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }

                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (GTCS, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           /* .... */
                            }
                        }
                    Local1 = Zero
                    If ((^^PCI0.LPC0.EC0.ACLS == One))
                    {
                        Local1 |= One
                    }

                    If ((^^PCI0.LPC0.EC0.MBSS == One))
                    {
                        Local1 |= 0x02
                    }

                    Local1 |= 0x04
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = Local1
                    Index (DerefOf (Index (Local0, 0x02)), One) = ^^PCI0.LPC0.EC0.MBMS /* \_SB_.PCI0.LPC0.EC0_.MBMS */
                    Index (DerefOf (Index (Local0, 0x02)), 0x02) = ^^PCI0.LPC0.EC0.STMS /* \_SB_.PCI0.LPC0.EC0_.STMS */
                    Return (Local0)
                }

                Method (STCS, 1, NotSerialized)
                {
                    Local1 = Zero
                    Local2 = Zero
                    Local3 = Zero
                    Local3 = Arg0
                    Local1 = (Local3 >> 0x08)
                    ^^PCI0.LPC0.EC0.MBMS = (Local1 & 0xFF)
                    Local2 = (Local3 >> 0x10)
                    ^^PCI0.LPC0.EC0.STMS = (Local2 & 0xFF)
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (GHTP, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           /* .... */
                            }
                        }
                    Local1 = Zero
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = Local1
                    Return (Local0)
                }

                Method (ECMT, 2, Serialized)
                {
                    Local0 = (Arg0 * 0x3C)
                    Local0 += Arg1
                    Local2 = HLSW (Local0)
                    Return (Local2)
                }

                Method (HLSW, 1, Serialized)
                {
                    Divide (Arg0, 0x0100, Local0, Local1)
                    Local0 *= 0x0100
                    Local0 += Local1
                    Return (Local0)
                }

                Method (ESDT, 0, NotSerialized)
                {
                    If (^^PCI0.LPC0.ECOK ())
                    {
                        Local0 = ^^PCI0.LPC0.RTC.RTCW /* \_SB_.PCI0.LPC0.RTC_.RTCW */
                        If (Local0)
                        {
                            Local0--
                            ^^PCI0.LPC0.EC0.PRDT = (One << Local0)
                        }
                        Else
                        {
                            ^^PCI0.LPC0.EC0.PRDT = 0x40
                        }

                        ^^PCI0.LPC0.EC0.PRTM = ECMT (FromBCD (^^PCI0.LPC0.RTC.RTCH), FromBCD (^^PCI0.LPC0.RTC.RTCM))
                    }
                }

                Method (GPST, 0, NotSerialized)
                {
                    Debug = "===WMI CMD 0x36 Get Entry==="
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x80, 
                            Buffer (0x80) {}
                        }
                    CreateField (DerefOf (Index (Local0, 0x02)), Zero, 0x0400, BUFS)
                    HWBF = BUFS /* \_SB_.WMID.GPST.BUFS */
                    GHWI (0x36, One)
                    BUFS = HWBF /* \HWBF */
                    Debug = Local0
                    Return (Local0)
                }

                Method (SPST, 1, Serialized)
                {
                    Debug = "===WMI CMD 0x36 Set ntry==="
                    Debug = Arg0
                    Local0 = Buffer (0x80) {}
                    CreateField (Arg0, 0x80, 0x0400, BUFS)
                    Local0 = BUFS /* \_SB_.WMID.SPST.BUFS */
                    HWBF = Local0
                    GHWI (0x36, 0x02)
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (GBCT, 0, NotSerialized)
                {
                    Debug = "===WMI CMD 0x37 Get Entry==="
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x80, 
                            Buffer (0x80) {}
                        }
                    CreateField (DerefOf (Index (Local0, 0x02)), Zero, 0x0400, BUFS)
                    HWBF = BUFS /* \_SB_.WMID.GBCT.BUFS */
                    GHWI (0x37, One)
                    BUFS = HWBF /* \HWBF */
                    Return (Local0)
                }

                Method (SBCT, 1, Serialized)
                {
                    Debug = "===WMI CMD 0x37 Set Entry==="
                    Debug = Arg0
                    Local0 = Buffer (0x80) {}
                    CreateField (Arg0, 0x80, 0x0400, BUFS)
                    Local0 = BUFS /* \_SB_.WMID.SBCT.BUFS */
                    HWBF = Local0
                    GHWI (0x37, 0x02)
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (GBSW, 0, NotSerialized)
                {
                    Debug = "===WMI CMD 0x38 Get Entry==="
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           /* .... */
                            }
                        }
                    GHWI (0x38, One)
                    CreateField (DerefOf (Index (Local0, 0x02)), Zero, 0x20, BUFS)
                    Local1 = Buffer (0x80) {}
                    Local1 = HWBF /* \HWBF */
                    CreateDWordField (Local1, Zero, HWD1)
                    BUFS = HWD1 /* \_SB_.WMID.GBSW.HWD1 */
                    Return (Local0)
                }

                Method (SBSW, 1, Serialized)
                {
                    Debug = "===WMI CMD 0x38 Set Entry==="
                    Local0 = Buffer (0x04) {}
                    CreateDWordField (Arg0, 0x10, BUFS)
                    Local0 = BUFS /* \_SB_.WMID.SBSW.BUFS */
                    HWBF = Local0
                    GHWI (0x38, 0x02)
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }

                Method (CSTA, 0, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           /* .... */
                            }
                        }
                    IAOR = One
                    SSMP = 0xC6
                    If ((IAOR == One))
                    {
                        Index (Local0, Zero) = 0x1C
                    }
                    Else
                    {
                        Index (Local0, Zero) = IAOR /* \IAOR */
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = (CDAT & 0xFF
                            )
                    }

                    Return (Local0)
                }

                Method (CACT, 1, NotSerialized)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Zero
                        }
                    IAOR = 0x02
                    CDAT = Arg0
                    SSMP = 0xC6
                    If ((IAOR == 0x02))
                    {
                        Index (Local0, Zero) = 0x1C
                    }
                    Else
                    {
                        Index (Local0, Zero) = IAOR /* \IAOR */
                    }

                    CDAT = Zero
                    Return (Local0)
                }

                Method (CDAC, 1, NotSerialized)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Zero
                        }
                    IAOR = 0x03
                    CDAT = Arg0
                    SSMP = 0xC6
                    If ((IAOR == 0x03))
                    {
                        Index (Local0, Zero) = 0x1C
                    }
                    Else
                    {
                        Index (Local0, Zero) = IAOR /* \IAOR */
                    }

                    CDAT = Zero
                    Return (Local0)
                }

                Method (WHCM, 2, Serialized)
                {
                    Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
                    Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    CreateDWordField (Arg1, Zero, SNIN)
                    CreateDWordField (Arg1, 0x04, COMD)
                    CreateDWordField (Arg1, 0x08, CMTP)
                    CreateDWordField (Arg1, 0x0C, DASI)
                    While (One)
                    {
                        _T_0 = Arg0
                        If ((_T_0 == One))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            If ((_T_0 == 0x02))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                If ((_T_0 == 0x03))
                                {
                                    Local0 = 0x80
                                }
                                Else
                                {
                                    If ((_T_0 == 0x04))
                                    {
                                        Local0 = 0x0400
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x05))
                                        {
                                            Local0 = 0x1000
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }

                    Local1 = Buffer ((0x08 + Local0)) {}
                    CreateDWordField (Local1, Zero, SNOU)
                    CreateDWordField (Local1, 0x04, RTCD)
                    SNOU = 0x4C494146
                    If ((DASI > 0x2000))
                    {
                        RTCD = 0x05
                        Return (Local1)
                    }

                    Local5 = DASI /* \_SB_.WMID.WHCM.DASI */
                    CreateField (Arg1, Zero, ((Local5 + 0x10) * 0x08), DAIN)
                    RTCD = 0x02
                    If ((SNIN == 0x55434553))
                    {
                        RTCD = 0x03
                        Sleep (0x32)
                        Sleep (0x32)
                        Sleep (0x32)
                        Sleep (0x32)
                        While (One)
                        {
                            _T_1 = COMD /* \_SB_.WMID.WHCM.COMD */
                            If ((_T_1 == One))
                            {
                                If (((CMTP > Zero) && (CMTP <= 0x3A)))
                                {
                                    If ((DASI < DerefOf (Index (RCDS, (CMTP - One)))))
                                    {
                                        RTCD = 0x05
                                    }
                                    Else
                                    {
                                        Local2 = RDCF (CMTP, Arg1)
                                        RTCD = RTCC /* \_SB_.WMID.RTCC */
                                    }
                                }
                            }
                            Else
                            {
                                If ((_T_1 == 0x02))
                                {
                                    If (((CMTP > Zero) && (CMTP <= 0x3A)))
                                    {
                                        If ((DASI < DerefOf (Index (WCDS, (CMTP - One)))))
                                        {
                                            RTCD = 0x05
                                        }
                                        Else
                                        {
                                            Local2 = WRCF (CMTP, Arg1)
                                            RTCD = RTCC /* \_SB_.WMID.RTCC */
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((_T_1 == 0x00020002))
                                    {
                                        While (One)
                                        {
                                            _T_2 = CMTP /* \_SB_.WMID.WHCM.CMTP */
                                            If ((_T_2 == One))
                                            {
                                                Local2 = CSTA ()
                                                RTCD = Zero
                                            }
                                            Else
                                            {
                                                If ((_T_2 == 0x02))
                                                {
                                                    Local2 = CACT (DAIN)
                                                    RTCD = Zero
                                                }
                                                Else
                                                {
                                                    If ((_T_2 == 0x03))
                                                    {
                                                        Local2 = CDAC (DAIN)
                                                        RTCD = Zero
                                                    }
                                                }
                                            }

                                            Break
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    If ((RTCD == Zero))
                    {
                        RTCD = DerefOf (Index (Local2, Zero))
                        If ((RTCD == Zero))
                        {
                            If ((DerefOf (Index (Local2, One)) <= Local0))
                            {
                                Local0 = Zero
                                While ((Local0 < DerefOf (Index (Local2, One))))
                                {
                                    Index (Local1, (Local0 + 0x08)) = DerefOf (Index (DerefOf (Index (
                                        Local2, 0x02)), Local0))
                                    Local0++
                                }

                                SNOU = 0x53534150
                            }
                            Else
                            {
                                RTCD = 0x05
                            }
                        }
                    }

                    Return (Local1)
                }

                Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Name (WEI1, Zero)
                Name (WED1, Zero)
                Name (WEI2, Zero)
                Name (WED2, Zero)
                Name (WEVT, Zero)
                Name (_WDG, Buffer (0x0104)
                {
                    /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  /* 4.._c,.E */
                    /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  /* ..=D.... */
                    /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x79, 0x42, 0xF2, 0x95,  /* AA..yB.. */
                    /* 0018 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  /* {M4C.... */
                    /* 0020 */  0xC6, 0x7E, 0xF6, 0x1C, 0x80, 0x00, 0x01, 0x08,  /* .~...... */
                    /* 0028 */  0x18, 0x43, 0x81, 0x2B, 0xE8, 0x4B, 0x07, 0x47,  /* .C.+.K.G */
                    /* 0030 */  0x9D, 0x84, 0xA1, 0x90, 0xA8, 0x59, 0xB5, 0xD0,  /* .....Y.. */
                    /* 0038 */  0xA0, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  /* ....!... */
                    /* 0040 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  /* f....... */
                    /* 0048 */  0xC9, 0x06, 0x29, 0x10, 0x41, 0x42, 0x01, 0x00,  /* ..).AB.. */
                    /* 0050 */  0xEB, 0x91, 0x4C, 0x1F, 0x5C, 0xDC, 0x0B, 0x46,  /* ..L.\..F */
                    /* 0058 */  0x95, 0x1D, 0xC7, 0xCB, 0x9B, 0x4B, 0x8D, 0x5E,  /* .....K.^ */
                    /* 0060 */  0x42, 0x41, 0x01, 0x02, 0x49, 0x4B, 0x11, 0x2D,  /* BA..IK.- */
                    /* 0068 */  0xFB, 0x2D, 0x30, 0x41, 0xB8, 0xFE, 0x4A, 0x3C,  /* .-0A..J< */
                    /* 0070 */  0x09, 0xE7, 0x51, 0x33, 0x42, 0x43, 0x04, 0x00,  /* ..Q3BC.. */
                    /* 0078 */  0xE3, 0x08, 0x8D, 0x98, 0xF4, 0x68, 0x35, 0x4C,  /* .....h5L */
                    /* 0080 */  0xAF, 0x3E, 0x6A, 0x1B, 0x81, 0x06, 0xF8, 0x3C,  /* .>j....< */
                    /* 0088 */  0x42, 0x44, 0x00, 0x00, 0x46, 0x97, 0xEA, 0x14,  /* BD..F... */
                    /* 0090 */  0x1F, 0xCE, 0x98, 0x40, 0xA0, 0xE0, 0x70, 0x45,  /* ...@..pE */
                    /* 0098 */  0xCB, 0x4D, 0xA7, 0x45, 0x42, 0x45, 0x00, 0x00,  /* .M.EBE.. */
                    /* 00A0 */  0x28, 0x20, 0x2F, 0x32, 0x84, 0x0F, 0x01, 0x49,  /* ( /2...I */
                    /* 00A8 */  0x98, 0x8E, 0x01, 0x51, 0x76, 0x04, 0x9E, 0x2D,  /* ...Qv..- */
                    /* 00B0 */  0x42, 0x46, 0x01, 0x00, 0x3D, 0xDE, 0x32, 0x82,  /* BF..=.2. */
                    /* 00B8 */  0x3D, 0x66, 0x27, 0x43, 0xA8, 0xF4, 0xE2, 0x93,  /* =f'C.... */
                    /* 00C0 */  0xAD, 0xB9, 0xBF, 0x05, 0x42, 0x47, 0x00, 0x00,  /* ....BG.. */
                    /* 00C8 */  0x36, 0x64, 0x1F, 0x8F, 0x42, 0x9F, 0xC8, 0x42,  /* 6d..B..B */
                    /* 00D0 */  0xBA, 0xDC, 0x0E, 0x94, 0x24, 0xF2, 0x0C, 0x9A,  /* ....$... */
                    /* 00D8 */  0x42, 0x48, 0x00, 0x00, 0x35, 0x64, 0x1F, 0x8F,  /* BH..5d.. */
                    /* 00E0 */  0x42, 0x9F, 0xC8, 0x42, 0xBA, 0xDC, 0x0E, 0x94,  /* B..B.... */
                    /* 00E8 */  0x24, 0xF2, 0x0C, 0x9A, 0x42, 0x49, 0x00, 0x00,  /* $...BI.. */
                    /* 00F0 */  0xB6, 0x63, 0x4E, 0xDF, 0xBC, 0x3B, 0x58, 0x48,  /* .cN..;XH */
                    /* 00F8 */  0x97, 0x37, 0xC7, 0x4F, 0x82, 0xF8, 0x21, 0xF3,  /* .7.O..!. */
                    /* 0100 */  0x42, 0x4A, 0x00, 0x00                           /* BJ.. */
                })
                Method (WMAA, 3, Serialized)
                {
                    Return (WHCM (Arg1, Arg2))
                }

                Name (S001, Buffer (0x32) {})
                Name (S002, Buffer (0x8C) {})
                Name (S003, Buffer (0x8C) {})
                Name (S014, Buffer (0x32) {})
                Name (BF01, Buffer (0x32) {})
                Name (BF02, Buffer (0x32) {})
                Name (BF03, Buffer (0x96) {})
                Name (TMP0, Buffer (0x32) {})
                Name (TMP1, Buffer (0x1E) {})
                Name (TMP2, Buffer (0x1E) {})
                Name (S004, "serial port")
                Name (S010, "Parallel Port")
                Name (S015, "My asset tag")
                Name (S006, "Enable")
                Name (S007, "Disable")
                Name (S008, " Disable, *Enable")
                Name (S009, "*Disable,  Enable")
                Name (S020, Buffer (0x1F) {})
                Name (S019, " 0, 5, 10, 15, 20, 25, 30, 35")
                Name (BF3C, "   ")
                Name (BF2S, "                                                                                             ")
                Name (BSTR, "                                                                                             ")
                Method (WMBH, 1, NotSerialized)
                {
                    Return (Zero)
                }

                Method (WMBA, 3, NotSerialized)
                {
                    Name (DBUF, Buffer (0x80) {})
                    If ((Arg1 == One))
                    {
                        Local0 = Arg2
                        Local1 = SizeOf (Local0)
                        Local4 = DerefOf (Index (Local0, Zero))
                        Local2 = 0x02
                        Local3 = Zero
                        Local5 = Zero
                        While ((Local3 != Local4))
                        {
                            Index (DBUF, Local5) = DerefOf (Index (Local0, Local2))
                            Local2 += 0x02
                            Local3 += 0x02
                            Local5++
                        }

                        Index (DBUF, Local5) = Zero
                        Local3 = Zero
                        Local4 = DerefOf (Index (Local0, Local2))
                        Local2 += 0x02
                        Local5++
                        While ((Local3 != Local4))
                        {
                            Index (DBUF, Local5) = DerefOf (Index (Local0, Local2))
                            Local2 += 0x02
                            Local3 += 0x02
                            Local5++
                        }

                        Index (DBUF, Local5) = Zero
                        HWBF = DBUF /* \_SB_.WMID.WMBA.DBUF */
                        HWRC = 0x02
                        HWCT = Zero
                        HWBC = 0xFD
                        SSMP = 0xD8
                        Return (HWRC) /* \HWRC */
                    }
                    Else
                    {
                        If ((Arg1 == 0x02))
                        {
                            DBUF = Arg2
                            HWBF = DBUF /* \_SB_.WMID.WMBA.DBUF */
                            HWRC = 0x02
                            HWCT = Zero
                            HWBC = 0xFC
                            SSMP = 0xD8
                            Return (HWRC) /* \HWRC */
                        }
                    }

                    Return (One)
                }

                Method (WQBC, 1, NotSerialized)
                {
                    Local0 = Arg0
                    HWBF = Local0
                    HWRC = 0x02
                    HWCT = Zero
                    HWBC = 0xFE
                    SSMP = 0xD8
                    If ((Zero == HWRC))
                    {
                        Local1 = Buffer (0x80) {}
                        Local1 = HWBF /* \HWBF */
                        CreateWordField (Local1, Zero, NSTL)
                        CreateField (Local1, 0x10, (0x08 * NSTL), NSTR)
                        Local0 = (0x02 + NSTL) /* \_SB_.WMID.WQBC.NSTL */
                        CreateWordField (Local1, Local0, VSTL)
                        Local0 += 0x02
                        CreateField (Local1, (0x08 * Local0), (0x08 * VSTL), VSTR)
                        Local0 = (0x02 + NSTL) /* \_SB_.WMID.WQBC.NSTL */
                        Local0 += 0x02
                        Local0 += VSTL /* \_SB_.WMID.WQBC.VSTL */
                        CreateWordField (Local1, Local0, CSTL)
                        Local0 += 0x02
                        CreateField (Local1, (0x08 * Local0), (0x08 * CSTL), CSTR)
                        Local0 = (0x02 + NSTL) /* \_SB_.WMID.WQBC.NSTL */
                        Local0 += 0x02
                        Local0 += VSTL /* \_SB_.WMID.WQBC.VSTL */
                        Local0 += 0x02
                        Local0 += CSTL /* \_SB_.WMID.WQBC.CSTL */
                        CreateWordField (Local1, Local0, NOPV)
                        Local0 += 0x02
                        CreateWordField (Local1, Local0, PBL1)
                        Local0 += 0x02
                        CreateField (Local1, (0x08 * Local0), (0x08 * PBL1), PBV1)
                        Local0 += PBL1
                        CreateWordField (Local1, Local0, PBL2)
                        Local0 += 0x02
                        CreateField (Local1, (0x08 * Local0), (0x08 * PBL2), PBV2)
                        Name (BERP, Package (0x18)
                        {
                            "Name", 
                            "Value", 
                            "Path", 
                            Zero, 
                            One, 
                            Zero, 
                            Zero, 
                            One, 
                            " ", 
                            Zero, 
                            "Enable", 
                            0x0C, 
                            "Enable", 
                            "Disable", 
                            " ", 
                            " ", 
                            " ", 
                            " ", 
                            " ", 
                            " ", 
                            " ", 
                            " ", 
                            " ", 
                            " "
                        })
                        Name (BF2S, Buffer (0x46) {})
                        Name (STRB, "                                                                      ")
                        BF2S = NSTR /* \_SB_.WMID.WQBC.NSTR */
                        STRB = BF2S /* \_SB_.WMID.WQBC.BF2S */
                        Index (BERP, Zero) = STRB /* \_SB_.WMID.WQBC.STRB */
                        BF2S = VSTR /* \_SB_.WMID.WQBC.VSTR */
                        STRB = BF2S /* \_SB_.WMID.WQBC.BF2S */
                        Index (BERP, One) = STRB /* \_SB_.WMID.WQBC.STRB */
                        BF2S = CSTR /* \_SB_.WMID.WQBC.CSTR */
                        STRB = BF2S /* \_SB_.WMID.WQBC.BF2S */
                        Index (BERP, 0x0A) = STRB /* \_SB_.WMID.WQBC.STRB */
                        BF2S = PBV1 /* \_SB_.WMID.WQBC.PBV1 */
                        STRB = BF2S /* \_SB_.WMID.WQBC.BF2S */
                        Index (BERP, 0x0C) = STRB /* \_SB_.WMID.WQBC.STRB */
                        BF2S = PBV2 /* \_SB_.WMID.WQBC.PBV2 */
                        STRB = BF2S /* \_SB_.WMID.WQBC.BF2S */
                        Index (BERP, 0x0D) = STRB /* \_SB_.WMID.WQBC.STRB */
                        Index (BERP, 0x06) = Arg0
                        Return (BERP) /* \_SB_.WMID.WQBC.BERP */
                    }

                    Return (HWRC) /* \HWRC */
                }

                Method (WQBD, 1, NotSerialized)
                {
                    Return (One)
                }

                Method (WQBE, 1, NotSerialized)
                {
                    Return (One)
                }

                Method (WQBF, 1, NotSerialized)
                {
                    Return (Package (0x10)
                    {
                        "Setup Password", 
                        " ", 
                        "Path", 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        One, 
                        " ", 
                        Zero, 
                        One, 
                        0x14, 
                        "", 
                        "", 
                        Zero, 
                        Zero
                    })
                }

                Method (WQBG, 0, NotSerialized)
                {
                }

                Method (WQBH, 0, NotSerialized)
                {
                }

                Method (WQBI, 0, NotSerialized)
                {
                }

                Name (WQAB, Buffer (0x2135)
                {
                    /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  /* FOMB.... */
                    /* 0008 */  0x25, 0x21, 0x00, 0x00, 0xB0, 0xCB, 0x00, 0x00,  /* %!...... */
                    /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  /* DS...}.T */
                    /* 0018 */  0x28, 0x27, 0xA1, 0x00, 0x01, 0x06, 0x18, 0x42,  /* ('.....B */
                    /* 0020 */  0x10, 0x4D, 0x10, 0x92, 0x46, 0x62, 0x02, 0x89,  /* .M..Fb.. */
                    /* 0028 */  0x80, 0x90, 0x18, 0x18, 0x14, 0x81, 0x85, 0x00,  /* ........ */
                    /* 0030 */  0x49, 0x02, 0x88, 0xC4, 0x41, 0xE1, 0x20, 0xD4,  /* I...A. . */
                    /* 0038 */  0x9F, 0x40, 0x7E, 0x05, 0x20, 0x74, 0x28, 0x40,  /* .@~. t(@ */
                    /* 0040 */  0xA6, 0x00, 0x83, 0x02, 0x9C, 0x22, 0x88, 0xA0,  /* .....".. */
                    /* 0048 */  0x57, 0x01, 0x36, 0x05, 0x98, 0x14, 0x60, 0x51,  /* W.6...`Q */
                    /* 0050 */  0x80, 0x76, 0x01, 0x96, 0x05, 0xE8, 0x16, 0x20,  /* .v.....  */
                    /* 0058 */  0x1D, 0x96, 0x88, 0x04, 0x47, 0x89, 0x01, 0x47,  /* ....G..G */
                    /* 0060 */  0xE9, 0xC4, 0x16, 0x6E, 0xD8, 0xE0, 0x85, 0xA2,  /* ...n.... */
                    /* 0068 */  0x68, 0x06, 0x51, 0x12, 0x94, 0x8B, 0x20, 0x5D,  /* h.Q... ] */
                    /* 0070 */  0x10, 0x52, 0x2E, 0xC0, 0x37, 0x82, 0x06, 0x10,  /* .R..7... */
                    /* 0078 */  0xA5, 0x77, 0x01, 0xB6, 0x05, 0x98, 0x86, 0x27,  /* .w.....' */
                    /* 0080 */  0xD2, 0x20, 0xE4, 0x60, 0x08, 0x54, 0xCE, 0x80,  /* . .`.T.. */
                    /* 0088 */  0x20, 0x69, 0x44, 0x21, 0x1E, 0xA7, 0x44, 0x08,  /*  iD!..D. */
                    /* 0090 */  0x0A, 0x84, 0x90, 0xD4, 0xF1, 0xA0, 0xA0, 0x71,  /* .......q */
                    /* 0098 */  0x88, 0xAD, 0xCE, 0x46, 0x93, 0xA9, 0x74, 0x7E,  /* ...F..t~ */
                    /* 00A0 */  0x48, 0x82, 0x70, 0xC6, 0x2A, 0x7E, 0x3A, 0x9A,  /* H.p.*~:. */
                    /* 00A8 */  0xD0, 0xD9, 0x9C, 0x60, 0xE7, 0x18, 0x72, 0x3C,  /* ...`..r< */
                    /* 00B0 */  0x48, 0xF4, 0x20, 0xB8, 0x00, 0x0F, 0x1C, 0x2C,  /* H. ...., */
                    /* 00B8 */  0x34, 0x84, 0x22, 0x6B, 0x80, 0xC1, 0x8C, 0xDD,  /* 4."k.... */
                    /* 00C0 */  0x63, 0xB1, 0x0B, 0x4E, 0x0A, 0xEC, 0x61, 0xB3,  /* c..N..a. */
                    /* 00C8 */  0x01, 0x19, 0xA2, 0x24, 0x38, 0xD4, 0x11, 0xC0,  /* ...$8... */
                    /* 00D0 */  0x12, 0x05, 0x98, 0x1F, 0x87, 0x0C, 0x0F, 0x95,  /* ........ */
                    /* 00D8 */  0x8C, 0x25, 0x24, 0x1B, 0xAB, 0x87, 0xC2, 0xA5,  /* .%$..... */
                    /* 00E0 */  0x40, 0x68, 0x6C, 0x27, 0xED, 0x19, 0x45, 0x2C,  /* @hl'..E, */
                    /* 00E8 */  0x79, 0x4A, 0x82, 0x49, 0xE0, 0x51, 0x44, 0x36,  /* yJ.I.QD6 */
                    /* 00F0 */  0x1A, 0x27, 0x28, 0x1B, 0x1A, 0x25, 0x03, 0x42,  /* .'(..%.B */
                    /* 00F8 */  0x9E, 0x05, 0x58, 0x07, 0x26, 0x04, 0x76, 0x2F,  /* ..X.&.v/ */
                    /* 0100 */  0xC0, 0x9A, 0x00, 0x73, 0xB3, 0x90, 0xB1, 0xB9,  /* ...s.... */
                    /* 0108 */  0xE8, 0xFF, 0x0F, 0x71, 0xB0, 0x31, 0xDA, 0x9A,  /* ...q.1.. */
                    /* 0110 */  0xAE, 0x90, 0xC2, 0xC4, 0x88, 0x12, 0x2C, 0x5E,  /* ......,^ */
                    /* 0118 */  0xC5, 0xC3, 0x10, 0xCA, 0x93, 0x42, 0xA8, 0x48,  /* .....B.H */
                    /* 0120 */  0x95, 0xA1, 0x68, 0xB4, 0x51, 0x2A, 0x14, 0xE0,  /* ..h.Q*.. */
                    /* 0128 */  0x4C, 0x80, 0x30, 0x5C, 0x1D, 0x03, 0x82, 0x46,  /* L.0\...F */
                    /* 0130 */  0x88, 0x15, 0x29, 0x56, 0xFB, 0x83, 0x20, 0xF1,  /* ..)V.. . */
                    /* 0138 */  0x2D, 0x40, 0x54, 0x01, 0xA2, 0x48, 0xA3, 0x41,  /* -@T..H.A */
                    /* 0140 */  0x9D, 0x03, 0x3C, 0x5C, 0x0F, 0xF5, 0xF0, 0x3D,  /* ..<\...= */
                    /* 0148 */  0xF6, 0x93, 0x0C, 0x72, 0x90, 0x67, 0xF1, 0xA8,  /* ...r.g.. */
                    /* 0150 */  0x70, 0x9C, 0x06, 0x49, 0xE0, 0x0B, 0x80, 0x4F,  /* p..I...O */
                    /* 0158 */  0x08, 0x1E, 0x38, 0xDE, 0x35, 0xA0, 0x66, 0x7C,  /* ..8.5.f| */
                    /* 0160 */  0xBC, 0x4C, 0x10, 0x1C, 0x6A, 0x88, 0x1E, 0x68,  /* .L..j..h */
                    /* 0168 */  0xB8, 0x13, 0x38, 0x44, 0x06, 0xE8, 0x49, 0x3D,  /* ..8D..I= */
                    /* 0170 */  0x52, 0x60, 0x07, 0x77, 0x32, 0xEF, 0x01, 0xAF,  /* R`.w2... */
                    /* 0178 */  0x0A, 0xCD, 0x5E, 0x12, 0x08, 0xC1, 0xF1, 0xF8,  /* ..^..... */
                    /* 0180 */  0x7E, 0xC0, 0x26, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  /* ~.&..... */
                    /* 0188 */  0x1A, 0x99, 0xA1, 0x3D, 0xCA, 0xD3, 0x8A, 0x19,  /* ...=.... */
                    /* 0190 */  0xF2, 0x31, 0xC1, 0x04, 0x16, 0x0B, 0x21, 0x05,  /* .1....!. */
                    /* 0198 */  0x10, 0x1A, 0x0F, 0xF8, 0x6F, 0x00, 0x8F, 0x17,  /* ....o... */
                    /* 01A0 */  0xBE, 0x12, 0xC4, 0xF6, 0x80, 0x12, 0x0C, 0x0B,  /* ........ */
                    /* 01A8 */  0x21, 0x23, 0xAB, 0xF0, 0x78, 0xE8, 0x28, 0x7C,  /* !#..x.(| */
                    /* 01B0 */  0x95, 0x38, 0x9C, 0xD3, 0x8A, 0x67, 0x82, 0xE1,  /* .8...g.. */
                    /* 01B8 */  0x20, 0xF4, 0x05, 0x90, 0x00, 0x51, 0xE7, 0x0C,  /*  ....Q.. */
                    /* 01C0 */  0xD4, 0x61, 0xC1, 0xE7, 0x04, 0x76, 0x33, 0x38,  /* .a...v38 */
                    /* 01C8 */  0x83, 0x47, 0x00, 0x8F, 0xE4, 0x84, 0xFC, 0x2B,  /* .G.....+ */
                    /* 01D0 */  0xF1, 0xC0, 0xE0, 0x03, 0xE2, 0xEF, 0x1F, 0xA7,  /* ........ */
                    /* 01D8 */  0xEC, 0x11, 0x9C, 0xA9, 0x01, 0x7D, 0x1C, 0xF0,  /* .....}.. */
                    /* 01E0 */  0xFF, 0x7F, 0x28, 0x7C, 0x88, 0x1E, 0xDF, 0x29,  /* ..(|...) */
                    /* 01E8 */  0x1F, 0xAF, 0x4F, 0x17, 0x96, 0x35, 0x4E, 0xE8,  /* ..O..5N. */
                    /* 01F0 */  0x77, 0x08, 0x9F, 0x38, 0x7C, 0x64, 0x71, 0x44,  /* w..8|dqD */
                    /* 01F8 */  0x08, 0x39, 0x39, 0x05, 0xA0, 0x81, 0x4F, 0xF7,  /* .99...O. */
                    /* 0200 */  0xEC, 0x22, 0x9C, 0xAE, 0x27, 0xE5, 0x40, 0xC3,  /* ."..'.@. */
                    /* 0208 */  0xA0, 0xE3, 0x04, 0xC7, 0x79, 0x00, 0x1C, 0xE3,  /* ....y... */
                    /* 0210 */  0x84, 0x7F, 0x2E, 0x80, 0x3F, 0x40, 0x7E, 0xCA,  /* ....?@~. */
                    /* 0218 */  0x78, 0xC5, 0x48, 0xE0, 0x98, 0x23, 0x44, 0x9F,  /* x.H..#D. */
                    /* 0220 */  0x6B, 0x3C, 0x42, 0x2C, 0xFC, 0x53, 0x45, 0xE1,  /* k<B,.SE. */
                    /* 0228 */  0x03, 0x21, 0x63, 0x04, 0x17, 0xA0, 0xC7, 0x08,  /* .!c..... */
                    /* 0230 */  0x7C, 0x03, 0x8E, 0x11, 0x7D, 0x94, 0xE0, 0xEA,  /* |...}... */
                    /* 0238 */  0x0F, 0x1A, 0x74, 0x80, 0xB8, 0xFF, 0xFF, 0x00,  /* ..t..... */
                    /* 0240 */  0xE1, 0x83, 0x7A, 0x80, 0xC0, 0x37, 0xFA, 0xD1,  /* ..z..7.. */
                    /* 0248 */  0x03, 0x3D, 0x2E, 0x8B, 0x3E, 0x0F, 0xC8, 0xF8,  /* .=..>... */
                    /* 0250 */  0x89, 0x46, 0xF3, 0xE2, 0xA7, 0x03, 0x7E, 0xF8,  /* .F....~. */
                    /* 0258 */  0x00, 0x0F, 0xA8, 0x87, 0x84, 0x03, 0xC5, 0x4C,  /* .......L */
                    /* 0260 */  0x9B, 0x83, 0x3E, 0xBB, 0x1C, 0x3A, 0x76, 0xB8,  /* ..>..:v. */
                    /* 0268 */  0xE0, 0x3F, 0x81, 0x80, 0x4B, 0xDE, 0x21, 0x0C,  /* .?..K.!. */
                    /* 0270 */  0x14, 0x23, 0xC6, 0x9F, 0x83, 0x7C, 0x0A, 0x03,  /* .#...|.. */
                    /* 0278 */  0xFF, 0xFF, 0xFF, 0x14, 0x06, 0xFE, 0xE1, 0xF0,  /* ........ */
                    /* 0280 */  0x20, 0x4F, 0x07, 0x9F, 0xB6, 0xA8, 0x74, 0x18,  /*  O....t. */
                    /* 0288 */  0xD4, 0x81, 0x0B, 0xB0, 0x32, 0x89, 0x08, 0xCF,  /* ....2... */
                    /* 0290 */  0x12, 0xB5, 0x41, 0xE8, 0xD4, 0xF0, 0x36, 0xF1,  /* ..A...6. */
                    /* 0298 */  0xB6, 0xE5, 0x5B, 0x40, 0x9C, 0xD3, 0xEC, 0xED,  /* ..[@.... */
                    /* 02A0 */  0xC0, 0x45, 0x30, 0x22, 0xD4, 0x0C, 0x45, 0x4E,  /* .E0"..EN */
                    /* 02A8 */  0x5A, 0x11, 0x63, 0x44, 0x79, 0xDC, 0x32, 0xCA,  /* Z.cDy.2. */
                    /* 02B0 */  0xDB, 0xD6, 0x0B, 0x40, 0xBC, 0x13, 0x7B, 0xDE,  /* ...@..{. */
                    /* 02B8 */  0x32, 0x46, 0xF0, 0xC8, 0x0F, 0x5C, 0x2C, 0xC6,  /* 2F...\,. */
                    /* 02C0 */  0xEA, 0xF5, 0x5F, 0xF3, 0x81, 0x0B, 0x70, 0xF6,  /* .._...p. */
                    /* 02C8 */  0xFF, 0x3F, 0x70, 0x01, 0x1C, 0x0A, 0x7A, 0x18,  /* .?p...z. */
                    /* 02D0 */  0x42, 0x0F, 0xC3, 0x53, 0x39, 0x97, 0x87, 0xC8,  /* B..S9... */
                    /* 02D8 */  0x53, 0x89, 0x18, 0x35, 0x4C, 0xD4, 0x67, 0x28,  /* S..5L.g( */
                    /* 02E0 */  0xDF, 0x2D, 0x7C, 0x20, 0x02, 0xDF, 0x99, 0x0B,  /* .-| .... */
                    /* 02E8 */  0xF8, 0xFD, 0xFF, 0x0F, 0x44, 0x70, 0x8E, 0x29,  /* ....Dp.) */
                    /* 02F0 */  0xB8, 0x33, 0x0D, 0x78, 0x7C, 0xCE, 0x40, 0x20,  /* .3.x|.@  */
                    /* 02F8 */  0xA7, 0xE2, 0x43, 0x0D, 0x60, 0x41, 0xF4, 0x13,  /* ..C.`A.. */
                    /* 0300 */  0xC2, 0x27, 0x1A, 0x2A, 0x13, 0x06, 0x75, 0xA8,  /* .'.*..u. */
                    /* 0308 */  0x01, 0xAC, 0x5C, 0x61, 0x9E, 0x46, 0xCF, 0xF9,  /* ..\a.F.. */
                    /* 0310 */  0x59, 0xC6, 0xA7, 0x1A, 0x1F, 0x4A, 0x8D, 0x63,  /* Y....J.c */
                    /* 0318 */  0x88, 0x97, 0x99, 0x87, 0x1A, 0x1F, 0x0B, 0x5E,  /* .......^ */
                    /* 0320 */  0x49, 0x7D, 0xA8, 0x31, 0x54, 0x9C, 0x87, 0x1A,  /* I}.1T... */
                    /* 0328 */  0x0F, 0x37, 0x50, 0xD4, 0x37, 0x9B, 0x67, 0x1B,  /* .7P.7.g. */
                    /* 0330 */  0xA3, 0xC7, 0xF7, 0x0D, 0xD5, 0x10, 0x0F, 0x35,  /* .......5 */
                    /* 0338 */  0x4C, 0xF2, 0x4A, 0x35, 0x16, 0x1F, 0x6A, 0xC0,  /* L.J5..j. */
                    /* 0340 */  0xF1, 0xFF, 0x3F, 0xD4, 0x00, 0xFC, 0xFF, 0xFF,  /* ..?..... */
                    /* 0348 */  0x1F, 0x6A, 0x00, 0x47, 0x47, 0x03, 0x38, 0x47,  /* .j.GG.8G */
                    /* 0350 */  0x46, 0xDC, 0xD1, 0x00, 0x5C, 0x87, 0x52, 0xE0,  /* F...\.R. */
                    /* 0358 */  0x70, 0x34, 0x00, 0x1E, 0x47, 0x21, 0x30, 0x5F,  /* p4..G!0_ */
                    /* 0360 */  0x68, 0x7C, 0x14, 0x02, 0x16, 0xFF, 0xFF, 0xA3,  /* h|...... */
                    /* 0368 */  0x10, 0xF8, 0x65, 0x9F, 0x83, 0x50, 0x42, 0x8F,  /* ..e..PB. */
                    /* 0370 */  0x42, 0x80, 0xA0, 0xDB, 0xCF, 0x53, 0xC4, 0xB3,  /* B....S.. */
                    /* 0378 */  0x8F, 0x2F, 0x3F, 0x0F, 0x04, 0x11, 0x5E, 0xF3,  /* ./?...^. */
                    /* 0380 */  0x7D, 0x0A, 0xF2, 0x21, 0xDF, 0x47, 0x21, 0x06,  /* }..!.G!. */
                    /* 0388 */  0x63, 0x28, 0x5F, 0x83, 0x7C, 0x14, 0x62, 0x50,  /* c(_.|.bP */
                    /* 0390 */  0xAF, 0x41, 0xBE, 0xEF, 0x1B, 0xE4, 0xF1, 0x22,  /* .A....." */
                    /* 0398 */  0x48, 0xEC, 0x67, 0x02, 0x1F, 0x85, 0x98, 0xE8,  /* H.g..... */
                    /* 03A0 */  0xA3, 0x10, 0xA0, 0xF0, 0xFF, 0x7F, 0x14, 0x02,  /* ........ */
                    /* 03A8 */  0xF8, 0xFF, 0xFF, 0x3F, 0x0A, 0x01, 0xCE, 0x02,  /* ...?.... */
                    /* 03B0 */  0x1C, 0x0D, 0x40, 0x37, 0xAD, 0x47, 0x21, 0xF0,  /* ..@7.G!. */
                    /* 03B8 */  0xDE, 0x59, 0x4E, 0xFB, 0x04, 0x7C, 0x16, 0x02,  /* .YN..|.. */
                    /* 03C0 */  0xCC, 0xFE, 0xFF, 0xCF, 0x42, 0xC0, 0xEC, 0x28,  /* ....B..( */
                    /* 03C8 */  0x74, 0x14, 0x67, 0xF9, 0x2A, 0xF4, 0x04, 0xF0,  /* t.g.*... */
                    /* 03D0 */  0x02, 0x10, 0x23, 0xCC, 0x3B, 0xD0, 0x4B, 0x26,  /* ..#.;.K& */
                    /* 03D8 */  0xBB, 0x8B, 0x1B, 0xE7, 0xC9, 0xE5, 0x2C, 0x9E,  /* ......,. */
                    /* 03E0 */  0xC4, 0x7D, 0x09, 0xF2, 0x81, 0xE2, 0x59, 0xC8,  /* .}....Y. */
                    /* 03E8 */  0x50, 0xA7, 0x1B, 0xF4, 0x8D, 0xDC, 0x03, 0x8B,  /* P....... */
                    /* 03F0 */  0x19, 0x3F, 0xC4, 0xF3, 0x90, 0x21, 0x9E, 0x85,  /* .?...!.. */
                    /* 03F8 */  0x00, 0x76, 0xFD, 0xFF, 0xCF, 0x42, 0x00, 0xFF,  /* .v...B.. */
                    /* 0400 */  0xFF, 0xFF, 0x47, 0x03, 0xF8, 0x2F, 0x00, 0x9F,  /* ..G../.. */
                    /* 0408 */  0x85, 0x80, 0xE7, 0x09, 0xE0, 0x41, 0xDB, 0x67,  /* .....A.g */
                    /* 0410 */  0x21, 0x80, 0x33, 0x87, 0xCB, 0xF3, 0x7F, 0x05,  /* !.3..... */
                    /* 0418 */  0x3A, 0x96, 0xF7, 0x08, 0xCF, 0xFA, 0x24, 0x5F,  /* :.....$_ */
                    /* 0420 */  0x2F, 0x3D, 0xD3, 0x87, 0x82, 0x67, 0x21, 0x86,  /* /=...g!. */
                    /* 0428 */  0x75, 0x18, 0x3E, 0x0B, 0x31, 0x88, 0x17, 0x4D,  /* u.>.1..M */
                    /* 0430 */  0x43, 0xBC, 0x70, 0xFA, 0x30, 0xE0, 0xFF, 0x3F,  /* C.p.0..? */
                    /* 0438 */  0x5E, 0xE0, 0x57, 0x4E, 0x03, 0x05, 0x09, 0xF4,  /* ^.WN.... */
                    /* 0440 */  0x2C, 0x04, 0x30, 0xFE, 0xFF, 0x7F, 0x16, 0x02,  /* ,.0..... */
                    /* 0448 */  0xC8, 0xB8, 0x46, 0x9D, 0x85, 0x80, 0xE5, 0x6D,  /* ..F....m */
                    /* 0450 */  0xE5, 0x19, 0xDB, 0xA7, 0x95, 0x04, 0xFF, 0xFF,  /* ........ */
                    /* 0458 */  0x67, 0x21, 0xC0, 0x41, 0x2E, 0x23, 0x07, 0x21,  /* g!.A.#.! */
                    /* 0460 */  0x4C, 0xC4, 0x87, 0x83, 0x8F, 0x99, 0x80, 0x9E,  /* L....... */
                    /* 0468 */  0x29, 0xBE, 0xB8, 0x1B, 0xE3, 0x09, 0xE0, 0x45,  /* )......E */
                    /* 0470 */  0xE2, 0x31, 0x93, 0x1D, 0x35, 0x0D, 0xF3, 0x2C,  /* .1..5.., */
                    /* 0478 */  0x64, 0xBC, 0xB3, 0x78, 0x0D, 0x78, 0x82, 0xF7,  /* d..x.x.. */
                    /* 0480 */  0xE4, 0x9F, 0x85, 0x18, 0xD8, 0x61, 0x05, 0x7B,  /* .....a.{ */
                    /* 0488 */  0x14, 0x32, 0xA8, 0xC1, 0x63, 0x87, 0x08, 0x13,  /* .2..c... */
                    /* 0490 */  0xE8, 0x59, 0x88, 0xC5, 0x7D, 0xAE, 0xE8, 0x3C,  /* .Y..}..< */
                    /* 0498 */  0xE1, 0xB3, 0x10, 0xF0, 0xFE, 0xFF, 0x9F, 0x25,  /* .......% */
                    /* 04A0 */  0xE0, 0x5E, 0x0D, 0x9E, 0x85, 0x00, 0x13, 0x87,  /* .^...... */
                    /* 04A8 */  0x0D, 0x9F, 0x35, 0xC0, 0x33, 0x7C, 0x8F, 0xEA,  /* ..5.3|.. */
                    /* 04B0 */  0x1C, 0x1E, 0x8F, 0x81, 0x7F, 0x56, 0x1D, 0xE7,  /* .....V.. */
                    /* 04B8 */  0x04, 0x96, 0x7B, 0xD1, 0xB2, 0x71, 0xA0, 0xA1,  /* ..{..q.. */
                    /* 04C0 */  0x23, 0xB2, 0x3A, 0x20, 0x8D, 0x0D, 0x73, 0x29,  /* #.: ..s) */
                    /* 04C8 */  0x89, 0x7C, 0x72, 0x6C, 0xD4, 0x56, 0x04, 0xA7,  /* .|rl.V.. */
                    /* 04D0 */  0x33, 0x93, 0x4F, 0x00, 0xD6, 0x42, 0x21, 0x05,  /* 3.O..B!. */
                    /* 04D8 */  0x34, 0x1A, 0x8B, 0xE1, 0x9D, 0xF9, 0xE8, 0x44,  /* 4......D */
                    /* 04E0 */  0x41, 0x0C, 0xE8, 0xE3, 0x90, 0x6D, 0x1C, 0x0A,  /* A....m.. */
                    /* 04E8 */  0x50, 0x7B, 0xD1, 0x14, 0xC8, 0x39, 0x07, 0xA3,  /* P{...9.. */
                    /* 04F0 */  0x7F, 0x76, 0x74, 0x36, 0xBE, 0x13, 0x70, 0x0D,  /* .vt6..p. */
                    /* 04F8 */  0x10, 0x3A, 0x25, 0x18, 0xDA, 0x6A, 0x04, 0xFC,  /* .:%..j.. */
                    /* 0500 */  0xFF, 0x67, 0x89, 0x01, 0x33, 0xFE, 0x53, 0x8C,  /* .g..3.S. */
                    /* 0508 */  0x09, 0x7C, 0x8E, 0xC1, 0x1F, 0x0C, 0xF0, 0x03,  /* .|...... */
                    /* 0510 */  0x7F, 0x31, 0xA8, 0xFA, 0x5E, 0xA0, 0xFB, 0x82,  /* .1..^... */
                    /* 0518 */  0xD5, 0xDD, 0x64, 0x20, 0xCC, 0xC8, 0x04, 0xF5,  /* ..d .... */
                    /* 0520 */  0x9D, 0x0E, 0x40, 0x01, 0xE4, 0x0B, 0x81, 0xCF,  /* ..@..... */
                    /* 0528 */  0x51, 0x0F, 0x05, 0x6C, 0x22, 0x21, 0xC2, 0x44,  /* Q..l"!.D */
                    /* 0530 */  0x33, 0x3A, 0x62, 0xC2, 0xA8, 0xE8, 0x13, 0xA6,  /* 3:b..... */
                    /* 0538 */  0x20, 0x9E, 0xB0, 0x63, 0x4D, 0x18, 0x3D, 0x13,  /*  ..cM.=. */
                    /* 0540 */  0x5F, 0x74, 0xD8, 0x88, 0x31, 0x21, 0xAE, 0x1E,  /* _t..1!.. */
                    /* 0548 */  0xD0, 0x26, 0x18, 0xD4, 0x97, 0x22, 0x58, 0x43,  /* .&..."XC */
                    /* 0550 */  0xE6, 0x63, 0xF1, 0x05, 0x02, 0x37, 0x65, 0x30,  /* .c...7e0 */
                    /* 0558 */  0xCE, 0x89, 0x5D, 0x13, 0x7C, 0xD9, 0xC1, 0xCD,  /* ..].|... */
                    /* 0560 */  0x19, 0x8C, 0xF0, 0x98, 0xBB, 0x18, 0xBF, 0x3A,  /* .......: */
                    /* 0568 */  0x79, 0x74, 0xFC, 0xA0, 0xE0, 0x1B, 0x0E, 0xC3,  /* yt...... */
                    /* 0570 */  0x7E, 0x32, 0xF3, 0x8C, 0xDE, 0xCB, 0x7C, 0x8D,  /* ~2....|. */
                    /* 0578 */  0xC3, 0xC0, 0x7A, 0xBC, 0x1C, 0xD6, 0x68, 0x61,  /* ..z...ha */
                    /* 0580 */  0x0F, 0xED, 0x3D, 0xC4, 0xFF, 0xFF, 0x43, 0x8C,  /* ..=...C. */
                    /* 0588 */  0xCF, 0x13, 0xC6, 0x08, 0xEB, 0xDB, 0x0B, 0x38,  /* .......8 */
                    /* 0590 */  0xEE, 0x59, 0xF0, 0xEF, 0x1A, 0xE0, 0xB9, 0x84,  /* .Y...... */
                    /* 0598 */  0xF8, 0xAE, 0x01, 0x30, 0xF0, 0xFF, 0x7F, 0xD7,  /* ...0.... */
                    /* 05A0 */  0x00, 0x4E, 0xD7, 0x04, 0xDF, 0x35, 0x80, 0xF7,  /* .N...5.. */
                    /* 05A8 */  0xD0, 0x7D, 0xD7, 0x00, 0xAE, 0xD9, 0xEF, 0x1A,  /* .}...... */
                    /* 05B0 */  0xA8, 0x63, 0x80, 0x15, 0xDE, 0x35, 0xA0, 0x5D,  /* .c...5.] */
                    /* 05B8 */  0xD9, 0xDE, 0xD7, 0x9E, 0xB0, 0xAC, 0xE9, 0xB2,  /* ........ */
                    /* 05C0 */  0x81, 0x52, 0x73, 0xD9, 0x00, 0x14, 0xFC, 0xFF,  /* .Rs..... */
                    /* 05C8 */  0x2F, 0x1B, 0x80, 0x01, 0x29, 0x13, 0x46, 0x85,  /* /...).F. */
                    /* 05D0 */  0x9F, 0x30, 0x05, 0xF1, 0x84, 0x1D, 0xEC, 0xB2,  /* .0...... */
                    /* 05D8 */  0x01, 0x8A, 0x18, 0x97, 0x0D, 0xD0, 0x8F, 0xED,  /* ........ */
                    /* 05E0 */  0x65, 0x03, 0x18, 0xDC, 0x13, 0xF8, 0x6D, 0x03,  /* e.....m. */
                    /* 05E8 */  0x78, 0x43, 0xFA, 0xB6, 0x01, 0xD6, 0xFF, 0xFF,  /* xC...... */
                    /* 05F0 */  0x6D, 0x03, 0xAC, 0xF9, 0x6F, 0x1B, 0x28, 0x0E,  /* m...o.(. */
                    /* 05F8 */  0xAB, 0xBC, 0x6D, 0x40, 0x3C, 0xC9, 0x33, 0x02,  /* ..m@<.3. */
                    /* 0600 */  0xAB, 0xBA, 0x6E, 0xA0, 0xF4, 0x5C, 0x37, 0x00,  /* ..n..\7. */
                    /* 0608 */  0x12, 0x88, 0x99, 0x30, 0x2A, 0xFE, 0x84, 0x29,  /* ...0*..) */
                    /* 0610 */  0x88, 0x27, 0xEC, 0x68, 0xD7, 0x0D, 0x50, 0x04,  /* .'.h..P. */
                    /* 0618 */  0xB9, 0x6E, 0x80, 0x7E, 0x5E, 0x09, 0xFE, 0xFF,  /* .n.~^... */
                    /* 0620 */  0xAF, 0x1B, 0xC0, 0xE0, 0xA2, 0x80, 0xB9, 0x6F,  /* .......o */
                    /* 0628 */  0x00, 0x6F, 0x58, 0x7E, 0xDF, 0x00, 0x7C, 0xDC,  /* .oX~..|. */
                    /* 0630 */  0xC4, 0x31, 0xF7, 0x0D, 0xC0, 0xCC, 0xFF, 0xFF,  /* .1...... */
                    /* 0638 */  0xBE, 0x01, 0xB0, 0xE7, 0xA2, 0x80, 0xBB, 0x6F,  /* .......o */
                    /* 0640 */  0x00, 0xEF, 0x8B, 0xB4, 0xEF, 0x1B, 0x60, 0xFE,  /* ......`. */
                    /* 0648 */  0xFF, 0xDF, 0x37, 0xC0, 0x28, 0x6D, 0xFD, 0x1E,  /* ..7.(m.. */
                    /* 0650 */  0x1C, 0x3D, 0x21, 0x78, 0x7C, 0xB8, 0xFB, 0xA5,  /* .=!x|... */
                    /* 0658 */  0xC7, 0xE7, 0xBB, 0x39, 0x38, 0x06, 0x79, 0x8C,  /* ...98.y. */
                    /* 0660 */  0x87, 0x76, 0xC0, 0xAF, 0xEF, 0x9E, 0x98, 0xEF,  /* .v...... */
                    /* 0668 */  0xE6, 0xC0, 0xFF, 0x4C, 0x70, 0x3C, 0x18, 0x68,  /* ...Lp<.h */
                    /* 0670 */  0x1C, 0x62, 0xAB, 0x97, 0x06, 0x72, 0x34, 0x38,  /* .b...r48 */
                    /* 0678 */  0x3F, 0xDC, 0x19, 0x81, 0x61, 0x15, 0x7F, 0xF2,  /* ?...a... */
                    /* 0680 */  0x47, 0x38, 0xC7, 0xD0, 0xD9, 0xE1, 0x20, 0xB1,  /* G8.... . */
                    /* 0688 */  0x83, 0xE0, 0xC1, 0x56, 0x6D, 0x02, 0x85, 0x86,  /* ...Vm... */
                    /* 0690 */  0x50, 0x14, 0x18, 0x14, 0x8B, 0x0F, 0x18, 0xF8,  /* P....... */
                    /* 0698 */  0x61, 0xB3, 0xB3, 0x00, 0x93, 0x04, 0x87, 0x3A,  /* a......: */
                    /* 06A0 */  0x02, 0xF8, 0x3E, 0xD1, 0xFC, 0x38, 0x74, 0x37,  /* ..>..8t7 */
                    /* 06A8 */  0x38, 0x54, 0x8F, 0xE5, 0xA1, 0x80, 0x9E, 0x01,  /* 8T...... */
                    /* 06B0 */  0x71, 0xC7, 0x0C, 0x32, 0x69, 0xCF, 0x28, 0xE2,  /* q..2i.(. */
                    /* 06B8 */  0x53, 0xC2, 0x29, 0x85, 0x49, 0xE0, 0xF3, 0x03,  /* S.).I... */
                    /* 06C0 */  0x43, 0xE3, 0x04, 0xAF, 0x0D, 0xA1, 0xF9, 0xFF,  /* C....... */
                    /* 06C8 */  0xFF, 0xA4, 0xC0, 0x3C, 0xDF, 0x31, 0x04, 0x6C,  /* ...<.1.l */
                    /* 06D0 */  0x02, 0xBB, 0xBF, 0x64, 0xC8, 0xDA, 0xC0, 0x75,  /* ...d...u */
                    /* 06D8 */  0x4B, 0x32, 0x44, 0x6F, 0x38, 0xB2, 0x85, 0xA2,  /* K2Do8... */
                    /* 06E0 */  0xE9, 0x44, 0x79, 0xDF, 0x88, 0x62, 0x67, 0x08,  /* .Dy..bg. */
                    /* 06E8 */  0xC2, 0x88, 0x12, 0x2C, 0xC8, 0xA3, 0x42, 0xAC,  /* ...,..B. */
                    /* 06F0 */  0x28, 0x2F, 0x05, 0x46, 0x88, 0x18, 0xE2, 0x95,  /* (/.F.... */
                    /* 06F8 */  0x23, 0xD0, 0x09, 0x87, 0x0F, 0xF2, 0xD8, 0x14,  /* #....... */
                    /* 0700 */  0xA7, 0xFD, 0x41, 0x90, 0x58, 0x4F, 0x02, 0x8D,  /* ..A.XO.. */
                    /* 0708 */  0xC5, 0x91, 0x46, 0x83, 0x3A, 0x07, 0x78, 0xB8,  /* ..F.:.x. */
                    /* 0710 */  0x3E, 0xC4, 0x78, 0xF8, 0x0F, 0x21, 0x06, 0x39,  /* >.x..!.9 */
                    /* 0718 */  0xC8, 0x73, 0x7B, 0x54, 0x38, 0x4E, 0x5F, 0x25,  /* .s{T8N_% */
                    /* 0720 */  0x4C, 0xF0, 0x02, 0xE0, 0x83, 0x0A, 0x1C, 0xD7,  /* L....... */
                    /* 0728 */  0x80, 0x9A, 0xF1, 0x33, 0x06, 0x58, 0x8E, 0xE3,  /* ...3.X.. */
                    /* 0730 */  0x3E, 0xA9, 0xC0, 0x1D, 0x8F, 0xEF, 0x07, 0x6C,  /* >......l */
                    /* 0738 */  0xC2, 0x09, 0x2C, 0x7F, 0x10, 0xA8, 0xE3, 0x0C,  /* ..,..... */
                    /* 0740 */  0x9F, 0xE7, 0x0B, 0x8B, 0x21, 0x1F, 0x13, 0x4C,  /* ....!..L */
                    /* 0748 */  0x60, 0xB1, 0x27, 0x1B, 0x3A, 0x1E, 0xF0, 0xDF,  /* `.'.:... */
                    /* 0750 */  0x63, 0x1E, 0x2F, 0x7C, 0x32, 0xF1, 0x7C, 0x4D,  /* c./|2.|M */
                    /* 0758 */  0x30, 0x22, 0x84, 0x9C, 0x8C, 0x07, 0x7D, 0x87,  /* 0"....}. */
                    /* 0760 */  0xC0, 0x5C, 0x6F, 0xD8, 0xB9, 0x85, 0x8B, 0x3A,  /* .\o....: */
                    /* 0768 */  0x68, 0xA0, 0x4E, 0x0B, 0x3E, 0x28, 0xB0, 0x9B,  /* h.N.>(.. */
                    /* 0770 */  0x11, 0xE6, 0xB8, 0xCE, 0xCF, 0x2A, 0x60, 0xF8,  /* .....*`. */
                    /* 0778 */  0xFF, 0x9F, 0x55, 0x60, 0x8F, 0x10, 0xFE, 0xED,  /* ..U`.... */
                    /* 0780 */  0xC1, 0xF3, 0xF2, 0x95, 0xE1, 0xD5, 0x21, 0x81,  /* ......!. */
                    /* 0788 */  0x43, 0x8E, 0x10, 0x3D, 0x2E, 0x8F, 0x10, 0x73,  /* C..=...s */
                    /* 0790 */  0x3E, 0xC2, 0x0C, 0x11, 0x5C, 0x67, 0x01, 0x70,  /* >...\g.p */
                    /* 0798 */  0x0C, 0x11, 0xF8, 0x1C, 0x70, 0xC0, 0x71, 0x69,  /* ....p.qi */
                    /* 07A0 */  0xE2, 0x03, 0xF5, 0x01, 0x07, 0x70, 0x70, 0x4D,  /* .....ppM */
                    /* 07A8 */  0xC3, 0x1D, 0x70, 0xC0, 0x71, 0x16, 0x60, 0xFF,  /* ..p.q.`. */
                    /* 07B0 */  0xFF, 0xC3, 0x0D, 0x2C, 0x49, 0x26, 0x0E, 0x23,  /* ...,I&.# */
                    /* 07B8 */  0x18, 0x11, 0x30, 0x28, 0x02, 0x02, 0xA4, 0xB3,  /* ..0(.... */
                    /* 07C0 */  0x80, 0x0F, 0x29, 0x00, 0x1F, 0xAE, 0x0C, 0x0F,  /* ..)..... */
                    /* 07C8 */  0x29, 0xD8, 0x93, 0x86, 0x07, 0x8E, 0x1B, 0x85,  /* )....... */
                    /* 07D0 */  0x07, 0x8D, 0x0B, 0x30, 0x68, 0x7A, 0xE2, 0x80,  /* ...0hz.. */
                    /* 07D8 */  0x7F, 0x4C, 0xF0, 0x19, 0x05, 0x1C, 0xE3, 0x06,  /* .L...... */
                    /* 07E0 */  0xDF, 0x2A, 0x0C, 0xFC, 0xFF, 0x3F, 0x30, 0xCC,  /* .*...?0. */
                    /* 07E8 */  0xE1, 0xC2, 0x63, 0x39, 0x8A, 0xA0, 0x07, 0x1E,  /* ..c9.... */
                    /* 07F0 */  0xD4, 0xF7, 0x8C, 0x33, 0xF7, 0x24, 0x8F, 0xD1,  /* ...3.$.. */
                    /* 07F8 */  0x51, 0x0F, 0x27, 0xF4, 0xE4, 0x85, 0x3B, 0x57,  /* Q.'...;W */
                    /* 0800 */  0xF9, 0x0A, 0x71, 0x14, 0x18, 0xB8, 0x77, 0x29,  /* ..q...w) */
                    /* 0808 */  0x8F, 0xCF, 0x17, 0x2B, 0xC3, 0x63, 0x46, 0xFB,  /* ...+.cF. */
                    /* 0810 */  0x1E, 0x72, 0xD6, 0x11, 0x02, 0xE2, 0x2F, 0x75,  /* .r..../u */
                    /* 0818 */  0x6C, 0xC0, 0x60, 0x39, 0x18, 0x00, 0x87, 0x01,  /* l.`9.... */
                    /* 0820 */  0xE3, 0x13, 0x0D, 0x58, 0x67, 0x1B, 0x3C, 0xF4,  /* ...Xg.<. */
                    /* 0828 */  0x69, 0x31, 0xC4, 0xE3, 0x0B, 0xFB, 0x56, 0x61,  /* i1....Va */
                    /* 0830 */  0x82, 0xEA, 0x41, 0x75, 0x12, 0xF4, 0xD0, 0xC0,  /* ..Au.... */
                    /* 0838 */  0x01, 0xE8, 0xA1, 0xC1, 0x3F, 0xB9, 0x90, 0xFB,  /* ....?... */
                    /* 0840 */  0x2B, 0x1D, 0x82, 0xB5, 0xE2, 0x69, 0xDE, 0x47,  /* +....i.G */
                    /* 0848 */  0x1E, 0xF3, 0xDC, 0xA2, 0xBC, 0x0D, 0x3C, 0x07,  /* ......<. */
                    /* 0850 */  0xF0, 0xD3, 0x82, 0x87, 0xE3, 0x63, 0x81, 0xC7,  /* .....c.. */
                    /* 0858 */  0xE9, 0x4B, 0x58, 0x82, 0xF7, 0x1A, 0x9F, 0x6C,  /* .KX....l */
                    /* 0860 */  0x1E, 0x5C, 0x58, 0xB2, 0x21, 0xA0, 0x06, 0xEB,  /* .\X.!... */
                    /* 0868 */  0x21, 0x60, 0xA6, 0x9A, 0xC0, 0x49, 0x46, 0x80,  /* !`...IF. */
                    /* 0870 */  0xCA, 0x00, 0xA1, 0x1B, 0xCB, 0xE9, 0x3E, 0x8B,  /* ......>. */
                    /* 0878 */  0x84, 0x38, 0xCD, 0x47, 0x99, 0xC7, 0x02, 0x8F,  /* .8.G.... */
                    /* 0880 */  0xF5, 0xC1, 0xC0, 0xFF, 0x7F, 0xCD, 0x23, 0xD4,  /* ......#. */
                    /* 0888 */  0x7D, 0xCD, 0x33, 0x7B, 0x3A, 0xC0, 0xAC, 0x22,  /* }.3{:.." */
                    /* 0890 */  0xDC, 0x7B, 0xCE, 0x1B, 0x86, 0xD1, 0x9E, 0x2D,  /* .{.....- */
                    /* 0898 */  0x7C, 0xCD, 0x78, 0xD6, 0x34, 0x42, 0x38, 0x76,  /* |.x.4B8v */
                    /* 08A0 */  0x83, 0xF3, 0x48, 0x8C, 0xF0, 0x82, 0xC0, 0x4E,  /* ..H....N */
                    /* 08A8 */  0x0C, 0x0F, 0x30, 0xC6, 0x39, 0x79, 0xC3, 0xFA,  /* ..0.9y.. */
                    /* 08B0 */  0xC2, 0xCB, 0x40, 0x83, 0x19, 0xDB, 0x97, 0x01,  /* ..@..... */
                    /* 08B8 */  0x36, 0x2A, 0xDF, 0x88, 0xC0, 0x97, 0xFC, 0x62,  /* 6*.....b */
                    /* 08C0 */  0x00, 0x65, 0x16, 0xBE, 0x9E, 0xF8, 0xA0, 0xC4,  /* .e...... */
                    /* 08C8 */  0x2E, 0x06, 0x2C, 0xE5, 0xC5, 0x00, 0x54, 0x37,  /* ..,...T7 */
                    /* 08D0 */  0x0C, 0x5F, 0x0C, 0xE0, 0x5F, 0x89, 0x5E, 0x0C,  /* ._.._.^. */
                    /* 08D8 */  0xC0, 0x70, 0x71, 0xF2, 0x3D, 0xC0, 0x1E, 0xEE,  /* .pq.=... */
                    /* 08E0 */  0xA3, 0x74, 0x9C, 0xBE, 0xFD, 0xBD, 0x19, 0xF8,  /* .t...... */
                    /* 08E8 */  0x6C, 0xC0, 0x60, 0x3C, 0xC3, 0x30, 0xC6, 0x08,  /* l.`<.0.. */
                    /* 08F0 */  0xE3, 0x51, 0x86, 0x31, 0xC1, 0xDC, 0xB7, 0x03,  /* .Q.1.... */
                    /* 08F8 */  0xE8, 0x39, 0x87, 0x81, 0x4A, 0x78, 0x3B, 0x80,  /* .9..Jx;. */
                    /* 0900 */  0x72, 0x0E, 0xE8, 0xF2, 0x68, 0x42, 0x4F, 0x01,  /* r...hBO. */
                    /* 0908 */  0x4F, 0x07, 0x3E, 0x29, 0x1A, 0xA2, 0xAF, 0xB1,  /* O.>).... */
                    /* 0910 */  0x0A, 0x26, 0x50, 0xC4, 0x07, 0x0D, 0x3E, 0xB5,  /* .&P...>. */
                    /* 0918 */  0x28, 0x3E, 0x15, 0x78, 0x2D, 0xCF, 0x4E, 0xE1,  /* (>.x-.N. */
                    /* 0920 */  0xE2, 0x9C, 0x89, 0xA7, 0x6A, 0x38, 0x03, 0xBD,  /* ....j8.. */
                    /* 0928 */  0xE6, 0x86, 0x63, 0xFF, 0x7F, 0x38, 0xFC, 0xA9,  /* ..c..8.. */
                    /* 0930 */  0xE0, 0x35, 0x80, 0x1D, 0x24, 0x3D, 0x2D, 0x23,  /* .5..$=-# */
                    /* 0938 */  0xC2, 0x38, 0xA4, 0x3C, 0x32, 0xF8, 0xB6, 0x18,  /* .8.<2... */
                    /* 0940 */  0xC7, 0x90, 0x0F, 0x91, 0xBE, 0x13, 0x18, 0xF2,  /* ........ */
                    /* 0948 */  0x21, 0xEF, 0x79, 0xC7, 0xC0, 0xAF, 0x08, 0x71,  /* !.y....q */
                    /* 0950 */  0x9E, 0xB2, 0x7C, 0x67, 0xF0, 0x65, 0x01, 0x7C,  /* ..|g.e.| */
                    /* 0958 */  0x91, 0x2E, 0x0B, 0x68, 0x68, 0x9F, 0x64, 0x7C,  /* ...hh.d| */
                    /* 0960 */  0x41, 0x30, 0xEC, 0x89, 0xB3, 0x00, 0x77, 0x05,  /* A0....w. */
                    /* 0968 */  0x50, 0x81, 0xFA, 0xAE, 0x00, 0xFF, 0x42, 0xF0,  /* P.....B. */
                    /* 0970 */  0xAE, 0x00, 0x86, 0x79, 0xF9, 0x56, 0xC0, 0x35,  /* ...y.V.5 */
                    /* 0978 */  0x1D, 0x4A, 0xD0, 0x67, 0x12, 0x5F, 0x17, 0x70,  /* .J.g._.p */
                    /* 0980 */  0x53, 0x64, 0xA9, 0x8E, 0x0A, 0xD0, 0x53, 0x4C,  /* Sd....SL */
                    /* 0988 */  0x02, 0x75, 0x47, 0xF7, 0x51, 0x01, 0xC6, 0x4D,  /* .uG.Q..M */
                    /* 0990 */  0xD9, 0x07, 0x54, 0x76, 0x5A, 0x60, 0x67, 0x21,  /* ..TvZ`g! */
                    /* 0998 */  0x76, 0x1D, 0xC1, 0x5D, 0x49, 0x18, 0xCA, 0xB3,  /* v..]I... */
                    /* 09A0 */  0x81, 0x2F, 0x59, 0xFC, 0x70, 0x00, 0x03, 0xDC,  /* ./Y.p... */
                    /* 09A8 */  0xB3, 0x38, 0xC4, 0x08, 0xB1, 0xD9, 0x81, 0xEB,  /* .8...... */
                    /* 09B0 */  0x75, 0xD2, 0x70, 0x2F, 0x44, 0xEC, 0xFF, 0x7F,  /* u.p/D... */
                    /* 09B8 */  0x32, 0x00, 0xE3, 0x51, 0x1B, 0x1C, 0x27, 0x9D,  /* 2..Q..'. */
                    /* 09C0 */  0xF0, 0x91, 0x9E, 0x59, 0xF8, 0x49, 0x19, 0x30,  /* ...Y.I.0 */
                    /* 09C8 */  0x71, 0xF2, 0x03, 0xE3, 0xC9, 0x1A, 0xC6, 0x00,  /* q....... */
                    /* 09D0 */  0xB8, 0xBC, 0x57, 0x95, 0x81, 0xFC, 0x43, 0x90,  /* ..W...C. */
                    /* 09D8 */  0x20, 0x18, 0xD4, 0x29, 0x19, 0x38, 0x1C, 0xC5,  /*  ..).8.. */
                    /* 09E0 */  0x70, 0xA7, 0x64, 0x78, 0x50, 0xF8, 0xC3, 0x00,  /* p.dxP... */
                    /* 09E8 */  0xE6, 0x46, 0xE8, 0x7B, 0x82, 0xA1, 0xDE, 0x93,  /* .F.{.... */
                    /* 09F0 */  0x0E, 0xE3, 0x91, 0xD0, 0x04, 0x3E, 0x2D, 0xC3,  /* .....>-. */
                    /* 09F8 */  0xFA, 0xFF, 0x9F, 0x96, 0xF9, 0x39, 0x21, 0xFE,  /* .....9!. */
                    /* 0A00 */  0x53, 0xCE, 0xFB, 0xC5, 0x83, 0xB2, 0x31, 0xA2,  /* S.....1. */
                    /* 0A08 */  0xBC, 0x2A, 0xFB, 0x9C, 0x69, 0x14, 0x76, 0x4B,  /* .*..i.vK */
                    /* 0A10 */  0x7E, 0x73, 0x78, 0x55, 0xF6, 0x69, 0xF9, 0xDC,  /* ~sxU.i.. */
                    /* 0A18 */  0x22, 0xBD, 0x2F, 0x7B, 0xE4, 0x31, 0xE3, 0xC4,  /* "./{.1.. */
                    /* 0A20 */  0x0A, 0x12, 0xE8, 0x7D, 0x23, 0x4A, 0xD8, 0x18,  /* ...}#J.. */
                    /* 0A28 */  0xE1, 0x02, 0x3D, 0x2D, 0xB3, 0x63, 0xBB, 0x87,  /* ..=-.c.. */
                    /* 0A30 */  0xEC, 0xB3, 0x02, 0xEE, 0xEC, 0x00, 0x77, 0x7A,  /* ......wz */
                    /* 0A38 */  0xFC, 0xF4, 0x00, 0x38, 0x01, 0x7A, 0x7A, 0x00,  /* ...8.zz. */
                    /* 0A40 */  0xDB, 0x79, 0x03, 0xEE, 0x81, 0x00, 0x71, 0xFC,  /* .y....q. */
                    /* 0A48 */  0x47, 0x05, 0xBF, 0xB2, 0x50, 0x38, 0x7E, 0x6C,  /* G...P8~l */
                    /* 0A50 */  0xE7, 0xC7, 0x12, 0xDC, 0xE1, 0xC0, 0x47, 0x06,  /* ......G. */
                    /* 0A58 */  0x1F, 0x20, 0x71, 0x43, 0xF1, 0xA1, 0x02, 0x79,  /* . qC...y */
                    /* 0A60 */  0x16, 0x00, 0xC5, 0xE8, 0xD9, 0x08, 0xD8, 0x0D,  /* ........ */
                    /* 0A68 */  0xE6, 0xA5, 0x25, 0xCA, 0xFF, 0xFF, 0xBD, 0x81,  /* ..%..... */
                    /* 0A70 */  0x9D, 0x52, 0x70, 0x07, 0x01, 0xF0, 0x1D, 0x03,  /* .Rp..... */
                    /* 0A78 */  0xC0, 0x3B, 0x18, 0x2E, 0x6B, 0xCC, 0x28, 0x21,  /* .;..k.(! */
                    /* 0A80 */  0x30, 0x1A, 0x33, 0xEE, 0x10, 0xC2, 0x4F, 0x04,  /* 0.3...O. */
                    /* 0A88 */  0xB8, 0x31, 0x7B, 0xDC, 0x1E, 0x33, 0xEE, 0x38,  /* .1{..3.8 */
                    /* 0A90 */  0xCB, 0x47, 0xF5, 0x94, 0x11, 0xCA, 0x07, 0x0E,  /* .G...... */
                    /* 0A98 */  0x76, 0xCE, 0x78, 0x23, 0xE0, 0x43, 0x07, 0x1E,  /* v.x#.C.. */
                    /* 0AA0 */  0x07, 0x18, 0xDC, 0x91, 0x02, 0x8C, 0x97, 0x03,  /* ........ */
                    /* 0AA8 */  0x36, 0x76, 0x70, 0x07, 0x21, 0xA7, 0x40, 0x96,  /* 6vp.!.@. */
                    /* 0AB0 */  0x0E, 0xA3, 0xB1, 0xE3, 0x64, 0x03, 0xE9, 0x18,  /* ....d... */
                    /* 0AB8 */  0xE3, 0x43, 0xAE, 0xC7, 0x8E, 0x1B, 0xAC, 0xC7,  /* .C...... */
                    /* 0AC0 */  0x8E, 0x3B, 0xBE, 0x60, 0xFF, 0xFF, 0xC7, 0x17,  /* .;.`.... */
                    /* 0AC8 */  0x30, 0x8C, 0x81, 0x8B, 0x1F, 0x06, 0xFA, 0xE6,  /* 0....... */
                    /* 0AD0 */  0xE7, 0xD1, 0x19, 0xDC, 0xC3, 0xF6, 0x09, 0x26,  /* .......& */
                    /* 0AD8 */  0xC6, 0x1B, 0x4C, 0x88, 0x47, 0x96, 0x97, 0x96,  /* ..L.G... */
                    /* 0AE0 */  0x08, 0x0F, 0x2D, 0xBE, 0xB9, 0xBC, 0xB4, 0xF8,  /* ..-..... */
                    /* 0AE8 */  0x16, 0x63, 0x94, 0x10, 0x11, 0x0E, 0x26, 0xCE,  /* .c....&. */
                    /* 0AF0 */  0x13, 0x8C, 0x11, 0x0E, 0x3C, 0x8A, 0x21, 0x22,  /* ....<.!" */
                    /* 0AF8 */  0x9C, 0x40, 0x88, 0x93, 0x3E, 0xD9, 0x20, 0xE1,  /* .@..>. . */
                    /* 0B00 */  0x63, 0x84, 0x8D, 0x16, 0xE5, 0x09, 0x86, 0x8D,  /* c....... */
                    /* 0B08 */  0x85, 0x9F, 0x57, 0x3C, 0x78, 0x7E, 0x5A, 0xF3,  /* ..W<x~Z. */
                    /* 0B10 */  0x5D, 0xD0, 0x93, 0x39, 0xC7, 0x87, 0x2C, 0x4F,  /* ]..9..,O */
                    /* 0B18 */  0xED, 0x71, 0xD2, 0x87, 0x59, 0xDC, 0xA0, 0x1E,  /* .q..Y... */
                    /* 0B20 */  0x1C, 0xD9, 0x5D, 0xC7, 0xC7, 0x6B, 0xEC, 0x29,  /* ..]..k.) */
                    /* 0B28 */  0xC8, 0x43, 0xE0, 0x27, 0x02, 0x5F, 0x10, 0x3D,  /* .C.'._.= */
                    /* 0B30 */  0x59, 0xDF, 0xF5, 0xD8, 0xBD, 0xCC, 0x18, 0xD5,  /* Y....... */
                    /* 0B38 */  0x4F, 0x01, 0x75, 0x4C, 0x39, 0x83, 0x57, 0x08,  /* O.uL9.W. */
                    /* 0B40 */  0x76, 0xCF, 0xF3, 0x21, 0xDB, 0x77, 0x49, 0x36,  /* v..!.wI6 */
                    /* 0B48 */  0x0A, 0xDC, 0x21, 0xC1, 0x67, 0x24, 0x7E, 0xAA,  /* ..!.g$~. */
                    /* 0B50 */  0xF0, 0x30, 0x3C, 0x0A, 0x18, 0x33, 0x78, 0x47,  /* .0<..3xG */
                    /* 0B58 */  0x38, 0xB4, 0x10, 0x07, 0xFC, 0xBE, 0xCB, 0x86,  /* 8....... */
                    /* 0B60 */  0x1A, 0xE3, 0xF4, 0x7C, 0xFE, 0x60, 0x83, 0x80,  /* ...|.`.. */
                    /* 0B68 */  0x0F, 0x75, 0xA8, 0x1E, 0xE6, 0x51, 0xBD, 0x14,  /* .u...Q.. */
                    /* 0B70 */  0x32, 0x9C, 0xB3, 0x83, 0x3B, 0x08, 0xEC, 0xF1,  /* 2...;... */
                    /* 0B78 */  0xC3, 0x83, 0xE0, 0x37, 0x4B, 0x3E, 0x08, 0x76,  /* ...7K>.v */
                    /* 0B80 */  0xBE, 0x79, 0x83, 0x33, 0xC8, 0xFF, 0xFF, 0x18,  /* .y.3.... */
                    /* 0B88 */  0x60, 0x9F, 0xA9, 0x7C, 0x34, 0x41, 0x1C, 0x01,  /* `..|4A.. */
                    /* 0B90 */  0xD1, 0xE7, 0x0F, 0x8F, 0xE1, 0x4D, 0x8E, 0x0F,  /* .....M.. */
                    /* 0B98 */  0x07, 0x7B, 0xF4, 0xC0, 0x9D, 0x44, 0xE0, 0x1E,  /* .{...D.. */
                    /* 0BA0 */  0xBB, 0x0E, 0xDA, 0xD7, 0x38, 0x5F, 0xB4, 0x60,  /* ....8_.` */
                    /* 0BA8 */  0xDC, 0xF7, 0x9E, 0x45, 0xC0, 0x8F, 0xF1, 0xD8,  /* ...E.... */
                    /* 0BB0 */  0x02, 0x8E, 0x43, 0x09, 0xB8, 0x83, 0x1D, 0xD7,  /* ..C..... */
                    /* 0BB8 */  0x38, 0x84, 0xA2, 0xC0, 0xE8, 0x50, 0x82, 0x8B,  /* 8....P.. */
                    /* 0BC0 */  0x01, 0x24, 0x18, 0xC7, 0x38, 0xA3, 0xA1, 0x2F,  /* .$..8../ */
                    /* 0BC8 */  0x91, 0x3E, 0xA4, 0xC1, 0x19, 0x34, 0xEC, 0x79,  /* .>...4.y */
                    /* 0BD0 */  0x3E, 0xA1, 0x70, 0x7B, 0x02, 0x14, 0x9D, 0x50,  /* >.p{...P */
                    /* 0BD8 */  0x40, 0x86, 0xFB, 0x0C, 0x82, 0x3D, 0x21, 0xF0,  /* @....=!. */
                    /* 0BE0 */  0x33, 0x08, 0xFB, 0xFF, 0x1F, 0x1C, 0x3D, 0xEE,  /* 3.....=. */
                    /* 0BE8 */  0xF7, 0x46, 0x9F, 0x1A, 0xD9, 0xDC, 0x1F, 0x02,  /* .F...... */
                    /* 0BF0 */  0x4E, 0xE0, 0xDC, 0xD9, 0xA9, 0x19, 0x77, 0x66,  /* N.....wf */
                    /* 0BF8 */  0xC0, 0x9E, 0x3F, 0x3C, 0x04, 0x7E, 0x2E, 0xF0,  /* ..?<.~.. */
                    /* 0C00 */  0xF0, 0x3D, 0x04, 0xFC, 0xE0, 0x1F, 0x98, 0x0D,  /* .=...... */
                    /* 0C08 */  0x0E, 0xC6, 0x53, 0x84, 0xAF, 0x1D, 0x1C, 0x9C,  /* ..S..... */
                    /* 0C10 */  0x9F, 0x06, 0x0C, 0xCE, 0x5F, 0xA1, 0x3E, 0xCF,  /* ...._.>. */
                    /* 0C18 */  0x33, 0x70, 0xEC, 0xA9, 0xD7, 0xF7, 0x0E, 0xCF,  /* 3p...... */
                    /* 0C20 */  0xD7, 0x87, 0x0A, 0xFC, 0x4D, 0xCF, 0x87, 0x0A,  /* ....M... */
                    /* 0C28 */  0x70, 0x1C, 0x1E, 0xF8, 0x61, 0x85, 0x0D, 0xE1,  /* p...a... */
                    /* 0C30 */  0x51, 0x00, 0x7F, 0x6A, 0xF1, 0xF1, 0x2F, 0xCE,  /* Q..j../. */
                    /* 0C38 */  0x53, 0x04, 0xBB, 0x8D, 0x60, 0x0F, 0x17, 0x80,  /* S...`... */
                    /* 0C40 */  0xA3, 0x68, 0x67, 0x31, 0x54, 0x98, 0xB3, 0x18,  /* .hg1T... */
                    /* 0C48 */  0xF9, 0xFF, 0x9F, 0xA3, 0x50, 0x67, 0x31, 0x7A,  /* ....Pg1z */
                    /* 0C50 */  0xB8, 0x00, 0x5C, 0x08, 0x3E, 0x1E, 0x80, 0xE6,  /* ..\.>... */
                    /* 0C58 */  0x20, 0xF0, 0xB8, 0xE0, 0x0B, 0xC1, 0x91, 0x1C,  /*  ....... */
                    /* 0C60 */  0xC8, 0xD3, 0x01, 0xE0, 0x53, 0x1E, 0x09, 0x3D,  /* ....S..= */
                    /* 0C68 */  0x1F, 0x59, 0x10, 0x0C, 0xEA, 0x7C, 0xE0, 0x13,  /* .Y...|.. */
                    /* 0C70 */  0x8A, 0x8F, 0x1D, 0xFC, 0x6C, 0xE0, 0x1B, 0xB9,  /* ....l... */
                    /* 0C78 */  0x87, 0xCA, 0x4F, 0xCD, 0x3E, 0x69, 0xF3, 0xE0,  /* ..O.>i.. */
                    /* 0C80 */  0x3F, 0x69, 0xD9, 0x80, 0x51, 0xA0, 0x61, 0xA0,  /* ?i..Q.a. */
                    /* 0C88 */  0x46, 0xE4, 0x23, 0xD2, 0xFF, 0xFF, 0xB9, 0x0D,  /* F.#..... */
                    /* 0C90 */  0x1B, 0x60, 0x68, 0xF4, 0x1C, 0x0E, 0xE3, 0x80,  /* .`h..... */
                    /* 0C98 */  0xEB, 0x73, 0x38, 0x76, 0x40, 0x3E, 0x87, 0xC3,  /* .s8v@>.. */
                    /* 0CA0 */  0x3F, 0x47, 0xC3, 0x1F, 0x1B, 0x3B, 0xDD, 0xF3,  /* ?G...;.. */
                    /* 0CA8 */  0x81, 0xC1, 0xBA, 0x7E, 0x63, 0x06, 0x06, 0xB6,  /* ...~c... */
                    /* 0CB0 */  0x6F, 0x91, 0x07, 0x06, 0x1C, 0x51, 0xCF, 0xC6,  /* o....Q.. */
                    /* 0CB8 */  0x57, 0x08, 0x0F, 0x0C, 0x6C, 0x80, 0x1E, 0x18,  /* W...l... */
                    /* 0CC0 */  0xF0, 0x89, 0x05, 0x21, 0x27, 0x03, 0x43, 0x9D,  /* ...!'.C. */
                    /* 0CC8 */  0x32, 0x8C, 0x1C, 0xF3, 0x89, 0xC3, 0xC3, 0xF0,  /* 2....... */
                    /* 0CD0 */  0xA1, 0x22, 0xEA, 0x33, 0xC0, 0x23, 0x1E, 0x1B,  /* .".3.#.. */
                    /* 0CD8 */  0x1B, 0xFB, 0xFF, 0x8F, 0x0D, 0x2C, 0xC7, 0x16,  /* .....,.. */
                    /* 0CE0 */  0x8F, 0x0D, 0xFC, 0x47, 0x78, 0xFC, 0xD8, 0xE0,  /* ...Gx... */
                    /* 0CE8 */  0x8C, 0xE5, 0xD1, 0xC4, 0x97, 0x99, 0x23, 0x3B,  /* ......#; */
                    /* 0CF0 */  0x8D, 0x33, 0x7B, 0x0D, 0xF1, 0xD1, 0xEE, 0xF1,  /* .3{..... */
                    /* 0CF8 */  0xDB, 0x63, 0x03, 0x97, 0x85, 0xB1, 0x01, 0xA5,  /* .c...... */
                    /* 0D00 */  0x90, 0x63, 0x43, 0x1F, 0x52, 0x7C, 0x0A, 0xB0,  /* .cC.R|.. */
                    /* 0D08 */  0x71, 0x54, 0x32, 0x0F, 0x1F, 0xAF, 0x7C, 0x62,  /* qT2...|b */
                    /* 0D10 */  0x38, 0xBA, 0x20, 0x6F, 0xE8, 0xBE, 0x5C, 0xF8,  /* 8. o..\. */
                    /* 0D18 */  0x48, 0x63, 0x30, 0x5F, 0x5A, 0x7C, 0x06, 0xE5,  /* Hc0_Z|.. */
                    /* 0D20 */  0x43, 0x04, 0x97, 0x86, 0x21, 0x02, 0xA5, 0x50,  /* C...!..P */
                    /* 0D28 */  0x43, 0x44, 0x8F, 0xE7, 0xFF, 0xFF, 0x08, 0xE6,  /* CD...... */
                    /* 0D30 */  0x21, 0xB2, 0xA1, 0x81, 0xF7, 0x1B, 0xA3, 0xA1,  /* !....... */
                    /* 0D38 */  0x01, 0xA1, 0x70, 0x43, 0x43, 0x1F, 0xD6, 0x7C,  /* ..pCC..| */
                    /* 0D40 */  0x08, 0x60, 0x10, 0xBE, 0x0D, 0xB0, 0xAB, 0x80,  /* .`...... */
                    /* 0D48 */  0xAF, 0x42, 0x1E, 0xE0, 0x93, 0x28, 0x1B, 0x1E,  /* .B...(.. */
                    /* 0D50 */  0xF8, 0x06, 0xE5, 0xE1, 0x01, 0x9F, 0xF0, 0xC0,  /* ........ */
                    /* 0D58 */  0x5E, 0x85, 0x87, 0x47, 0xCF, 0x4A, 0x1E, 0x1E,  /* ^..G.J.. */
                    /* 0D60 */  0x3C, 0x90, 0xC7, 0x08, 0x76, 0x0E, 0xF1, 0xE0,  /* <...v... */
                    /* 0D68 */  0xC0, 0x61, 0x62, 0x70, 0xA0, 0x38, 0xFA, 0xE3,  /* .abp.8.. */
                    /* 0D70 */  0x86, 0xC0, 0x2E, 0xB3, 0x9E, 0x38, 0xBF, 0xB2,  /* .....8.. */
                    /* 0D78 */  0x78, 0x50, 0xF8, 0xFF, 0xFF, 0x11, 0x00, 0xD6,  /* xP...... */
                    /* 0D80 */  0x71, 0x06, 0x7C, 0xC1, 0x0E, 0x07, 0xE8, 0x63,  /* q.|....c */
                    /* 0D88 */  0x22, 0x1B, 0xC3, 0x43, 0xC4, 0x83, 0xAB, 0x07,  /* "..C.... */
                    /* 0D90 */  0xE2, 0x6B, 0xC7, 0x6B, 0x31, 0xEE, 0x68, 0x00,  /* .k.k1.h. */
                    /* 0D98 */  0x2E, 0x15, 0x47, 0x03, 0xA0, 0x74, 0xB0, 0x05,  /* ..G..t.. */
                    /* 0DA0 */  0xC7, 0x3D, 0xCD, 0x47, 0x3B, 0xCC, 0x1C, 0x3D,  /* .=.G;..= */
                    /* 0DA8 */  0x80, 0xE7, 0x37, 0x8F, 0x96, 0x9F, 0xDF, 0x00,  /* ..7..... */
                    /* 0DB0 */  0x47, 0x41, 0x0F, 0xB6, 0x74, 0xE0, 0x8E, 0x06,  /* GA..t... */
                    /* 0DB8 */  0x83, 0x3A, 0xBF, 0x61, 0xFE, 0xFF, 0xE7, 0x37,  /* .:.a...7 */
                    /* 0DC0 */  0x30, 0x44, 0x00, 0xD7, 0x99, 0xC6, 0xE7, 0x17,  /* 0D...... */
                    /* 0DC8 */  0x38, 0x43, 0x3D, 0x68, 0x5F, 0x13, 0x3C, 0x6B,  /* 8C=h_.<k */
                    /* 0DD0 */  0xDF, 0xB8, 0xD8, 0x39, 0x01, 0x5C, 0x03, 0xF2,  /* ...9.\.. */
                    /* 0DD8 */  0x49, 0x07, 0x38, 0x02, 0x9F, 0xC4, 0x03, 0xFE,  /* I.8..... */
                    /* 0DE0 */  0xA1, 0x81, 0x79, 0x58, 0x1E, 0x1A, 0xF0, 0x39,  /* ..yX...9 */
                    /* 0DE8 */  0x1A, 0xE0, 0x4E, 0x14, 0xE0, 0xB9, 0x8D, 0xE0,  /* ..N..... */
                    /* 0DF0 */  0x0E, 0x14, 0xC0, 0xE2, 0xFF, 0x7F, 0xA0, 0x00,  /* ........ */
                    /* 0DF8 */  0x56, 0x47, 0x7C, 0x8F, 0x8B, 0x43, 0xE3, 0x10,  /* VG|..C.. */
                    /* 0E00 */  0x1F, 0xD2, 0xCE, 0xD9, 0xE7, 0xAF, 0x33, 0xC5,  /* ......3. */
                    /* 0E08 */  0x9D, 0x45, 0xC0, 0x70, 0xA2, 0x47, 0xBC, 0xD3,  /* .E.p.G.. */
                    /* 0E10 */  0x0C, 0xE4, 0x07, 0x86, 0x84, 0xC0, 0xA0, 0x4E,  /* .......N */
                    /* 0E18 */  0x40, 0x1E, 0x8A, 0x0F, 0x06, 0x1C, 0xD8, 0x47,  /* @......G */
                    /* 0E20 */  0x04, 0x76, 0x2E, 0x60, 0x07, 0x28, 0xC3, 0xF1,  /* .v.`.(.. */
                    /* 0E28 */  0xB3, 0x80, 0x4F, 0x09, 0x0F, 0x35, 0xC7, 0xF1,  /* ..O..5.. */
                    /* 0E30 */  0xB8, 0xE9, 0xBB, 0x99, 0x21, 0xD9, 0xD5, 0xE0,  /* ....!... */
                    /* 0E38 */  0xF9, 0x07, 0x7B, 0xDA, 0x85, 0x73, 0xC4, 0x05,  /* ..{..s.. */
                    /* 0E40 */  0x17, 0x81, 0xCF, 0x3A, 0x1E, 0x05, 0x3F, 0x3D,  /* ...:..?= */
                    /* 0E48 */  0x78, 0x8E, 0x6F, 0x0C, 0x3E, 0x3D, 0x30, 0xF7,  /* x.o.>=0. */
                    /* 0E50 */  0x02, 0xCC, 0x1D, 0xBA, 0x85, 0x70, 0x4C, 0xAF,  /* .....pL. */
                    /* 0E58 */  0x0F, 0x31, 0x8E, 0xFA, 0xB1, 0xA1, 0x2D, 0x01,  /* .1....-. */
                    /* 0E60 */  0xDA, 0x50, 0x74, 0x07, 0x78, 0x19, 0x88, 0x12,  /* .Pt.x... */
                    /* 0E68 */  0xE2, 0x08, 0x22, 0xB5, 0x86, 0xA2, 0x99, 0x47,  /* .."....G */
                    /* 0E70 */  0x8A, 0x12, 0x30, 0x9E, 0x61, 0x1A, 0x9B, 0x8C,  /* ..0.a... */
                    /* 0E78 */  0x20, 0x63, 0x84, 0x8E, 0x13, 0x2C, 0x4A, 0xB4,  /*  c...,J. */
                    /* 0E80 */  0x57, 0x80, 0xF6, 0x47, 0xCB, 0x56, 0xAC, 0xB1,  /* W..G.V.. */
                    /* 0E88 */  0x38, 0xD2, 0xC9, 0x12, 0x3D, 0x6C, 0x1F, 0xB3,  /* 8...=l.. */
                    /* 0E90 */  0xF1, 0xA7, 0x55, 0xCC, 0xFF, 0x9F, 0xE0, 0x55,  /* ..U....U */
                    /* 0E98 */  0xC5, 0x07, 0x05, 0x1F, 0x00, 0xF0, 0x2E, 0x01,  /* ........ */
                    /* 0EA0 */  0x75, 0x75, 0xF4, 0xB8, 0x7D, 0xDE, 0x00, 0xFF,  /* uu..}... */
                    /* 0EA8 */  0xF5, 0x02, 0x4B, 0x50, 0xFE, 0x20, 0x50, 0x23,  /* ..KP. P# */
                    /* 0EB0 */  0x33, 0xB4, 0xC7, 0xF9, 0x36, 0x63, 0xC8, 0x27,  /* 3...6c.' */
                    /* 0EB8 */  0x27, 0x13, 0x58, 0xEC, 0x09, 0x15, 0x68, 0x0C,  /* '.X...h. */
                    /* 0EC0 */  0xFE, 0x69, 0xC3, 0xD7, 0x76, 0xCF, 0xD7, 0xE7,  /* .i..v... */
                    /* 0EC8 */  0x38, 0x80, 0x0F, 0xFF, 0xFF, 0x73, 0x1C, 0x60,  /* 8....s.` */
                    /* 0ED0 */  0x68, 0x38, 0xB8, 0xA3, 0x0F, 0xDC, 0x2B, 0x09,  /* h8....+. */
                    /* 0ED8 */  0x3F, 0xFC, 0x00, 0xCE, 0x80, 0x1E, 0x7E, 0xC0,  /* ?.....~. */
                    /* 0EE0 */  0x3E, 0x54, 0xDC, 0x10, 0x78, 0x84, 0x15, 0xD1,  /* >T..x... */
                    /* 0EE8 */  0xC3, 0x80, 0x45, 0xC3, 0xA0, 0xCE, 0x6B, 0xD8,  /* ..E...k. */
                    /* 0EF0 */  0xFF, 0xFF, 0x79, 0x0D, 0xB6, 0x38, 0x70, 0x1D,  /* ..y..8p. */
                    /* 0EF8 */  0x54, 0x7D, 0x36, 0x86, 0x33, 0xA8, 0xD3, 0xEE,  /* T}6.3... */
                    /* 0F00 */  0xFD, 0xAE, 0x40, 0x2E, 0x22, 0x1E, 0xF4, 0xF9,  /* ..@."... */
                    /* 0F08 */  0x3C, 0x3B, 0xB0, 0x03, 0x1B, 0xF0, 0x1F, 0x1B,  /* <;...... */
                    /* 0F10 */  0x9C, 0x1B, 0xC0, 0x53, 0x74, 0x84, 0x63, 0x03,  /* ...St.c. */
                    /* 0F18 */  0xFB, 0x89, 0x0D, 0x38, 0x9D, 0xED, 0xE0, 0x5C,  /* ...8...\ */
                    /* 0F20 */  0xA1, 0xD8, 0x6D, 0x1F, 0x37, 0x34, 0xB0, 0xD9,  /* ..m.74.. */
                    /* 0F28 */  0x18, 0x1A, 0xC8, 0xFE, 0xFF, 0x87, 0x4F, 0xE0,  /* ......O. */
                    /* 0F30 */  0x75, 0xE8, 0xE2, 0x97, 0x8A, 0xE7, 0x2F, 0x7E,  /* u...../~ */
                    /* 0F38 */  0xB8, 0x03, 0x9C, 0x4B, 0x3B, 0xD9, 0xA1, 0xC4,  /* ...K;... */
                    /* 0F40 */  0x1C, 0xEE, 0x00, 0x29, 0xFF, 0xFF, 0xC3, 0x1D,  /* ...).... */
                    /* 0F48 */  0xB8, 0xEE, 0x72, 0xEF, 0x0C, 0x2F, 0x0D, 0x9E,  /* ..r../.. */
                    /* 0F50 */  0xD3, 0xBB, 0x9D, 0x31, 0x5E, 0xEA, 0x8C, 0x10,  /* ...1^... */
                    /* 0F58 */  0x85, 0xDD, 0x06, 0xA2, 0xD9, 0xDB, 0xE1, 0x8E,  /* ........ */
                    /* 0F60 */  0x9C, 0xF0, 0x38, 0x66, 0xA4, 0x27, 0xBD, 0x60,  /* ..8f.'.` */
                    /* 0F68 */  0x91, 0x22, 0x1E, 0x4E, 0x94, 0x10, 0xC1, 0x5E,  /* .".N...^ */
                    /* 0F70 */  0x27, 0x9E, 0xF2, 0x1E, 0xEE, 0x98, 0x90, 0xC3,  /* '....... */
                    /* 0F78 */  0x1D, 0xD0, 0x71, 0x7D, 0xB8, 0x03, 0x2A, 0x27,  /* ..q}..*' */
                    /* 0F80 */  0x2A, 0xFC, 0xE1, 0x0E, 0x30, 0xFB, 0xFF, 0x3F,  /* *...0..? */
                    /* 0F88 */  0xDC, 0x01, 0x8C, 0x3A, 0xA3, 0xE1, 0x0E, 0x77,  /* ...:...w */
                    /* 0F90 */  0x60, 0x3B, 0xFD, 0x00, 0xE7, 0xFF, 0xFF, 0xE9,  /* `;...... */
                    /* 0F98 */  0x07, 0x78, 0x8F, 0x15, 0xC6, 0x18, 0x78, 0xB4,  /* .x....x. */
                    /* 0FA0 */  0x25, 0x51, 0x20, 0x87, 0x81, 0x41, 0x11, 0x38,  /* %Q ..A.8 */
                    /* 0FA8 */  0xC8, 0xA1, 0x8E, 0x06, 0x3B, 0xBD, 0x40, 0x99,  /* ....;.@. */
                    /* 0FB0 */  0xCB, 0x81, 0x9E, 0xC2, 0x33, 0x82, 0x0F, 0x60,  /* ....3..` */
                    /* 0FB8 */  0x60, 0x3F, 0xD5, 0x01, 0x87, 0x53, 0x03, 0x3E,  /* `?...S.> */
                    /* 0FC0 */  0xD0, 0x09, 0x05, 0x3D, 0x0A, 0x9F, 0x4D, 0xC0,  /* ...=..M. */
                    /* 0FC8 */  0x7B, 0xA4, 0x03, 0x36, 0xFF, 0xFF, 0xB3, 0x09,  /* {..6.... */
                    /* 0FD0 */  0x7B, 0x35, 0xFA, 0x6C, 0x82, 0x63, 0x31, 0xEA,  /* {5.l.c1. */
                    /* 0FD8 */  0x1B, 0xC4, 0x21, 0xBE, 0x74, 0xF8, 0xDC, 0xF8,  /* ..!.t... */
                    /* 0FE0 */  0x4E, 0xE3, 0x4B, 0x00, 0xE6, 0xFA, 0x61, 0x82,  /* N.K...a. */
                    /* 0FE8 */  0x31, 0x21, 0xF4, 0xC9, 0xF2, 0xA9, 0x0E, 0x38,  /* 1!.....8 */
                    /* 0FF0 */  0x1D, 0x4E, 0xE0, 0x8D, 0x1E, 0x77, 0x5A, 0xF0,  /* .N...wZ. */
                    /* 0FF8 */  0x70, 0x38, 0xB8, 0x67, 0xF3, 0x2C, 0xF1, 0x44,  /* p8.g.,.D */
                    /* 1000 */  0xE4, 0x71, 0xF8, 0x74, 0x02, 0xBC, 0x0E, 0x18,  /* .q.t.... */
                    /* 1008 */  0x98, 0x19, 0x84, 0x7F, 0x08, 0x61, 0xA7, 0x4F,  /* .....a.O */
                    /* 1010 */  0x1F, 0x99, 0x3C, 0xF7, 0x77, 0x23, 0x9F, 0x4E,  /* ..<.w#.N */
                    /* 1018 */  0x00, 0x5F, 0xFF, 0xFF, 0xA3, 0x1E, 0xB0, 0x90,  /* ._...... */
                    /* 1020 */  0xA8, 0xE1, 0x9C, 0x87, 0x11, 0x05, 0x83, 0x3A,  /* .......: */
                    /* 1028 */  0xEA, 0x01, 0xD6, 0x2E, 0x7A, 0x36, 0x86, 0xA0,  /* ....z6.. */
                    /* 1030 */  0x8B, 0xC0, 0x19, 0x84, 0x78, 0xBC, 0x7B, 0xC5,  /* ....x.{. */
                    /* 1038 */  0x8B, 0xE4, 0x3B, 0x40, 0x9C, 0x47, 0x3D, 0x83,  /* ..;@.G=. */
                    /* 1040 */  0xBD, 0x7D, 0x3C, 0x48, 0x44, 0x89, 0xF3, 0xA8,  /* .}<HD... */
                    /* 1048 */  0xE7, 0xD1, 0x87, 0xF2, 0xE4, 0x43, 0x9D, 0x7E,  /* .....C.~ */
                    /* 1050 */  0xAC, 0xB0, 0x81, 0x9E, 0xF8, 0x5E, 0xF4, 0x42,  /* .....^.B */
                    /* 1058 */  0x1A, 0xE1, 0x51, 0x8F, 0x09, 0x7A, 0x79, 0xE8,  /* ..Q..zy. */
                    /* 1060 */  0x70, 0xE5, 0xA3, 0x1E, 0x60, 0xE5, 0xFF, 0x7F,  /* p...`... */
                    /* 1068 */  0xD4, 0x03, 0xF8, 0xFF, 0xFF, 0x3F, 0xEA, 0x81,  /* .....?.. */
                    /* 1070 */  0xF9, 0xF4, 0x04, 0xF8, 0x3F, 0xD6, 0xE0, 0x8E,  /* ....?... */
                    /* 1078 */  0x8A, 0x60, 0x3B, 0x3F, 0x01, 0x2E, 0xFE, 0xFF,  /* .`;?.... */
                    /* 1080 */  0xE7, 0x27, 0x30, 0x0D, 0xDD, 0xE7, 0x27, 0x30,  /* .'0...'0 */
                    /* 1088 */  0x8F, 0x16, 0xE6, 0x01, 0x01, 0x71, 0x56, 0x44,  /* .....qVD */
                    /* 1090 */  0x85, 0x7F, 0xC8, 0x18, 0x0E, 0x15, 0x1C, 0x48,  /* .......H */
                    /* 1098 */  0xBF, 0x28, 0x1F, 0x01, 0x81, 0xCB, 0x51, 0x11,  /* .(....Q. */
                    /* 10A0 */  0x38, 0x9C, 0x59, 0xF0, 0x42, 0x4E, 0x1D, 0xE8,  /* 8.Y.BN.. */
                    /* 10A8 */  0xF1, 0x18, 0xF4, 0x95, 0xC3, 0x57, 0x02, 0x7E,  /* .....W.~ */
                    /* 10B0 */  0xE4, 0x60, 0xA1, 0x8F, 0x1C, 0xA0, 0x3A, 0x2C,  /* .`....:, */
                    /* 10B8 */  0x82, 0xEF, 0xC8, 0x01, 0x8E, 0xEB, 0x55, 0x60,  /* ......U` */
                    /* 10C0 */  0xFE, 0xFF, 0x07, 0x66, 0xB7, 0x83, 0xD7, 0x4F,  /* ...f...O */
                    /* 10C8 */  0x4F, 0xE2, 0x31, 0xEA, 0x38, 0x43, 0x14, 0x8E,  /* O.1.8C.. */
                    /* 10D0 */  0x49, 0x0E, 0x06, 0x91, 0xDE, 0xC1, 0xD8, 0x00,  /* I....... */
                    /* 10D8 */  0x5F, 0x5E, 0x7C, 0xA8, 0xF2, 0x31, 0x10, 0x18,  /* _^|..1.. */
                    /* 10E0 */  0x42, 0x9C, 0x0D, 0x3F, 0x5D, 0x18, 0xF3, 0x74,  /* B..?]..t */
                    /* 10E8 */  0xF8, 0x31, 0x10, 0xB0, 0x2E, 0xF5, 0x0C, 0x88,  /* .1...... */
                    /* 10F0 */  0x12, 0x77, 0x0C, 0x04, 0x52, 0xFF, 0xFF, 0x63,  /* .w..R..c */
                    /* 10F8 */  0x20, 0x70, 0xBD, 0x04, 0x7A, 0xCC, 0x67, 0xFC,  /*  p..z.g. */
                    /* 1100 */  0xE6, 0xF7, 0xE4, 0x17, 0xA5, 0xB6, 0xEB, 0x9F,  /* ........ */
                    /* 1108 */  0xEE, 0x06, 0xC6, 0x7A, 0x08, 0x78, 0x02, 0xF4,  /* ...z.x.. */
                    /* 1110 */  0xFD, 0xCF, 0xC7, 0x8A, 0x28, 0x01, 0xA3, 0xC4,  /* ....(... */
                    /* 1118 */  0x7A, 0x11, 0x34, 0x66, 0x8C, 0x60, 0xEF, 0x80,  /* z.4f.`.. */
                    /* 1120 */  0x31, 0x1F, 0x09, 0x3D, 0xC2, 0x68, 0xC1, 0x0D,  /* 1..=.h.. */
                    /* 1128 */  0xF4, 0x18, 0xC8, 0x84, 0x1D, 0x03, 0x01, 0x12,  /* ........ */
                    /* 1130 */  0xFD, 0xFF, 0x8F, 0x81, 0x00, 0x23, 0x4F, 0x50,  /* .....#OP */
                    /* 1138 */  0xC0, 0xF6, 0xFF, 0x7F, 0x82, 0x02, 0x0C, 0x1D,  /* ........ */
                    /* 1140 */  0x05, 0xC1, 0x7C, 0x86, 0x02, 0xAC, 0x1D, 0x05,  /* ..|..... */
                    /* 1148 */  0xC1, 0x3E, 0x5A, 0x98, 0xA3, 0xE0, 0x31, 0x5F,  /* .>Z...1_ */
                    /* 1150 */  0x1E, 0x06, 0xA2, 0xC1, 0x24, 0xFC, 0xFF, 0x8F,  /* ....$... */
                    /* 1158 */  0x82, 0xD8, 0x50, 0x40, 0x3A, 0x77, 0x38, 0xD4,  /* ..P@:w8. */
                    /* 1160 */  0xE9, 0x05, 0x7D, 0x50, 0xF0, 0xB0, 0x9F, 0x0A,  /* ..}P.... */
                    /* 1168 */  0x3C, 0x89, 0x53, 0xF5, 0xB5, 0xE0, 0x28, 0x9E,  /* <.S...(. */
                    /* 1170 */  0x00, 0x7C, 0x18, 0x04, 0xFE, 0x43, 0x83, 0x35,  /* .|...C.5 */
                    /* 1178 */  0x89, 0xE2, 0x87, 0x06, 0xEA, 0xB3, 0x07, 0xF8,  /* ........ */
                    /* 1180 */  0x86, 0x06, 0x8E, 0xA8, 0x67, 0x1C, 0xF4, 0x89,  /* ....g... */
                    /* 1188 */  0xC8, 0x67, 0x83, 0x98, 0x6F, 0x1E, 0x11, 0x9E,  /* .g..o... */
                    /* 1190 */  0x3C, 0x7C, 0x7D, 0x60, 0x27, 0x4F, 0x9F, 0x9A,  /* <|}`'O.. */
                    /* 1198 */  0x02, 0x45, 0x79, 0xDF, 0xE0, 0x71, 0x4E, 0x39,  /* .Ey..qN9 */
                    /* 11A0 */  0xA0, 0x3A, 0xFC, 0x82, 0xE3, 0xC0, 0x0B, 0xE3,  /* .:...... */
                    /* 11A8 */  0xFF, 0x7F, 0xE0, 0x65, 0xC7, 0x29, 0x1F, 0x4B,  /* ...e.).K */
                    /* 11B0 */  0xC0, 0x77, 0x26, 0x85, 0x73, 0x73, 0xF1, 0x1D,  /* .w&.ss.. */
                    /* 11B8 */  0x8F, 0x9D, 0x06, 0xC0, 0xA6, 0xE3, 0x34, 0x00,  /* ......4. */
                    /* 11C0 */  0x94, 0x62, 0x0D, 0x0C, 0x7D, 0x54, 0x31, 0x6A,  /* .b..}T1j */
                    /* 11C8 */  0xEF, 0x93, 0xD0, 0xC4, 0xD8, 0x75, 0xE4, 0x25,  /* .....u.% */
                    /* 11D0 */  0xC5, 0xD7, 0x93, 0x67, 0x2D, 0xF0, 0xF9, 0x18,  /* ...g-... */
                    /* 11D8 */  0x1B, 0x50, 0x3A, 0x81, 0xF1, 0xA3, 0x27, 0x98,  /* .P:...'. */
                    /* 11E0 */  0x60, 0x0E, 0xE6, 0x55, 0xDC, 0x83, 0x7C, 0x12,  /* `..U..|. */
                    /* 11E8 */  0x62, 0xA7, 0x1C, 0xF0, 0xFE, 0xFF, 0x0F, 0x9E,  /* b....... */
                    /* 11F0 */  0x80, 0x3D, 0x11, 0xA7, 0x4E, 0x54, 0xEC, 0x37,  /* .=..NT.7 */
                    /* 11F8 */  0x97, 0x0F, 0x9E, 0x80, 0xBC, 0x3B, 0x83, 0x11,  /* .....;.. */
                    /* 1200 */  0xCE, 0x3F, 0xC4, 0x03, 0x44, 0x88, 0x67, 0x4E,  /* .?..D.gN */
                    /* 1208 */  0x83, 0xC4, 0x09, 0xF2, 0x32, 0xF0, 0xE0, 0xE9,  /* ....2... */
                    /* 1210 */  0x7B, 0x67, 0x9C, 0x67, 0xCF, 0x28, 0x6F, 0x9E,  /* {g.g.(o. */
                    /* 1218 */  0x46, 0x38, 0xFA, 0x78, 0x06, 0x7A, 0xE7, 0x0C,  /* F8.x.z.. */
                    /* 1220 */  0xF1, 0xD6, 0xF9, 0x0C, 0xFA, 0xEA, 0x69, 0xB4,  /* ......i. */
                    /* 1228 */  0x58, 0xC1, 0x8F, 0xF1, 0xC1, 0x93, 0x45, 0x3E,  /* X.....E> */
                    /* 1230 */  0x23, 0xD1, 0x83, 0x27, 0xEC, 0xFF, 0xFF, 0xC1,  /* #..'.... */
                    /* 1238 */  0x13, 0xE0, 0xFF, 0xFF, 0xFF, 0xE0, 0x09, 0x18,  /* ........ */
                    /* 1240 */  0x3B, 0x83, 0x01, 0xC7, 0x13, 0x1B, 0x38, 0xCE,  /* ;.....8. */
                    /* 1248 */  0x60, 0xC0, 0xE5, 0xE8, 0x0F, 0x9E, 0x93, 0x26,  /* `......& */
                    /* 1250 */  0x8C, 0x23, 0x13, 0xF8, 0xFF, 0xFF, 0x47, 0x26,  /* .#....G& */
                    /* 1258 */  0xC0, 0xD5, 0x58, 0x61, 0x8C, 0x81, 0x27, 0x7B,  /* ..Xa..'{ */
                    /* 1260 */  0x1A, 0xD0, 0xE3, 0x80, 0x45, 0x1D, 0x98, 0x04,  /* ....E... */
                    /* 1268 */  0xC3, 0x59, 0x7C, 0x58, 0xF0, 0x11, 0x81, 0x1F,  /* .Y|X.... */
                    /* 1270 */  0x16, 0x3C, 0x82, 0x8A, 0xC7, 0x49, 0x8F, 0x45,  /* .<...I.E */
                    /* 1278 */  0x3E, 0x77, 0xB2, 0x43, 0x82, 0x0F, 0x21, 0x1E,  /* >w.C..!. */
                    /* 1280 */  0xA4, 0x0F, 0xB3, 0xE0, 0x39, 0x58, 0xC1, 0xBB,  /* ....9X.. */
                    /* 1288 */  0x2E, 0xC1, 0x39, 0x15, 0x00, 0x66, 0xFE, 0xFF,  /* ..9..f.. */
                    /* 1290 */  0x04, 0xB5, 0xAB, 0x38, 0x5D, 0xB0, 0x00, 0x07,  /* ...8]... */
                    /* 1298 */  0x30, 0xD9, 0x38, 0x86, 0x50, 0x0E, 0x1F, 0x5D,  /* 0.8.P..] */
                    /* 12A0 */  0x3D, 0x4D, 0x76, 0x24, 0x83, 0x19, 0x0B, 0x52,  /* =Mv$...R */
                    /* 12A8 */  0x27, 0x01, 0x0F, 0xC0, 0x81, 0x60, 0xA4, 0x9D,  /* '....`.. */
                    /* 12B0 */  0x44, 0xA3, 0x31, 0x9C, 0xD5, 0xC2, 0x08, 0xCE,  /* D.1..... */
                    /* 12B8 */  0x20, 0x3E, 0x8E, 0x38, 0xD7, 0x91, 0x0A, 0xBD,  /*  >.8.... */
                    /* 12C0 */  0x1B, 0x1D, 0xA7, 0x50, 0x41, 0xEE, 0x25, 0x74,  /* ...PA.%t */
                    /* 12C8 */  0xDE, 0xBE, 0x1B, 0xF0, 0x77, 0x9A, 0xC7, 0x62,  /* ....w..b */
                    /* 12D0 */  0x60, 0xDF, 0x4E, 0xC0, 0x31, 0x17, 0xAB, 0x01,  /* `.N.1... */
                    /* 12D8 */  0x45, 0x0D, 0xC0, 0x68, 0x98, 0x53, 0xC0, 0x53,  /* E..h.S.S */
                    /* 12E0 */  0x09, 0xB8, 0x82, 0xCD, 0x0D, 0x7D, 0x61, 0xB1,  /* .....}a. */
                    /* 12E8 */  0xD6, 0xA9, 0xE8, 0xF8, 0xF4, 0x3E, 0x70, 0x70,  /* .....>pp */
                    /* 12F0 */  0xC0, 0x63, 0xF6, 0x1E, 0x1C, 0x2C, 0x34, 0x0F,  /* .c...,4. */
                    /* 12F8 */  0x0E, 0x6C, 0xD9, 0x06, 0x87, 0x56, 0x72, 0x17,  /* .l...Vr. */
                    /* 1300 */  0x21, 0x87, 0x0F, 0xFC, 0xEC, 0x60, 0xFC, 0xFF,  /* !....`.. */
                    /* 1308 */  0x67, 0x07, 0x46, 0x40, 0xCF, 0x0E, 0x16, 0x92,  /* g.F@.... */
                    /* 1310 */  0x67, 0x07, 0x36, 0x7D, 0x67, 0x11, 0x50, 0x00,  /* g.6}g.P. */
                    /* 1318 */  0xF9, 0xDE, 0xE1, 0x73, 0xCB, 0xB3, 0x07, 0x1B,  /* ...s.... */
                    /* 1320 */  0xC3, 0xA3, 0x8B, 0xD1, 0x8C, 0xCE, 0x35, 0xDD,  /* ......5. */
                    /* 1328 */  0x26, 0x50, 0x2A, 0x6E, 0x13, 0x14, 0xC4, 0x37,  /* &P*n...7 */
                    /* 1330 */  0x00, 0x27, 0xA4, 0xD1, 0x3D, 0x0D, 0x37, 0x13,  /* .'..=.7. */
                    /* 1338 */  0xE3, 0x3F, 0x62, 0xF8, 0x88, 0x70, 0x48, 0x67,  /* .?b..pHg */
                    /* 1340 */  0x6B, 0x82, 0x79, 0x20, 0xF5, 0x7E, 0xF4, 0x65,  /* k.y .~.e */
                    /* 1348 */  0x0F, 0x3F, 0xFB, 0x90, 0x0F, 0x2E, 0x9E, 0x86,  /* .?...... */
                    /* 1350 */  0xAF, 0x37, 0xE4, 0xDE, 0x41, 0xA7, 0xED, 0x33,  /* .7..A..3 */
                    /* 1358 */  0x03, 0xE6, 0x30, 0xED, 0xEB, 0x54, 0x02, 0xCB,  /* ..0..T.. */
                    /* 1360 */  0xBA, 0x4A, 0x50, 0x0F, 0x17, 0x10, 0x7A, 0xA1,  /* .JP...z. */
                    /* 1368 */  0xF1, 0xBD, 0x30, 0xC1, 0xC3, 0x99, 0x6F, 0x67,  /* ..0...og */
                    /* 1370 */  0xEF, 0x25, 0xEC, 0x70, 0x98, 0xE0, 0xDD, 0x30,  /* .%.p...0 */
                    /* 1378 */  0xC1, 0xBC, 0x83, 0x40, 0x8D, 0xCA, 0x83, 0xC0,  /* ...@.... */
                    /* 1380 */  0x1C, 0xBF, 0x4C, 0x30, 0xDF, 0x18, 0x50, 0xC9,  /* ..L0..P. */
                    /* 1388 */  0x2E, 0x5A, 0xF4, 0x0C, 0xF3, 0x0E, 0xE3, 0x4B,  /* .Z.....K */
                    /* 1390 */  0x82, 0xAF, 0x1F, 0x3E, 0xB7, 0x78, 0x01, 0xAF,  /* ...>.x.. */
                    /* 1398 */  0x5B, 0x30, 0x08, 0x9E, 0x81, 0x5E, 0x5D, 0x0C,  /* [0...^]. */
                    /* 13A0 */  0x15, 0x27, 0xF0, 0xAB, 0xC0, 0x1B, 0x4D, 0x88,  /* .'....M. */
                    /* 13A8 */  0x60, 0x86, 0x3D, 0xFC, 0x90, 0x6F, 0x31, 0x3E,  /* `.=..o1> */
                    /* 13B0 */  0x5F, 0xFA, 0x06, 0x10, 0xEB, 0x75, 0xC4, 0xFF,  /* _....u.. */
                    /* 13B8 */  0xFF, 0x91, 0xF2, 0x63, 0xCB, 0x01, 0x45, 0x7A,  /* ...c..Ez */
                    /* 13C0 */  0xEB, 0xF3, 0x04, 0x7C, 0x96, 0xF1, 0x71, 0xF0,  /* ...|..q. */
                    /* 13C8 */  0xA4, 0x7C, 0xAF, 0x34, 0xFA, 0x2B, 0x84, 0x0F,  /* .|.4.+.. */
                    /* 13D0 */  0x3F, 0x46, 0xF6, 0x39, 0x87, 0x1D, 0x0C, 0xD9,  /* ?F.9.... */
                    /* 13D8 */  0xA0, 0x38, 0xE2, 0x03, 0xC3, 0x4B, 0x8D, 0xA7,  /* .8...K.. */
                    /* 13E0 */  0xC2, 0xCE, 0x5D, 0x30, 0x0E, 0x0E, 0xEC, 0x58,  /* ..]0...X */
                    /* 13E8 */  0x84, 0x39, 0xEA, 0x81, 0xEB, 0x64, 0xE3, 0x93,  /* .9...d.. */
                    /* 13F0 */  0x03, 0x98, 0xE1, 0x31, 0x87, 0x6B, 0x9F, 0x37,  /* ...1.k.7 */
                    /* 13F8 */  0x7C, 0x33, 0xF0, 0xB8, 0xF8, 0x91, 0xC3, 0xC7,  /* |3...... */
                    /* 1400 */  0x3B, 0x86, 0x7D, 0x9A, 0x3E, 0x1A, 0xBD, 0xBC,  /* ;.}.>... */
                    /* 1408 */  0xF9, 0xF4, 0x82, 0x81, 0xF5, 0xA5, 0x81, 0xC3,  /* ........ */
                    /* 1410 */  0x1A, 0x2D, 0xEC, 0x63, 0xC0, 0x99, 0xFB, 0x42,  /* .-.c...B */
                    /* 1418 */  0x84, 0x3B, 0x75, 0x82, 0x05, 0x10, 0x7F, 0x2B,  /* .;u....+ */
                    /* 1420 */  0x79, 0xE4, 0xF0, 0x04, 0x0C, 0xC8, 0x72, 0xAF,  /* y.....r. */
                    /* 1428 */  0x4B, 0x07, 0x22, 0x7E, 0xCA, 0xB3, 0xBA, 0x03,  /* K."~.... */
                    /* 1430 */  0x11, 0x02, 0xE3, 0x71, 0xF4, 0xF1, 0xC3, 0xB3,  /* ...q.... */
                    /* 1438 */  0xF1, 0x51, 0xC0, 0xC7, 0x28, 0xCF, 0xFC, 0x8C,  /* .Q..(... */
                    /* 1440 */  0x22, 0xBD, 0x32, 0x58, 0xCB, 0x89, 0x08, 0xA5,  /* ".2X.... */
                    /* 1448 */  0x02, 0x46, 0x81, 0x69, 0x74, 0xE7, 0xE0, 0x11,  /* .F.it... */
                    /* 1450 */  0x61, 0x04, 0x67, 0x10, 0x8F, 0xD6, 0x37, 0x17,  /* a.g...7. */
                    /* 1458 */  0x18, 0xFF, 0xFF, 0x9B, 0x0B, 0xF0, 0x3A, 0x13,  /* ......:. */
                    /* 1460 */  0x01, 0x97, 0xEB, 0xA5, 0x67, 0x87, 0xBB, 0x2C,  /* ....g.., */
                    /* 1468 */  0xB2, 0x69, 0x1B, 0xF7, 0x15, 0xD5, 0xA7, 0x63,  /* .i.....c */
                    /* 1470 */  0x4F, 0xFC, 0xB4, 0x61, 0x9C, 0x8C, 0x00, 0x1F,  /* O..a.... */
                    /* 1478 */  0x77, 0x1D, 0xC0, 0xC9, 0xFF, 0xFF, 0xAE, 0x03,  /* w....... */
                    /* 1480 */  0xF0, 0xFF, 0xFF, 0x7F, 0xD7, 0xE1, 0xF7, 0x07,  /* ........ */
                    /* 1488 */  0xDF, 0x75, 0x80, 0x6B, 0xA4, 0x55, 0x51, 0x11,  /* .u.k.UQ. */
                    /* 1490 */  0xBF, 0x05, 0x85, 0x80, 0x41, 0x8D, 0xCE, 0xD7,  /* ....A... */
                    /* 1498 */  0x0A, 0xFC, 0xB1, 0x84, 0x81, 0xB3, 0xF3, 0x8A,  /* ........ */
                    /* 14A0 */  0xE1, 0xF8, 0xC0, 0x3D, 0xBE, 0xD7, 0x95, 0xD3,  /* ...=.... */
                    /* 14A8 */  0x7A, 0x36, 0xF0, 0x8D, 0xC5, 0x90, 0xEC, 0x82,  /* z6...... */
                    /* 14B0 */  0x8A, 0xBB, 0x5F, 0xF8, 0x46, 0xED, 0xA9, 0xBE,  /* .._.F... */
                    /* 14B8 */  0x28, 0xBC, 0x27, 0xF8, 0x8E, 0xC0, 0xA0, 0x60,  /* (.'....` */
                    /* 14C0 */  0xDC, 0x51, 0x31, 0x07, 0x54, 0x38, 0x04, 0x67,  /* .Q1.T8.g */
                    /* 14C8 */  0x7C, 0x14, 0x98, 0x41, 0xFA, 0x90, 0xF2, 0x7A,  /* |..A...z */
                    /* 14D0 */  0xE0, 0xC1, 0x32, 0xF7, 0xC7, 0x0D, 0x5D, 0x22,  /* ..2...]" */
                    /* 14D8 */  0x1E, 0x36, 0x9E, 0x0C, 0x9A, 0x43, 0xD1, 0x99,  /* .6...C.. */
                    /* 14E0 */  0xE0, 0x14, 0xDA, 0x1A, 0x96, 0x70, 0xDE, 0x37,  /* .....p.7 */
                    /* 14E8 */  0x42, 0x44, 0x09, 0xF6, 0xC2, 0xF1, 0xC6, 0xF0,  /* BD...... */
                    /* 14F0 */  0x34, 0x1B, 0x25, 0x5E, 0xA4, 0x80, 0xD1, 0xA2,  /* 4.%^.... */
                    /* 14F8 */  0x04, 0xEB, 0x0D, 0x42, 0xA0, 0x91, 0x42, 0x04,  /* ...B..B. */
                    /* 1500 */  0x0C, 0x51, 0x1C, 0x96, 0xE0, 0xA2, 0xB7, 0x7F,  /* .Q...... */
                    /* 1508 */  0x8D, 0x67, 0x6F, 0x02, 0x1D, 0x65, 0x1C, 0xE9,  /* .go..e.. */
                    /* 1510 */  0xB8, 0x83, 0x1E, 0xB6, 0x6F, 0xAC, 0xFC, 0x7C,  /* ....o..| */
                    /* 1518 */  0xEF, 0x71, 0xF9, 0x02, 0x8A, 0x21, 0x78, 0xCD,  /* .q...!x. */
                    /* 1520 */  0xF0, 0x17, 0xC0, 0x07, 0x00, 0xBC, 0x6B, 0x40,  /* ......k@ */
                    /* 1528 */  0xCD, 0xFC, 0xB1, 0x00, 0xD6, 0xFF, 0xFF, 0x46,  /* .......F */
                    /* 1530 */  0x0F, 0xBE, 0xEB, 0x35, 0x5E, 0xFE, 0x20, 0x50,  /* ...5^. P */
                    /* 1538 */  0x97, 0x19, 0x7E, 0xF6, 0xF0, 0xCD, 0xD5, 0xF7,  /* ..~..... */
                    /* 1540 */  0x80, 0xC3, 0x62, 0xB7, 0x6E, 0x3E, 0x1E, 0xF0,  /* ..b.n>.. */
                    /* 1548 */  0x0F, 0xFD, 0xA5, 0xD7, 0x87, 0x0A, 0xCF, 0xD7,  /* ........ */
                    /* 1550 */  0x57, 0x5F, 0xDF, 0xBE, 0xC1, 0x7B, 0x39, 0x06,  /* W_...{9. */
                    /* 1558 */  0xEC, 0x09, 0xBE, 0x81, 0x83, 0x7C, 0xBC, 0xD8,  /* .....|.. */
                    /* 1560 */  0xFF, 0xFF, 0x78, 0xE1, 0x8C, 0x83, 0x2B, 0x27,  /* ..x...+' */
                    /* 1568 */  0xA1, 0xC7, 0x02, 0x6B, 0x85, 0x41, 0xDD, 0xC2,  /* ...k.A.. */
                    /* 1570 */  0xC1, 0xA5, 0x09, 0x5C, 0x57, 0x65, 0x1F, 0x6A,  /* ...\We.j */
                    /* 1578 */  0x7C, 0x08, 0xC6, 0x9F, 0x2F, 0x70, 0x01, 0x86,  /* |.../p.. */
                    /* 1580 */  0x4C, 0x4F, 0x65, 0x30, 0xAE, 0x29, 0x3E, 0x95,  /* LOe0.)>. */
                    /* 1588 */  0x61, 0xEE, 0x0E, 0x1E, 0x90, 0x8F, 0x18, 0xC0,  /* a....... */
                    /* 1590 */  0x67, 0x15, 0x1E, 0x18, 0xEE, 0xB4, 0xE0, 0x9B,  /* g....... */
                    /* 1598 */  0x92, 0x41, 0xCF, 0x31, 0xA8, 0x8F, 0x3C, 0x27,  /* .A.1..<' */
                    /* 15A0 */  0xEF, 0x7B, 0xC2, 0xE3, 0x84, 0xA3, 0x9E, 0x83,  /* .{...... */
                    /* 15A8 */  0xE8, 0xD8, 0xC0, 0x71, 0xDC, 0x00, 0xC7, 0xE1,  /* ...q.... */
                    /* 15B0 */  0x06, 0x77, 0xCE, 0x63, 0xE3, 0xC2, 0xC0, 0x3D,  /* .w.c...= */
                    /* 15B8 */  0x17, 0x78, 0x18, 0xBE, 0xE9, 0x78, 0x44, 0x98,  /* .x...xD. */
                    /* 15C0 */  0xF1, 0x3F, 0xEA, 0x19, 0x21, 0x20, 0xFE, 0x62,  /* .?..! .b */
                    /* 15C8 */  0xC4, 0x06, 0x0C, 0xA6, 0xFF, 0xFF, 0x80, 0xF9,  /* ........ */
                    /* 15D0 */  0xAD, 0xCD, 0xD7, 0x37, 0xDC, 0x80, 0x7D, 0x75,  /* ...7..}u */
                    /* 15D8 */  0xF0, 0x05, 0xC3, 0x27, 0x30, 0xA3, 0xBF, 0xC0,  /* ...'0... */
                    /* 15E0 */  0x3C, 0x89, 0xF9, 0xD8, 0x40, 0x2E, 0x70, 0x74,  /* <...@.pt */
                    /* 15E8 */  0xC0, 0xE0, 0x00, 0xF4, 0x80, 0xE1, 0x1F, 0x2E,  /* ........ */
                    /* 15F0 */  0xDE, 0xE5, 0xC0, 0x70, 0x15, 0xF4, 0x71, 0xC1,  /* ...p..q. */
                    /* 15F8 */  0xC7, 0x1E, 0x2B, 0xBA, 0xCB, 0xA1, 0x6F, 0x72,  /* ..+...or */
                    /* 1600 */  0x86, 0x89, 0x63, 0x88, 0x37, 0x30, 0x76, 0x97,  /* ..c.70v. */
                    /* 1608 */  0x20, 0x87, 0x39, 0xA8, 0x77, 0x09, 0xCF, 0x81,  /*  .9.w... */
                    /* 1610 */  0x9F, 0x2D, 0x7C, 0x82, 0xF3, 0xCD, 0x27, 0xC4,  /* .-|...'. */
                    /* 1618 */  0xA9, 0x3E, 0x5A, 0xBD, 0x07, 0xF8, 0xE8, 0xF1,  /* .>Z..... */
                    /* 1620 */  0xDE, 0xE5, 0xB3, 0x13, 0xBB, 0x08, 0xF8, 0xC8,  /* ........ */
                    /* 1628 */  0x65, 0x1C, 0x4F, 0xD3, 0x57, 0x40, 0x0F, 0xD9,  /* e.O.W@.. */
                    /* 1630 */  0x60, 0xAF, 0x1A, 0x3E, 0x81, 0xF9, 0xE8, 0x86,  /* `..>.... */
                    /* 1638 */  0x3B, 0x46, 0x79, 0x26, 0x9E, 0xBE, 0xEF, 0x20,  /* ;Fy&...  */
                    /* 1640 */  0xEC, 0x48, 0x72, 0xD4, 0xA1, 0xAE, 0xE9, 0x11,  /* .Hr..... */
                    /* 1648 */  0xE5, 0x84, 0x0E, 0xC4, 0xB7, 0x36, 0x70, 0x46,  /* .....6pF */
                    /* 1650 */  0xBB, 0x7F, 0xA0, 0xB7, 0xE9, 0x91, 0x61, 0x8E,  /* ......a. */
                    /* 1658 */  0x06, 0xB0, 0x2E, 0x21, 0x60, 0xF9, 0xFF, 0xDF,  /* ...!`... */
                    /* 1660 */  0x0C, 0xD8, 0x1D, 0xC3, 0x97, 0x10, 0xE0, 0x13,  /* ........ */
                    /* 1668 */  0xF4, 0x12, 0x81, 0xBE, 0x66, 0x78, 0x74, 0x8F,  /* ....fxt. */
                    /* 1670 */  0x00, 0x98, 0x2B, 0x06, 0x3B, 0x16, 0xF8, 0xB0,  /* ..+.;... */
                    /* 1678 */  0xE1, 0x6B, 0x00, 0xBB, 0x17, 0x38, 0xCC, 0x3D,  /* .k...8.= */
                    /* 1680 */  0x02, 0x54, 0xA0, 0x1E, 0x1E, 0x7C, 0xB5, 0xF7,  /* .T...|.. */
                    /* 1688 */  0x08, 0x50, 0x9C, 0x2C, 0x7D, 0x68, 0xF0, 0x40,  /* .P.,}h.@ */
                    /* 1690 */  0xAD, 0xEA, 0x8C, 0x09, 0xE5, 0x88, 0xC9, 0xA1,  /* ........ */
                    /* 1698 */  0xA2, 0xB1, 0x5B, 0x01, 0xBB, 0x5D, 0xFA, 0x26,  /* ..[..].& */
                    /* 16A0 */  0x01, 0x37, 0xCF, 0x2C, 0x50, 0x49, 0x6E, 0x12,  /* .7.,PIn. */
                    /* 16A8 */  0xD0, 0x61, 0xBA, 0xBC, 0xCC, 0xD0, 0xF9, 0x1F,  /* .a...... */
                    /* 16B0 */  0xB8, 0x6F, 0x75, 0x1E, 0xA1, 0x0F, 0x11, 0x0C,  /* .ou..... */
                    /* 16B8 */  0xE5, 0x3D, 0xCF, 0xA7, 0x30, 0x7E, 0x86, 0xF0,  /* .=..0~.. */
                    /* 16C0 */  0x01, 0x93, 0x9D, 0x29, 0xF8, 0x59, 0x13, 0x77,  /* ...).Y.w */
                    /* 16C8 */  0x07, 0x30, 0xCA, 0x9B, 0xA7, 0x27, 0xC0, 0xCE,  /* .0...'.. */
                    /* 16D0 */  0x9F, 0x46, 0x7E, 0x37, 0x78, 0x17, 0xF0, 0xF4,  /* .F~7x... */
                    /* 16D8 */  0x7D, 0x2F, 0xE2, 0x87, 0x04, 0xF6, 0xFF, 0x3F,  /* }/.....? */
                    /* 16E0 */  0x51, 0x80, 0x29, 0xD8, 0x9D, 0x0E, 0x0A, 0xF4,  /* Q.)..... */
                    /* 16E8 */  0x09, 0x79, 0x44, 0x46, 0xF5, 0x11, 0x81, 0x5F,  /* .yDF..._ */
                    /* 16F0 */  0x92, 0xC0, 0x78, 0x24, 0xF1, 0x81, 0x02, 0x08,  /* ..x$.... */
                    /* 16F8 */  0xDD, 0x0B, 0x50, 0xA7, 0x0F, 0x7E, 0x78, 0xF6,  /* ..P..~x. */
                    /* 1700 */  0x05, 0xD5, 0x98, 0xEF, 0x56, 0x8F, 0x70, 0x9E,  /* ....V.p. */
                    /* 1708 */  0x1C, 0xE6, 0x72, 0xC0, 0xE2, 0x5C, 0x93, 0x40,  /* ..r..\.@ */
                    /* 1710 */  0x75, 0xDC, 0xE5, 0xA3, 0x83, 0x7B, 0x6D, 0xC5,  /* u....{m. */
                    /* 1718 */  0x0F, 0xEE, 0x9D, 0xE5, 0x9D, 0xCF, 0x50, 0x1E,  /* ......P. */
                    /* 1720 */  0x24, 0xF8, 0xAE, 0xAD, 0xE0, 0xB8, 0xAA, 0xC1,  /* $....... */
                    /* 1728 */  0x38, 0xB6, 0xF0, 0x4B, 0x1E, 0xBC, 0xFF, 0xFF,  /* 8..K.... */
                    /* 1730 */  0x25, 0x0F, 0xB0, 0x30, 0x2C, 0x2E, 0xF8, 0xEF,  /* %..0,... */
                    /* 1738 */  0x61, 0x20, 0x2A, 0x11, 0x06, 0x45, 0x60, 0x79,  /* a *..E`y */
                    /* 1740 */  0xF7, 0x56, 0x0A, 0x7F, 0xC8, 0x60, 0xBC, 0x29,  /* .V...`.) */
                    /* 1748 */  0xF0, 0x49, 0x63, 0x47, 0x0D, 0xD8, 0x19, 0x2A,  /* .IcG...* */
                    /* 1750 */  0xEE, 0xA6, 0x08, 0xD6, 0xA9, 0x62, 0x86, 0xC0,  /* .....b.. */
                    /* 1758 */  0x83, 0x3D, 0x00, 0x7C, 0xBE, 0xF2, 0x19, 0x40,  /* .=.|...@ */
                    /* 1760 */  0x51, 0x60, 0xC8, 0xFF, 0x1F, 0x86, 0x1D, 0xDA,  /* Q`...... */
                    /* 1768 */  0xE1, 0xDC, 0x86, 0x01, 0x07, 0x23, 0xC6, 0x5D,  /* .....#.] */
                    /* 1770 */  0x0A, 0xE1, 0x4E, 0xF9, 0x1D, 0x25, 0xF6, 0x73,  /* ..N..%.s */
                    /* 1778 */  0x39, 0x9B, 0x2E, 0xEE, 0x6A, 0xEE, 0xD3, 0x09,  /* 9...j... */
                    /* 1780 */  0xBB, 0x20, 0xC3, 0x38, 0x0B, 0x3C, 0x02, 0xBC,  /* . .8.<.. */
                    /* 1788 */  0x9A, 0xF3, 0x0B, 0xF2, 0x0B, 0xF1, 0x0B, 0xC1,  /* ........ */
                    /* 1790 */  0x1B, 0xB2, 0x6F, 0x4A, 0xCF, 0x06, 0x2F, 0x3B,  /* ..oJ../; */
                    /* 1798 */  0x31, 0xDE, 0x8D, 0x7D, 0x4A, 0xF6, 0x79, 0xE7,  /* 1..}J.y. */
                    /* 17A0 */  0x05, 0xD9, 0x18, 0x47, 0x13, 0x31, 0xCA, 0xB9,  /* ...G.1.. */
                    /* 17A8 */  0x3D, 0x0C, 0xBC, 0x26, 0x1B, 0xE5, 0xFD, 0xE4,  /* =..&.... */
                    /* 17B0 */  0x85, 0x20, 0x62, 0x34, 0x43, 0x04, 0x8D, 0x11,  /* . b4C... */
                    /* 17B8 */  0xE8, 0x7D, 0xD9, 0x78, 0x2F, 0xC8, 0x4C, 0xE0,  /* .}.x/.L. */
                    /* 17C0 */  0x5B, 0x41, 0x07, 0x17, 0x5F, 0x90, 0x01, 0x43,  /* [A.._..C */
                    /* 17C8 */  0xFF, 0xFF, 0x0B, 0x32, 0xB0, 0x3F, 0x19, 0x01,  /* ...2.?.. */
                    /* 17D0 */  0x3E, 0x4F, 0x1C, 0xB8, 0x4B, 0x35, 0xF8, 0x4E,  /* >O..K5.N */
                    /* 17D8 */  0x36, 0xC0, 0xFA, 0xFF, 0x7F, 0xB2, 0x01, 0xFB,  /* 6....... */
                    /* 17E0 */  0xD0, 0x7D, 0xB2, 0x01, 0xF7, 0x68, 0xE1, 0x1D,  /* .}...h.. */
                    /* 17E8 */  0x4D, 0x10, 0x27, 0x1B, 0x0A, 0xE4, 0xE0, 0xEB,  /* M.'..... */
                    /* 17F0 */  0xA2, 0x70, 0x3C, 0xF4, 0x49, 0x84, 0x1E, 0x9D,  /* .p<.I... */
                    /* 17F8 */  0x7C, 0x94, 0xC4, 0x9D, 0x19, 0x3C, 0x91, 0x77,  /* |....<.w */
                    /* 1800 */  0x16, 0x8F, 0xE2, 0x65, 0xD0, 0xF7, 0x82, 0x13,  /* ...e.... */
                    /* 1808 */  0x79, 0x7D, 0xB0, 0x9C, 0x63, 0x24, 0xA8, 0x46,  /* y}..c$.F */
                    /* 1810 */  0xE2, 0xE3, 0x03, 0xFC, 0xEB, 0x8B, 0x8F, 0x91,  /* ........ */
                    /* 1818 */  0xF0, 0xF9, 0xFC, 0xC3, 0xF2, 0x60, 0x0C, 0xE9,  /* .....`.. */
                    /* 1820 */  0x53, 0x24, 0x07, 0x79, 0x76, 0x79, 0x0C, 0xE1,  /* S$.yvy.. */
                    /* 1828 */  0x17, 0x48, 0xB8, 0xA7, 0x99, 0x03, 0xC0, 0xC8,  /* .H...... */
                    /* 1830 */  0xBA, 0x3C, 0xA2, 0xCF, 0x8E, 0x1C, 0x23, 0xAE,  /* .<....#. */
                    /* 1838 */  0x2F, 0x8A, 0xBE, 0x02, 0xFB, 0x20, 0x70, 0x3E,  /* /.... p> */
                    /* 1840 */  0xCF, 0x89, 0xE0, 0xFA, 0xFF, 0x9F, 0x13, 0x31,  /* .......1 */
                    /* 1848 */  0xA3, 0xE6, 0x47, 0x1B, 0x3E, 0x7E, 0x0E, 0xFE,  /* ..G.>~.. */
                    /* 1850 */  0x56, 0xF0, 0x40, 0xE9, 0x63, 0x51, 0x88, 0x47,  /* V.@.cQ.G */
                    /* 1858 */  0x24, 0x7E, 0x4E, 0x04, 0x97, 0x89, 0x73, 0x22,  /* $~N...s" */
                    /* 1860 */  0x90, 0x38, 0xF4, 0xC2, 0x38, 0x2D, 0xE0, 0x06,  /* .8..8-.. */
                    /* 1868 */  0xE2, 0x33, 0x25, 0x76, 0xCA, 0x27, 0xC2, 0xCE,  /* .3%v.'.. */
                    /* 1870 */  0x25, 0x98, 0xD1, 0x81, 0xEB, 0x72, 0xEF, 0xD1,  /* %....r.. */
                    /* 1878 */  0x81, 0xFF, 0x24, 0x80, 0xC7, 0x7A, 0xBC, 0x03,  /* ..$..z.. */
                    /* 1880 */  0xDF, 0x49, 0xDD, 0x77, 0x13, 0x5F, 0x64, 0x7C,  /* .I.w._d| */
                    /* 1888 */  0x28, 0x7A, 0x6C, 0x01, 0x56, 0xFF, 0xFF, 0xF3,  /* (zl.V... */
                    /* 1890 */  0x1D, 0x60, 0x2A, 0xDC, 0xE1, 0x0E, 0x15, 0xE7,  /* .`*..... */
                    /* 1898 */  0x7C, 0x07, 0x50, 0xE3, 0x6C, 0xFD, 0x7C, 0x07,  /* |.P.l.|. */
                    /* 18A0 */  0xAE, 0xFF, 0xFF, 0xF9, 0x0E, 0x86, 0xC8, 0xF3,  /* ........ */
                    /* 18A8 */  0x1D, 0x40, 0xF6, 0xFF, 0xFF, 0x19, 0x00, 0x73,  /* .@.....s */
                    /* 18B0 */  0x46, 0xC3, 0x9D, 0xEF, 0xC0, 0x76, 0xB4, 0x01,  /* F....v.. */
                    /* 18B8 */  0xCC, 0x4D, 0xE3, 0xD1, 0x06, 0xDC, 0xC3, 0x85,  /* .M...... */
                    /* 18C0 */  0x3D, 0x0C, 0x9E, 0xE1, 0x0D, 0xE5, 0x43, 0x01,  /* =.....C. */
                    /* 18C8 */  0x95, 0x74, 0xCA, 0xA6, 0x30, 0x66, 0xF1, 0x91,  /* .t..0f.. */
                    /* 18D0 */  0xC1, 0x07, 0x05, 0x7E, 0x64, 0xF0, 0x39, 0xE1,  /* ...~d.9. */
                    /* 18D8 */  0xF1, 0xE1, 0x50, 0xD9, 0x11, 0xC6, 0x97, 0x10,  /* ..P..... */
                    /* 18E0 */  0x1F, 0x15, 0x58, 0xF4, 0x71, 0xD2, 0x13, 0x14,  /* ..X.q... */
                    /* 18E8 */  0x18, 0x87, 0xF8, 0xC8, 0xE7, 0x41, 0x3C, 0xD9,  /* .....A<. */
                    /* 18F0 */  0xC0, 0x3A, 0x17, 0xFC, 0xFF, 0x9F, 0x0B, 0x00,  /* .:...... */
                    /* 18F8 */  0x33, 0x3A, 0x9F, 0x6F, 0x1A, 0xB9, 0x35, 0x82,  /* 3:.o..5. */
                    /* 1900 */  0xC8, 0xC6, 0x51, 0x84, 0x72, 0x38, 0xC9, 0xE2,  /* ..Q.r8.. */
                    /* 1908 */  0x74, 0x11, 0xF4, 0x09, 0xC9, 0xD7, 0x8B, 0x53,  /* t......S */
                    /* 1910 */  0x39, 0x55, 0xFC, 0x55, 0xC4, 0xCA, 0x21, 0x05,  /* 9U.U..!. */
                    /* 1918 */  0xEF, 0xE3, 0x8A, 0x35, 0xC3, 0x28, 0xDE, 0x6B,  /* ...5.(.k */
                    /* 1920 */  0x44, 0xA3, 0xF1, 0x08, 0x1C, 0x08, 0x46, 0x70,  /* D.....Fp */
                    /* 1928 */  0x06, 0xF1, 0x49, 0xC4, 0xD9, 0x8E, 0x3A, 0x68,  /* ..I...:h */
                    /* 1930 */  0x25, 0xE7, 0x3D, 0x32, 0x06, 0x76, 0xD0, 0xC1,  /* %.=2.v.. */
                    /* 1938 */  0x04, 0xB9, 0x9E, 0xD0, 0x99, 0xFB, 0x72, 0xC0,  /* ......r. */
                    /* 1940 */  0x35, 0x40, 0xE8, 0x00, 0x62, 0x70, 0x5F, 0x52,  /* 5@..bp_R */
                    /* 1948 */  0x60, 0x5C, 0xA8, 0x7C, 0x49, 0xC1, 0x9C, 0x8D,  /* `\.|I... */
                    /* 1950 */  0x3C, 0x1B, 0xAB, 0x01, 0x45, 0x0D, 0xC0, 0x68,  /* <...E..h */
                    /* 1958 */  0x98, 0x73, 0xC0, 0xC3, 0x09, 0xB8, 0x72, 0x5D,  /* .s....r] */
                    /* 1960 */  0xF8, 0xD0, 0x2F, 0x09, 0xDF, 0x2D, 0x1E, 0x6C,  /* ../..-.l */
                    /* 1968 */  0xD8, 0xDC, 0xC0, 0xF5, 0xFF, 0x9F, 0x1B, 0xCC,  /* ........ */
                    /* 1970 */  0xF1, 0x7B, 0x6E, 0xB0, 0xD0, 0x3C, 0x37, 0xF8,  /* .{n..<7. */
                    /* 1978 */  0xF7, 0x3D, 0xEC, 0xE1, 0x10, 0x8F, 0xCC, 0xE6,  /* .=...... */
                    /* 1980 */  0xF6, 0x1C, 0x10, 0xE1, 0x15, 0xC1, 0x97, 0x1C,  /* ........ */
                    /* 1988 */  0x8F, 0x0E, 0x38, 0x00, 0x7A, 0x74, 0xB0, 0x90,  /* ..8.zt.. */
                    /* 1990 */  0x3C, 0x3A, 0xB0, 0x25, 0x1C, 0x1D, 0x5A, 0x0F,  /* <:.%..Z. */
                    /* 1998 */  0x88, 0x5C, 0x9E, 0xB1, 0xC8, 0xC9, 0xE4, 0xF4,  /* .\...... */
                    /* 19A0 */  0x4E, 0xE6, 0x99, 0xE0, 0xEC, 0x9E, 0x2E, 0x82,  /* N....... */
                    /* 19A8 */  0x04, 0x8A, 0x13, 0xFD, 0xD9, 0xC4, 0x13, 0x04,  /* ........ */
                    /* 19B0 */  0x0E, 0x03, 0xF0, 0x04, 0x61, 0xA1, 0x79, 0x82,  /* ....a.y. */
                    /* 19B8 */  0x60, 0x8B, 0x78, 0xCD, 0x40, 0xDF, 0x3C, 0x61,  /* `.x.@.<a */
                    /* 19C0 */  0x60, 0xFF, 0xFF, 0x5F, 0xE7, 0x98, 0xF7, 0xDB,  /* `.._.... */
                    /* 19C8 */  0x0D, 0xB9, 0x11, 0x00, 0x8F, 0x4B, 0xA1, 0x47,  /* .....K.G */
                    /* 19D0 */  0x08, 0x0B, 0xCD, 0x47, 0x0D, 0xB0, 0xC5, 0x1B,  /* ...G.... */
                    /* 19D8 */  0x21, 0x7A, 0x58, 0xBE, 0x95, 0x9C, 0xDF, 0xC9,  /* !zX..... */
                    /* 19E0 */  0x1D, 0x1F, 0xB0, 0x02, 0xF6, 0xF8, 0x60, 0xA1,  /* ......`. */
                    /* 19E8 */  0x78, 0x7C, 0x60, 0xD3, 0x77, 0x37, 0x02, 0x05,  /* x|`.w7.. */
                    /* 19F0 */  0x90, 0x4F, 0x42, 0x3E, 0x9F, 0xBC, 0x0C, 0xB1,  /* .OB>.... */
                    /* 19F8 */  0x31, 0xBC, 0x4D, 0x19, 0xCD, 0xE8, 0x3C, 0xD3,  /* 1.M...<. */
                    /* 1A00 */  0x96, 0x74, 0xBE, 0xE1, 0x29, 0x60, 0x74, 0x76,  /* .t..)`tv */
                    /* 1A08 */  0x31, 0x88, 0x6F, 0x24, 0x56, 0x08, 0xA2, 0x63,  /* 1.o$V..c */
                    /* 1A10 */  0x08, 0xFE, 0xBA, 0xEB, 0x19, 0xBD, 0x29, 0x78,  /* ......)x */
                    /* 1A18 */  0xB6, 0x26, 0xA8, 0x07, 0x52, 0x27, 0x4F, 0x38,  /* .&..R'O8 */
                    /* 1A20 */  0xB7, 0x0B, 0xF6, 0xFF, 0x3F, 0x48, 0xB1, 0xBB,  /* ....?H.. */
                    /* 1A28 */  0xB5, 0xCF, 0xD8, 0xF0, 0x0F, 0x99, 0x1E, 0x8F,  /* ........ */
                    /* 1A30 */  0x6D, 0x1C, 0x8C, 0xE8, 0x09, 0xCB, 0x87, 0x6C,  /* m......l */
                    /* 1A38 */  0x7E, 0x98, 0x78, 0x52, 0x62, 0xE7, 0xC9, 0x04,  /* ~.xRb... */
                    /* 1A40 */  0x6F, 0x94, 0x09, 0x7A, 0x3B, 0x5F, 0xD3, 0x9B,  /* o..z;_.. */
                    /* 1A48 */  0xB6, 0x21, 0xA3, 0x32, 0x58, 0x43, 0x3C, 0xF3,  /* .!.2XC<. */
                    /* 1A50 */  0x32, 0x7D, 0xEB, 0xD3, 0x71, 0x1B, 0xAE, 0x1E,  /* 2}..q... */
                    /* 1A58 */  0x40, 0x8D, 0x85, 0x2B, 0x81, 0xD1, 0xA0, 0xC3,  /* @..+.... */
                    /* 1A60 */  0x3D, 0x5D, 0xBD, 0x5D, 0xF9, 0xB2, 0xE0, 0x0B,  /* =].].... */
                    /* 1A68 */  0x83, 0x2F, 0x54, 0x3E, 0x7C, 0x1A, 0xEC, 0xBC,  /* ./T>|... */
                    /* 1A70 */  0x22, 0xBC, 0x30, 0xF8, 0x36, 0xC5, 0x8E, 0xD7,  /* ".0.6... */
                    /* 1A78 */  0x0C, 0x32, 0x54, 0x9C, 0xC0, 0x6F, 0xD7, 0x1C,  /* .2T..o.. */
                    /* 1A80 */  0x2C, 0xEC, 0x63, 0xC0, 0xE3, 0x86, 0xEF, 0x65,  /* ,.c....e */
                    /* 1A88 */  0xEC, 0x26, 0x10, 0xEB, 0x31, 0xC9, 0x23, 0xE6,  /* .&..1.#. */
                    /* 1A90 */  0xF7, 0xA9, 0x03, 0x8A, 0xF4, 0xFC, 0xE3, 0x09,  /* ........ */
                    /* 1A98 */  0xF8, 0x92, 0xE5, 0xFB, 0xE3, 0x49, 0xF9, 0xAC,  /* .....I.. */
                    /* 1AA0 */  0x6A, 0xF4, 0x57, 0x09, 0x5F, 0xCA, 0x8C, 0xEC,  /* j.W._... */
                    /* 1AA8 */  0x13, 0x18, 0xBB, 0x49, 0xB2, 0x41, 0xF1, 0xAB,  /* ...I.A.. */
                    /* 1AB0 */  0xA9, 0x0F, 0x21, 0x9E, 0x0A, 0xBB, 0x3F, 0x61,  /* ..!...?a */
                    /* 1AB8 */  0xC0, 0x8E, 0xC0, 0xA7, 0x43, 0x7E, 0x74, 0x09,  /* ....C~t. */
                    /* 1AC0 */  0x14, 0xA5, 0x78, 0x4C, 0xDD, 0x1C, 0x3C, 0x43,  /* ..xL..<C */
                    /* 1AC8 */  0x83, 0x62, 0xE0, 0x0F, 0x92, 0xCD, 0x2E, 0xAE,  /* .b...... */
                    /* 1AD0 */  0xB1, 0x7C, 0x2F, 0x31, 0x22, 0x76, 0x40, 0x0C,  /* .|/1"v@. */
                    /* 1AD8 */  0xE5, 0x3D, 0xD2, 0xEA, 0x51, 0xC8, 0x1C, 0x3C,  /* .=..Q..< */
                    /* 1AE0 */  0x22, 0xCF, 0xC6, 0xD3, 0x61, 0xA7, 0x0E, 0xFC,  /* "...a... */
                    /* 1AE8 */  0x24, 0x7C, 0x6A, 0xF2, 0xC1, 0xCE, 0x03, 0xF2,  /* $|j..... */
                    /* 1AF0 */  0x50, 0xF8, 0x14, 0x19, 0xB0, 0xFF, 0xFF, 0xC0,  /* P....... */
                    /* 1AF8 */  0x78, 0x98, 0x97, 0x00, 0x06, 0xED, 0xE1, 0x33,  /* x......3 */
                    /* 1B00 */  0xF4, 0x17, 0x23, 0xA3, 0xF3, 0xF3, 0xCE, 0xE9,  /* ..#..... */
                    /* 1B08 */  0xF8, 0x1C, 0xEA, 0xA3, 0x86, 0xEF, 0x01, 0x98,  /* ........ */
                    /* 1B10 */  0x33, 0x99, 0x4F, 0x00, 0x3E, 0xB3, 0x31, 0xA0,  /* 3.O.>.1. */
                    /* 1B18 */  0x47, 0x7B, 0x06, 0xF2, 0xBE, 0xCA, 0x2E, 0x3F,  /* G{.....? */
                    /* 1B20 */  0x18, 0xA4, 0x77, 0x5D, 0x9F, 0x7E, 0x30, 0xF7,  /* ..w].~0. */
                    /* 1B28 */  0x33, 0x0E, 0x16, 0xE8, 0x58, 0xF9, 0x64, 0xE2,  /* 3...X.d. */
                    /* 1B30 */  0x79, 0xC2, 0x1E, 0x29, 0x9C, 0xDB, 0x26, 0x8C,  /* y..)..&. */
                    /* 1B38 */  0x2B, 0x2F, 0xBF, 0x06, 0xF2, 0x5B, 0x39, 0xB8,  /* +/...[9. */
                    /* 1B40 */  0xAE, 0x18, 0x3E, 0x99, 0x80, 0x19, 0x1E, 0x13,  /* ..>..... */
                    /* 1B48 */  0xE8, 0x3C, 0x43, 0x65, 0x8D, 0x0B, 0x75, 0xA4,  /* .<Ce..u. */
                    /* 1B50 */  0xF1, 0x35, 0x95, 0x61, 0x3F, 0x0C, 0x78, 0xD2,  /* .5.a?.x. */
                    /* 1B58 */  0x87, 0x79, 0x82, 0x2F, 0x6B, 0x18, 0x58, 0x5F,  /* .y./k.X_ */
                    /* 1B60 */  0x4A, 0x38, 0xAC, 0xD1, 0xC2, 0xBE, 0x0E, 0x18,  /* J8...... */
                    /* 1B68 */  0xF6, 0x11, 0x10, 0x77, 0xFD, 0x05, 0x0B, 0x20,  /* ...w...  */
                    /* 1B70 */  0xFE, 0x92, 0xF0, 0x60, 0xE0, 0x09, 0x18, 0x90,  /* ...`.... */
                    /* 1B78 */  0xC5, 0x59, 0x15, 0x15, 0xB1, 0x1C, 0x05, 0x80,  /* .Y...... */
                    /* 1B80 */  0x41, 0xFD, 0xFF, 0x47, 0xE7, 0xFB, 0x37, 0xE0,  /* A..G..7. */
                    /* 1B88 */  0xE4, 0xB2, 0x8D, 0xBF, 0x47, 0xBC, 0x1E, 0x78,  /* ....G..x */
                    /* 1B90 */  0xB0, 0xEC, 0xB2, 0xFD, 0x20, 0xF3, 0x80, 0xF0,  /* .... ... */
                    /* 1B98 */  0x1C, 0xF3, 0x0E, 0xF3, 0x50, 0xF0, 0x2E, 0x13,  /* ....P... */
                    /* 1BA0 */  0x21, 0xC8, 0x53, 0xF6, 0x3B, 0x42, 0x84, 0x50,  /* !.S.;B.P */
                    /* 1BA8 */  0x81, 0x5E, 0xB6, 0x8D, 0x17, 0xF4, 0x65, 0x22,  /* .^....e" */
                    /* 1BB0 */  0x4A, 0x9C, 0x28, 0x11, 0x42, 0x19, 0xE3, 0x5C,  /* J.(.B..\ */
                    /* 1BB8 */  0x9E, 0x0E, 0x5E, 0x6A, 0xC2, 0x3D, 0x26, 0x04,  /* ..^j.=&. */
                    /* 1BC0 */  0x7E, 0x72, 0x88, 0x12, 0xD8, 0x63, 0x7C, 0xD9,  /* ~r...c|. */
                    /* 1BC8 */  0x66, 0xE2, 0x2F, 0x32, 0xBA, 0x27, 0xF9, 0xB2,  /* f./2.'.. */
                    /* 1BD0 */  0x0D, 0x38, 0xFF, 0xFF, 0x5F, 0xB6, 0xC1, 0x75,  /* .8.._..u */
                    /* 1BD8 */  0x71, 0x06, 0xF3, 0x8D, 0x16, 0x30, 0x77, 0x71,  /* q....0wq */
                    /* 1BE0 */  0x06, 0xFB, 0x70, 0x61, 0x0F, 0x83, 0x87, 0x79,  /* ..pa...y */
                    /* 1BE8 */  0x4F, 0xF8, 0x50, 0x42, 0xE5, 0xC3, 0xA0, 0xCE,  /* O.PB.... */
                    /* 1BF0 */  0x25, 0xC0, 0xF1, 0xFF, 0x7F, 0x2E, 0x01, 0x46,  /* %......F */
                    /* 1BF8 */  0x33, 0x7A, 0x03, 0x78, 0x15, 0x38, 0xED, 0x47,  /* 3z.x.8.G */
                    /* 1C00 */  0x91, 0x87, 0x92, 0x43, 0x88, 0xF1, 0x3E, 0x12,  /* ...C..>. */
                    /* 1C08 */  0xC4, 0x08, 0x87, 0xFE, 0x5C, 0xE2, 0xEB, 0xC8,  /* ....\... */
                    /* 1C10 */  0x93, 0x5B, 0x88, 0x28, 0xEF, 0x27, 0x4F, 0x28,  /* .[.(.'O( */
                    /* 1C18 */  0x86, 0x88, 0x12, 0x2C, 0x46, 0xB0, 0xD0, 0x4F,  /* ...,F..O */
                    /* 1C20 */  0x25, 0xC6, 0x60, 0x87, 0x94, 0x20, 0xE1, 0x9E,  /* %.`.. .. */
                    /* 1C28 */  0x4B, 0x98, 0xF4, 0xEF, 0x9D, 0xCE, 0xB9, 0x3E,  /* K......> */
                    /* 1C30 */  0x97, 0x00, 0xFC, 0x08, 0x77, 0xB7, 0x45, 0x9F,  /* ....w.E. */
                    /* 1C38 */  0x1B, 0x7C, 0x4C, 0xF0, 0xF9, 0xC0, 0x10, 0x8D,  /* .|L..... */
                    /* 1C40 */  0x5F, 0x0C, 0xC8, 0xF5, 0xCD, 0x77, 0x04, 0x1F,  /* _....w.. */
                    /* 1C48 */  0x13, 0x5E, 0xE0, 0x18, 0x81, 0xFF, 0xFF, 0x01,  /* .^...... */
                    /* 1C50 */  0x86, 0x4E, 0xCF, 0x9D, 0xE0, 0x18, 0x94, 0x87,  /* .N...... */
                    /* 1C58 */  0x07, 0xFE, 0x03, 0x19, 0x3E, 0xFC, 0x75, 0x12,  /* ....>.u. */
                    /* 1C60 */  0x75, 0x4C, 0xE0, 0xC3, 0x83, 0x77, 0xFA, 0x73,  /* uL...w.s */
                    /* 1C68 */  0xC8, 0xA3, 0x18, 0x1D, 0x1C, 0x38, 0x9E, 0xEF,  /* .....8.. */
                    /* 1C70 */  0x1A, 0x1C, 0x08, 0x0E, 0x27, 0x0F, 0x1E, 0xD8,  /* ....'... */
                    /* 1C78 */  0xC3, 0x19, 0x9B, 0x38, 0x1F, 0xC2, 0xD1, 0xF8,  /* ...8.... */
                    /* 1C80 */  0x08, 0x00, 0x8E, 0xB3, 0x03, 0xF8, 0xA2, 0x0E,  /* ........ */
                    /* 1C88 */  0x17, 0x7D, 0x38, 0xF0, 0x1D, 0x13, 0x06, 0xFA,  /* .}8..... */
                    /* 1C90 */  0x6B, 0x86, 0x6F, 0x6F, 0x46, 0xE7, 0x71, 0x06,  /* k.ooF.q. */
                    /* 1C98 */  0x0C, 0xAA, 0xC1, 0x7A, 0xC0, 0xF0, 0xFF, 0xFF,  /* ...z.... */
                    /* 1CA0 */  0x67, 0x40, 0xFC, 0x0C, 0x5E, 0x2E, 0x9E, 0x2C,  /* g@..^.., */
                    /* 1CA8 */  0xF8, 0x28, 0xC1, 0x77, 0xE2, 0xF3, 0x89, 0x02,  /* .(.w.... */
                    /* 1CB0 */  0x37, 0x18, 0x9F, 0xEA, 0x31, 0x67, 0x09, 0xB0,  /* 7...1g.. */
                    /* 1CB8 */  0x5D, 0x57, 0x7D, 0x96, 0x00, 0x3E, 0xF2, 0x0E,  /* ]W}..>.. */
                    /* 1CC0 */  0x58, 0xA0, 0x39, 0x20, 0xC1, 0x38, 0x59, 0x01,  /* X.9 .8Y. */
                    /* 1CC8 */  0x76, 0xC6, 0xF1, 0x64, 0x05, 0xE6, 0xFF, 0xFF,  /* v..d.... */
                    /* 1CD0 */  0xF0, 0x7C, 0x04, 0xC7, 0x8F, 0x81, 0x2B, 0xB4,  /* .|....+. */
                    /* 1CD8 */  0xE9, 0x53, 0xA3, 0x51, 0xAB, 0x06, 0x65, 0x6A,  /* .S.Q..ej */
                    /* 1CE0 */  0x94, 0x69, 0x50, 0xAB, 0x4F, 0xA5, 0xC6, 0x8C,  /* .iP.O... */
                    /* 1CE8 */  0x09, 0x3B, 0x55, 0x29, 0xE0, 0xB3, 0x41, 0x03,  /* .;U)..A. */
                    /* 1CF0 */  0xB3, 0x3C, 0x0A, 0x81, 0x58, 0xCC, 0x9B, 0x42,  /* .<..X..B */
                    /* 1CF8 */  0x20, 0x0E, 0x0B, 0x42, 0x23, 0x1D, 0x8E, 0x04,  /*  ..B#... */
                    /* 1D00 */  0x62, 0xC9, 0x47, 0x2C, 0x81, 0x58, 0xAE, 0x07,  /* b.G,.X.. */
                    /* 1D08 */  0x10, 0x16, 0xF0, 0x4D, 0x22, 0x70, 0xF2, 0x46,  /* ...M"p.F */
                    /* 1D10 */  0x12, 0x38, 0x79, 0x26, 0x08, 0xC4, 0x91, 0x41,  /* .8y&...A */
                    /* 1D18 */  0xA8, 0x50, 0x1D, 0x20, 0x2C, 0x26, 0x08, 0x0D,  /* .P. ,&.. */
                    /* 1D20 */  0xE5, 0x03, 0x84, 0x49, 0x7F, 0x1A, 0x08, 0x90,  /* ...I.... */
                    /* 1D28 */  0x18, 0x01, 0x61, 0xE1, 0x1E, 0x12, 0x02, 0xB1,  /* ..a..... */
                    /* 1D30 */  0xB4, 0xE7, 0x83, 0x40, 0x2C, 0xC4, 0x0A, 0x08,  /* ...@,... */
                    /* 1D38 */  0x8B, 0x0B, 0x42, 0xC3, 0x69, 0x01, 0x61, 0x92,  /* ..B.i.a. */
                    /* 1D40 */  0xCC, 0x80, 0xB0, 0x40, 0x20, 0x54, 0xFE, 0x2B,  /* ...@ T.+ */
                    /* 1D48 */  0x5D, 0x20, 0x16, 0xE9, 0x06, 0x90, 0x2E, 0x5D,  /* ] .....] */
                    /* 1D50 */  0x20, 0x0E, 0xA2, 0x07, 0x84, 0xC9, 0xF0, 0x03,  /*  ....... */
                    /* 1D58 */  0xC2, 0x42, 0x83, 0xD0, 0x68, 0xEF, 0x09, 0x01,  /* .B..h... */
                    /* 1D60 */  0x12, 0x43, 0x20, 0x2C, 0xBE, 0x23, 0x10, 0x26,  /* .C ,.#.& */
                    /* 1D68 */  0xFE, 0x69, 0x22, 0x10, 0xE7, 0xB7, 0x04, 0x71,  /* .i"....q */
                    /* 1D70 */  0x53, 0x1A, 0x62, 0x4D, 0x40, 0x4C, 0x83, 0x27,  /* S.bM@L.' */
                    /* 1D78 */  0x20, 0xA6, 0x08, 0x44, 0x40, 0x8E, 0xFD, 0xD2,  /*  ..D@... */
                    /* 1D80 */  0x10, 0x90, 0x35, 0x98, 0x02, 0x62, 0xD1, 0x41,  /* ..5..b.A */
                    /* 1D88 */  0x04, 0x64, 0x21, 0xAA, 0x80, 0x58, 0x5E, 0x57,  /* .d!..X^W */
                    /* 1D90 */  0x40, 0x2C, 0x3C, 0x88, 0x80, 0x9C, 0xF9, 0xCD,  /* @,<..... */
                    /* 1D98 */  0x2A, 0x20, 0x2B, 0x78, 0x74, 0x3D, 0x04, 0xB0,  /* * +xt=.. */
                    /* 1DA0 */  0xAF, 0xBC, 0x80, 0x9C, 0x1C, 0x44, 0x40, 0x0E,  /* .....D@. */
                    /* 1DA8 */  0xEC, 0x0B, 0x88, 0xC5, 0x07, 0x11, 0x90, 0xB3,  /* ........ */
                    /* 1DB0 */  0xFE, 0xC1, 0x05, 0xE4, 0xE0, 0x20, 0x1A, 0x04,  /* ..... .. */
                    /* 1DB8 */  0xF9, 0x68, 0x08, 0xC8, 0xE9, 0x41, 0x04, 0x44,  /* .h...A.D */
                    /* 1DC0 */  0x7E, 0xE4, 0x02, 0xB1, 0xDA, 0x2F, 0xB9, 0x40,  /* ~..../.@ */
                    /* 1DC8 */  0xAC, 0xE7, 0x4F, 0xAE, 0xA1, 0x10, 0x10, 0xAA,  /* ..O..... */
                    /* 1DD0 */  0x5C, 0xDD, 0x49, 0x85, 0xFD, 0xFF, 0x73, 0x80,  /* \.I...s. */
                    /* 1DD8 */  0xD0, 0x5C, 0x20, 0x02, 0xB3, 0x0A, 0x77, 0x40,  /* .\ ...w@ */
                    /* 1DE0 */  0x4C, 0x15, 0x88, 0x80, 0x9C, 0x00, 0x88, 0xA6,  /* L....... */
                    /* 1DE8 */  0x02, 0xA1, 0x29, 0xC1, 0xA8, 0xAE, 0x37, 0x88,  /* ..)...7. */
                    /* 1DF0 */  0x80, 0x9C, 0x00, 0x84, 0xA6, 0x02, 0xA1, 0x29,  /* .......) */
                    /* 1DF8 */  0x41, 0x04, 0x68, 0x55, 0xF6, 0x80, 0x98, 0x52,  /* A.hU...R */
                    /* 1E00 */  0x10, 0xAA, 0x1C, 0x84, 0xA6, 0x03, 0xA1, 0xB2,  /* ........ */
                    /* 1E08 */  0xDF, 0xFD, 0x3A, 0x2C, 0x10, 0x10, 0x01, 0x39,  /* ..:,...9 */
                    /* 1E10 */  0x3A, 0x08, 0x15, 0xEE, 0x0F, 0x84, 0xE9, 0x7D,  /* :......} */
                    /* 1E18 */  0x66, 0x08, 0xD0, 0xE9, 0x40, 0x04, 0xE4, 0xC4,  /* f...@... */
                    /* 1E20 */  0x20, 0x54, 0xC1, 0x0F, 0x23, 0x08, 0x11, 0x0B,  /*  T..#... */
                    /* 1E28 */  0x42, 0x15, 0xFC, 0x30, 0x82, 0x12, 0x2D, 0x2F,  /* B..0..-/ */
                    /* 1E30 */  0x0E, 0x01, 0x59, 0x1F, 0x08, 0xD5, 0x0B, 0x22,  /* ..Y...." */
                    /* 1E38 */  0x30, 0x67, 0x03, 0xA2, 0x79, 0x41, 0x68, 0x7E,  /* 0g..yAh~ */
                    /* 1E40 */  0x30, 0xAA, 0xD5, 0x28, 0x10, 0xD3, 0x0F, 0x42,  /* 0..(...B */
                    /* 1E48 */  0xF3, 0x80, 0x08, 0xCC, 0x0A, 0xDE, 0x1E, 0x07,  /* ........ */
                    /* 1E50 */  0xCC, 0x40, 0xA8, 0x4A, 0x10, 0x81, 0x39, 0x17,  /* .@.J..9. */
                    /* 1E58 */  0x10, 0xCD, 0x0A, 0x42, 0xB3, 0x83, 0x51, 0xED,  /* ...B..Q. */
                    /* 1E60 */  0x9F, 0x10, 0x0D, 0x80, 0x80, 0xD0, 0x7C, 0x20,  /* ......|  */
                    /* 1E68 */  0x3A, 0x0C, 0x90, 0xE7, 0xA0, 0x80, 0xAC, 0x11,  /* :....... */
                    /* 1E70 */  0x84, 0x6A, 0x06, 0xD1, 0xF1, 0x80, 0x00, 0xD1,  /* .j...... */
                    /* 1E78 */  0xFC, 0x20, 0x54, 0xCF, 0xC7, 0x24, 0x18, 0xC9,  /* . T..$.. */
                    /* 1E80 */  0x00, 0x22, 0x20, 0x6B, 0xF9, 0xF2, 0x07, 0x22,  /* ." k..." */
                    /* 1E88 */  0xFA, 0x41, 0x04, 0xE4, 0x4C, 0x20, 0x34, 0x23,  /* .A..L 4# */
                    /* 1E90 */  0x18, 0x55, 0xFB, 0x2E, 0xD2, 0x71, 0x80, 0x80,  /* .U...q.. */
                    /* 1E98 */  0xD0, 0x44, 0x20, 0x1A, 0x1E, 0x79, 0xED, 0x1C,  /* .D ..y.. */
                    /* 1EA0 */  0x1E, 0x03, 0xA1, 0x2A, 0x41, 0x04, 0x66, 0x8D,  /* ...*A.f. */
                    /* 1EA8 */  0x0F, 0x4C, 0x81, 0x38, 0x21, 0x08, 0x55, 0x6F,  /* .L.8!.Uo */
                    /* 1EB0 */  0xF7, 0xC0, 0x40, 0xF5, 0x82, 0xB0, 0xFF, 0xBF,  /* ..@..... */
                    /* 1EB8 */  0x5A, 0xC1, 0x83, 0xA0, 0x20, 0x34, 0x11, 0x88,  /* Z... 4.. */
                    /* 1EC0 */  0x0E, 0x19, 0xE4, 0xD5, 0x12, 0x88, 0xE8, 0x02,  /* ........ */
                    /* 1EC8 */  0xA1, 0x3A, 0x41, 0x34, 0x64, 0x02, 0x44, 0xB3,  /* .:A4d.D. */
                    /* 1ED0 */  0x82, 0xD0, 0xEC, 0x60, 0x34, 0xFB, 0xF3, 0x45,  /* ...`4..E */
                    /* 1ED8 */  0xC3, 0x20, 0x5F, 0x25, 0x1D, 0x18, 0xC8, 0xE3,  /* . _%.... */
                    /* 1EE0 */  0x31, 0x08, 0x51, 0xF4, 0x6D, 0x12, 0x88, 0x73,  /* 1.Q.m..s */
                    /* 1EE8 */  0x3F, 0x80, 0x34, 0x50, 0xF2, 0x29, 0x0A, 0x42,  /* ?.4P.).B */
                    /* 1EF0 */  0xB4, 0x81, 0x08, 0xCC, 0x39, 0x80, 0x68, 0x36,  /* ....9.h6 */
                    /* 1EF8 */  0x10, 0x9A, 0x15, 0x8C, 0x66, 0x55, 0x7D, 0xC4,  /* ....fU}. */
                    /* 1F00 */  0xA0, 0x4F, 0x9F, 0x43, 0x63, 0x2F, 0x3D, 0x81,  /* .O.Cc/=. */
                    /* 1F08 */  0x58, 0xC9, 0xCB, 0xE6, 0xD1, 0x82, 0xFD, 0xBC,  /* X....... */
                    /* 1F10 */  0x82, 0xB0, 0x4F, 0x59, 0x60, 0xF6, 0x32, 0xD2,  /* ..OY`.2. */
                    /* 1F18 */  0x31, 0x80, 0x80, 0x50, 0x3D, 0xCF, 0x33, 0x1D,  /* 1..P=.3. */
                    /* 1F20 */  0x01, 0x08, 0x88, 0x8E, 0x00, 0x04, 0x84, 0x66,  /* .......f */
                    /* 1F28 */  0x04, 0xA1, 0xD9, 0x41, 0xA8, 0xAE, 0xA7, 0xA3,  /* ...A.... */
                    /* 1F30 */  0x40, 0xAD, 0xED, 0xBF, 0x13, 0x84, 0x24, 0x03,  /* @.....$. */
                    /* 1F38 */  0xA1, 0xAA, 0x7F, 0xF3, 0x41, 0x88, 0xE2, 0xB7,  /* ....A... */
                    /* 1F40 */  0xA3, 0x86, 0x49, 0x9E, 0x6A, 0x0F, 0x01, 0xEC,  /* ..I.j... */
                    /* 1F48 */  0xA5, 0x28, 0x70, 0xEB, 0x06, 0xA1, 0x39, 0x40,  /* .(p...9@ */
                    /* 1F50 */  0x34, 0x50, 0x02, 0x44, 0xB5, 0xFC, 0x2E, 0x35,  /* 4P.D...5 */
                    /* 1F58 */  0x50, 0x02, 0x22, 0x30, 0x67, 0x02, 0xA2, 0x39,  /* P."0g..9 */
                    /* 1F60 */  0x41, 0xA8, 0x0A, 0xFD, 0xC3, 0xA0, 0x20, 0x02,  /* A..... . */
                    /* 1F68 */  0x72, 0x0A, 0x10, 0x9A, 0x0A, 0x8C, 0xEA, 0xF0,  /* r....... */
                    /* 1F70 */  0x3F, 0x00, 0x0A, 0x42, 0xB5, 0x82, 0xE8, 0x70,  /* ?..B...p */
                    /* 1F78 */  0x41, 0x12, 0x80, 0xB0, 0xA4, 0x20, 0x34, 0x45,  /* A.... 4E */
                    /* 1F80 */  0x83, 0x83, 0x09, 0x8D, 0x00, 0x48, 0x2B, 0x1C,  /* .....H+. */
                    /* 1F88 */  0x6E, 0x68, 0x08, 0x70, 0x16, 0x0A, 0x84, 0x06,  /* nh.p.... */
                    /* 1F90 */  0x05, 0xD1, 0xB1, 0xC5, 0xA9, 0x41, 0x04, 0x68,  /* .....A.h */
                    /* 1F98 */  0x81, 0x25, 0x0E, 0x20, 0x14, 0x84, 0xFE, 0xFF,  /* .%. .... */
                    /* 1FA0 */  0x03, 0x80, 0x08, 0xD0, 0x69, 0x40, 0x74, 0x44,  /* ....i@tD */
                    /* 1FA8 */  0x20, 0x60, 0x54, 0x47, 0x8A, 0x21, 0x51, 0x10,  /*  `TG.!Q. */
                    /* 1FB0 */  0x01, 0x5A, 0x28, 0x88, 0x8E, 0x3E, 0xA4, 0x05,  /* .Z(..>.. */
                    /* 1FB8 */  0x18, 0x13, 0x05, 0x42, 0xC5, 0x83, 0x50, 0xAD,  /* ...B..P. */
                    /* 1FC0 */  0x31, 0x40, 0x99, 0x72, 0x10, 0x81, 0x3A, 0x39,  /* 1@.r..:9 */
                    /* 1FC8 */  0x88, 0x8E, 0x04, 0xA4, 0xC6, 0xA1, 0x82, 0x82,  /* ........ */
                    /* 1FD0 */  0x50, 0xD5, 0x20, 0x54, 0x4E, 0x0E, 0x10, 0x26,  /* P. TN..& */
                    /* 1FD8 */  0x0D, 0x84, 0xCA, 0x05, 0xD1, 0x00, 0xAC, 0x1D,  /* ........ */
                    /* 1FE0 */  0x44, 0xC7, 0x26, 0x02, 0x46, 0xE3, 0x83, 0x50,  /* D.&.F..P */
                    /* 1FE8 */  0x49, 0x3D, 0x00, 0x99, 0x3E, 0x10, 0x01, 0x3A,  /* I=..>..: */
                    /* 1FF0 */  0x3D, 0x88, 0x0E, 0x03, 0x24, 0xC8, 0x41, 0x84,  /* =...$.A. */
                    /* 1FF8 */  0x82, 0x50, 0x89, 0x45, 0x40, 0x99, 0x60, 0x10,  /* .P.E@.`. */
                    /* 2000 */  0x1D, 0x7F, 0x08, 0x88, 0xC0, 0x2C, 0x23, 0x09,  /* .....,#. */
                    /* 2008 */  0x08, 0x13, 0x07, 0x42, 0xC5, 0x82, 0x50, 0x21,  /* ...B..P! */
                    /* 2010 */  0x51, 0x40, 0x59, 0x0C, 0x10, 0x1A, 0x24, 0x0B,  /* Q@Y...$. */
                    /* 2018 */  0x18, 0x0B, 0x07, 0x42, 0xC3, 0x82, 0xE8, 0x78,  /* ...B...x */
                    /* 2020 */  0x45, 0xBA, 0x00, 0x31, 0xC9, 0x20, 0x34, 0x02,  /* E..1. 4. */
                    /* 2028 */  0x08, 0x0D, 0x0B, 0x22, 0x40, 0x12, 0x06, 0x90,  /* ..."@... */
                    /* 2030 */  0x82, 0xD0, 0x08, 0x20, 0x34, 0x2B, 0x08, 0xD5,  /* ... 4+.. */
                    /* 2038 */  0x5E, 0x06, 0x94, 0x25, 0x06, 0xD1, 0x91, 0x81,  /* ^..%.... */
                    /* 2040 */  0xA4, 0x39, 0x9C, 0x50, 0x10, 0x81, 0x39, 0x0D,  /* .9.P..9. */
                    /* 2048 */  0x10, 0x4D, 0x08, 0x42, 0x13, 0x83, 0x50, 0x79,  /* .M.B..Py */
                    /* 2050 */  0x6D, 0x40, 0x58, 0x7A, 0x10, 0x1D, 0x1F, 0xC8,  /* m@Xz.... */
                    /* 2058 */  0x83, 0x51, 0xC7, 0x07, 0x02, 0x42, 0x53, 0x81,  /* .Q...BS. */
                    /* 2060 */  0xE8, 0xC0, 0x43, 0xEA, 0x1C, 0x78, 0x28, 0x08,  /* ..C..x(. */
                    /* 2068 */  0x55, 0x0F, 0xA2, 0xC3, 0x03, 0x29, 0x04, 0xC2,  /* U....).. */
                    /* 2070 */  0x74, 0x26, 0x3A, 0xD6, 0xD0, 0x46, 0x07, 0x03,  /* t&:..F.. */
                    /* 2078 */  0xFA, 0x08, 0x16, 0xA8, 0xFF, 0xFF, 0x6A, 0x2A,  /* ......j* */
                    /* 2080 */  0x81, 0x30, 0x75, 0x20, 0x54, 0x3F, 0x08, 0xCD,  /* .0u T?.. */
                    /* 2088 */  0x0A, 0x22, 0x50, 0xEB, 0xCB, 0x74, 0x10, 0xA0,  /* ."P..t.. */
                    /* 2090 */  0x20, 0x34, 0x03, 0x88, 0x06, 0x40, 0x80, 0xA8,  /*  4...@.. */
                    /* 2098 */  0x9A, 0x4E, 0x03, 0xA0, 0x20, 0x3A, 0xA4, 0x90,  /* .N.. :.. */
                    /* 20A0 */  0x54, 0xC7, 0x12, 0xDA, 0x0A, 0x84, 0xA5, 0x05,  /* T....... */
                    /* 20A8 */  0xA1, 0xC2, 0x7A, 0x81, 0x32, 0x91, 0x20, 0x54,  /* ..z.2. T */
                    /* 20B0 */  0x38, 0x88, 0x8E, 0x06, 0x4E, 0x01, 0xA2, 0xA3,  /* 8...N... */
                    /* 20B8 */  0x0A, 0x01, 0xA3, 0xD9, 0x41, 0xA8, 0x9E, 0x60,  /* ....A..` */
                    /* 20C0 */  0x80, 0x4C, 0x1C, 0x88, 0x00, 0x9D, 0x04, 0x44,  /* .L.....D */
                    /* 20C8 */  0x83, 0x25, 0x20, 0x34, 0x29, 0x20, 0x8D, 0x0D,  /* .% 4) .. */
                    /* 20D0 */  0x48, 0xA5, 0x16, 0x3B, 0x46, 0x51, 0x10, 0x1A,  /* H..;FQ.. */
                    /* 20D8 */  0x05, 0x44, 0x80, 0xCE, 0x05, 0xA2, 0xC3, 0x1C,  /* .D...... */
                    /* 20E0 */  0x49, 0x76, 0xCA, 0xA4, 0x20, 0x54, 0x2C, 0x88,  /* Iv.. T,. */
                    /* 20E8 */  0x0E, 0x17, 0x04, 0x44, 0x80, 0x8E, 0x0A, 0x46,  /* ...D...F */
                    /* 20F0 */  0x63, 0x83, 0x50, 0x29, 0xCD, 0x00, 0x99, 0x2E,  /* c.P).... */
                    /* 20F8 */  0x10, 0x01, 0x3A, 0x35, 0x88, 0xC0, 0xAC, 0x21,  /* ..:5...! */
                    /* 2100 */  0xDA, 0x21, 0x81, 0x82, 0xD0, 0x68, 0xD9, 0x40,  /* .!...h.@ */
                    /* 2108 */  0x59, 0x50, 0x10, 0x1D, 0xED, 0x48, 0x37, 0x30,  /* YP...H70 */
                    /* 2110 */  0x26, 0x1F, 0x84, 0x86, 0x02, 0xA1, 0x21, 0x41,  /* &.....!A */
                    /* 2118 */  0x68, 0x80, 0x72, 0x87, 0x38, 0x0A, 0x42, 0xE5,  /* h.r.8.B. */
                    /* 2120 */  0xD4, 0x03, 0x61, 0x61, 0x40, 0xA8, 0xD0, 0x7C,  /* ..aa@..| */
                    /* 2128 */  0x47, 0x3B, 0xDA, 0x0F, 0x90, 0x06, 0x04, 0x61,  /* G;.....a */
                    /* 2130 */  0xF1, 0x40, 0xE8, 0xFF, 0x1F                     /* .@... */
                })
            }
        }

        Device (WLBU)
        {
            Name (_HID, EisaId ("HPQ6001"))  // _HID: Hardware ID
            Name (WLDP, 0xFF)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((WLDP == 0xFF))
                {
                    Local0 = Zero
                    If ((OSYS == 0x07DC))
                    {
                        If (((WLVD != Zero) && (WLVD != 0xFFFF)))
                        {
                            Local0 = 0x0F
                        }
                    }

                    WLDP = Local0
                }

                Return (WLDP) /* \_SB_.WLBU.WLDP */
            }
        }
    }

    Scope (\)
    {
        OperationRegion (COMP, SystemMemory, 0xBFBBEC98, 0x00000200)
        Field (COMP, AnyAcc, Lock, Preserve)
        {
            IDMN,   16, 
            IDPC,   16, 
            BDID,   8, 
            CPFB,   8, 
            PBTI,   8, 
            BRLV,   8, 
            CAVR,   8, 
            TJMA,   16, 
            CORE,   8, 
            CG12,   8, 
            CG13,   8, 
            CG14,   8, 
            CG15,   8, 
            CG16,   8, 
            CG17,   8, 
            CG18,   8, 
            CG19,   8, 
            CG20,   8, 
            CG21,   8, 
            CG22,   8, 
            CG23,   8, 
            CG24,   8, 
            CG25,   8, 
            CG26,   8, 
            CG27,   8, 
            CG28,   8, 
            CG29,   8, 
            CG30,   8, 
            CG31,   8, 
            SFNO,   16, 
            STDT,   16, 
            BFDT,   1024, 
            RSV1,   736, 
            IDFD,   1024, 
            RSV2,   1024
        }
    }

    Scope (_SB.PCI0.LPC0)
    {
        Method (DCPB, 0, NotSerialized)
        {
            Acquire (^EC0.PFMX, 0xFFFF)
            SMID = 0x90
            SFNO = Zero
            SMIC = 0xCF
            Release (^EC0.PFMX)
        }

        Method (ECPB, 0, NotSerialized)
        {
            Acquire (^EC0.PFMX, 0xFFFF)
            SMID = 0x90
            SFNO = One
            SMIC = 0xCF
            Release (^EC0.PFMX)
        }

        Method (ECOK, 0, NotSerialized)
        {
            If ((^EC0.OKEC == One))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_GPE, 0x03)  // _GPE: General Purpose Events
            Name (OKEC, Zero)
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFF000000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    OKEC = Arg1
                }

                PSED = PSSP /* \PSSP */
                If (ADPT)
                {
                    ECPB ()
                }
                Else
                {
                    DCPB ()
                }
            }

            OperationRegion (ECMM, SystemMemory, 0xFF000000, 0x1000)
            Field (ECMM, AnyAcc, Lock, Preserve)
            {
                Offset (0x800), 
                Offset (0x85A), 
                AASD,   8, 
                Offset (0x890), 
                BMFN,   72, 
                BATD,   56, 
                AATL,   1, 
                AACL,   1, 
                AAST,   1, 
                AARW,   1, 
                AAEN,   1, 
                AAEW,   1, 
                AAND,   1, 
                Offset (0x8A1), 
                KBBL,   1, 
                VIDO,   1, 
                TOUP,   1, 
                Offset (0x8A2), 
                ODTS,   8, 
                OSTY,   3, 
                    ,   4, 
                ADPT,   1, 
                PWAK,   1, 
                MWAK,   1, 
                LWAK,   1, 
                RWAK,   1, 
                WWAK,   1, 
                UWAK,   1, 
                KWAK,   1, 
                TWAK,   1, 
                CCAC,   1, 
                AOAC,   1, 
                BLAC,   1, 
                PSRC,   1, 
                BOAC,   1, 
                LCAC,   1, 
                AAAC,   1, 
                ACAC,   1, 
                S3ST,   1, 
                S3RM,   1, 
                S4ST,   1, 
                S4RM,   1, 
                S5ST,   1, 
                S5RM,   1, 
                Offset (0x8A7), 
                OSTT,   8, 
                OSST,   8, 
                THLT,   8, 
                TCNL,   8, 
                MODE,   1, 
                    ,   2, 
                INIT,   1, 
                FAN1,   1, 
                FAN2,   1, 
                FANT,   1, 
                SKNM,   1, 
                SDTM,   8, 
                FSSN,   4, 
                FANU,   4, 
                PCVL,   6, 
                SWTO,   1, 
                TTHR,   1, 
                TTHM,   1, 
                THTL,   1, 
                    ,   2, 
                NPST,   4, 
                CTMP,   8, 
                CTML,   8, 
                SKTA,   8, 
                SKTB,   8, 
                SKTC,   8, 
                Offset (0x8B6), 
                NTMP,   8, 
                    ,   1, 
                SKEY,   1, 
                DIGM,   1, 
                CDLE,   1, 
                Offset (0x8B8), 
                    ,   1, 
                LIDF,   1, 
                PMEE,   1, 
                PWBE,   1, 
                RNGE,   1, 
                BTWE,   1, 
                Offset (0x8B9), 
                BRTS,   8, 
                S35M,   1, 
                S35S,   1, 
                    ,   2, 
                FFEN,   1, 
                FFST,   1, 
                Offset (0x8BB), 
                WLAT,   1, 
                BTAT,   1, 
                WLEX,   1, 
                BTEX,   1, 
                KLSW,   1, 
                WLOK,   1, 
                AT3G,   1, 
                EX3G,   1, 
                PJID,   8, 
                CPTY,   2, 
                SPTB,   1, 
                CPNM,   3, 
                GATY,   2, 
                BOL0,   1, 
                BOL1,   1, 
                    ,   2, 
                BCC0,   1, 
                BCC1,   1, 
                Offset (0x8BF), 
                BPU0,   1, 
                BPU1,   1, 
                    ,   2, 
                BOS0,   1, 
                BOS1,   1, 
                Offset (0x8C0), 
                BTY0,   1, 
                BAM0,   1, 
                BAL0,   1, 
                    ,   1, 
                BMF0,   3, 
                Offset (0x8C1), 
                BST0,   8, 
                BRC0,   16, 
                BSN0,   16, 
                BPV0,   16, 
                BDV0,   16, 
                BDC0,   16, 
                BFC0,   16, 
                GAU0,   8, 
                CYC0,   8, 
                BPC0,   16, 
                BAC0,   16, 
                BTW0,   8, 
                BVL0,   8, 
                BTM0,   8, 
                BAT0,   8, 
                BCG0,   16, 
                BCT0,   8, 
                BCI0,   8, 
                BCM0,   8, 
                BOT0,   8, 
                BSSB,   16, 
                BOV0,   8, 
                BCF0,   8, 
                BAD0,   8, 
                BCV1,   16, 
                BCV2,   16, 
                BCV3,   16, 
                BCV4,   16, 
                MNAS,   16, 
                AVTE,   16, 
                MXER,   8, 
                BATE,   1, 
                BATF,   1, 
                BAEP,   1, 
                BAFI,   1, 
                    ,   2, 
                BARC,   1, 
                Offset (0x8F1), 
                LLBT,   1, 
                CHE1,   1, 
                STE1,   1, 
                BS5P,   1, 
                SRBT,   1, 
                SCCC,   1, 
                Offset (0x8F2), 
                BFCT,   1, 
                BTBC,   1, 
                BCFL,   1, 
                DBCS,   1, 
                BSTC,   1, 
                BSCU,   1, 
                BTOV,   1, 
                BTOT,   1, 
                BTCT,   1, 
                SCAT,   1, 
                SCSB,   1, 
                SCHW,   1, 
                SCFL,   1, 
                WBTN,   1, 
                SCPS,   1, 
                SCHV,   1, 
                BMD0,   16, 
                BACV,   16, 
                BDN0,   8, 
                RTTE,   16, 
                ATTF,   16, 
                SBVR,   16, 
                Offset (0x900)
            }

            OperationRegion (ECMP, SystemMemory, 0xFF000000, 0x1000)
            Field (ECMP, AnyAcc, Lock, Preserve)
            {
                Offset (0x800), 
                REC1,   8, 
                REC2,   8, 
                WEC1,   8, 
                WEC2,   8, 
                WMIM,   8, 
                ACKM,   1, 
                Offset (0x806), 
                STMS,   2, 
                MBMS,   2, 
                ACLS,   1, 
                MBSS,   1, 
                CSHE,   1, 
                ACSP,   1, 
                PSAC,   1, 
                PSBC,   1, 
                PSED,   1, 
                Offset (0x808), 
                PSPD,   8, 
                BCPD,   8, 
                BSTH,   8, 
                PRDT,   8, 
                PSSE,   8, 
                CPTP,   8, 
                SAID,   8, 
                FANE,   1, 
                CPUO,   1, 
                M4GO,   1, 
                FNSW,   1, 
                SBTC,   1, 
                    ,   2, 
                OHP0,   1, 
                IBCL,   8, 
                FRPM,   8, 
                FNMX,   8, 
                FNMN,   8, 
                FWPM,   8, 
                RSTV,   8, 
                CPTV,   8, 
                GPTV,   8, 
                PHTV,   8, 
                FNTV,   8, 
                BTTV,   8, 
                HDTV,   8, 
                Offset (0x82D), 
                BCTL,   128, 
                Offset (0x84D), 
                PENS,   120, 
                WACL,   1, 
                AADT,   1, 
                Offset (0x85D), 
                ENSI,   8, 
                ENSB,   8, 
                ENSD,   8, 
                SMBP,   8, 
                SMBS,   5, 
                    ,   1, 
                SMAL,   1, 
                SMDN,   1, 
                SMAR,   8, 
                SMCD,   8, 
                SMDA,   256, 
                SMBC,   8, 
                SALA,   8, 
                SAD0,   8, 
                SAD1,   8, 
                BDCM,   64, 
                Offset (0x8AE), 
                CPTR,   8, 
                Offset (0x8B4), 
                GPTP,   8, 
                PHTP,   8, 
                Offset (0x8C1), 
                GBIS,   2, 
                Offset (0x8D7), 
                BTTP,   8, 
                Offset (0x8F2), 
                    ,   5, 
                SBIS,   1, 
                Offset (0xAC3), 
                    ,   3, 
                GBTC,   1, 
                Offset (0xBB0), 
                Offset (0xBBC), 
                CPUT,   8, 
                Offset (0xBC0), 
                Offset (0xBC2), 
                PRTM,   16, 
                Offset (0xBC5)
            }

            OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
            Field (ERAM, ByteAcc, Lock, Preserve)
            {
                Offset (0x5A), 
                Offset (0x5B), 
                Offset (0x5C), 
                Offset (0x5D), 
                ENIB,   16, 
                ENDD,   8, 
                SMPR,   8, 
                SMST,   8, 
                SMAD,   8, 
                SMCM,   8, 
                SMD0,   256, 
                BCNT,   8, 
                SMAA,   24, 
                Offset (0x89)
            }

            OperationRegion (ECPR, EmbeddedControl, Zero, 0xFF)
            Field (ECPR, ByteAcc, Lock, Preserve)
            {
                Offset (0x06), 
                    ,   4, 
                GSPN,   1, 
                Offset (0x0E), 
                SADP,   8, 
                Offset (0x88), 
                BTDC,   64, 
                BMNN,   72, 
                BDVN,   56, 
                Offset (0xEB), 
                MUAC,   16, 
                ATTE,   16
            }

            OperationRegion (CCLK, SystemIO, 0x0410, 0x04)
            Field (CCLK, DWordAcc, NoLock, Preserve)
            {
                    ,   1, 
                DUTY,   3, 
                THEN,   1, 
                Offset (0x01), 
                FTT,    1, 
                    ,   8, 
                TSTS,   1
            }

            OperationRegion (ECRM, EmbeddedControl, Zero, 0xFF)
            Field (ECRM, ByteAcc, Lock, Preserve)
            {
                Offset (0x5D), 
                ERIB,   16, 
                ERBD,   8, 
                Offset (0xAA), 
                Offset (0xAB), 
                Offset (0xAD), 
                    ,   4, 
                Offset (0xAE), 
                PTVL,   4, 
                Offset (0xB0), 
                Offset (0xB1), 
                Offset (0xB2), 
                Offset (0xB3), 
                Offset (0xB4), 
                Offset (0xB5), 
                Offset (0xBC), 
                Offset (0xBD)
            }

            Mutex (FAMX, 0x00)
            Method (FANG, 1, NotSerialized)
            {
                Acquire (FAMX, 0xFFFF)
                ENIB = Arg0
                Local0 = ENDD /* \_SB_.PCI0.LPC0.EC0_.ENDD */
                Release (FAMX)
                Return (Local0)
            }

            Method (FANW, 2, NotSerialized)
            {
                Acquire (FAMX, 0xFFFF)
                ENIB = Arg0
                ENDD = Arg1
                Release (FAMX)
                Return (Arg1)
            }

            Method (TUVR, 1, NotSerialized)
            {
                Return (0x03)
            }

            Method (THRO, 1, NotSerialized)
            {
                ATHR (Arg0)
            }

            Method (CLCK, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (PCLK, 0, NotSerialized)
            {
                APCL ()
            }

            Method (ATHR, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((\_PR.C000._PPC == Zero))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    If ((Arg0 == One))
                    {
                        Return (\_PR.C000._PPC) /* External reference */
                    }
                    Else
                    {
                        If ((Arg0 == 0x02))
                        {
                            Return (TTHR) /* \_SB_.PCI0.LPC0.EC0_.TTHR */
                        }
                        Else
                        {
                            Return (0xFF)
                        }
                    }
                }
            }

            Method (APCL, 0, NotSerialized)
            {
                Local0 = PTVL /* \_SB_.PCI0.LPC0.EC0_.PTVL */
                Name (MPEN, 0x04)
                \_PR.C000._PPC = Local0
                If ((MPEN >= One))
                {
                    \_PR.C001._PPC = Local0
                    If ((MPEN >= 0x02))
                    {
                        \_PR.C002._PPC = Local0
                        If ((MPEN >= 0x03))
                        {
                            \_PR.C003._PPC = Local0
                        }
                    }
                }

                Notify (\_PR.C000, 0x80) // Performance Capability Change
                If ((MPEN >= One))
                {
                    Notify (\_PR.C001, 0x80) // Performance Capability Change
                    If ((MPEN >= 0x02))
                    {
                        Notify (\_PR.C002, 0x80) // Performance Capability Change
                        If ((MPEN >= 0x03))
                        {
                            Notify (\_PR.C003, 0x80) // Performance Capability Change
                        }
                    }
                }
            }

            Name (CMFP, Package (0x0B)
            {
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x60, 
                0x61, 
                0x62, 
                0x63, 
                0x64
            })
            Mutex (CFMX, 0x00)
            Method (CFUN, 4, Serialized)
            {
                Name (ESRC, 0x05)
                If ((Match (CMFP, MEQ, DerefOf (Index (Arg0, Zero)), MTR, 
                    Zero, Zero) != Ones))
                {
                    Acquire (CFMX, 0xFFFF)
                    SMID = Arg0
                    SFNO = Arg1
                    BFDT = Arg2
                    SMIC = 0xCE
                    Release (CFMX)
                }
                Else
                {
                    If ((DerefOf (Index (Arg0, Zero)) == 0x10))
                    {
                        If ((DerefOf (Index (Arg1, Zero)) == One))
                        {
                            CreateByteField (Arg2, Zero, CAPV)
                            CAVR = CAPV /* \_SB_.PCI0.LPC0.EC0_.CFUN.CAPV */
                            STDT = One
                        }
                        Else
                        {
                            If ((DerefOf (Index (Arg1, Zero)) == 0x02))
                            {
                                Local0 = Buffer (0x80) {}
                                CreateByteField (Local0, Zero, BFD0)
                                BFD0 = 0x07
                                STDT = One
                                BFDT = Local0
                            }
                            Else
                            {
                                STDT = Zero
                            }
                        }
                    }
                    Else
                    {
                        If ((DerefOf (Index (Arg0, Zero)) == 0x18))
                        {
                            Acquire (CFMX, 0xFFFF)
                            If ((DerefOf (Index (Arg1, Zero)) == 0x02))
                            {
                                SMD0 = Zero
                                SMAD = DerefOf (Index (Arg2, One))
                                SMCM = DerefOf (Index (Arg2, 0x02))
                                SMPR = DerefOf (Index (Arg2, Zero))
                                While ((~(ESRC == Zero) && ~((SMST & 0x80
                                    ) == 0x80)))
                                {
                                    Sleep (0x14)
                                    ESRC -= One
                                }

                                Local2 = SMST /* \_SB_.PCI0.LPC0.EC0_.SMST */
                                If (((Local2 & 0x80) == 0x80))
                                {
                                    Local1 = Buffer (0x80) {}
                                    Index (Local1, Zero) = Local2
                                    If ((Local2 == 0x80))
                                    {
                                        P80H = 0xC4
                                        Index (Local1, One) = BCNT /* \_SB_.PCI0.LPC0.EC0_.BCNT */
                                        Local3 = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                                        Index (Local1, 0x02) = DerefOf (Index (Local3, Zero))
                                        Index (Local1, 0x03) = DerefOf (Index (Local3, One))
                                        Index (Local1, 0x04) = DerefOf (Index (Local3, 0x02))
                                        Index (Local1, 0x05) = DerefOf (Index (Local3, 0x03))
                                        Index (Local1, 0x06) = DerefOf (Index (Local3, 0x04))
                                        Index (Local1, 0x07) = DerefOf (Index (Local3, 0x05))
                                        Index (Local1, 0x08) = DerefOf (Index (Local3, 0x06))
                                        Index (Local1, 0x09) = DerefOf (Index (Local3, 0x07))
                                        Index (Local1, 0x0A) = DerefOf (Index (Local3, 0x08))
                                        Index (Local1, 0x0B) = DerefOf (Index (Local3, 0x09))
                                        Index (Local1, 0x0C) = DerefOf (Index (Local3, 0x0A))
                                        Index (Local1, 0x0D) = DerefOf (Index (Local3, 0x0B))
                                        Index (Local1, 0x0E) = DerefOf (Index (Local3, 0x0C))
                                        Index (Local1, 0x0F) = DerefOf (Index (Local3, 0x0D))
                                        Index (Local1, 0x10) = DerefOf (Index (Local3, 0x0E))
                                        Index (Local1, 0x11) = DerefOf (Index (Local3, 0x0F))
                                        Index (Local1, 0x12) = DerefOf (Index (Local3, 0x10))
                                        Index (Local1, 0x13) = DerefOf (Index (Local3, 0x11))
                                        Index (Local1, 0x14) = DerefOf (Index (Local3, 0x12))
                                        Index (Local1, 0x15) = DerefOf (Index (Local3, 0x13))
                                        Index (Local1, 0x16) = DerefOf (Index (Local3, 0x14))
                                        Index (Local1, 0x17) = DerefOf (Index (Local3, 0x15))
                                        Index (Local1, 0x18) = DerefOf (Index (Local3, 0x16))
                                        Index (Local1, 0x19) = DerefOf (Index (Local3, 0x17))
                                        Index (Local1, 0x1A) = DerefOf (Index (Local3, 0x18))
                                        Index (Local1, 0x1B) = DerefOf (Index (Local3, 0x19))
                                        Index (Local1, 0x1C) = DerefOf (Index (Local3, 0x1A))
                                        Index (Local1, 0x1D) = DerefOf (Index (Local3, 0x1B))
                                        Index (Local1, 0x1E) = DerefOf (Index (Local3, 0x1C))
                                        Index (Local1, 0x1F) = DerefOf (Index (Local3, 0x1D))
                                        Index (Local1, 0x20) = DerefOf (Index (Local3, 0x1E))
                                        Index (Local1, 0x21) = DerefOf (Index (Local3, 0x1F))
                                    }

                                    BFDT = Local1
                                    STDT = One
                                }
                                Else
                                {
                                    P80H = 0xC5
                                    STDT = Zero
                                }
                            }
                            Else
                            {
                                P80H = 0xC6
                                STDT = Zero
                            }

                            Release (CFMX)
                        }
                        Else
                        {
                            STDT = Zero
                        }
                    }
                }
            }

            Name (PMFP, Package (0x05)
            {
                0x80, 
                0x81, 
                0x84, 
                0x85, 
                0x86
            })
            Mutex (PFMX, 0x00)
            Method (PFUN, 4, Serialized)
            {
                If ((Match (PMFP, MEQ, DerefOf (Index (Arg0, Zero)), MTR, 
                    Zero, Zero) != Ones))
                {
                    Acquire (PFMX, 0xFFFF)
                    SMID = Arg0
                    SFNO = Arg1
                    BFDT = Arg2
                    SMIC = 0xCF
                    Release (PFMX)
                }
                Else
                {
                    If ((DerefOf (Index (Arg0, Zero)) == 0x82))
                    {
                        STDT = Zero
                        Acquire (PFMX, 0xFFFF)
                        CreateByteField (Arg1, Zero, WIBC)
                        HWCT = 0x29
                        HWBC = WIBC /* \_SB_.PCI0.LPC0.EC0_.PFUN.WIBC */
                        HWBF = Arg2
                        SMIC = 0xC3
                        Release (PFMX)
                        STDT = One
                    }
                    Else
                    {
                        If ((DerefOf (Index (Arg0, Zero)) == 0x83))
                        {
                            STDT = Zero
                            ^^^^WMID.SWDS (0x01FF0000)
                            STDT = One
                        }
                        Else
                        {
                            STDT = Zero
                        }
                    }
                }
            }

            Method (CMFC, 4, Serialized)
            {
                Name (RTVL, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                If ((ObjectType (Arg0) == One))
                {
                    If ((Arg0 == 0xFE00))
                    {
                        If ((DerefOf (Index (Arg1, Zero)) == One))
                        {
                            If ((DerefOf (Index (Arg2, Zero)) == Zero))
                            {
                                If ((DerefOf (Index (Arg3, Zero)) != Zero))
                                {
                                    Index (RTVL, Zero) = 0x8300
                                }
                                Else
                                {
                                    Index (RTVL, Zero) = Zero
                                    Index (RTVL, One) = IDMN /* \IDMN */
                                    Index (RTVL, 0x02) = IDPC /* \IDPC */
                                }
                            }
                            Else
                            {
                                Index (RTVL, Zero) = 0x8300
                            }
                        }
                        Else
                        {
                            Index (RTVL, Zero) = 0x8000
                        }
                    }
                }
                Else
                {
                    If ((DerefOf (Index (Arg0, Zero)) < 0xFE))
                    {
                        Local1 = Buffer (0x82) {}
                        CreateWordField (Local1, Zero, RTST)
                        CreateField (Local1, 0x10, 0x0400, RTDT)
                        If ((DerefOf (Index (Arg0, Zero)) < 0x7F))
                        {
                            CFUN (Arg0, Arg1, Arg2, Arg3)
                        }
                        Else
                        {
                            PFUN (Arg0, Arg1, Arg2, Arg3)
                        }

                        RTST = STDT /* \STDT */
                        RTDT = BFDT /* \BFDT */
                        Return (Local1)
                    }
                    Else
                    {
                        Index (RTVL, Zero) = 0x8000
                    }
                }

                Return (RTVL) /* \_SB_.PCI0.LPC0.EC0_.CMFC.RTVL */
            }
        }

        Scope (EC0)
        {
            Method (BSHK, 0, NotSerialized)
            {
                If (ECOK ())
                {
                    Local1 = One
                    If ((OSYS == 0x07D1))
                    {
                        Local1 = Zero
                    }

                    If ((OSYS == 0x07D2))
                    {
                        Local1 = Zero
                    }

                    If ((OSYS == 0x07D6))
                    {
                        Local1 = One
                    }

                    If ((OSYS == 0x03E8))
                    {
                        Local1 = 0x02
                    }

                    If ((OSYS == 0x07D9))
                    {
                        Local1 = 0x03
                    }

                    If ((OSYS == 0x07DC))
                    {
                        Local1 = 0x04
                    }

                    Sleep (0x14)
                    OSTY = Local1
                    Sleep (0x14)
                }
            }

            Method (GBMN, 0, NotSerialized)
            {
                Local0 = Buffer (0x08)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                    }
                If (ECOK ())
                {
                    Local1 = BDVN /* \_SB_.PCI0.LPC0.EC0_.BDVN */
                    CreateField (Local0, Zero, 0x38, BMA0)
                    BMA0 = Local1
                }

                Return (Local0)
            }

            Method (GUBS, 0, NotSerialized)
            {
                Local0 = Buffer (0x11)
                    {
                        "00000 00/00/    "
                    }
                If (ECOK ())
                {
                    Local1 = BSN0 /* \_SB_.PCI0.LPC0.EC0_.BSN0 */
                    Local2 = 0x04
                    While (Local1)
                    {
                        Divide (Local1, 0x0A, Local3, Local1)
                        Index (Local0, Local2) = (Local3 + 0x30)
                        Local2--
                    }

                    Local1 = BMD0 /* \_SB_.PCI0.LPC0.EC0_.BMD0 */
                    Local2 = ((Local1 >> 0x05) & 0x0F)
                    Local3 = 0x07
                    While (Local2)
                    {
                        Divide (Local2, 0x0A, Local4, Local2)
                        Index (Local0, Local3) = (Local4 + 0x30)
                        Local3--
                    }

                    Local2 = (Local1 & 0x1F)
                    Local3 = 0x0A
                    While (Local2)
                    {
                        Divide (Local2, 0x0A, Local4, Local2)
                        Index (Local0, Local3) = (Local4 + 0x30)
                        Local3--
                    }

                    Local2 = (Local1 >> 0x09)
                    Local2 += 0x07BC
                    Local3 = 0x0F
                    While (Local2)
                    {
                        Divide (Local2, 0x0A, Local4, Local2)
                        Index (Local0, Local3) = (Local4 + 0x30)
                        Local3--
                    }
                }

                Return (Local0)
            }

            Method (GUBT, 0, NotSerialized)
            {
                Local0 = Buffer (0x09)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                        /* 0008 */  0x00                                             /* . */
                    }
                If (ECOK ())
                {
                    Local1 = BTDC /* \_SB_.PCI0.LPC0.EC0_.BTDC */
                    CreateField (Local0, Zero, 0x40, BMA0)
                    BMA0 = Local1
                }

                Return (Local0)
            }

            Method (GUBI, 0, NotSerialized)
            {
                Local0 = Buffer (0x0A)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                        /* 0008 */  0x00, 0x00                                       /* .. */
                    }
                If (ECOK ())
                {
                    Local1 = BMNN /* \_SB_.PCI0.LPC0.EC0_.BMNN */
                    CreateField (Local0, Zero, 0x48, BMA0)
                    BMA0 = Local1
                }

                Return (Local0)
            }
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (BMDL, Zero)
            Name (BASC, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ^^EC0.BSHK ()
                If (ECOK ())
                {
                    If (^^EC0.BOL0)
                    {
                        Sleep (0x14)
                        Return (0x1F)
                    }
                    Else
                    {
                        Sleep (0x14)
                        Return (0x0F)
                    }
                }
                Else
                {
                    Sleep (0x14)
                    Return (0x1F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Name (STAT, Package (0x0D)
                {
                    One, 
                    0x1770, 
                    0x1770, 
                    One, 
                    0x2A30, 
                    0x0258, 
                    0xB4, 
                    0x0108, 
                    0x0EC4, 
                    "PABAS0241231", 
                    "41167", 
                    "Li-Ion", 
                    "Hewlett-Packard"
                })
                Index (STAT, Zero) = ^^EC0.BAM0 /* \_SB_.PCI0.LPC0.EC0_.BAM0 */
                Index (STAT, 0x09) = ^^EC0.GBMN ()
                Index (STAT, 0x0A) = ^^EC0.GUBS ()
                Index (STAT, 0x0B) = ^^EC0.GUBT ()
                Index (STAT, 0x0C) = ^^EC0.GUBI ()
                If (ECOK ())
                {
                    If ((^^EC0.BAM0 == Zero))
                    {
                        BASC = 0x0A
                    }

                    Local0 = ^^EC0.BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                    BMDL = Local0
                    Index (STAT, One) = (^^EC0.BFC0 * BASC)
                    Sleep (0x14)
                    Index (STAT, 0x04) = ^^EC0.BDV0 /* \_SB_.PCI0.LPC0.EC0_.BDV0 */
                    Sleep (0x14)
                    Local2 = (^^EC0.BFC0 * BASC)
                    Index (STAT, 0x02) = Local2
                    Sleep (0x14)
                    If (Local2)
                    {
                        Divide (Local2, 0x64, Local0, Local1)
                        Local1 *= 0x05
                        Index (STAT, 0x05) = Local1
                        Divide (Local2, 0x64, Local0, Local1)
                        Local1 *= 0x03
                        Index (STAT, 0x06) = Local1
                    }

                    Index (STAT, 0x04) = ^^EC0.BDV0 /* \_SB_.PCI0.LPC0.EC0_.BDV0 */
                    Sleep (0x14)
                }

                Return (STAT) /* \_SB_.PCI0.LPC0.BAT1._BIF.STAT */
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Name (PBST, Package (0x04)
                {
                    Zero, 
                    Ones, 
                    Ones, 
                    0x1770
                })
                If (ECOK ())
                {
                    Index (PBST, Zero) = ^^EC0.BST0 /* \_SB_.PCI0.LPC0.EC0_.BST0 */
                    Sleep (0x14)
                    If (((S3BS <= One) || (^^EC0.BPC0 == Zero)))
                    {
                        Local4 = ^^EC0.BAC0 /* \_SB_.PCI0.LPC0.EC0_.BAC0 */
                        Local4 -= 0xFFFF
                        S3BS = Zero
                    }
                    Else
                    {
                        Local4 = SBAC /* \SBAC */
                        Local4 -= 0xFFFF
                        S3BS -= One
                    }

                    If ((^^EC0.BAM0 == Zero))
                    {
                        Local4 *= ^^EC0.BDV0
                        Divide (Local4, 0x03E8, Local5, Local4)
                    }

                    Index (PBST, One) = Local4
                    Sleep (0x14)
                    Index (PBST, 0x02) = (^^EC0.BRC0 * BASC)
                    Sleep (0x14)
                    Index (PBST, 0x03) = ^^EC0.BPV0 /* \_SB_.PCI0.LPC0.EC0_.BPV0 */
                    Sleep (0x14)
                    If ((^^EC0.BDN0 != BMDL))
                    {
                        Notify (BAT1, 0x81) // Information Change
                    }
                }

                Return (PBST) /* \_SB_.PCI0.LPC0.BAT1._BST.PBST */
            }
        }

        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (XX00, Buffer (0x03) {})
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Local0 = ^^EC0.ADPT /* \_SB_.PCI0.LPC0.EC0_.ADPT */
                CreateWordField (XX00, Zero, SSZE)
                CreateByteField (XX00, 0x02, ACST)
                SSZE = 0x03
                If (Local0)
                {
                    P80H = 0xAC
                    ^^^VGA.AFN4 (One)
                    ACST = Zero
                }
                Else
                {
                    P80H = 0xDC
                    ^^^VGA.AFN4 (0x02)
                    ACST = One
                }

                ALIB (One, XX00)
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB)
    {
        Method (CHWL, 0, NotSerialized)
        {
            If (^WMID.BTLS)
            {
                If (^WMID.WLAN)
                {
                    GP57 = One
                }
                Else
                {
                    GP57 = Zero
                }

                If (^WMID.BLTH)
                {
                    GP54 = Zero
                }
                Else
                {
                    GP54 = One
                }
            }
            Else
            {
                GP57 = Zero
                GP54 = One
            }
        }

        Method (TBSW, 0, NotSerialized)
        {
            If ((TBSP == One))
            {
                If ((^PCI0.LPC0.EC0.ADPT == One))
                {
                    TBSM (One, 0xD7)
                }
                Else
                {
                    TBSM (Zero, 0xD7)
                }
            }
        }

        Method (TBSM, 2, Serialized)
        {
            Mutex (ACMX, 0x00)
            Acquire (ACMX, 0xFFFF)
            SMID = Arg0
            SMIC = Arg1
            Release (ACMX)
        }

        Method (SWWL, 0, NotSerialized)
        {
            If (^WMID.BTLS)
            {
                GP57 = Zero
                GP54 = One
                ^WMID.BTLS = Zero
            }
            Else
            {
                If (^WMID.WLAN)
                {
                    GP57 = One
                }
                Else
                {
                    GP57 = Zero
                }

                If (^WMID.BLTH)
                {
                    GP54 = Zero
                }
                Else
                {
                    GP54 = One
                }

                ^WMID.BTLS = One
            }
        }
    }

    Method (DCPB, 0, NotSerialized)
    {
        Acquire (\_SB.PCI0.LPC0.EC0.PFMX, 0xFFFF)
        SMID = 0x90
        SFNO = Zero
        SMIC = 0xCF
        Release (\_SB.PCI0.LPC0.EC0.PFMX)
    }

    Method (ECPB, 0, NotSerialized)
    {
        Acquire (\_SB.PCI0.LPC0.EC0.PFMX, 0xFFFF)
        SMID = 0x90
        SFNO = One
        SMIC = 0xCF
        Release (\_SB.PCI0.LPC0.EC0.PFMX)
    }

    Scope (_SB.PCI0.LPC0.EC0)
    {
        Name (BRDN, Zero)
        Name (BRUP, Zero)
        Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x11
            Notify (^^^VGA.LCD, 0x87) // Device-Specific
            BRDN = One
            If (BRLS)
            {
                ^^^VGA.LCD.BRAJ ()
            }

            BRDN = Zero
        }

        Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x12
            Notify (^^^VGA.LCD, 0x86) // Device-Specific
            BRUP = One
            If (BRLS)
            {
                ^^^VGA.LCD.BRAJ ()
            }

            BRUP = Zero
        }

        Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x13
            If (ECON)
            {
                THSD = One
                Notify (\_TZ.TSZ0, 0x80) // Thermal Status Change
            }
        }

        Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x14
            If (ECON)
            {
                If (!FANE)
                {
                    FFAL = One
                }

                Notify (\_TZ.TSZ0, 0x80) // Thermal Status Change
            }
        }

        Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x1D
            Local0 = PCVL /* \_SB_.PCI0.LPC0.EC0_.PCVL */
            \_PR.C000.PPCV = Local0
            Notify (\_PR.C000, 0x80) // Performance Capability Change
        }

        Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x25
            Debug = "=====QUERY_25====="
            Sleep (0x03E8)
            Notify (BAT1, 0x81) // Information Change
            Sleep (0x03E8)
            Notify (BAT1, 0x80) // Status Change
        }

        Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x37
            Debug = "=====QUERY_37====="
            Notify (ACAD, 0x80) // Status Change
            Sleep (0x03E8)
            Notify (BAT1, 0x80) // Status Change
            PWRS = One
            ECPB ()
        }

        Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x38
            Debug = "=====QUERY_38====="
            Notify (ACAD, 0x80) // Status Change
            Sleep (0x03E8)
            Notify (BAT1, 0x80) // Status Change
            PWRS = Zero
            DCPB ()
        }

        Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x40
            If ((OSYS == 0x07DC))
            {
                Notify (WLBU, 0x80) // Status Change
            }
            Else
            {
                SWWL ()
                Sleep (0xC8)
                ^^^^WMID.WEI1 = 0x05
                ^^^^WMID.WED1 = Zero
                Notify (WMID, 0x80) // Status Change
            }
        }

        Method (_Q42, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x42
            ^^^^WMID.ESDT ()
        }

        Method (_Q43, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x43
            If (ECON) {}
        }

        Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x44
            If (ECON)
            {
                THSD = One
                \_TZ.BOTP = One
                Notify (\_TZ.TSZ0, 0x80) // Thermal Status Change
            }
        }

        Method (_Q45, 0, NotSerialized)  // _Qxx: EC Query
        {
            P80H = 0x45
            Debug = "=====QUERY_45====="
            If (ECON)
            {
                THSD = One
                Notify (\_TZ.TSZ0, 0x80) // Thermal Status Change
            }
        }

        Method (_QBC, 0, NotSerialized)  // _Qxx: EC Query
        {
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 60
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]                 FACS Address : BFB7A000
[028h 0040   4]                 DSDT Address : BFBE8000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000800
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000085A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000000000B0

[080h 0128   1]         Value to cause reset : FB
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000BFBE8000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 03 [DWord Access:32]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000800

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 04 [QWord Access:64]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000


Raw Table Data: Length 268 (0x10C)

  0000: 46 41 43 50 0C 01 00 00 05 60 48 50 51 4F 45 4D  FACP.....`HPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 48 50 20 20  SLIC-MPC....HP  
  0020: 00 00 04 00 00 A0 B7 BF 00 80 BE BF 00 02 09 00  ................
  0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  ................
  0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  ................
  0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00   ...............
  0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 00 03 00 00  e...............
  0070: A5 85 00 00 01 08 00 01 B0 00 00 00 00 00 00 00  ................
  0080: FB 00 00 00 00 00 00 00 00 00 00 00 00 80 BE BF  ................
  0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  ..... ..........
  00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  ................
  00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  ................
  00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 04  . ...........@..
  00E0: 20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ...............
  00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0100: 00 00 00 00 00 00 00 00 00 00 00 00              ............


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 3B
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]                    Reset End : 00000000BFBE3F98
**** ACPI table terminates in the middle of a data structure!

Raw Table Data: Length 68 (0x44)

  0000: 46 50 44 54 44 00 00 00 01 3B 48 50 51 4F 45 4D  FPDTD....;HPQOEM
  0010: 31 38 41 36 20 20 20 20 01 00 00 00 48 50 20 20  18A6    ....HP  
  0020: 00 00 04 00 00 00 10 01 00 00 00 00 98 3F BE BF  .............?..
  0030: 00 00 00 00 01 00 10 01 00 00 00 00 18 3F BE BF  .............?..
  0040: 00 00 00 00                                      ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 7D
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]            Hardware Block ID : 10228210

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 7D 48 50 51 4F 45 4D  HPET8....}HPQOEM
  0010: 31 38 41 36 20 20 20 20 01 00 00 00 48 50 20 20  18A6    ....HP  
  0020: 00 00 04 00 10 82 22 10 00 00 00 00 00 00 D0 FE  ......".........
  0030: 00 00 00 00 00 80 00 00                          ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 68
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 68 48 50 51 4F 45 4D  MCFG<....hHPQOEM
  0010: 31 38 41 36 20 20 20 20 01 00 00 00 48 50 20 20  18A6    ....HP  
  0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 F8  ................
  0030: 00 00 00 00 00 00 00 3F 00 00 00 00              .......?....


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : FD
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000


**** Unknown ACPI table type [MSDM]


Raw Table Data: Length 85 (0x55)

  0000: 4D 53 44 4D 55 00 00 00 03 FD 48 50 51 4F 45 4D  MSDMU.....HPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 48 50 20 20  SLIC-MPC....HP  
  0020: 00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00  ................
  0030: 00 00 00 00 1D 00 00 00 42 38 54 4D 57 2D 34 4E  ........B8TMW-4N
  0040: 39 46 42 2D 4A 54 47 39 58 2D 50 47 44 4A 4A 2D  9FB-JTG9X-PGDJJ-
  0050: 44 39 48 33 36                                   D9H36


RSDP
----
[000h 0000   8]                    Signature : "RSD PTR "
[008h 0008   1]                     Checksum : 0B
[009h 0009   6]                       Oem ID : "HPQOEM"
[00Fh 0015   1]                     Revision : 02
[010h 0016   4]                 RSDT Address : BFBFE0AC
[014h 0020   4]                       Length : 00000024
[018h 0024   8]                 XSDT Address : 00000000BFBFE120
[020h 0032   1]            Extended Checksum : 5D
[021h 0033   3]                     Reserved : 000000

Raw Table Data: Length 36 (0x24)

  0000: 52 53 44 20 50 54 52 20 0B 48 50 51 4F 45 4D 02  RSD PTR .HPQOEM.
  0010: AC E0 BF BF 24 00 00 00 20 E1 BF BF 00 00 00 00  ....$... .......
  0020: 5D 00 00 00                                      ]...


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 00000064
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4C
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]       ACPI Table Address   0 : BFBFC000
[028h 0040   4]       ACPI Table Address   1 : BFBFD000
[02Ch 0044   4]       ACPI Table Address   2 : BFBFB000
[030h 0048   4]       ACPI Table Address   3 : BFBFA000
[034h 0052   4]       ACPI Table Address   4 : BFBF9000
[038h 0056   4]       ACPI Table Address   5 : BFBF8000
[03Ch 0060   4]       ACPI Table Address   6 : BFBE7000
[040h 0064   4]       ACPI Table Address   7 : BFBE6000
[044h 0068   4]       ACPI Table Address   8 : BFBE5000
[048h 0072   4]       ACPI Table Address   9 : BFBE4000
[04Ch 0076   4]       ACPI Table Address  10 : BFBE2000
[050h 0080   4]       ACPI Table Address  11 : BFBE1000
[054h 0084   4]       ACPI Table Address  12 : BFBE0000
[058h 0088   4]       ACPI Table Address  13 : BFBDE000
[05Ch 0092   4]       ACPI Table Address  14 : BFBD8000
[060h 0096   4]       ACPI Table Address  15 : BFBD7000

Raw Table Data: Length 100 (0x64)

  0000: 52 53 44 54 64 00 00 00 01 4C 48 50 51 4F 45 4D  RSDTd....LHPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 48 50 20 20  SLIC-MPC....HP  
  0020: 13 00 00 01 00 C0 BF BF 00 D0 BF BF 00 B0 BF BF  ................
  0030: 00 A0 BF BF 00 90 BF BF 00 80 BF BF 00 70 BE BF  .............p..
  0040: 00 60 BE BF 00 50 BE BF 00 40 BE BF 00 20 BE BF  .`...P...@... ..
  0050: 00 10 BE BF 00 00 BE BF 00 E0 BD BF 00 80 BD BF  ................
  0060: 00 70 BD BF                                      .p..


SPCR
----
[000h 0000   4]                    Signature : "SPCR"    [Serial Port Console Redirection table]
[004h 0004   4]                 Table Length : 00000050
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 60
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]               Interface Type : 00
[025h 0037   3]                     Reserved : 000000

[028h 0040  12]         Serial Port Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 01 [SystemIO]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000000003F8

[034h 0052   1]               Interrupt Type : 01
[035h 0053   1]          PCAT-compatible IRQ : 04
[036h 0054   4]                    Interrupt : 00000000
[03Ah 0058   1]                    Baud Rate : 07
[03Bh 0059   1]                       Parity : 00
[03Ch 0060   1]                    Stop Bits : 01
[03Dh 0061   1]                 Flow Control : 00
[03Eh 0062   1]                Terminal Type : 03
[04Ch 0076   1]                     Reserved : 00
[040h 0064   2]                PCI Device ID : FFFF
[042h 0066   2]                PCI Vendor ID : FFFF
[044h 0068   1]                      PCI Bus : 00
[045h 0069   1]                   PCI Device : 00
[046h 0070   1]                 PCI Function : 00
[047h 0071   4]                    PCI Flags : 00000000
[04Bh 0075   1]                  PCI Segment : 00
[04Ch 0076   4]                     Reserved : 00000000

Raw Table Data: Length 80 (0x50)

  0000: 53 50 43 52 50 00 00 00 01 60 48 50 51 4F 45 4D  SPCRP....`HPQOEM
  0010: 31 38 41 36 20 20 20 20 01 00 00 00 48 50 20 20  18A6    ....HP  
  0020: 00 00 04 00 00 00 00 00 01 08 00 00 F8 03 00 00  ................
  0030: 00 00 00 00 01 04 00 00 00 00 07 00 01 00 03 00  ................
  0040: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  ................


SSDT1
-----
DefinitionBlock ("ssdt1.aml", "SSDT", 1, "HPQOEM", "18A6    ", 0x00000001)
{

    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008FC, 
                0x000018D3, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000136C, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00000FE6, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000D5C, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000B9F, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000008FC, 
                0x000018D3, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x000007D0, 
                0x0000136C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x00000FE6, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000D5C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000B9F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000841, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008FC, 
                0x000018D3, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000136C, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00000FE6, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000D5C, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000B9F, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000008FC, 
                0x000018D3, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x000007D0, 
                0x0000136C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x00000FE6, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000D5C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000B9F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000841, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008FC, 
                0x000018D3, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000136C, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00000FE6, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000D5C, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000B9F, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000008FC, 
                0x000018D3, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x000007D0, 
                0x0000136C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x00000FE6, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000D5C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000B9F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000841, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008FC, 
                0x000018D3, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000136C, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00000FE6, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000D5C, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000B9F, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000008FC, 
                0x000018D3, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x000007D0, 
                0x0000136C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x00000FE6, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000D5C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000B9F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000841, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }
}



SSDT2
-----
DefinitionBlock ("ssdt2.aml", "SSDT", 2, "HPQOEM", "18A6    ", 0x00000001)
{
    /*
     * iASL Warning: There were 1 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIC, MethodObj)    // Warning: Unresolved method, guessing 6 arguments


    Scope (\_SB)
    {
        Name (A001, 0x06)
        Name (AD02, 0x03)
        Alias (AD02, A027)
        Name (AD03, 0x01)
        Alias (AD03, A028)
        Name (AD04, 0x00)
        Alias (AD04, A029)
        Name (AD05, 0x03)
        Alias (AD05, A030)
        Name (AD06, Package (0x08)
        {
            0x00, 
            0x00, 
            0x02, 
            0x02, 
            0x00, 
            0x00, 
            0x02, 
            0x00
        })
        Alias (AD06, A031)
        Name (AD08, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD08, A032)
        Name (A033, 0x00)
        Name (A034, 0x00)
        Name (A035, 0x01)
        Name (A036, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A037, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A038, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (AD09, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD09, A016)
        Name (A039, Package (0x08)
        {
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01
        })
        Name (A040, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A014, 0x00)
        Name (AD10, Package (0x04)
        {
            0x6E, 
            0x5C, 
            0x50, 
            0x42
        })
        Alias (AD10, A042)
        Method (A043, 1, Serialized)
        {
            Local1 = DerefOf (Index (Arg0, 0x02))
            Local0 = A003 ()
            A034 = Local1
            Local2 = ((0x01 << 0x05) | (0x01 << 0x06))
            Local3 = ((A034 << 0x05) | (A035 << 0x06))
            A004 (0x00, 0x60, 0xF4, ~Local2, (Local2 & Local3))
            If ((Local1 == Local0))
            {
                Return (0x00)
            }

            A011 (A034)
            If ((A027 == 0x04))
            {
                A002 (0x01)
            }

            If (((A027 <= 0x01) || (A027 >= 0x04)))
            {
                Return (0x00)
            }

            If ((A033 == 0x00))
            {
                Return (0x00)
            }

            A044 ()
            Return (0x00)
        }

        Method (A045, 1, NotSerialized)
        {
            Local7 = A046 (Arg0)
            Local0 = DerefOf (Index (Local7, 0x02))
            If ((Local0 != 0x02))
            {
                Return (Local7)
            }

            A044 ()
            Return (Local7)
        }

        Method (A046, 1, NotSerialized)
        {
            Name (A047, 0x00)
            A014 = 0x00
            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A048)
            A048 = 0x03
            CreateByteField (Local7, 0x02, A049)
            A049 = 0x01
            If (((A027 <= 0x01) || (A027 >= 0x04)))
            {
                Return (Local7)
            }

            If ((A033 == 0x00))
            {
                Return (Local7)
            }

            CreateWordField (Arg0, 0x02, A050)
            CreateWordField (Arg0, 0x04, A051)
            CreateWordField (Arg0, 0x06, A052)
            CreateByteField (Arg0, 0x08, A053)
            CreateByteField (Arg0, 0x09, A054)
            A047 = ((A050 >> 0x08) & 0xFF)
            While ((A014 <= A001))
            {
                If ((A015 (A014) == 0x01))
                {
                    Local1 = A012 (((A014 + 0x02) << 0x03), 0x18)
                    Local2 = ((Local1 >> 0x10) & 0xFF)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    If (((A047 >= Local1) && (A047 <= Local2)))
                    {
                        Break
                    }
                }

                A014++
            }

            If ((A014 > A001))
            {
                Return (Local7)
            }

            If ((DerefOf (Index (A036, A014)) == 0x00))
            {
                Index (A036, A014) = A050 /* \_SB_.A046.A050 */
            }
            Else
            {
                If ((DerefOf (Index (A036, A014)) != A050))
                {
                    Return (Local7)
                }
            }

            Index (A040, A014) = 0x00
            If ((A054 == 0x00))
            {
                Index (A036, A014) = 0x00
            }

            If ((A054 == 0x01))
            {
                Index (A040, A014) = 0x01
            }

            If ((A054 == 0x02))
            {
                Index (A038, A014) = 0x01
            }

            If ((A054 == 0x03))
            {
                Index (A038, A014) = 0x02
            }

            If (((A051 & A052) == 0x01))
            {
                Index (A038, A014) = DerefOf (Index (A031, A014))
            }

            A049 = 0x02
            Return (Local7)
        }

        Method (A015, 1, Serialized)
        {
            If ((DerefOf (Index (A031, Arg0)) == 0x00))
            {
                Return (0x00)
            }

            Return (0x01)
        }

        Method (A055, 1, Serialized)
        {
            Local7 = Buffer (0x0100) {}
            Index (Local7, 0x00) = 0x03
            Index (Local7, 0x01) = 0x00
            Index (Local7, 0x02) = 0x00
            A033 = DerefOf (Index (Arg0, 0x02))
            Local0 = A007 (0x00, 0x60, 0xF4)
            If ((A033 == 0x01))
            {
                If (((Local0 & 0x01) == 0x01))
                {
                    Return (Local7)
                }

                Local0 |= 0x01
            }

            If ((A033 == 0x00))
            {
                If (((Local0 & 0x01) == 0x00))
                {
                    Return (Local7)
                }

                Local0 &= ~0x01
            }

            Local0 |= (A027 << 0x01)
            A006 (0x00, 0x60, 0xF4, Local0)
            A056 (RefOf (A037), RefOf (A036))
            A011 (A034)
            If ((A027 == 0x04))
            {
                A002 (0x01)
            }

            If (((A027 > 0x01) && (A027 < 0x04)))
            {
                If ((A027 == 0x02))
                {
                    A056 (RefOf (A031), RefOf (A016))
                    A014 = 0x00
                    While ((A014 <= A001))
                    {
                        If ((DerefOf (Index (A032, A014)) != 0x00))
                        {
                            Index (A016, A014) = DerefOf (Index (A032, A014))
                        }

                        A014++
                    }
                }
                Else
                {
                    A056 (RefOf (A039), RefOf (A016))
                    Index (A016, 0x06) = DerefOf (Index (A031, 0x06))
                }

                A044 ()
            }

            Return (Local7)
        }

        Name (A057, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Method (A044, 0, Serialized)
        {
            A014 = 0x00
            A056 (RefOf (A039), RefOf (A057))
            While ((A014 <= A001))
            {
                If ((A015 (A014) == 0x01))
                {
                    Index (A057, A014) = A058 (A014)
                }

                A014++
            }

            If ((Match (A040, MEQ, 0x01, MTR, 0x00, 0x00) != Ones))
            {
                A056 (RefOf (A039), RefOf (A057))
            }

            If ((Match (A057, MEQ, 0x02, MTR, 0x00, 0x00) != Ones))
            {
                A059 (0x02, 0x01)
                A002 (0x02)
            }

            A014 = 0x00
            While ((A014 <= A001))
            {
                If ((A015 (A014) == 0x00))
                {
                    A014++
                }
                Else
                {
                    Local0 = DerefOf (Index (A016, A014))
                    Local2 = DerefOf (Index (A057, A014))
                    If ((Local0 == Local2))
                    {
                        A014++
                    }
                    Else
                    {
                        Index (A016, A014) = Local2
                        A060 (A014, Local2)
                        A014++
                    }
                }
            }

            If ((Match (A057, MEQ, 0x02, MTR, 0x00, 0x00) == Ones))
            {
                A002 (0x01)
                A059 (0x01, 0x00)
            }

            A013 ()
        }

        Method (A058, 1, NotSerialized)
        {
            Local0 = 0x02
            Local1 = A003 ()
            If ((DerefOf (Index (A036, Arg0)) == 0x00))
            {
                If (((Local1 == 0x01) || (A027 == 0x03)))
                {
                    Local0 = 0x01
                }

                If (((Local1 == 0x00) && (A027 == 0x03)))
                {
                    If ((Arg0 == 0x06))
                    {
                        Local0 = 0x02
                    }
                }

                If ((DerefOf (Index (A032, Arg0)) != 0x00))
                {
                    Local0 = DerefOf (Index (A032, Arg0))
                }
            }
            Else
            {
                Local0 = DerefOf (Index (A038, Arg0))
            }

            Local2 = DerefOf (Index (A031, A014))
            If ((Local2 < Local0))
            {
                Local0 = Local2
            }

            Return (Local0)
        }

        Method (A060, 2, NotSerialized)
        {
            If ((Arg0 == 0x06))
            {
                A004 (0x00, 0x60, 0x80, ~0x40, 0x40)
            }

            A061 (Arg0, Arg1)
            If ((DerefOf (Index (A036, Arg0)) != 0x00))
            {
                A062 (Arg0, 0xA1, ~0x1000, 0x00)
            }
            Else
            {
                A062 (Arg0, 0xA1, ~0x1000, 0x1000)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = (A063 (Arg0, 0xA5) & 0x3F)
            A064 (Arg0, 0x01, Local3)
            If ((Local3 >= 0x10))
            {
                A065 (Arg0)
                Local2 = 0x01
                While (Local2)
                {
                    A066 (Local1, 0x68, ~0x00, 0x20)
                    Sleep (0x1E)
                    While ((A012 (Local1, 0x68) & 0x08000000))
                    {
                        Sleep (0x0A)
                    }

                    Local2 = 0x00
                    If ((Arg1 == 0x01))
                    {
                        If ((A067 (Arg0) != 0x01))
                        {
                            Local2 = 0x01
                        }
                    }
                }

                A068 (Arg0)
            }
            Else
            {
            }

            If ((Arg0 == 0x06))
            {
                A004 (0x00, 0x60, 0x80, ~0x40, 0x00)
            }
        }

        Name (A069, Package (0x09)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A070, 0x00)
        Name (A071, 0x00)
        Name (A072, 0x00)
        Method (A065, 1, Serialized)
        {
            A070 = 0x00
            A071 = 0x00
            Local1 = ((Arg0 + 0x02) << 0x03)
            If ((Arg0 == 0x06))
            {
                Index (A069, 0x00) = A073 (0x00, 0x00)
                A073 (0x00, 0x01)
                Return (0x00)
            }

            Local3 = A012 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A012 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A070 = A074 ((Local2 + Local4), 0x10)
                If ((A070 == 0x00))
                {
                    Local4++
                }
                Else
                {
                    A070 += 0x10
                    A071 = A012 ((Local2 + Local4), A070)
                    Index (A069, Local4) = (A071 & 0x0FCB)
                    A066 ((Local2 + Local4), A070, ~0x03, 0x00)
                    Local4++
                }
            }

            A072 = A012 (Local1, 0x68)
            A066 (Local1, 0x68, ~0x03, 0x00)
        }

        Method (A068, 1, Serialized)
        {
            A070 = 0x00
            A071 = 0x00
            If ((Arg0 == 0x06))
            {
                A073 (DerefOf (Index (A069, 0x00)), 0x01)
                Return (0x00)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = A012 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            A066 (Local1, 0x68, ~0x03, (A072 & 0x03))
            Local2 = (Local3 << 0x08)
            Local3 = A012 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A070 = A074 ((Local2 + Local4), 0x10)
                If ((A070 == 0x00))
                {
                    Local4++
                }
                Else
                {
                    A070 += 0x10
                    A026 ((Local2 + Local4), A070, DerefOf (Index (A069, Local4)))
                    Local4++
                }
            }
        }

        Method (A061, 2, NotSerialized)
        {
            Local0 = ((Arg0 + 0x02) << 0x03)
            If ((Arg1 == 0x01))
            {
                A066 (Local0, 0x88, ~0x2F, 0x21)
                A062 (Arg0, 0xA4, ~0x20000001, 0x00)
            }
            Else
            {
                A062 (Arg0, 0xA4, ~0x20000001, 0x20000001)
                A066 (Local0, 0x88, ~0x2F, 0x02)
            }
        }

        Method (A056, 2, NotSerialized)
        {
            Local1 = SizeOf (Arg0)
            Local0 = 0x00
            While ((Local0 < Local1))
            {
                Index (DerefOf (Arg1), Local0) = DerefOf (Index (DerefOf (Arg0), Local0))
                Local0++
            }
        }

        Method (A003, 0, NotSerialized)
        {
            Return ((A034 & A035))
        }

        Name (A019, 0x00)
        Name (A020, 0x00)
        Name (A021, 0x00)
        Name (A022, 0x00)
        Name (A023, 0x00)
        Name (A075, 0x00)
        Name (A076, 0x00)
        Name (A077, Buffer (0x10)
        {
            /* 0000 */  0x01, 0x02, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08,  /* ........ */
            /* 0008 */  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10   /* ........ */
        })
        Method (A078, 1, NotSerialized)
        {
            Name (A047, 0x00)
            Name (A079, 0x00)
            A014 = 0x00
            Local7 = Buffer (0x0A) {}
            A047 = DerefOf (Index (Arg0, 0x03))
            A079 = DerefOf (Index (Arg0, 0x04))
            Index (Local7, 0x00) = 0x03
            Index (Local7, 0x01) = 0x00
            Index (Local7, 0x02) = A079 /* \_SB_.A078.A079 */
            Return (Local7)
            While ((A014 <= A001))
            {
                If ((A015 (A014) == 0x01))
                {
                    Local1 = A012 (((A014 + 0x02) << 0x03), 0x18)
                    Local2 = ((Local1 >> 0x10) & 0xFF)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    If (((A047 >= Local1) && (A047 <= Local2)))
                    {
                        Break
                    }
                }

                A014++
            }

            If ((A014 > A001))
            {
                Return (Local7)
            }

            If ((A080 (A014, 0x01) <= A079))
            {
                Return (Local7)
            }

            Local1 = DerefOf (Index (A077, A079))
            A081 (A014, 0x01, 0x00)
            A081 (A014, 0x02, Local1)
            A013 ()
            Index (Local7, 0x02) = Local1
            Return (Local7)
        }

        Method (A082, 1, Serialized)
        {
            Local0 = DerefOf (Index (Arg0, 0x04))
            Local1 = DerefOf (Index (Arg0, 0x02))
            Local4 = ((Local1 >> 0x03) - 0x02)
            If ((Local0 == 0x01))
            {
                Local2 = 0x06
            }
            Else
            {
                Local2 = 0x04
            }

            Local3 = A012 (Local1, 0x68)
            A066 (Local1, 0x68, ~0x03, 0x00)
            Local0 = A083 (Local4, Local2)
            A066 (Local1, 0x68, ~0x03, (Local3 & 0x03))
            A013 ()
            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A048)
            CreateByteField (Local7, 0x02, A049)
            CreateByteField (Local7, 0x03, A084)
            A048 = 0x04
            A049 = 0x00
            A084 = Local0
            Return (Local7)
        }

        Name (A085, Buffer (0x0A)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0008 */  0x00, 0x00                                       /* .. */
        })
        Method (A083, 2, Serialized)
        {
            Local4 = 0x00
            Local7 = A018 (Arg0)
            Local1 = DerefOf (Index (Local7, 0x07))
            If ((Local1 != 0x01))
            {
                Return (Local4)
            }

            Local2 = Arg1
            While ((Local2 != 0x08))
            {
                Local5 = 0x01
                If ((Local2 == 0x06))
                {
                    Index (A032, Arg0) = 0x00
                    A062 (Arg0, 0xA2, ~0x2000, 0x00)
                    If (((A027 > 0x01) && (A027 < 0x04)))
                    {
                        A035 = 0x00
                        A044 ()
                    }
                    Else
                    {
                        A061 (Arg0, DerefOf (Index (A031, Arg0)))
                    }

                    A081 (Arg0, 0x01, 0x00)
                    A086 (Arg0, 0x00)
                    Local2 = 0x01
                    Local3 = 0x00
                }

                If ((Local2 == 0x01))
                {
                    Local1 = (A063 (Arg0, 0xA5) & 0x3F)
                    If ((Local1 > 0x04))
                    {
                        Local2 = 0x02
                        Local3 = 0x00
                        Local5 = 0x00
                    }
                    Else
                    {
                        If ((Local3 < 0x50))
                        {
                            Sleep (0x01)
                            Local3++
                        }
                        Else
                        {
                            Local2 = 0x04
                        }
                    }
                }

                If (((Local5 == 0x01) && (Local2 == 0x02)))
                {
                    Local1 = A063 (Arg0, 0xA5)
                    Local1 &= 0x3F
                    If (((Local1 >= 0x10) && (Local1 <= 0x13)))
                    {
                        Local2 = 0x05
                        Local5 = 0x00
                    }
                    Else
                    {
                        If ((Local3 < 0x50))
                        {
                            Sleep (0x01)
                            Local3++
                            Local5 = 0x00
                        }
                        Else
                        {
                            Local2 = 0x04
                            If ((DerefOf (Index (A032, Arg0)) == 0x01))
                            {
                                Local5 = 0x00
                            }
                            Else
                            {
                                If ((A087 (Arg0) == 0x01))
                                {
                                    A062 (Arg0, 0xA2, ~0x2000, 0x2000)
                                    Index (A032, Arg0) = 0x01
                                    A061 (Arg0, 0x01)
                                    Local2 = 0x07
                                }
                            }
                        }
                    }
                }

                If (((Local5 == 0x01) && (Local2 == 0x04)))
                {
                    A086 (Arg0, 0x01)
                    A081 (Arg0, 0x00, 0x00)
                    A088 (Arg0)
                    Local0 = ((Arg0 + 0x02) << 0x03)
                    Local1 = A012 (Local0, 0x18)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    Local0 = (Local1 << 0x08)
                    Local0 = A012 (Local0, 0x00)
                    If ((Local0 == 0xFFFFFFFF)) {}
                    Index (A032, Arg0) = 0x01
                    Local2 = 0x00
                }

                If (((Local5 == 0x01) && (Local2 == 0x07)))
                {
                    If (CondRefOf (\_SB.ALIC, Local6))
                    {
                        Local1 = ((Arg0 + 0x02) << 0x03)
                        \_SB.ALIC (Local1, 0x00, Sleep (0x02), \_SB.ALIC (Local1, 0x01, Local3 = 0x00, 
                            Local2 = 0x01, Local5 = 0x00, Else
                                {
                                    Local2 = 0x04
                                }), If (((Local5 == 0x01) && (Local2 == 0x05)))
                            {
                                Local4 = 0x01
                                Local2 = 0x00
                                A089 (Arg0)
                                A090 (Arg0)
                            }, If (((Local5 == 0x01) && (Local2 == 0x00)))
                            {
                                If (((A027 > 0x01) && (A027 < 0x04)))
                                {
                                    A035 = 0x01
                                    A044 ()
                                }

                                Local2 = 0x08
                            })
                    }
                }
            }

            Return (Local4)
        }

        Method (A081, 3, Serialized)
        {
            Local7 = A018 (Arg0)
            A019 = DerefOf (Index (Local7, 0x00))
            A020 = DerefOf (Index (Local7, 0x01))
            A021 = DerefOf (Index (Local7, 0x02))
            A022 = DerefOf (Index (Local7, 0x03))
            A076 = A080 (Arg0, 0x01)
            If ((Arg1 == 0x00))
            {
                A091 (Arg0, A021, (A021 + (A076 - 0x01)), 0x01)
                A008 (A019, A020, 0x01)
            }

            If ((Arg1 == 0x01))
            {
                A008 (A019, A020, 0x00)
                A091 (Arg0, A021, (A021 + (A076 - 0x01)), 0x00)
            }

            If ((Arg1 != 0x02))
            {
                Return (0x00)
            }

            If ((Arg2 == 0x00))
            {
                Local2 = A080 (Arg0, 0x00)
            }
            Else
            {
                Local2 = Arg2
            }

            If ((A076 <= Local2))
            {
                Return (0x00)
            }

            Local1 = A092 (Arg0)
            If ((Local1 == 0x00))
            {
                Local3 = (A021 + Local2)
                Local4 = A022 /* \_SB_.A022 */
            }
            Else
            {
                Local4 = (A022 - Local2)
                Local3 = A021 /* \_SB_.A021 */
            }

            A091 (Arg0, Local3, Local4, 0x01)
            If ((A019 > A020))
            {
                Local3 = A020 /* \_SB_.A020 */
                Local4 = A019 /* \_SB_.A019 */
            }
            Else
            {
                Local4 = A020 /* \_SB_.A020 */
                Local3 = A019 /* \_SB_.A019 */
            }

            If ((Local1 == 0x00))
            {
                Local3 += Local2
            }
            Else
            {
                Local4 -= Local2
            }

            A008 (Local3, Local4, 0x01)
            Return (0x00)
        }

        Method (A087, 1, NotSerialized)
        {
            Local1 = Buffer (0x10) {}
            Local0 = 0x00
            While ((Local0 <= 0x03))
            {
                Local2 = A063 (Arg0, (Local0 + 0xA5))
                Index (Local1, (Local0 * 0x04)) = Local2
                Index (Local1, ((Local0 * 0x04) + 0x01)) = (
                    Local2 >> 0x08)
                Index (Local1, ((Local0 * 0x04) + 0x02)) = (
                    Local2 >> 0x10)
                Index (Local1, ((Local0 * 0x04) + 0x03)) = (
                    Local2 >> 0x18)
                Local0++
            }

            Local0 = 0x00
            While ((Local0 < 0x0F))
            {
                If (((DerefOf (Index (Local1, Local0)) == 0x2A) && (DerefOf (Index (
                    Local1, (Local0 + 0x01))) == 0x09)))
                {
                    Return (0x01)
                }

                Local0++
            }

            Return (0x00)
        }

        Method (A092, 1, Serialized)
        {
            Local7 = A018 (Arg0)
            A019 = DerefOf (Index (Local7, 0x00))
            A020 = DerefOf (Index (Local7, 0x01))
            Local0 = 0x00
            If ((A019 > A020))
            {
                Local0 = 0x01
            }

            Local1 = (A063 (Arg0, 0x50) & 0x01)
            Return (((Local0 ^ Local1) & 0x01))
        }

        Method (A086, 2, NotSerialized)
        {
            Local7 = A018 (Arg0)
            A075 = DerefOf (Index (Local7, 0x04))
            A023 = ((DerefOf (Index (Local7, (0x05 + 0x01))) << 
                0x08) | DerefOf (Index (Local7, 0x05)))
            A004 (0x00, 0xE0, ((A023 << 0x10) | (0x0800 + (0x0100 * 
                A075))), ~0x01, Arg1)
        }

        Name (A093, Buffer (0x07)
        {
             0x00, 0x01, 0x02, 0x04, 0x08, 0x0C, 0x10         /* ....... */
        })
        Method (A080, 2, NotSerialized)
        {
            If ((Arg1 == 0x00))
            {
                Local0 = ((A063 (Arg0, 0xA2) >> 0x04) & 0x07)
                Local1 = DerefOf (Index (A093, Local0))
            }
            Else
            {
                Local7 = A018 (Arg0)
                A019 = DerefOf (Index (Local7, 0x00))
                A020 = DerefOf (Index (Local7, 0x01))
                If ((A019 > A020))
                {
                    Local1 = (A019 - A020) /* \_SB_.A020 */
                }
                Else
                {
                    Local1 = (A020 - A019) /* \_SB_.A019 */
                }

                Local1++
            }

            Return (Local1)
        }

        Method (A091, 4, Serialized)
        {
            Local7 = A018 (Arg0)
            A021 = Arg1
            A022 = Arg2
            A023 = ((DerefOf (Index (Local7, (0x05 + 0x01))) << 
                0x08) | DerefOf (Index (Local7, 0x05)))
            If ((A021 > A022))
            {
                Local1 = (A021 - A022) /* \_SB_.A022 */
                Local2 = A022 /* \_SB_.A022 */
            }
            Else
            {
                Local1 = (A022 - A021) /* \_SB_.A021 */
                Local2 = A021 /* \_SB_.A021 */
            }

            Local3 = (((0x01 << (Local1 + 0x01)) - 0x01) << 
                Local2)
            Local4 = ~Local3
            If ((Arg3 == 0x01))
            {
                Local3 = 0x00
            }

            A004 (0x00, 0xE0, ((A023 << 0x10) | 0x8023), Local4, Local3)
            Stall (0x0A)
        }

        Name (A094, Package (0x01)
        {
            Package (0x02)
            {
                0x10831969, 
                0x00
            }
        })
        Method (A089, 1, Serialized)
        {
            Local6 = ((Arg0 + 0x02) << 0x03)
            Local2 = A074 (Local6, 0x10)
            If ((Local2 != 0x00))
            {
                Local0 = A012 (Local6, 0x18)
                Local0 = ((Local0 >> 0x08) & 0xFF)
                Local1 = (Local0 << 0x08)
                Local0 = A012 (Local1, 0x0C)
                Local0 = ((Local0 >> 0x10) & 0xFF)
                If (((Local0 & 0x80) != 0x00))
                {
                    Local4 = 0x07
                }
                Else
                {
                    Local4 = 0x00
                }

                Local3 = 0x08
                Local5 = 0x00
                While ((Local5 <= Local4))
                {
                    Local2 = A074 ((Local1 + Local5), 0x10)
                    If ((Local2 != 0x00))
                    {
                        Local0 = (A012 ((Local1 + Local5), (Local2 + 0x04)) & 0x07)
                        Local6 = A012 ((Local1 + Local5), 0x00)
                        Local7 = 0x00
                        While ((Local7 < SizeOf (A094)))
                        {
                            If ((DerefOf (Index (DerefOf (Index (A094, Local7)), 0x00)) == Local6))
                            {
                                Local0 = DerefOf (Index (DerefOf (Index (A094, Local7)), 0x01))
                            }

                            Local7++
                        }

                        If ((Local0 < Local3))
                        {
                            Local3 = Local0
                        }
                    }

                    Local5++
                }

                If ((Local3 != 0x08))
                {
                    Local6 = ((Arg0 + 0x02) << 0x03)
                    Local2 = A074 (Local6, 0x10)
                    Local0 = (A012 (Local6, (Local2 + 0x04)) & 0x07)
                    If ((Local0 < Local3))
                    {
                        Local3 = Local0
                    }

                    Local3 <<= 0x05
                    A066 (Local6, (Local2 + 0x08), ~0xE0, Local3)
                    Local5 = 0x00
                    While ((Local5 <= Local4))
                    {
                        Local2 = A074 ((Local1 + Local5), 0x10)
                        If ((Local2 != 0x00))
                        {
                            A066 (Local1, (Local2 + 0x08), ~0xE0, Local3)
                        }

                        Local5++
                    }
                }
            }
        }

        Method (A088, 1, Serialized)
        {
            Local0 = ((Arg0 + 0x02) << 0x03)
            Local1 = A074 (Local0, 0x10)
            If ((Local1 != 0x00))
            {
                A066 (Local0, (Local1 + 0x08), ~0xE0, 0x00)
            }
        }

        Method (A090, 1, Serialized)
        {
            Local7 = A018 (Arg0)
            Local0 = DerefOf (Index (Local7, 0x09))
            If ((Local0 == 0x00))
            {
                Return (0x00)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local0 = A012 (Local1, 0x18)
            Local2 = (Local0 & 0xFF00)
            Local0 = A012 (Local2, 0x0C)
            Local0 = ((Local0 >> 0x10) & 0xFF)
            If (((Local0 & 0x80) != 0x00))
            {
                Local3 = 0x07
            }
            Else
            {
                Local3 = 0x00
            }

            Local4 = 0x00
            Local5 = 0x00
            While ((Local4 <= Local3))
            {
                Local6 = A074 ((Local2 | Local4), 0x10)
                If ((Local6 == 0x00))
                {
                    Local4++
                }
                Else
                {
                    If (((A012 ((Local2 | Local4), (Local6 + 0x0C
                        )) & (0x01 << 0x12)) != 0x00))
                    {
                        Local5 = 0x01
                    }
                    Else
                    {
                        Local5 = 0x00
                        Break
                    }

                    Local4++
                }
            }

            If ((Local5 == 0x00))
            {
                Return (0x00)
            }

            Local4 = 0x00
            While ((Local4 <= Local3))
            {
                Local6 = A074 ((Local2 | Local4), 0x10)
                If ((Local6 == 0x00))
                {
                    Local4++
                }
                Else
                {
                    A066 ((Local2 | Local4), (Local6 + 0x10), 0xFFFFFFFF, (0x01 << 
                        0x08))
                    Local4++
                }
            }
        }

        Name (AD01, 0xF8000000)
        Alias (AD01, A095)
        Name (AD07, Package (0x08)
        {
            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x04, 0x04, 0x04, 0x04, 0x01, 0x30, 0x01, 0x00,  /* .....0.. */
                /* 0008 */  0x02, 0x01                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x05, 0x05, 0x05, 0x05, 0x02, 0x30, 0x01, 0x00,  /* .....0.. */
                /* 0008 */  0x02, 0x01                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x03, 0x00, 0x03, 0x00, 0x30, 0x01, 0x00,  /* .....0.. */
                /* 0008 */  0x02, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }
        })
        Alias (AD07, A096)
        Method (A018, 1, NotSerialized)
        {
            Return (DerefOf (Index (A096, Arg0)))
        }

        Method (A012, 2, Serialized)
        {
            Local0 = (A095 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A097, SystemMemory, Local0, 0x04)
            Field (A097, DWordAcc, NoLock, Preserve)
            {
                A098,   32
            }

            Return (A098) /* \_SB_.A012.A098 */
        }

        Method (A026, 3, Serialized)
        {
            Local0 = (A095 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A097, SystemMemory, Local0, 0x04)
            Field (A097, DWordAcc, NoLock, Preserve)
            {
                A098,   32
            }

            A098 = Arg2
        }

        Method (A066, 4, Serialized)
        {
            Local0 = A012 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A026 (Arg0, Arg1, Local0)
        }

        Mutex (A099, 0x00)
        Method (A063, 2, NotSerialized)
        {
            Acquire (A099, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A026 (Local0, 0xE0, Arg1)
            Local0 = A012 (Local0, 0xE4)
            Release (A099)
            Return (Local0)
        }

        Method (A064, 3, NotSerialized)
        {
            Acquire (A099, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A026 (Local0, 0xE0, Arg1)
            A026 (Local0, 0xE4, Arg2)
            Release (A099)
        }

        Method (A062, 4, NotSerialized)
        {
            Local0 = A063 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A064 (Arg0, Arg1, Local0)
        }

        Mutex (A100, 0x00)
        Method (A007, 3, NotSerialized)
        {
            Acquire (A100, 0xFFFF)
            A026 (Arg0, Arg1, Arg2)
            Local0 = A012 (Arg0, (Arg1 + 0x04))
            Release (A100)
            Return (Local0)
        }

        Method (A006, 4, NotSerialized)
        {
            Acquire (A100, 0xFFFF)
            A026 (Arg0, Arg1, Arg2)
            A026 (Arg0, (Arg1 + 0x04), Arg3)
            Release (A100)
        }

        Method (A004, 5, NotSerialized)
        {
            Local0 = A007 (Arg0, Arg1, Arg2)
            Local0 = ((Local0 & Arg3) | Arg4)
            A006 (Arg0, Arg1, Arg2, Local0)
        }

        Method (A074, 2, NotSerialized)
        {
            Local1 = 0x34
            If ((A012 (Arg0, 0x00) == 0xFFFFFFFF))
            {
                Return (0x00)
            }

            Local0 = 0x01
            While ((Local0 == 0x01))
            {
                Local1 = (A012 (Arg0, Local1) & 0xFF)
                If ((Local1 == 0x00))
                {
                    Break
                }

                If (((A012 (Arg0, Local1) & 0xFF) == Arg1))
                {
                    Local0 = 0x00
                }
                Else
                {
                    Local1++
                }
            }

            Return (Local1)
        }

        Method (A073, 2, Serialized)
        {
            OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
            Field (PMIO, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
            {
                Offset (0xE0), 
                ABAR,   32
            }

            OperationRegion (ACFG, SystemIO, ABAR, 0x08)
            Field (ACFG, DWordAcc, NoLock, Preserve)
            {
                ABIX,   32, 
                ABDA,   32
            }

            Local0 = 0x00
            If ((Arg1 == 0x00))
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A073.ABDA */
                Return (Local0)
            }
            Else
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A073.ABDA */
                Local0 = ((Local0 & 0xFFFFFFFC) | Arg0)
                ABDA = Local0
            }
        }

        Name (A101, Buffer (0x0100) {})
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x01))
            {
                Return (A043 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (A045 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (A055 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (A078 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (A102 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (A082 (Arg1))
            }

            Return (0x00)
        }

        Method (A102, 0, Serialized)
        {
            Return (0x00)
        }

        Method (A005, 1, NotSerialized)
        {
            While (((A007 (0x00, 0xB8, 0xE0003004) & 0x02) != 0x02)) {}
            Local0 = A007 (0x00, 0xB8, 0xE0003000)
            Local0 = ((Local0 & 0xFFFE0000) | (~(Local0 & 0x01)
                 & 0x01))
            Local0 |= (Arg0 << 0x01)
            A006 (0x00, 0xB8, 0xE0003000, Local0)
            While (((A007 (0x00, 0xB8, 0xE0003004) & 0x01) != 0x01)) {}
            While (((A007 (0x00, 0xB8, 0xE0003004) & 0x02) != 0x02)) {}
        }

        Method (A067, 1, NotSerialized)
        {
            Local1 = A063 (Arg0, 0xA4)
            Local2 = (Local1 >> 0x0D)
            Local2 &= 0x03
            Local2++
            Return (Local2)
        }

        Method (A059, 2, Serialized)
        {
            If ((Arg0 == 0x01))
            {
                Local3 = DerefOf (Index (A042, A029))
            }
            Else
            {
                Local3 = DerefOf (Index (A042, A028))
            }

            Local2 = (A007 (0x00, 0xB8, 0xE000203C) & 0x04)
            Local1 = (A007 (0x00, 0xB8, 0xE0002040) & 0x01)
            While (((Local1 << 0x02) != Local2))
            {
                Local1 = (A007 (0x00, 0xB8, 0xE0002040) & 0x01)
            }

            Local1 = A007 (0x00, 0xB8, 0xE000203C)
            If ((Arg0 == 0x01))
            {
                Local1 &= 0xFFFFFFFD
            }
            Else
            {
                Local1 |= 0x02
            }

            A006 (0x00, 0xB8, 0xE000203C, Local1)
            Local1 &= ~(0xFF << 0x08)
            Local1 |= (Local3 << 0x08)
            Local2 = (~Local1 & 0x04)
            Local1 = ((Local1 & ~0x04) | Local2)
            A006 (0x00, 0xB8, 0xE000203C, Local1)
            If ((Arg1 != 0x00))
            {
                While (((Local1 << 0x02) != Local2))
                {
                    Local1 = (A007 (0x00, 0xB8, 0xE0002040) & 0x01)
                }
            }
        }

        Method (A002, 1, NotSerialized)
        {
            Local1 = A003 ()
            Local5 = 0x00
            A004 (0x00, 0xB8, 0x0001F300, 0xFFFFFFFE, 0x00)
            A005 (0x09)
            If ((Local1 == 0x00))
            {
                A006 (0x00, 0xB8, 0x0001F954, 0x00)
                A004 (0x00, 0xB8, 0x0001F200, 0xFFFFFFFE, 0x00)
                A004 (0x00, 0xB8, 0x0001F2A0, 0xFFFFFFFE, 0x01)
                A004 (0x00, 0xB8, 0x0001F2C0, 0xFFFFFFFE, 0x01)
                Local6 = 0x00050001
            }
            Else
            {
                If ((Arg0 == 0x01))
                {
                    Local5 = A007 (0x00, 0xB8, 0x0001FE00)
                    A006 (0x00, 0xB8, 0x0001F954, Local5)
                    A004 (0x00, 0xB8, 0x0001F200, 0xFFFFFFFE, 0x01)
                    A004 (0x00, 0xB8, 0x0001F2A0, 0xFFFFFFFE, 0x01)
                    A004 (0x00, 0xB8, 0x0001F2C0, 0xFFFFFFFE, 0x00)
                }
                Else
                {
                    A004 (0x00, 0xB8, 0x0001F200, 0xFFFFFFFE, 0x01)
                    A004 (0x00, 0xB8, 0x0001F2A0, 0xFFFFFFFE, 0x00)
                    A004 (0x00, 0xB8, 0x0001F2C0, 0xFFFFFFFE, 0x01)
                }

                Local6 = 0x01
            }

            A004 (0x00, 0xB8, 0x0001F300, 0xFF00FFFE, Local6)
            A005 (0x09)
        }

        Method (A008, 3, NotSerialized)
        {
            If ((Arg0 > Arg1))
            {
                Local3 = Arg1
                Local4 = Arg0
            }
            Else
            {
                Local3 = Arg0
                Local4 = Arg1
            }

            Local0 = A007 (0x00, 0xB8, 0x0001F39C)
            Local0 &= 0x18
            If ((Arg2 == 0x00))
            {
                Local0 = (((Local4 << 0x18) | (Local3 << 0x10)) | 
                    (Local0 | 0x03))
            }

            If ((Arg2 == 0x01))
            {
                Local0 = (((Local4 << 0x18) | (Local3 << 0x10)) | 
                    (Local0 | 0x03))
            }

            A006 (0x00, 0xB8, 0x0001F39C, Local0)
            A005 ((0x03 - Arg2))
        }

        Method (A009, 1, NotSerialized)
        {
        }

        Name (A010, 0x00)
        Method (A011, 1, NotSerialized)
        {
            If ((A010 == 0x00))
            {
                If ((A012 (0x08, 0x00) == 0xFFFFFFFF))
                {
                    Local1 = (A007 (0x00, 0xB8, 0x0001F428) & 0x02)
                    If ((Local1 == 0x02))
                    {
                        A010 = 0x01
                    }
                }
            }

            If ((A010 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x20
                }
                Else
                {
                    Local0 = 0x21
                }

                A005 (Local0)
            }
        }

        Method (A013, 0, NotSerialized)
        {
            A014 = 0x00
            Local1 = 0x00
            While ((A014 <= A001))
            {
                If ((A015 (A014) == 0x00))
                {
                    A014++
                }
                Else
                {
                    If ((DerefOf (Index (A016, A014)) == 0x02))
                    {
                        Local1 |= A017 (A014)
                    }

                    A014++
                }
            }

            Local2 = (Local1 << 0x18)
            Local2 |= ((Local1 >> 0x08) & 0xFF00)
            Local2 |= ((Local1 << 0x08) & 0x00FF0000)
            A006 (0x00, 0xB8, 0x0001F610, Local2)
            A005 (0x08)
        }

        Method (A017, 1, NotSerialized)
        {
            Local7 = A018 (Arg0)
            A019 = DerefOf (Index (Local7, 0x00))
            A020 = DerefOf (Index (Local7, 0x01))
            A021 = DerefOf (Index (Local7, 0x02))
            A022 = DerefOf (Index (Local7, 0x03))
            A023 = ((DerefOf (Index (Local7, (0x05 + 0x01))) << 
                0x08) | DerefOf (Index (Local7, 0x05)))
            Local5 = A007 (0x00, 0xE0, ((A023 << 0x10) | 0x8023))
            Local5 >>= A021 /* \_SB_.A021 */
            Local2 = (0x01 << ((A022 - A021) + 0x01))
            Local2 -= 0x01
            Local5 &= Local2
            If ((A019 > A020))
            {
                Local3 = A020 /* \_SB_.A020 */
                Local4 = A019 /* \_SB_.A019 */
                Local1 = ((A022 - A021) - (Local4 - Local3))
            }
            Else
            {
                Local4 = A020 /* \_SB_.A020 */
                Local3 = A019 /* \_SB_.A019 */
                Local1 = 0x00
            }

            Local2 = (0x01 << ((Local4 - Local3) + 0x01))
            Local2 = ((Local2 - 0x01) << Local1)
            Local2 &= ~Local5
            Local2 = ((Local2 - 0x01) << (Local3 - Local1))
            Return (Local2)
        }

        Name (A024, 0x00)
        Name (A025, 0x00)
        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                If ((A024 == 0x01))
                {
                    Local0 = A012 (0xC5, 0x0170)
                    A026 (0xC5, 0x0170, (Local0 & ~(0x01 << 0x0E)))
                    A024 = 0x00
                }

                If ((A025 == 0x01))
                {
                    Local0 = A007 (0x00, 0xB8, 0x0001F428)
                    A006 (0x00, 0xB8, 0x0001F428, (Local0 | (0x01 << 0x05)))
                    A005 (0x16)
                    A025 = 0x00
                }
            }

            Local1 = A003 ()
            A011 (Local1)
        }

        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                A011 (0x01)
                Local0 = A007 (0x00, 0xB8, 0x0001F428)
                If (((Local0 & (0x01 << 0x05)) != 0x00))
                {
                    A006 (0x00, 0xB8, 0x0001F428, (Local0 & ~(0x01 << 0x05)
                        ))
                    A005 (0x16)
                    A025 = 0x01
                }

                Local0 = A012 (0xC5, 0x0170)
                If (((Local0 & (0x01 << 0x0E)) == 0x00))
                {
                    A026 (0xC5, 0x0170, (Local0 | (0x01 << 0x0E)))
                    A024 = 0x01
                }

                Local2 = A007 (0x00, 0x60, 0xF4)
                Local2 = (Local0 & ~0x01)
                A006 (0x00, 0x60, 0xF4, Local2)
            }
        }
    }
}



UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000236
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9F
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036  16]              UUID Identifier : 9D4BF935-A674-4710-BA02-BF0AA1758C7B
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 566 (0x236)

  0000: 55 45 46 49 36 02 00 00 01 9F 48 50 51 4F 45 4D  UEFI6.....HPQOEM
  0010: 31 38 41 36 20 20 20 20 01 00 00 00 48 50 20 20  18A6    ....HP  
  0020: 00 00 04 00 35 F9 4B 9D 74 A6 10 47 BA 02 BF 0A  ....5.K.t..G....
  0030: A1 75 8C 7B 36 00 24 42 56 44 54 24 12 08 15 24  .u.{6.$BVDT$...$
  0040: 21 34 45 24 46 2E 31 31 00 00 00 00 00 00 00 00  !4E$F.11........
  0050: 00 00 00 00 00 00 00 00 00 00 00 00 24 51 43 4C  ............$QCL
  0060: 35 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00  51..............
  0070: 00 00 00 00 00 00 24 43 43 42 2E 30 33 2E 37 32  ......$CCB.03.72
  0080: 2E 32 34 00 00 00 00 00 00 00 00 00 00 00 00 00  .24.............
  0090: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  ................
  00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  00C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  00D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  00E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  00F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0160: FF FF FF FF FF 24 42 4D 45 24 00 DE 30 00 00 02  .....$BME$..0...
  0170: 00 00 24 00 D0 30 00 30 0B 00 00 24 00 FF FF FF  ..$..0.0...$....
  0180: FF FF FF FF FF 24 5F 4D 53 43 5F 56 45 52 3D 00  .....$_MSC_VER=.
  0190: 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  01A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  01B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  01C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  01D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  01E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  01F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0230: FF FF FF FF FF FF                                ......


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 00005084
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1E
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000


**** Unknown ACPI table type [VFCT]


Raw Table Data: Length 20612 (0x5084)

  0000: 56 46 43 54 84 50 00 00 01 1E 48 50 51 4F 45 4D  VFCT.P....HPQOEM
  0010: 31 38 41 36 20 20 20 20 01 00 00 00 48 50 20 20  18A6    ....HP  
  0020: 00 00 04 00 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  ....2..]...I....
  0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  ..y.L...........
  0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0050: 01 00 00 00 00 00 00 00 02 10 00 99 00 00 00 00  ................
  0060: 01 00 00 00 00 50 00 00 55 AA 28 E9 F3 01 00 00  .....P..U.(.....
  0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0080: B4 01 00 00 00 00 49 42 4D A1 00 00 00 00 00 00  ......IBM.......
  0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  ........ 7612955
  00A0: 32 30 00 00 00 00 00 00 F9 01 00 00 00 00 00 00  20..............
  00B0: 8E 01 00 00 00 00 00 00 30 36 2F 32 39 2F 31 32  ........06/29/12
  00C0: 2C 30 34 3A 30 30 3A 30 37 00 00 00 F9 01 02 00  ,04:00:07.......
  00D0: F9 01 03 00 00 00 80 00 00 00 00 00 00 00 00 00  ................
  00E0: 00 00 00 00 00 00 00 00 42 52 34 33 33 36 38 2E  ........BR43368.
  00F0: 62 69 6E 00 44 56 53 54 00 50 43 49 5F 45 58 50  bin.DVST.PCI_EXP
  0100: 52 45 53 53 00 44 44 52 33 00 0D 0A 48 50 20 63  RESS.DDR3...HP c
  0110: 4E 42 20 43 6F 6D 61 6C 2F 54 72 69 6E 69 74 79  NB Comal/Trinity
  0120: 20 56 42 49 4F 53 20 20 20 20 20 20 20 20 20 20   VBIOS          
  0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                  
  0140: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                  
  0150: 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20 0D 0A          ..... ..
  0160: 00 28 43 29 20 31 39 38 38 2D 32 30 31 30 2C 20  .(C) 1988-2010, 
  0170: 41 64 76 61 6E 63 65 64 20 4D 69 63 72 6F 20 44  Advanced Micro D
  0180: 65 76 69 63 65 73 2C 20 49 6E 63 2E 00 41 54 4F  evices, Inc..ATO
  0190: 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45 52 30  MBIOSBK-AMD VER0
  01A0: 31 35 2E 30 32 32 2E 30 30 30 2E 30 30 30 2E 30  15.022.000.000.0
  01B0: 34 33 33 36 38 00 42 52 34 33 33 36 38 2E 62 69  43368.BR43368.bi
  01C0: 6E 20 00 37 38 37 32 31 34 20 20 00 32 33 32 32  n .787214  .2322
  01D0: 31 34 20 20 00 20 20 20 20 20 20 20 20 00 48 50  14  .        .HP
  01E0: 5F 63 4E 42 5F 43 6F 6D 61 6C 5C 63 6F 6E 66 69  _cNB_Comal\confi
  01F0: 67 2E 68 00 00 00 24 00 01 01 41 54 4F 4D 00 C0  g.h...$...ATOM..
  0200: 01 03 4E 01 D9 01 A2 00 34 03 00 00 00 00 22 10  ..N.....4.....".
  0210: 22 10 B4 01 FA 01 A0 02 A0 00 00 00 50 43 49 52  "...........PCIR
  0220: 02 10 00 99 00 00 18 00 00 00 00 03 28 00 16 0F  ............(...
  0230: 00 80 00 00 41 4D 44 20 41 54 4F 4D 42 49 4F 53  ....AMD ATOMBIOS
  0240: 00 6D 6A 8D D4 00 00 00 00 00 00 00 00 00 00 00  .mj.............
  0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0260: 00 CB A6 00 01 01 E8 02 13 03 6A 03 00 00 2F 04  ..........j.../.
  0270: F7 05 00 00 00 00 00 00 29 06 28 07 00 00 51 07  ........).(...Q.
  0280: 13 0B 00 00 00 00 00 00 30 0C 00 00 3C 0D 20 0E  ........0...<. .
  0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  02A0: 00 00 00 00 00 00 00 00 94 0E 0E 0F 4D 0F 8B 0F  ............M...
  02B0: BD 10 00 00 00 00 E9 10 00 00 02 11 CA 11 B0 13  ................
  02C0: F9 13 00 00 00 00 D2 14 4F 15 77 16 00 00 00 00  ........O.w.....
  02D0: 40 2A 1C 2B 00 00 55 2D 00 00 00 00 00 00 B4 2D  @*.+..U-.......-
  02E0: 00 00 00 00 00 00 00 00 87 2E 00 00 00 00 00 00  ................
  02F0: 00 00 00 00 FB 2E 00 00 17 2F 00 00 D4 2F 2E 33  ........./.../.3
  0300: 00 00 80 3D A7 3F 96 01 48 00 01 01 00 00 00 00  ...=.?..H.......
  0310: 00 00 03 40 E3 41 4F 42 53 45 00 00 00 00 00 00  ...@.AOBSE......
  0320: 24 46 CA 46 D6 46 F2 46 00 00 06 48 00 00 06 4A  $F.F.F.F...H...J
  0330: 00 00 00 00 00 00 00 00 1E 4A 79 4C 00 00 00 00  .........JyL....
  0340: A6 4C DA 4C 00 00 00 00 34 4D 00 00 00 00 00 00  .L.L....4M......
  0350: 2B 00 01 01 00 08 52 02 52 05 02 01 02 00 0E E5  +.....R.R.......
  0360: 02 08 52 0A 66 16 03 0C 41 04 00 4C 0D 41 02 00  ..R.f...A..L.A..
  0370: 44 2A 00 0D A5 C9 05 04 52 4B 5B 57 00 01 02 00  D*......RK[W....
  0380: 00 37 00 00 52 14 02 08 00 0D 1A 32 08 00 0B 1A  .7..R......2....
  0390: 02 88 00 0E 1A 32 88 00 0C 1A 03 00 46 04 1A 09  .....2......F...
  03A0: 05 46 FF FF FF 00 56 00 40 03 20 40 01 1A 09 25  .F....V.@. @...%
  03B0: 40 03 75 02 46 40 03 18 40 5C 1B 2D 02 46 40 27  @.u.F@..@\.-.F@'
  03C0: 00 46 06 1A 2D 08 40 5C 1B 02 0A 01 41 02 8A 01  .F..-.@\....A...
  03D0: 40 5B C5 00 01 01 00 00 37 00 00 52 47 01 05 00  @[......7..RG...
  03E0: 0B 21 00 20 0F 01 05 CC 0B 01 00 00 00 01 05 D3  .!. ............
  03F0: 0B E0 1B 12 00 01 05 02 14 0D D8 00 00 01 05 03  ................
  0400: 14 0C D8 00 00 01 05 04 14 69 01 02 00 01 05 05  .........i......
  0410: 14 68 01 02 00 01 05 06 14 7D 01 02 00 01 05 07  .h.......}......
  0420: 14 7C 01 02 00 01 05 08 14 91 01 02 00 01 05 09  .|..............
  0430: 14 90 01 02 00 01 05 38 00 40 80 33 01 0D 25 39  .......8.@.3..%9
  0440: 00 01 01 05 38 00 41 80 33 01 0D 25 39 00 01 02  ....8.A.3..%9...
  0450: 65 00 07 52 0D 55 00 00 52 0D 52 23 2C 25 00 01  e..R.U..R.R#,%..
  0460: 3D 25 00 04 45 86 00 51 02 55 00 00 52 4E 66 1E  =%..E..Q.U..RNf.
  0470: 01 24 47 18 38 00 01 05 33 1B FF 7F 00 00 01 05  .$G.8...3.......
  0480: 33 1E FF 7F 00 00 01 05 33 41 FF 7F 00 00 01 05  3.......3A......
  0490: 33 44 FF 7F 00 00 5B C8 01 01 04 00 04 37 00 00  3D....[......7..
  04A0: 03 01 46 01 02 31 01 00 1A 25 01 04 03 21 41 01  ..F..1...%...!A.
  04B0: 52 14 02 02 01 46 42 39 00 63 0F 4B 00 63 08 79  R....FB9.c.K.c.y
  04C0: 01 63 09 62 01 63 0A 69 01 63 13 71 01 63 0B 81  .c.b.c.i.c.q.c..
  04D0: 01 63 0C 89 01 63 0D 99 01 63 10 B2 01 5A 5A 43  .c...c...c...ZZC
  04E0: 5E 01 54 00 83 1C 3D 25 01 01 44 0C 01 01 0D 03  ^.T...=%..D.....
  04F0: 1C 1F 00 3D 25 01 00 44 71 00 3D 25 01 02 44 FB  ...=%..Dq.=%..D.
  0500: 00 3D 25 01 05 49 03 01 07 A5 00 1C FE 54 08 C1  .=%..I.......T..
  0510: 1C 3D A5 01 00 49 85 00 02 A5 01 02 32 A5 01 01  .=...I......2...
  0520: 01 F1 C1 1C 01 4A 25 C3 1C 01 49 E3 00 66 FF 2D  .....J%...I..f.-
  0530: 0D 42 C2 01 03 31 41 00 09 05 41 03 00 00 00 2D  .B...1A...A....-
  0540: 0A 42 41 2D 0A 42 41 03 0C 41 00 00 07 65 C9 1C  .BA-.BA..A...e..
  0550: FE 01 05 CA 1C 00 80 00 00 56 00 40 03 09 40 00  .........V.@..@.
  0560: 21 05 40 00 80 00 00 27 02 40 41 01 02 CB 1C 40  !.@....'.@A....@
  0570: 0D E5 CC 1C 10 0D 65 00 1C 04 02 20 01 00 1C 08  ......e.... ....
  0580: 25 01 07 52 14 15 2D 46 04 01 AA 9C 1B 46 3A 00  %..R..-F.....F:.
  0590: 00 5B 01 05 83 1C 00 00 00 00 07 0D 7C 1C EF FC  .[..........|...
  05A0: 43 45 01 01 0D 03 1C 63 00 66 06 03 E4 41 28 00  CE.....c.f...A(.
  05B0: 4C E5 41 20 44 36 01 0D 25 8C 1C 01 03 E4 41 28  L.A D6..%.....A(
  05C0: 00 4C E5 41 02 44 36 01 0D 25 8C 1C 10 4C E5 41  .L.A.D6..%...L.A
  05D0: 01 44 54 01 0D 65 8C 1C 01 43 4C 01 3D 65 01 04  .DT..e...CL.=e..
  05E0: 47 54 01 0D A5 00 1C 01 43 59 01 07 A5 00 1C FE  GT......CY......
  05F0: 0D 65 00 1C 04 3A 00 00 5B 54 20 D1 1C 43 5E 01  .e...:..[T ..C^.
  0600: 01 25 D1 1C 01 43 5E 01 01 25 D1 1C 02 43 5E 01  .%...C^..%...C^.
  0610: 07 25 C0 1C EF 43 5E 01 0D 25 C0 1C 10 43 5E 01  .%...C^..%...C^.
  0620: 54 08 C3 1C 51 C8 0D 25 C4 1C 01 51 32 43 5E 01  T...Q..%...Q2C^.
  0630: 0D 65 C9 1C 01 51 0A 07 25 C4 1C FE 51 0A 01 0D  .e...Q..%...Q...
  0640: C3 1C 01 02 51 C8 43 5E 01 0D 25 D5 1C 10 01 21  ....Q.C^..%....!
  0650: DE 1C 01 43 5E 01 7A 06 00 48 3F 78 69 F0 D2 32  ...C^.z..H?xi..2
  0660: 00 01 01 00 00 37 00 00 54 20 24 15 56 00 41 03  .....7..T $.V.A.
  0670: 88 41 09 08 01 02 01 0B 41 01 3A C9 00 41 15 05  .A......A.:..A..
  0680: 41 08 01 02 C4 00 41 54 20 2B 08 0D 25 24 15 03  A.....AT +..%$..
  0690: 5B FF 00 02 01 00 04 37 00 00 66 0C 03 0C 41 00  [......7..f...A.
  06A0: 00 2D 0A 41 42 2D 0D 42 04 00 3D 24 00 03 00 44  .-.AB-.B..=$...D
  06B0: 30 00 2D 0D 42 04 00 3E 0A 42 41 44 FB 00 43 19  0.-.B..>.BAD..C.
  06C0: 00 56 00 43 03 A4 41 02 00 03 F2 41 41 03 0C 41  .V.C..A....AA..A
  06D0: 00 00 3E 0D 41 00 00 44 FB 00 3E 0D 41 45 19 49  ..>.A..D..>.AE.I
  06E0: 6B 00 3E E5 41 10 46 5F 00 1B 3D 41 01 43 6B 00  k.>.A.F_..=A.Ck.
  06F0: 09 E5 41 03 15 3D 41 02 2D E5 41 0C 03 3A 43 41  ..A..=A.-.A..:CA
  0700: 54 00 00 00 33 0D 41 01 00 01 0A 00 00 41 0D 02  T...3.A......A..
  0710: 01 00 44 2D 0D 41 02 00 01 0A 00 00 41 03 32 43  ..D-.A......A.2C
  0720: 41 4B E5 00 01 49 D7 00 07 02 01 00 45 2D 0D 41  AK...I......E-.A
  0730: 01 00 01 0A 00 00 41 4A 02 01 00 44 44 B9 00 03  ......AJ...DD...
  0740: 29 43 00 0E A2 00 44 43 C1 00 03 29 43 00 08 A2  )C....DC...)C...
  0750: 00 45 33 0D 41 03 00 01 0A 00 00 41 03 3A 43 41  .E3.A......A.:CA
  0760: 07 02 01 00 45 43 FA 00 0D 02 01 00 44 33 0D 41  ....EC......D3.A
  0770: 01 00 01 0A 00 00 41 3D A5 00 01 44 F5 00 07 02  ......A=...D....
  0780: 01 00 45 43 FA 00 0D 02 01 00 44 5B 55 20 00 5B  ..EC......D[U .[
  0790: 29 00 01 01 00 04 02 01 01 00 02 E5 01 02 52 3C  ).............R<
  07A0: 37 00 00 4A 25 81 01 01 44 13 00 01 39 80 01 01  7..J%...D...9...
  07B0: 4A 25 81 01 01 44 20 00 5B C2 03 01 06 00 00 3D  J%...D .[......=
  07C0: 25 02 08 49 B4 00 54 20 41 18 54 20 1F 03 02 01  %..I..T A.T ....
  07D0: 01 00 55 38 01 02 05 00 60 EA 00 00 52 3C 3C F9  ..U8....`...R<<.
  07E0: 24 01 00 44 42 00 4A A5 24 01 10 44 2D 00 01 F9  $..DB.J.$..D-...
  07F0: 24 01 00 4A A5 24 01 10 44 3A 00 56 00 41 55 38  $..J.$..D:.V.AU8
  0800: 00 66 1E 03 0C 41 10 01 20 02 00 41 27 05 40 20  .f...A.. ..A'.@ 
  0810: 4E 00 00 32 02 00 40 20 05 00 60 EA 00 00 01 02  N..2..@ ..`.....
  0820: 42 01 40 01 02 46 01 40 01 02 4A 01 40 01 02 4E  B.@..F.@..J.@..N
  0830: 01 40 02 01 00 01 52 3C 3C 39 24 01 00 44 9C 00  .@....R<<9$..D..
  0840: 4A A5 24 01 08 44 87 00 01 39 24 01 00 4A A5 24  J.$..D...9$..J.$
  0850: 01 08 44 94 00 3D 05 01 00 00 00 00 49 B3 00 0D  ..D..=......I...
  0860: 25 41 18 01 4A 65 41 18 01 44 AB 00 5B 4B 05 00  %A..JeA..D..[K..
  0870: FF FF FF 00 44 D9 00 3D 65 02 24 49 C9 00 02 A5  ....D..=e.$I....
  0880: 02 00 3D 25 02 02 46 62 02 52 24 4B E5 02 01 44  ..=%..Fb.R$K...D
  0890: 43 01 3D E5 00 03 46 F1 00 03 01 46 00 02 39 00  C.=...F....F..9.
  08A0: 00 55 28 00 52 23 02 02 00 46 3D 25 02 02 44 0C  .U(.R#...F=%..D.
  08B0: 01 3A 10 00 3D 25 02 00 44 0C 01 3A 20 00 3D 25  .:..=%..D..: .=%
  08C0: 02 01 49 77 03 54 00 06 17 07 65 04 17 EF 54 00  ..Iw.T....e...T.
  08D0: 05 17 54 00 03 17 07 25 07 17 F7 0D 25 07 17 01  ..T....%....%...
  08E0: 51 32 0D 25 07 17 02 51 C8 0D 65 07 17 20 4B 05  Q2.%...Q..e.. K.
  08F0: 00 FF FF FF 00 44 77 03 03 0A 41 48 3D E5 00 03  .....Dw...AH=...
  0900: 46 74 01 03 01 46 00 02 39 00 00 0E 25 00 80 52  Ft...F..9...%..R
  0910: 14 02 02 00 46 4B E5 02 02 44 6E 01 01 05 CC 00  ....FK...Dn.....
  0920: 01 03 01 00 43 74 01 07 4D CC 00 FC FE 4B E5 02  ....Ct..M....K..
  0930: 01 44 62 02 03 0A 48 41 66 FF 2D 0D 42 7E 03 3D  .Db...HAf.-.B~.=
  0940: 0C 01 00 00 47 96 01 2D 0D 42 06 00 43 86 01 01  ....G..-.B..C...
  0950: 04 08 17 02 00 4B E5 02 20 44 B0 01 07 A5 07 17  .....K.. D......
  0960: F7 01 65 00 17 60 43 BA 01 0D A5 07 17 08 01 65  ..e..`C........e
  0970: 00 17 90 07 25 0A 17 FE 4B E5 02 40 49 CE 01 07  ....%...K..@I...
  0980: 65 09 17 F7 43 D3 01 0D 65 09 17 08 4B E5 02 10  e...C...e...K...
  0990: 44 E2 01 07 A5 07 17 F8 43 E8 01 5C A5 07 17 F8  D.......C..\....
  09A0: 01 0D 25 0C 17 01 01 39 00 17 01 01 89 01 17 01  ..%....9........
  09B0: 07 25 01 17 F0 01 B1 02 17 01 01 39 02 17 03 01  .%.........9....
  09C0: 71 02 17 01 3D A5 01 08 46 1C 02 01 B1 06 17 01  q...=...F.......
  09D0: 0D 65 06 17 10 51 64 54 20 0C 17 07 25 07 17 FD  .e...QdT ...%...
  09E0: 50 01 07 25 07 17 FE 07 65 07 17 DF 51 0A 4A A5  P..%....e...Q.J.
  09F0: 07 17 10 44 33 02 4A A5 07 17 20 44 3D 02 01 31  ...D3.J... D=..1
  0A00: 01 17 03 3D 0D 03 00 00 44 5D 02 01 09 05 17 03  ...=....D]......
  0A10: 5C A5 05 17 FC 02 0D 25 07 17 08 3A 00 00 3D E5  \......%...:..=.
  0A20: 00 03 46 77 03 03 01 46 00 56 38 46 56 00 41 03  ..Fw...F.V8FV.A.
  0A30: 39 41 02 09 25 41 0C 1B 25 41 01 66 FF 2D 0D 42  9A..%A..%A.f.-.B
  0A40: BA 03 2D 0A 42 41 03 24 41 01 00 21 02 46 41 03  ..-.BA.$A..!.FA.
  0A50: 24 41 00 00 27 02 40 41 03 05 41 00 E1 F5 05 27  $A..'.@A..A....'
  0A60: 02 41 40 3E 05 40 00 00 01 00 45 B9 02 03 0D 40  .A@>.@....E....@
  0A70: FF FF 02 39 00 00 52 14 01 0A 30 1B 40 3A 00 00  ...9..R...0.@:..
  0A80: 55 00 03 02 39 03 00 14 0D 03 02 3D A5 02 00 49  U...9......=...I
  0A90: 16 03 03 09 48 03 21 05 46 60 EA 00 00 03 02 46  ....H.!.F`.....F
  0AA0: 40 3C 02 41 01 40 49 F8 02 4A 25 40 01 10 49 77  @<.A.@I..J%@..Iw
  0AB0: 03 3A 00 00 55 28 00 52 23 03 09 48 03 07 25 40  .:..U(.R#..H..%@
  0AC0: 01 EF 01 02 41 01 46 0D 25 40 01 10 43 77 03 03  ....A.F.%@..Cw..
  0AD0: 09 48 03 03 39 46 02 09 25 46 0C 15 25 46 02 0F  .H..9F..%F..%F..
  0AE0: 25 46 01 02 A1 02 02 2C A5 02 01 3D 25 02 02 49  %F.....,...=%..I
  0AF0: 3C 03 55 30 02 4B E5 02 01 49 5C 03 3C 31 40 01  <.U0.K...I\.<1@.
  0B00: 02 49 57 03 03 21 48 02 3C 22 38 01 46 44 77 03  .IW..!H.<"8.FDw.
  0B10: 55 28 00 52 23 03 21 48 02 07 25 38 01 FE 03 09  U(.R#.!H..%8....
  0B20: 48 03 01 31 40 01 02 03 21 48 02 01 22 38 01 46  H..1@...!H.."8.F
  0B30: 3A 00 00 5B 7A 44 00 24 00 04 76 07 D5 2A 00 04  :..[zD.$..v..*..
  0B40: 77 07 D5 32 00 04 D7 05 D5 39 00 04 D7 05 D5 3F  w..2.....9.....?
  0B50: 00 04 D8 06 D5 46 00 04 D8 06 D5 4C 00 04 38 06  .....F.....L..8.
  0B60: D5 51 00 04 58 04 D5 5A 00 04 59 04 D5 FF FF 04  .Q..X..Z..Y.....
  0B70: 5A 04 D5 01 01 05 04 03 02 02 01 1D 01 02 01 00  Z...............
  0B80: 00 37 00 00 3D 65 00 07 44 97 00 56 00 41 03 21  .7..=e..D..V.A.!
  0B90: 41 00 15 25 41 02 03 0A 48 41 3D 65 00 01 44 83  A..%A...HA=e..D.
  0BA0: 00 3D 25 00 02 45 39 00 54 20 61 17 3C E5 62 17  .=%..E9.T a.<.b.
  0BB0: 30 49 31 00 03 21 48 00 01 0D FA 02 02 00 52 14  0I1..!H.......R.
  0BC0: 01 25 BE 1B 02 5C E5 C0 1A FC 02 01 25 91 1A 11  .%...\......%...
  0BD0: 0D 25 7D 1A 01 0D 25 34 1B 01 01 05 F6 1A 01 00  .%}...%4........
  0BE0: 00 00 0D A5 B6 1B 01 01 05 31 1B 00 08 00 04 01  .........1......
  0BF0: 25 C5 1B 06 01 0D 86 1B 04 00 3A 00 00 5B 3D 25  %.........:..[=%
  0C00: 00 02 45 7F 00 54 08 60 17 0D 25 61 17 01 3A 00  ..E..T.`..%a..:.
  0C10: 00 5B 01 05 1A 03 66 66 66 66 01 05 1D 03 66 C6  .[....ffff....f.
  0C20: 2B 00 5C 05 F6 02 FF 08 FF 9F 04 F4 00 20 01 05  +.\.......... ..
  0C30: F9 02 10 27 02 00 01 05 F8 02 00 00 04 00 5C 65  ...'..........\e
  0C40: 07 17 E7 08 01 05 3B 01 64 04 12 01 01 05 30 01  ......;.d.....0.
  0C50: A0 86 11 00 01 05 BA 17 18 00 64 00 01 05 31 01  ..........d...1.
  0C60: 3C 00 01 08 01 65 D4 00 02 01 0D FC 00 00 01 01  <....e..........
  0C70: 05 0A 19 0F 00 00 00 01 05 38 18 00 00 00 30 4A  .........8....0J
  0C80: 25 7E 17 01 49 04 01 01 05 7D 17 00 20 00 00 01  %~..I....}.. ...
  0C90: 05 7C 17 FF 10 00 10 5B 0C 01 01 03 00 08 37 00  .|.....[......7.
  0CA0: 00 03 25 46 FF 3D E5 00 00 49 59 00 66 FF 2D 0D  ..%F.=...IY.f.-.
  0CB0: 42 BC 00 4A 25 47 18 02 49 28 00 2D 0D 42 28 00  B..J%G..I(.-.B(.
  0CC0: 3D 65 01 22 49 34 00 2D 0D 42 18 00 3D 0D 00 68  =e."I4.-.B..=..h
  0CD0: 42 47 4E 00 2D 0D 42 08 00 3D 0D 00 78 69 47 4E  BGN.-.B..=..xiGN
  0CE0: 00 2D 0D 42 08 00 02 04 00 00 00 02 04 01 04 00  .-.B............
  0CF0: 5B 55 18 00 4B 25 01 20 44 88 00 4A 25 47 18 01  [U..K%. D..J%G..
  0D00: 44 88 00 20 05 00 05 00 00 00 02 02 00 40 4B 25  D.. .........@K%
  0D10: 01 40 44 93 00 1A 05 00 01 03 25 46 FE 43 93 00  .@D.......%F.C..
  0D20: 4B 25 01 40 49 93 00 14 05 00 01 55 00 01 02 25  K%.@I......U...%
  0D30: 01 02 03 05 40 88 84 02 00 27 01 40 00 09 22 40  ....@....'.@.."@
  0D40: 46 02 62 01 40 3E 25 40 07 49 B8 00 02 65 01 06  F.b.@>%@.I...e..
  0D50: 5B 7A 50 00 68 3C 01 00 02 02 00 00 58 0F 02 00  [zP.h<......X...
  0D60: 02 01 00 00 B0 1E 04 00 01 01 00 00 08 4C 01 00  .............L..
  0D70: 02 01 00 00 58 0F 02 00 01 01 00 00 48 3F 00 00  ....X.......H?..
  0D80: 02 0A 00 00 78 69 00 00 02 06 00 00 F0 D2 00 00  ....xi..........
  0D90: 02 03 00 00 68 42 00 00 02 08 00 00 78 69 00 00  ....hB......xi..
  0DA0: 02 05 00 00 E4 00 01 02 00 04 37 00 00 4A 25 CF  ..........7..J%.
  0DB0: 05 10 44 19 00 4A 25 47 18 04 49 2E 00 42 21 00  ..D..J%G..I..B!.
  0DC0: 63 17 3F 00 63 18 3F 00 63 22 2F 00 63 23 2F 00  c.?.c.?.c"/.c#/.
  0DD0: 5A 5A 5B 01 05 80 00 78 F4 01 00 01 F1 81 00 00  ZZ[....x........
  0DE0: 43 CB 00 3D 25 00 17 44 B0 00 3D A5 00 03 46 B0  C..=%..D..=...F.
  0DF0: 00 03 05 41 00 00 0F 00 4B E5 00 80 44 60 00 03  ...A....K...D`..
  0E00: 0D 41 0F 00 3D A5 00 00 44 81 00 15 05 41 04 3D  .A..=...D....A.=
  0E10: A5 00 01 44 81 00 15 05 41 04 3D A5 00 02 44 81  ...D....A.=...D.
  0E20: 00 15 05 41 04 03 02 40 41 15 05 41 08 03 2A 41  ...A...@A..A..*A
  0E30: 40 03 BA 41 40 01 05 80 00 10 F6 01 00 03 00 40  @..A@..........@
  0E40: 81 00 69 8D 41 FF FF 09 5A 40 41 0F 4A 40 41 01  ..i.A...Z@A.J@A.
  0E50: 02 81 00 40 01 05 80 00 78 F4 01 00 08 E5 00 0F  ...@....x.......
  0E60: 01 B9 81 00 00 01 F1 81 00 00 01 29 81 00 00 56  ...........)...V
  0E70: 00 41 03 21 41 00 03 65 41 01 01 02 8B 00 41 3C  .A.!A..eA.....A<
  0E80: 25 8C 00 00 44 DB 00 5B 74 00 01 02 00 04 66 FF  %...D..[t.....f.
  0E90: 56 08 47 2D 0D 42 50 00 03 21 47 00 09 25 47 F0  V.G-.BP..!G..%G.
  0EA0: 42 22 47 63 00 37 00 63 40 2A 00 63 80 32 00 5A  B"Gc.7.c@*.c.2.Z
  0EB0: 5A 5B 2D 0D 42 18 00 43 37 00 2D 0D 42 0C 00 03  Z[-.B..C7.-.B...
  0EC0: 21 47 00 09 25 47 07 2D 0A 42 47 2D 0A 42 47 03  !G..%G.-.BG-.BG.
  0ED0: 0C 48 00 00 5B 7A 24 00 00 00 00 03 00 26 00 29  .H..[z$......&.)
  0EE0: 00 2C 00 2F 00 00 02 00 2C 00 2D 00 2E 00 2F 00  .,./....,.-.../.
  0EF0: 00 00 01 00 07 00 08 00 0B 00 0C 00 7A 00 01 01  ............z...
  0F00: 00 00 37 00 00 52 14 07 25 C0 1A FE 0D A5 51 1B  ..7..R..%.....Q.
  0F10: 01 54 20 54 1B 54 20 45 1B 42 29 00 63 00 31 00  .T T.T E.B).c.1.
  0F20: 63 01 39 00 63 02 4D 00 5A 5A 43 72 00 01 25 45  c.9.c.M.ZZCr..%E
  0F30: 1B 02 43 3E 00 01 25 45 1B 01 54 20 42 1B 54 00  ..C>..%E..T B.T.
  0F40: 43 1B 54 00 47 1B 43 72 00 01 0D 43 1B 01 01 01  C.T.G.Cr...C....
  0F50: 05 47 1B 01 00 01 00 01 55 4A 1B 01 03 01 55 4E  .G......UJ....UN
  0F60: 1B 01 03 01 0D 53 1B 10 10 01 25 42 1B 01 54 30  .....S....%B..T0
  0F70: 51 1B 3A 00 00 5B 3F 00 01 01 00 00 37 00 00 52  Q.:..[?.....7..R
  0F80: 14 54 30 9D 1B 01 69 9D 1B 00 3D 65 00 00 44 3B  .T0...i...=e..D;
  0F90: 00 4A A5 9C 1B 01 44 3B 00 4A 25 A3 1B 01 49 23  .J....D;.J%...I#
  0FA0: 00 4A 25 A3 1B 01 44 2B 00 4A 25 A3 1B 01 49 33  .J%...D+.J%...I3
  0FB0: 00 3A 00 00 5B 3E 00 01 01 00 00 37 00 00 52 14  .:..[>.....7..R.
  0FC0: 3D 65 00 01 44 30 00 0D 65 9C 1B 03 07 25 9C 1B  =e..D0..e....%..
  0FD0: FE 4A A5 9C 1B 01 49 1C 00 07 E5 7C 1B 7F 54 20  .J....I....|..T 
  0FE0: A9 1B 43 3A 00 0D E5 7C 1B 80 0D 25 9C 1B 01 3A  ..C:...|...%...:
  0FF0: 00 00 5B 32 01 01 03 00 0C 37 00 00 56 00 40 03  ..[2.....7..V.@.
  1000: 09 40 01 21 05 40 40 42 0F 00 2D 01 40 03 27 05  .@.!.@@B..-.@.'.
  1010: 40 0A 00 00 00 21 05 40 64 00 00 00 56 00 41 03  @....!.@d...V.A.
  1020: 39 41 01 27 02 40 41 27 05 40 E8 03 00 00 03 02  9A.'.@A'.@......
  1030: 46 40 3E 05 46 66 E3 01 00 45 5B 00 0E E5 02 20  F@>.Ff...E[.... 
  1040: 3E 05 46 88 84 02 00 47 5B 00 0E E5 02 40 3D 05  >.F....G[....@=.
  1050: 03 00 00 00 00 44 8F 00 2C 0D 01 01 00 03 05 40  .....D..,......@
  1060: 40 42 0F 00 33 01 40 03 27 05 40 A0 86 01 00 02  @B..3.@.'.@.....
  1070: A2 03 40 15 05 41 0E 27 05 41 A8 61 00 00 02 0A  ..@..A.'.A.a....
  1080: 03 40 02 F1 03 01 3D A5 02 00 44 B0 00 2D 05 46  .@....=...D..-.F
  1090: E8 03 00 00 03 01 41 00 56 38 41 27 02 46 41 02  ......A.V8A'.FA.
  10A0: E2 03 40 0E A5 03 10 4B E5 02 01 49 2A 01 3D 25  ..@....K...I*.=%
  10B0: 02 02 44 CF 00 3A 10 00 3D 25 02 00 44 CF 00 3A  ..D..:..=%..D..:
  10C0: 20 00 03 00 41 07 17 5E 05 41 FC FF F8 FF 08 00   ...A..^.A......
  10D0: 01 00 4B E5 02 10 44 EA 00 09 A5 41 F8 3C 02 07  ..K...D....A.<..
  10E0: 17 41 49 2A 01 3C 39 00 17 01 49 2A 01 3C 89 01  .AI*.<9...I*.<..
  10F0: 17 01 49 2A 01 3C 31 01 17 03 49 2A 01 3C 09 05  ..I*.<1...I*.<..
  1100: 17 03 49 2A 01 3C B1 02 17 01 49 2A 01 3D 0D 02  ..I*.<....I*.=..
  1110: 02 00 44 2E 01 3C 39 02 17 03 44 2E 01 0E E5 02  ..D..<9...D.....
  1120: 01 3A 00 00 5B 2C 00 02 01 00 00 37 00 00 3C 21  .:..[,.....7..<!
  1130: FC 00 00 49 19 00 0D A5 C0 00 01 43 26 00 3C 61  ...I.......C&.<a
  1140: FC 00 00 49 26 00 0D A5 C0 00 02 0D A5 C1 00 01  ...I&...........
  1150: 5B 19 00 01 01 00 08 37 00 00 52 14 01 01 5E 1B  [......7..R...^.
  1160: 00 01 01 5F 1B 01 3A 00 00 5B C8 00 01 02 00 00  ..._..:..[......
  1170: 37 00 00 42 29 00 63 00 2F 00 63 07 37 00 63 03  7..B).c./.c.7.c.
  1180: 3F 00 63 09 3F 00 63 0A 3F 00 63 0B 3F 00 63 0C  ?.c.?.c.?.c.?.c.
  1190: 3F 00 63 0D 3F 00 5A 5A 5B 01 21 E5 19 00 43 B2  ?.c.?.ZZ[.!...C.
  11A0: 00 01 21 59 18 00 43 B2 00 02 E1 00 00 55 20 00  ..!Y..C......U .
  11B0: 3D 65 00 03 44 55 00 02 29 00 00 32 25 00 08 52  =e..DU..)..2%..R
  11C0: 14 5C 39 00 1C F8 00 02 39 00 00 3D A5 00 01 49  .\9.....9..=...I
  11D0: B2 00 52 14 54 00 F2 1B 66 06 03 E4 41 28 00 09  ..R.T...f...A(..
  11E0: E5 41 70 66 1E 03 04 40 40 01 3E 05 40 00 00 00  .Apf...@@.>.@...
  11F0: 00 44 92 00 01 02 F2 1B 40 43 B8 00 3E E5 41 20  .D......@C..>.A 
  1200: 46 B8 00 49 A7 00 0D 05 F2 1B 00 F1 00 00 43 B8  F..I..........C.
  1210: 00 0D 05 F2 1B 00 A1 00 00 43 B8 00 52 14 54 00  .........C..R.T.
  1220: F2 1B 54 30 EE 1B 54 00 F9 1B 54 00 ED 1B 3A 00  ..T0..T...T...:.
  1230: 00 5B E6 01 01 04 00 08 37 00 00 3D 65 02 01 49  .[......7..=e..I
  1240: 7B 01 01 25 3F 01 10 4B A5 02 03 49 A0 00 02 05  {..%?..K...I....
  1250: 00 00 03 00 05 02 05 01 00 05 02 00 3C 21 FC 00  ............<!..
  1260: 02 49 C7 00 01 8D C0 00 00 02 51 02 01 05 C6 00  .I........Q.....
  1270: 00 00 10 00 01 05 C8 00 00 00 50 00 01 0D C3 00  ..........P.....
  1280: 02 00 54 20 CA 00 01 05 C2 00 00 01 00 00 0E 25  ..T ...........%
  1290: 02 80 52 14 08 25 02 07 03 25 40 01 4A 65 CC 00  ..R..%...%@.Je..
  12A0: 01 44 9A 00 56 08 48 03 18 41 D0 05 09 0D 41 7F  .D..V.H..A....A.
  12B0: FF 3E 0D 41 06 00 44 97 00 3E 0D 41 0C 00 44 97  .>.A..D..>.A..D.
  12C0: 00 3E 0D 41 0E 00 49 9A 00 56 20 40 56 08 48 43  .>.A..I..V @V.HC
  12D0: C7 00 0E 25 02 80 52 14 54 00 CC 00 56 08 48 08  ...%..R.T...V.H.
  12E0: 25 02 07 0D 25 CA 00 01 01 25 C2 00 11 54 00 C6  %...%....%...T..
  12F0: 00 54 00 C8 00 03 25 40 01 07 65 D0 05 FE 3D A5  .T....%@..e...=.
  1300: 01 01 47 D8 00 0D 65 D0 05 01 03 A0 40 C9 00 03  ..G...e.....@...
  1310: 00 46 C4 00 03 02 41 46 2D 00 46 C6 00 2D 00 41  .F....AF-.F..-.A
  1320: C8 00 52 14 01 32 07 1A 40 01 32 08 1A 40 01 02  ..R..2..@.2..@..
  1330: 04 1A 46 01 02 05 1A 41 54 30 C3 1A 54 00 5C 1B  ..F....AT0..T.\.
  1340: 01 01 5D 1B 00 54 08 09 1A 54 08 0A 1A 54 08 0B  ..]..T...T...T..
  1350: 1A 54 08 0C 1A 01 09 0E 1A 00 01 19 0D 1A 00 5C  .T.............\
  1360: 19 01 1A FC F8 01 07 A5 01 1A 0F 01 09 06 1A 01  ................
  1370: 01 25 00 1A 01 0D E5 9C 1B 10 54 20 0F 1A 54 20  .%........T ..T 
  1380: 35 1A 54 20 3C 1A 54 00 A1 1B 54 00 A0 1B 54 00  5.T <.T...T...T.
  1390: A2 1B 01 22 F6 1A 40 4B A5 02 03 49 77 01 0E 25  ..."..@K...Iw..%
  13A0: 02 80 52 14 0D 25 CC 00 01 3A 00 00 5B 52 14 3D  ..R..%...:..[R.=
  13B0: 65 02 00 49 98 01 54 20 00 1A 3A 00 00 3C 21 FC  e..I..T ..:..<!.
  13C0: 00 02 49 97 01 54 08 C1 00 5B 3D 65 02 10 44 A5  ..I..T...[=e..D.
  13D0: 01 01 09 06 1A 01 5B 03 00 40 04 1A 09 05 40 00  ......[..@....@.
  13E0: 00 00 FF 2D 01 40 00 09 0D 40 00 F0 01 02 04 1A  ...-.@...@......
  13F0: 40 08 0D 00 FF 0F 56 00 41 03 31 41 01 74 0A 00  @.....V.A.1A.t..
  1400: 41 2C 09 01 00 08 25 00 FC 14 05 00 10 01 01 5C  A,....%........\
  1410: 1B 00 01 09 0D 1A 01 5B 49 00 01 01 00 00 37 00  .......[I.....7.
  1420: 00 52 14 07 65 B6 1B FE 3D 65 00 01 44 37 00 54  .R..e...=e..D7.T
  1430: 30 6E 1A 54 30 27 1A 54 30 11 1A 54 20 B5 1B 54  0n.T0'.T0..T ..T
  1440: 20 BD 1B 4A 25 B6 1B 01 49 2B 00 3A 00 00 5B 0D   ..J%...I+.:..[.
  1450: 25 BD 1B 01 54 00 9E 1B 3A 00 00 0D 25 32 01 01  %...T...:...%2..
  1460: 5B D9 00 01 03 00 00 37 00 00 52 14 54 20 78 1A  [......7..R.T x.
  1470: 54 00 80 1A 3D 65 00 01 49 9A 00 4A 25 01 1A 03  T...=e..I..J%...
  1480: 44 59 00 0D 25 7E 1A 07 01 25 7F 1A 01 51 01 4A  DY..%~...%...Q.J
  1490: 25 7F 1A 02 44 2C 00 54 20 7F 1A 54 08 81 1A 54  %...D,.T ..T...T
  14A0: 08 82 1A 54 08 83 1A 01 0D 84 1A FF FF 01 0D 85  ...T............
  14B0: 1A FF FF 01 0D 86 1A FF FF 5B 54 00 79 1A 66 05  .........[T.y.f.
  14C0: 2D 0D 42 04 00 56 00 41 03 24 40 00 00 15 05 40  -.B..V.A.$@....@
  14D0: 0A 03 24 40 01 00 15 05 40 0A 03 24 40 02 00 15  ..$@....@..$@...
  14E0: 05 40 04 01 02 7C 1A 40 2D 0D 42 03 00 2D 0D 41  .@...|.@-.B..-.A
  14F0: 01 00 3E 0D 41 00 01 45 67 00 5B 01 31 79 1A 00  ..>.A..Eg.[.1y..
  1500: 56 00 41 03 19 41 01 3B 02 41 3D 65 00 02 49 BC  V.A..A.;.A=e..I.
  1510: 00 03 00 40 7C 1A 04 02 00 40 43 C5 00 03 03 40  ...@|....@C....@
  1520: 00 01 02 7C 1A 40 2D 05 46 04 00 00 00 2D 8D 41  ...|.@-.F....-.A
  1530: 01 00 3E 89 41 01 45 A9 00 5B 7D 00 01 01 00 04  ..>.A.E..[}.....
  1540: 56 00 40 03 20 40 80 01 66 FF 2D 0D 42 55 00 3E  V.@. @..f.-.BU.>
  1550: 0C 40 02 00 47 25 00 2D 0D 42 08 00 43 15 00 33  .@..G%.-.B..C..3
  1560: 0C 40 04 00 21 0C 40 06 00 2D 0C 40 00 00 56 18  .@..!.@..-.@..V.
  1570: 40 03 02 46 40 66 1E 02 04 00 08 00 20 05 00 64  @..F@f...... ..d
  1580: 00 00 00 27 02 40 46 02 02 00 40 5B 7A 28 00 64  ...'.@F...@[z(.d
  1590: 00 00 00 00 00 00 00 FF FF 07 00 01 00 00 00 C8  ................
  15A0: 00 3F 00 08 00 19 00 40 06 5F 00 40 00 32 00 80  .?.....@._.@.2..
  15B0: 0C 7F 00 60 00 64 00 28 01 02 03 00 18 37 00 00  ...`.d.(.....7..
  15C0: 66 FF 2D 0D 42 1C 01 55 28 05 2D 09 42 05 2D 09  f.-.B..U(.-.B.-.
  15D0: 42 05 03 0C 48 00 00 03 09 41 00 2D 19 41 00 33  B...H....A.-.A.3
  15E0: 0D 41 01 00 01 0A 80 1B 41 54 08 82 1B 01 99 82  .A......AT......
  15F0: 1B 02 03 19 41 00 33 09 41 02 56 18 41 03 B1 41  ....A.3.A.V.A..A
  1600: 04 33 1A 41 41 01 8A 81 1B 41 03 19 41 00 33 09  .3.AA....A..A.3.
  1610: 41 02 2D 1A 41 41 2D 09 41 00 4B 25 04 10 44 6E  A.-.AA-.A.K%..Dn
  1620: 00 2D 09 41 00 01 0A 81 1B 41 03 21 41 04 09 25  .-.A.....A.!A..%
  1630: 41 02 1B 25 41 01 01 22 83 1B 41 54 00 5E 1B 01  A..%A.."..AT.^..
  1640: 31 5E 1B 04 01 B1 5E 1B 04 03 09 41 01 2D 19 41  1^....^....A.-.A
  1650: 01 33 0D 41 01 00 01 0A 87 1B 41 54 08 8E 1B 01  .3.A......AT....
  1660: 99 8E 1B 03 03 19 41 01 33 09 41 03 56 18 41 03  ......A.3.A.V.A.
  1670: B9 41 04 33 1A 41 41 01 8A 8D 1B 41 03 19 41 01  .A.3.AA....A..A.
  1680: 33 09 41 03 2D 1A 41 41 2D 09 41 01 4B 25 04 20  3.A.-.AA-.A.K%. 
  1690: 44 E0 00 2D 09 41 01 01 0A 8D 1B 41 03 21 41 04  D..-.A.....A.!A.
  16A0: 09 25 41 04 1B 25 41 02 01 22 8F 1B 41 54 00 5F  .%A..%A.."..AT._
  16B0: 1B 01 39 5F 1B 04 01 B9 5F 1B 04 03 21 41 04 09  ..9_...._...!A..
  16C0: 25 41 80 1B 25 41 07 01 22 9E 1B 41 3A 00 00 5B  %A..%A.."..A:..[
  16D0: 7A 0C 00 00 00 00 03 00 26 00 29 00 2C 00 2F C9  z.......&.).,./.
  16E0: 13 02 03 08 00 37 00 00 56 00 00 03 09 00 00 02  .....7..V.......
  16F0: 0D 00 23 21 4B A5 00 10 44 21 00 02 0D 00 23 22  ..#!K...D!....#"
  1700: 52 49 3E 0D 42 00 00 44 B6 05 03 0C 41 04 00 3E  RI>.B..D....A..>
  1710: 25 41 00 44 B6 05 3E 25 41 15 44 B6 05 42 39 00  %A.D..>%A.D..B9.
  1720: 63 07 76 02 63 05 EF 00 63 06 EF 00 63 12 1F 02  c.v.c...c...c...
  1730: 63 01 5C 00 63 00 69 00 5A 5A 5B 4B A5 00 10 44  c.\.c.i.ZZ[K...D
  1740: 65 0A 0D E5 19 19 03 5B 4B A5 00 10 44 65 0A 03  e......[K...De..
  1750: 0C 41 01 00 66 FF 2D 0D 42 B1 13 3E 0C 41 00 00  .A..f.-.B..>.A..
  1760: 44 8C 00 2D 0D 42 04 00 43 7C 00 03 0C 48 02 00  D..-.B..C|...H..
  1770: 4A 25 51 1C 01 44 65 0A 03 0D 41 01 00 66 FF 2D  J%Q..De...A..f.-
  1780: 0D 42 B1 13 4A 62 50 1C 41 49 C0 00 15 25 41 01  .B..JbP.AI...%A.
  1790: 2D 0D 42 04 00 3E 25 41 40 49 A5 00 43 D5 00 03  -.B..>%A@I..C...
  17A0: 0C 48 02 00 54 08 C3 1C 51 C8 0D 25 C4 1C 01 51  .H..T...Q..%...Q
  17B0: 32 56 08 48 03 25 01 03 03 05 00 01 BC FF 00 43  2V.H.%.........C
  17C0: 31 01 4C A5 41 02 44 65 0A 50 01 43 D5 00 56 20  1.L.A.De.P.C..V 
  17D0: 01 03 05 00 00 F3 FE 01 3D E5 00 05 44 31 01 03  ........=...D1..
  17E0: 8D 00 FE 00 43 31 01 66 06 03 24 41 28 00 4C 25  ....C1.f..$A(.L%
  17F0: 41 01 44 65 0A 03 25 01 01 03 05 00 00 F4 FB 04  A.De..%.........
  1800: 3D E5 00 05 44 31 01 03 8D 00 FB 00 43 31 01 5B  =...D1......C1.[
  1810: 56 28 01 03 99 01 00 3B 05 00 4C 00 00 04 05 00  V(.....;..L.....
  1820: F0 05 80 61 57 00 01 04 0A 01 00 02 21 01 00 02  ...aW.......!...
  1830: E9 01 00 02 05 00 00 4C 00 00 55 10 01 52 4E 3D  .......L..U..RN=
  1840: 65 01 00 44 77 01 51 C8 51 C8 2D 65 01 01 3E 65  e..Dw.Q.Q.-e..>e
  1850: 01 0C 45 54 01 5B 56 28 01 3B 05 00 4C 00 00 04  ..ET.[V(.;..L...
  1860: 05 00 F2 05 90 40 02 05 00 00 4C 04 4C 55 10 01  .....@....L.LU..
  1870: 52 4E 3D 65 01 00 44 A6 01 2D 65 01 01 3E 65 01  RN=e..D..-e..>e.
  1880: 06 45 7A 01 5B 56 00 41 3B 05 04 4C 00 00 03 A3  .Ez.[V.A;..L....
  1890: 41 00 3E A5 00 FF 44 F9 01 09 B2 41 00 0F BA 41  A.>...D....A...A
  18A0: 00 03 0A 41 00 3B 05 00 4C 00 00 04 05 00 F0 05  ...A.;..L.......
  18B0: 80 72 04 02 01 41 56 28 01 02 05 00 00 4C 00 00  .r...AV(.....L..
  18C0: 55 10 01 52 4E 3D 65 01 00 44 F9 01 2D 65 01 01  U..RN=e..D..-e..
  18D0: 3E 65 01 06 45 DA 01 5B 02 9A 00 01 02 21 00 01  >e..E..[.....!..
  18E0: 02 79 00 01 42 22 01 63 00 08 01 63 01 30 01 63  .y..B".c...c.0.c
  18F0: 02 AB 02 63 03 E3 00 63 04 C0 02 5A 5A 5B 07 25  ...c...c...ZZ[.%
  1900: C9 05 FC 56 30 00 3B 05 00 4C 00 00 04 05 00 00  ...V0.;..L......
  1910: 02 90 40 02 21 01 00 02 E9 01 00 02 05 00 00 4C  ..@.!..........L
  1920: 04 4C 55 10 01 52 4E 3D 65 01 00 44 5F 02 51 C8  .LU..RN=e..D_.Q.
  1930: 51 C8 2D A5 00 01 3E A5 00 06 45 27 02 5B 3B 05  Q.-...>...E'.[;.
  1940: 04 4C 00 00 0A 25 00 3F 3F 25 00 00 44 75 02 0D  .L...%.??%..Du..
  1950: 25 C9 05 02 5B 56 00 41 03 21 41 00 09 25 41 0F  %...[V.A.!A..%A.
  1960: 15 0D 41 01 66 FF 2D 0D 42 69 0A 2D 0A 42 41 03  ..A.f.-.Bi.-.BA.
  1970: 0C 48 00 00 07 A5 80 18 FB 56 08 48 03 25 01 02  .H.......V.H.%..
  1980: 03 05 00 00 02 FF 00 43 31 01 3E A5 41 20 49 D1  .......C1.>.A I.
  1990: 02 03 25 01 04 03 05 00 00 03 FF 00 43 31 01 3E  ..%.........C1.>
  19A0: A5 41 31 49 D1 02 66 FF 2D 0D 42 ED 12 43 E4 02  .A1I..f.-.B..C..
  19B0: 66 FF 2D 0D 42 F1 11 4B A5 00 10 44 E4 02 2D 0D  f.-.B..K...D..-.
  19C0: 42 40 00 03 05 41 80 4C 00 00 3B 02 41 04 04 00  B@...A.L..;.A...
  19D0: 00 00 2D 0D 42 04 00 2D 05 41 04 00 00 00 3F 05  ..-.B..-.A....?.
  19E0: 00 FF FF FF FF 49 EB 02 4B A5 00 10 44 4F 05 02  .....I..K...DO..
  19F0: 05 01 06 00 00 00 56 00 41 66 1A 03 0C 41 00 00  ......V.Af...A..
  1A00: 2D 0A 41 42 2D 0D 42 04 00 3D 24 01 08 00 44 46  -.AB-.B..=$...DF
  1A10: 03 2D 0D 42 0C 00 3E 0A 42 41 49 2A 03 03 0D 41  .-.B..>.BAI*...A
  1A20: 00 00 43 1F 04 03 0C 41 04 00 3E 0D 41 00 00 44  ..C....A..>.A..D
  1A30: 1F 04 02 0C 01 06 00 03 02 46 41 26 05 01 64 00  .........FA&..d.
  1A40: 00 00 03 02 01 40 21 02 46 01 02 02 01 40 21 02  .....@!.F....@!.
  1A50: 40 46 21 05 40 00 04 00 00 27 05 40 7D 01 00 00  @F!.@....'.@}...
  1A60: 03 02 46 40 20 05 01 00 00 08 00 27 05 40 71 02  ..F@ ......'.@q.
  1A70: 00 00 21 05 40 10 00 00 00 2D 02 46 40 03 02 41  ..!.@....-.F@..A
  1A80: 46 66 06 55 00 01 02 0C 01 04 00 20 05 01 30 02  Ff.U....... ..0.
  1A90: 00 00 3D 0D 01 97 06 47 E3 03 1B 05 40 01 3D 0D  ..=....G....@.=.
  1AA0: 01 2F 0D 47 E3 03 1B 05 40 01 3D 0D 01 5E 1A 47  ./.G....@.=..^.G
  1AB0: E3 03 1B 05 40 01 3D 0D 01 BC 34 47 E3 03 1B 05  ....@.=...4G....
  1AC0: 40 01 03 02 00 40 3B 05 E8 4C 00 00 27 02 41 00  @....@;..L..'.A.
  1AD0: 04 A2 00 40 3B 05 EC 4C 00 00 15 05 01 09 27 02  ...@;..L......'.
  1AE0: 00 01 0F 25 40 80 04 A2 00 40 3B 05 18 4D 00 00  ...%@....@;..M..
  1AF0: 04 A5 00 00 3B 05 20 4D 00 00 04 A5 00 02 3B 05  ....;. M......;.
  1B00: F0 4C 00 00 66 06 03 E4 41 28 00 4C E5 41 01 49  .L..f...A(.L.A.I
  1B10: 37 04 04 A5 00 00 3B 05 1C 4D 00 00 66 06 03 E4  7.....;..M..f...
  1B20: 41 28 00 4C E5 41 01 49 4F 04 04 A5 00 3C 3B 05  A(.L.A.IO....<;.
  1B30: A4 4C 00 00 66 06 03 E4 41 28 00 4C E5 41 02 44  .L..f...A(.L.A.D
  1B40: 72 04 04 A5 00 46 4C E5 41 10 49 72 04 04 A5 00  r....FL.A.Ir....
  1B50: 4A 3B 05 20 4D 00 00 66 06 03 E4 41 28 00 4C E5  J;. M..f...A(.L.
  1B60: 41 20 49 8A 04 10 A5 00 04 66 06 03 24 41 34 00  A I......f..$A4.
  1B70: 3B 05 C4 4C 00 00 04 A2 00 41 03 24 41 35 00 3B  ;..L.....A.$A5.;
  1B80: 05 C8 4C 00 00 04 A2 00 41 03 24 41 39 00 3B 05  ..L.....A.$A9.;.
  1B90: CC 4C 00 00 04 A2 00 41 03 24 41 37 00 3B 05 D0  .L.....A.$A7.;..
  1BA0: 4C 00 00 04 A2 00 41 03 24 41 36 00 3B 05 D4 4C  L.....A.$A6.;..L
  1BB0: 00 00 04 A2 00 41 03 24 41 3A 00 3B 05 D8 4C 00  .....A.$A:.;..L.
  1BC0: 00 04 A2 00 41 03 24 41 38 00 3B 05 DC 4C 00 00  ....A.$A8.;..L..
  1BD0: 04 A2 00 41 3B 05 A8 4C 00 00 66 1E 03 E4 41 36  ...A;..L..f...A6
  1BE0: 01 4C E5 41 02 44 21 05 04 A5 00 67 04 A5 01 89  .L.A.D!....g....
  1BF0: 04 A5 02 AB 04 A5 03 01 04 A5 04 23 04 A5 05 45  ...........#...E
  1C00: 3B 05 C0 4C 00 00 66 1E 03 E4 41 36 01 4C E5 41  ;..L..f...A6.L.A
  1C10: 20 44 3E 05 03 E4 41 37 01 04 BA 00 41 3B 05 08   D>...A7....A;..
  1C20: 4D 00 00 4C E5 41 10 44 4F 05 04 A5 00 80 03 05  M..L.A.DO.......
  1C30: 00 80 4C 00 00 02 21 01 00 02 E9 01 00 56 00 41  ..L...!......V.A
  1C40: 03 0A 41 00 3B 02 41 03 03 41 00 3E 05 41 FF FF  ..A.;.A..A.>.A..
  1C50: FF FF 44 B5 05 3B 05 00 4C 00 00 04 05 01 F0 05  ..D..;..L.......
  1C60: 80 72 04 02 02 41 02 05 00 04 4C 00 00 55 10 01  .r...A....L..U..
  1C70: 52 4E 3D 65 01 00 44 AA 05 51 C8 51 C8 2D A5 00  RN=e..D..Q.Q.-..
  1C80: 01 3E A5 00 07 45 5E 05 5B 2D 0D 00 04 00 56 18  .>...E^.[-....V.
  1C90: 00 43 5E 05 5B 02 0D 00 22 21 52 49 3E 0D 42 00  .C^.[..."!RI>.B.
  1CA0: 00 44 65 0A 42 39 00 63 07 E3 05 63 00 C1 06 63  .De.B9.c...c...c
  1CB0: 01 D0 06 63 0F FD 06 63 12 DF 06 63 14 EE 06 5A  ...c...c...c...Z
  1CC0: 5A 5B 56 00 41 03 21 41 00 09 25 41 0F 15 0D 41  Z[V.A.!A..%A...A
  1CD0: 01 66 FF 2D 0D 42 69 0A 2D 0A 42 41 03 0C 48 00  .f.-.Bi.-.BA..H.
  1CE0: 00 07 A5 80 18 FB 56 08 48 03 01 01 00 02 21 01  ......V.H.....!.
  1CF0: 00 02 E9 01 00 3B 05 00 4C 00 00 04 05 00 A8 50  .....;..L......P
  1D00: 98 43 55 10 01 02 05 00 00 4C 04 4C 52 4E 3B 05  .CU......L.LRN;.
  1D10: 00 4C 00 00 03 03 40 01 3D 65 01 00 44 56 06 51  .L....@.=e..DV.Q
  1D20: C8 51 C8 2D A5 00 01 02 02 00 01 3E A5 00 07 45  .Q.-.......>...E
  1D30: 0E 06 56 00 40 02 02 00 01 56 18 00 66 FF 2D 0D  ..V.@....V..f.-.
  1D40: 42 75 0A 03 0D 01 C0 01 03 05 41 80 4C 00 00 3B  Bu........A.L..;
  1D50: 02 41 04 04 00 00 00 2D 0D 42 04 00 2D 05 41 04  .A.....-.B..-.A.
  1D60: 00 00 00 33 0D 01 04 00 3E 0D 01 00 00 49 70 06  ...3....>....Ip.
  1D70: 3E 25 40 00 44 AD 06 3E 25 40 32 49 A3 06 03 25  >%@.D..>%@2I...%
  1D80: 40 1F 3B 05 30 4E 00 00 04 22 00 40 3E 65 40 00  @.;.0N...".@>e@.
  1D90: 44 01 09 3B 05 38 4E 00 00 04 6A 00 40 43 01 09  D..;.8N...j.@C..
  1DA0: 66 FF 2D 0D 42 75 0F 03 0D 40 64 01 43 09 07 66  f.-.Bu...@d.C..f
  1DB0: FF 2D 0D 42 1D 0F 03 0D 40 58 00 43 09 07 66 FF  .-.B....@X.C..f.
  1DC0: 2D 0D 42 D9 10 03 0D 40 04 01 43 09 07 66 FF 2D  -.B....@..C..f.-
  1DD0: 0D 42 DD 11 03 0D 40 14 00 43 09 07 66 FF 2D 0D  .B....@..C..f.-.
  1DE0: 42 35 0C 03 0D 40 E8 02 03 05 41 80 4C 00 00 3B  B5...@....A.L..;
  1DF0: 02 41 04 04 00 00 00 2D 0D 42 04 00 2D 05 41 04  .A.....-.B..-.A.
  1E00: 00 00 00 33 0D 40 04 00 3E 0D 40 00 00 49 10 07  ...3.@..>.@..I..
  1E10: 3D E5 00 0F 49 01 09 03 05 41 00 00 64 00 03 05  =...I....A..d...
  1E20: 40 00 00 22 00 4B A5 00 01 44 5B 07 03 05 41 00  @..".K...D[...A.
  1E30: 00 23 00 03 05 40 00 00 1B 00 3B 05 BC 4D 00 00  .#...@....;..M..
  1E40: 04 02 00 41 3B 05 C4 4D 00 00 04 02 00 40 03 05  ...A;..M.....@..
  1E50: 41 80 00 00 00 4B A5 00 01 44 84 07 03 05 41 00  A....K...D....A.
  1E60: 00 00 00 3B 05 18 4E 00 00 0F 03 41 00 0F 0D 41  ...;..N....A...A
  1E70: 01 02 03 8A 41 41 0F 0D 41 00 08 03 0A 40 41 0F  ....AA..A....@A.
  1E80: 0D 40 20 00 04 0A 00 41 04 1A 09 41 04 0A 0B 40  .@ ....A...A...@
  1E90: 3D 65 01 01 44 E3 07 04 0A 02 41 04 1A 0D 41 04  =e..D.....A...A.
  1EA0: 0A 0F 40 3D 65 01 02 44 E3 07 04 0A 04 41 04 0A  ..@=e..D.....A..
  1EB0: 06 41 04 1A 11 41 04 0A 13 40 04 1A 15 41 04 0A  .A...A...@...A..
  1EC0: 17 40 03 05 40 00 1B B7 00 27 02 40 00 27 05 40  .@..@....'.@.'.@
  1ED0: 64 00 00 00 03 02 01 40 21 02 01 00 21 05 40 01  d......@!...!.@.
  1EE0: 00 00 00 03 8A 00 01 03 02 01 40 21 05 40 F5 28  ..........@!.@.(
  1EF0: 00 00 03 02 41 40 03 02 40 01 03 02 01 41 21 05  ....A@..@....A!.
  1F00: 40 4C 00 00 00 27 05 40 64 00 00 00 2D 02 40 01  @L...'.@d...-.@.
  1F10: 2D 05 40 0C 00 00 00 27 05 40 19 00 00 00 03 05  -.@....'.@......
  1F20: 01 01 40 00 00 3B 05 9C 4E 00 00 04 02 00 01 3B  ..@..;..N......;
  1F30: 05 A4 4E 00 00 04 02 00 40 3B 05 7C 4E 00 00 1B  ..N.....@;.|N...
  1F40: 05 40 14 15 05 40 10 2D 05 40 00 00 00 00 04 02  .@...@.-.@......
  1F50: 00 40 56 00 01 03 1A 01 00 3B 05 B4 4E 00 00 04  .@V......;..N...
  1F60: 02 00 01 21 8A 00 00 27 05 40 C4 09 00 00 03 02  ...!...'.@......
  1F70: 01 40 2D 05 01 01 00 00 00 3E 05 41 00 00 00 00  .@-......>.A....
  1F80: 49 B2 08 33 05 01 01 00 00 00 15 05 01 10 43 E6  I..3..........C.
  1F90: 08 15 05 01 10 03 05 40 C4 09 00 00 33 02 40 41  .......@....3.@A
  1FA0: 21 05 40 0A 00 00 00 27 05 40 C4 09 00 00 15 05  !.@....'.@......
  1FB0: 40 1C 2D 02 01 40 15 05 41 10 27 05 41 C4 09 00  @.-..@..A.'.A...
  1FC0: 00 03 0A 01 40 3B 05 18 4F 00 00 04 02 00 01 56  ....@;..O......V
  1FD0: 00 01 03 29 01 01 3B 05 60 4F 00 00 2E 02 00 01  ...)..;.`O......
  1FE0: 03 99 01 00 03 05 00 80 4C 00 00 02 21 01 00 02  ........L...!...
  1FF0: E9 01 00 3B 02 00 03 03 41 00 03 03 40 01 3E 05  ...;....A...@.>.
  2000: 41 FF FF FF FF 44 43 0A 3E E5 41 00 44 3A 09 3E  A....DC.>.A.D:.>
  2010: E5 41 01 44 3A 09 43 C2 09 3B 02 00 03 03 41 00  .A.D:.C..;....A.
  2020: 5E 05 41 FF FF 0F 00 00 00 90 43 3B 05 00 4C 00  ^.A.......C;..L.
  2030: 00 04 02 00 41 55 10 01 02 05 00 00 4C 04 4C 52  ....AU......L.LR
  2040: 4E 3B 05 00 4C 00 00 03 03 40 01 3D 65 01 00 44  N;..L....@.=e..D
  2050: 83 09 51 C8 51 C8 2D 25 01 01 3E 25 01 07 45 3A  ..Q.Q.-%..>%..E:
  2060: 09 5B 3B 02 00 03 03 41 00 3E E5 41 00 44 AB 09  .[;....A.>.A.D..
  2070: 03 03 41 01 2D 05 41 80 4C 00 00 3B 02 41 04 02  ..A.-.A.L..;.A..
  2080: 00 40 2D 0D 00 08 00 43 14 09 0F 05 41 00 00 80  .@-....C....A...
  2090: 83 09 03 40 01 0F 03 40 02 2D 0D 00 04 00 43 09  ...@...@.-....C.
  20A0: 0A 3E 8D 41 FE FF 49 09 0A 3E 0D 41 64 00 45 F2  .>.A..I..>.Ad.E.
  20B0: 09 27 0D 41 64 00 03 0A 41 40 50 01 33 0D 41 01  .'.Ad...A@P.3.A.
  20C0: 00 3E 0D 41 00 00 49 DB 09 2D 0D 00 04 00 43 14  .>.A..I..-....C.
  20D0: 09 51 0A 33 0D 41 01 00 3E 0D 41 00 00 49 F2 09  .Q.3.A..>.A..I..
  20E0: 2D 0D 00 04 00 43 14 09 3B 05 00 4C 00 00 04 02  -....C..;..L....
  20F0: 00 41 04 02 01 40 02 05 00 00 4C 00 00 55 10 01  .A...@....L..U..
  2100: 52 4E 3D 65 01 00 44 38 0A 51 C8 2D A5 00 01 3E  RN=e..D8.Q.-...>
  2110: A5 00 07 45 17 0A 5B 2D 0D 00 08 00 56 18 00 43  ...E..[-....V..C
  2120: 14 09 3E E5 01 12 49 65 0A 3B 05 3C 4D 00 00 03  ..>...Ie.;.<M...
  2130: 03 41 00 07 25 C9 05 FC 3E 25 41 00 44 65 0A 0D  .A..%...>%A.De..
  2140: 25 C9 05 02 5B 7A 60 09 00 00 14 00 28 00 40 00  %...[z`.....(.@.
  2150: 54 00 68 00 08 80 88 83 7F 0F 00 00 00 80 88 83  T.h.............
  2160: 10 00 00 00 10 05 80 50 E4 00 00 00 11 05 80 50  .......P.......P
  2170: 00 00 00 00 82 05 80 83 01 00 00 00 A1 05 80 83  ................
  2180: F0 00 00 00 18 80 88 83 10 01 00 00 80 80 88 83  ................
  2190: 01 00 00 00 70 80 88 83 01 00 00 00 30 80 88 83  ....p.......0...
  21A0: 03 00 00 00 20 80 88 83 01 00 00 00 08 10 88 83  .... ...........
  21B0: 00 00 00 10 04 10 88 83 10 00 23 00 08 10 88 83  ..........#.....
  21C0: 00 00 1B 10 04 11 88 83 00 00 00 00 00 04 88 83  ................
  21D0: 01 00 00 00 04 00 88 83 00 06 00 00 08 00 08 00  ................
  21E0: F4 FF FF FF 08 20 00 00 04 01 88 83 00 06 00 00  ..... ..........
  21F0: 08 01 08 00 F4 FF FF FF 08 20 00 00 04 02 88 83  ......... ......
  2200: 00 06 00 00 08 02 08 00 F4 FF FF FF 08 20 00 00  ............. ..
  2210: 04 03 88 83 00 06 00 00 08 03 08 00 F4 FF FF FF  ................
  2220: 08 20 00 00 24 30 88 83 03 04 06 00 20 30 88 83  . ..$0...... 0..
  2230: 85 6F 07 29 38 30 88 83 00 00 00 20 40 30 08 00  .o.)80..... @0..
  2240: FE FF EF FF 01 00 00 00 00 30 88 83 01 00 00 00  .........0......
  2250: 00 50 88 83 00 00 00 00 50 50 88 83 01 01 01 01  .P......PP......
  2260: A4 50 08 00 FE FF FF FF 01 00 00 00 14 05 00 00  .P..............
  2270: FE FF FF FF 00 00 00 00 20 05 80 83 EE 02 00 00  ........ .......
  2280: 1C 05 80 83 D0 07 00 00 18 05 80 83 00 00 00 00  ................
  2290: 13 05 80 50 00 00 00 00 14 05 00 00 F9 FF FF FF  ...P............
  22A0: 06 00 00 00 38 70 88 83 00 01 00 00 30 70 08 00  ....8p......0p..
  22B0: FF F0 FF FF 00 04 00 00 30 70 08 00 FF FF FF FD  ........0p......
  22C0: 00 00 00 02 08 70 08 00 BF FF FF FF 40 00 00 00  .....p......@...
  22D0: 14 05 00 00 FE FF FF FF 01 00 00 00 30 70 08 00  ............0p..
  22E0: FE FF FF FF 00 00 00 00 F4 01 FE FF 14 70 88 83  .............p..
  22F0: 02 00 11 00 A8 50 08 00 FF FF FE FF 00 00 00 00  .....P..........
  2300: 88 50 88 83 1F 00 00 00 74 50 88 83 02 1B 00 00  .P......tP......
  2310: FF FF FF FF 08 80 88 83 7F 0F 00 00 00 80 88 83  ................
  2320: 10 00 00 00 18 80 08 00 CF FF FF FF 10 00 00 00  ................
  2330: 24 30 88 83 03 04 06 00 38 30 88 83 00 00 00 20  $0......80..... 
  2340: 00 30 88 83 00 00 00 00 00 06 80 50 02 00 00 00  .0.........P....
  2350: 04 00 08 00 DF FF FF FF 00 00 00 00 04 00 08 00  ................
  2360: FF F7 FF FF 00 00 00 00 04 01 08 00 DF FF FF FF  ................
  2370: 00 00 00 00 04 01 08 00 FF F7 FF FF 00 00 00 00  ................
  2380: 04 02 08 00 DF FF FF FF 00 00 00 00 04 02 08 00  ................
  2390: FF F7 FF FF 00 00 00 00 04 03 08 00 DF FF FF FF  ................
  23A0: 00 00 00 00 04 03 08 00 FF F7 FF FF 00 00 00 00  ................
  23B0: 04 00 08 00 FE FF FF FF 00 00 00 00 04 01 08 00  ................
  23C0: FE FF FF FF 00 00 00 00 04 02 08 00 FE FF FF FF  ................
  23D0: 00 00 00 00 04 03 08 00 FE FF FF FF 00 00 00 00  ................
  23E0: 08 00 08 00 FF FF FF FF 00 20 00 00 08 01 08 00  ......... ......
  23F0: FF FF FF FF 00 20 00 00 08 02 08 00 FF FF FF FF  ..... ..........
  2400: 00 20 00 00 08 03 08 00 FF FF FF FF 00 20 00 00  . ........... ..
  2410: 18 80 08 00 FF FC FF FF 00 01 00 00 04 11 88 83  ................
  2420: 00 00 00 00 04 10 08 00 FF FF 00 FC 00 00 00 00  ................
  2430: 04 80 88 83 00 00 00 00 F4 01 FE FF 18 80 08 00  ................
  2440: FF F7 FF FF 00 08 00 00 01 00 FE FF 04 10 88 83  ................
  2450: 00 00 00 00 08 10 88 83 00 00 00 00 04 11 88 83  ................
  2460: 0B 00 00 00 0A 00 FE FF 18 80 08 00 FF FC FF FF  ................
  2470: 04 02 00 00 0A 00 FE FF 08 00 08 00 FF DF FF FF  ................
  2480: 00 00 00 00 08 01 08 00 FF DF FF FF 00 00 00 00  ................
  2490: 08 02 08 00 FF DF FF FF 00 00 00 00 08 03 08 00  ................
  24A0: FF DF FF FF 00 00 00 00 04 00 88 83 00 06 00 00  ................
  24B0: 04 01 88 83 00 06 00 00 04 02 88 83 00 06 00 00  ................
  24C0: 04 03 88 83 00 06 00 00 03 00 FE FF 04 00 88 83  ................
  24D0: 00 06 00 00 04 00 88 83 00 06 00 00 04 01 88 83  ................
  24E0: 00 06 00 00 04 01 88 83 00 06 00 00 04 02 88 83  ................
  24F0: 00 06 00 00 04 02 88 83 00 06 00 00 04 03 88 83  ................
  2500: 00 06 00 00 04 03 88 83 00 06 00 00 58 30 88 83  ............X0..
  2510: 00 00 00 00 34 30 88 83 00 00 08 00 54 30 88 83  ....40......T0..
  2520: 00 00 00 00 54 30 88 83 01 00 00 00 04 30 88 83  ....T0.......0..
  2530: 00 40 00 00 18 30 88 83 00 00 00 00 14 30 88 83  .@...0.......0..
  2540: 10 00 00 00 1C 30 88 83 00 00 00 00 14 00 FE FF  .....0..........
  2550: 38 30 08 00 FF FF FF EF 00 00 00 10 01 00 FE FF  80..............
  2560: 38 30 08 00 FF FF FF EF 00 00 00 00 01 00 FE FF  80..............
  2570: 38 30 08 00 FF FF FF DF 00 00 00 00 2C 01 FE FF  80..........,...
  2580: 00 30 88 83 01 00 00 00 24 30 08 00 FD FF FF FF  .0......$0......
  2590: 00 00 00 00 05 00 FE FF 24 30 08 00 FE FF FF FF  ........$0......
  25A0: 00 00 00 00 40 00 FE FF 58 30 88 83 00 00 00 00  ....@...X0......
  25B0: 34 30 08 00 FF FF FC FF 00 00 01 00 54 30 08 00  40..........T0..
  25C0: FD FF FF FF 02 00 00 00 05 00 FE FF 24 30 08 00  ............$0..
  25D0: FF FF F9 FC 00 00 00 01 54 30 08 00 FE FF FF FF  ........T0......
  25E0: 00 00 00 00 18 80 08 00 CF FF FF FF 30 00 00 00  ............0...
  25F0: 01 01 80 83 80 00 00 00 FF FF FF FF 08 80 88 83  ................
  2600: 7F 0F 00 00 00 80 88 83 10 00 00 00 50 50 08 00  ............PP..
  2610: FE FF FF FF 00 00 00 00 0A 00 FE FF A4 50 08 00  .............P..
  2620: FE FF FF FF 00 00 00 00 64 00 FE FF 50 50 88 83  ........d...PP..
  2630: 00 00 00 00 64 00 FE FF 00 50 88 83 01 00 00 00  ....d....P......
  2640: 08 80 88 83 53 0F 00 00 00 80 88 83 00 00 00 00  ....S...........
  2650: FF FF FF FF 08 80 88 83 7F 0F 00 00 00 80 88 83  ................
  2660: 13 00 00 00 18 80 08 00 FF FF FF FF 00 01 00 00  ................
  2670: 00 50 88 83 00 00 00 00 50 50 88 83 01 01 01 01  .P......PP......
  2680: A4 50 08 00 FE FF FF FF 01 00 00 00 18 80 08 00  .P..............
  2690: DF FF FF FF 00 00 00 00 24 30 08 00 FF FF FF FC  ........$0......
  26A0: 03 04 06 00 38 30 88 83 00 00 00 20 00 06 80 83  ....80..... ....
  26B0: 02 00 00 00 04 00 08 00 DF FF FF FF 00 00 00 00  ................
  26C0: 04 00 08 00 FF F7 FF FF 00 00 00 00 04 01 08 00  ................
  26D0: DF FF FF FF 00 00 00 00 04 01 08 00 FF F7 FF FF  ................
  26E0: 00 00 00 00 04 02 08 00 DF FF FF FF 00 00 00 00  ................
  26F0: 04 02 08 00 FF F7 FF FF 00 00 00 00 04 03 08 00  ................
  2700: DF FF FF FF 00 00 00 00 04 03 08 00 FF F7 FF FF  ................
  2710: 00 00 00 00 04 00 08 00 FE FF FF FF 00 00 00 00  ................
  2720: 04 01 08 00 FE FF FF FF 00 00 00 00 04 02 08 00  ................
  2730: FE FF FF FF 00 00 00 00 04 03 08 00 FE FF FF FF  ................
  2740: 00 00 00 00 08 00 08 00 FF FF FF FF 00 20 00 00  ............. ..
  2750: 08 01 08 00 FF FF FF FF 00 20 00 00 08 02 08 00  ......... ......
  2760: FF FF FF FF 00 20 00 00 08 03 08 00 FF FF FF FF  ..... ..........
  2770: 00 20 00 00 18 80 08 00 FF FD FF FF 00 00 00 00  . ..............
  2780: 04 11 88 83 00 00 00 00 04 10 88 83 00 00 00 00  ................
  2790: 08 80 88 83 53 0F 00 00 00 80 88 83 00 00 00 00  ....S...........
  27A0: 18 80 08 00 FF F7 FF FF 00 00 00 00 04 80 88 83  ................
  27B0: 01 00 00 00 FF FF FF FF 00 50 08 01 C4 00 00 00  .........P......
  27C0: 28 50 08 01 CC 00 00 00 40 50 08 01 D4 00 00 00  (P......@P......
  27D0: 58 50 08 01 DC 00 00 00 5C 50 08 01 E4 00 00 00  XP......\P......
  27E0: 50 50 08 01 EC 00 00 00 04 80 08 01 F4 00 00 00  PP..............
  27F0: A4 50 08 01 FC 00 00 00 04 80 88 83 00 00 00 00  .P..............
  2800: 01 00 FE FF 00 50 88 83 01 00 00 00 28 50 08 00  .....P......(P..
  2810: FC FF FF FF 00 00 00 00 40 50 88 83 00 00 00 00  ........@P......
  2820: 58 50 88 83 01 00 00 00 5C 50 88 83 00 00 07 00  XP......\P......
  2830: 50 50 08 00 FE FF FF FF 00 00 00 00 0A 00 FE FF  PP..............
  2840: A4 50 08 00 FE FF FF FF 00 00 00 00 F4 01 FE FF  .P..............
  2850: 50 50 88 83 00 00 00 00 40 50 88 83 E6 01 00 00  PP......@P......
  2860: 14 00 FE FF 5C 50 88 83 00 01 07 00 0A 00 FE FF  ....\P..........
  2870: 60 50 08 01 BC 00 00 00 00 50 88 83 00 00 00 00  `P.......P......
  2880: 28 50 88 83 00 00 00 00 40 50 88 83 00 00 00 00  (P......@P......
  2890: 58 50 88 83 00 00 00 00 5C 50 88 83 00 00 00 00  XP......\P......
  28A0: 50 50 88 83 00 00 00 00 04 80 88 83 00 00 00 00  PP..............
  28B0: A4 50 88 83 00 00 00 00 FF FF FF FF 30 70 08 00  .P..........0p..
  28C0: FE FF FF FF 00 00 00 00 F4 01 FE FF FF FF FF FF  ................
  28D0: 00 05 3D 00 00 1F 01 00 00 BA 00 00 00 BB 08 00  ..=.............
  28E0: 00 B1 4B 00 01 73 69 00 01 9F 26 00 00 19 33 00  ..K..si...&...3.
  28F0: 00 89 39 00 01 9E 05 00 01 CB 80 00 00 16 44 00  ..9...........D.
  2900: 00 F1 20 00 00 DC 00 00 00 DD 00 00 FF FF FF FF  .. .............
  2910: 00 05 3D 00 00 1F 03 00 00 BA 00 00 00 BB 08 00  ..=.............
  2920: 00 B1 4B 00 01 73 69 00 01 9F 24 00 00 19 33 00  ..K..si...$...3.
  2930: 00 89 39 00 00 F8 42 00 00 F9 01 00 00 FA 23 00  ..9...B.......#.
  2940: 00 FB 45 00 00 FC 67 00 00 FD 89 00 00 FE AB 00  ..E...g.........
  2950: 00 1D 25 00 01 C3 07 00 01 C2 5A 00 01 C4 00 00  ..%.......Z.....
  2960: 01 C0 07 00 01 C1 5A 00 01 B1 00 00 01 BF 7D 00  ......Z.......}.
  2970: 01 B5 63 00 01 CB 80 00 01 B3 00 00 01 B2 00 00  ..c.............
  2980: 00 9F 10 00 01 83 14 00 00 A7 C2 00 01 71 12 00  .............q..
  2990: 01 82 5D 00 01 89 24 00 01 BE 01 00 00 8A 53 00  ..]...$.......S.
  29A0: 00 0A 01 00 01 D4 10 00 00 F3 40 00 00 F4 00 00  ..........@.....
  29B0: 01 B4 00 00 00 DC 00 00 00 DD 00 00 01 91 20 00  .............. .
  29C0: 00 D1 06 00 00 D6 01 00 FF FF FF FF 00 05 3D 00  ..............=.
  29D0: 00 1F 03 00 00 BA 00 00 00 BB 08 00 00 B1 4B 00  ..............K.
  29E0: 01 73 69 00 01 9F 24 00 00 19 33 00 00 89 39 00  .si...$...3...9.
  29F0: 00 F8 42 00 00 F9 01 00 00 FA 23 00 00 FB 45 00  ..B.......#...E.
  2A00: 00 FC 67 00 00 FD 89 00 00 FE AB 00 00 1D 25 00  ..g...........%.
  2A10: 01 C3 07 00 01 C2 5A 00 01 C4 00 00 01 C0 07 00  ......Z.........
  2A20: 01 C1 5A 00 01 B1 00 00 01 BF 7D 00 01 B5 63 00  ..Z.......}...c.
  2A30: 01 CB 80 00 01 B3 00 00 01 B2 00 00 00 9F 10 00  ................
  2A40: 01 83 14 00 00 A7 C2 00 01 71 12 00 01 82 5D 00  .........q....].
  2A50: 01 89 28 00 01 BE 01 00 00 8A 53 00 00 0A 01 00  ..(.......S.....
  2A60: 01 D4 10 00 00 F3 40 00 00 F4 00 00 01 B4 00 00  ......@.........
  2A70: 00 DC 00 00 00 DD 00 00 01 91 20 00 00 D1 06 00  .......... .....
  2A80: 00 D6 01 00 01 D2 08 00 01 D3 80 00 FF FF FF FF  ................
  2A90: 1E 21 00 00 1E 22 00 03 20 21 00 26 20 22 00 29  .!...".. !.& ".)
  2AA0: 21 21 00 2C 21 22 00 2F DC 00 01 01 04 04 37 00  !!.,!"./......7.
  2AB0: 00 03 00 41 C4 00 1B 05 41 08 03 E0 41 C9 00 56  ...A....A...A..V
  2AC0: 00 40 03 09 40 00 15 05 40 05 2D 02 40 41 02 3A  .@..@...@.-.@A.:
  2AD0: 00 40 15 05 40 08 3B 05 00 17 00 00 57 00 00 66  .@..@.;.....W..f
  2AE0: 0B 03 05 00 00 17 00 00 1B 05 00 08 2D 02 41 00  ............-.A.
  2AF0: 03 04 00 04 00 15 05 00 02 2D 02 41 00 01 3A 81  .........-.A..:.
  2B00: 21 41 15 05 41 08 01 02 80 21 41 56 00 00 03 19  !A..A....!AV....
  2B10: 00 00 15 05 00 0D 51 C8 4A E5 A0 21 80 49 6E 00  ......Q.J..!.In.
  2B20: 3E 05 00 00 00 00 00 44 CB 00 03 05 41 00 00 10  >......D....A...
  2B30: 00 3E 02 00 41 46 94 00 03 02 41 00 33 02 00 41  .>..AF....A.3..A
  2B40: 01 21 83 21 00 01 02 82 21 40 1B 05 40 08 03 E1  .!.!....!@..@...
  2B50: 40 00 1B 05 41 08 2D 02 40 41 15 05 41 08 02 3A  @...A.-.@A..A..:
  2B60: 00 40 15 05 40 08 0F 8D 41 20 D0 01 02 84 21 41  .@..@...A ....!A
  2B70: 43 6E 00 01 05 12 00 00 00 01 00 01 05 13 00 00  Cn..............
  2B80: 00 01 00 5B 39 02 01 01 00 08 37 00 00 0D 25 34  ...[9.....7...%4
  2B90: 18 08 07 25 07 19 FD 56 00 41 03 39 41 01 09 25  ...%...V.A.9A..%
  2BA0: 41 0F 03 0A 40 42 66 FF 2D 0D 42 19 02 15 25 41  A...@Bf.-.B...%A
  2BB0: 02 2D 0A 42 41 03 0C 41 00 00 01 02 00 00 41 07  .-.BA..A......A.
  2BC0: A5 01 00 FE 54 08 01 00 01 0C 3B 18 02 00 03 0A  ....T.....;.....
  2BD0: 42 40 03 05 40 A8 61 00 00 56 00 41 03 21 41 00  B@..@.a..V.A.!A.
  2BE0: 27 02 40 41 01 8A 37 18 40 01 25 37 18 02 01 05  '.@A..7.@.%7....
  2BF0: 38 18 00 00 00 30 0D 25 35 18 02 01 A9 39 18 01  8....0.%5....9..
  2C00: 4B 25 01 01 49 87 00 54 30 39 18 01 0D 39 18 00  K%..I..T09...9..
  2C10: 31 2B A5 39 18 01 4B 25 01 02 44 9E 00 2B A5 39  1+.9..K%..D..+.9
  2C20: 18 01 56 00 41 03 71 41 01 0F E5 41 80 01 02 3A  ..V.A.qA...A...:
  2C30: 18 41 03 69 41 00 2D A5 41 01 01 02 3A 18 41 4B  .A.iA.-.A...:.AK
  2C40: 25 01 02 44 CE 00 56 28 41 2D A5 41 01 01 02 3A  %..D..V(A-.A...:
  2C50: 18 41 4B 25 01 01 44 EF 00 03 71 41 00 2D A5 41  .AK%..D...qA.-.A
  2C60: 01 01 02 3A 18 41 03 79 41 00 2D A5 41 01 01 02  ...:.A.yA.-.A...
  2C70: 3A 18 41 0D 25 34 18 01 03 A5 41 01 43 C2 01 03  :.A.%4....A.C...
  2C80: 29 40 01 03 65 40 01 03 99 40 00 56 00 41 03 71  )@..e@...@.V.A.q
  2C90: 41 01 0F 65 41 01 0F E5 41 80 01 02 3A 18 41 01  A..eA...A...:.A.
  2CA0: A5 39 18 04 3D 65 01 04 47 30 01 01 0D 39 18 01  .9..=e..G0...9..
  2CB0: 13 43 5F 01 01 A2 39 18 40 01 0D 39 18 01 31 43  .C_...9.@..9..1C
  2CC0: 5F 01 07 65 39 18 EF 01 A5 39 18 03 3E 25 40 04  _..e9....9..>%@.
  2CD0: 46 5F 01 01 A2 39 18 40 31 A5 39 18 01 5C 65 39  F_...9.@1.9..\e9
  2CE0: 18 FD 20 0D 25 34 18 01 03 A5 41 00 43 C2 01 03  .. .%4....A.C...
  2CF0: 05 41 01 00 00 80 03 AA 41 40 01 02 3A 18 41 3D  .A......A@..:.A=
  2D00: 65 01 01 49 8A 01 02 A8 00 3A 18 43 01 02 56 00  e..I.....:.C..V.
  2D10: 41 03 1A 41 40 3B 02 41 03 28 41 3A 18 03 68 41  A..A@;.A.(A:..hA
  2D20: 3A 18 03 A8 41 3A 18 03 E8 41 3A 18 04 02 00 41  :...A:...A:....A
  2D30: 56 28 40 2D 8D 40 04 00 3E 25 40 04 47 01 02 33  V(@-.@..>%@.G..3
  2D40: 25 40 04 43 3E 01 02 65 00 02 03 0D 41 64 00 33  %@.C>..e....Ad.3
  2D50: 0D 41 01 00 3E 0D 41 00 00 44 01 02 51 64 4A 25  .A..>.A..D..QdJ%
  2D60: 36 18 10 44 CB 01 4A 65 36 18 06 49 01 02 02 65  6..D..Je6..I...e
  2D70: 00 01 0D 25 35 18 02 3E A5 41 00 44 6B 01 4B 25  ...%5..>.A.Dk.K%
  2D80: 01 01 44 FB 00 0D 25 35 18 02 01 25 34 18 02 51  ..D...%5...%4..Q
  2D90: 01 54 00 34 18 54 00 3B 18 5B 7A 20 00 4C 19 01  .T.4.T.;.[z .L..
  2DA0: 00 50 19 03 02 54 19 05 04 58 19 42 41 5C 19 49  .P...T...X.BA\.I
  2DB0: 48 60 19 4B 4A 74 19 29 28 70 19 4D 4C 5F 00 02  H`.KJt.)(p.ML_..
  2DC0: 02 00 04 37 00 00 3D 65 00 01 44 54 00 55 30 00  ...7..=e..DT.U0.
  2DD0: 3D 25 00 06 46 50 00 32 25 00 01 20 25 00 03 56  =%..FP.2%.. %..V
  2DE0: 08 48 03 22 48 40 0D A5 08 18 01 02 A0 00 07 18  .H."H@..........
  2DF0: 08 A5 00 03 4A 25 07 18 02 44 4A 00 5C 0D 08 18  ....J%...DJ.\...
  2E00: FF FE 01 00 43 50 00 0D 0D 08 18 01 01 3A 00 00  ....CP.......:..
  2E10: 5B 0D 65 CF 05 08 0D 65 13 14 01 5B D3 00 01 04  [.e....e...[....
  2E20: 00 08 08 05 00 FF FF FF 00 66 1E 03 04 46 08 00  .........f...F..
  2E30: 03 05 40 38 18 00 00 3D 05 00 00 00 00 00 44 5D  ..@8...=......D]
  2E40: 00 21 05 46 64 00 00 00 2D 01 40 00 33 05 40 01  .!.Fd...-.@.3.@.
  2E50: 00 00 00 27 01 40 00 3E 05 40 38 18 00 00 45 4C  ...'.@.>.@8...EL
  2E60: 00 03 05 40 38 18 00 00 3E 05 40 C8 00 00 00 46  ...@8...>.@....F
  2E70: 5D 00 03 05 40 C8 00 00 00 66 FF 2D 0D 42 BB 00  ]...@....f.-.B..
  2E80: 3E 0C 40 02 00 47 74 00 2D 0D 42 08 00 43 64 00  >.@..Gt.-.B..Cd.
  2E90: 33 0C 40 00 00 2D 0C 40 06 00 33 0D 40 01 00 27  3.@..-.@..3.@..'
  2EA0: 0C 40 06 00 2D 0C 40 04 00 02 E2 00 40 33 0C 40  .@..-.@.....@3.@
  2EB0: 04 00 21 0C 40 06 00 2D 0C 40 00 00 03 02 41 40  ..!.@..-.@....A@
  2EC0: 21 05 46 64 00 00 00 27 02 40 41 02 0A 00 40 02  !.Fd...'.@A...@.
  2ED0: B2 00 40 5B 7A 18 00 C8 00 40 06 08 00 19 00 40  ..@[z....@.....@
  2EE0: 06 80 0C 40 00 32 00 80 0C 38 18 60 00 64 00 74  ...@.2...8.`.d.t
  2EF0: 00 01 03 00 08 37 00 00 3A 10 00 4B A5 00 0C 44  .....7..:..K...D
  2F00: 20 00 3A 20 00 4B A5 00 04 49 20 00 3A 00 00 3D   .: .K...I .:..=
  2F10: E5 00 01 44 3D 00 07 65 04 17 EF 3C 0D 05 17 00  ...D=..e...<....
  2F20: 00 49 70 00 07 A5 05 17 FC 43 70 00 4A 65 04 17  .Ip......Cp.Je..
  2F30: 10 49 70 00 07 25 07 17 F7 5C A5 05 17 FC 01 4B  .Ip..%...\.....K
  2F40: A5 00 01 49 5B 00 0E 65 01 20 0E 65 01 10 01 09  ...I[..e. .e....
  2F50: 03 17 00 01 01 04 17 01 50 01 0D 25 07 17 08 3A  ........P..%...:
  2F60: 00 00 5B 1C 00 01 01 00 00 37 00 00 07 A5 9C 01  ..[......7......
  2F70: FC 0D 65 9C 01 80 01 05 C5 01 20 D3 20 1D 5B BD  ..e....... . .[.
  2F80: 00 02 01 00 04 03 09 40 00 02 0D 00 00 FF 66 16  .......@......f.
  2F90: 03 0A 41 40 1B 0D 41 0C 3E 25 41 02 44 2F 00 3E  ..A@..A.>%A.D/.>
  2FA0: 25 41 03 49 B9 00 2D 0C 42 06 00 43 34 00 2D 0C  %A.I..-.B..C4.-.
  2FB0: 42 0A 00 03 24 41 00 00 3E 25 41 00 44 B9 00 3E  B...$A..>%A.D..>
  2FC0: 0C 40 04 00 44 54 00 2D 0D 42 08 00 33 25 41 01  .@..DT.-.B..3%A.
  2FD0: 43 39 00 03 0C 40 06 00 03 0C 41 08 00 66 16 2D  C9...@....A..f.-
  2FE0: 0A 40 42 3E 0D 41 00 00 44 A7 00 2D 0A 42 41 56  .@B>.A..D..-.BAV
  2FF0: 00 41 03 24 41 00 00 03 A4 41 01 00 3E 25 41 FF  .A.$A....A..>%A.
  3000: 44 A7 00 3E 25 41 01 49 90 00 02 24 00 02 00 3E  D..>%A.I...$...>
  3010: 25 41 02 49 A0 00 02 64 00 02 00 32 65 00 01 2D  %A.I...d...2e..-
  3020: 1A 42 41 43 73 00 03 0A 42 40 03 0C 41 01 00 3E  .BACs...B@..A..>
  3030: 0D 41 00 00 44 B9 00 5B 56 08 42 5B 5A 03 01 01  .A..D..[V.B[Z...
  3040: 04 00 37 00 00 66 06 03 24 00 42 00 3E 25 00 02  ..7..f..$.B.>%..
  3050: 45 16 03 02 0D 00 00 FF 03 0D 40 14 31 66 16 2D  E.........@.1f.-
  3060: 0C 42 06 00 03 24 41 00 00 3E 25 41 00 44 AC 00  .B...$A..>%A.D..
  3070: 3E 0C 40 04 00 44 48 00 2D 0D 42 08 00 33 25 41  >.@..DH.-.B..3%A
  3080: 01 43 2D 00 03 0C 40 06 00 03 0C 41 08 00 66 16  .C-...@....A..f.
  3090: 2D 0A 40 42 3E 0D 41 00 00 44 9B 00 2D 0A 42 41  -.@B>.A..D..-.BA
  30A0: 56 00 41 03 24 41 00 00 03 A4 41 01 00 3E 25 41  V.A.$A....A..>%A
  30B0: FF 44 9B 00 3E 25 41 01 49 84 00 02 24 00 02 00  .D..>%A.I...$...
  30C0: 3E 25 41 02 49 94 00 02 64 00 02 00 32 65 00 01  >%A.I...d...2e..
  30D0: 2D 1A 42 41 43 67 00 03 0A 42 40 03 0C 41 01 00  -.BACg...B@..A..
  30E0: 3E 0D 41 00 00 49 B0 00 56 08 42 5B 42 22 00 63  >.A..I..V.B[B".c
  30F0: 02 BA 00 5A 5A 5B 66 FF 2D 0D 42 1A 03 03 05 41  ...ZZ[f.-.B....A
  3100: 80 4C 00 00 3B 02 41 04 04 00 00 00 2D 0D 42 04  .L..;.A.....-.B.
  3110: 00 2D 05 41 04 00 00 00 3F 05 00 FF FF FF FF 49  .-.A....?......I
  3120: C8 00 66 06 03 24 41 34 00 15 25 41 02 3B 05 80  ..f..$A4..%A.;..
  3130: 4C 00 00 04 62 00 41 56 00 41 03 24 41 35 00 3B  L...b.AV.A.$A5.;
  3140: 05 84 4C 00 00 04 62 00 41 56 00 41 03 24 41 39  ..L...b.AV.A.$A9
  3150: 00 15 0D 41 02 3B 05 88 4C 00 00 04 62 00 41 56  ...A.;..L...b.AV
  3160: 00 41 03 24 41 3A 00 15 0D 41 02 3B 05 8C 4C 00  .A.$A:...A.;..L.
  3170: 00 04 62 00 41 56 00 41 03 24 41 36 00 3B 05 90  ..b.AV.A.$A6.;..
  3180: 4C 00 00 04 62 00 41 03 24 41 37 00 15 25 41 02  L...b.A.$A7..%A.
  3190: 3B 05 94 4C 00 00 04 62 00 41 56 00 41 03 24 41  ;..L...b.AV.A.$A
  31A0: 38 00 3B 05 98 4C 00 00 04 62 00 41 56 00 41 0F  8.;..L...b.AV.A.
  31B0: 25 41 08 66 06 03 E4 41 28 00 4C E5 41 01 44 89  %A.f...A(.L.A.D.
  31C0: 01 0F 25 41 80 4C E5 41 02 49 94 01 0F 25 41 04  ..%A.L.A.I...%A.
  31D0: 4C E5 41 20 44 9F 01 0F 25 41 01 3B 05 A4 4C 00  L.A D...%A.;..L.
  31E0: 00 04 62 00 41 02 05 01 06 00 00 00 56 00 41 66  ..b.A.......V.Af
  31F0: 1A 03 0C 41 00 00 2D 0A 41 42 2D 0D 42 04 00 3D  ...A..-.AB-.B..=
  3200: 24 01 08 00 44 DE 01 2D 0D 42 0C 00 3E 0A 42 41  $...D..-.B..>.BA
  3210: 49 C3 01 03 25 41 00 43 A6 02 03 8C 41 04 00 3E  I...%A.C....A..>
  3220: 8D 41 00 00 44 D7 01 03 25 41 00 3E 8D 41 17 00  .A..D...%A.>.A..
  3230: 45 5B 02 03 25 41 01 3E 8D 41 47 00 45 5B 02 03  E[..%A.>.AG.E[..
  3240: 25 41 02 3E 8D 41 7C 00 45 5B 02 03 25 41 03 3E  %A.>.A|.E[..%A.>
  3250: 8D 41 AC 00 45 5B 02 03 25 41 04 3E 8D 41 D3 00  .A..E[..%A.>.A..
  3260: 45 5B 02 03 25 41 05 3E 8D 41 10 01 45 5B 02 03  E[..%A.>.A..E[..
  3270: 25 41 06 3E 8D 41 4B 01 45 5B 02 03 25 41 07 3E  %A.>.AK.E[..%A.>
  3280: 8D 41 71 01 45 5B 02 03 25 41 08 3E 8D 41 AC 01  .Aq.E[..%A.>.A..
  3290: 45 5B 02 03 25 41 09 3B 05 A0 4C 00 00 04 62 00  E[..%A.;..L...b.
  32A0: 41 03 8C 41 06 00 03 25 41 00 3E 8D 41 AB 09 45  A..A...%A.>.A..E
  32B0: 92 02 03 25 41 20 3E 8D 41 36 10 45 92 02 03 25  ...%A >.A6.E...%
  32C0: 41 40 3E 8D 41 A8 16 45 92 02 03 25 41 60 0F 25  A@>.A..E...%A`.%
  32D0: 41 80 03 A4 41 09 00 4C A5 41 01 49 A6 02 0F 25  A...A..L.A.I...%
  32E0: 41 10 3B 05 9C 4C 00 00 04 62 00 41 03 05 00 80  A.;..L...b.A....
  32F0: 4C 00 00 02 21 01 00 02 E9 01 00 56 00 41 03 0A  L...!......V.A..
  3300: 41 00 3B 02 41 03 03 41 00 3E 05 41 FF FF FF FF  A.;.A..A.>.A....
  3310: 44 16 03 3B 05 00 4C 00 00 04 05 01 F0 03 80 61  D..;..L........a
  3320: 04 02 02 41 02 05 00 04 4C 00 00 55 10 01 52 4E  ...A....L..U..RN
  3330: 3D 65 01 00 44 0B 03 51 C8 51 C8 2D A5 00 01 3E  =e..D..Q.Q.-...>
  3340: A5 00 07 45 BF 02 5B 2D 0D 00 04 00 56 18 00 43  ...E..[-....V..C
  3350: BF 02 5B 7A 40 00 01 1E 00 00 02 5A 00 00 03 00  ..[z@......Z....
  3360: 00 00 04 00 00 00 05 5A 00 00 06 1E 00 00 07 7D  .......Z.......}
  3370: 00 00 08 20 00 00 09 01 00 00 0A 0C 00 00 0B 00  ... ............
  3380: 00 00 0C 06 00 00 0E 38 00 00 10 00 00 00 0D 01  .......8........
  3390: 00 00 FF FF FF FF 52 0A 01 05 00 08 37 00 00 03  ......R.....7...
  33A0: 01 46 02 56 18 46 66 FF 2D 0D 42 86 08 56 00 40  .F.V.Ff.-.B..V.@
  33B0: 20 A5 00 18 2D 0A 42 40 03 8A 46 42 42 39 00 63   ...-.B@..FBB9.c
  33C0: 07 68 06 63 01 52 00 63 00 63 05 63 0B 93 06 63  .h.c.R.c.c.c...c
  33D0: 03 73 07 63 02 9D 07 63 04 D9 07 63 0C 69 08 63  .s.c...c...c.i.c
  33E0: 0D 7C 08 5A 5A 43 64 06 03 1A 42 46 03 0C 48 10  .|.ZZCd...BF..H.
  33F0: 00 4A 25 86 19 01 49 64 06 56 08 48 02 05 02 23  .J%...Id.V.H...#
  3400: 00 00 00 02 A4 02 17 00 52 13 03 39 41 01 09 25  ........R..9A..%
  3410: 41 0C 02 A5 02 04 3E 25 41 08 44 96 00 02 A5 02  A.....>%A.D.....
  3420: 01 3E 25 41 00 44 96 00 02 A5 02 06 03 24 41 17  .>%A.D.......$A.
  3430: 00 09 25 41 FE 3D A2 02 41 44 A8 00 52 13 02 05  ..%A.=..AD..R...
  3440: 02 18 06 00 0F 3D 0D 00 F0 D2 45 BB 00 0E E5 02  .....=....E.....
  3450: 80 02 A4 02 17 00 52 13 3D 25 01 04 47 CF 00 68  ......R.=%..G..h
  3460: A5 02 01 52 13 02 31 02 00 52 14 01 62 50 1C 46  ...R..1..R..bP.F
  3470: 01 B1 50 1C 01 03 39 41 01 09 25 41 70 3E 25 41  ..P...9A..%Ap>%A
  3480: 00 44 F7 00 33 25 41 10 01 E2 50 1C 41 3D A5 01  .D..3%A...P.A=..
  3490: 05 44 1A 01 3D A5 01 00 44 1A 01 3D 25 01 04 47  .D..=...D..=%..G
  34A0: 11 01 0D A5 00 1C 01 01 0D 8D 1C 0F 01 43 3C 01  .............C<.
  34B0: 02 A5 01 00 0E E5 01 02 03 21 43 01 03 02 40 44  .........!C...@D
  34C0: 33 25 40 01 32 25 01 01 01 21 C2 1C 01 01 0A 8D  3%@.2%...!......
  34D0: 1C 40 4A 25 51 1C 01 44 50 01 03 1A 42 46 03 0C  .@J%Q..DP...BF..
  34E0: 48 10 00 43 F0 04 03 1A 42 46 03 0C 48 10 00 56  H..C....BF..H..V
  34F0: 00 40 03 24 40 16 00 66 1E 2D 0D 42 88 01 21 0D  .@.$@..f.-.B..!.
  3500: 40 10 00 2D 0A 42 40 03 24 41 0A 00 03 24 40 0B  @..-.B@.$A...$@.
  3510: 00 3E 25 41 00 44 A0 01 03 62 41 41 03 8A 41 41  .>%A.D...bAA..AA
  3520: 1B 3D 41 06 1B 35 41 04 1B 2D 41 02 09 05 41 03  .=A..5A..-A...A.
  3530: 03 03 03 43 AE 01 03 1A 42 46 03 04 41 0C 00 03  ...C....BF..A...
  3540: 24 40 14 00 0D 25 8A 19 01 01 02 8E 19 41 15 25  $@...%.......A.%
  3550: 40 04 5C 62 8D 19 0F 40 07 A5 8D 19 8C 3E 25 40  @.\b...@.....>%@
  3560: 00 44 D6 01 0D 65 87 19 20 43 DB 01 07 65 87 19  .D...e.. C...e..
  3570: DF 3A 00 00 03 1A 42 46 01 04 38 00 00 00 37 03  .:....BF..8...7.
  3580: 00 3D A5 01 00 49 3E 02 66 FF 2D 0D 42 90 09 2D  .=...I>.f.-.B..-
  3590: 0D 42 06 00 37 03 00 4B A5 00 01 49 23 02 01 0C  .B..7..K...I#...
  35A0: 06 60 01 00 01 0C 86 60 03 00 01 0C 06 61 05 00  .`.....`.....a..
  35B0: 01 0C 86 61 07 00 43 B6 02 01 0C 06 62 01 00 01  ...a..C.....b...
  35C0: 0C 86 62 03 00 01 0C 06 63 05 00 01 0C 86 63 07  ..b.....c.....c.
  35D0: 00 43 B6 02 66 FF 2D 0D 42 2E 09 03 0C 41 00 00  .C..f.-.B....A..
  35E0: 03 31 43 00 03 E2 41 44 4C E4 41 05 00 44 6A 02  .1C...ADL.A..Dj.
  35F0: 3D A4 01 04 00 49 6A 02 3D 0C 00 02 00 47 71 02  =....Ij.=....Gq.
  3600: 2D 0A 42 41 43 4A 02 4B A5 00 01 44 7F 02 3D 25  -.BACJ.K...D..=%
  3610: 01 04 47 9E 02 01 0C 06 60 06 00 01 0C 86 60 08  ..G.....`.....`.
  3620: 00 01 0C 06 61 0A 00 01 0C 86 61 0C 00 3D 25 01  ....a.....a..=%.
  3630: 04 47 B6 02 01 0C 06 62 06 00 01 0C 86 62 08 00  .G.....b.....b..
  3640: 01 0C 06 63 0A 00 01 0C 86 63 0C 00 56 08 41 3D  ...c.....c..V.A=
  3650: 25 01 04 47 C5 02 03 0D 41 80 01 5C E2 05 60 7F  %..G....A..\..`.
  3660: 41 5C E2 85 60 7F 41 5C E2 05 61 7F 41 5C E2 85  A\..`.A\..a.A\..
  3670: 61 7F 41 5C E2 05 62 7F 41 5C E2 85 62 7F 41 5C  a.A\..b.A\..b.A\
  3680: E2 05 63 7F 41 5C E2 85 63 7F 41 37 00 00 03 1A  ..c.A\..c.A7....
  3690: 42 46 01 04 38 00 04 00 5C AA 39 00 FE 41 03 1A  BF..8...\.9..A..
  36A0: 42 46 56 08 48 08 E5 01 FE 4B E5 01 02 44 35 03  BFV.H....K...D5.
  36B0: 03 25 41 02 3D A5 01 00 44 29 03 03 25 41 01 4A  .%A.=...D)..%A.J
  36C0: 22 47 18 41 44 35 03 0E E5 01 01 03 1A 42 46 03  "G.AD5.......BF.
  36D0: 64 41 15 00 66 FF 2D 0D 42 16 09 56 00 40 03 39  dA..f.-.B..V.@.9
  36E0: 40 01 09 25 40 0C 15 25 40 01 2D 0A 42 40 03 0C  @..%@..%@.-.B@..
  36F0: 48 04 00 03 24 41 06 00 03 39 40 01 09 25 40 03  H...$A...9@..%@.
  3700: 3E 25 40 03 44 80 03 0F 62 41 41 4C 25 40 02 44  >%@.D...bAAL%@.D
  3710: 80 03 03 62 41 41 01 2A 06 17 41 3A 00 00 4B E5  ...bAA.*..A:..K.
  3720: 01 01 49 E0 03 01 04 38 00 00 00 03 24 41 07 00  ..I....8....$A..
  3730: 66 FF 2D 0D 42 60 09 3D A5 01 00 49 AD 03 2D 0D  f.-.B`.=...I..-.
  3740: 42 24 00 03 0C 40 02 00 3D 0C 00 00 00 47 C2 03  B$...@..=....G..
  3750: 2D 0D 42 04 00 43 AD 03 0F 62 40 41 37 03 00 01  -.B..C...b@A7...
  3760: 0A 05 20 40 0D 25 08 20 01 07 25 08 20 FE 37 00  .. @.%. ..%. .7.
  3770: 00 03 00 40 38 00 37 00 00 03 1A 42 46 01 04 38  ...@8.7....BF..8
  3780: 00 08 00 3D A5 01 00 49 04 04 3D 0D 00 F0 D2 45  ...=...I..=....E
  3790: 04 04 0D 25 39 00 50 43 09 04 07 25 39 00 AF 56  ...%9.PC...%9..V
  37A0: 00 41 4B E5 01 01 49 17 04 0F E5 41 10 4B E5 01  .AK...I....A.K..
  37B0: 04 49 29 04 4B E5 01 08 49 29 04 0F E5 41 02 3D  .I).K...I)...A.=
  37C0: 25 01 04 47 34 04 0F A5 41 10 01 04 38 00 00 00  %..G4...A...8...
  37D0: 37 03 00 3D 25 01 04 46 4B 04 4B A5 00 01 49 57  7..=%..FK.K...IW
  37E0: 04 01 02 09 00 41 3D 25 01 04 47 5C 04 01 02 0A  .....A=%..G\....
  37F0: 00 41 37 00 00 03 1A 42 46 03 0C 48 10 00 4B E5  .A7....BF..H..K.
  3800: 01 02 49 77 04 07 25 87 19 FC 43 7D 04 5C 25 87  ..Iw..%...C}.\%.
  3810: 19 FC 02 0D 25 86 19 01 3A 00 00 01 04 38 00 08  ....%...:....8..
  3820: 00 4A 25 39 00 04 44 8B 04 4B E5 01 01 49 C7 04  .J%9..D..K...I..
  3830: 01 02 38 00 40 37 03 00 07 E5 02 20 F7 0D 25 08  ..8.@7..... ..%.
  3840: 20 01 07 25 08 20 FE 0D E5 02 20 08 0D 25 08 20   ..%. .... ..%. 
  3850: 01 07 25 08 20 FE 51 FA 51 FA 37 00 00 56 08 48  ..%. .Q.Q.7..V.H
  3860: 03 31 48 00 0D 25 60 01 01 02 31 02 00 52 14 0D  .1H..%`...1..R..
  3870: 25 51 1C 01 51 0A 03 1A 42 46 03 0C 48 10 00 0D  %Q..Q...BF..H...
  3880: 25 8D 19 01 51 0A 0D 65 8A 19 10 3A 00 00 03 1A  %...Q..e...:....
  3890: 42 46 02 05 02 17 01 00 0F 02 A4 02 17 00 52 13  BF............R.
  38A0: 3D 25 01 04 47 17 05 68 A5 02 01 52 13 02 05 02  =%..G..h...R....
  38B0: 22 00 00 00 02 A4 02 17 00 52 13 02 05 02 22 00  "........R....".
  38C0: 00 00 03 39 41 01 09 25 41 0C 02 A5 02 04 3E 25  ...9A..%A.....>%
  38D0: 41 08 44 4E 05 02 A5 02 01 3E 25 41 00 44 4E 05  A.DN.....>%A.DN.
  38E0: 02 A5 02 06 03 24 41 17 00 09 25 41 FE 3D A2 02  .....$A...%A.=..
  38F0: 41 44 64 06 52 13 43 64 06 02 31 02 00 52 14 4A  ADd.R.Cd..1..R.J
  3900: 25 51 1C 01 44 64 06 3C A5 50 1C 02 44 81 05 3C  %Q..Dd.<.P..D..<
  3910: A5 50 1C 03 49 8A 05 54 00 51 1C 50 02 43 AB 05  .P..I..T.Q.P.C..
  3920: 03 31 43 00 4A 62 50 1C 44 44 AB 05 54 08 C3 1C  .1C.JbP.DD..T...
  3930: 51 C8 0D 25 C4 1C 01 51 32 54 20 C0 1C 54 20 D1  Q..%...Q2T ..T .
  3940: 1C 56 08 48 03 1A 42 46 01 04 38 00 08 00 37 03  .V.H..BF..8...7.
  3950: 00 03 E0 40 14 80 07 25 14 80 C3 37 00 00 03 0C  ...@...%...7....
  3960: 48 10 00 07 65 8A 19 EF 02 31 02 00 52 14 07 25  H...e....1..R..%
  3970: 51 1C FE 54 28 50 1C 54 00 8D 1C 56 08 48 03 31  Q..T(P.T...V.H.1
  3980: 48 00 07 25 60 01 FE 03 1A 42 46 03 0C 48 10 00  H..%`....BF..H..
  3990: 07 25 86 19 FE 3A 00 00 01 04 38 00 08 00 4A 25  .%...:....8...J%
  39A0: 39 00 01 44 08 06 37 03 00 01 3A 14 80 40 37 00  9..D..7...:..@7.
  39B0: 00 02 31 02 00 52 14 07 A5 00 1C FE 3A 00 00 03  ..1..R......:...
  39C0: 1A 42 46 02 05 02 23 00 00 00 02 A4 02 17 00 52  .BF...#........R
  39D0: 13 02 05 02 17 07 00 0F 02 A4 02 17 00 52 13 3D  .............R.=
  39E0: 65 01 04 49 56 06 68 A5 02 01 52 13 02 05 02 22  e..IV.h...R...."
  39F0: 00 00 00 02 A4 02 17 00 52 13 3A 00 00 5B 37 00  ........R.:..[7.
  3A00: 00 01 0D 1B 19 9F 0F 3D 65 01 14 49 64 06 66 06  .......=e..Id.f.
  3A10: 01 05 1C 19 01 00 00 78 01 25 1D 19 7D 01 4C 1D  .......x.%..}.L.
  3A20: 19 39 00 0D E5 19 19 02 5B 02 05 02 23 00 00 00  .9......[...#...
  3A30: 02 A4 02 17 00 52 13 56 00 40 03 24 40 16 00 66  .....R.V.@.$@..f
  3A40: 1E 2D 0D 42 88 01 21 0D 40 10 00 2D 0A 42 40 03  .-.B..!.@..-.B@.
  3A50: 24 40 0C 00 3E 25 40 02 49 CC 06 66 1E 03 64 46  $@..>%@.I..f..dF
  3A60: FC 01 03 1A 42 46 01 04 38 00 00 00 66 FF 09 65  ....BF..8...f..e
  3A70: 46 1B 2D 0D 42 90 09 03 31 43 00 03 A2 40 44 03  F.-.B...1C...@D.
  3A80: 0C 40 02 00 4C A4 40 00 00 49 FE 06 2D 0C 42 04  .@..L.@..I..-.B.
  3A90: 00 43 E9 06 2D 0D 42 06 00 3E 64 46 00 00 44 1E  .C..-.B..>dF..D.
  3AA0: 07 03 24 41 00 00 3E 25 41 FF 44 1E 07 2D 0A 42  ..$A..>%A.D..-.B
  3AB0: 40 43 03 07 37 03 00 4B A5 00 01 49 43 07 01 0C  @C..7..K...IC...
  3AC0: 06 60 01 00 01 0C 86 60 03 00 01 0C 06 61 05 00  .`.....`.....a..
  3AD0: 01 0C 86 61 07 00 43 5B 07 01 0C 06 62 01 00 01  ...a..C[....b...
  3AE0: 0C 86 62 03 00 01 0C 06 63 05 00 01 0C 86 63 07  ..b.....c.....c.
  3AF0: 00 37 00 00 03 1A 42 46 02 05 02 22 00 00 00 02  .7....BF..."....
  3B00: A4 02 17 00 52 13 43 64 06 4A E5 19 19 01 49 64  ....R.Cd.J....Id
  3B10: 06 50 32 3C 65 1D 19 00 44 97 07 0D A5 40 19 01  .P2<e...D....@..
  3B20: 0D E5 19 19 03 50 04 07 A5 40 19 FE 5B 0D E5 19  .....P...@..[...
  3B30: 19 03 5B 4A E5 19 19 01 44 64 06 66 06 03 24 41  ..[J....Dd.f..$A
  3B40: 42 00 3E 25 41 00 49 64 06 3C 65 1D 19 00 44 D0  B.>%A.Id.<e...D.
  3B50: 07 0D A5 40 19 01 50 04 5C E5 19 19 FE 02 07 A5  ...@..P.\.......
  3B60: 40 19 FE 43 D6 07 5C E5 19 19 FE 02 50 01 5B 66  @..C..\.....P.[f
  3B70: 06 56 00 41 03 0C 41 32 00 3E 0D 41 00 00 44 68  .V.A..A2.>.A..Dh
  3B80: 08 4A A5 9C 01 01 49 F8 07 0D 25 21 19 01 03 05  .J....I...%!....
  3B90: 46 40 78 7D 01 21 05 41 FF 0F 00 00 27 02 46 40  F@x}.!.A....'.F@
  3BA0: 3E 05 41 00 00 00 00 44 19 08 2D 0D 40 01 00 01  >.A....D..-.@...
  3BB0: 8A 1B 19 40 56 00 41 03 0C 41 32 00 21 02 40 41  ...@V.A..A2.!.@A
  3BC0: 27 02 46 40 01 A5 20 19 0C 01 0A 20 19 40 15 05  '.F@.. .... .@..
  3BD0: 40 04 56 00 41 03 28 41 CB 05 2D 0D 41 01 00 21  @.V.A.(A..-.A..!
  3BE0: 02 40 41 1B 05 40 08 01 0A 1E 19 40 0D E5 1E 19  .@A..@.....@....
  3BF0: C0 07 25 21 19 FE 4A 65 21 19 01 49 60 08 5B 07  ..%!..Je!..I`.[.
  3C00: A5 19 19 FD 0D 25 19 19 11 3C 65 1A 19 04 49 73  .....%...<e...Is
  3C10: 08 5B 5C 25 19 19 EF 01 5B 7A CC 01 02 20 23 01  .[\%....[z... #.
  3C20: 11 00 13 01 48 80 33 01 00 01 02 03 00 00 00 00  ....H.3.........
  3C30: 00 08 02 06 02 20 21 01 11 00 11 01 49 80 31 01  ..... !.....I.1.
  3C40: 00 01 02 03 10 00 00 00 00 02 03 01 02 20 21 02  ............. !.
  3C50: 11 00 11 02 4A 80 31 01 00 01 02 03 20 00 00 00  ....J.1..... ...
  3C60: 00 08 04 02 02 20 21 02 11 00 11 02 4B 80 31 01  ..... !.....K.1.
  3C70: 00 01 02 03 30 00 00 00 00 08 05 03 02 20 22 01  ....0........ ".
  3C80: 11 00 12 01 4C 80 32 01 00 01 02 03 40 00 00 00  ....L.2.....@...
  3C90: 00 10 00 04 02 20 22 01 11 00 12 01 4D 80 32 01  ..... ".....M.2.
  3CA0: 00 01 02 03 50 00 00 00 00 10 01 05 05 20 21 01  ....P........ !.
  3CB0: 10 00 02 60 05 20 23 01 20 00 08 40 05 20 22 01  ...`. #. ..@. ".
  3CC0: 00 00 10 40 0C 00 FF FF 02 0E 00 0B 00 0B 00 0B  ...@............
  3CD0: 00 0B FF FF 02 31 00 0B 00 0B 00 0B 00 0B FF FF  .....1..........
  3CE0: 03 0E 00 2A 00 2A 00 2A 00 2A FF FF 03 31 00 0B  ...*.*.*.*...1..
  3CF0: 00 0B 00 0B 00 0B 35 0C 00 06 1D 10 01 06 88 13  ......5.........
  3D00: 02 06 6A 18 03 06 BD 1F 04 06 10 27 05 06 D4 30  ..j........'...0
  3D10: 06 06 74 40 07 06 FF FF 08 06 68 42 00 04 78 69  ..t@......hB..xi
  3D20: 02 04 FF FF 01 04 0E 00 09 00 61 00 00 55 00 55  ..........a..U.U
  3D30: 00 55 00 55 00 01 40 00 40 00 40 00 40 00 02 2A  .U.U..@.@.@.@..*
  3D40: 00 2A 00 2A 00 2A 00 03 00 00 00 00 00 00 00 00  .*.*.*..........
  3D50: 08 40 15 40 15 40 15 40 15 09 20 20 20 20 20 20  .@.@.@.@..      
  3D60: 20 20 0A 00 2A 00 2A 00 2A 00 2A 10 2A 2A 2A 2A    ..*.*.*.*.****
  3D70: 2A 2A 2A 2A 11 00 40 00 40 00 40 00 40 18 00 55  ****..@.@.@.@..U
  3D80: 00 55 00 55 00 55 FF 31 00 09 00 61 00 00 55 00  .U.U.U.1...a..U.
  3D90: 55 00 55 00 55 00 01 40 00 40 00 40 00 40 00 02  U.U.U..@.@.@.@..
  3DA0: 2A 00 2A 00 2A 00 2A 00 03 00 00 00 00 00 00 00  *.*.*.*.........
  3DB0: 00 08 40 15 40 15 40 15 40 15 09 20 20 20 20 20  ..@.@.@.@..     
  3DC0: 20 20 20 0A 00 2A 00 2A 00 2A 00 2A 10 2A 2A 2A     ..*.*.*.*.***
  3DD0: 2A 2A 2A 2A 2A 11 00 40 00 40 00 40 00 40 18 00  *****..@.@.@.@..
  3DE0: 55 00 55 00 55 00 55 FF 27 02 01 02 00 08 37 00  U.U.U.U.'.....7.
  3DF0: 00 3D 0D 00 00 00 44 A7 01 56 00 41 03 21 41 01  .=....D..V.A.!A.
  3E00: 09 25 41 0F 15 0D 41 02 03 0A 40 42 66 FF 2D 0D  .%A...A...@Bf.-.
  3E10: 42 0F 02 2D 0A 42 41 03 0C 48 02 00 0D A5 4C 19  B..-.BA..H....L.
  3E20: 01 54 08 4C 19 03 0C 48 00 00 03 F9 41 01 15 3D  .T.L...H....A..=
  3E30: 41 04 5C BA 80 18 8F 41 03 0A 42 40 0D 0D 80 18  A.\....A..B@....
  3E40: 01 01 56 00 41 03 09 41 00 3B 02 41 03 3B 41 00  ..V.A..A.;.A.;A.
  3E50: 1B 25 41 04 01 A2 81 18 41 03 69 41 01 15 2D 41  .%A.....A.iA..-A
  3E60: 04 01 2A 81 18 41 56 00 40 0F E5 40 80 03 73 40  ..*..AV.@..@..s@
  3E70: 00 01 02 86 18 40 56 00 40 03 6B 40 00 01 02 86  .....@V.@.k@....
  3E80: 18 40 03 63 40 00 01 02 86 18 40 03 7B 40 00 09  .@.c@.....@.{@..
  3E90: 65 40 0F 01 02 86 18 40 3E 25 41 04 47 E9 00 33  e@.....@>%A.G..3
  3EA0: 25 41 04 2D 05 46 04 00 00 00 03 63 40 00 01 02  %A.-.F.....c@...
  3EB0: 86 18 40 03 6B 40 00 01 02 86 18 40 03 73 40 00  ..@.k@.....@.s@.
  3EC0: 01 02 86 18 40 03 7B 40 00 01 02 86 18 40 43 B0  ....@.{@.....@C.
  3ED0: 00 0D 25 83 18 02 0D 25 81 18 01 03 29 40 01 21  ..%....%....)@.!
  3EE0: 25 40 0A 2D 25 40 32 4A 25 84 18 01 49 1B 01 51  %@.-%@2J%...I..Q
  3EF0: 0A 33 25 40 01 3E 25 40 00 49 FF 00 02 65 01 01  .3%@.>%@.I...e..
  3F00: 43 A3 01 4A 05 84 18 F0 8F FF 00 44 2D 01 02 65  C..J.......D-..e
  3F10: 01 02 43 A3 01 01 05 86 18 01 00 00 80 03 00 40  ..C............@
  3F20: 86 18 02 6A 01 40 02 B8 01 84 18 08 A5 01 1F 3D  ...j.@.........=
  3F30: A5 01 00 46 55 01 02 65 01 03 43 A3 01 32 A5 01  ...FU..e..C..2..
  3F40: 01 3D 8D 00 00 00 44 A3 01 3D A5 01 00 44 A3 01  .=....D..=...D..
  3F50: 03 31 41 01 03 19 40 00 56 18 40 3B 02 40 03 28  .1A...@.V.@;.@.(
  3F60: 40 86 18 03 68 40 86 18 03 A8 40 86 18 03 E8 40  @...h@....@....@
  3F70: 86 18 04 02 00 40 3E 25 41 04 47 A3 01 33 25 41  .....@>%A.G..3%A
  3F80: 04 2D 05 46 04 00 00 00 43 76 01 3A 00 00 5B 66  .-.F....Cv.:..[f
  3F90: FF 2D 0D 42 0F 02 03 0C 48 00 00 01 05 88 18 00  .-.B....H.......
  3FA0: 00 32 00 01 05 89 18 00 1C 00 00 01 05 8A 18 10  .2..............
  3FB0: 12 3D 12 2D 0D 42 04 00 2C 25 00 01 3D 25 00 06  .=.-.B..,%..=%..
  3FC0: 49 AE 01 56 08 48 03 25 41 10 0D 65 7F 19 40 07  I..V.H.%A..e..@.
  3FD0: 65 7F 19 BF 33 25 41 01 3E 25 41 00 49 E2 01 0D  e...3%A.>%A.I...
  3FE0: 25 0B 19 01 54 30 0B 19 0D 25 0C 19 01 54 30 0C  %...T0...%...T0.
  3FF0: 19 51 32 5B 7A 18 00 00 00 00 00 14 00 04 00 28  .Q2[z..........(
  4000: 00 08 00 40 00 0C 00 54 00 10 00 68 00 14 00 5C  ...@...T...h...\
  4010: 00 01 02 00 04 02 25 01 04 03 31 41 00 09 0D 41  ......%...1A...A
  4020: 0F 00 15 0D 41 01 66 FF 2D 0D 42 50 00 2D 0A 42  ....A.f.-.BP.-.B
  4030: 41 03 0C 48 00 00 07 A5 4C 19 FE 01 0D 4C 19 01  A..H....L....L..
  4040: 11 50 02 4A 0D 4F 19 01 00 49 41 00 02 25 01 13  .P.J.O...IA..%..
  4050: 54 08 4C 19 54 00 4E 19 3A 00 00 5B 7A 0C 00 00  T.L.T.N.:..[z...
  4060: 00 04 00 08 00 0C 00 10 00 14 00 E0 01 01 02 EB  ................
  4070: 04 40 01 50 00 C8 00 F9 00 00 00 30 00 D4 00 02  .@.P.......0....
  4080: 00 00 00 00 00 00 00 22 00 E1 46 EB 04 40 01 50  ......."..F..@.P
  4090: 00 F0 00 18 01 00 00 30 00 F8 00 03 00 00 00 00  .......0........
  40A0: 00 00 00 20 00 E2 3C 44 08 00 02 A0 00 80 01 41  ... ..<D.......A
  40B0: 00 10 00 50 00 1C 00 02 00 00 00 00 00 00 00 00  ...P............
  40C0: 00 E4 46 4E 0C 80 02 C0 00 5E 01 5F 00 20 00 40  ..FN.....^._. .@
  40D0: 00 20 00 03 00 00 00 00 00 00 00 04 00 E5 55 4E  . ............UN
  40E0: 0C 80 02 C0 00 90 01 2D 00 20 00 40 00 01 00 03  .......-. .@....
  40F0: 00 00 00 00 00 00 00 02 00 E6 55 D6 09 80 02 A0  ..........U.....
  4100: 00 E0 01 2D 00 10 00 60 00 0A 00 02 00 00 00 00  ...-...`........
  4110: 00 08 08 06 00 12 3C DE 0D D0 02 D8 00 90 01 2E  ......<.........
  4120: 00 24 00 48 00 01 00 01 00 00 00 00 00 00 00 02  .$.H............
  4130: 00 E7 55 A0 0F 20 03 00 01 58 02 1C 00 28 00 80  ..U.. ...X...(..
  4140: 00 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C 64  .............j<d
  4150: 19 00 04 40 01 00 03 26 00 18 00 88 00 03 00 06  ...@...&........
  4160: 00 00 00 00 00 00 00 06 00 55 3C 30 2A 80 04 C0  .........U<0*...
  4170: 01 60 03 24 00 40 00 80 00 01 00 03 00 00 00 00  .`.$.@..........
  4180: 00 00 00 00 00 E8 4B 30 2A 00 05 08 02 C0 03 28  ......K0*......(
  4190: 00 60 00 70 00 01 00 03 00 00 00 00 00 00 00 00  .`.p............
  41A0: 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00 70  ..<0*......*.0.p
  41B0: 00 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C 8F  ..............<.
  41C0: 2F 78 05 D0 01 1A 04 27 00 58 00 90 00 03 00 04  /x.....'.X......
  41D0: 00 00 00 00 00 00 00 02 00 EB 3C 48 3F 40 06 30  ..........<H?@.0
  41E0: 02 B0 04 32 00 40 00 C0 00 01 00 03 00 00 00 00  ...2.@..........
  41F0: 00 00 00 00 00 EC 3C FB 4F 00 07 90 02 40 05 32  ......<.O....@.2
  4200: 00 80 00 C8 00 01 00 03 00 00 00 00 00 00 00 02  ................
  4210: 00 ED 3C 41 55 40 07 A0 02 70 05 2F 00 60 00 E0  ..<AU@...p./.`..
  4220: 00 01 00 03 00 00 00 00 00 00 00 02 00 EE 3C 68  ..............<h
  4230: 5B 80 07 A8 02 A0 05 3C 00 80 00 D0 00 01 00 03  [......<........
  4240: 00 00 00 00 00 00 00 02 00 EF 3C 6C 00 02 02 00  ..........<l....
  4250: 00 16 0F 20 4E 00 00 80 38 01 00 00 00 00 00 00  ... N...8.......
  4260: 00 00 00 00 00 00 00 00 00 00 00 88 84 02 00 00  ................
  4270: 00 00 00 80 38 01 00 00 00 00 00 84 03 72 06 00  ....8........r..
  4280: 00 00 00 90 5F 01 00 01 00 00 00 00 00 00 00 00  ...._...........
  4290: 00 00 00 40 9C A3 02 88 13 00 00 3F 40 10 27 10  ...@.......?@.'.
  42A0: 27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  '...............
  42B0: 00 00 00 00 00 00 00 04 03 02 01 00 00 00 00 00  ................
  42C0: 2A 00 2A 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15 00  *.*..***..*.**..
  42D0: 2A 2A 2A 15 15 15 15 15 3F 15 3F 15 15 3F 3F 3F  ***.....?.?..???
  42E0: 15 15 3F 15 3F 3F 3F 15 3F 3F 3F 00 00 00 05 05  ..?.???.???.....
  42F0: 05 08 08 08 0B 0B 0B 0E 0E 0E 11 11 11 14 14 14  ................
  4300: 18 18 18 1C 1C 1C 20 20 20 24 24 24 28 28 28 2D  ......   $$$(((-
  4310: 2D 2D 32 32 32 38 38 38 3F 3F 3F 00 00 3F 10 00  --222888???..?..
  4320: 3F 1F 00 3F 2F 00 3F 3F 00 3F 3F 00 2F 3F 00 1F  ?..?/.??.??./?..
  4330: 3F 00 10 3F 00 00 3F 10 00 3F 1F 00 3F 2F 00 3F  ?..?..?..?..?/.?
  4340: 3F 00 2F 3F 00 1F 3F 00 10 3F 00 00 3F 00 00 3F  ?./?..?..?..?..?
  4350: 10 00 3F 1F 00 3F 2F 00 3F 3F 00 2F 3F 00 1F 3F  ..?..?/.??./?..?
  4360: 00 10 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F 3F 3F  ..?..?'.?/.?7.??
  4370: 1F 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 1F 1F 3F 27  .??.7?./?.'?..?'
  4380: 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 37 3F 1F 2F 3F 1F  .?/.?7.??.7?./?.
  4390: 27 3F 1F 1F 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F  '?..?..?'.?/.?7.
  43A0: 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 2D 2D 3F 31 2D  ??.7?./?.'?--?1-
  43B0: 3F 36 2D 3F 3A 2D 3F 3F 2D 3F 3F 2D 3A 3F 2D 36  ?6-?:-??-??-:?-6
  43C0: 3F 2D 31 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D 3F  ?-1?--?1-?6-?:-?
  43D0: 3F 2D 3A 3F 2D 36 3F 2D 31 3F 2D 2D 3F 2D 2D 3F  ?-:?-6?-1?--?--?
  43E0: 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3A 3F 2D 36 3F  1-?6-?:-??-:?-6?
  43F0: 2D 31 3F 00 00 1C 07 00 1C 0E 00 1C 15 00 1C 1C  -1?.............
  4400: 00 1C 1C 00 15 1C 00 0E 1C 00 07 1C 00 00 1C 07  ................
  4410: 00 1C 0E 00 1C 15 00 1C 1C 00 15 1C 00 0E 1C 00  ................
  4420: 07 1C 00 00 1C 00 00 1C 07 00 1C 0E 00 1C 15 00  ................
  4430: 1C 1C 00 15 1C 00 0E 1C 00 07 1C 0E 0E 1C 11 0E  ................
  4440: 1C 15 0E 1C 18 0E 1C 1C 0E 1C 1C 0E 18 1C 0E 15  ................
  4450: 1C 0E 11 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E 1C  ................
  4460: 1C 0E 18 1C 0E 15 1C 0E 11 1C 0E 0E 1C 0E 0E 1C  ................
  4470: 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E 18 1C 0E 15 1C  ................
  4480: 0E 11 1C 14 14 1C 16 14 1C 18 14 1C 1A 14 1C 1C  ................
  4490: 14 1C 1C 14 1A 1C 14 18 1C 14 16 1C 14 14 1C 16  ................
  44A0: 14 1C 18 14 1C 1A 14 1C 1C 14 1A 1C 14 18 1C 14  ................
  44B0: 16 1C 14 14 1C 14 14 1C 16 14 1C 18 14 1C 1A 14  ................
  44C0: 1C 1C 14 1A 1C 14 18 1C 14 16 1C 00 00 10 04 00  ................
  44D0: 10 08 00 10 0C 00 10 10 00 10 10 00 0C 10 00 08  ................
  44E0: 10 00 04 10 00 00 10 04 00 10 08 00 10 0C 00 10  ................
  44F0: 10 00 0C 10 00 08 10 00 04 10 00 00 10 00 00 10  ................
  4500: 04 00 10 08 00 10 0C 00 10 10 00 0C 10 00 08 10  ................
  4510: 00 04 10 08 08 10 0A 08 10 0C 08 10 0E 08 10 10  ................
  4520: 08 10 10 08 0E 10 08 0C 10 08 0A 10 08 08 10 0A  ................
  4530: 08 10 0C 08 10 0E 08 10 10 08 0E 10 08 0C 10 08  ................
  4540: 0A 10 08 08 10 08 08 10 0A 08 10 0C 08 10 0E 08  ................
  4550: 10 10 08 0E 10 08 0C 10 08 0A 10 0B 0B 10 0C 0B  ................
  4560: 10 0D 0B 10 0F 0B 10 10 0B 10 10 0B 0F 10 0B 0D  ................
  4570: 10 0B 0C 10 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B 10  ................
  4580: 10 0B 0F 10 0B 0D 10 0B 0C 10 0B 0B 10 0B 0B 10  ................
  4590: 0C 0B 10 0D 0B 10 0F 0B 10 10 0B 0F 10 0B 0D 10  ................
  45A0: 0B 0C 10 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  45B0: 00 00 00 00 00 00 00 00 00 00 00 D1 00 01 03 D8  ................
  45C0: 1D 56 05 E1 00 00 03 20 00 44 00 2D 00 04 00 07  .V..... .D.-....
  45D0: 00 58 01 C1 00 00 00 02 02 00 3C 00 00 20 00 00  .X........<.. ..
  45E0: 00 00 00 1C 3C 01 06 00 00 00 00 00 CB C8 00 07  ....<...........
  45F0: 5A 5A 07 7D 03 03 00 01 0A 81 41 34 21 00 00 00  ZZ.}......A4!...
  4600: 00 00 00 00 00 00 00 04 80 00 00 00 00 00 00 00  ................
  4610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4680: 00 00 00 00 00 00 00 00 00 FF 00 00 A6 00 01 01  ................
  4690: 4C 19 4E 19 4F 19 4D 19 4C 19 4E 19 4F 19 4D 19  L.N.O.M.L.N.O.M.
  46A0: 90 00 00 00 00 08 08 08 08 00 00 50 19 52 19 53  ...........P.R.S
  46B0: 19 51 19 50 19 52 19 53 19 51 19 91 00 00 00 00  .Q.P.R.S.Q......
  46C0: 08 08 08 08 00 00 54 19 56 19 57 19 55 19 54 19  ......T.V.W.U.T.
  46D0: 56 19 57 19 55 19 92 00 00 00 00 08 08 08 08 00  V.W.U...........
  46E0: 00 58 19 5A 19 5B 19 59 19 58 19 5A 19 5B 19 59  .X.Z.[.Y.X.Z.[.Y
  46F0: 19 93 00 00 00 00 08 08 08 08 00 00 5C 19 5E 19  ............\.^.
  4700: 5F 19 5D 19 5C 19 5E 19 5F 19 5D 19 94 00 00 00  _.].\.^._.].....
  4710: 00 08 08 08 08 00 00 60 19 62 19 63 19 61 19 60  .......`.b.c.a.`
  4720: 19 62 19 63 19 61 19 95 00 00 00 00 08 08 08 08  .b.c.a..........
  4730: 00 00 0C 00 01 05 E0 FF 07 00 20 00 20 00 1C 00  .......... . ...
  4740: 01 01 6D 19 00 01 6D 19 08 02 6D 19 10 03 6D 19  ..m...m...m...m.
  4750: 18 04 6D 19 1A 05 6D 19 1C 06 14 01 01 01 00 01  ..m...m.........
  4760: 02 E6 01 01 02 12 03 01 02 6A 05 01 02 55 07 01  .........j...U..
  4770: 02 EA 10 01 06 12 11 01 16 12 13 01 06 6A 14 01  .............j..
  4780: 16 6A 16 01 06 55 17 01 16 55 19 01 06 EA 1A 01  .j...U...U......
  4790: 16 EA 0D 01 06 E1 0E 01 16 E1 20 01 0A E1 93 01  .......... .....
  47A0: 02 E2 95 01 16 E2 96 01 0A E2 B3 01 02 E4 B5 01  ................
  47B0: 16 E4 B6 01 0A E4 C3 01 02 E5 C5 01 16 E5 C6 01  ................
  47C0: 0A E5 33 01 02 E7 35 01 16 E7 36 01 0A E7 53 01  ..3...5...6...S.
  47D0: 02 E8 55 01 16 E8 56 01 0A E8 63 01 02 E9 65 01  ..U...V...c...e.
  47E0: 16 E9 66 01 0A E9 21 01 0A 12 22 01 0A 6A 23 01  ..f...!..."..j#.
  47F0: 0A 55 24 01 0A EA 43 01 02 EB 45 01 16 EB 46 01  .U$...C...E...F.
  4800: 0A EB 73 01 02 EC 75 01 16 EC 76 01 0A EC 83 01  ..s...u...v.....
  4810: 02 ED 85 01 16 ED 86 01 0A ED D3 01 02 EE D5 01  ................
  4820: 16 EE D6 01 0A EE E3 01 02 EF E5 01 16 EF E6 01  ................
  4830: 0A EF D1 01 02 70 D2 01 16 70 D4 01 0A 70 D7 01  .....p...p...p..
  4840: 02 71 D8 01 16 71 D9 01 0A 71 E1 01 02 72 E2 01  .q...q...q...r..
  4850: 16 72 E4 01 0A 72 E7 01 02 73 E8 01 16 73 E9 01  .r...r...s...s..
  4860: 0A 73 F3 01 02 74 F5 01 16 74 F6 01 0A 74 98 01  .s...t...t...t..
  4870: 06 01 00 00 00 00 00 2E 00 4D 00 9F 00 00 00 00  .........M......
  4880: 00 2E 00 02 00 00 00 0E 00 00 80 00 00 00 00 00  ................
  4890: 00 00 00 00 00 00 0B 00 00 00 61 01 08 02 00 00  ..........a.....
  48A0: 01 01 01 01 02 02 02 03 02 03 02 03 02 04 00 01  ................
  48B0: 03 05 01 02 03 01 06 04 01 07 04 05 10 2D 6C 00  .............-l.
  48C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 D1 82 00  ................
  48D0: 01 00 00 00 00 00 00 00 00 00 00 00 00 F8 C1 00  ................
  48E0: 02 00 00 00 00 00 00 00 00 00 00 00 00 DC 0B 01  ................
  48F0: 03 00 00 00 00 00 00 00 00 00 00 00 00 20 4E 00  ............. N.
  4900: 00 00 00 00 00 00 00 00 00 00 00 00 00 08 18 00  ................
  4910: 80 00 00 00 80 00 00 00 00 00 30 75 00 00 FC 60  ..........0u...`
  4920: 00 00 00 00 00 00 00 00 40 00 00 00 80 00 00 00  ........@.......
  4930: 00 00 40 9C 00 00 30 75 00 00 00 00 00 00 00 00  ..@...0u........
  4940: 04 00 00 00 00 00 00 00 00 00 40 19 01 00 60 EA  ..........@...`.
  4950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4960: 04 00 40 19 01 00 60 EA 00 00 00 00 00 00 00 01  ..@...`.........
  4970: 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00  ................
  4980: 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 00  ................
  4990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08  ................
  49A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  49B0: 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00  ................
  49C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0C  ................
  49D0: 00 00 00 00 00 00 00 00 00 6D 01 00 03 40 9C 00  .........m...@..
  49E0: 40 9C 00 56 D0 00 56 D0 00 DC 0B 01 DC 0B 01 03  @..V..V.........
  49F0: 01 00 00 02 00 01 03 00 02 06 02 03 02 03 00 01  ................
  4A00: 01 02 00 01 01 02 00 00 00 00 00 00 00 00 00 00  ................
  4A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18 00  ................
  4A70: 02 01 02 00 08 00 80 00 00 02 00 04 00 08 40 00  ..............@.
  4A80: 01 00 10 00 FF FF 5B 02 01 03 0B 00 5E 00 00 00  ......[.....^...
  4A90: 64 01 00 00 12 00 25 02 06 01 00 00 02 00 0C 00  d.....%.........
  4AA0: 0E 31 00 11 21 21 23 22 01 00 0C 00 05 31 00 11  .1..!!#".....1..
  4AB0: 21 22 22 21 08 00 0C 00 0C 31 00 11 1E 21 00 00  !""!.....1...!..
  4AC0: 00 00 0C 00 00 00 00 11 1E 22 00 00 00 00 0C 00  ........."......
  4AD0: 00 00 00 11 20 21 00 00 00 00 0C 00 00 00 00 11  .... !..........
  4AE0: 20 22 00 00 06 00 00 00 0E 31 92 00 98 00 00 00   ".......1......
  4AF0: 05 31 B5 00 BB 00 00 00 0C 31 D8 00 DE 00 00 00  .1.......1......
  4B00: 00 00 FB 00 01 01 00 00 00 00 1E 01 24 01 00 00  ............$...
  4B10: 00 00 41 01 47 01 00 00 01 23 22 00 00 00 04 14  ..A.G....#".....
  4B20: 01 00 10 01 00 00 02 00 00 00 00 00 00 00 00 00  ................
  4B30: 00 00 01 04 90 00 02 04 01 00 FF 01 22 21 00 00  ............"!..
  4B40: 00 04 14 01 00 00 01 00 00 01 00 00 00 00 00 00  ................
  4B50: 00 00 00 00 00 01 04 91 00 02 04 02 00 FF 01 1E  ................
  4B60: 21 00 00 00 04 14 01 00 10 02 00 00 08 00 00 00  !...............
  4B70: 00 00 00 00 00 00 00 00 01 04 92 00 02 04 03 00  ................
  4B80: FF 01 23 22 00 00 00 04 14 00 00 00 00 00 00 00  ..#"............
  4B90: 00 00 00 00 00 00 00 00 00 00 00 01 04 00 00 02  ................
  4BA0: 04 00 00 FF 01 23 22 00 00 00 04 14 00 00 00 00  .....#".........
  4BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 04  ................
  4BC0: 00 00 02 04 00 00 FF 01 23 22 00 00 00 04 14 00  ........#"......
  4BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4BE0: 00 01 04 00 00 02 04 00 00 FF 09 00 00 00 21 21  ..............!!
  4BF0: B0 01 B6 01 00 00 23 21 BB 01 C1 01 00 00 21 22  ......#!......!"
  4C00: CA 01 D0 01 00 00 23 22 D5 01 E1 01 00 00 1E 21  ......#".......!
  4C10: EA 01 F0 01 00 00 22 21 F5 01 FB 01 00 00 1E 22  ......"!......."
  4C20: 04 02 0A 02 00 00 20 21 0F 02 15 02 00 00 20 22  ...... !...... "
  4C30: 1A 02 20 02 00 00 01 00 11 01 23 22 14 04 03 00  .. .......#"....
  4C40: FF 01 21 21 01 15 31 01 04 00 00 02 04 00 00 FF  ..!!..1.........
  4C50: 01 00 11 01 22 21 14 04 03 00 FF 01 21 21 01 0E  ...."!......!!..
  4C60: 31 15 34 15 35 15 36 01 04 90 00 02 04 01 00 FF  1.4.5.6.........
  4C70: 01 00 11 01 0C 31 14 04 03 00 FF 01 21 22 01 05  .....1......!"..
  4C80: 31 01 04 91 00 02 04 02 00 FF 01 00 11 01 23 22  1.............#"
  4C90: 14 04 03 00 FF 01 00 11 01 23 22 14 04 03 00 FF  .........#".....
  4CA0: 01 00 11 01 23 22 14 04 03 00 FF 02 00 00 00 03  ....#"..........
  4CB0: 71 00 00 39 02 00 00 04 71 4E 02 54 02 00 00 10  q..9....qN.T....
  4CC0: 0A 01 02 03 04 05 06 00 00 11 0A 90 91 92 93 94  ................
  4CD0: 95 00 00 FF 00 00 00 00 00 00 09 06 00 01 00 00  ................
  4CE0: FF 2D 00 01 01 01 03 02 38 00 06 10 00 00 03 38  .-......8......8
  4CF0: 00 02 39 00 09 10 00 01 83 02 38 00 06 10 00 00  ..9.......8.....
  4D00: 03 38 00 08 20 00 00 03 39 00 09 26 00 00 34 00  .8.. ...9..&..4.
  4D10: 03 01 FF FF FF 00 00 00 E4 0C 04 01 00 00 FF FF  ................
  4D20: FF 00 00 00 E4 0C 05 01 00 00 FF FF FF 00 64 00  ..............d.
  4D30: A0 0F 06 01 00 00 FF FF FF 00 24 00 4E 0C 07 02  ..........$.N...
  4D40: 00 00 5A 00 02 03 14 00 00 00 45 36 00 00 3D 04  ..Z.......E6..=.
  4D50: 02 03 00 00 00 00 1E 21 52 00 4C 00 03 FF FF 00  .......!R.L.....
  4D60: 1E 22 55 00 4C 04 09 FF FF 00 20 21 55 00 4C 40  ."U.L..... !U.L@
  4D70: 0A FF FF 00 20 22 55 00 4C 44 0B FF FF 00 21 21  .... "U.LD....!!
  4D80: 55 00 4C 80 0C FF FF 00 21 22 55 00 4C 84 0D FF  U.L.....!"U.L...
  4D90: FF 00 FF FF 01 06 FF 02 06 00 06 FF 00 02 01 07  ................
  4DA0: 20 4E 00 00 40 7E 05 00 80 38 01 00 00 00 00 00   N..@~...8......
  4DB0: EE 85 00 00 01 00 00 00 00 E1 00 00 02 00 00 00  ................
  4DC0: 60 EA 00 00 03 00 00 00 80 38 01 00 00 00 00 00  `........8......
  4DD0: 08 00 00 00 02 00 00 00 00 00 D8 FE C8 00 73 07  ..............s.
  4DE0: 20 4E 00 00 07 00 00 00 00 00 00 00 50 00 54 00   N..........P.T.
  4DF0: 03 00 74 01 00 00 03 02 00 00 00 00 00 00 00 00  ..t.............
  4E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4E70: 2D 6C 00 00 00 00 6E 00 D1 82 00 00 01 00 5C 00  -l....n.......\.
  4E80: F8 C1 00 00 02 00 50 00 DC 0B 01 00 03 00 42 00  ......P.......B.
  4E90: DC 0B 01 00 03 00 42 00 8B 1E 00 00 80 38 01 00  ......B......8..
  4EA0: 00 00 00 00 4C 13 00 00 D0 07 00 00 24 00 00 00  ....L.......$...
  4EB0: 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  d...............
  4EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4ED0: 00 00 00 00 00 00 00 00 00 03 03 00 00 00 01 05  ................
  4EE0: 80 38 01 00 80 38 01 00 80 38 01 00 14 82 00 00  .8...8...8......
  4EF0: 56 00 72 00 00 71 02 00 D0 FB 01 00 B0 AD 01 00  V.r..q..........
  4F00: 80 38 01 00 01 00 00 00 30 3A 24 30 1A 23 14 18  .8......0:$0.#..
  4F10: 8C 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4F20: 00 00 00 00 02 00 10 01 0E 31 00 00 23 22 E4 00  .........1..#"..
  4F30: 00 00 00 00 01 00 00 01 05 31 01 01 22 21 E4 00  .........1.."!..
  4F40: 00 00 00 00 08 00 10 02 0C 31 02 02 00 00 E4 00  .........1......
  4F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  4FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  5000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  5010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  5020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  5030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  5040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  5050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  5060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  5070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  5080: 00 00 00 00                                      ....


WDAT
----
[000h 0000   4]                    Signature : "WDAT"    [Watchdog Action Table]
[004h 0004   4]                 Table Length : 000001AC
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4B
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]                Header Length : 00000020
[028h 0040   2]                  PCI Segment : 00FF
[02Ah 0042   1]                      PCI Bus : FF
[02Bh 0043   1]                   PCI Device : FF
[02Ch 0044   1]                 PCI Function : FF
[02Dh 0045   3]                     Reserved : 000000
[030h 0048   4]                 Timer Period : 000003E8
[034h 0052   4]                    Max Count : 000003FF
[038h 0056   4]                    Min Count : 00000002
[03Ch 0060   1]        Flags (decoded below) : 81
                                     Enabled : 1
                         Stopped When Asleep : 1
[03Dh 0061   3]                     Reserved : 000000
[040h 0064   4]         Watchdog Entry Count : 0000000F

[044h 0068   1]              Watchdog Action : 01
[045h 0069   1]                  Instruction : 82
[046h 0070   2]                     Reserved : 0000

[048h 0072  12]              Register Region : [Generic Address Structure]
[048h 0072   1]                     Space ID : 00 [SystemMemory]
[049h 0073   1]                    Bit Width : 20
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 03 [DWord Access:32]
[04Ch 0076   8]                      Address : 00000000FEC000F0

[054h 0084   4]                        Value : 00000080
[058h 0088   4]                Register Mask : 00000080

[05Ch 0092   1]              Watchdog Action : 04
[05Dh 0093   1]                  Instruction : 01
[05Eh 0094   2]                     Reserved : 0000

[060h 0096  12]              Register Region : [Generic Address Structure]
[060h 0096   1]                     Space ID : 00 [SystemMemory]
[061h 0097   1]                    Bit Width : 20
[062h 0098   1]                   Bit Offset : 00
[063h 0099   1]         Encoded Access Width : 03 [DWord Access:32]
[064h 0100   8]                      Address : 00000000FEC000F4

[06Ch 0108   4]                        Value : 00000000
[070h 0112   4]                Register Mask : 0000FFFF

[074h 0116   1]              Watchdog Action : 06
[075h 0117   1]                  Instruction : 83
[076h 0118   2]                     Reserved : 0000

[078h 0120  12]              Register Region : [Generic Address Structure]
[078h 0120   1]                     Space ID : 00 [SystemMemory]
[079h 0121   1]                    Bit Width : 20
[07Ah 0122   1]                   Bit Offset : 00
[07Bh 0123   1]         Encoded Access Width : 03 [DWord Access:32]
[07Ch 0124   8]                      Address : 00000000FEC000F4

[084h 0132   4]                        Value : 00000000
[088h 0136   4]                Register Mask : 0000FFFF

[08Ch 0140   1]              Watchdog Action : 08
[08Dh 0141   1]                  Instruction : 00
[08Eh 0142   2]                     Reserved : 0000

[090h 0144  12]              Register Region : [Generic Address Structure]
[090h 0144   1]                     Space ID : 00 [SystemMemory]
[091h 0145   1]                    Bit Width : 20
[092h 0146   1]                   Bit Offset : 00
[093h 0147   1]         Encoded Access Width : 03 [DWord Access:32]
[094h 0148   8]                      Address : 00000000FEC000F0

[09Ch 0156   4]                        Value : 00000001
[0A0h 0160   4]                Register Mask : 00000001

[0A4h 0164   1]              Watchdog Action : 09
[0A5h 0165   1]                  Instruction : 82
[0A6h 0166   2]                     Reserved : 0000

[0A8h 0168  12]              Register Region : [Generic Address Structure]
[0A8h 0168   1]                     Space ID : 00 [SystemMemory]
[0A9h 0169   1]                    Bit Width : 20
[0AAh 0170   1]                   Bit Offset : 00
[0ABh 0171   1]         Encoded Access Width : 03 [DWord Access:32]
[0ACh 0172   8]                      Address : 00000000FEC000F0

[0B4h 0180   4]                        Value : 00000001
[0B8h 0184   4]                Register Mask : 00000001

[0BCh 0188   1]              Watchdog Action : 0A
[0BDh 0189   1]                  Instruction : 00
[0BEh 0190   2]                     Reserved : 0000

[0C0h 0192  12]              Register Region : [Generic Address Structure]
[0C0h 0192   1]                     Space ID : 00 [SystemMemory]
[0C1h 0193   1]                    Bit Width : 20
[0C2h 0194   1]                   Bit Offset : 00
[0C3h 0195   1]         Encoded Access Width : 03 [DWord Access:32]
[0C4h 0196   8]                      Address : 00000000FEC000F0

[0CCh 0204   4]                        Value : 00000000
[0D0h 0208   4]                Register Mask : 00000001

[0D4h 0212   1]              Watchdog Action : 0B
[0D5h 0213   1]                  Instruction : 82
[0D6h 0214   2]                     Reserved : 0000

[0D8h 0216  12]              Register Region : [Generic Address Structure]
[0D8h 0216   1]                     Space ID : 00 [SystemMemory]
[0D9h 0217   1]                    Bit Width : 20
[0DAh 0218   1]                   Bit Offset : 00
[0DBh 0219   1]         Encoded Access Width : 03 [DWord Access:32]
[0DCh 0220   8]                      Address : 00000000FEC000F0

[0E4h 0228   4]                        Value : 00000000
[0E8h 0232   4]                Register Mask : 00000001

[0ECh 0236   1]              Watchdog Action : 10
[0EDh 0237   1]                  Instruction : 00
[0EEh 0238   2]                     Reserved : 0000

[0F0h 0240  12]              Register Region : [Generic Address Structure]
[0F0h 0240   1]                     Space ID : 00 [SystemMemory]
[0F1h 0241   1]                    Bit Width : 20
[0F2h 0242   1]                   Bit Offset : 00
[0F3h 0243   1]         Encoded Access Width : 03 [DWord Access:32]
[0F4h 0244   8]                      Address : 00000000FEC000F0

[0FCh 0252   4]                        Value : 00000000
[100h 0256   4]                Register Mask : 00000004

[104h 0260   1]              Watchdog Action : 11
[105h 0261   1]                  Instruction : 82
[106h 0262   2]                     Reserved : 0000

[108h 0264  12]              Register Region : [Generic Address Structure]
[108h 0264   1]                     Space ID : 00 [SystemMemory]
[109h 0265   1]                    Bit Width : 20
[10Ah 0266   1]                   Bit Offset : 00
[10Bh 0267   1]         Encoded Access Width : 03 [DWord Access:32]
[10Ch 0268   8]                      Address : 00000000FEC000F0

[114h 0276   4]                        Value : 00000000
[118h 0280   4]                Register Mask : 00000006

[11Ch 0284   1]              Watchdog Action : 12
[11Dh 0285   1]                  Instruction : 00
[11Eh 0286   2]                     Reserved : 0000

[120h 0288  12]              Register Region : [Generic Address Structure]
[120h 0288   1]                     Space ID : 00 [SystemMemory]
[121h 0289   1]                    Bit Width : 20
[122h 0290   1]                   Bit Offset : 00
[123h 0291   1]         Encoded Access Width : 03 [DWord Access:32]
[124h 0292   8]                      Address : 00000000FEC000F0

[12Ch 0300   4]                        Value : 00000004
[130h 0304   4]                Register Mask : 00000004

[134h 0308   1]              Watchdog Action : 13
[135h 0309   1]                  Instruction : 82
[136h 0310   2]                     Reserved : 0000

[138h 0312  12]              Register Region : [Generic Address Structure]
[138h 0312   1]                     Space ID : 00 [SystemMemory]
[139h 0313   1]                    Bit Width : 20
[13Ah 0314   1]                   Bit Offset : 00
[13Bh 0315   1]         Encoded Access Width : 03 [DWord Access:32]
[13Ch 0316   8]                      Address : 00000000FEC000F0

[144h 0324   4]                        Value : 00000004
[148h 0328   4]                Register Mask : 00000004

[14Ch 0332   1]              Watchdog Action : 20
[14Dh 0333   1]                  Instruction : 02
[14Eh 0334   2]                     Reserved : 0000

[150h 0336  12]              Register Region : [Generic Address Structure]
[150h 0336   1]                     Space ID : 01 [SystemIO]
[151h 0337   1]                    Bit Width : 08
[152h 0338   1]                   Bit Offset : 00
[153h 0339   1]         Encoded Access Width : 01 [Byte Access:8]
[154h 0340   8]                      Address : 0000000000000CD4

[15Ch 0348   4]                        Value : 000000EF
[160h 0352   4]                Register Mask : 000000FF

[164h 0356   1]              Watchdog Action : 20
[165h 0357   1]                  Instruction : 00
[166h 0358   2]                     Reserved : 0000

[168h 0360  12]              Register Region : [Generic Address Structure]
[168h 0360   1]                     Space ID : 01 [SystemIO]
[169h 0361   1]                    Bit Width : 08
[16Ah 0362   1]                   Bit Offset : 00
[16Bh 0363   1]         Encoded Access Width : 01 [Byte Access:8]
[16Ch 0364   8]                      Address : 0000000000000CD5

[174h 0372   4]                        Value : 00000001
[178h 0376   4]                Register Mask : 00000001

[17Ch 0380   1]              Watchdog Action : 21
[17Dh 0381   1]                  Instruction : 02
[17Eh 0382   2]                     Reserved : 0000

[180h 0384  12]              Register Region : [Generic Address Structure]
[180h 0384   1]                     Space ID : 01 [SystemIO]
[181h 0385   1]                    Bit Width : 08
[182h 0386   1]                   Bit Offset : 00
[183h 0387   1]         Encoded Access Width : 01 [Byte Access:8]
[184h 0388   8]                      Address : 0000000000000CD4

[18Ch 0396   4]                        Value : 000000EF
[190h 0400   4]                Register Mask : 000000FF

[194h 0404   1]              Watchdog Action : 21
[195h 0405   1]                  Instruction : 82
[196h 0406   2]                     Reserved : 0000

[198h 0408  12]              Register Region : [Generic Address Structure]
[198h 0408   1]                     Space ID : 01 [SystemIO]
[199h 0409   1]                    Bit Width : 08
[19Ah 0410   1]                   Bit Offset : 00
[19Bh 0411   1]         Encoded Access Width : 01 [Byte Access:8]
[19Ch 0412   8]                      Address : 0000000000000CD5

[1A4h 0420   4]                        Value : 00000000
[1A8h 0424   4]                Register Mask : 00000001

Raw Table Data: Length 428 (0x1AC)

  0000: 57 44 41 54 AC 01 00 00 01 4B 48 50 51 4F 45 4D  WDAT.....KHPQOEM
  0010: 31 38 41 36 20 20 20 20 01 00 00 00 48 50 20 20  18A6    ....HP  
  0020: 00 00 04 00 20 00 00 00 FF 00 FF FF FF 00 00 00  .... ...........
  0030: E8 03 00 00 FF 03 00 00 02 00 00 00 81 00 00 00  ................
  0040: 0F 00 00 00 01 82 00 00 00 20 00 03 F0 00 C0 FE  ......... ......
  0050: 00 00 00 00 80 00 00 00 80 00 00 00 04 01 00 00  ................
  0060: 00 20 00 03 F4 00 C0 FE 00 00 00 00 00 00 00 00  . ..............
  0070: FF FF 00 00 06 83 00 00 00 20 00 03 F4 00 C0 FE  ......... ......
  0080: 00 00 00 00 00 00 00 00 FF FF 00 00 08 00 00 00  ................
  0090: 00 20 00 03 F0 00 C0 FE 00 00 00 00 01 00 00 00  . ..............
  00A0: 01 00 00 00 09 82 00 00 00 20 00 03 F0 00 C0 FE  ......... ......
  00B0: 00 00 00 00 01 00 00 00 01 00 00 00 0A 00 00 00  ................
  00C0: 00 20 00 03 F0 00 C0 FE 00 00 00 00 00 00 00 00  . ..............
  00D0: 01 00 00 00 0B 82 00 00 00 20 00 03 F0 00 C0 FE  ......... ......
  00E0: 00 00 00 00 00 00 00 00 01 00 00 00 10 00 00 00  ................
  00F0: 00 20 00 03 F0 00 C0 FE 00 00 00 00 00 00 00 00  . ..............
  0100: 04 00 00 00 11 82 00 00 00 20 00 03 F0 00 C0 FE  ......... ......
  0110: 00 00 00 00 00 00 00 00 06 00 00 00 12 00 00 00  ................
  0120: 00 20 00 03 F0 00 C0 FE 00 00 00 00 04 00 00 00  . ..............
  0130: 04 00 00 00 13 82 00 00 00 20 00 03 F0 00 C0 FE  ......... ......
  0140: 00 00 00 00 04 00 00 00 04 00 00 00 20 02 00 00  ............ ...
  0150: 01 08 00 01 D4 0C 00 00 00 00 00 00 EF 00 00 00  ................
  0160: FF 00 00 00 20 00 00 00 01 08 00 01 D5 0C 00 00  .... ...........
  0170: 00 00 00 00 01 00 00 00 01 00 00 00 21 02 00 00  ............!...
  0180: 01 08 00 01 D4 0C 00 00 00 00 00 00 EF 00 00 00  ................
  0190: FF 00 00 00 21 82 00 00 01 08 00 01 D5 0C 00 00  ....!...........
  01A0: 00 00 00 00 00 00 00 00 01 00 00 00              ............


WDRT
----
[000h 0000   4]                    Signature : "WDRT"    [Watchdog Resource Table]
[004h 0004   4]                 Table Length : 00000047
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : CD
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "18A6    "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000


[024h 0036  12]             Control Register : [Generic Address Structure]
[024h 0036   1]                     Space ID : 00 [SystemMemory]
[025h 0037   1]                    Bit Width : 20
[026h 0038   1]                   Bit Offset : 00
[027h 0039   1]         Encoded Access Width : 03 [DWord Access:32]
[028h 0040   8]                      Address : 00000000FEC000F0

[030h 0048  12]               Count Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 00 [SystemMemory]
[031h 0049   1]                    Bit Width : 20
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 03 [DWord Access:32]
[034h 0052   8]                      Address : 00000000FEC000F4

[03Ch 0060   2]                PCI Device ID : FFFF
[03Eh 0062   2]                PCI Vendor ID : FFFF
[040h 0064   1]                      PCI Bus : 00
[041h 0065   1]                   PCI Device : 00
[042h 0066   1]                 PCI Function : 00
[043h 0067   1]                  PCI Segment : 00
[044h 0068   2]                    Max Count : 03FF
[046h 0070   1]                Counter Units : 00

Raw Table Data: Length 71 (0x47)

  0000: 57 44 52 54 47 00 00 00 01 CD 48 50 51 4F 45 4D  WDRTG.....HPQOEM
  0010: 31 38 41 36 20 20 20 20 00 00 00 00 48 50 20 20  18A6    ....HP  
  0020: 00 00 04 00 00 20 00 03 F0 00 C0 FE 00 00 00 00  ..... ..........
  0030: 00 20 00 03 F4 00 C0 FE 00 00 00 00 FF FF FF FF  . ..............
  0040: 00 00 00 00 FF 03 00                             .......


XSDT
----
[000h 0000   4]                    Signature : "XSDT"    [Extended System Description Table]
[004h 0004   4]                 Table Length : 000000A4
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 06
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   8]       ACPI Table Address   0 : 00000000BFBFC000
[02Ch 0044   8]       ACPI Table Address   1 : 00000000BFBFD000
[034h 0052   8]       ACPI Table Address   2 : 00000000BFBFB000
[03Ch 0060   8]       ACPI Table Address   3 : 00000000BFBFA000
[044h 0068   8]       ACPI Table Address   4 : 00000000BFBF9000
[04Ch 0076   8]       ACPI Table Address   5 : 00000000BFBF8000
[054h 0084   8]       ACPI Table Address   6 : 00000000BFBE7000
[05Ch 0092   8]       ACPI Table Address   7 : 00000000BFBE6000
[064h 0100   8]       ACPI Table Address   8 : 00000000BFBE5000
[06Ch 0108   8]       ACPI Table Address   9 : 00000000BFBE4000
[074h 0116   8]       ACPI Table Address  10 : 00000000BFBE2000
[07Ch 0124   8]       ACPI Table Address  11 : 00000000BFBE1000
[084h 0132   8]       ACPI Table Address  12 : 00000000BFBE0000
[08Ch 0140   8]       ACPI Table Address  13 : 00000000BFBDE000
[094h 0148   8]       ACPI Table Address  14 : 00000000BFBD8000
[09Ch 0156   8]       ACPI Table Address  15 : 00000000BFBD7000

Raw Table Data: Length 164 (0xA4)

  0000: 58 53 44 54 A4 00 00 00 01 06 48 50 51 4F 45 4D  XSDT......HPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 48 50 20 20  SLIC-MPC....HP  
  0020: 13 00 00 01 00 C0 BF BF 00 00 00 00 00 D0 BF BF  ................
  0030: 00 00 00 00 00 B0 BF BF 00 00 00 00 00 A0 BF BF  ................
  0040: 00 00 00 00 00 90 BF BF 00 00 00 00 00 80 BF BF  ................
  0050: 00 00 00 00 00 70 BE BF 00 00 00 00 00 60 BE BF  .....p.......`..
  0060: 00 00 00 00 00 50 BE BF 00 00 00 00 00 40 BE BF  .....P.......@..
  0070: 00 00 00 00 00 20 BE BF 00 00 00 00 00 10 BE BF  ..... ..........
  0080: 00 00 00 00 00 00 BE BF 00 00 00 00 00 E0 BD BF  ................
  0090: 00 00 00 00 00 80 BD BF 00 00 00 00 00 70 BD BF  .............p..
  00A0: 00 00 00 00                                      ....


