
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20210604
Copyright (c) 2000 - 2021 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000257  0x01  "AMD   "  "STD3    "  0x00000001  "INTL"   0x20160527
 02)  MCFG  0x0000003C  0x01  "HPQOEM"  "8760    "  0x00000001  "HP  "   0x00000001
 03)  ASF!  0x0000006E  0x20  "HPQOEM"  "8760    "  0x00000001  "HP  "   0x00000001
 04)  APIC  0x00000138  0x02  "HPQOEM"  "8760    "  0x00000001  "HP  "   0x00000001
 05)  CRAT  0x00000F28  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 06)  SLIC  0x00000176  0x01  "HPQOEM"  "SLIC-BPC"  0x00000001  "HP  "   0x00000001
 07)  SSDT  0x0000012A  0x02  "HP    "  "ShmTable"  0x00000001  "INTL"   0x20160527
 08)  SSDT  0x00000668  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20160527
 09)  TPM2  0x00000034  0x03  "HPQOEM"  "EDK2    "  0x00000002  "    "   0x01000013
 10)  VFCT  0x0000D684  0x01  "HPQOEM"  "SLIC-BPC"  0x00000001  "AMD "   0x31504F47
 11)  SSDT  0x000032BA  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20160527
 12)  SSDT  0x000039F4  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 13)  SSDT  0x00000069  0x01  "HP    "  "HPCAHWID"  0x00001000  "INTL"   0x20160527
 14)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 15)  IVRS  0x000001A4  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000000
 16)  DSDT  0x00013B78  0x02  "HPQOEM"  "8760    "  0x00000000  "INTL"   0x20160527
 17)  SSDT  0x000000FB  0x02  "HP    "  "UcsiCntr"  0x00000001  "INTL"   0x20160527
 18)  SSDT  0x0000089D  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20160527
 19)  WSMT  0x00000028  0x01  "HPQOEM"  "8760    "  0x00000001  "HP  "   0x00000001
 20)  SSDT  0x00000E00  0x01  "HP    "  "HPADNBWL"  0x00001000  "INTL"   0x20160527
 21)  SSDT  0x00000148  0x01  "HP    "  "OPALPWD "  0x00000001  "INTL"   0x20160527
 22)  SSDT  0x0000069A  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20160527
 23)  SSDT  0x0000019B  0x01  "HP    "  "HPNBCONV"  0x00001000  "INTL"   0x20160527
 24)  SSDT  0x0000723C  0x02  "AMD   "  "AmdTable"  0x00000002  "MSFT"   0x04000000
 25)  SSDT  0x000000D0  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20160527
 26)  FACP  0x0000010C  0x05  "HPQOEM"  "SLIC-BPC"  0x00000001  "HP  "   0x00000001
 27)  FPDT  0x00000044  0x01  "HPQOEM"  "EDK2    "  0x00000002  "    "   0x01000013
 28)  SSDT  0x000002D7  0x01  "HP    "  "NVTEC   "  0x00000001  "INTL"   0x20160527
 29)  SSDT  0x00000241  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20160527
 30)  MSDM  0x00000055  0x03  "HPQOEM"  "SLIC-BPC"  0x00000000  "HP  "   0x00000001
 31)  SSDT  0x00000149  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20160527
 32)  RTMA  0x0000009E  0x01  "HP    "  "_HBMART_"  0x00001000  "HP  "   0x00000001
 33)  OEML  0x00000028  0x03  "HPQOEM"  "EDK2    "  0x00000002  "    "   0x01000013
 34)  SSDT  0x000005FB  0x02  "HPQOEM"  "Tpm2Tabl"  0x00001000  "INTL"   0x20160527
 35)  SSDT  0x000002F9  0x02  "HP    "  "PwrCtlEv"  0x00000001  "INTL"   0x20160527
 36)  SSDT  0x00000032  0x01  "HP    "  "HPCONDEV"  0x00001000  "INTL"   0x20160527
 37)  HPET  0x00000038  0x01  "HPQOEM"  "8760    "  0x00000001  "HP  "   0x00000001
 38)  SSDT  0x00001575  0x02  "HP    "  "UcsiAcpi"  0x00000001  "INTL"   0x20160527
 39)  SSDT  0x0000008D  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20160527
 40)  FACS  0x00000040  0x02
 41)  BGRT  0x00000038  0x01  "HPQOEM"  "EDK2    "  0x00000002  "    "   0x01000013
 42)  SSDT  0x00000542  0x01  "HP    "  "AMDTPL  "  0x00001000  "INTL"   0x20160527

Found 42 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000138
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 9C
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "8760    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 04
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 05
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 06
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 08
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 09
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 0A
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 0B
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 0C
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 0D
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 0E
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 0F
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 01 [I/O APIC]
[0ADh 0173   1]                       Length : 0C
[0AEh 0174   1]                  I/O Apic ID : 21
[0AFh 0175   1]                     Reserved : 00
[0B0h 0176   4]                      Address : FEC00000
[0B4h 0180   4]                    Interrupt : 00000000

[0B8h 0184   1]                Subtable Type : 01 [I/O APIC]
[0B9h 0185   1]                       Length : 0C
[0BAh 0186   1]                  I/O Apic ID : 22
[0BBh 0187   1]                     Reserved : 00
[0BCh 0188   4]                      Address : FEC01000
[0C0h 0192   4]                    Interrupt : 00000018

[0C4h 0196   1]                Subtable Type : 02 [Interrupt Source Override]
[0C5h 0197   1]                       Length : 0A
[0C6h 0198   1]                          Bus : 00
[0C7h 0199   1]                       Source : 00
[0C8h 0200   4]                    Interrupt : 00000002
[0CCh 0204   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0CEh 0206   1]                Subtable Type : 02 [Interrupt Source Override]
[0CFh 0207   1]                       Length : 0A
[0D0h 0208   1]                          Bus : 00
[0D1h 0209   1]                       Source : 09
[0D2h 0210   4]                    Interrupt : 00000009
[0D6h 0214   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[0D8h 0216   1]                Subtable Type : 04 [Local APIC NMI]
[0D9h 0217   1]                       Length : 06
[0DAh 0218   1]                 Processor ID : 00
[0DBh 0219   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0DDh 0221   1]         Interrupt Input LINT : 01

[0DEh 0222   1]                Subtable Type : 04 [Local APIC NMI]
[0DFh 0223   1]                       Length : 06
[0E0h 0224   1]                 Processor ID : 01
[0E1h 0225   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E3h 0227   1]         Interrupt Input LINT : 01

[0E4h 0228   1]                Subtable Type : 04 [Local APIC NMI]
[0E5h 0229   1]                       Length : 06
[0E6h 0230   1]                 Processor ID : 02
[0E7h 0231   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E9h 0233   1]         Interrupt Input LINT : 01

[0EAh 0234   1]                Subtable Type : 04 [Local APIC NMI]
[0EBh 0235   1]                       Length : 06
[0ECh 0236   1]                 Processor ID : 03
[0EDh 0237   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0EFh 0239   1]         Interrupt Input LINT : 01

[0F0h 0240   1]                Subtable Type : 04 [Local APIC NMI]
[0F1h 0241   1]                       Length : 06
[0F2h 0242   1]                 Processor ID : 04
[0F3h 0243   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F5h 0245   1]         Interrupt Input LINT : 01

[0F6h 0246   1]                Subtable Type : 04 [Local APIC NMI]
[0F7h 0247   1]                       Length : 06
[0F8h 0248   1]                 Processor ID : 05
[0F9h 0249   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FBh 0251   1]         Interrupt Input LINT : 01

[0FCh 0252   1]                Subtable Type : 04 [Local APIC NMI]
[0FDh 0253   1]                       Length : 06
[0FEh 0254   1]                 Processor ID : 06
[0FFh 0255   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[101h 0257   1]         Interrupt Input LINT : 01

[102h 0258   1]                Subtable Type : 04 [Local APIC NMI]
[103h 0259   1]                       Length : 06
[104h 0260   1]                 Processor ID : 07
[105h 0261   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[107h 0263   1]         Interrupt Input LINT : 01

[108h 0264   1]                Subtable Type : 04 [Local APIC NMI]
[109h 0265   1]                       Length : 06
[10Ah 0266   1]                 Processor ID : 08
[10Bh 0267   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Dh 0269   1]         Interrupt Input LINT : 01

[10Eh 0270   1]                Subtable Type : 04 [Local APIC NMI]
[10Fh 0271   1]                       Length : 06
[110h 0272   1]                 Processor ID : 09
[111h 0273   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[113h 0275   1]         Interrupt Input LINT : 01

[114h 0276   1]                Subtable Type : 04 [Local APIC NMI]
[115h 0277   1]                       Length : 06
[116h 0278   1]                 Processor ID : 0A
[117h 0279   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[119h 0281   1]         Interrupt Input LINT : 01

[11Ah 0282   1]                Subtable Type : 04 [Local APIC NMI]
[11Bh 0283   1]                       Length : 06
[11Ch 0284   1]                 Processor ID : 0B
[11Dh 0285   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Fh 0287   1]         Interrupt Input LINT : 01

[120h 0288   1]                Subtable Type : 04 [Local APIC NMI]
[121h 0289   1]                       Length : 06
[122h 0290   1]                 Processor ID : 0C
[123h 0291   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[125h 0293   1]         Interrupt Input LINT : 01

[126h 0294   1]                Subtable Type : 04 [Local APIC NMI]
[127h 0295   1]                       Length : 06
[128h 0296   1]                 Processor ID : 0D
[129h 0297   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Bh 0299   1]         Interrupt Input LINT : 01

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : 0E
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 04 [Local APIC NMI]
[133h 0307   1]                       Length : 06
[134h 0308   1]                 Processor ID : 0F
[135h 0309   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[137h 0311   1]         Interrupt Input LINT : 01

Raw Table Data: Length 312 (0x138)

    0000: 41 50 49 43 38 01 00 00 02 9C 48 50 51 4F 45 4D  // APIC8.....HPQOEM
    0010: 38 37 36 30 20 20 20 20 01 00 00 00 48 50 20 20  // 8760    ....HP  
    0020: 01 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 04  // ................
    0050: 01 00 00 00 00 08 05 05 01 00 00 00 00 08 06 06  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 08  // ................
    0070: 01 00 00 00 00 08 09 09 01 00 00 00 00 08 0A 0A  // ................
    0080: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0C 0C  // ................
    0090: 01 00 00 00 00 08 0D 0D 01 00 00 00 00 08 0E 0E  // ................
    00A0: 01 00 00 00 00 08 0F 0F 01 00 00 00 01 0C 21 00  // ..............!.
    00B0: 00 00 C0 FE 00 00 00 00 01 0C 22 00 00 10 C0 FE  // ..........".....
    00C0: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    00D0: 00 09 09 00 00 00 0F 00 04 06 00 05 00 01 04 06  // ................
    00E0: 01 05 00 01 04 06 02 05 00 01 04 06 03 05 00 01  // ................
    00F0: 04 06 04 05 00 01 04 06 05 05 00 01 04 06 06 05  // ................
    0100: 00 01 04 06 07 05 00 01 04 06 08 05 00 01 04 06  // ................
    0110: 09 05 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01  // ................
    0120: 04 06 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05  // ................
    0130: 00 01 04 06 0F 05 00 01                          // ........


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format Table]
[004h 0004   4]                 Table Length : 0000006E
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : C8
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "8760    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : FF
[029h 0041   1]     Minimum Polling Interval : 03
[02Ah 0042   2]                    System ID : 103C
[02Ch 0044   4]              Manufacturer ID : 11000000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 02 [ASF Remote Control]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 0018
[038h 0056   1]                Control Count : 04
[039h 0057   1]          Control Data Length : 04
[03Ah 0058   2]                     Reserved : 0000

[03Ch 0060   1]                     Function : 00
[03Dh 0061   1]                      Address : A8
[03Eh 0062   1]                      Command : 50
[03Fh 0063   1]                        Value : 00

[040h 0064   1]                     Function : 01
[041h 0065   1]                      Address : A8
[042h 0066   1]                      Command : 52
[043h 0067   1]                        Value : 00

[044h 0068   1]                     Function : 02
[045h 0069   1]                      Address : A8
[046h 0070   1]                      Command : 51
[047h 0071   1]                        Value : 00

[048h 0072   1]                     Function : 03
[049h 0073   1]                      Address : A8
[04Ah 0074   1]                      Command : 53
[04Bh 0075   1]                        Value : 00

[04Ch 0076   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[04Dh 0077   1]                     Reserved : 00
[04Eh 0078   2]                       Length : 0017
[050h 0080   7]                 Capabilities : 22 F8 00 00 00 13 0F
[057h 0087   1]              Completion Code : 00
[058h 0088   4]                Enterprise ID : 00000000
[05Ch 0092   1]                      Command : 00
[05Dh 0093   2]                    Parameter : 0000
[05Fh 0095   2]                 Boot Options : 0001
[061h 0097   2]               Oem Parameters : 0000

[063h 0099   1]                Subtable Type : 84 [ASF Address]
[064h 0100   1]                     Reserved : 00
[065h 0101   2]                       Length : 000B
[067h 0103   1]                Eprom Address : 00
[068h 0104   1]                 Device Count : 05
[069h 0105   1]                    Addresses : A0 A2 A4 A6 C2 


Raw Table Data: Length 110 (0x6E)

    0000: 41 53 46 21 6E 00 00 00 20 C8 48 50 51 4F 45 4D  // ASF!n... .HPQOEM
    0010: 38 37 36 30 20 20 20 20 01 00 00 00 48 50 20 20  // 8760    ....HP  
    0020: 01 00 00 00 00 00 10 00 FF 03 3C 10 00 00 00 11  // ..........<.....
    0030: 00 00 00 00 02 00 18 00 04 04 00 00 00 A8 50 00  // ..............P.
    0040: 01 A8 52 00 02 A8 51 00 03 A8 53 00 03 00 17 00  // ..R...Q...S.....
    0050: 22 F8 00 00 00 13 0F 00 00 00 00 00 00 00 00 01  // "...............
    0060: 00 00 00 84 00 0B 00 00 05 A0 A2 A4 A6 C2        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B1
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "EDK2    "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000AD958018
[030h 0048   4]                Image OffsetX : 00000326
[034h 0052   4]                Image OffsetY : 000000FC

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 B1 48 50 51 4F 45 4D  // BGRT8.....HPQOEM
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 20 20 20 20  // EDK2    ....    
    0020: 13 00 00 01 01 00 01 00 18 80 95 AD 00 00 00 00  // ................
    0030: 26 03 00 00 FC 00 00 00                          // &.......


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E7
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000F28
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4E
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 3880 (0xF28)

    0000: 43 52 41 54 28 0F 00 00 01 4E 41 4D 44 00 00 00  // CRAT(....NAMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 3D 00 00 00 00 00 00 00 00 00 00 00  // ....=...........
    0030: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 00 00 00 00 00 00 0A 00 00 00 00 00 40 00 00 00  // ............@...
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 F4 CF  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0090: 01 00 00 00 00 00 00 30 07 00 00 00 40 00 00 00  // .......0....@...
    00A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    00B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0120: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0130: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0160: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0170: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 10 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    01A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    01B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0220: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0230: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0260: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0270: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    02B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0320: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0330: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0360: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0370: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    03A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    03B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    03E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    03F0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0420: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0430: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0460: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0470: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    04A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    04B0: 08 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 00 10 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    04E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    04F0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0520: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0530: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0560: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0570: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    05A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    05B0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    05E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    05F0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0620: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0630: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0660: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0670: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    06A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    06B0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    06E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    06F0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0720: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0730: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0760: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0770: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    07A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    07B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    07E0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    07F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0820: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0830: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0860: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0870: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    08A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    08B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    08E0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    08F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0920: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0930: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0960: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0970: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    09A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    09B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    09E0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    09F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0A20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0A30: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0A60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0A70: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0AA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0AB0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0AE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0AF0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0B20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0B30: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0B60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0B70: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0BA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0BB0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0BE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0BF0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0C20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0C30: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0C60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0C70: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0CA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0CB0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0CE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0CF0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0D20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0D30: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0D60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0D70: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0DA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0DB0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0DE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0DF0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0E20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0E30: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0E60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0E70: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0EA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0EB0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0EE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0EF0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0F20: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "HPQOEM", "8760    ", 0x00000000)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.APPM, MethodObj)    // 1 Arguments
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.BUSA.GFX0.G01F, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.G307, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.G309, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP12.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.HGME, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.ACS1, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.BCSC, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.EC10, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.EC12, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.EC13, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.GBBI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.PSCF, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.SLPT, FieldUnitObj)
    External (_SB_.PCI0.PEG0.PEGP, UnknownObj)
    External (_SB_.PCI0.PEG0.PEGP.PSBR, UnknownObj)
    External (_SB_.PLTF.C000._PSS, IntObj)
    External (_SB_.PLTF.C000.PPCV, UnknownObj)
    External (_SB_.PLTF.C001.PPCV, UnknownObj)
    External (_SB_.PLTF.C002.PPCV, UnknownObj)
    External (_SB_.PLTF.C003.PPCV, UnknownObj)
    External (_SB_.PLTF.C004.PPCV, UnknownObj)
    External (_SB_.PLTF.C005.PPCV, UnknownObj)
    External (_SB_.PLTF.C006.PPCV, UnknownObj)
    External (_SB_.PLTF.C007.PPCV, UnknownObj)
    External (_SB_.PLTF.C008.PPCV, UnknownObj)
    External (_SB_.PLTF.C009.PPCV, UnknownObj)
    External (_SB_.PLTF.C00A.PPCV, UnknownObj)
    External (_SB_.PLTF.C00B.PPCV, UnknownObj)
    External (_SB_.PLTF.C00C.PPCV, UnknownObj)
    External (_SB_.PLTF.C00D.PPCV, UnknownObj)
    External (_SB_.PLTF.C00E.PPCV, UnknownObj)
    External (_SB_.PLTF.C00F.PPCV, UnknownObj)
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (_TZ_.BOTT, MethodObj)    // 0 Arguments
    External (_TZ_.RETD, MethodObj)    // 0 Arguments
    External (BUSA.GFX0.PSBR, IntObj)
    External (EC14, FieldUnitObj)
    External (EC15, FieldUnitObj)
    External (G270, FieldUnitObj)
    External (GS69, FieldUnitObj)
    External (GV27, FieldUnitObj)
    External (GV42, FieldUnitObj)
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (PEG0.PEGP.PSBR, IntObj)
    External (TPM_._STA, UnknownObj)
    External (WPPE, UnknownObj)    // Conflicts with a later declaration
    External (WPWK, UnknownObj)    // Conflicts with a later declaration
    External (WWBR, UnknownObj)    // Conflicts with a later declaration

    OperationRegion (HPSA, SystemMemory, 0xB40D5000, 0x00000008)
    Field (HPSA, AnyAcc, Lock, Preserve)
    {
        SFG1,   4, 
        SFG2,   4, 
        Offset (0x04), 
        LPDP,   16, 
        OSIF,   8, 
        PRDT,   8
    }

    Scope (_SB)
    {
        Device (HEPH)
        {
            Name (_HID, "HPIC0013")  // _HID: Hardware ID
            OperationRegion (HSXB, SystemMemory, 0xB40B8000, 0x00000101)
            Field (HSXB, AnyAcc, NoLock, Preserve)
            {
                ENBL,   8, 
                HBSR,   2048
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local0 = Zero
                If ((ENBL == One))
                {
                    Local0 = 0x0F
                }

                Return (Local0)
            }

            Method (HHGS, 0, Serialized)
            {
                Local1 = 0x20
                Local4 = Buffer (0x20) {}
                GSWS (0x91F3)
                Local5 = HBSR /* \_SB_.HEPH.HBSR */
                CreateField (Local5, Zero, (Local1 * 0x08), DLLS)
                Local3 = DLLS /* \_SB_.HEPH.HHGS.DLLS */
                HBSR = Local4
                Return (Local3)
            }
        }
    }

    Name (GOSI, 0xFF)
    Method (GTOS, 0, Serialized)
    {
        If ((GOSI == 0xFF))
        {
            GOSI = Zero
            If (CondRefOf (\_OSI))
            {
                If (_OSI ("Linux"))
                {
                    GOSI = One
                }

                If (_OSI ("Windows 2001"))
                {
                    GOSI = 0x04
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    GOSI = 0x04
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    GOSI = 0x05
                }

                If (_OSI ("Windows 2006"))
                {
                    GOSI = 0x06
                }

                If (_OSI ("Windows 2009"))
                {
                    GOSI = 0x07
                }

                If (_OSI ("Windows 2012"))
                {
                    GOSI = 0x08
                }

                If (_OSI ("Windows 2013"))
                {
                    GOSI = 0x09
                }

                If (_OSI ("Windows 2015"))
                {
                    GOSI = 0x0A
                }

                If (_OSI ("Windows 2016"))
                {
                    GOSI = 0x0B
                }

                If (_OSI ("Windows 2017"))
                {
                    GOSI = 0x0C
                }
            }

            OSIF = GOSI /* \GOSI */
        }

        Return (GOSI) /* \GOSI */
    }

    Method (B2I4, 3, Serialized)
    {
        Name (INTE, 0xFFFFFFFF)
        INTE &= Zero
        Local2 = Arg2
        If ((Local2 > 0x04))
        {
            Local2 = 0x04
        }

        Local1 = (Arg1 * 0x08)
        Local3 = (Local2 * 0x08)
        CreateField (Arg0, Local1, Local3, TINT)
        INTE = TINT /* \B2I4.TINT */
        Return (INTE) /* \B2I4.INTE */
    }

    Name (B2SD, "                                                                                                                                                                                                                                                               ")
    Name
    Method (B2ST, 2, Serialized)
    {
        If ((Arg1 > Zero))
        {
            Local0 = Buffer (Arg1) {}
            Local0 = Arg0
            If ((Arg1 > 0x0100))
            {
                B2S4 = Local0
                Local1 = B2S4 /* \B2S4 */
            }
            Else
            {
                B2SD = Local0
                Local1 = B2SD /* \B2SD */
            }
        }
        Else
        {
            B2SD = Arg0
            Local1 = B2SD /* \B2SD */
        }

        Return (Local1)
    }

    Method (CPBF, 5, Serialized)
    {
        Local7 = Zero
        Local1 = DerefOf (Arg1)
        Local3 = DerefOf (Arg3)
        If ((((Local1 + Arg4) <= SizeOf (Arg0)) && (
            (Local3 + Arg4) <= SizeOf (Arg2))))
        {
            CreateField (Arg0, (Local1 * 0x08), (Arg4 * 0x08), DEST)
            CreateField (Arg2, (Local3 * 0x08), (Arg4 * 0x08), SRCE)
            DEST = SRCE /* \CPBF.SRCE */
            Local7 = One
            Local1 += Arg4
            Local3 += Arg4
            Arg1 = Local1
            Arg3 = Local3
        }

        Return (Local7)
    }

    OperationRegion (HPMA, SystemMemory, 0xB40B5000, 0x0000005C)
    Field (HPMA, AnyAcc, Lock, Preserve)
    {
        RVD2,   4, 
        LEGF,   1, 
        KCDB,   1, 
        KLDB,   1, 
        TPMX,   1, 
        FOAL,   1, 
        AEDA,   1, 
        ALSF,   1, 
        HSED,   1, 
        HDEN,   1, 
        MDEN,   1, 
        ICPT,   1, 
        PMCS,   1, 
        RVD1,   3, 
        ITPS,   1, 
        FCIN,   1, 
        RSVD,   11, 
        TBDO,   8, 
        TBRB,   32, 
        TJMX,   8, 
        TRCN,   8, 
        LOTR,   160, 
        HITR,   160, 
        DTCD,   32, 
        SMHO,   32, 
        IVPS,   8, 
        BLPS,   8, 
        UR0B,   32, 
        AC10,   32, 
        AC11,   32, 
        AC12,   32, 
        CFAP,   8, 
        CFIG,   32, 
        CFPG,   32, 
        AMFR,   32, 
        SNMT,   8, 
        SZMD,   8
    }

    OperationRegion (HPEC, SystemMemory, 0xB40D2000, 0x00000004)
    Field (HPEC, AnyAcc, Lock, Preserve)
    {
        EC14,   16, 
        EC15,   16
    }

    OperationRegion (HPGF, SystemMemory, 0xB40D1000, 0x00000291)
    Field (HPGF, AnyAcc, Lock, Preserve)
    {
        G03E,   2048, 
        G07D,   32, 
        G07E,   8, 
        G07F,   8, 
        G080,   8, 
        G081,   8, 
        G082,   88, 
        G083,   216, 
        G084,   200, 
        G085,   400, 
        G086,   16, 
        G087,   16, 
        G088,   8, 
        G089,   88, 
        G08A,   176, 
        G08B,   32, 
        G08C,   32, 
        G08D,   8, 
        G08E,   8, 
        G08F,   16, 
        G090,   16, 
        G091,   16, 
        G092,   16, 
        G093,   8, 
        G045,   8, 
        G094,   8, 
        G03F,   32, 
        G040,   8, 
        G041,   32, 
        G042,   32, 
        G043,   32, 
        G044,   32, 
        G046,   8, 
        G047,   8, 
        G048,   32, 
        G049,   8, 
        G04A,   8, 
        G04B,   32, 
        G04C,   8, 
        G04D,   8, 
        G04E,   32, 
        G04F,   8, 
        G050,   8, 
        G051,   32, 
        G052,   8, 
        G076,   32, 
        G077,   32, 
        G078,   32, 
        G079,   224, 
        G095,   32, 
        G096,   32, 
        G053,   8, 
        G054,   32, 
        G055,   8, 
        G056,   8, 
        G057,   32, 
        G058,   8, 
        G059,   8, 
        G05A,   32, 
        G05B,   8, 
        G05C,   8, 
        G05D,   32, 
        G05E,   8, 
        G05F,   8, 
        G060,   8, 
        G064,   8, 
        G065,   8, 
        G066,   8, 
        G061,   32, 
        G062,   32, 
        G067,   32, 
        G068,   32, 
        G069,   8, 
        G06A,   8, 
        G06B,   8, 
        G06C,   8, 
        G06D,   32, 
        G063,   8, 
        G06E,   8, 
        G06F,   8, 
        G070,   8, 
        G071,   8, 
        G072,   8, 
        G073,   16, 
        G0D5,   16, 
        G251,   8, 
        G074,   8, 
        G07A,   32, 
        G07B,   32, 
        G07C,   32, 
        G0BD,   16, 
        G0B7,   8, 
        G0C2,   8, 
        G0C3,   8, 
        G0C4,   32, 
        G0C5,   8, 
        G0C6,   8, 
        G0C7,   8, 
        G0C8,   8, 
        G0C9,   8, 
        G0A0,   8, 
        G0D0,   8, 
        G0D1,   8, 
        G270,   8, 
        G271,   8, 
        G272,   32, 
        G276,   8, 
        G277,   8, 
        G278,   32, 
        G27C,   8, 
        G27D,   32, 
        G281,   32, 
        G285,   8, 
        G286,   8, 
        G287,   8, 
        G288,   8, 
        G289,   8, 
        G28A,   8, 
        G28B,   8, 
        G28C,   8, 
        G28D,   8, 
        G28E,   8, 
        G28F,   8, 
        G290,   8
    }

    OperationRegion (HPCD, SystemMemory, 0xB40D3000, 0x0000013D)
    Field (HPCD, AnyAcc, Lock, Preserve)
    {
        CDP1,   32, 
        CDP2,   32, 
        WDDA,   896, 
        WFLS,   8, 
        WLID,   8, 
        BTID,   8, 
        WWID,   8, 
        W2ID,   8, 
        GSID,   8, 
        WGID,   8, 
        WRD1,   16, 
        WRD2,   16, 
        WTXE,   8, 
        WTX0,   8, 
        WTX1,   8, 
        WTX2,   8, 
        WTX3,   8, 
        WTX4,   8, 
        WTX5,   8, 
        WTX6,   8, 
        WTX7,   8, 
        WTX8,   8, 
        WTX9,   8, 
        WGEN,   8, 
        WGR1,   8, 
        WGR2,   8, 
        WGR3,   8, 
        WGR4,   8, 
        DSDG,   8, 
        DWRS,   8, 
        DWNS,   8, 
        DS21,   8, 
        DS22,   8, 
        DS23,   8, 
        DS24,   8, 
        DS25,   8, 
        DS26,   8, 
        DS27,   8, 
        DS28,   8, 
        DS29,   8, 
        DS2A,   8, 
        DS31,   8, 
        DS32,   8, 
        DS33,   8, 
        DS34,   8, 
        DS35,   8, 
        DS36,   8, 
        DS37,   8, 
        DS38,   8, 
        DS39,   8, 
        DS3A,   8, 
        DS41,   8, 
        DS42,   8, 
        DS43,   8, 
        DS44,   8, 
        DS45,   8, 
        DS46,   8, 
        DS47,   8, 
        DS48,   8, 
        DS49,   8, 
        DS4A,   8, 
        DSCS,   32, 
        NF2M,   8, 
        NF2A,   8, 
        NF2B,   8, 
        NF5M,   8, 
        NF5A,   8, 
        NF5B,   8, 
        NJ2M,   8, 
        NJ2A,   8, 
        NJ2B,   8, 
        NJ5M,   8, 
        NJ5A,   8, 
        NJ5B,   8, 
        NR2M,   8, 
        NR2A,   8, 
        NR2B,   8, 
        NR5M,   8, 
        NR5A,   8, 
        NR5B,   8, 
        WOWA,   8, 
        WWIG,   8, 
        UGPS,   8, 
        WWBR,   32, 
        WPPE,   32, 
        WPWK,   32, 
        WCLN,   16, 
        CDKP,   192, 
        RTXE,   8, 
        RT00,   8, 
        RT01,   8, 
        RT02,   8, 
        RT03,   8, 
        RT04,   8, 
        RT05,   8, 
        RT06,   8, 
        RT07,   8, 
        RT08,   8, 
        RT09,   8, 
        RT10,   8, 
        RT11,   8, 
        RT12,   8, 
        RT13,   8, 
        RT14,   8, 
        RT15,   8, 
        RT16,   8, 
        RT17,   8, 
        RT18,   8, 
        RT19,   8, 
        GA20,   8, 
        GA21,   8, 
        GA22,   8, 
        GA23,   8, 
        GA24,   8, 
        GA50,   8, 
        GA51,   8, 
        GA52,   8, 
        GA53,   8, 
        GA54,   8, 
        GB20,   8, 
        GB21,   8, 
        GB22,   8, 
        GB23,   8, 
        GB24,   8, 
        GB50,   8, 
        GB51,   8, 
        GB52,   8, 
        GB53,   8, 
        GB54,   8, 
        GC20,   8, 
        GC21,   8, 
        GC22,   8, 
        GC23,   8, 
        GC24,   8, 
        GC50,   8, 
        GC51,   8, 
        GC52,   8, 
        GC53,   8, 
        GC54,   8, 
        RFGN,   32, 
        RFCR,   32, 
        WPWN,   32, 
        HBTR,   32, 
        RVFB,   8, 
        RAFB,   8, 
        RCWG,   32, 
        PWWS,   8
    }

    OperationRegion (HPWM, SystemMemory, 0xB40BD000, 0x00009018)
    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        PWOT,   32, 
        PWOI,   32, 
        PUWB,   294912, 
        PUWS,   32, 
        STIC,   16, 
        INIC,   16, 
        ENIC,   16, 
        OLIC,   16, 
        PWIC,   16, 
        BUIC,   16
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBL,   8000
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBM,   3200
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBS,   1200
    }

    Device (_SB.WMIB)
    {
        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
        Mutex (PUMX, 0x00)
        Name (WDG, Buffer (0xF0)
        {
            /* 0000 */  0xE3, 0x08, 0x8D, 0x98, 0xF4, 0x68, 0x35, 0x4C,  // .....h5L
            /* 0008 */  0xAF, 0x3E, 0x6A, 0x1B, 0x81, 0x06, 0xF8, 0x3C,  // .>j....<
            /* 0010 */  0x53, 0x54, 0x00, 0x00, 0x3D, 0xDE, 0x32, 0x82,  // ST..=.2.
            /* 0018 */  0x3D, 0x66, 0x27, 0x43, 0xA8, 0xF4, 0xE2, 0x93,  // =f'C....
            /* 0020 */  0xAD, 0xB9, 0xBF, 0x05, 0x49, 0x4E, 0x00, 0x00,  // ....IN..
            /* 0028 */  0x49, 0x4B, 0x11, 0x2D, 0xFB, 0x2D, 0x30, 0x41,  // IK.-.-0A
            /* 0030 */  0xB8, 0xFE, 0x4A, 0x3C, 0x09, 0xE7, 0x51, 0x33,  // ..J<..Q3
            /* 0038 */  0x45, 0x4E, 0x00, 0x00, 0x46, 0x97, 0xEA, 0x14,  // EN..F...
            /* 0040 */  0x1F, 0xCE, 0x98, 0x40, 0xA0, 0xE0, 0x70, 0x45,  // ...@..pE
            /* 0048 */  0xCB, 0x4D, 0xA7, 0x45, 0x4F, 0x4C, 0x00, 0x00,  // .M.EOL..
            /* 0050 */  0x28, 0x20, 0x2F, 0x32, 0x84, 0x0F, 0x01, 0x49,  // ( /2...I
            /* 0058 */  0x98, 0x8E, 0x01, 0x51, 0x76, 0x04, 0x9E, 0x2D,  // ...Qv..-
            /* 0060 */  0x50, 0x57, 0x00, 0x00, 0xB6, 0x63, 0x4E, 0xDF,  // PW...cN.
            /* 0068 */  0xBC, 0x3B, 0x58, 0x48, 0x97, 0x37, 0xC7, 0x4F,  // .;XH.7.O
            /* 0070 */  0x82, 0xF8, 0x21, 0xF3, 0x42, 0x55, 0x00, 0x00,  // ..!.BU..
            /* 0078 */  0x2D, 0x7C, 0x22, 0x41, 0xE1, 0x80, 0x3F, 0x42,  // -|"A..?B
            /* 0080 */  0x8B, 0x8E, 0x87, 0xE3, 0x27, 0x55, 0xA0, 0xEB,  // ....'U..
            /* 0088 */  0x50, 0x45, 0x02, 0x00, 0x36, 0x64, 0x1F, 0x8F,  // PE..6d..
            /* 0090 */  0x42, 0x9F, 0xC8, 0x42, 0xBA, 0xDC, 0x0E, 0x94,  // B..B....
            /* 0098 */  0x24, 0xF2, 0x0C, 0x9A, 0x53, 0x53, 0x00, 0x00,  // $...SS..
            /* 00A0 */  0xEB, 0x91, 0x4C, 0x1F, 0x5C, 0xDC, 0x0B, 0x46,  // ..L.\..F
            /* 00A8 */  0x95, 0x1D, 0xC7, 0xCB, 0x9B, 0x4B, 0x8D, 0x5E,  // .....K.^
            /* 00B0 */  0x42, 0x53, 0x01, 0x02, 0x61, 0xA6, 0x91, 0x73,  // BS..a..s
            /* 00B8 */  0x3A, 0x22, 0xDB, 0x47, 0xA7, 0x7A, 0x7B, 0xE8,  // :".G.z{.
            /* 00C0 */  0x4C, 0x60, 0x82, 0x2D, 0x55, 0x49, 0x01, 0x02,  // L`.-UI..
            /* 00C8 */  0x18, 0x43, 0x81, 0x2B, 0xE8, 0x4B, 0x07, 0x47,  // .C.+.K.G
            /* 00D0 */  0x9D, 0x84, 0xA1, 0x90, 0xA8, 0x59, 0xB5, 0xD0,  // .....Y..
            /* 00D8 */  0x80, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
            /* 00E0 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
            /* 00E8 */  0xC9, 0x06, 0x29, 0x10, 0x5A, 0x5A, 0x01, 0x00   // ..).ZZ..
        })
        Name (WDUN, Ones)
        Method (_WDG, 0, Serialized)
        {
            If (WDUN)
            {
                Acquire (PUMX, 0xFFFF)
                WDUN = Zero
                GSWS (0x04F3)
                UWIC (Zero, STIC)
                UWIC (One, INIC)
                UWIC (0x02, ENIC)
                UWIC (0x03, OLIC)
                If ((PWIC == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = PWIC /* \PWIC */
                }

                UWIC (0x04, Local0)
                UWIC (0x05, BUIC)
                UWIC (0x06, SizeOf (CBWE))
                UWIC (0x07, WSSC)
                Release (PUMX)
            }

            Return (WDG) /* \_SB_.WMIB.WDG_ */
        }

        Method (UWIC, 2, Serialized)
        {
            Local0 = (Arg0 * 0x14)
            Local0 += 0x12
            WDG [Local0] = Arg1
        }

        Name (WQZZ, Buffer (0x1CF5)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0xE5, 0x1C, 0x00, 0x00, 0x18, 0x96, 0x00, 0x00,  // ........
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0x28, 0xB9, 0x86, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
            /* 0020 */  0x10, 0x3D, 0x10, 0x92, 0x64, 0x82, 0x42, 0x04,  // .=..d.B.
            /* 0028 */  0x12, 0x01, 0x61, 0x18, 0x14, 0x01, 0x01, 0x92,  // ..a.....
            /* 0030 */  0x0B, 0x0E, 0x45, 0x82, 0x42, 0xF5, 0x27, 0x90,  // ..E.B.'.
            /* 0038 */  0x1C, 0x10, 0x99, 0x14, 0xA0, 0x5B, 0x80, 0x73,  // .....[.s
            /* 0040 */  0x01, 0xD2, 0x05, 0x18, 0x06, 0x91, 0x63, 0x01,  // ......c.
            /* 0048 */  0x96, 0x05, 0xE8, 0x44, 0x91, 0x6D, 0x10, 0x11,  // ...D.m..
            /* 0050 */  0x18, 0x2B, 0x41, 0x07, 0x10, 0x02, 0xF5, 0x00,  // .+A.....
            /* 0058 */  0x3C, 0x0A, 0xEE, 0x1A, 0x50, 0xE6, 0x47, 0x40,  // <...P.G@
            /* 0060 */  0x20, 0x0A, 0x82, 0x43, 0xC9, 0x80, 0x90, 0x72,  //  ..C...r
            /* 0068 */  0x38, 0x4D, 0xA0, 0xE4, 0x91, 0x50, 0x88, 0xC2,  // 8M...P..
            /* 0070 */  0x46, 0x83, 0x12, 0x02, 0x21, 0x87, 0x93, 0x91,  // F...!...
            /* 0078 */  0x4D, 0x01, 0x52, 0x05, 0x98, 0x15, 0x20, 0x54,  // M.R... T
            /* 0080 */  0x80, 0x45, 0x20, 0x8D, 0xC7, 0xD0, 0x4D, 0xCF,  // .E ...M.
            /* 0088 */  0x47, 0x9E, 0x21, 0x89, 0xFC, 0x41, 0xA0, 0x46,  // G.!..A.F
            /* 0090 */  0x66, 0x68, 0x1B, 0x9C, 0x96, 0x30, 0x43, 0xD6,  // fh...0C.
            /* 0098 */  0x3E, 0x2C, 0x2A, 0x16, 0x42, 0x0A, 0x20, 0x34,  // >,*.B. 4
            /* 00A0 */  0x1E, 0xF0, 0x2B, 0x14, 0xE0, 0x1B, 0x41, 0xB2,  // ..+...A.
            /* 00A8 */  0xB1, 0xC9, 0x80, 0x12, 0x0C, 0x34, 0x70, 0xF4,  // .....4p.
            /* 00B0 */  0x28, 0x3C, 0x68, 0x5C, 0x80, 0x41, 0x53, 0x51,  // (<h\.ASQ
            /* 00B8 */  0x20, 0x94, 0xC0, 0x52, 0x20, 0xE4, 0x15, 0x51,  //  ..R ..Q
            /* 00C0 */  0xF3, 0x2A, 0x11, 0x55, 0x47, 0x00, 0x8F, 0x24,  // .*.UG..$
            /* 00C8 */  0xCA, 0x63, 0x01, 0x1B, 0x37, 0xF0, 0x59, 0x85,  // .c..7.Y.
            /* 00D0 */  0x81, 0xFD, 0xFF, 0x1F, 0x18, 0x17, 0x03, 0xA2,  // ........
            /* 00D8 */  0xB1, 0x1C, 0x45, 0xD0, 0x03, 0x0F, 0x6A, 0xE1,  // ..E...j.
            /* 00E0 */  0x33, 0x27, 0x93, 0x3C, 0x46, 0x47, 0x85, 0x90,  // 3'.<FG..
            /* 00E8 */  0x04, 0x08, 0xCD, 0x21, 0x34, 0x46, 0x12, 0x84,  // ...!4F..
            /* 00F0 */  0x9C, 0x8E, 0x02, 0x05, 0x17, 0x3E, 0xCC, 0xF1,  // .....>..
            /* 00F8 */  0x19, 0xE7, 0xF8, 0x0C, 0xCF, 0x47, 0xDB, 0xFA,  // .....G..
            /* 0100 */  0xAC, 0x85, 0x10, 0x10, 0x8F, 0x73, 0x7C, 0x6C,  // .....s|l
            /* 0108 */  0xC0, 0xE0, 0x38, 0x18, 0x00, 0x87, 0x01, 0xE3,  // ..8.....
            /* 0110 */  0x13, 0x0D, 0x58, 0x4E, 0x06, 0x8C, 0x1A, 0x8F,  // ..XN....
            /* 0118 */  0xA1, 0x4F, 0x8B, 0x21, 0x1E, 0x5F, 0xD8, 0xB7,  // .O.!._..
            /* 0120 */  0x0A, 0x13, 0x54, 0x0F, 0x2A, 0x0B, 0x43, 0x03,  // ..T.*.C.
            /* 0128 */  0x0D, 0xA0, 0x87, 0x06, 0x5F, 0xE4, 0xD0, 0x4C,  // ...._..L
            /* 0130 */  0xE9, 0x21, 0x50, 0xAD, 0x78, 0x9A, 0xF7, 0x91,  // .!P.x...
            /* 0138 */  0xC7, 0x3C, 0xB7, 0x28, 0x6F, 0x03, 0xCF, 0x01,  // .<.(o...
            /* 0140 */  0xFC, 0xB4, 0xE0, 0xE1, 0xF8, 0x58, 0xE0, 0x71,  // .....X.q
            /* 0148 */  0xDA, 0x18, 0x84, 0x94, 0x41, 0xC8, 0x19, 0x84,  // ....A...
            /* 0150 */  0xA4, 0x41, 0x28, 0xD9, 0x10, 0x50, 0x83, 0xF5,  // .A(..P..
            /* 0158 */  0x10, 0x30, 0x53, 0x4D, 0xE0, 0x24, 0x23, 0x40,  // .0SM.$#@
            /* 0160 */  0x65, 0x80, 0x90, 0xD5, 0xE9, 0xEA, 0x2C, 0x12,  // e.....,.
            /* 0168 */  0xE2, 0x34, 0x7B, 0x3F, 0x16, 0x90, 0xB1, 0x3E,  // .4{?...>
            /* 0170 */  0x18, 0x58, 0xB3, 0x80, 0xFF, 0xFF, 0x08, 0xCF,  // .X......
            /* 0178 */  0x35, 0xF6, 0x99, 0x3D, 0x1D, 0x60, 0x56, 0x11,  // 5..=.`V.
            /* 0180 */  0xAE, 0xE8, 0x1B, 0x06, 0x41, 0x7B, 0xB6, 0xF0,  // ....A{..
            /* 0188 */  0x35, 0x23, 0x60, 0xB8, 0x08, 0xE1, 0xD8, 0x1D,  // 5#`.....
            /* 0190 */  0xE0, 0x24, 0x3D, 0x92, 0x08, 0x2F, 0x08, 0xEC,  // .$=../..
            /* 0198 */  0xC4, 0x10, 0xE4, 0x6D, 0xC5, 0x93, 0x37, 0xAC,  // ...m..7.
            /* 01A0 */  0xA7, 0xDC, 0x27, 0x94, 0x40, 0x83, 0x19, 0xDB,  // ..'.@...
            /* 01A8 */  0x97, 0x01, 0x36, 0x2A, 0x5F, 0x0C, 0xE0, 0xCF,  // ..6*_...
            /* 01B0 */  0x24, 0xAC, 0x91, 0x4F, 0xF4, 0x50, 0x4D, 0x30,  // $..O.PM0
            /* 01B8 */  0xF9, 0xC5, 0x00, 0xCA, 0x2C, 0x7C, 0x3D, 0xF1,  // ....,|=.
            /* 01C0 */  0x15, 0xC1, 0xA8, 0x2F, 0x06, 0x2C, 0xE5, 0xC5,  // .../.,..
            /* 01C8 */  0x00, 0x54, 0x37, 0x0C, 0x5F, 0x0C, 0xE0, 0xCB,  // .T7._...
            /* 01D0 */  0xBD, 0x18, 0x80, 0x42, 0xDC, 0x3D, 0x80, 0x7A,  // ...B.=.z
            /* 01D8 */  0x80, 0x90, 0xAC, 0x71, 0x52, 0x6B, 0x37, 0x03,  // ...qRk7.
            /* 01E0 */  0x72, 0x36, 0x60, 0x30, 0x9E, 0x61, 0x18, 0x63,  // r6`0.a.c
            /* 01E8 */  0x84, 0xF1, 0x28, 0xC3, 0x98, 0x60, 0xEE, 0xDB,  // ..(..`..
            /* 01F0 */  0x01, 0xF4, 0x9C, 0xC3, 0x40, 0x25, 0xBC, 0x1D,  // ....@%..
            /* 01F8 */  0x40, 0x39, 0x07, 0x74, 0x79, 0x34, 0xA1, 0xA7,  // @9.ty4..
            /* 0200 */  0x80, 0xA7, 0x03, 0xCF, 0xEE, 0x8D, 0xC0, 0xBE,  // ........
            /* 0208 */  0xC6, 0x2A, 0x98, 0x40, 0x11, 0x1F, 0x34, 0xF8,  // .*.@..4.
            /* 0210 */  0xD4, 0xA2, 0xF8, 0x54, 0xE0, 0xB5, 0xD4, 0x08,  // ...T....
            /* 0218 */  0x27, 0x9C, 0x33, 0xF1, 0x54, 0x0D, 0x67, 0xA0,  // '.3.T.g.
            /* 0220 */  0xAA, 0xE1, 0x10, 0xFF, 0x7F, 0x38, 0xEC, 0xA9,  // .....8..
            /* 0228 */  0xE0, 0x35, 0x80, 0x41, 0xBC, 0xB1, 0x9C, 0x96,  // .5.A....
            /* 0230 */  0x11, 0x61, 0x1C, 0x52, 0x1E, 0x19, 0x6C, 0x0B,  // .a.R..l.
            /* 0238 */  0x87, 0x40, 0x86, 0x79, 0x27, 0x60, 0x90, 0x15,  // .@.y'`..
            /* 0240 */  0x9F, 0x77, 0x08, 0xF0, 0x2B, 0x42, 0x9C, 0x08,  // .w..+B..
            /* 0248 */  0xEF, 0x0C, 0xEC, 0xB2, 0x00, 0xBE, 0x48, 0x97,  // ......H.
            /* 0250 */  0x05, 0x34, 0xB4, 0x4F, 0x32, 0xBE, 0x20, 0x18,  // .4.O2. .
            /* 0258 */  0xF6, 0xC4, 0x59, 0x80, 0xBB, 0x02, 0xA8, 0x40,  // ..Y....@
            /* 0260 */  0x7D, 0x57, 0x80, 0x7F, 0x21, 0x78, 0x57, 0x00,  // }W..!xW.
            /* 0268 */  0xC3, 0xBC, 0x7C, 0x2B, 0xE0, 0x9A, 0x0E, 0x25,  // ..|+...%
            /* 0270 */  0xE8, 0x33, 0x89, 0xAF, 0x0B, 0xB8, 0x29, 0xB2,  // .3....).
            /* 0278 */  0x54, 0x47, 0x05, 0xE8, 0x29, 0x26, 0x81, 0xD2,  // TG..)&..
            /* 0280 */  0x7F, 0x54, 0x80, 0x34, 0xC3, 0x27, 0x92, 0xD7,  // .T.4.'..
            /* 0288 */  0x00, 0x9F, 0x16, 0xF8, 0x59, 0x88, 0x5D, 0x47,  // ....Y.]G
            /* 0290 */  0x70, 0x57, 0x12, 0x86, 0xF2, 0x6C, 0xE0, 0x4B,  // pW...l.K
            /* 0298 */  0x16, 0x3F, 0x1C, 0xC0, 0x00, 0xF7, 0x2C, 0x0E,  // .?....,.
            /* 02A0 */  0x31, 0x42, 0x6C, 0x76, 0xE0, 0x7A, 0x35, 0x78,  // 1Blv.z5x
            /* 02A8 */  0x2F, 0xF0, 0x85, 0x88, 0xFF, 0xFF, 0x4F, 0x06,  // /.....O.
            /* 02B0 */  0xE0, 0x13, 0x08, 0x8C, 0x3E, 0x1A, 0xD8, 0xAF,  // ....>...
            /* 02B8 */  0x00, 0x84, 0xE0, 0x65, 0x8E, 0x43, 0x73, 0x89,  // ...e.Cs.
            /* 02C0 */  0xF0, 0xA4, 0x63, 0xF8, 0x48, 0xCF, 0x2C, 0x7C,  // ..c.H.,|
            /* 02C8 */  0x06, 0xA7, 0xE5, 0x11, 0x98, 0xC0, 0x07, 0x1E,  // ........
            /* 02D0 */  0x32, 0x00, 0x7A, 0xCE, 0xF1, 0x00, 0xF8, 0x31,  // 2.z....1
            /* 02D8 */  0x22, 0xFE, 0xE1, 0x84, 0x0D, 0x1C, 0x3E, 0xCA,  // ".....>.
            /* 02E0 */  0x39, 0x1C, 0x8F, 0xAF, 0x24, 0x11, 0xEA, 0x82,  // 9...$...
            /* 02E8 */  0xD0, 0x21, 0xC2, 0x08, 0x07, 0x10, 0xE5, 0xBC,  // .!......
            /* 02F0 */  0xDF, 0x14, 0x4C, 0xE0, 0xE3, 0x80, 0x0F, 0x0C,  // ..L.....
            /* 02F8 */  0xFC, 0x14, 0xE7, 0x21, 0xC1, 0x98, 0x72, 0x14,  // ...!..r.
            /* 0300 */  0x7B, 0x9C, 0x14, 0x19, 0x1E, 0x3B, 0x35, 0x78,  // {....;5x
            /* 0308 */  0x3C, 0x1C, 0x1A, 0x87, 0xF8, 0x40, 0x70, 0xAE,  // <....@p.
            /* 0310 */  0x56, 0x3A, 0x43, 0xE4, 0x29, 0xC2, 0x93, 0x3A,  // V:C.)..:
            /* 0318 */  0xC2, 0x03, 0xC4, 0x0E, 0x80, 0xCB, 0x7B, 0x55,  // ......{U
            /* 0320 */  0x19, 0xC8, 0x3F, 0x04, 0x09, 0x82, 0x41, 0x5D,  // ..?...A]
            /* 0328 */  0x64, 0x7C, 0xD2, 0xC3, 0x0F, 0x81, 0x1D, 0x26,  // d|.....&
            /* 0330 */  0xD8, 0x39, 0xC9, 0x70, 0xFC, 0x00, 0xE0, 0x51,  // .9.p...Q
            /* 0338 */  0xBD, 0xE1, 0xBC, 0x74, 0x79, 0x98, 0x3E, 0x22,  // ...ty.>"
            /* 0340 */  0x84, 0x64, 0x47, 0x31, 0xDC, 0xA9, 0xC2, 0x57,  // .dG1...W
            /* 0348 */  0x05, 0x5F, 0x45, 0x8C, 0xF8, 0xB0, 0xE2, 0x53,  // ._E....S
            /* 0350 */  0x83, 0xA1, 0x60, 0x1C, 0x06, 0x30, 0x37, 0x42,  // ..`..07B
            /* 0358 */  0xDF, 0x13, 0x0C, 0xF5, 0x9E, 0x74, 0x18, 0x8F,  // .....t..
            /* 0360 */  0x84, 0x26, 0xF0, 0xA5, 0xE1, 0x28, 0x30, 0x47,  // .&...(0G
            /* 0368 */  0x0E, 0xDF, 0x96, 0x0C, 0xEF, 0xFF, 0x3F, 0x81,  // ......?.
            /* 0370 */  0xDD, 0x9F, 0x13, 0x84, 0xFF, 0x94, 0xF3, 0x7E,  // .......~
            /* 0378 */  0xF1, 0x16, 0xF0, 0xA8, 0x10, 0x23, 0xCA, 0x83,  // .....#..
            /* 0380 */  0x4A, 0x94, 0x48, 0xA7, 0x1B, 0x85, 0x79, 0xBB,  // J.H...y.
            /* 0388 */  0x39, 0x08, 0x22, 0x4A, 0x73, 0x73, 0x13, 0x52,  // 9."Jss.R
            /* 0390 */  0xA0, 0x28, 0x47, 0x1E, 0x33, 0x4E, 0xAC, 0x20,  // .(G.3N. 
            /* 0398 */  0x81, 0xDE, 0x37, 0xA2, 0x84, 0x8D, 0x11, 0x2E,  // ..7.....
            /* 03A0 */  0x50, 0xFB, 0xC7, 0x04, 0x36, 0x64, 0x7A, 0x56,  // P...6dzV
            /* 03A8 */  0xC0, 0x9D, 0x1D, 0xE0, 0x4E, 0x8F, 0x9F, 0x1E,  // ....N...
            /* 03B0 */  0x00, 0x27, 0x40, 0x4F, 0x0F, 0x60, 0x3B, 0x6F,  // .'@O.`;o
            /* 03B8 */  0xC0, 0x3D, 0x10, 0x20, 0xBE, 0x2B, 0x06, 0xA2,  // .=. .+..
            /* 03C0 */  0xC1, 0xAF, 0x2C, 0x14, 0x8E, 0x87, 0xBE, 0x59,  // ..,....Y
            /* 03C8 */  0xD1, 0x63, 0x09, 0xEE, 0x70, 0xE0, 0x23, 0x83,  // .c..p.#.
            /* 03D0 */  0x0F, 0x90, 0xB8, 0xA1, 0xF8, 0x50, 0x81, 0x3C,  // .....P.<
            /* 03D8 */  0x0B, 0x80, 0x62, 0xF4, 0x6C, 0x04, 0xEC, 0x06,  // ..b.l...
            /* 03E0 */  0xF3, 0xD2, 0xF2, 0xDE, 0xE0, 0xFF, 0xFF, 0x1C,  // ........
            /* 03E8 */  0x7C, 0x4A, 0xC1, 0x1D, 0x04, 0xC0, 0x77, 0x0C,  // |J....w.
            /* 03F0 */  0x00, 0xEF, 0x60, 0xB8, 0xAC, 0x31, 0xA3, 0x84,  // ..`..1..
            /* 03F8 */  0xC0, 0x68, 0xCC, 0xB8, 0x43, 0x08, 0x3F, 0x11,  // .h..C.?.
            /* 0400 */  0xE0, 0xC6, 0xEC, 0x71, 0x7B, 0xCC, 0xB8, 0xE3,  // ...q{...
            /* 0408 */  0x2C, 0x1F, 0xD5, 0x53, 0x46, 0x28, 0x1F, 0x38,  // ,..SF(.8
            /* 0410 */  0xD8, 0x39, 0xE3, 0x8D, 0x80, 0x0F, 0x1D, 0x78,  // .9.....x
            /* 0418 */  0x1C, 0x60, 0x70, 0x47, 0x0A, 0x30, 0x5E, 0x0E,  // .`pG.0^.
            /* 0420 */  0xD8, 0xD8, 0xC1, 0x1D, 0x84, 0x9C, 0x02, 0x59,  // .......Y
            /* 0428 */  0x3A, 0x8C, 0xC6, 0x8E, 0x93, 0x0D, 0xA4, 0x63,  // :......c
            /* 0430 */  0x8C, 0x0F, 0xB9, 0x1E, 0x3B, 0x6E, 0xB0, 0x1E,  // ....;n..
            /* 0438 */  0x3B, 0xEE, 0xF8, 0x82, 0xFF, 0xFF, 0x1F, 0x5F,  // ;......_
            /* 0440 */  0xE0, 0x8F, 0x81, 0x8B, 0x1F, 0x06, 0xFA, 0xE6,  // ........
            /* 0448 */  0xE7, 0xD1, 0x19, 0xDC, 0xC3, 0xF6, 0x09, 0x26,  // .......&
            /* 0450 */  0xC6, 0x1B, 0x4C, 0x88, 0x47, 0x96, 0x97, 0x96,  // ..L.G...
            /* 0458 */  0x08, 0x0F, 0x2D, 0xBE, 0xB9, 0xBC, 0xB4, 0xF8,  // ..-.....
            /* 0460 */  0x16, 0x63, 0x94, 0x10, 0x11, 0x0E, 0x26, 0xCE,  // .c....&.
            /* 0468 */  0x13, 0x8C, 0x11, 0x0E, 0x3C, 0x8A, 0x21, 0x22,  // ....<.!"
            /* 0470 */  0x9C, 0x40, 0x88, 0x93, 0x3E, 0xD9, 0x20, 0xE1,  // .@..>. .
            /* 0478 */  0x63, 0x84, 0x8D, 0x16, 0xE5, 0x09, 0x86, 0x8D,  // c.......
            /* 0480 */  0x85, 0x9F, 0x57, 0x3C, 0x78, 0x7E, 0x5A, 0xF3,  // ..W<x~Z.
            /* 0488 */  0x5D, 0xD0, 0x93, 0x39, 0xC7, 0x87, 0x2C, 0x4F,  // ]..9..,O
            /* 0490 */  0xED, 0x71, 0xD2, 0x87, 0x59, 0xDC, 0xA0, 0x1E,  // .q..Y...
            /* 0498 */  0x1C, 0xD9, 0x5D, 0xC7, 0xC7, 0x6B, 0xEC, 0x29,  // ..]..k.)
            /* 04A0 */  0xC8, 0x43, 0xE0, 0x27, 0x02, 0x5F, 0x10, 0x3D,  // .C.'._.=
            /* 04A8 */  0x59, 0xDF, 0xF5, 0xD8, 0xBD, 0xCC, 0x18, 0xD5,  // Y.......
            /* 04B0 */  0x4F, 0x01, 0x75, 0x4C, 0x39, 0x83, 0x57, 0x08,  // O.uL9.W.
            /* 04B8 */  0x76, 0xCF, 0xF3, 0x21, 0xDB, 0x77, 0x49, 0x36,  // v..!.wI6
            /* 04C0 */  0x0A, 0xDC, 0x21, 0xC1, 0x67, 0x24, 0x7E, 0xAA,  // ..!.g$~.
            /* 04C8 */  0xF0, 0x30, 0x3C, 0x0A, 0x18, 0x33, 0x78, 0x47,  // .0<..3xG
            /* 04D0 */  0x38, 0xB4, 0x10, 0x07, 0xFC, 0xBE, 0xCB, 0x86,  // 8.......
            /* 04D8 */  0x1A, 0xE3, 0xF4, 0x7C, 0xFE, 0x60, 0x83, 0x80,  // ...|.`..
            /* 04E0 */  0x0F, 0x75, 0xA8, 0x1E, 0xE6, 0x51, 0xBD, 0x14,  // .u...Q..
            /* 04E8 */  0x32, 0x9C, 0xB3, 0x83, 0x3B, 0x08, 0xEC, 0xF1,  // 2...;...
            /* 04F0 */  0xC3, 0x83, 0xE0, 0x37, 0x4B, 0x3E, 0x08, 0x76,  // ...7K>.v
            /* 04F8 */  0xBE, 0x79, 0x83, 0x33, 0xC8, 0x31, 0xFC, 0xFF,  // .y.3.1..
            /* 0500 */  0x8F, 0x01, 0xEE, 0x99, 0xCA, 0x47, 0x13, 0xC4,  // .....G..
            /* 0508 */  0x11, 0x10, 0x7D, 0xFE, 0xF0, 0x18, 0xDE, 0xE4,  // ..}.....
            /* 0510 */  0xF8, 0x70, 0xB0, 0x47, 0x0F, 0xDC, 0x49, 0x04,  // .p.G..I.
            /* 0518 */  0xEE, 0xB1, 0xEB, 0xA0, 0x7D, 0x8D, 0xF3, 0x45,  // ....}..E
            /* 0520 */  0x0B, 0xC6, 0x7D, 0xEF, 0x59, 0x04, 0xFC, 0x18,  // ..}.Y...
            /* 0528 */  0x8F, 0x2D, 0xE0, 0x38, 0x94, 0x80, 0x3B, 0xD8,  // .-.8..;.
            /* 0530 */  0x71, 0x8D, 0x43, 0x28, 0x0A, 0x8C, 0x0E, 0x25,  // q.C(...%
            /* 0538 */  0xB8, 0x18, 0x40, 0x82, 0x71, 0x8C, 0x33, 0x1A,  // ..@.q.3.
            /* 0540 */  0xFA, 0x12, 0xE9, 0x43, 0x1A, 0x9C, 0x41, 0xC3,  // ...C..A.
            /* 0548 */  0x9E, 0xE7, 0x13, 0x0A, 0xB7, 0x27, 0x40, 0xD1,  // .....'@.
            /* 0550 */  0x09, 0x05, 0x64, 0xB8, 0xCF, 0x20, 0xD8, 0x13,  // ..d.. ..
            /* 0558 */  0x02, 0x3F, 0x83, 0xF0, 0xFF, 0x3F, 0xF4, 0x71,  // .?...?.q
            /* 0560 */  0xBF, 0x37, 0xFA, 0xD4, 0xC8, 0xE6, 0xFE, 0x10,  // .7......
            /* 0568 */  0x70, 0x02, 0xE7, 0xCE, 0x4E, 0xCD, 0xB8, 0x33,  // p...N..3
            /* 0570 */  0x03, 0xF6, 0xFC, 0xE1, 0x21, 0xF0, 0x73, 0x81,  // ....!.s.
            /* 0578 */  0x87, 0xEF, 0x21, 0xE0, 0x07, 0xFF, 0xC0, 0x6C,  // ..!....l
            /* 0580 */  0x70, 0x30, 0x9E, 0x22, 0x7C, 0xED, 0xE0, 0xE0,  // p0."|...
            /* 0588 */  0xFC, 0x34, 0x60, 0x70, 0xFE, 0x0A, 0xF5, 0x79,  // .4`p...y
            /* 0590 */  0x9E, 0x81, 0x63, 0x4F, 0xBD, 0xBE, 0x77, 0x78,  // ..cO..wx
            /* 0598 */  0xBE, 0x3E, 0x54, 0xE0, 0x6F, 0x7A, 0x3E, 0x54,  // .>T.oz>T
            /* 05A0 */  0x80, 0xE3, 0xF0, 0xC0, 0x0F, 0x2B, 0x6C, 0x08,  // .....+l.
            /* 05A8 */  0x8F, 0x02, 0xF8, 0x53, 0x8B, 0x8F, 0x7F, 0x71,  // ...S...q
            /* 05B0 */  0x9E, 0x22, 0xD8, 0x6D, 0x04, 0x7B, 0xB8, 0x00,  // .".m.{..
            /* 05B8 */  0x1C, 0x45, 0x3B, 0x8B, 0xA1, 0xC2, 0x9C, 0xC5,  // .E;.....
            /* 05C0 */  0xE8, 0xFF, 0xFF, 0x1C, 0x85, 0x38, 0x8B, 0xD1,  // .....8..
            /* 05C8 */  0xC3, 0x05, 0xE0, 0x42, 0xF0, 0xF1, 0x00, 0x34,  // ...B...4
            /* 05D0 */  0x07, 0x81, 0xC7, 0x05, 0x5F, 0x08, 0x8E, 0xE4,  // ...._...
            /* 05D8 */  0x40, 0x9E, 0x0E, 0x00, 0x9F, 0xF2, 0x48, 0xE8,  // @.....H.
            /* 05E0 */  0xF9, 0xC8, 0x82, 0x60, 0x50, 0xE7, 0x03, 0x9F,  // ...`P...
            /* 05E8 */  0x50, 0x7C, 0xEC, 0xE0, 0x67, 0x03, 0xDF, 0xC8,  // P|..g...
            /* 05F0 */  0x3D, 0x54, 0x7E, 0x6A, 0xF6, 0x49, 0x9B, 0x07,  // =T~j.I..
            /* 05F8 */  0xFF, 0x49, 0xCB, 0x06, 0x8C, 0x02, 0x0D, 0x03,  // .I......
            /* 0600 */  0x35, 0x22, 0x1F, 0x91, 0xFC, 0xFF, 0x3F, 0xB7,  // 5"....?.
            /* 0608 */  0xE1, 0x02, 0x0C, 0x8D, 0x9E, 0xC3, 0x61, 0x1C,  // ......a.
            /* 0610 */  0x70, 0x7D, 0x0E, 0xC7, 0x0E, 0xC8, 0xE7, 0x70,  // p}.....p
            /* 0618 */  0xF8, 0xE7, 0x68, 0xF8, 0x63, 0x63, 0xA7, 0x7B,  // ..h.cc.{
            /* 0620 */  0x3E, 0x30, 0x58, 0xD7, 0x6F, 0xCC, 0xC0, 0xC0,  // >0X.o...
            /* 0628 */  0xF6, 0x2D, 0xF2, 0xC0, 0x80, 0x23, 0xEA, 0xD9,  // .-...#..
            /* 0630 */  0xF8, 0x0A, 0xE1, 0x81, 0x81, 0x0D, 0xD0, 0x03,  // ........
            /* 0638 */  0x03, 0x3E, 0xB1, 0x20, 0xE4, 0x64, 0x60, 0xA8,  // .>. .d`.
            /* 0640 */  0x53, 0x86, 0x91, 0x63, 0x3E, 0x71, 0x78, 0x18,  // S..c>qx.
            /* 0648 */  0x3E, 0x54, 0x44, 0x7D, 0x06, 0x78, 0xC4, 0x63,  // >TD}.x.c
            /* 0650 */  0x63, 0xE3, 0xFF, 0xFF, 0xB1, 0x81, 0xE3, 0xD8,  // c.......
            /* 0658 */  0xE2, 0xB1, 0x81, 0xFF, 0x08, 0x8F, 0x1F, 0x1B,  // ........
            /* 0660 */  0x9C, 0xB1, 0x3C, 0x9A, 0xF8, 0x32, 0x73, 0x64,  // ..<..2sd
            /* 0668 */  0xA7, 0x71, 0x66, 0xAF, 0x21, 0x3E, 0xDA, 0x3D,  // .qf.!>.=
            /* 0670 */  0x7E, 0x7B, 0x6C, 0xE0, 0xB2, 0x30, 0x36, 0xA0,  // ~{l..06.
            /* 0678 */  0x14, 0x72, 0x6C, 0xE8, 0x43, 0x8A, 0x4F, 0x01,  // .rl.C.O.
            /* 0680 */  0x36, 0x8E, 0x4A, 0xE6, 0xE1, 0xE3, 0x95, 0x4F,  // 6.J....O
            /* 0688 */  0x0C, 0x47, 0x17, 0xE4, 0x0D, 0xDD, 0x97, 0x0B,  // .G......
            /* 0690 */  0x1F, 0x69, 0x0C, 0xE6, 0x4B, 0x8B, 0xCF, 0xA0,  // .i..K...
            /* 0698 */  0x7C, 0x88, 0xE0, 0xD2, 0x30, 0x44, 0xA0, 0x14,  // |...0D..
            /* 06A0 */  0x6A, 0x88, 0xE8, 0xF1, 0xF8, 0xFF, 0x7F, 0x99,  // j.......
            /* 06A8 */  0x39, 0x44, 0x36, 0x34, 0xF0, 0x7E, 0x63, 0x34,  // 9D64.~c4
            /* 06B0 */  0x34, 0x20, 0x14, 0x6E, 0x68, 0xE8, 0xC3, 0x9A,  // 4 .nh...
            /* 06B8 */  0x0F, 0x01, 0x0C, 0xC2, 0xB7, 0x01, 0x76, 0x15,  // ......v.
            /* 06C0 */  0xF0, 0x55, 0xC8, 0x03, 0x7C, 0x12, 0x65, 0xC3,  // .U..|.e.
            /* 06C8 */  0x03, 0xDF, 0xA0, 0x3C, 0x3C, 0xE0, 0x13, 0x1E,  // ...<<...
            /* 06D0 */  0xD8, 0xAB, 0xF0, 0xF0, 0xE8, 0x59, 0xC9, 0xC3,  // .....Y..
            /* 06D8 */  0x83, 0x07, 0xF2, 0x18, 0xC1, 0xCE, 0x21, 0x1E,  // ......!.
            /* 06E0 */  0x1C, 0x38, 0x4C, 0x0C, 0x0E, 0x14, 0x47, 0x7F,  // .8L...G.
            /* 06E8 */  0xDC, 0x10, 0xD8, 0x65, 0xD6, 0x13, 0xE7, 0x57,  // ...e...W
            /* 06F0 */  0x16, 0x0F, 0x0A, 0xC6, 0xFF, 0xFF, 0x08, 0x00,  // ........
            /* 06F8 */  0xE7, 0x38, 0x03, 0xBE, 0x60, 0x87, 0x03, 0xF4,  // .8..`...
            /* 0700 */  0x31, 0x91, 0x8D, 0xE1, 0x21, 0xE2, 0xC1, 0xD5,  // 1...!...
            /* 0708 */  0x03, 0xF1, 0xB5, 0xE3, 0xB5, 0x18, 0x77, 0x34,  // ......w4
            /* 0710 */  0x00, 0x97, 0x8A, 0xA3, 0x01, 0x50, 0x3A, 0xD8,  // .....P:.
            /* 0718 */  0x82, 0xE3, 0x9E, 0xE6, 0xA3, 0x1D, 0x66, 0x8E,  // ......f.
            /* 0720 */  0x1E, 0xC0, 0xF3, 0x9B, 0x47, 0xCB, 0xCF, 0x6F,  // ....G..o
            /* 0728 */  0x80, 0xA3, 0xA0, 0x07, 0x5B, 0x3A, 0x70, 0x47,  // ....[:pG
            /* 0730 */  0x83, 0x41, 0x9D, 0xDF, 0x70, 0xFF, 0xFF, 0xF3,  // .A..p...
            /* 0738 */  0x1B, 0xFC, 0x08, 0xE0, 0x3A, 0xD3, 0xF8, 0xFC,  // ....:...
            /* 0740 */  0x02, 0x67, 0xA8, 0x07, 0xED, 0x6B, 0x82, 0x67,  // .g...k.g
            /* 0748 */  0xED, 0x1B, 0x17, 0x3B, 0x27, 0x80, 0x6B, 0x40,  // ...;'.k@
            /* 0750 */  0x3E, 0xE9, 0x00, 0x47, 0xE0, 0x93, 0x78, 0xC0,  // >..G..x.
            /* 0758 */  0x3F, 0x34, 0x30, 0x0F, 0xCB, 0x43, 0x03, 0x3E,  // ?40..C.>
            /* 0760 */  0x47, 0x03, 0xDC, 0x89, 0x02, 0x3C, 0xB7, 0x11,  // G....<..
            /* 0768 */  0xDC, 0x81, 0x02, 0x78, 0xFC, 0xFF, 0x0F, 0x14,  // ...x....
            /* 0770 */  0xC0, 0xE9, 0x88, 0xEF, 0x71, 0x71, 0x68, 0x1C,  // ....qqh.
            /* 0778 */  0xE2, 0x43, 0xDA, 0x39, 0xFB, 0xFC, 0x75, 0xA6,  // .C.9..u.
            /* 0780 */  0xB8, 0xB3, 0x08, 0x18, 0xC6, 0xC0, 0xE5, 0x2F,  // ......./
            /* 0788 */  0x89, 0x8A, 0x78, 0x60, 0x48, 0x30, 0x0C, 0xEA,  // ..x`H0..
            /* 0790 */  0x04, 0xE4, 0xA1, 0xF8, 0x60, 0xC0, 0x81, 0x7D,  // ....`..}
            /* 0798 */  0x44, 0x60, 0xE7, 0x02, 0x76, 0x80, 0x32, 0x1C,  // D`..v.2.
            /* 07A0 */  0x3F, 0x0B, 0xF8, 0x94, 0xF0, 0x50, 0x73, 0x1C,  // ?....Ps.
            /* 07A8 */  0x8F, 0x9B, 0xBE, 0x9B, 0x19, 0x92, 0x5D, 0x0D,  // ......].
            /* 07B0 */  0x9E, 0x7F, 0xB0, 0xA7, 0x5D, 0x38, 0x47, 0x5C,  // ....]8G\
            /* 07B8 */  0x70, 0x11, 0xF8, 0xAC, 0xE3, 0x51, 0xF0, 0xD3,  // p....Q..
            /* 07C0 */  0x83, 0xE7, 0xF8, 0xC6, 0xE0, 0xD3, 0x03, 0x73,  // .......s
            /* 07C8 */  0x2F, 0xC0, 0xDC, 0xA1, 0x5B, 0x08, 0xC7, 0xF4,  // /...[...
            /* 07D0 */  0xFA, 0x10, 0xE3, 0xA8, 0x1F, 0x1B, 0xDA, 0x12,  // ........
            /* 07D8 */  0xA0, 0x0D, 0x45, 0x77, 0x80, 0x97, 0x81, 0x28,  // ..Ew...(
            /* 07E0 */  0x21, 0x8E, 0x20, 0x52, 0x6B, 0x28, 0x9A, 0x79,  // !. Rk(.y
            /* 07E8 */  0xA4, 0x28, 0x01, 0xE3, 0x19, 0xA6, 0xB1, 0xC9,  // .(......
            /* 07F0 */  0x08, 0x32, 0x46, 0xE8, 0x38, 0xC1, 0xA2, 0x44,  // .2F.8..D
            /* 07F8 */  0x7B, 0x05, 0x68, 0x7F, 0x10, 0x44, 0xEC, 0xD1,  // {.h..D..
            /* 0800 */  0x84, 0x46, 0x3A, 0x59, 0xA2, 0x87, 0xED, 0x63,  // .F:Y...c
            /* 0808 */  0x36, 0xFE, 0xB4, 0x8A, 0xFB, 0xFF, 0x5F, 0x55,  // 6....._U
            /* 0810 */  0xFC, 0x05, 0xF0, 0x01, 0x00, 0xEF, 0x12, 0x50,  // .......P
            /* 0818 */  0x57, 0x47, 0x8F, 0xDB, 0xE7, 0x0D, 0xF0, 0x5F,  // WG....._
            /* 0820 */  0x2F, 0xB0, 0x47, 0x04, 0x0D, 0x02, 0x35, 0x32,  // /.G...52
            /* 0828 */  0x43, 0x7B, 0x9C, 0x6F, 0x33, 0x86, 0x7C, 0x72,  // C{.o3.|r
            /* 0830 */  0xF2, 0x20, 0xC9, 0x09, 0x15, 0x68, 0x0C, 0xFE,  // . ...h..
            /* 0838 */  0x69, 0xC3, 0xD7, 0x76, 0xCF, 0xD7, 0x27, 0x2F,  // i..v..'/
            /* 0840 */  0xEC, 0x71, 0x04, 0xEE, 0x35, 0x81, 0x1F, 0x48,  // .q..5..H
            /* 0848 */  0x00, 0x67, 0x40, 0x0F, 0x24, 0x60, 0xFA, 0xFF,  // .g@.$`..
            /* 0850 */  0x1F, 0x48, 0xE0, 0x0C, 0x15, 0x37, 0x04, 0x1E,  // .H...7..
            /* 0858 */  0x61, 0x45, 0xF4, 0x30, 0x60, 0xD1, 0x30, 0xA8,  // aE.0`.0.
            /* 0860 */  0x33, 0x14, 0xB8, 0xC4, 0x81, 0xEB, 0xF0, 0xE8,  // 3.......
            /* 0868 */  0xF3, 0x2A, 0x9C, 0x41, 0x9D, 0x76, 0xEF, 0x17,  // .*.A.v..
            /* 0870 */  0x10, 0x72, 0x39, 0xF0, 0xA0, 0xCF, 0xE7, 0x49,  // .r9....I
            /* 0878 */  0x81, 0x1D, 0xA2, 0x80, 0xFF, 0xD8, 0xE0, 0xDC,  // ........
            /* 0880 */  0x00, 0x9E, 0x6C, 0x23, 0x1C, 0x1B, 0xD8, 0x4F,  // ..l#...O
            /* 0888 */  0x51, 0xC0, 0xE9, 0xBC, 0x05, 0xE7, 0x5A, 0xC3,  // Q.....Z.
            /* 0890 */  0x6E, 0xE0, 0xB8, 0xA1, 0x61, 0xFF, 0xFF, 0x43,  // n...a..C
            /* 0898 */  0x83, 0x7F, 0x7C, 0xF7, 0x81, 0x10, 0x30, 0x70,  // ..|...0p
            /* 08A0 */  0x10, 0xE2, 0x97, 0x8A, 0x67, 0x22, 0x7E, 0xE0,  // ....g"~.
            /* 08A8 */  0x02, 0x9C, 0x9F, 0x48, 0xF8, 0x69, 0xCB, 0x27,  // ...H.i.'
            /* 08B0 */  0x12, 0x7E, 0xE0, 0x02, 0xFF, 0xFF, 0xFF, 0xC0,  // .~......
            /* 08B8 */  0x05, 0xCC, 0xEF, 0x57, 0xEF, 0x0C, 0x2F, 0x0D,  // ...W../.
            /* 08C0 */  0x9E, 0xD3, 0xFB, 0x96, 0x31, 0x5E, 0xB4, 0x8C,  // ....1^..
            /* 08C8 */  0x10, 0x85, 0xDD, 0x06, 0xA2, 0xD9, 0xDB, 0x81,  // ........
            /* 08D0 */  0x8B, 0x9C, 0xBA, 0x38, 0x66, 0xA4, 0xA7, 0xAF,  // ...8f...
            /* 08D8 */  0x60, 0x91, 0x22, 0x1E, 0x4E, 0x94, 0x10, 0xC1,  // `.".N...
            /* 08E0 */  0x5E, 0x27, 0x9E, 0xBC, 0x1E, 0xB8, 0x98, 0xE0,  // ^'......
            /* 08E8 */  0x03, 0x17, 0xD0, 0x71, 0x7D, 0xE0, 0x02, 0xB4,  // ...q}...
            /* 08F0 */  0x9E, 0x9B, 0x70, 0xC0, 0xFE, 0xFF, 0x1F, 0xB8,  // ..p.....
            /* 08F8 */  0xC0, 0x74, 0x22, 0x01, 0x5C, 0x8F, 0x15, 0xC6,  // .t".\...
            /* 0900 */  0x18, 0x78, 0x98, 0xE3, 0x08, 0x3F, 0x54, 0xE2,  // .x...?T.
            /* 0908 */  0xE0, 0xA8, 0xF4, 0x83, 0x16, 0x3D, 0x74, 0xFB,  // .....=t.
            /* 0910 */  0x44, 0x81, 0x9F, 0xCB, 0x33, 0xB7, 0xEF, 0x07,  // D...3...
            /* 0918 */  0x3E, 0x14, 0x81, 0xFD, 0xA4, 0x05, 0x1C, 0x0E,  // >.......
            /* 0920 */  0xE8, 0xB8, 0xFF, 0x3F, 0x81, 0x03, 0x1D, 0x9F,  // ...?....
            /* 0928 */  0xD0, 0xA3, 0xF0, 0xA1, 0x1D, 0x77, 0xCC, 0x02,  // .....w..
            /* 0930 */  0xFE, 0x91, 0x81, 0xBD, 0x0A, 0x0F, 0x8C, 0xB2,  // ........
            /* 0938 */  0x18, 0xF5, 0x0D, 0xE2, 0x10, 0xDF, 0xEF, 0x7D,  // .......}
            /* 0940 */  0x96, 0x7B, 0xCF, 0xF0, 0x25, 0x00, 0x73, 0xD3,  // .{..%.s.
            /* 0948 */  0xF7, 0x89, 0x80, 0x1D, 0x7B, 0x7C, 0xD2, 0x02,  // ....{|..
            /* 0950 */  0x4E, 0x43, 0x60, 0xF7, 0x1F, 0xCF, 0x9C, 0x0F,  // NC`.....
            /* 0958 */  0xE1, 0x6C, 0x3C, 0x7A, 0xDC, 0x89, 0x00, 0x7C,  // .l<z...|
            /* 0960 */  0xC7, 0x12, 0xF0, 0x9C, 0x2C, 0x30, 0x33, 0x08,  // ....,03.
            /* 0968 */  0xFF, 0xF4, 0xC1, 0x8E, 0x82, 0x3E, 0xBF, 0x78,  // .....>.x
            /* 0970 */  0xD2, 0x2F, 0x2A, 0x3E, 0x96, 0x80, 0xED, 0xFF,  // ./*>....
            /* 0978 */  0x7F, 0xEE, 0x02, 0x3C, 0x46, 0x39, 0x74, 0xA1,  // ...<F9t.
            /* 0980 */  0xC4, 0x9F, 0xBB, 0x00, 0x81, 0xB7, 0x2E, 0xDF,  // ........
            /* 0988 */  0x94, 0x23, 0xBC, 0x08, 0x9C, 0x41, 0x88, 0x67,  // .#...A.g
            /* 0990 */  0xAD, 0xF7, 0xAD, 0x48, 0xBE, 0x03, 0xC4, 0x79,  // ...H...y
            /* 0998 */  0xEE, 0x32, 0xD8, 0x6B, 0xC7, 0x83, 0x44, 0x94,  // .2.k..D.
            /* 09A0 */  0x67, 0x66, 0x43, 0x3D, 0x37, 0x1B, 0xEA, 0xE4,  // gfC=7...
            /* 09A8 */  0x9F, 0x99, 0x8D, 0x15, 0x36, 0xD0, 0xE3, 0xD7,  // ....6...
            /* 09B0 */  0x5B, 0x57, 0x48, 0x23, 0x3C, 0x77, 0x31, 0xE1,  // [WH#<w1.
            /* 09B8 */  0xE7, 0x2E, 0xA8, 0xFF, 0xFF, 0x73, 0x17, 0xC0,  // .....s..
            /* 09C0 */  0x85, 0xA3, 0x02, 0xEE, 0xDC, 0x05, 0xB6, 0x33,  // .......3
            /* 09C8 */  0x09, 0x60, 0xED, 0x08, 0xE0, 0xFF, 0xFF, 0x99,  // .`......
            /* 09D0 */  0x04, 0xCC, 0xA3, 0x85, 0x79, 0xF6, 0x40, 0x1C,  // ....y.@.
            /* 09D8 */  0xBC, 0x50, 0xE1, 0x1F, 0x07, 0x86, 0x43, 0x05,  // .P....C.
            /* 09E0 */  0x3F, 0x55, 0xD0, 0xF3, 0x14, 0x70, 0x39, 0x30,  // ?U...p90
            /* 09E8 */  0x03, 0x27, 0x21, 0x27, 0x18, 0x9D, 0xA7, 0x70,  // .'!'...p
            /* 09F0 */  0xE3, 0x31, 0xE8, 0xD3, 0x83, 0xAF, 0x04, 0xFC,  // .1......
            /* 09F8 */  0x30, 0xC5, 0x42, 0x43, 0xC8, 0xC2, 0xC9, 0x0B,  // 0.BC....
            /* 0A00 */  0x68, 0x1D, 0xA6, 0xC0, 0x71, 0x65, 0x09, 0x8C,  // h...qe..
            /* 0A08 */  0xBD, 0x1D, 0xBC, 0xCB, 0x79, 0x12, 0x8F, 0x26,  // ....y..&
            /* 0A10 */  0xC7, 0x19, 0xE2, 0xDD, 0xDA, 0x04, 0x0F, 0x06,  // ........
            /* 0A18 */  0x91, 0xDE, 0x6B, 0xD8, 0x00, 0xA3, 0xBF, 0x44,  // ..k....D
            /* 0A20 */  0x98, 0xE0, 0xFF, 0xFF, 0x68, 0x05, 0x0C, 0x21,  // ....h..!
            /* 0A28 */  0xCE, 0x86, 0x9F, 0x2E, 0x8C, 0x79, 0x3A, 0xFC,  // .....y:.
            /* 0A30 */  0x68, 0x05, 0xB0, 0xF0, 0xFF, 0x7F, 0xB4, 0x02,  // h.......
            /* 0A38 */  0xFB, 0xC5, 0xCA, 0x63, 0x3E, 0xE3, 0xB7, 0xA9,  // ...c>...
            /* 0A40 */  0xA7, 0xA9, 0x28, 0xEF, 0xC7, 0xAF, 0x54, 0xEF,  // ..(...T.
            /* 0A48 */  0x06, 0xC6, 0x7A, 0x08, 0x78, 0xAA, 0xF2, 0x9D,  // ..z.x...
            /* 0A50 */  0xCA, 0xC7, 0x8A, 0x27, 0x64, 0xA3, 0xC4, 0x7A,  // ...'d..z
            /* 0A58 */  0xB9, 0x32, 0x66, 0x8C, 0x60, 0xEF, 0x55, 0x31,  // .2f.`.U1
            /* 0A60 */  0x1F, 0xB3, 0x3C, 0xC2, 0x68, 0xC1, 0x7D, 0x42,  // ..<.h.}B
            /* 0A68 */  0xE6, 0x47, 0x2B, 0x80, 0x61, 0x67, 0x12, 0x18,  // .G+.ag..
            /* 0A70 */  0xFF, 0xFF, 0x33, 0x09, 0xE0, 0xE8, 0x68, 0x05,  // ..3...h.
            /* 0A78 */  0xF6, 0xD1, 0xC2, 0x1C, 0x05, 0x8F, 0xFA, 0x1E,  // ........
            /* 0A80 */  0x31, 0x10, 0x0D, 0x07, 0x83, 0x3A, 0xC2, 0x12,  // 1....:..
            /* 0A88 */  0x20, 0x99, 0x00, 0x51, 0xA8, 0xA3, 0x15, 0xFA,  //  ..Q....
            /* 0A90 */  0x20, 0xE2, 0x61, 0x3F, 0x34, 0x78, 0x12, 0xA7,  //  .a?4x..
            /* 0A98 */  0xEA, 0x5B, 0xC3, 0x51, 0x3C, 0x01, 0xF8, 0x70,  // .[.Q<..p
            /* 0AA0 */  0x05, 0xFC, 0x87, 0x06, 0x6B, 0x12, 0xC5, 0x0F,  // ....k...
            /* 0AA8 */  0x0D, 0xDA, 0xFF, 0xFF, 0x94, 0x0C, 0xBC, 0x8F,  // ........
            /* 0AB0 */  0x6B, 0xC0, 0xE5, 0x80, 0x0C, 0xBE, 0x81, 0x81,  // k.......
            /* 0AB8 */  0xE3, 0x90, 0xE6, 0xE3, 0x1A, 0xEE, 0x40, 0xE4,  // ......@.
            /* 0AC0 */  0x81, 0xC5, 0x7C, 0x05, 0x8B, 0xF0, 0x08, 0xE6,  // ..|.....
            /* 0AC8 */  0x6B, 0x06, 0x3B, 0xF1, 0xF9, 0xB4, 0x12, 0x28,  // k.;....(
            /* 0AD0 */  0xCA, 0x6B, 0x0B, 0x3F, 0x4E, 0x83, 0x4B, 0xC7,  // .k.?N.K.
            /* 0AD8 */  0x71, 0x1A, 0x50, 0xF0, 0xFF, 0x3F, 0x12, 0xC0,  // q.P..?..
            /* 0AE0 */  0x99, 0x85, 0x2F, 0x58, 0xEC, 0x48, 0x00, 0x36,  // ../X.H.6
            /* 0AE8 */  0x1F, 0x47, 0x02, 0xA0, 0x34, 0x0C, 0x1F, 0xE6,  // .G..4...
            /* 0AF0 */  0xC0, 0x06, 0x73, 0x30, 0xAF, 0xED, 0xF6, 0x7E,  // ..s0...~
            /* 0AF8 */  0xD8, 0xA3, 0x47, 0x39, 0xC0, 0x7A, 0x84, 0x73,  // ..G9.z.s
            /* 0B00 */  0x1C, 0x4A, 0xF4, 0x51, 0x0E, 0xEA, 0xFF, 0xFF,  // .J.Q....
            /* 0B08 */  0x28, 0x07, 0x58, 0xBA, 0x33, 0x18, 0xE1, 0xFC,  // (.X.3...
            /* 0B10 */  0x43, 0x3C, 0x40, 0x84, 0x78, 0x8A, 0x33, 0x48,  // C<@.x.3H
            /* 0B18 */  0x9C, 0x20, 0x2F, 0x03, 0x8F, 0x72, 0xBE, 0xC9,  // . /..r..
            /* 0B20 */  0xC5, 0x79, 0x9A, 0x8B, 0xF2, 0x2E, 0x67, 0x84,  // .y....g.
            /* 0B28 */  0x87, 0x6E, 0x03, 0xF9, 0xC4, 0xED, 0x7B, 0xDC,  // .n....{.
            /* 0B30 */  0x53, 0xDD, 0xCB, 0x9C, 0x6F, 0xDD, 0xBE, 0x80,  // S...o...
            /* 0B38 */  0xFB, 0x28, 0xC7, 0x04, 0x1F, 0xE5, 0x00, 0x2A,  // .(.....*
            /* 0B40 */  0xFC, 0xFF, 0x8F, 0x72, 0x70, 0xCF, 0xAA, 0xE0,  // ...rp...
            /* 0B48 */  0x39, 0xCA, 0xC1, 0x38, 0x91, 0x00, 0xAE, 0xC7,  // 9..8....
            /* 0B50 */  0x0A, 0x63, 0x0C, 0x5C, 0xDD, 0xA3, 0xC7, 0xA7,  // .c.\....
            /* 0B58 */  0x22, 0x2A, 0xEA, 0x3C, 0x22, 0x18, 0xCE, 0xE2,  // "*.<"...
            /* 0B60 */  0x43, 0x90, 0xCF, 0x06, 0xFC, 0x04, 0xE2, 0x11,  // C.......
            /* 0B68 */  0x54, 0x3C, 0x4E, 0x7A, 0xEA, 0xF0, 0xC1, 0x8E,  // T<Nz....
            /* 0B70 */  0x9D, 0x0E, 0x1C, 0x7E, 0x90, 0xF4, 0xB4, 0x08,  // ...~....
            /* 0B78 */  0x9E, 0x73, 0x0B, 0xBC, 0xDB, 0x08, 0x9C, 0x53,  // .s.....S
            /* 0B80 */  0x81, 0xFF, 0xFF, 0xA7, 0x02, 0xC0, 0x4B, 0xFE,  // ......K.
            /* 0B88 */  0x57, 0x9A, 0xA0, 0x1D, 0xE0, 0x15, 0x2E, 0x1B,  // W.......
            /* 0B90 */  0x47, 0x32, 0xCA, 0xE1, 0x98, 0x0F, 0x1C, 0x4D,  // G2.....M
            /* 0B98 */  0x93, 0x9D, 0x78, 0x60, 0xC6, 0x82, 0xD4, 0x49,  // ..x`...I
            /* 0BA0 */  0xC0, 0xA7, 0x0E, 0x07, 0x82, 0x91, 0x76, 0x12,  // ......v.
            /* 0BA8 */  0x8D, 0xC6, 0x70, 0x56, 0x0B, 0x23, 0x38, 0x83,  // ..pV.#8.
            /* 0BB0 */  0xF8, 0xCC, 0xE3, 0x5C, 0x27, 0x16, 0xB4, 0x0A,  // ...\'...
            /* 0BB8 */  0x10, 0x9D, 0x56, 0x30, 0x41, 0xEE, 0x68, 0x74,  // ..V0A.ht
            /* 0BC0 */  0xDE, 0xBE, 0x1B, 0xF0, 0xEB, 0x8B, 0xC7, 0x62,  // .......b
            /* 0BC8 */  0x60, 0xDF, 0xBA, 0xC0, 0x31, 0x17, 0xAB, 0x01,  // `...1...
            /* 0BD0 */  0x45, 0x0D, 0xC0, 0x68, 0x98, 0x53, 0xC0, 0xC3,  // E..h.S..
            /* 0BD8 */  0x19, 0xB8, 0xEE, 0x71, 0x9E, 0x1B, 0xEE, 0xA6,  // ...q....
            /* 0BE0 */  0x62, 0xAD, 0x53, 0xD1, 0xE9, 0xE4, 0x7D, 0xE0,  // b.S...}.
            /* 0BE8 */  0xE0, 0xC0, 0xFA, 0xFF, 0x1F, 0x1C, 0x8C, 0xD9,  // ........
            /* 0BF0 */  0x7B, 0x70, 0xB0, 0xD0, 0x3C, 0x38, 0xB0, 0x65,  // {p..<8.e
            /* 0BF8 */  0x1B, 0x1C, 0x5A, 0xC9, 0x5D, 0x84, 0x1C, 0x3E,  // ..Z.]..>
            /* 0C00 */  0xF0, 0xB3, 0x03, 0x0E, 0x80, 0x9E, 0x1D, 0x2C,  // .......,
            /* 0C08 */  0x24, 0xCF, 0x0E, 0x6C, 0xFA, 0xCE, 0x22, 0xA0,  // $..l..".
            /* 0C10 */  0x00, 0xF2, 0xBD, 0xC3, 0xE7, 0x96, 0x67, 0x0F,  // ......g.
            /* 0C18 */  0x36, 0x86, 0x47, 0x17, 0xA3, 0x19, 0x9D, 0x6B,  // 6.G....k
            /* 0C20 */  0xBA, 0x4D, 0xA0, 0x54, 0xDC, 0x26, 0x28, 0x88,  // .M.T.&(.
            /* 0C28 */  0x6F, 0x00, 0x4E, 0x48, 0xA3, 0xDB, 0x20, 0x6E,  // o.NH.. n
            /* 0C30 */  0x26, 0xC6, 0x7F, 0xC4, 0xF0, 0x11, 0xE1, 0x90,  // &.......
            /* 0C38 */  0xCE, 0xD6, 0x04, 0xF3, 0x40, 0xEA, 0xBD, 0xA1,  // ....@...
            /* 0C40 */  0xBB, 0x14, 0x84, 0xD9, 0x87, 0x7C, 0x70, 0xF1,  // .....|p.
            /* 0C48 */  0x34, 0x7C, 0xBD, 0x21, 0xF7, 0x0E, 0x3A, 0x6D,  // 4|.!..:m
            /* 0C50 */  0x9F, 0x19, 0x30, 0xA7, 0x55, 0x5F, 0x2D, 0x13,  // ..0.U_-.
            /* 0C58 */  0x58, 0xD6, 0x55, 0x82, 0x7A, 0xB8, 0x80, 0xD0,  // X.U.z...
            /* 0C60 */  0x0B, 0x8D, 0xAF, 0x5D, 0x09, 0x1E, 0x04, 0x7D,  // ...]...}
            /* 0C68 */  0x0C, 0xFB, 0xFF, 0xBF, 0x97, 0xB0, 0xB3, 0x57,  // .......W
            /* 0C70 */  0x82, 0x57, 0xAF, 0x04, 0xF3, 0x0E, 0x02, 0x35,  // .W.....5
            /* 0C78 */  0x2A, 0x0F, 0x02, 0x73, 0x94, 0x34, 0xC1, 0x7C,  // *..s.4.|
            /* 0C80 */  0x63, 0x40, 0x25, 0xBB, 0x74, 0xD2, 0x33, 0xCC,  // c@%.t.3.
            /* 0C88 */  0x3B, 0x8C, 0x2F, 0x09, 0xBE, 0x7E, 0xF8, 0xDC,  // ;./..~..
            /* 0C90 */  0xE2, 0x05, 0xBC, 0x7A, 0xC2, 0x20, 0x78, 0x06,  // ...z. x.
            /* 0C98 */  0x7A, 0x75, 0x31, 0x54, 0x9C, 0xC0, 0xAF, 0x02,  // zu1T....
            /* 0CA0 */  0x6F, 0x34, 0x21, 0x82, 0x19, 0xF6, 0xF0, 0x43,  // o4!....C
            /* 0CA8 */  0xBE, 0xC5, 0xF8, 0xF8, 0xE6, 0x1B, 0x40, 0xAC,  // ......@.
            /* 0CB0 */  0xD7, 0x11, 0x8F, 0x94, 0x1F, 0x5B, 0x0E, 0x28,  // .....[.(
            /* 0CB8 */  0xD2, 0x4B, 0x95, 0x27, 0xE0, 0xB3, 0x8C, 0x4F,  // .K.'...O
            /* 0CC0 */  0x5B, 0x27, 0xE5, 0x6B, 0x9B, 0xD1, 0x5F, 0x21,  // ['.k.._!
            /* 0CC8 */  0x7C, 0xF8, 0x31, 0xB2, 0xCF, 0x39, 0xEC, 0xDC,  // |.1..9..
            /* 0CD0 */  0xC5, 0x06, 0xC5, 0x11, 0x1F, 0x18, 0x5E, 0x6A,  // ......^j
            /* 0CD8 */  0x3C, 0x15, 0x76, 0x05, 0x60, 0x07, 0x07, 0x7E,  // <.v.`..~
            /* 0CE0 */  0x05, 0xF0, 0xC1, 0x81, 0x1D, 0x8B, 0x30, 0xC7,  // ......0.
            /* 0CE8 */  0x4A, 0x70, 0x9D, 0x6C, 0x7C, 0x72, 0x00, 0x33,  // Jp.l|r.3
            /* 0CF0 */  0x3C, 0xE6, 0x40, 0xEA, 0xF3, 0x86, 0x6F, 0x06,  // <.@...o.
            /* 0CF8 */  0x1E, 0x17, 0x3F, 0x72, 0xF8, 0xA8, 0xCA, 0xB0,  // ..?r....
            /* 0D00 */  0x4F, 0xD3, 0x47, 0xA3, 0x17, 0x59, 0x9F, 0x5E,  // O.G..Y.^
            /* 0D08 */  0x30, 0xB0, 0xBE, 0x34, 0x70, 0x58, 0xA3, 0x85,  // 0..4pX..
            /* 0D10 */  0x7D, 0x0C, 0x38, 0x73, 0x5F, 0x88, 0x70, 0x87,  // }.8s_.p.
            /* 0D18 */  0x3A, 0xB0, 0xFC, 0xFF, 0x01, 0xF1, 0xB7, 0x92,  // :.......
            /* 0D20 */  0x47, 0x0E, 0x4F, 0xC0, 0x80, 0x2C, 0xF7, 0xBA,  // G.O..,..
            /* 0D28 */  0x74, 0x20, 0xE2, 0xE7, 0x46, 0xAB, 0x3B, 0x10,  // t ..F.;.
            /* 0D30 */  0x21, 0x30, 0x9E, 0xF6, 0x1E, 0x3F, 0x3C, 0x1B,  // !0...?<.
            /* 0D38 */  0x1F, 0x05, 0x7C, 0x8C, 0xF2, 0xCC, 0xCF, 0x28,  // ..|....(
            /* 0D40 */  0xD2, 0x2B, 0x83, 0xB5, 0x9C, 0x88, 0x50, 0x2A,  // .+....P*
            /* 0D48 */  0x60, 0x14, 0x98, 0x46, 0x77, 0x0E, 0x1E, 0x11,  // `..Fw...
            /* 0D50 */  0x46, 0x70, 0x06, 0xF1, 0x68, 0x7D, 0x73, 0x01,  // Fp..h}s.
            /* 0D58 */  0xA6, 0x67, 0x22, 0xE0, 0x12, 0x72, 0x76, 0xE8,  // .g"..rv.
            /* 0D60 */  0x8B, 0x33, 0x9B, 0xB6, 0x71, 0xDF, 0x00, 0x7D,  // .3..q..}
            /* 0D68 */  0xF8, 0xF4, 0xC4, 0x4F, 0x1B, 0xC6, 0xC9, 0x08,  // ...O....
            /* 0D70 */  0xB0, 0xF1, 0xFF, 0xBF, 0xEB, 0x00, 0xFC, 0xFF,  // ........
            /* 0D78 */  0xFF, 0xDF, 0x75, 0x00, 0x3B, 0xF7, 0x07, 0xDF,  // ..u.;...
            /* 0D80 */  0x75, 0x80, 0x6B, 0x88, 0x55, 0xE9, 0xAE, 0xC3,  // u.k.U...
            /* 0D88 */  0x0F, 0x00, 0x8E, 0xBA, 0x20, 0xDD, 0x0A, 0x22,  // .... .."
            /* 0D90 */  0x1E, 0x82, 0x07, 0xF9, 0x28, 0x60, 0xD8, 0xB3,  // ....(`..
            /* 0D98 */  0x7C, 0x1C, 0xF6, 0x70, 0x4C, 0x30, 0xDC, 0x55,  // |..pL0.U
            /* 0DA0 */  0x83, 0x0E, 0xCD, 0xB1, 0x28, 0x24, 0xE4, 0xA6,  // ....($..
            /* 0DA8 */  0x83, 0x8A, 0x7E, 0x7F, 0xA0, 0x20, 0x06, 0xF4,  // ..~.. ..
            /* 0DB0 */  0x55, 0x12, 0xB0, 0xF2, 0xFF, 0xBF, 0xB5, 0x00,  // U.......
            /* 0DB8 */  0xBB, 0x30, 0x83, 0x46, 0xC9, 0xBF, 0x2D, 0x51,  // .0.F..-Q
            /* 0DC0 */  0x10, 0x0F, 0xDA, 0xD2, 0x6E, 0x2D, 0xA0, 0x38,  // ....n-.8
            /* 0DC8 */  0x04, 0xF8, 0xD6, 0x02, 0x5F, 0xDE, 0xAD, 0x05,  // ...._...
            /* 0DD0 */  0x14, 0xB7, 0x00, 0x1F, 0x0D, 0xF8, 0x71, 0xC1,  // ......q.
            /* 0DD8 */  0x07, 0x0E, 0xDF, 0x58, 0x7C, 0x37, 0x26, 0x17,  // ...X|7&.
            /* 0DE0 */  0x16, 0xA8, 0xE3, 0xE7, 0xE0, 0xBE, 0xC6, 0xBF,  // ........
            /* 0DE8 */  0xB0, 0xC0, 0x38, 0x99, 0x80, 0xE3, 0x48, 0x02,  // ..8...H.
            /* 0DF0 */  0xD8, 0xF9, 0xFF, 0x1F, 0x49, 0xC0, 0x02, 0xE9,  // ....I...
            /* 0DF8 */  0x23, 0x09, 0x70, 0x8D, 0xB4, 0x2A, 0x2A, 0xE2,  // #.p..**.
            /* 0E00 */  0x3D, 0xA0, 0x53, 0x89, 0x61, 0xF8, 0xE8, 0x7C,  // =.S.a..|
            /* 0E08 */  0x66, 0xC0, 0x5F, 0x39, 0x18, 0x38, 0x3B, 0x91,  // f._9.8;.
            /* 0E10 */  0x19, 0x8E, 0x0F, 0xDC, 0xE3, 0x7B, 0x21, 0x3B,  // .....{!;
            /* 0E18 */  0xAD, 0x87, 0x02, 0xDF, 0xC9, 0x0C, 0xC9, 0xAE,  // ........
            /* 0E20 */  0xE0, 0xB8, 0xC3, 0x83, 0xC7, 0xFE, 0x50, 0xE4,  // ......P.
            /* 0E28 */  0x1B, 0xC2, 0x0B, 0x82, 0x2F, 0x07, 0x0C, 0x0A,  // ..../...
            /* 0E30 */  0xC6, 0x2D, 0x1C, 0x73, 0x04, 0x87, 0x43, 0x70,  // .-.s..Cp
            /* 0E38 */  0xC6, 0x47, 0x81, 0x19, 0xA4, 0x2F, 0x20, 0xAF,  // .G.../ .
            /* 0E40 */  0x07, 0x1E, 0x2C, 0x73, 0x7F, 0xA0, 0xD2, 0x09,  // ..,s....
            /* 0E48 */  0xE6, 0x71, 0xEA, 0xC9, 0xA0, 0x39, 0x14, 0x9D,  // .q...9..
            /* 0E50 */  0x09, 0x4E, 0xA1, 0xAD, 0x61, 0x09, 0xE7, 0x81,  // .N..a...
            /* 0E58 */  0x22, 0x44, 0x94, 0x60, 0xAF, 0x54, 0x6F, 0x0C,  // "D.`.To.
            /* 0E60 */  0xCF, 0xEB, 0x51, 0xE2, 0x45, 0x0A, 0x18, 0x2D,  // ..Q.E..-
            /* 0E68 */  0x4A, 0xB0, 0xDE, 0x20, 0x04, 0x1A, 0x29, 0x44,  // J.. ..)D
            /* 0E70 */  0xC0, 0x10, 0xAF, 0x13, 0xB1, 0xC2, 0x45, 0x6F,  // ......Eo
            /* 0E78 */  0x7F, 0x10, 0x24, 0xC0, 0x9B, 0x42, 0xD7, 0x14,  // ..$..B..
            /* 0E80 */  0x47, 0x3A, 0xC4, 0xA0, 0x87, 0xED, 0x3B, 0x39,  // G:....;9
            /* 0E88 */  0x9F, 0x56, 0x90, 0xE3, 0xF2, 0x41, 0x06, 0x43,  // .V...A.C
            /* 0E90 */  0xF0, 0xF0, 0xE1, 0x2F, 0x80, 0x0F, 0x00, 0xD8,  // .../....
            /* 0E98 */  0xFF, 0x3F, 0x41, 0xD7, 0x80, 0x9A, 0xF9, 0xE3,  // .?A.....
            /* 0EA0 */  0x01, 0x58, 0x0E, 0x17, 0xF0, 0x07, 0xFE, 0x04,  // .X......
            /* 0EA8 */  0x83, 0x3B, 0xAB, 0x68, 0x10, 0xA8, 0x93, 0x0A,  // .;.h....
            /* 0EB0 */  0x3F, 0x5D, 0xF9, 0x6E, 0xEE, 0x1B, 0x90, 0x09,  // ?].n....
            /* 0EB8 */  0x2C, 0xF6, 0x20, 0x42, 0xC7, 0x03, 0xFE, 0xA1,  // ,. B....
            /* 0EC0 */  0xBF, 0xD6, 0xFB, 0x50, 0xE1, 0xF9, 0xFA, 0x72,  // ...P...r
            /* 0EC8 */  0xEF, 0xCB, 0x3F, 0x58, 0xAE, 0x09, 0xFC, 0xFA,  // ..?X....
            /* 0ED0 */  0x0F, 0x78, 0x14, 0x3C, 0x2E, 0x14, 0x34, 0x0E,  // .x.<..4.
            /* 0ED8 */  0xF1, 0xA9, 0xEE, 0xD4, 0x7D, 0x66, 0x39, 0x61,  // ....}f9a
            /* 0EE0 */  0xDC, 0xFF, 0x7F, 0xC4, 0x6C, 0xBC, 0xE0, 0x3A,  // ....l..:
            /* 0EE8 */  0x7F, 0x20, 0xDE, 0x24, 0x3E, 0x96, 0xD0, 0xF0,  // . .$>...
            /* 0EF0 */  0x27, 0x13, 0x40, 0xE0, 0x8C, 0x9E, 0x4C, 0x3C,  // '.@...L<
            /* 0EF8 */  0xEF, 0x77, 0x92, 0x67, 0xA1, 0x43, 0x88, 0xF1,  // .w.g.C..
            /* 0F00 */  0x46, 0x12, 0xC4, 0x08, 0x4F, 0x26, 0xEC, 0x42,  // F...O&.B
            /* 0F08 */  0xF2, 0x40, 0x12, 0xE2, 0xC9, 0xC4, 0xD7, 0x92,  // .@......
            /* 0F10 */  0x60, 0x21, 0x9E, 0x4C, 0x18, 0x58, 0xE8, 0x58,  // `!.L.X.X
            /* 0F18 */  0xAF, 0x45, 0x31, 0xD8, 0x4D, 0xC5, 0x70, 0x4F,  // .E1.M.pO
            /* 0F20 */  0x26, 0x2C, 0xF8, 0x23, 0x43, 0xB7, 0x47, 0x9F,  // &,.#C.G.
            /* 0F28 */  0x4C, 0x00, 0x43, 0xFF, 0xFF, 0x93, 0x09, 0xB0,  // L.C.....
            /* 0F30 */  0x3F, 0x52, 0xF9, 0xC4, 0x86, 0x1B, 0x85, 0x0F,  // ?R......
            /* 0F38 */  0x16, 0x11, 0xD9, 0x59, 0x87, 0x0C, 0x9A, 0xDE,  // ...Y....
            /* 0F40 */  0xF7, 0xC0, 0x61, 0x64, 0x60, 0x40, 0xE1, 0x30,  // ..ad`@.0
            /* 0F48 */  0x86, 0x3F, 0xC7, 0x91, 0x13, 0x0C, 0x28, 0xCE,  // .?....(.
            /* 0F50 */  0x13, 0x98, 0x93, 0xC8, 0x73, 0xC2, 0x8B, 0x05,  // ....s...
            /* 0F58 */  0x3B, 0xB9, 0x00, 0x6E, 0xAE, 0xC0, 0x04, 0x87,  // ;..n....
            /* 0F60 */  0xFC, 0xFF, 0x4F, 0x2E, 0xE0, 0x3C, 0x97, 0xC3,  // ..O..<..
            /* 0F68 */  0x18, 0x03, 0xD7, 0xFF, 0xCA, 0xF4, 0x31, 0x8F,  // ......1.
            /* 0F70 */  0x4A, 0x7A, 0xFE, 0x19, 0x86, 0xB2, 0xF8, 0x84,  // Jz......
            /* 0F78 */  0xE0, 0x73, 0x01, 0x3F, 0x21, 0x78, 0x04, 0x6F,  // .s.?!x.o
            /* 0F80 */  0x5B, 0xC7, 0xC9, 0x4E, 0x26, 0xBE, 0x6E, 0xF8,  // [..N&.n.
            /* 0F88 */  0x64, 0xC0, 0x0E, 0x9F, 0x1E, 0xA4, 0x47, 0x86,  // d.....G.
            /* 0F90 */  0x3B, 0x0F, 0x80, 0xED, 0xC0, 0x02, 0xEB, 0x50,  // ;......P
            /* 0F98 */  0x00, 0xB8, 0xD1, 0x68, 0x62, 0xE4, 0x4C, 0x1F,  // ...hb.L.
            /* 0FA0 */  0x88, 0x0E, 0xB4, 0x9C, 0xC3, 0x29, 0x16, 0xA7,  // .....)..
            /* 0FA8 */  0x1B, 0xA6, 0x0F, 0x3E, 0xBE, 0x9B, 0x9C, 0xCA,  // ...>....
            /* 0FB0 */  0xA9, 0xE2, 0x4F, 0x94, 0x56, 0x0D, 0xA9, 0x93,  // ..O.V...
            /* 0FB8 */  0x25, 0xD7, 0x0B, 0xA3, 0x68, 0x0F, 0x22, 0x9D,  // %...h.".
            /* 0FC0 */  0x46, 0x79, 0x18, 0x18, 0xC1, 0x19, 0xC4, 0x87,  // Fy......
            /* 0FC8 */  0x1A, 0x67, 0x3B, 0xD4, 0xA0, 0x95, 0x08, 0xF8,  // .g;.....
            /* 0FD0 */  0xFF, 0x5F, 0xAD, 0x3D, 0x06, 0x76, 0xA6, 0x05,  // ._.=.v..
            /* 0FD8 */  0xCC, 0x5C, 0x7F, 0x7D, 0x73, 0xC1, 0xBD, 0x24,  // .\.}s..$
            /* 0FE0 */  0x7C, 0x73, 0xC1, 0xCC, 0x0D, 0x38, 0x8C, 0xDF,  // |s...8..
            /* 0FE8 */  0x73, 0x83, 0x85, 0xE6, 0xB9, 0xC1, 0xBF, 0xBD,  // s.......
            /* 0FF0 */  0x60, 0xA3, 0xCD, 0x0D, 0x8D, 0xCC, 0xE6, 0xF6,  // `.......
            /* 0FF8 */  0x1C, 0x10, 0xE1, 0x15, 0xC1, 0x87, 0x0F, 0x8F,  // ........
            /* 1000 */  0x0E, 0x38, 0x00, 0x7A, 0x74, 0xB0, 0x90, 0x3C,  // .8.zt..<
            /* 1008 */  0x3A, 0xF0, 0xFC, 0xFF, 0x47, 0xC7, 0xD2, 0x8D,  // :...G...
            /* 1010 */  0x0E, 0xAD, 0x05, 0x44, 0x2E, 0x4F, 0x53, 0xE4,  // ...D.OS.
            /* 1018 */  0x64, 0x72, 0x7A, 0x4F, 0xB9, 0xBE, 0xB2, 0x7A,  // drzO...z
            /* 1020 */  0x7A, 0xC0, 0x63, 0x00, 0x9E, 0x1E, 0x2C, 0x34,  // z.c...,4
            /* 1028 */  0x4F, 0x0F, 0x6C, 0x11, 0x2F, 0x19, 0xE8, 0xDB,  // O.l./...
            /* 1030 */  0x87, 0x91, 0x5F, 0xA0, 0x7D, 0x5E, 0x32, 0xA8,  // .._.}^2.
            /* 1038 */  0xEF, 0x36, 0x30, 0x46, 0x08, 0x1C, 0x6E, 0xD5,  // .60F..n.
            /* 1040 */  0x1E, 0x21, 0x2C, 0x34, 0x1F, 0x34, 0xC0, 0x16,  // .!,4.4..
            /* 1048 */  0x6F, 0x84, 0xE8, 0x61, 0xF9, 0x4E, 0x72, 0x7E,  // o..a.Nr~
            /* 1050 */  0x27, 0x77, 0x7C, 0xC0, 0x0A, 0xD8, 0xE3, 0xE3,  // 'w|.....
            /* 1058 */  0xFF, 0xFF, 0xF1, 0x61, 0x51, 0x7C, 0x74, 0x07,  // ...aQ|t.
            /* 1060 */  0xCE, 0x99, 0xB6, 0xA4, 0xD3, 0x0D, 0x4F, 0x01,  // ......O.
            /* 1068 */  0xA3, 0x93, 0x8B, 0x41, 0x7C, 0x1F, 0xB1, 0x42,  // ...A|..B
            /* 1070 */  0x10, 0x1D, 0xDD, 0xE1, 0xEB, 0x81, 0xD4, 0xD1,  // ........
            /* 1078 */  0x1D, 0xFE, 0x95, 0xDD, 0x47, 0x77, 0xF8, 0xA3,  // ....Gw..
            /* 1080 */  0x3B, 0x1E, 0x66, 0xE3, 0x58, 0x44, 0xCF, 0x57,  // ;.f.XD.W
            /* 1088 */  0x3E, 0x26, 0x26, 0x78, 0x95, 0xF0, 0x61, 0xE2,  // >&&x..a.
            /* 1090 */  0x39, 0x89, 0x1D, 0xDF, 0x7D, 0x70, 0x4C, 0xF0,  // 9...}pL.
            /* 1098 */  0xC0, 0xF8, 0xD4, 0xCE, 0x4E, 0x8D, 0x21, 0x8D,  // ....N.!.
            /* 10A0 */  0xCA, 0x60, 0x0D, 0xF1, 0xFC, 0xC6, 0xF4, 0xAD,  // .`......
            /* 10A8 */  0x4F, 0xE7, 0x78, 0xB8, 0x7A, 0x00, 0x35, 0x16,  // O.x.z.5.
            /* 10B0 */  0xAE, 0x04, 0x46, 0xE7, 0x78, 0xFC, 0x85, 0xE1,  // ..F.x...
            /* 10B8 */  0x75, 0xCA, 0x0B, 0x08, 0xE6, 0x79, 0x45, 0x78,  // u....yEx
            /* 10C0 */  0x61, 0xF0, 0x49, 0x9C, 0x9F, 0x8E, 0x1E, 0xA9,  // a.I.....
            /* 10C8 */  0x0C, 0x15, 0x27, 0xF0, 0x2B, 0xC1, 0x9B, 0x56,  // ..'.+..V
            /* 10D0 */  0x88, 0x60, 0x86, 0x7D, 0x0C, 0x78, 0xDC, 0x30,  // .`.}.x.0
            /* 10D8 */  0xAA, 0x4F, 0xA0, 0xC6, 0x7A, 0x48, 0xF2, 0x88,  // .O..zH..
            /* 10E0 */  0xF9, 0x6D, 0xEA, 0x80, 0x22, 0x3D, 0xFD, 0x78,  // .m.."=.x
            /* 10E8 */  0x02, 0xBE, 0xDE, 0xF3, 0xFF, 0xFF, 0xF5, 0x1E,  // ........
            /* 10F0 */  0xEE, 0x8D, 0xD1, 0x83, 0xE2, 0x88, 0x0F, 0x0E,  // ........
            /* 10F8 */  0x0F, 0x21, 0x9E, 0x0A, 0xBB, 0x3D, 0x61, 0xC0,  // .!...=a.
            /* 1100 */  0x8E, 0xC0, 0x47, 0x41, 0x7E, 0x78, 0x09, 0x14,  // ..GA~x..
            /* 1108 */  0xA5, 0x78, 0x4C, 0xDD, 0x1C, 0x3C, 0x43, 0x83,  // .xL..<C.
            /* 1110 */  0x62, 0xE0, 0x0F, 0x92, 0xCD, 0x2E, 0xAE, 0xB1,  // b.......
            /* 1118 */  0x7C, 0x2F, 0x31, 0x22, 0x76, 0x40, 0x0C, 0x25,  // |/1"v@.%
            /* 1120 */  0xD2, 0x09, 0x54, 0x8F, 0x42, 0xE6, 0xE0, 0x11,  // ..T.B...
            /* 1128 */  0x79, 0x36, 0x9E, 0x0E, 0x3B, 0x75, 0xE0, 0x27,  // y6..;u.'
            /* 1130 */  0xE1, 0x33, 0x93, 0xEF, 0xAF, 0x1E, 0x90, 0x87,  // .3......
            /* 1138 */  0xC2, 0xA7, 0xC8, 0x80, 0xE1, 0xC0, 0xBC, 0x04,  // ........
            /* 1140 */  0x30, 0x68, 0x0F, 0x9F, 0xA1, 0xBF, 0x16, 0x19,  // 0h......
            /* 1148 */  0x9D, 0x9F, 0x76, 0x4E, 0xC7, 0xE7, 0x4D, 0x1F,  // ..vN..M.
            /* 1150 */  0x35, 0x7C, 0x0F, 0xC0, 0x9C, 0xC8, 0x7C, 0x02,  // 5|....|.
            /* 1158 */  0xF0, 0x89, 0x8D, 0x01, 0x3D, 0xF9, 0x1B, 0xD5,  // ....=...
            /* 1160 */  0xF7, 0x52, 0x76, 0xF5, 0xC1, 0x20, 0x9D, 0x46,  // .Rv.. .F
            /* 1168 */  0x94, 0x48, 0xAF, 0x03, 0xFC, 0x76, 0xC6, 0xC1,  // .H...v..
            /* 1170 */  0x02, 0x1D, 0x2B, 0x9F, 0x4C, 0x3C, 0x4F, 0xD8,  // ..+.L<O.
            /* 1178 */  0x23, 0x85, 0x73, 0xC5, 0x60, 0x07, 0x13, 0x7E,  // #.s.`..~
            /* 1180 */  0xC5, 0xF0, 0xC1, 0x84, 0x5D, 0x02, 0x31, 0x37,  // ....].17
            /* 1188 */  0x4C, 0x70, 0x5D, 0x31, 0x7C, 0x32, 0x81, 0xF7,  // Lp]1|2..
            /* 1190 */  0xFF, 0x3F, 0x99, 0x80, 0x01, 0x1E, 0x73, 0x37,  // .?....s7
            /* 1198 */  0xF5, 0x79, 0xC6, 0xB2, 0xC6, 0x85, 0x3A, 0xD2,  // .y....:.
            /* 11A0 */  0xF8, 0x24, 0xF3, 0x7C, 0x6C, 0xEC, 0x87, 0x01,  // .$.|l...
            /* 11A8 */  0x4F, 0xFA, 0x30, 0x9F, 0x9D, 0x7C, 0x55, 0xE3,  // O.0..|U.
            /* 11B0 */  0xB0, 0xBE, 0x94, 0x70, 0x58, 0xA3, 0x85, 0x7D,  // ...pX..}
            /* 11B8 */  0x1D, 0x30, 0xEC, 0x03, 0x20, 0xEE, 0x9A, 0x0B,  // .0.. ...
            /* 11C0 */  0x16, 0x40, 0xFC, 0x25, 0xE1, 0xC1, 0xC0, 0x13,  // .@.%....
            /* 11C8 */  0x30, 0x20, 0x8B, 0x73, 0xA3, 0x46, 0x05, 0xB8,  // 0 .s.F..
            /* 11D0 */  0x54, 0x03, 0x02, 0xAF, 0xD2, 0x3E, 0xC7, 0xBC,  // T....>..
            /* 11D8 */  0xC3, 0x3C, 0x14, 0xBC, 0xCB, 0x44, 0x08, 0xF2,  // .<...D..
            /* 11E0 */  0x34, 0xFD, 0x8E, 0x10, 0x21, 0x54, 0xA0, 0x97,  // 4...!T..
            /* 11E8 */  0x6A, 0xE3, 0x05, 0x7D, 0x99, 0x88, 0x12, 0x27,  // j..}...'
            /* 11F0 */  0x4A, 0x84, 0x50, 0xC6, 0x38, 0x97, 0xA7, 0x83,  // J.P.8...
            /* 11F8 */  0x97, 0x9A, 0x70, 0x8F, 0x09, 0x81, 0x9F, 0x1C,  // ..p.....
            /* 1200 */  0x9E, 0xAA, 0x8D, 0x70, 0x8C, 0x2F, 0xD5, 0x4C,  // ...p./.L
            /* 1208 */  0xFC, 0x45, 0x46, 0xF7, 0x24, 0x5F, 0xAA, 0xF1,  // .EF.$_..
            /* 1210 */  0xFF, 0xFF, 0x4B, 0x35, 0xC0, 0x87, 0x61, 0xF8,  // ..K5..a.
            /* 1218 */  0x36, 0x0B, 0x8E, 0x6B, 0x02, 0xBF, 0xCF, 0x02,  // 6..k....
            /* 1220 */  0xFE, 0xFE, 0xFF, 0xE7, 0x16, 0x4F, 0xE3, 0x9D,  // .....O..
            /* 1228 */  0x19, 0xDC, 0xC3, 0x85, 0x3D, 0x0C, 0xAE, 0xE9,  // ....=...
            /* 1230 */  0x9A, 0xAB, 0xF3, 0x0D, 0x57, 0x01, 0x83, 0xBA,  // ....W...
            /* 1238 */  0x36, 0x83, 0x2B, 0xED, 0x1A, 0x04, 0xEA, 0x23,  // 6.+....#
            /* 1240 */  0x8D, 0x4F, 0x18, 0xB8, 0xE3, 0x82, 0x4F, 0x17,  // .O....O.
            /* 1248 */  0xB8, 0xDB, 0x3B, 0xCC, 0x4B, 0x8A, 0xCF, 0x7C,  // ..;.K..|
            /* 1250 */  0x98, 0x9B, 0x83, 0x07, 0xE4, 0x13, 0x04, 0xF8,  // ........
            /* 1258 */  0x2F, 0x7D, 0xD8, 0x55, 0xB0, 0x43, 0x22, 0xFE,  // /}.U.C".
            /* 1260 */  0xFE, 0x65, 0xD0, 0x73, 0x0C, 0xEA, 0x03, 0xCF,  // .e.s....
            /* 1268 */  0x2B, 0x86, 0xAF, 0x09, 0x0F, 0x13, 0x8E, 0x7A,  // +......z
            /* 1270 */  0x0A, 0xA2, 0x63, 0x03, 0xC7, 0x61, 0x03, 0x1C,  // ..c..a..
            /* 1278 */  0x47, 0x1B, 0xDC, 0x31, 0xC7, 0xE7, 0x10, 0x1C,  // G..1....
            /* 1280 */  0xDC, 0x7B, 0x81, 0x87, 0xE1, 0x7B, 0x8E, 0x47,  // .{...{.G
            /* 1288 */  0xC4, 0xFE, 0xFF, 0x23, 0xF2, 0xF8, 0x1F, 0x22,  // ...#..."
            /* 1290 */  0x5E, 0x38, 0x22, 0x04, 0xC4, 0x9F, 0xA9, 0xF8,  // ^8".....
            /* 1298 */  0x80, 0xC1, 0x97, 0x67, 0xC0, 0xBA, 0x1C, 0xE2,  // ...g....
            /* 12A0 */  0x06, 0xEC, 0x21, 0x3D, 0x5C, 0x18, 0xF5, 0x89,  // ..!=\...
            /* 12A8 */  0xCC, 0xE8, 0xAF, 0x2F, 0xCF, 0x77, 0x26, 0xB0,  // .../.w&.
            /* 12B0 */  0x72, 0x58, 0x5D, 0x0F, 0x3D, 0x60, 0x70, 0x00,  // rX].=`p.
            /* 12B8 */  0x7A, 0xC0, 0xF0, 0xCF, 0x16, 0x6F, 0x8A, 0x60,  // z....o.`
            /* 12C0 */  0xB8, 0x68, 0xFA, 0xB8, 0xE0, 0x43, 0x8F, 0x15,  // .h...C..
            /* 12C8 */  0xDD, 0x14, 0xD1, 0xF7, 0x44, 0x1F, 0x11, 0xB1,  // ....D...
            /* 12D0 */  0x77, 0x09, 0x72, 0x44, 0x84, 0x7A, 0x97, 0xF0,  // w.rD.z..
            /* 12D8 */  0x1C, 0xF8, 0x21, 0x8F, 0x0D, 0xF5, 0xBD, 0xE7,  // ..!.....
            /* 12E0 */  0x19, 0xCE, 0x07, 0xAB, 0xF7, 0x00, 0x9F, 0x3C,  // .......<
            /* 12E8 */  0x1E, 0xDD, 0xD8, 0xA9, 0x90, 0x1D, 0xB7, 0x3C,  // .......<
            /* 12F0 */  0x5E, 0x9F, 0x33, 0x7C, 0xC1, 0x64, 0x43, 0x36,  // ^.3|.dC6
            /* 12F8 */  0xD8, 0xAB, 0x86, 0xCF, 0x5F, 0x3E, 0x10, 0xE2,  // ...._>..
            /* 1300 */  0x0E, 0x51, 0xBE, 0xFA, 0xF1, 0x43, 0x08, 0x3B,  // .Q...C.;
            /* 1308 */  0x91, 0x1C, 0xF5, 0xFB, 0x9B, 0x4F, 0x28, 0x27,  // .....O('
            /* 1310 */  0x74, 0x20, 0xBE, 0xB3, 0x81, 0xF3, 0x60, 0xED,  // t ....`.
            /* 1318 */  0x7B, 0x05, 0xE6, 0xFF, 0x7F, 0xF9, 0x65, 0x23,  // {.....e#
            /* 1320 */  0xC3, 0x1C, 0x0D, 0x60, 0x5D, 0x42, 0xC0, 0x75,  // ...`]B.u
            /* 1328 */  0xC7, 0xF0, 0x25, 0x04, 0xF8, 0x04, 0xBD, 0x44,  // ..%....D
            /* 1330 */  0xA0, 0xAF, 0x19, 0x1E, 0xDD, 0x23, 0x00, 0xE6,  // .....#..
            /* 1338 */  0x8A, 0xC1, 0x8E, 0x05, 0x3E, 0x6C, 0xF8, 0x1A,  // ....>l..
            /* 1340 */  0xC0, 0xEE, 0x05, 0x0E, 0x73, 0x8F, 0x00, 0x15,  // ....s...
            /* 1348 */  0xA8, 0x87, 0x07, 0x5F, 0xED, 0x3D, 0x02, 0x14,  // ..._.=..
            /* 1350 */  0xE7, 0x56, 0x1F, 0x1A, 0x3C, 0x50, 0xAB, 0x3A,  // .V..<P.:
            /* 1358 */  0xC1, 0x42, 0x39, 0xC0, 0xF2, 0xD3, 0x2B, 0xBF,  // .B9...+.
            /* 1360 */  0x15, 0xB0, 0x7C, 0x37, 0x09, 0xE8, 0x79, 0x66,  // ..|7..yf
            /* 1368 */  0x81, 0x4A, 0x72, 0x93, 0x80, 0x0E, 0xF3, 0x7C,  // .Jr....|
            /* 1370 */  0xFE, 0x32, 0xC3, 0xE6, 0x7F, 0xE0, 0xBE, 0x7E,  // .2.....~
            /* 1378 */  0x62, 0x06, 0x69, 0x94, 0xB7, 0x3C, 0x9F, 0xC1,  // b.i..<..
            /* 1380 */  0xF8, 0xFF, 0xFF, 0x0C, 0xE1, 0x63, 0x2B, 0x3B,  // .....c+;
            /* 1388 */  0x53, 0xF0, 0x13, 0x2C, 0xEE, 0x0E, 0x60, 0x94,  // S..,..`.
            /* 1390 */  0x67, 0x4F, 0x4F, 0x80, 0x9D, 0x6A, 0x8D, 0xFC,  // gOO..j..
            /* 1398 */  0x8E, 0xEF, 0x4B, 0x84, 0xEF, 0x45, 0x98, 0x13,  // ..K..E..
            /* 13A0 */  0x05, 0xF8, 0x4E, 0x21, 0x3E, 0x24, 0xE0, 0xCE,  // ..N!>$..
            /* 13A8 */  0x02, 0x1E, 0xCB, 0xD3, 0x2A, 0xBB, 0x20, 0x81,  // ....*. .
            /* 13B0 */  0xEF, 0x38, 0xE2, 0xC3, 0x04, 0xF8, 0x07, 0x86,  // .8......
            /* 13B8 */  0x8F, 0x7C, 0x27, 0x40, 0x9D, 0x3C, 0x38, 0xEA,  // .|'@.<8.
            /* 13C0 */  0xD9, 0x3E, 0xC2, 0x1A, 0xF5, 0xBD, 0xEA, 0xE1,  // .>......
            /* 13C8 */  0xCD, 0x57, 0x09, 0x7E, 0x31, 0xE0, 0xC1, 0xAE,  // .W.~1...
            /* 13D0 */  0x48, 0xA0, 0xF2, 0x30, 0x3A, 0xD0, 0x0D, 0x01,  // H..0:...
            /* 13D8 */  0x33, 0x73, 0x3E, 0x84, 0xB3, 0xF1, 0xE8, 0x71,  // 3s>....q
            /* 13E0 */  0xA7, 0x10, 0xF0, 0x0D, 0xCE, 0xC0, 0xFF, 0xFF,  // ........
            /* 13E8 */  0x57, 0x46, 0xEC, 0xF5, 0x1F, 0x3B, 0x51, 0xCC,  // WF...;Q.
            /* 13F0 */  0xA9, 0x00, 0x7C, 0xC3, 0xF0, 0x89, 0x05, 0xF8,  // ..|.....
            /* 13F8 */  0xDC, 0x70, 0xC1, 0x71, 0xAD, 0xC3, 0x9E, 0x71,  // .p.q...q
            /* 1400 */  0x70, 0x17, 0x42, 0xC0, 0xCE, 0xB0, 0x78, 0x88,  // p.B...x.
            /* 1408 */  0x8F, 0x8A, 0xCF, 0x08, 0x54, 0x36, 0x0C, 0xEA,  // ....T6..
            /* 1410 */  0xE6, 0x07, 0x2E, 0x79, 0x97, 0x5D, 0x7A, 0xC6,  // ...y.]z.
            /* 1418 */  0xF7, 0xE0, 0xC1, 0xF0, 0xFF, 0x1F, 0x3C, 0xF6,  // ......<.
            /* 1420 */  0xB0, 0xC0, 0xA7, 0x8F, 0x1D, 0x3F, 0x60, 0x67,  // .....?`g
            /* 1428 */  0xA8, 0xB8, 0xFB, 0x25, 0x18, 0xA7, 0x8A, 0x1D,  // ...%....
            /* 1430 */  0x02, 0x0F, 0xBC, 0x22, 0x2A, 0xF5, 0x0C, 0xA0,  // ..."*...
            /* 1438 */  0x88, 0x30, 0xA8, 0x93, 0x93, 0xAF, 0xD0, 0x80,  // .0......
            /* 1440 */  0x93, 0x11, 0xE3, 0xEE, 0x92, 0x70, 0xA7, 0xFC,  // .....p..
            /* 1448 */  0x5A, 0xEF, 0x1B, 0x8E, 0xEF, 0x25, 0xA7, 0xCB,  // Z....%..
            /* 1450 */  0xFE, 0xFF, 0xD3, 0x65, 0x38, 0x0F, 0x28, 0xFC,  // ...e8.(.
            /* 1458 */  0x56, 0x0D, 0xE3, 0x2C, 0xF0, 0x08, 0xF0, 0x3E,  // V..,...>
            /* 1460 */  0xCF, 0x6F, 0xD5, 0x6F, 0xD1, 0x2F, 0x04, 0x4F,  // .o.o./.O
            /* 1468 */  0x57, 0x21, 0x5E, 0xB0, 0x9E, 0x0D, 0xDE, 0x7D,  // W!^....}
            /* 1470 */  0x62, 0x3C, 0x4E, 0x3F, 0x59, 0xC7, 0x09, 0xF3,  // b<N?Y...
            /* 1478 */  0xF8, 0xF3, 0x56, 0x6D, 0x8C, 0xA3, 0x89, 0x18,  // ..Vm....
            /* 1480 */  0xE5, 0xDC, 0x1E, 0x06, 0x22, 0x9F, 0x4B, 0x94,  // ....".K.
            /* 1488 */  0xF7, 0x8B, 0x17, 0x82, 0x88, 0xD1, 0x0C, 0x11,  // ........
            /* 1490 */  0x34, 0x46, 0xA0, 0x58, 0x81, 0xE2, 0xBD, 0x55,  // 4F.X...U
            /* 1498 */  0x33, 0xE1, 0xB7, 0x6A, 0x40, 0xCD, 0x81, 0x06,  // 3..j@...
            /* 14A0 */  0x7F, 0xAB, 0x06, 0xEE, 0xA7, 0x07, 0xDC, 0xAD,  // ........
            /* 14A8 */  0x1A, 0x6C, 0xA7, 0x14, 0xF8, 0xFF, 0xFF, 0x53,  // .l.....S
            /* 14B0 */  0x0A, 0x60, 0xE5, 0x46, 0x8E, 0x3B, 0xA5, 0x80,  // .`.F.;..
            /* 14B8 */  0x73, 0xB4, 0xF0, 0x46, 0xC1, 0xD5, 0xBD, 0x26,  // s..F...&
            /* 14C0 */  0x7C, 0x0E, 0xA2, 0x7A, 0x60, 0x50, 0x47, 0x21,  // |..z`PG!
            /* 14C8 */  0x70, 0xE5, 0x7E, 0xB3, 0x68, 0x10, 0x96, 0x78,  // p.~.h..x
            /* 14D0 */  0xAE, 0x44, 0x43, 0x7B, 0x4A, 0x6F, 0x22, 0x1E,  // .DC{Jo".
            /* 14D8 */  0xCF, 0x9B, 0xA1, 0xEF, 0x0D, 0xA1, 0x9F, 0xCD,  // ........
            /* 14E0 */  0x2C, 0xE7, 0x4C, 0x09, 0xAA, 0x87, 0xB7, 0x4F,  // ,.L....O
            /* 14E8 */  0x10, 0xF0, 0x2F, 0x25, 0x3E, 0x53, 0xC2, 0xE7,  // ../%>S..
            /* 14F0 */  0xF3, 0x28, 0x3D, 0x18, 0x43, 0xFA, 0x48, 0xC9,  // .(=.C.H.
            /* 14F8 */  0x41, 0x9E, 0x48, 0x1E, 0x2E, 0xD8, 0xFF, 0xFF,  // A.H.....
            /* 1500 */  0x36, 0x09, 0xFB, 0x8C, 0x72, 0x00, 0x18, 0x59,  // 6...r..Y
            /* 1508 */  0x37, 0x49, 0xF4, 0x41, 0x92, 0x63, 0xC4, 0xF5,  // 7I.A.c..
            /* 1510 */  0xAD, 0xD1, 0xF7, 0x61, 0x1F, 0x09, 0xCE, 0xE7,  // ...a....
            /* 1518 */  0x61, 0x10, 0x8C, 0x67, 0x3A, 0x8F, 0x9A, 0x1F,  // a..g:...
            /* 1520 */  0x58, 0xF8, 0xF8, 0x39, 0xF8, 0xFB, 0xC1, 0xD3,  // X..9....
            /* 1528 */  0xA5, 0x0F, 0x3B, 0x21, 0x1E, 0x7C, 0xF8, 0x99,  // ..;!.|..
            /* 1530 */  0x0E, 0x5C, 0x2A, 0xCE, 0x74, 0x40, 0xE2, 0x04,  // .\*.t@..
            /* 1538 */  0x0C, 0xE3, 0xB4, 0x80, 0x1B, 0x88, 0xCF, 0x7F,  // ........
            /* 1540 */  0xD8, 0x29, 0x9F, 0x08, 0x3B, 0xC0, 0x60, 0x46,  // .)..;.`F
            /* 1548 */  0x07, 0xAE, 0xB1, 0xF9, 0x94, 0x09, 0x7C, 0x34,  // ......|4
            /* 1550 */  0x3C, 0x6B, 0x74, 0xB4, 0xC0, 0xCF, 0xEC, 0xFF,  // <kt.....
            /* 1558 */  0xFF, 0xE8, 0xC1, 0x8E, 0x16, 0xB8, 0xBC, 0x47,  // .......G
            /* 1560 */  0x0B, 0x50, 0x0D, 0xCB, 0x43, 0x83, 0x7F, 0x73,  // .P..C..s
            /* 1568 */  0x79, 0xB4, 0x00, 0xC3, 0x51, 0x82, 0x9F, 0x0D,  // y...Q...
            /* 1570 */  0x7C, 0x94, 0xF0, 0xE9, 0x17, 0x7F, 0x82, 0xF1,  // |.......
            /* 1578 */  0xF1, 0x97, 0x7B, 0x03, 0xA6, 0x17, 0x0C, 0x2B,  // ..{....+
            /* 1580 */  0xA0, 0xD6, 0x01, 0x03, 0x6E, 0xE2, 0x61, 0xA0,  // ....n.a.
            /* 1588 */  0xB2, 0x1E, 0x70, 0xE9, 0x54, 0x9F, 0x8D, 0x3C,  // ..p.T..<
            /* 1590 */  0xF2, 0x67, 0x08, 0xB3, 0x1F, 0xD1, 0x6B, 0x99,  // .g....k.
            /* 1598 */  0x8F, 0x39, 0x3E, 0x9C, 0x18, 0x25, 0xA0, 0xCF,  // .9>..%..
            /* 15A0 */  0xBE, 0x0C, 0x10, 0x73, 0xEE, 0x37, 0x46, 0x40,  // ...s.7F@
            /* 15A8 */  0x58, 0x17, 0x19, 0x63, 0xC3, 0x42, 0x3A, 0xA4,  // X..c.B:.
            /* 15B0 */  0xE7, 0x4F, 0x86, 0xC5, 0x6F, 0x36, 0x41, 0x9F,  // .O..o6A.
            /* 15B8 */  0x1C, 0x8C, 0x84, 0xB9, 0x03, 0xF8, 0x70, 0x65,  // ......pe
            /* 15C0 */  0x20, 0x7E, 0x12, 0x78, 0x07, 0xF1, 0x0D, 0xEB,  //  ~.x....
            /* 15C8 */  0x14, 0x70, 0x67, 0x61, 0x76, 0x37, 0x32, 0x14,  // .pgav72.
            /* 15D0 */  0xBF, 0x28, 0xBC, 0x08, 0xF8, 0xCA, 0xC1, 0x6E,  // .(.....n
            /* 15D8 */  0x0C, 0xE0, 0xC3, 0x0A, 0x8C, 0xFD, 0xFF, 0xDF,  // ........
            /* 15E0 */  0x1A, 0xC1, 0x30, 0xFA, 0xE7, 0x24, 0x76, 0xE6,  // ..0..$v.
            /* 15E8 */  0xF2, 0x54, 0x5F, 0x1B, 0x01, 0xFF, 0xA1, 0xEF,  // .T_.....
            /* 15F0 */  0x8C, 0xA8, 0x98, 0xD7, 0x46, 0x40, 0xE1, 0xFF,  // ....F@..
            /* 15F8 */  0xFF, 0xDA, 0x08, 0xBC, 0xEE, 0x26, 0xAF, 0x8D,  // .....&..
            /* 1600 */  0x60, 0x17, 0x7F, 0x6D, 0x04, 0x68, 0x72, 0xF5,  // `..m.hr.
            /* 1608 */  0xC3, 0x5D, 0x1B, 0xC1, 0x76, 0x4C, 0x61, 0xFF,  // .]..vLa.
            /* 1610 */  0xFF, 0x63, 0x0A, 0xE0, 0xEC, 0x12, 0x45, 0x8E,  // .c....E.
            /* 1618 */  0x29, 0x20, 0x1E, 0x2E, 0xEC, 0x0B, 0x33, 0xE2,  // ) ....3.
            /* 1620 */  0x65, 0x40, 0x0F, 0x05, 0x8E, 0x08, 0x83, 0xBA,  // e@......
            /* 1628 */  0x38, 0x82, 0x2B, 0x0A, 0xA5, 0x40, 0x7D, 0xC2,  // 8.+..@}.
            /* 1630 */  0x00, 0xDC, 0xFC, 0xFF, 0x4F, 0x18, 0x3C, 0xD0,  // ....O.<.
            /* 1638 */  0xC8, 0xD0, 0xA3, 0xF0, 0xA8, 0x70, 0xF7, 0x3B,  // .....p.;
            /* 1640 */  0xF0, 0xDC, 0x59, 0x3C, 0x72, 0x0F, 0x0C, 0xF8,  // ..Y<r...
            /* 1648 */  0xC4, 0x1A, 0x18, 0xFA, 0x8C, 0x03, 0x77, 0x6C,  // ......wl
            /* 1650 */  0xE0, 0x3A, 0x95, 0x00, 0x87, 0xB1, 0xE1, 0xEF,  // .:......
            /* 1658 */  0x8D, 0x1E, 0x1B, 0x6E, 0x20, 0x3E, 0x4A, 0x3C,  // ...n >J<
            /* 1660 */  0xAF, 0xB1, 0xB3, 0x02, 0x0E, 0xFC, 0xEC, 0x5E,  // .......^
            /* 1668 */  0x8D, 0xF8, 0xE8, 0xC0, 0x05, 0xE8, 0xD1, 0x01,  // ........
            /* 1670 */  0x8F, 0xFF, 0xFF, 0x41, 0x00, 0xEE, 0xE8, 0x70,  // ...A...p
            /* 1678 */  0x07, 0x27, 0xCC, 0xD8, 0xC0, 0x26, 0x61, 0x6C,  // .'...&al
            /* 1680 */  0x40, 0x29, 0xDF, 0x65, 0x18, 0x0A, 0xF4, 0x2B,  // @).e...+
            /* 1688 */  0x26, 0x43, 0x7C, 0x45, 0xF1, 0xCD, 0xC3, 0x04,  // &C|E....
            /* 1690 */  0xB3, 0x5C, 0x31, 0x41, 0x33, 0x34, 0x83, 0x7A,  // .\1A34.z
            /* 1698 */  0x68, 0xF0, 0xCF, 0x7F, 0xE4, 0x8A, 0x09, 0xFD,  // h.......
            /* 16A0 */  0x7E, 0xE9, 0x03, 0x87, 0xCF, 0x57, 0x66, 0xF5,  // ~....Wf.
            /* 16A8 */  0x15, 0x13, 0xCE, 0xD9, 0x27, 0x42, 0x02, 0x67,  // ....'B.g
            /* 16B0 */  0xBC, 0x0F, 0x43, 0xCF, 0x34, 0x06, 0x54, 0x9A,  // ..C.4.T.
            /* 16B8 */  0x4B, 0x2F, 0x3D, 0xB1, 0x84, 0x38, 0xD1, 0xDE,  // K/=..8..
            /* 16C0 */  0x4F, 0x67, 0xF4, 0xB0, 0xE1, 0x63, 0xAF, 0x67,  // Og...c.g
            /* 16C8 */  0xFB, 0x68, 0xE0, 0x41, 0xFA, 0xC4, 0xC1, 0xEE,  // .h.A....
            /* 16D0 */  0xC4, 0xBE, 0x20, 0x3D, 0xC7, 0x18, 0xED, 0x3D,  // .. =...=
            /* 16D8 */  0xC2, 0xE7, 0x9D, 0x67, 0x4A, 0x23, 0x84, 0x63,  // ...gJ#.c
            /* 16E0 */  0x27, 0x38, 0x8F, 0xC4, 0x97, 0x4C, 0xFF, 0xFF,  // '8...L..
            /* 16E8 */  0xE7, 0xE9, 0x13, 0x0F, 0xF6, 0xE8, 0xC3, 0x8F,  // ........
            /* 16F0 */  0x6C, 0x0C, 0xDB, 0xD7, 0x01, 0x36, 0x2A, 0xDF,  // l....6*.
            /* 16F8 */  0x72, 0x8D, 0x6D, 0xD0, 0xC7, 0x2C, 0x4F, 0x9B,  // r.m..,O.
            /* 1700 */  0x5D, 0x28, 0xC1, 0x27, 0xE9, 0x48, 0x8B, 0xBE,  // ](.'.H..
            /* 1708 */  0xF6, 0x19, 0xF5, 0x81, 0xD4, 0x37, 0x61, 0x5F,  // .....7a_
            /* 1710 */  0x81, 0x9E, 0xB3, 0x3C, 0x1D, 0x4F, 0xC4, 0xB7,  // ...<.O..
            /* 1718 */  0x05, 0xA3, 0xBF, 0x23, 0xB0, 0xD8, 0x77, 0x04,  // ...#..w.
            /* 1720 */  0x50, 0xDD, 0x07, 0xF8, 0x1D, 0x01, 0xEE, 0x54,  // P......T
            /* 1728 */  0xDE, 0x11, 0xC0, 0xA0, 0xEF, 0x42, 0x40, 0x07,  // .....B@.
            /* 1730 */  0xEA, 0xF9, 0x79, 0xAC, 0x3E, 0xD2, 0xFA, 0x92,  // ..y.>...
            /* 1738 */  0xF0, 0x98, 0xC0, 0x60, 0x7C, 0xBD, 0x33, 0x86,  // ...`|.3.
            /* 1740 */  0x61, 0x3C, 0xD2, 0x30, 0x3E, 0x28, 0x70, 0x15,  // a<.0>(p.
            /* 1748 */  0xF7, 0x5A, 0xE8, 0xA9, 0xE7, 0x81, 0xCA, 0x7B,  // .Z.....{
            /* 1750 */  0x50, 0x80, 0x72, 0x23, 0xE8, 0xF2, 0x28, 0x8E,  // P.r#..(.
            /* 1758 */  0x1A, 0x9F, 0x4F, 0x03, 0xF6, 0x35, 0x59, 0xDD,  // ..O..5Y.
            /* 1760 */  0x57, 0x7D, 0x39, 0xF6, 0xA5, 0x83, 0xDD, 0x65,  // W}9....e
            /* 1768 */  0xD9, 0xDD, 0x90, 0xDD, 0xBD, 0xC2, 0xBD, 0xDC,  // ........
            /* 1770 */  0xFA, 0xD0, 0xE0, 0xEB, 0x82, 0xC7, 0x68, 0xD5,  // ......h.
            /* 1778 */  0x70, 0xD0, 0xAE, 0x06, 0x41, 0xFE, 0xFF, 0x0F,  // p...A...
            /* 1780 */  0x02, 0x3E, 0x72, 0x79, 0x5A, 0x46, 0x84, 0x71,  // .>ryZF.q
            /* 1788 */  0xF8, 0x65, 0x67, 0xC3, 0x38, 0xBE, 0xE9, 0xFA,  // .eg.8...
            /* 1790 */  0x54, 0xC0, 0x0E, 0x5B, 0xBE, 0x19, 0x18, 0xF8,  // T..[....
            /* 1798 */  0x41, 0xE1, 0x65, 0xDB, 0xC7, 0x07, 0x36, 0xB4,  // A.e...6.
            /* 17A0 */  0xB7, 0x05, 0x4F, 0x20, 0xD6, 0x9B, 0x03, 0x8C,  // ..O ....
            /* 17A8 */  0x93, 0x03, 0xF8, 0xB4, 0x3F, 0x14, 0x74, 0x10,  // ....?.t.
            /* 17B0 */  0xC7, 0x9F, 0x1C, 0x60, 0x1C, 0x16, 0x0C, 0x11,  // ...`....
            /* 17B8 */  0xFE, 0x1D, 0x80, 0x29, 0x84, 0xD6, 0xC1, 0x01,  // ...)....
            /* 17C0 */  0x3C, 0x1E, 0x0E, 0x0E, 0xA0, 0xB8, 0xF4, 0x90,  // <.......
            /* 17C8 */  0x83, 0x03, 0xF4, 0x10, 0x17, 0x04, 0x6A, 0xE5,  // ......j.
            /* 17D0 */  0xC6, 0x48, 0x8F, 0xD7, 0xE0, 0x39, 0x40, 0x70,  // .H...9@p
            /* 17D8 */  0x58, 0x43, 0xC4, 0x35, 0x46, 0x60, 0x63, 0x44,  // XC.5F`cD
            /* 17E0 */  0xF6, 0x31, 0x82, 0x61, 0xC4, 0x36, 0x46, 0x70,  // .1.a.6Fp
            /* 17E8 */  0x63, 0x44, 0xF7, 0x31, 0x82, 0xA1, 0x17, 0x8F,  // cD.1....
            /* 17F0 */  0x23, 0x8C, 0x08, 0xBE, 0x4A, 0x70, 0x2D, 0xA7,  // #...Jp-.
            /* 17F8 */  0x10, 0x5D, 0x25, 0xE0, 0x66, 0x5F, 0x99, 0x86,  // .]%.f_..
            /* 1800 */  0xC6, 0x53, 0x93, 0xE8, 0x2A, 0x81, 0xF9, 0xFF,  // .S..*...
            /* 1808 */  0x5F, 0x25, 0xF8, 0x45, 0xDA, 0x27, 0x59, 0x76,  // _%.E.'Yv
            /* 1810 */  0x9B, 0x80, 0x75, 0x73, 0xF1, 0x8D, 0xC8, 0xC7,  // ..us....
            /* 1818 */  0x17, 0xDC, 0x11, 0x86, 0x9D, 0xF4, 0x7D, 0xD6,  // ......}.
            /* 1820 */  0xC4, 0x9C, 0x20, 0x60, 0x9C, 0x1C, 0x70, 0x87,  // .. `..p.
            /* 1828 */  0x08, 0x70, 0x1D, 0x14, 0x18, 0xCA, 0x03, 0x0D,  // .p......
            /* 1830 */  0x47, 0x62, 0x70, 0xAF, 0x03, 0x11, 0x22, 0xC1,  // Gbp...".
            /* 1838 */  0x98, 0x14, 0xBB, 0x05, 0xFA, 0x78, 0xC3, 0xCE,  // .....x..
            /* 1840 */  0x13, 0x1E, 0x96, 0x6F, 0x18, 0xFC, 0xD2, 0xE3,  // ...o....
            /* 1848 */  0x2B, 0x38, 0x3B, 0x19, 0xF2, 0x8B, 0xE3, 0x43,  // +8;....C
            /* 1850 */  0x84, 0x51, 0xA2, 0xB1, 0x93, 0x43, 0x84, 0x93,  // .Q...C..
            /* 1858 */  0x7B, 0x0A, 0xF1, 0x99, 0xC3, 0x67, 0x38, 0xCC,  // {....g8.
            /* 1860 */  0x0D, 0xF2, 0xB8, 0x0E, 0xCA, 0xD7, 0x4B, 0x36,  // ......K6
            /* 1868 */  0x6C, 0xE3, 0x18, 0xF6, 0x39, 0xC8, 0x33, 0xF0,  // l...9.3.
            /* 1870 */  0x58, 0x62, 0x1F, 0x90, 0x21, 0xD9, 0xB0, 0xD8,  // Xb..!...
            /* 1878 */  0x10, 0x8D, 0xE7, 0xF3, 0x0D, 0xC3, 0x89, 0xE5,  // ........
            /* 1880 */  0x71, 0x62, 0x27, 0xC3, 0xB0, 0xCF, 0xD6, 0xD3,  // qb'.....
            /* 1888 */  0xE0, 0x07, 0x0D, 0xDF, 0x09, 0xDE, 0xD6, 0x31,  // .......1
            /* 1890 */  0xC7, 0x01, 0xDF, 0x42, 0x60, 0xDF, 0x14, 0x1E,  // ...B`...
            /* 1898 */  0x8F, 0x8C, 0xF2, 0x9E, 0xC2, 0x6E, 0x23, 0x60,  // .....n#`
            /* 18A0 */  0xFD, 0xFF, 0xDF, 0x46, 0x70, 0x47, 0xCF, 0xE7,  // ...FpG..
            /* 18A8 */  0x76, 0xF0, 0x40, 0xBC, 0xB3, 0x19, 0xFD, 0x79,  // v.@....y
            /* 18B0 */  0xEA, 0x9C, 0xD9, 0x1C, 0x8E, 0xC6, 0x63, 0xF0,  // ......c.
            /* 18B8 */  0x61, 0xC2, 0xE7, 0x57, 0xC0, 0xCD, 0xB0, 0xB8,  // a..W....
            /* 18C0 */  0xEC, 0xE7, 0xA2, 0x81, 0x7C, 0xE7, 0x90, 0x50,  // ....|..P
            /* 18C8 */  0x18, 0xD4, 0xE1, 0xCE, 0x47, 0x74, 0xC0, 0xC9,  // ....Gt..
            /* 18D0 */  0x79, 0x1C, 0xF6, 0x94, 0xDF, 0x60, 0x8C, 0xF0,  // y....`..
            /* 18D8 */  0xEC, 0x12, 0x38, 0xC6, 0x49, 0xBC, 0x88, 0xBC,  // ..8.I...
            /* 18E0 */  0xB8, 0x18, 0x3D, 0xD6, 0xF3, 0x38, 0xBB, 0x28,  // ..=..8.(
            /* 18E8 */  0x1C, 0x43, 0x28, 0x9F, 0x31, 0x42, 0xC4, 0x8A,  // .C(.1B..
            /* 18F0 */  0x62, 0xD4, 0x20, 0x8F, 0x0B, 0xFE, 0xFF, 0x83,  // b. .....
            /* 18F8 */  0x3C, 0xCB, 0x44, 0x38, 0x94, 0xB8, 0xC6, 0x7B,  // <.D8...{
            /* 1900 */  0x1E, 0x67, 0x22, 0x87, 0x4C, 0x0F, 0x7B, 0xE4,  // .g".L.{.
            /* 1908 */  0x1C, 0x0D, 0xB2, 0x63, 0x03, 0x60, 0xEE, 0x74,  // ...c.`.t
            /* 1910 */  0x80, 0x3B, 0x45, 0x83, 0x69, 0xB0, 0xB0, 0x07,  // .;E.i...
            /* 1918 */  0xC1, 0x15, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55,  // .......U
            /* 1920 */  0x83, 0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7,  // .25.4...
            /* 1928 */  0x52, 0x63, 0xC6, 0xA4, 0x1C, 0x04, 0x74, 0x80,  // Rc....t.
            /* 1930 */  0xF2, 0x6F, 0xC2, 0x31, 0x40, 0xE8, 0x5D, 0xCA,  // .o.1@.].
            /* 1938 */  0xA3, 0xF3, 0x89, 0xC2, 0x40, 0x16, 0x05, 0x22,  // ....@.."
            /* 1940 */  0x20, 0x07, 0x00, 0xA2, 0xA1, 0x40, 0x68, 0x48,  //  ....@hH
            /* 1948 */  0x30, 0x2A, 0x8B, 0x46, 0x40, 0x0E, 0x00, 0x42,  // 0*.F@..B
            /* 1950 */  0x43, 0x81, 0xD0, 0x90, 0x14, 0x3A, 0x97, 0x12,  // C....:..
            /* 1958 */  0x0A, 0x01, 0x59, 0x28, 0x08, 0x15, 0x0E, 0x42,  // ..Y(...B
            /* 1960 */  0xC3, 0x81, 0x50, 0xD5, 0x0F, 0x05, 0x81, 0xFA,  // ..P.....
            /* 1968 */  0xFF, 0x9F, 0x12, 0x44, 0x40, 0x4E, 0x0E, 0x42,  // ...D@N.B
            /* 1970 */  0x75, 0x7F, 0xC0, 0x04, 0x62, 0xB9, 0x1F, 0x40,  // u...b..@
            /* 1978 */  0x01, 0x3A, 0x1C, 0x88, 0x80, 0x1C, 0x18, 0x84,  // .:......
            /* 1980 */  0x7E, 0xBF, 0x0C, 0x62, 0xAD, 0x20, 0x74, 0xA5,  // ~..b. t.
            /* 1988 */  0x06, 0xB5, 0x14, 0x2D, 0x40, 0x4C, 0x1E, 0x08,  // ...-@L..
            /* 1990 */  0x95, 0x0B, 0x22, 0x30, 0x47, 0x03, 0xA2, 0x71,  // .."0G..q
            /* 1998 */  0x41, 0x68, 0x7C, 0x30, 0x2A, 0xD5, 0x0B, 0x10,  // Ah|0*...
            /* 19A0 */  0x93, 0x0F, 0x42, 0xE3, 0x80, 0xE8, 0x74, 0x40,  // ..B...t@
            /* 19A8 */  0x9E, 0x0D, 0x1A, 0x30, 0x01, 0xA1, 0x22, 0x41,  // ...0.."A
            /* 19B0 */  0x04, 0xE6, 0x58, 0x40, 0x34, 0x2A, 0x08, 0x8D,  // ..X@4*..
            /* 19B8 */  0x0E, 0x46, 0xA5, 0x9B, 0x19, 0x00, 0x05, 0xA1,  // .F......
            /* 19C0 */  0xF1, 0x40, 0x74, 0xFE, 0x26, 0x6A, 0x80, 0x98,  // .@t.&j..
            /* 19C8 */  0x44, 0x10, 0x2A, 0x19, 0x44, 0x60, 0x8E, 0x0A,  // D.*.D`..
            /* 19D0 */  0x44, 0xE3, 0x83, 0x50, 0x39, 0x6E, 0xC0, 0x58,  // D..P9n.X
            /* 19D8 */  0x04, 0x10, 0x1D, 0x09, 0x08, 0x08, 0x8D, 0x09,  // ........
            /* 19E0 */  0x42, 0xA5, 0xBC, 0x19, 0x04, 0x68, 0xF9, 0x20,  // B....h. 
            /* 19E8 */  0x02, 0x72, 0x24, 0x10, 0x1A, 0x11, 0x8C, 0x8A,  // .r$.....
            /* 19F0 */  0xD5, 0x73, 0x24, 0xA0, 0x20, 0x34, 0x10, 0x88,  // .s$. 4..
            /* 19F8 */  0x86, 0x48, 0xFC, 0x0C, 0x91, 0x82, 0x50, 0x91,  // .H....P.
            /* 1A00 */  0x20, 0x02, 0xB3, 0x44, 0x45, 0x20, 0x2C, 0x20,  //  ..DE , 
            /* 1A08 */  0x08, 0x0D, 0xF5, 0x88, 0x11, 0xA0, 0x83, 0x82,  // ........
            /* 1A10 */  0xD0, 0xE0, 0x20, 0x1A, 0x38, 0xB1, 0x34, 0x70,  // .. .8.4p
            /* 1A18 */  0x0A, 0x42, 0xE3, 0x80, 0x08, 0xCC, 0xF1, 0x81,  // .B......
            /* 1A20 */  0xA8, 0x24, 0x4D, 0x03, 0xA5, 0x20, 0x1A, 0x06,  // .$M.. ..
            /* 1A28 */  0x31, 0x35, 0x0C, 0x0A, 0x42, 0x63, 0xB8, 0x02,  // 15..Bc..
            /* 1A30 */  0x64, 0xD1, 0x40, 0x68, 0x54, 0x10, 0x1D, 0x1F,  // d.@hT...
            /* 1A38 */  0xC8, 0xC3, 0x56, 0x40, 0x96, 0x0A, 0x42, 0xFF,  // ..V@..B.
            /* 1A40 */  0xFF, 0xD2, 0x41, 0x04, 0xE6, 0xC0, 0x40, 0x54,  // ..A...@T
            /* 1A48 */  0xC4, 0xBB, 0xE5, 0xF0, 0x18, 0x08, 0x15, 0x0B,  // ........
            /* 1A50 */  0x22, 0x40, 0x0B, 0x7E, 0x43, 0x09, 0xC4, 0x71,  // "@.~C..q
            /* 1A58 */  0x41, 0x68, 0xA8, 0xCF, 0x93, 0x86, 0x47, 0x40,  // Ah....G@
            /* 1A60 */  0x68, 0x70, 0x10, 0x81, 0x59, 0xE8, 0x0F, 0x4F,  // hp..Y..O
            /* 1A68 */  0x40, 0x16, 0x0F, 0x42, 0xC3, 0x80, 0xD0, 0x90,  // @..B....
            /* 1A70 */  0x20, 0xF4, 0x5D, 0xE2, 0xA3, 0x06, 0xF9, 0xE5,  //  .].....
            /* 1A78 */  0xE9, 0x38, 0x40, 0x40, 0xA8, 0xD8, 0x5F, 0x9F,  // .8@@.._.
            /* 1A80 */  0x8E, 0x00, 0x04, 0x84, 0x06, 0x02, 0xD1, 0x11,  // ........
            /* 1A88 */  0x80, 0xA8, 0x1B, 0x14, 0x05, 0xA1, 0x22, 0x41,  // ......"A
            /* 1A90 */  0x04, 0xE6, 0x40, 0x40, 0x34, 0x24, 0x08, 0x0D,  // ..@@4$..
            /* 1A98 */  0x0D, 0x46, 0xC5, 0xBA, 0x1B, 0x02, 0x05, 0xA1,  // .F......
            /* 1AA0 */  0x81, 0x40, 0x68, 0x50, 0x10, 0x1D, 0x3B, 0x88,  // .@hP..;.
            /* 1AA8 */  0xBC, 0x63, 0x07, 0x05, 0xA1, 0xC2, 0x41, 0x04,  // .c....A.
            /* 1AB0 */  0x66, 0xE1, 0xFE, 0x40, 0x58, 0x6C, 0x10, 0xAA,  // f..@Xl..
            /* 1AB8 */  0xE9, 0xAF, 0x12, 0x90, 0xE8, 0x03, 0xA1, 0x9A,  // ........
            /* 1AC0 */  0x41, 0x64, 0x64, 0x18, 0x06, 0x11, 0xA0, 0xB3,  // Add.....
            /* 1AC8 */  0x82, 0xD1, 0xDC, 0x20, 0x54, 0xCB, 0x97, 0x48,  // ... T..H
            /* 1AD0 */  0x80, 0x16, 0x06, 0xA2, 0x03, 0x01, 0x01, 0xD1,  // ........
            /* 1AD8 */  0xE1, 0x81, 0x80, 0xD0, 0x98, 0x80, 0x34, 0x33,  // ......43
            /* 1AE0 */  0x20, 0x4D, 0xF4, 0xD2, 0x11, 0x98, 0xF3, 0x81,  //  M......
            /* 1AE8 */  0x50, 0x1D, 0x9F, 0x9A, 0x20, 0x24, 0x36, 0x88,  // P... $6.
            /* 1AF0 */  0x40, 0x2D, 0xE2, 0x5D, 0x13, 0x94, 0x84, 0x00,  // @-.]....
            /* 1AF8 */  0xD1, 0x11, 0x81, 0x80, 0xD0, 0xC0, 0x20, 0xF4,  // ...... .
            /* 1B00 */  0x6D, 0x66, 0x10, 0x27, 0x03, 0xA1, 0x29, 0x41,  // mf.'..)A
            /* 1B08 */  0x68, 0x72, 0x10, 0x0D, 0xC0, 0x32, 0x1E, 0x57,  // hr...2.W
            /* 1B10 */  0x1A, 0x80, 0xD5, 0x83, 0x08, 0xCC, 0x49, 0x40,  // ......I@
            /* 1B18 */  0x68, 0x3A, 0x10, 0x01, 0x3A, 0x2A, 0x20, 0xFD,  // h:..:* .
            /* 1B20 */  0xFF, 0x07, 0x51, 0x79, 0xDC, 0xA0, 0x20, 0x34,  // ..Qy.. 4
            /* 1B28 */  0x3E, 0x08, 0x4D, 0xFB, 0x62, 0x14, 0xA8, 0xB3,  // >.M.b...
            /* 1B30 */  0x83, 0x08, 0xD4, 0xDA, 0xDF, 0x3B, 0xC1, 0x48,  // .....;.H
            /* 1B38 */  0x22, 0x10, 0x9A, 0x13, 0x84, 0xE6, 0x06, 0xA1,  // ".......
            /* 1B40 */  0x41, 0x1E, 0x48, 0x8F, 0x34, 0x0C, 0x84, 0x06,  // A.H.4...
            /* 1B48 */  0x05, 0xD1, 0x00, 0x9C, 0x1A, 0x44, 0x03, 0x70,  // .....D.p
            /* 1B50 */  0xA6, 0x97, 0x52, 0x30, 0x92, 0x10, 0x84, 0xE6,  // ..R0....
            /* 1B58 */  0x07, 0xA1, 0x8A, 0x5F, 0x47, 0x41, 0x89, 0x7E,  // ..._GA.~
            /* 1B60 */  0x10, 0x81, 0x3A, 0x3F, 0x88, 0xC0, 0xAC, 0xEA,  // ..:?....
            /* 1B68 */  0x3D, 0xA5, 0xA3, 0x0C, 0x01, 0xA1, 0xDA, 0x41,  // =......A
            /* 1B70 */  0xA8, 0xAE, 0x27, 0x51, 0x50, 0x92, 0x0A, 0x84,  // ..'QP...
            /* 1B78 */  0x26, 0xFD, 0x17, 0x05, 0x21, 0x3A, 0xDF, 0x7C,  // &...!:.|
            /* 1B80 */  0x87, 0xC2, 0x40, 0x34, 0x30, 0x02, 0x42, 0x73,  // ..@40.Bs
            /* 1B88 */  0x83, 0x51, 0x69, 0x6A, 0x8F, 0x35, 0x14, 0x44,  // .Qij.5.D
            /* 1B90 */  0x83, 0xB1, 0x76, 0x10, 0x81, 0x39, 0x31, 0x18,  // ..v..91.
            /* 1B98 */  0x55, 0xE1, 0x16, 0x8C, 0x49, 0x02, 0x11, 0x98,  // U...I...
            /* 1BA0 */  0xB3, 0x80, 0xE8, 0x60, 0x40, 0xC0, 0x68, 0x58,  // ...`@.hX
            /* 1BA8 */  0x30, 0x2A, 0xF4, 0x43, 0xF5, 0xA0, 0xC1, 0x40,  // 0*.C...@
            /* 1BB0 */  0x04, 0xE6, 0x24, 0x20, 0x3A, 0xF0, 0x10, 0xBB,  // ..$ :...
            /* 1BB8 */  0x07, 0x1E, 0x0A, 0x22, 0x30, 0x6B, 0x05, 0x11,  // ..."0k..
            /* 1BC0 */  0x98, 0x83, 0x82, 0xD1, 0xF0, 0x60, 0x54, 0x89,  // .....`T.
            /* 1BC8 */  0x5E, 0x30, 0x96, 0x1A, 0x44, 0x60, 0x56, 0xFB,  // ^0..D`V.
            /* 1BD0 */  0x82, 0x7A, 0xF4, 0x60, 0x3F, 0xA8, 0x80, 0x24,  // .z.`?..$
            /* 1BD8 */  0x1A, 0x88, 0x06, 0x47, 0xFE, 0xD5, 0x02, 0xB3,  // ...G....
            /* 1BE0 */  0x60, 0x10, 0x1A, 0x03, 0x84, 0xC6, 0x02, 0xA1,  // `.......
            /* 1BE8 */  0x92, 0x1F, 0x8A, 0x3A, 0x9E, 0x10, 0x10, 0x1A,  // ...:....
            /* 1BF0 */  0xF7, 0x43, 0x15, 0x8C, 0x48, 0xF8, 0x75, 0xEA,  // .C..H.u.
            /* 1BF8 */  0xE0, 0x42, 0x40, 0x74, 0x80, 0x20, 0x40, 0x34,  // .B@t. @4
            /* 1C00 */  0x18, 0x08, 0x0D, 0x0A, 0xC8, 0xDF, 0x64, 0x02,  // ......d.
            /* 1C08 */  0xF4, 0xFF, 0x3F, 0x04, 0x88, 0x00, 0x09, 0x08,  // ..?.....
            /* 1C10 */  0x0D, 0x0A, 0x42, 0x15, 0x3D, 0xEB, 0x1E, 0x0E,  // ..B.=...
            /* 1C18 */  0x18, 0x88, 0x40, 0xAD, 0xEB, 0x05, 0xFD, 0x50,  // ..@....P
            /* 1C20 */  0xC0, 0x40, 0xA8, 0x76, 0x10, 0x81, 0x39, 0x33,  // .@.v..93
            /* 1C28 */  0x10, 0xD5, 0xF1, 0x87, 0x7D, 0x30, 0x60, 0x20,  // ....}0` 
            /* 1C30 */  0x34, 0x04, 0x08, 0xD5, 0xF8, 0xBC, 0x13, 0xA8,  // 4.......
            /* 1C38 */  0xF3, 0x80, 0x08, 0xC8, 0x19, 0x41, 0x68, 0x66,  // .....Ahf
            /* 1C40 */  0x30, 0xAA, 0xF4, 0xF5, 0x15, 0x88, 0xA8, 0x07,  // 0.......
            /* 1C48 */  0xA1, 0x69, 0x40, 0x68, 0x4A, 0x10, 0x01, 0x5A,  // .i@hJ..Z
            /* 1C50 */  0xD9, 0x8B, 0x54, 0x43, 0x27, 0x20, 0x54, 0x3D,  // ..TC' T=
            /* 1C58 */  0x88, 0xC0, 0x9C, 0xFE, 0x07, 0xA8, 0x63, 0x05,  // ......c.
            /* 1C60 */  0x79, 0x8A, 0x09, 0xC4, 0xCA, 0xFF, 0x6C, 0x07,  // y.....l.
            /* 1C68 */  0xC0, 0x40, 0x68, 0x3A, 0x10, 0x9A, 0x1F, 0x84,  // .@h:....
            /* 1C70 */  0x6A, 0x7D, 0x96, 0x05, 0x25, 0xF9, 0x40, 0x34,  // j}..%.@4
            /* 1C78 */  0x20, 0x02, 0x42, 0x35, 0x7C, 0x46, 0x0F, 0x80,  //  .B5|F..
            /* 1C80 */  0x81, 0x68, 0x00, 0x04, 0x84, 0xA6, 0x03, 0xA3,  // .h......
            /* 1C88 */  0x6A, 0xDE, 0xC2, 0x81, 0x88, 0x42, 0x10, 0xAA,  // j....B..
            /* 1C90 */  0x18, 0x84, 0xE6, 0x03, 0xA1, 0x01, 0xDF, 0xF5,  // ........
            /* 1C98 */  0x3A, 0x30, 0x90, 0xEF, 0x9F, 0x0E, 0x21, 0x04,  // :0....!.
            /* 1CA0 */  0x84, 0xC6, 0xF1, 0x7F, 0x18, 0xA3, 0x20, 0x34,  // ...... 4
            /* 1CA8 */  0x2C, 0x88, 0xC0, 0x2C, 0x2C, 0xC0, 0x31, 0x88,  // ,..,,.1.
            /* 1CB0 */  0x82, 0x50, 0xF1, 0x20, 0x3A, 0x20, 0x10, 0x20,  // .P. : . 
            /* 1CB8 */  0x2A, 0xA1, 0xC0, 0xC1, 0x80, 0x82, 0x68, 0x10,  // *.....h.
            /* 1CC0 */  0x04, 0x88, 0x86, 0x03, 0xA1, 0x61, 0xC1, 0xA8,  // .....a..
            /* 1CC8 */  0xBC, 0x04, 0x47, 0x06, 0x0A, 0x42, 0x23, 0x80,  // ..G..B#.
            /* 1CD0 */  0x08, 0xCC, 0x91, 0x81, 0xA8, 0x8C, 0x06, 0xC3,  // ........
            /* 1CD8 */  0xA3, 0x11, 0xC0, 0x58, 0x32, 0x10, 0x1D, 0x53,  // ...X2..S
            /* 1CE0 */  0x08, 0x08, 0xD5, 0x9C, 0x01, 0x8C, 0xFD, 0xFF,  // ........
            /* 1CE8 */  0x93, 0x82, 0x08, 0xC8, 0xE9, 0x41, 0x68, 0xDC,  // .....Ah.
            /* 1CF0 */  0x12, 0x60, 0xEC, 0xFF, 0x0F                     // .`...
        })
        Name (WDST, Buffer (0x2C)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDIN, Buffer (0x30)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (WDEN, Buffer (0x2C)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDLI, Buffer (0x28)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (WDPA, Buffer (0x34)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDBU, Buffer (0x38)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (QPUW, 3, Serialized)
        {
            Local7 = 0x04
            If ((Arg1 < Arg2))
            {
                PWOT = Arg0
                PWOI = Arg1
                PUWS = 0x04
                GSWS (0x01F3)
                Local7 = PUWS /* \PUWS */
                If ((Local7 == Zero))
                {
                    Local1 = PWOI /* \PWOI */
                    If ((Local1 < 0x96))
                    {
                        Local0 = PWBS /* \PWBS */
                    }
                    ElseIf ((Local1 < 0x0190))
                    {
                        Local0 = PWBM /* \PWBM */
                    }
                    ElseIf ((Local1 < 0x03E8))
                    {
                        Local0 = PWBL /* \PWBL */
                    }
                    Else
                    {
                        Local0 = PUWB /* \PUWB */
                    }
                }
            }

            If ((Local7 != Zero))
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local0 = WDST /* \_SB_.WMIB.WDST */
                    }
                    Case (One)
                    {
                        Local0 = WDIN /* \_SB_.WMIB.WDIN */
                    }
                    Case (0x02)
                    {
                        Local0 = WDEN /* \_SB_.WMIB.WDEN */
                    }
                    Case (0x03)
                    {
                        Local0 = WDLI /* \_SB_.WMIB.WDLI */
                    }
                    Case (0x04)
                    {
                        Local0 = WDPA /* \_SB_.WMIB.WDPA */
                    }
                    Case (0x05)
                    {
                        Local0 = WDBU /* \_SB_.WMIB.WDBU */
                    }
                    Default
                    {
                        Local0 = WDEN /* \_SB_.WMIB.WDEN */
                    }

                }
            }

            Return (Local0)
        }

        Method (WQST, 1, Serialized)
        {
            Return (QPUW (Zero, Arg0, STIC))
        }

        Method (WQIN, 1, Serialized)
        {
            Return (QPUW (One, Arg0, INIC))
        }

        Method (WQEN, 1, Serialized)
        {
            Return (QPUW (0x02, Arg0, ENIC))
        }

        Method (WQOL, 1, Serialized)
        {
            Return (QPUW (0x03, Arg0, OLIC))
        }

        Method (WQPW, 1, Serialized)
        {
            Return (QPUW (0x04, Arg0, PWIC))
        }

        Method (WQBU, 1, Serialized)
        {
            Return (QPUW (0x05, Arg0, BUIC))
        }

        Name (TBFS, Buffer (0x96) {})
        Name (TBFM, Buffer (0x0190) {})
        Name (TBFL, Buffer (0x03E8) {})
        Name (TBUF, Buffer (0x9000) {})
        Method (SHBE, 4, Serialized)
        {
            Local6 = SizeOf (Arg2)
            Local0 = DerefOf (Arg3)
            If (((Local0 + 0x04) < Local6))
            {
                Arg2 [Local0] = Arg0
                Local0++
                Arg2 [Local0] = 0x82
                Local0++
                CreateWordField (Arg2, Local0, SSIZ)
                SSIZ = Arg1
                Local0 += 0x02
                If (((Local0 + Arg1) < Local6))
                {
                    Local7 = Zero
                }

                Arg3 = Local0
            }
            Else
            {
                Local7 = 0x04
            }

            Return (Local7)
        }

        Method (WSTB, 4, Serialized)
        {
            Local0 = Zero
            Local1 = SizeOf (Arg0)
            Local2 = Zero
            Local7 = SHBE (0x30, One, Arg1, RefOf (Local2))
            Local3 = Zero
            While (((Local7 == Zero) && (Local0 < Local1)))
            {
                Local5 = DerefOf (Arg0 [Local0])
                Local0++
                Local5 += (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local6 = (Local5 + 0x02)
                Local7 = SHBE (0x1E, Local6, Arg1, RefOf (Local2))
                If ((Local7 == Zero))
                {
                    If ((CPBF (Arg1, RefOf (Local2), Arg0, RefOf (Local0), Local5) == One))
                    {
                        Arg1 [Local2] = Zero
                        Local2++
                        Arg1 [Local2] = Zero
                        Local2++
                        Local3++
                    }
                    Else
                    {
                        Local7 = 0x04
                    }
                }
            }

            If ((Local7 == Zero))
            {
                If (((Local3 >= Arg2) && (Local3 <= Arg3)))
                {
                    CreateWordField (Arg1, 0x02, BSIZ)
                    BSIZ = (Local2 - 0x04)
                }
                Else
                {
                    Local7 = 0x05
                }
            }

            Return (Local7)
        }

        Name (BNSD, Package (0x01)
        {
            ""
        })
        Method (BSNS, 1, Serialized)
        {
            Local0 = Zero
            CreateWordField (Arg0, Local0, SSIZ)
            Local0 += 0x02
            Local2 = ((0x02 + SSIZ) + 0x02)
            Local1 = Buffer (Local2) {}
            Local3 = 0x02
            If ((CPBF (Local1, RefOf (Local3), Arg0, RefOf (Local0), SSIZ) == One))
            {
                CreateWordField (Local1, Local3, UNUL)
                UNUL = Zero
                CreateWordField (Local1, Zero, USIZ)
                USIZ = (SSIZ + 0x02)
            }

            BNSD [Zero] = Local1
        }

        Method (BGNS, 0, Serialized)
        {
            Return (DerefOf (BNSD [Zero]))
        }

        Method (WSBS, 1, Serialized)
        {
            Acquire (PUMX, 0xFFFF)
            Local7 = 0x04
            Local6 = (SizeOf (Arg0) + 0x10)
            If ((Local6 < SizeOf (TBFS)))
            {
                Local7 = WSTB (Arg0, TBFS, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PWBS = TBFS /* \_SB_.WMIB.TBFS */
                }
            }
            ElseIf ((Local6 < SizeOf (TBFL)))
            {
                Local7 = WSTB (Arg0, TBFL, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PWBL = TBFL /* \_SB_.WMIB.TBFL */
                }
            }
            ElseIf ((Local6 <= SizeOf (TBUF)))
            {
                Local7 = WSTB (Arg0, TBUF, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PUWB = TBUF /* \_SB_.WMIB.TBUF */
                }
            }

            If ((Local7 == Zero))
            {
                BSNS (Arg0)
                PUWS = 0x04
                GSWS (0x02F3)
                Local7 = PUWS /* \PUWS */
                If ((Local6 < SizeOf (TBFS)))
                {
                    TBFS = PWBS /* \PWBS */
                }
                ElseIf ((Local6 < SizeOf (TBFL)))
                {
                    TBFL = PWBL /* \PWBL */
                }
                Else
                {
                    TBUF = PUWB /* \PUWB */
                }

                If ((Local7 == Zero))
                {
                    GBME (Zero)
                }
                ElseIf ((Local7 == 0x06))
                {
                    GBME (One)
                }
            }

            Release (PUMX)
            Return (Local7)
        }

        Method (WSSD, 1, Serialized)
        {
            Acquire (PUMX, 0xFFFF)
            Local7 = WSTB (Arg0, TBUF, 0x02, 0x02)
            PUWB = TBUF /* \_SB_.WMIB.TBUF */
            If ((Local7 == Zero))
            {
                PUWS = 0x04
                GSWS (0x03F3)
                Local7 = PUWS /* \PUWS */
                TBUF = PUWB /* \PUWB */
                If ((Local7 == Zero))
                {
                    GBME (Zero)
                }
                ElseIf ((Local7 == 0x06))
                {
                    GBME (One)
                }
            }

            Release (PUMX)
            Return (Local7)
        }

        Method (WFTE, 1, Serialized)
        {
            Local7 = 0x04
            Return (Local7)
        }

        Method (WMBS, 3, Serialized)
        {
            Local7 = One
            If ((Arg1 == One))
            {
                Local7 = WSBS (Arg2)
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local7 = WSSD (Arg2)
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local7 = WFTE (Arg2)
            }

            Return (Local7)
        }

        Method (WMUI, 3, Serialized)
        {
            Local7 = One
            If ((Arg1 == One))
            {
                Acquire (PUMX, 0xFFFF)
                Local7 = WSTB (Arg0, TBUF, 0x06, 0x06)
                PUWB = TBUF /* \_SB_.WMIB.TBUF */
                If ((Local7 == Zero))
                {
                    PUWS = 0x04
                    Local7 = PUWS /* \PUWS */
                }

                Release (PUMX)
            }

            Return (Local7)
        }

        Name (CBWE, Package (0x02)
        {
            Package (0x05)
            {
                Unicode ("4BIOS Configuration Change"), 
                "BIOS Settings", 
                0x04, 
                0x05, 
                0x02
            }, 

            Package (0x05)
            {
                "BIOS Configuration Security", 
                "An attempt has been made to Access BIOS features unsuccessfully", 
                0x04, 
                0x0A, 
                0x06
            }
        })
        Name (UKEV, Package (0x05)
        {
            "Unknown Event", 
            "Unknown event type", 
            Zero, 
            Zero, 
            Zero
        })
        Mutex (BEMX, 0x00)
        Name (BEID, 0xFF)
        Method (_WED, 1, Serialized)  // _Wxx: Wake Event, xx=0x00-0xFF
        {
            Acquire (BEMX, 0xFFFF)
            Local0 = BEID /* \_SB_.WMIB.BEID */
            BEID = 0xFF
            Release (BEMX)
            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    DerefOf (CBWE [Local0]) [One] = BGNS ()
                    Local1 = DerefOf (CBWE [Local0])
                }
                Case (One)
                {
                    Local1 = DerefOf (CBWE [Local0])
                }
                Default
                {
                    Local1 = UKEV /* \_SB_.WMIB.UKEV */
                }

            }

            Return (Local1)
        }

        Method (GBME, 1, Serialized)
        {
            Acquire (BEMX, 0xFFFF)
            BEID = Arg0
            Release (BEMX)
            Notify (WMIB, 0x80) // Status Change
        }

        Name (PEVT, Package (0x07)
        {
            "", 
            "", 
            "root\\wmi", 
            "HPBIOS_BIOSEvent", 
            Zero, 
            Zero, 
            Zero
        })
        Method (WQPE, 1, Serialized)
        {
            PEVT [Zero] = DerefOf (DerefOf (CBWE [Arg0]) [
                Zero])
            PEVT [One] = DerefOf (DerefOf (CBWE [Arg0]) [
                One])
            PEVT [0x04] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x02])
            PEVT [0x05] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x03])
            PEVT [0x06] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x04])
            Return (PEVT) /* \_SB_.WMIB.PEVT */
        }

        OperationRegion (HWSS, SystemMemory, 0xB40B6000, 0x00000802)
        Field (HWSS, AnyAcc, Lock, Preserve)
        {
            WSSC,   16, 
            WSSB,   16384
        }

        Name (SENS, Package (0x08)
        {
            "BIOS Post Error", 
            " ", 
            One, 
            "BIOS Post Error", 
            One, 
            One, 
            "Post Error Occurred", 
            "Post Error Occurred"
        })
        Method (WQSS, 1, Serialized)
        {
            Local7 = Zero
            Local5 = Zero
            Local0 = WSSB /* \_SB_.WMIB.WSSB */
            While (((Local5 < 0x0800) && (Local7 < Arg0)))
            {
                Local1 = (DerefOf (Local0 [Local5]) + 0x02)
                Local5 += Local1
                Local7++
            }

            If (((Local5 < 0x0800) && (Local7 == Arg0)))
            {
                Local3 = DerefOf (Local0 [Local5])
                Local2 = Buffer (Local3) {}
                Local5++
                Local6 = Zero
                While (((Local5 < 0x0800) && (Local6 < Local3)))
                {
                    Local2 [Local6] = DerefOf (Local0 [Local5])
                    Local6++
                    Local5++
                }

                SENS [One] = B2ST (Local2, Local3)
                SENS [0x04] = DerefOf (Local0 [Local5])
            }
            Else
            {
                SENS [One] = "Unknown Error"
                SENS [0x04] = Zero
            }

            Return (SENS) /* \_SB_.WMIB.SENS */
        }
    }

    OperationRegion (HPWV, SystemMemory, 0xB40BB000, 0x0000107C)
    Field (HPWV, AnyAcc, Lock, Preserve)
    {
        SNIN,   32, 
        COMD,   32, 
        CMTP,   32, 
        DASI,   32, 
        DASO,   32, 
        PVWB,   33536, 
        PVWS,   32, 
        RTCD,   32
    }

    Device (_SB.WMIV)
    {
        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Name (BORN, Buffer (0x08) {})
        Method (FBCD, 3, Serialized)
        {
            Local2 = Package (0x01)
                {
                    0x04
                }
            CreateByteField (Arg2, Zero, FCIP)
            If ((Arg0 == Zero))
            {
                Switch (FCIP)
                {
                    Case (0x08)
                    {
                        Local6 = 0x11
                    }
                    Case (0x0A)
                    {
                        Local6 = 0x02
                    }
                    Default
                    {
                        Local6 = One
                    }

                }

                Local2 = FSEC (Arg2, Local6, FCIP)
            }

            If ((Arg0 == One))
            {
                Local2 = FGIF (FCIP)
            }

            If ((Arg0 == 0x02))
            {
                Local2 = FGAE (FCIP)
            }

            If ((Arg0 == 0x03))
            {
                Local2 = FGAU (FCIP)
            }

            If ((Arg0 == 0x04))
            {
                Local2 = FGFS ()
            }

            If ((Arg0 == 0x05))
            {
                Local2 = FBPS (Arg2)
            }

            If ((Arg0 == 0x06))
            {
                Local2 = FGLW ()
            }

            Return (Local2)
        }

        Method (FSEC, 3, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Switch (Arg2)
            {
                Case (Zero)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (One)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x02)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x08)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Local2 = One
                    Local3 = One
                    While ((Local3 != Arg1))
                    {
                        ^^PCI0.LPCB.EC0.FBID = DerefOf (Arg0 [Local2])
                        Local2++
                        Local3++
                    }

                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x0A)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Local2 = One
                    Local3 = One
                    While ((Local3 != Arg1))
                    {
                        ^^PCI0.LPCB.EC0.FBID = DerefOf (Arg0 [Local2])
                        Local2++
                        Local3++
                    }

                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Default
                {
                    Return (Package (0x01)
                    {
                        0x06
                    })
                }

            }
        }

        Method (FGIF, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Switch (Arg0)
            {
                Case (Zero)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = Zero
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local1 = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                    DerefOf (Local0 [One]) [Zero] = Local1
                    Return (Local0)
                }
                Case (One)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = One
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x02)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x02
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x03)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x03
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x04)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x04
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x05)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x05
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x08)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x1000) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x08
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x1000))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x09)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x1000) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x09
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x1000))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0A)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0A
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x02)
                        {
                            0x41, 
                            Zero
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x06))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0B)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0B
                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != One))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0C)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0C
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != One))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0F)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04) {}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0F
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x04))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Default
                {
                    Return (Package (0x01)
                    {
                        0x06
                    })
                }

            }
        }

        Method (FGAE, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            If ((Arg0 < 0x0100))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x80) {}
                    }
                ^^PCI0.LPCB.EC0.FBAE = Arg0
                If ((FLCC () == Zero))
                {
                    Return (Package (0x01)
                    {
                        0x41
                    })
                }

                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x10))
                {
                    DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBAE /* \_SB_.PCI0.LPCB.EC0_.FBAE */
                    Local2++
                    Local3++
                }

                Return (Local0)
            }
            Else
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }
        }

        Method (FGAU, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            If ((Arg0 < 0x0100))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x80) {}
                    }
                ^^PCI0.LPCB.EC0.FUAE = Arg0
                If ((FLCC () == Zero))
                {
                    Return (Package (0x01)
                    {
                        0x41
                    })
                }

                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x10))
                {
                    DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FUAE /* \_SB_.PCI0.LPCB.EC0_.FUAE */
                    Local2++
                    Local3++
                }

                Return (Local0)
            }
            Else
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }
        }

        Method (FGFS, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04) {}
                }
            DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.FBCB /* \_SB_.PCI0.LPCB.EC0_.FBCB */
            DerefOf (Local0 [One]) [One] = ^^PCI0.LPCB.EC0.FBW1 /* \_SB_.PCI0.LPCB.EC0_.FBW1 */
            DerefOf (Local0 [One]) [0x02] = ^^PCI0.LPCB.EC0.FBW2 /* \_SB_.PCI0.LPCB.EC0_.FBW2 */
            Return (Local0)
        }

        Method (FGLC, 0, NotSerialized)
        {
            Local0 = ^^PCI0.LPCB.EC0.FBCM /* \_SB_.PCI0.LPCB.EC0_.FBCM */
            Return (Local0)
        }

        Method (FGLW, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04) {}
                }
            DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.FBCM /* \_SB_.PCI0.LPCB.EC0_.FBCM */
            Return (Local0)
        }

        Method (FLCC, 0, NotSerialized)
        {
            Local0 = Zero
            While (((Local0 != 0x64) & (FGLC () == One)))
            {
                Sleep (0x64)
                Local0++
            }

            If ((Local0 >= 0x64))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (FBPS, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04) {}
                }
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [Zero])
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [One])
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [0x02])
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [0x03])
            If ((FLCC () == Zero))
            {
                Return (Package (0x01)
                {
                    0x41
                })
            }

            DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.FRPS /* \_SB_.PCI0.LPCB.EC0_.FRPS */
            Return (Local0)
        }

        Method (HVWC, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Local2 = VRBC (Arg1, Arg2, Arg3)
                }
                Case (0x02)
                {
                    Local2 = VWBC (Arg1, Arg2, Arg3)
                }
                Case (0x00020006)
                {
                    Local2 = FBCD (Arg1, Arg2, Arg3)
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Return (Local2)
        }

        Method (VRBC, 3, Serialized)
        {
            Return (Package (0x01)
            {
                0x04
            })
        }

        Method (VWBC, 3, Serialized)
        {
            Return (Package (0x01)
            {
                0x04
            })
        }

        Name (THCT, Buffer (0x06)
        {
             0x01, 0x01, 0x03, 0x01, 0x01, 0x02               // ......
        })
        Name (PRFI, Buffer (0x06)
        {
             0x00, 0x08, 0x0C, 0x14, 0x18, 0x1C               // ......
        })
        Name (TSTM, Zero)
        Name (TSTV, Package (0x06)
        {
            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (0x03)
            {
                 0xFF, 0xFF, 0xFF                                 // ...
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (0x02)
            {
                 0xFF, 0xFF                                       // ..
            }
        })
        Method (SBBC, 1, NotSerialized)
        {
            Return (Package (0x01)
            {
                0x04
            })
        }

        Method (WGBI, 1, NotSerialized)
        {
            If ((Arg0 < SizeOf (NBTI)))
            {
                Return (^^PCI0.LPCB.EC0.GBTI (Arg0))
            }
            Else
            {
                Return (Package (0x02)
                {
                    0x06, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                })
            }
        }

        Method (GSAS, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            Local1 = ^^PCI0.LPCB.EC0.GPID ()
            Local1 += One
            DerefOf (Local0 [One]) [Zero] = Local1
            Return (Local0)
        }

        Method (HWWB, 0, NotSerialized)
        {
            Local0 = BT0P /* \_SB_.BT0P */
            If ((Local0 != 0x1F))
            {
                Local0 = Zero
            }

            SSMI (0xEA3A, Zero, Local0, Zero, Zero)
            GVWE (0x05, Zero)
        }

        Method (STMM, 1, NotSerialized)
        {
            Debug = "SetThermalStatus"
            Debug = Arg0
            CreateByteField (Arg0, Zero, IDTA)
            If (((IDTA >= 0x10) && (IDTA <= 0x15))) {}
            Local0 = Package (0x01)
                {
                    Zero
                }
            If (((IDTA >= 0x20) && (IDTA <= 0x24)))
            {
                Local7 = (IDTA - 0x20)
                Local1 = DerefOf (Arg0 [One])
                Local2 = DerefOf (Arg0 [0x02])
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    If (((Local7 < 0x03) || (Local7 == 0x04)))
                    {
                        ^^PCI0.LPCB.EC0.CRZN = (One + Local7)
                        If ((Local2 == 0xFF))
                        {
                            Local2 = Zero
                        }

                        ^^PCI0.LPCB.EC0.TEMP = Local2
                        If ((Local7 == 0x02))
                        {
                            Local2 = DerefOf (Arg0 [0x03])
                            ^^PCI0.LPCB.EC0.CRZN = 0x04
                            If ((Local2 == 0xFF))
                            {
                                Local2 = Zero
                            }

                            ^^PCI0.LPCB.EC0.TEMP = Local2
                        }
                    }
                    Else
                    {
                        If ((Local2 != 0xFF))
                        {
                            Local2 = \_TZ.CTCT (Local2)
                        }

                        ^^PCI0.LPCB.EC0.FTGC = Local2
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }

                Local6 = Zero
                While ((Local6 < Local1))
                {
                    DerefOf (TSTV [Local7]) [Local6] = DerefOf (Arg0 [
                        (Local6 + 0x02)])
                    Local6++
                }

                TSTM = One
                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((IDTA == 0x30))
            {
                Local1 = DerefOf (Arg0 [One])
                Local2 = DerefOf (Arg0 [0x02])
                If ((Local1 > One))
                {
                    Local3 = DerefOf (Arg0 [0x04])
                }

                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PCI0.LPCB.EC0.FTGC = Local2
                    If ((Local1 > One))
                    {
                        ^^PCI0.LPCB.EC0.FT2C = Local3
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }

                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((IDTA == 0xAA))
            {
                Local1 = Zero
                While ((Local1 < SizeOf (TSTV)))
                {
                    Local2 = Zero
                    Local3 = DerefOf (THCT [Local1])
                    While ((Local2 < Local3))
                    {
                        DerefOf (TSTV [Local1]) [Local2] = 0xFF
                        Local2++
                    }

                    Local1++
                }

                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local1 = One
                    While ((Local1 <= 0x05))
                    {
                        ^^PCI0.LPCB.EC0.CRZN = Local1
                        ^^PCI0.LPCB.EC0.TEMP = Zero
                        Local1++
                    }

                    ^^PCI0.LPCB.EC0.FTGC = 0xFF
                    Release (^^PCI0.LPCB.EC0.ECMX)
                }

                TSTM = Zero
                Return (Local0)
            }

            Return (Package (0x01)
            {
                0x06
            })
        }

        Method (GTMS, 1, NotSerialized)
        {
            Debug = "GetThermalStatus"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x80) {}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If (((IDTA >= Zero) && (IDTA <= 0x04)))
            {
                Local2 = DerefOf (THCT [IDTA])
                DerefOf (Local6 [One]) [Zero] = Local2
                If ((Local2 == Zero))
                {
                    Return (Local6)
                }

                If (((IDTA < 0x03) || (IDTA == 0x04)))
                {
                    If (^^PCI0.LPCB.EC0.ECRG)
                    {
                        Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        ^^PCI0.LPCB.EC0.CRZN = (One + IDTA)
                        DerefOf (Local6 [One]) [One] = ^^PCI0.LPCB.EC0.DTMP /* \_SB_.PCI0.LPCB.EC0_.DTMP */
                        If ((IDTA == 0x02))
                        {
                            ^^PCI0.LPCB.EC0.CRZN = 0x04
                            DerefOf (Local6 [One]) [0x02] = ^^PCI0.LPCB.EC0.DTMP /* \_SB_.PCI0.LPCB.EC0_.DTMP */
                        }

                        Release (^^PCI0.LPCB.EC0.ECMX)
                    }

                    If ((IDTA == 0x02))
                    {
                        DerefOf (Local6 [One]) [0x03] = Zero
                    }
                }

                If ((IDTA == 0x03))
                {
                    Local1 = \_TZ.GFSD ()
                    DerefOf (Local6 [One]) [One] = Local1
                }

                Return (Local6)
            }

            If ((IDTA == 0x06))
            {
                If (TRCN)
                {
                    Local1 = One
                }
                Else
                {
                    Local1 = Zero
                }

                TRCN = Zero
                DerefOf (Local6 [One]) [Zero] = One
                DerefOf (Local6 [One]) [One] = Local1
                Return (Local6)
            }

            If ((IDTA == 0x07))
            {
                Local2 = Zero
                Local1 = \_TZ.GFVE (One)
                DerefOf (Local6 [One]) [0x02] = Local1
                If (Local1)
                {
                    Local2 = One
                    DerefOf (Local6 [One]) [0x02] = Local1
                }

                Local1 = \_TZ.GFVE (0x02)
                If ((Local1 > Zero))
                {
                    Local2 = 0x02
                    DerefOf (Local6 [One]) [0x04] = Local1
                }

                DerefOf (Local6 [One]) [Zero] = Local2
                Return (Local6)
            }

            If ((IDTA == 0x08))
            {
                Local2 = Zero
                Local1 = \_TZ.GTFV (One)
                DerefOf (Local6 [One]) [0x02] = Local1
                If ((Local1 > Zero))
                {
                    Local2 = One
                    DerefOf (Local6 [One]) [0x02] = Local1
                }

                Local1 = \_TZ.GTFV (0x02)
                If ((Local1 > Zero))
                {
                    Local2 = 0x02
                    DerefOf (Local6 [One]) [0x04] = Local1
                }

                DerefOf (Local6 [One]) [Zero] = Local2
                Return (Local6)
            }

            If ((IDTA == 0x09))
            {
                Local1 = \_TZ.GCGC ()
                CreateByteField (Local1, Zero, GGCL)
                CreateByteField (Local1, One, GGCH)
                DerefOf (Local6 [One]) [Zero] = One
                DerefOf (Local6 [One]) [0x02] = GGCL /* \_SB_.WMIV.GTMS.GGCL */
                DerefOf (Local6 [One]) [0x03] = GGCH /* \_SB_.WMIV.GTMS.GGCH */
                Return (Local6)
            }

            If ((IDTA == 0x0A))
            {
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PCI0.LPCB.EC0.CRZN = 0x06
                    DerefOf (Local6 [One]) [One] = ^^PCI0.LPCB.EC0.DTMP /* \_SB_.PCI0.LPCB.EC0_.DTMP */
                    Release (^^PCI0.LPCB.EC0.ECMX)
                    DerefOf (Local6 [One]) [Zero] = One
                }

                Return (Local6)
            }

            If (((IDTA >= 0x10) && (IDTA <= 0x15)))
            {
                CreateField (Arg0, 0x18, 0x03E8, GTSD)
                Local1 = GTSD /* \_SB_.WMIV.GTMS.GTSD */
                Local7 = (IDTA - 0x10)
                Local2 = DerefOf (THCT [Local7])
                DerefOf (Local6 [One]) [Zero] = Local2
                Local4 = DerefOf (PRFI [Local7])
                Local3 = Zero
                While ((Local3 < Local2))
                {
                    DerefOf (Local6 [One]) [(Local3 + One)] = 
                        DerefOf (Local1 [(Local3 + Local4)])
                    Local3++
                }

                Return (Local6)
            }

            If (((IDTA >= 0x20) && (IDTA <= 0x25)))
            {
                Local7 = (IDTA - 0x20)
                Local2 = DerefOf (THCT [Local7])
                DerefOf (Local6 [One]) [Zero] = Local2
                Local3 = Zero
                While ((Local3 < Local2))
                {
                    DerefOf (Local6 [One]) [(Local3 + One)] = 
                        DerefOf (DerefOf (TSTV [Local7]) [Local3])
                    Local3++
                }

                Return (Local6)
            }

            If ((IDTA == 0xAA))
            {
                DerefOf (Local6 [One]) [Zero] = TSTM /* \_SB_.WMIV.TSTM */
                Return (Local6)
            }

            Return (Package (0x02)
            {
                0x06, 
                Zero
            })
        }

        Method (GAAT, 0, NotSerialized)
        {
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            Local1 = ^^PCI0.LPCB.EC0.ACIX /* \_SB_.PCI0.LPCB.EC0_.ACIX */
            Local2 = ^^PCI0.LPCB.EC0.AAPI /* \_SB_.PCI0.LPCB.EC0_.AAPI */
            Release (^^PCI0.LPCB.EC0.ECMX)
            Local5 = Zero
            Local3 = 0x07
            Local4 = (Local1 & Local3)
            If ((Local3 == Local4))
            {
                If ((Local2 <= 0x03))
                {
                    Local5 = One
                }
                ElseIf ((Local2 == 0x04))
                {
                    Local5 = 0x02
                }
                ElseIf ((Local2 == 0x05))
                {
                    Local5 = 0x04
                }
            }

            If ((Local5 != Zero))
            {
                DerefOf (Local6 [One]) [Zero] = Local5
            }

            Return (Local6)
        }

        Method (CPMC, 0, NotSerialized)
        {
            If ((PMCS == One))
            {
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    ^^PCI0.LPCB.EC0.S0FL = Zero
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
            }

            Return (Package (0x02)
            {
                0x0D, 
                Zero
            })
        }

        Method (WGBC, 0, NotSerialized)
        {
            Return (^^PCI0.LPCB.EC0.GBTC ())
        }

        Method (WSBC, 3, NotSerialized)
        {
            Return (^^PCI0.LPCB.EC0.SBTC (Arg0, Arg1, Arg2))
        }

        Method (EC00, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x48)
                        {
                            Local2 = EC01 ()
                        }
                        Case (0x56)
                        {
                            Debug = "[Read:0x56] GetBatteryBspData"
                            Local2 = GBBD (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x02)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x48)
                        {
                            Local2 = EC02 (Arg3)
                        }
                        Case (0x4F)
                        {
                            Debug = "[WriteBios:0x4F] SetSureLockConfiguration"
                            Local2 = SSLC (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x00020011)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Debug = "[Debug Information] Get EC shutdown ID"
                            Local2 = GESI (Arg2)
                        }
                        Case (One)
                        {
                            Local2 = SRWN (Arg3)
                        }
                        Case (0x02)
                        {
                            Local2 = ECGP (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x0002000B)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (One)
                        {
                            Debug = "[TypeC:0x01] Get UBS TypeC message"
                            Local2 = GUCM (Arg3)
                        }
                        Case (0x02)
                        {
                            Debug = "[TypeC:0x02] Set UBS TypeC FW update status"
                            Local2 = SUCU (Arg3)
                        }
                        Case (0x03)
                        {
                            Debug = "[TypeC:0x03] Get UBS TypeC status"
                            Local2 = GUCS (Arg3)
                        }
                        Case (0x04)
                        {
                            Debug = "[TypeC:0x04] Get UBS TypeC Dock ID"
                            Local2 = GUCD (Arg3)
                        }
                        Default
                        {
                            Debug = "[ReadBios] Invalid Command Type"
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Return (Local2)
        }

        Method (EC01, 0, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.LIDN /* \_SB_.PCI0.LPCB.EC0_.LIDN */
                DerefOf (Local0 [One]) [One] = ^^PCI0.LPCB.EC0.LIDS /* \_SB_.PCI0.LPCB.EC0_.LIDS */
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC02, 1, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x01)
                    {
                        0x06
                    }
                CreateByteField (Arg0, Zero, SLNS)
                If (((SLNS == Zero) || (SLNS == One)))
                {
                    ^^PCI0.LPCB.EC0.LIDN = SLNS /* \_SB_.WMIV.EC02.SLNS */
                    Local0 [Zero] = Zero
                }
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (GESI, 1, Serialized)
        {
            If ((ToInteger (Arg0) == Zero))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.ESID /* \_SB_.PCI0.LPCB.EC0_.ESID */
                }

                Release (^^PCI0.LPCB.EC0.ECMX)
                Return (Local0)
            }

            Return (Package (0x02)
            {
                0x06, 
                Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                }
            })
        }

        Method (SRWN, 1, Serialized)
        {
            Local0 = Package (0x01)
                {
                    0x06
                }
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                CreateByteField (Arg0, Zero, RKTM)
                ^^PCI0.LPCB.EC0.RWTM = RKTM /* \_SB_.WMIV.SRWN.RKTM */
                Local0 [Zero] = Zero
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (IUIP, 0, Serialized)
        {
            Local0 = Zero
            Local1 = Zero
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            While (One)
            {
                Local0 = ^^PCI0.LPCB.EC0.UCCS /* \_SB_.PCI0.LPCB.EC0_.UCCS */
                If ((Local0 == Zero))
                {
                    Local1++
                    If ((Local1 >= 0x012C))
                    {
                        Break
                    }
                }
                Else
                {
                    Break
                }

                Sleep (0x0A)
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (GUCM, 1, Serialized)
        {
            Debug = "GetUSBTypeCMessage"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    0x0D, 
                    Buffer (0x80) {}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If ((IUIP () != Zero))
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.GUCM.IDTA */
                ^^PCI0.LPCB.EC0.UCHC = 0x05
                Release (^^PCI0.LPCB.EC0.ECMX)
                Sleep (0x0A)
                If ((IUIP () == One))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PCI0.LPCB.EC0.UCHS /* \_SB_.PCI0.LPCB.EC0_.UCHS */
                    If ((Local3 == Zero))
                    {
                        Local6 [Zero] = 0x50
                    }
                    ElseIf ((Local3 <= 0x80))
                    {
                        Local4 = Zero
                        While ((Local4 < Local3))
                        {
                            DerefOf (Local6 [One]) [Local4] = ^^PCI0.LPCB.EC0.UCDB /* \_SB_.PCI0.LPCB.EC0_.UCDB */
                            Local4++
                        }

                        Local6 [Zero] = Zero
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }
            }

            Return (Local6)
        }

        Method (SUCU, 1, Serialized)
        {
            Debug = "SetUSBTypeCFwUpdateStatus"
            Debug = Arg0
            Local4 = Package (0x01)
                {
                    0x0D
                }
            CreateByteField (Arg0, Zero, IDTA)
            CreateByteField (Arg0, One, UPST)
            If ((UPST == One))
            {
                If ((IUIP () != Zero))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PCI0.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.SUCU.IDTA */
                    ^^PCI0.LPCB.EC0.UCHC = 0x08
                    Sleep (0x0A)
                    If ((^^PCI0.LPCB.EC0.UCCS == One))
                    {
                        Local4 [Zero] = Zero
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }
            }

            Return (Local4)
        }

        Method (GUCS, 1, Serialized)
        {
            Debug = "GetUSBTypeCStatus"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04) {}
                }
            CreateByteField (Arg0, Zero, IDTA)
            Local1 = IUIP ()
            If ((Local1 != Zero))
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.UCHS = One
                Sleep (0x0A)
                Local0 = IDTA /* \_SB_.WMIV.GUCS.IDTA */
                ^^PCI0.LPCB.EC0.UCDB = Local0
                Sleep (0x0A)
                ^^PCI0.LPCB.EC0.UCHC = 0x11
                Sleep (0x0A)
                Local2 = IUIP ()
                If ((Local2 == One))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PCI0.LPCB.EC0.UCHS /* \_SB_.PCI0.LPCB.EC0_.UCHS */
                    Sleep (0x0A)
                    Release (^^PCI0.LPCB.EC0.ECMX)
                    If ((Local3 <= 0x04))
                    {
                        Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        Local4 = Zero
                        While (One)
                        {
                            If ((Local4 >= Local3))
                            {
                                Break
                            }
                            Else
                            {
                                DerefOf (Local6 [One]) [Local4] = ^^PCI0.LPCB.EC0.UCDB /* \_SB_.PCI0.LPCB.EC0_.UCDB */
                                Sleep (0x0A)
                                Local4++
                            }
                        }

                        Release (^^PCI0.LPCB.EC0.ECMX)
                        Return (Local6)
                    }
                    Else
                    {
                        Debug = "GetUSBTypeCStatus Return Length Failed."
                    }
                }
                ElseIf ((Local2 == 0x02))
                {
                    Debug = "GetUSBTypeCStatus Cmd Failed. Port Index is out of range."
                    Local6 [Zero] = 0x06
                    Return (Local6)
                }
            }
            Else
            {
                Debug = "GetUSBTypeCStatus Fail. USBC Command still in Progress."
            }

            Return (Package (0x02)
            {
                0x06, 
                Zero
            })
        }

        Method (GUCD, 1, Serialized)
        {
            Debug = "GetUSBTypeCDockId"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    0x0D, 
                    Buffer (0x04) {}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If ((IUIP () != Zero))
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.GUCD.IDTA */
                ^^PCI0.LPCB.EC0.UCHC = 0x12
                Release (^^PCI0.LPCB.EC0.ECMX)
                Sleep (0x0A)
                If ((IUIP () == One))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PCI0.LPCB.EC0.UCHS /* \_SB_.PCI0.LPCB.EC0_.UCHS */
                    If ((Local3 == Zero))
                    {
                        Local6 [Zero] = 0x50
                    }
                    ElseIf ((Local3 <= 0x04))
                    {
                        Local4 = Zero
                        While ((Local4 < Local3))
                        {
                            DerefOf (Local6 [One]) [Local4] = ^^PCI0.LPCB.EC0.UCDB /* \_SB_.PCI0.LPCB.EC0_.UCDB */
                            Local4++
                        }

                        Local6 [Zero] = Zero
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }
            }

            Return (Local6)
        }

        Method (SSLC, 1, Serialized)
        {
            GVWE (0x19, 0x06)
            Local3 = Package (0x01)
                {
                    Zero
                }
            Return (Local3)
        }

        Method (ECGP, 1, Serialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04) {}
                }
            CreateByteField (Arg0, Zero, GPNM)
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            ^^PCI0.LPCB.EC0.WPM3 (0x6D, 0x80)
            Sleep (0x0A)
            Local1 = ^^PCI0.LPCB.EC0.RPM3 (0x6D)
            Sleep (0x0A)
            Local2 = (Local1 & 0xC0)
            If ((Local2 == 0x80))
            {
                ^^PCI0.LPCB.EC0.WPM3 (0x6C, GPNM)
                Local3 = ^^PCI0.LPCB.EC0.RPM3 (0x6C)
                Local4 = ^^PCI0.LPCB.EC0.RPM3 (0x6D)
                Local2 = (Local4 & 0xC0)
                If ((Local2 == 0x80))
                {
                    DerefOf (Local0 [One]) [Zero] = Local3
                    DerefOf (Local0 [One]) [One] = Local4
                }
                Else
                {
                    Local0 [Zero] = 0x06
                }
            }
            Else
            {
                Local0 [Zero] = 0x04
            }

            ^^PCI0.LPCB.EC0.WPM3 (0x6D, Zero)
            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (GBBD, 1, Serialized)
        {
            CreateByteField (Arg0, Zero, BATN)
            If ((BATN == Zero))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x80) {}
                    }
                CreateField (DerefOf (Local0 [One]), Zero, 0xE0, BBSP)
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                BBSP = ^^PCI0.LPCB.EC0.GBBI ()
                Release (^^PCI0.LPCB.EC0.ECMX)
                Return (Local0)
            }

            Return (Package (0x02)
            {
                0x06, 
                Zero
            })
        }

        Name (ROAE, Zero)
        Method (HVWP, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x04)
                        {
                            Debug = "[ReadBios:0x04] Get the Dock state"
                            Local2 = WGDS ()
                        }
                        Case (0x07)
                        {
                            If (Arg2)
                            {
                                Local3 = ToInteger (DerefOf (Arg3 [Zero]))
                                Local2 = WGBI (Local3)
                            }
                        }
                        Case (0x09)
                        {
                            Debug = "[ReadBios:0x09] Get the KBC Hotkey Scancode"
                            Local2 = GHKS ()
                        }
                        Case (0x0A)
                        {
                            Debug = "[ReadBios:0x0A] Get the KBC HotKey function"
                            Local2 = GHKF (Arg3)
                        }
                        Case (0x0F)
                        {
                            Debug = "[ReadBios:0x0F] Get the Smart Adapter Status"
                            Local2 = GSAS ()
                        }
                        Case (0x1B)
                        {
                            Debug = "[ReadBios:0x1B] Get Wireless Device Info"
                            If ((^^WLBU._STA () != 0x0F))
                            {
                                Local2 = WGWS ()
                            }
                            Else
                            {
                                Local2 = Package (0x01)
                                    {
                                        0x04
                                    }
                            }
                        }
                        Case (0x28)
                        {
                            Debug = "[ReadBios:0x28] Get thermal status"
                            Local2 = GTMS (Arg3)
                        }
                        Case (0x2B)
                        {
                            Debug = "[ReadBios:0x2B] Get Battery control"
                            Local2 = WGBC ()
                        }
                        Case (0x30)
                        {
                            Debug = "[ReadBios:0x30] Get panel EDID data"
                            Local2 = GEID ()
                        }
                        Case (0x3E)
                        {
                            Debug = "[ReadBios:0x3E] Get Privacy Panel State"
                            Local2 = GPPS ()
                        }
                        Case (0x42)
                        {
                            Debug = "[ReadBios:0x42] Get Ac Adapter Type"
                            Local2 = GAAT ()
                        }
                        Case (0x45)
                        {
                            Debug = "[ReadBios:0x45] Get ECRAM"
                            Local2 = GECP (Arg2, Arg3)
                        }
                        Default
                        {
                            Debug = "[ReadBios] Invalid Command Type"
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x02)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x06)
                        {
                            Debug = "[ReadBios:0x6] Set BIOS brightness control"
                            Local2 = SBBC (Arg3)
                        }
                        Case (0x09)
                        {
                            Debug = "[WriteBios:0x09] Set the KBC Hotkey Scancode"
                            Local2 = SHKS (Arg3)
                        }
                        Case (0x0A)
                        {
                            Debug = "[WriteBios:0x0A] Set the KBC Hotkey function"
                            Local2 = SHKF (Arg3)
                        }
                        Case (0x1B)
                        {
                            Debug = "[WriteBios:0x1B] Set Wireless Device Info"
                            GVWE (0x05, Zero)
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x25)
                        {
                            Debug = "[WriteBios:0x25] Clear PMCCalibration Data in KBC"
                            Local2 = CPMC ()
                        }
                        Case (0x28)
                        {
                            Debug = "[WriteBios:0x28] Set Thermal Status"
                            Local2 = STMM (Arg3)
                        }
                        Case (0x2B)
                        {
                            Debug = "[WriteBios:0x2B] Set Battery control"
                            Local2 = WSBC (Arg1, Arg2, Arg3)
                        }
                        Case (0x36)
                        {
                            If ((^^PCI0.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x0F, 0x02)
                            }

                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x37)
                        {
                            If ((^^PCI0.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x10, 0x02)
                            }

                            If ((^^PCI0.LPCB.EC0.BCSC == One))
                            {
                                GVWE (0x10, Zero)
                            }

                            ^^PCI0.LPCB.EC0.BCSC = Zero
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x38)
                        {
                            If ((^^PCI0.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x0F, 0x04)
                            }

                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x29)
                        {
                            Debug = "[WriteBios:0x29] Set Factory Control Command"
                            HWWB ()
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x3E)
                        {
                            Debug = "[WriteBios:0x3E] Set Privacy Panel State"
                            Local2 = SPPA (Arg3)
                        }
                        Case (0x3F)
                        {
                            Debug = "[WriteBios:0x3F] Set MAX PrivateBrightness"
                            Local2 = STPB (Arg3)
                        }
                        Case (0x45)
                        {
                            Debug = "[WriteBios:0x45] Set ECRAM"
                            Local2 = SECP (Arg2, Arg3)
                        }
                        Default
                        {
                            Debug = "[WriteBios] Invalid Command Type"
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Local0 = DerefOf (Local2 [Zero])
            If (((Local0 == 0x03) || (Local0 == 0x04)))
            {
                Local2 = EC00 (Arg0, Arg1, Arg2, Arg3)
            }

            Return (Local2)
        }

        Method (GHKS, 0, Serialized)
        {
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            DerefOf (Local2 [One]) [Zero] = ^^PCI0.LPCB.EC0.GSHK ()
            Return (Local2)
        }

        Method (SHKS, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, DWRD)
            ^^PCI0.LPCB.EC0.SSHK (DWRD)
            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (GHKF, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, WIID)
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            CreateWordField (DerefOf (Local2 [One]), Zero, WRD0)
            WRD0 = WIID /* \_SB_.WMIV.GHKF.WIID */
            If ((WIID == 0x01AE)) {}
            If ((WIID == 0x01A9)) {}
            If (((WIID == 0x01B6) || (WIID == 0x01B7)))
            {
                If ((WIID == 0x01B6))
                {
                    ODGW (0x87)
                    \_GPE.G001 (0x87)
                }
                ElseIf ((WIID == 0x01B7))
                {
                    ODGW (0x86)
                    \_GPE.G001 (0x86)
                }

                DerefOf (Local2 [One]) [0x02] = G093 /* \G093 */
                DerefOf (Local2 [One]) [0x03] = (G080 - One
                    )
            }

            Debug = Local2
            Return (Local2)
        }

        Method (GEID, 0, NotSerialized)
        {
            Debug = "Return internal panel EDID data"
            Local1 = G03E /* \G03E */
            Local2 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            Local2 [One] = Local1
            Return (Local2)
        }

        Method (WGWS, 0, Serialized)
        {
            Debug = "Return Wireless Device Info"
            Local1 = WDDA /* \WDDA */
            Local2 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            Local2 [One] = Local1
            Return (Local2)
        }

        Method (WGDS, 0, Serialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (One)
                    {
                         0x00                                             // .
                    }
                }
            If (DCKD ())
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (One)
                        {
                             0x01                                             // .
                        }
                    }
            }

            Local1 = DerefOf (DerefOf (Local0 [One]) [Zero])
            If ((^^PCI0.LPCB.EC0.GBNT (^^PCI0.LPCB.EC0.VBPS, 0x06) == Zero))
            {
                Local1 |= 0x04
            }
            Else
            {
                Local1 &= 0xFFFFFFFFFFFFFFFB
            }

            If ((^^PCI0.LPCB.EC0.PORI == Zero))
            {
                Local1 |= ROAE /* \_SB_.WMIV.ROAE */
            }

            If (((^^PCI0.LPCB.EC0.PORI == One) || (^^PCI0.LPCB.EC0.PORI == 0x03)))
            {
                Local1 |= 0x02
                ROAE = 0x02
            }

            If (((^^PCI0.LPCB.EC0.PORI == 0x02) || (^^PCI0.LPCB.EC0.PORI == 0x04)))
            {
                Local1 &= 0xFFFFFFFFFFFFFFFD
                ROAE = Zero
            }

            Local1 &= 0xFFFFFFFFFFFFFFF7
            DerefOf (Local0 [One]) [Zero] = Local1
            Local3 = Zero
            If ((^^PCI0.LPCB.EC0.PORI == 0x02))
            {
                Local3 |= 0x10
            }

            If ((^^PCI0.LPCB.EC0.PORI == 0x03))
            {
                Local3 |= 0x20
            }

            If ((^^PCI0.LPCB.EC0.PORI == 0x04))
            {
                Local3 |= 0x30
            }

            Local1 |= Local3
            DerefOf (Local0 [One]) [Zero] = Local1
            Return (Local0)
        }

        Method (GPPS, 0, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                ^^PCI0.LPCB.EC0.PPCM = One
                ^^PCI0.LPCB.EC0.PPDS = One
                Local1 = ^^PCI0.LPCB.EC0.PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                DerefOf (Local0 [One]) [Zero] = Local1
                ^^PCI0.LPCB.EC0.PPCM = 0x03
                ^^PCI0.LPCB.EC0.PPDS = One
                Local1 = ^^PCI0.LPCB.EC0.PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                DerefOf (Local0 [One]) [One] = Local1
                DerefOf (Local0 [One]) [0x02] = ^^PCI0.LPCB.EC0.PPUI /* \_SB_.PCI0.LPCB.EC0_.PPUI */
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (SPPA, 1, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x01)
                    {
                        0x06
                    }
                CreateByteField (Arg0, Zero, PPST)
                CreateByteField (Arg0, One, PPVP)
                If (((((((((PPST == 0xFF) || (
                    PPST == 0xFE)) || (PPST == 0xFD)) || (PPST == Zero)) || (PPST == 0xFC)) || (PPST == 
                    0xFB)) || (PPST == 0xF0)) || (PPST == 0xF9)))
                {
                    If ((((PPVP == 0xFF) || (PPVP == 0xFE)) || (PPVP == Zero)))
                    {
                        ^^PCI0.LPCB.EC0.PPCM = 0x02
                        ^^PCI0.LPCB.EC0.PPDS = One
                        ^^PCI0.LPCB.EC0.PPDT = PPST /* \_SB_.WMIV.SPPA.PPST */
                        ^^PCI0.LPCB.EC0.PPCM = One
                        ^^PCI0.LPCB.EC0.PPDS = One
                        Local1 = ^^PCI0.LPCB.EC0.PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                        If (((((((Local1 == 0xFE) || (Local1 == 0xFC)) || 
                            (Local1 == 0xF0)) || (Local1 == 0xF9)) || (Local1 == 0xF8)) || (Local1 == 0xF7)))
                        {
                            If ((PPVP == 0xFF))
                            {
                                ^^PCI0.LPCB.EC0.PPCM = 0x04
                                ^^PCI0.LPCB.EC0.PPDS = Zero
                            }

                            If ((PPVP == 0xFE))
                            {
                                ^^PCI0.LPCB.EC0.PPCM = 0x05
                                ^^PCI0.LPCB.EC0.PPDS = Zero
                            }
                        }

                        Local0 [Zero] = Zero
                    }
                }
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (STPB, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, BRID)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.BRIM = BRID /* \_SB_.WMIV.STPB.BRID */
                Release (^^PCI0.LPCB.EC0.ECMX)
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (GECP, 2, Serialized)
        {
            CreateByteField (Arg1, Zero, ECOF)
            CreateByteField (Arg1, One, SIZE)
            If ((SIZE > 0x80))
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }

            OperationRegion (MBER, EmbeddedControl, ECOF, One)
            Field (MBER, ByteAcc, NoLock, Preserve)
            {
                OFST,   8
            }

            Local1 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x80) {}
                }
            Local0 = Zero
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            While ((Local0 < SIZE))
            {
                DerefOf (Local1 [One]) [Local0] = OFST /* \_SB_.WMIV.GECP.OFST */
                Local0++
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local1)
        }

        Method (SECP, 2, Serialized)
        {
            CreateByteField (Arg1, Zero, ECOF)
            CreateByteField (Arg1, One, SIZE)
            If ((SIZE > 0x80))
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }

            OperationRegion (MBER, EmbeddedControl, ECOF, One)
            Field (MBER, ByteAcc, NoLock, Preserve)
            {
                OFST,   8
            }

            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            Local0 = Zero
            While ((Local0 < SIZE))
            {
                OFST = DerefOf (Arg1 [(Local0 + 0x02)])
                Local0++
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (SHKF, 1, NotSerialized)
        {
            CreateWordField (Arg0, Zero, WIID)
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            CreateWordField (DerefOf (Local2 [One]), Zero, WRD0)
            WRD0 = WIID /* \_SB_.WMIV.SHKF.WIID */
            If ((WIID == 0x01B6))
            {
                ODGW (0x87)
                \_GPE.G001 (0x87)
            }
            ElseIf ((WIID == 0x01B7))
            {
                ODGW (0x86)
                \_GPE.G001 (0x86)
            }
            Else
            {
                DerefOf (Local2 [Zero]) [Zero] = 0x04
            }

            Return (Local2)
        }

        Name (WQZZ, Buffer (0x086F)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0x5F, 0x08, 0x00, 0x00, 0xBE, 0x3A, 0x00, 0x00,  // _....:..
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0x98, 0x58, 0x9C, 0x00, 0x01, 0x06, 0x18, 0x42,  // .X.....B
            /* 0020 */  0x10, 0x13, 0x10, 0x12, 0xE0, 0x81, 0xC2, 0x04,  // ........
            /* 0028 */  0x43, 0x43, 0x28, 0xB2, 0x06, 0x18, 0x8C, 0x04,  // CC(.....
            /* 0030 */  0x08, 0xC9, 0x81, 0x90, 0x0B, 0x26, 0x26, 0x40,  // .....&&@
            /* 0038 */  0x04, 0x84, 0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24,  // .....).$
            /* 0040 */  0x88, 0xFA, 0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25,  // ....(..%
            /* 0048 */  0x04, 0x42, 0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B,  // .B.....[
            /* 0050 */  0x80, 0x61, 0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0,  // .a......
            /* 0058 */  0x18, 0x92, 0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02,  // ..J.....
            /* 0060 */  0x21, 0xA1, 0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40,  // !.....-@
            /* 0068 */  0x3B, 0xA2, 0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02,  // ;.$...#.
            /* 0070 */  0x8F, 0x22, 0xB2, 0xD1, 0x38, 0x41, 0xD9, 0xD0,  // ."..8A..
            /* 0078 */  0x28, 0x19, 0x10, 0xF2, 0x2C, 0xC0, 0x3A, 0x30,  // (...,.:0
            /* 0080 */  0x21, 0xB0, 0x7B, 0x01, 0xD6, 0x04, 0x98, 0x9B,  // !.{.....
            /* 0088 */  0x85, 0x8C, 0xCD, 0x45, 0x10, 0x0D, 0x62, 0xC8,  // ...E..b.
            /* 0090 */  0x96, 0x00, 0x87, 0x48, 0x82, 0x89, 0x11, 0x25,  // ...H...%
            /* 0098 */  0x58, 0xBC, 0x8A, 0x87, 0x21, 0x94, 0x1B, 0x0D,  // X...!...
            /* 00A0 */  0x15, 0xA9, 0x32, 0x14, 0x59, 0x44, 0x91, 0x42,  // ..2.YD.B
            /* 00A8 */  0x01, 0xCE, 0x04, 0x08, 0xC3, 0x95, 0x46, 0x50,  // ......FP
            /* 00B0 */  0x21, 0xC4, 0x8A, 0x14, 0xAB, 0xFD, 0x41, 0x90,  // !.....A.
            /* 00B8 */  0xF8, 0x16, 0x20, 0xAA, 0x00, 0x51, 0xA4, 0xD1,  // .. ..Q..
            /* 00C0 */  0xA0, 0x86, 0x97, 0xE0, 0x70, 0x3D, 0xD4, 0x73,  // ....p=.s
            /* 00C8 */  0xEC, 0x5C, 0x80, 0xF4, 0x49, 0x0A, 0xE4, 0x20,  // .\..I.. 
            /* 00D0 */  0xCF, 0xA2, 0xCE, 0x71, 0x12, 0x90, 0x04, 0xC6,  // ...q....
            /* 00D8 */  0x4A, 0xD0, 0xC1, 0xC0, 0xA1, 0xB8, 0x06, 0xD4,  // J.......
            /* 00E0 */  0x8C, 0x8F, 0x97, 0x09, 0x82, 0x43, 0x0D, 0xD1,  // .....C..
            /* 00E8 */  0x03, 0x0D, 0x77, 0x02, 0x87, 0xC8, 0x00, 0x3D,  // ..w....=
            /* 00F0 */  0xA9, 0xA3, 0xC1, 0x1C, 0x00, 0x3C, 0xB8, 0x93,  // .....<..
            /* 00F8 */  0x79, 0x0F, 0x28, 0x55, 0x80, 0xD9, 0x31, 0x6B,  // y.(U..1k
            /* 0100 */  0x60, 0x09, 0x8E, 0xC7, 0xD0, 0xA7, 0x7B, 0x3E,  // `.....{>
            /* 0108 */  0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81, 0x1A, 0x99,  // '.......
            /* 0110 */  0xA1, 0x3D, 0xCA, 0xD3, 0x8A, 0x19, 0xF2, 0xF0,  // .=......
            /* 0118 */  0x0F, 0x8B, 0x89, 0x85, 0x90, 0x02, 0x08, 0x8D,  // ........
            /* 0120 */  0x07, 0xDE, 0xFF, 0x7F, 0x3C, 0xE0, 0xB9, 0x01,  // ....<...
            /* 0128 */  0x3C, 0x13, 0x44, 0x78, 0x25, 0x88, 0xED, 0x01,  // <.Dx%...
            /* 0130 */  0x25, 0x18, 0x16, 0x42, 0x46, 0x56, 0xE1, 0xF1,  // %..BFV..
            /* 0138 */  0xD0, 0x51, 0xD8, 0xE9, 0x70, 0x34, 0xAD, 0x78,  // .Q..p4.x
            /* 0140 */  0x26, 0x18, 0x0E, 0x42, 0x5F, 0x00, 0x09, 0x10,  // &..B_...
            /* 0148 */  0x35, 0x6C, 0x7A, 0x58, 0xE0, 0xE7, 0x04, 0x76,  // 5lzX...v
            /* 0150 */  0x33, 0x38, 0x83, 0x47, 0x00, 0x8F, 0xE4, 0x84,  // 38.G....
            /* 0158 */  0x7C, 0x9C, 0xF0, 0xC0, 0xE0, 0x03, 0xE2, 0xBD,  // |.......
            /* 0160 */  0x4F, 0x99, 0x8C, 0xE0, 0x4C, 0x0D, 0xE8, 0xE3,  // O...L...
            /* 0168 */  0x80, 0x87, 0xC2, 0x87, 0xE8, 0xF1, 0x9D, 0xF2,  // ........
            /* 0170 */  0xF1, 0xFA, 0x74, 0x61, 0x59, 0xE3, 0x84, 0x7E,  // ..taY..~
            /* 0178 */  0x87, 0xF0, 0xEC, 0x8E, 0xE1, 0x8F, 0x43, 0x02,  // ......C.
            /* 0180 */  0x22, 0x42, 0xC8, 0xC9, 0x29, 0x00, 0x0D, 0x7C,  // "B..)..|
            /* 0188 */  0xBA, 0x67, 0x17, 0xE1, 0x74, 0x3D, 0x29, 0x07,  // .g..t=).
            /* 0190 */  0x1A, 0x06, 0x1D, 0x27, 0x38, 0xCE, 0x03, 0xE0,  // ...'8...
            /* 0198 */  0x18, 0x27, 0xFC, 0x73, 0x01, 0xFC, 0x01, 0xF2,  // .'.s....
            /* 01A0 */  0x53, 0xC6, 0x2B, 0x46, 0x02, 0xC7, 0x1C, 0x21,  // S.+F...!
            /* 01A8 */  0x5A, 0xCC, 0x08, 0x21, 0xC0, 0x3F, 0x55, 0x14,  // Z..!.?U.
            /* 01B0 */  0x3E, 0x10, 0xF2, 0xFF, 0x1F, 0x23, 0xB8, 0x00,  // >....#..
            /* 01B8 */  0x3D, 0x46, 0xE0, 0x1B, 0x70, 0x8C, 0xE8, 0xA3,  // =F..p...
            /* 01C0 */  0x04, 0x57, 0x7F, 0xD0, 0xA0, 0x03, 0x04, 0x17,  // .W......
            /* 01C8 */  0xA8, 0x07, 0x08, 0x7C, 0xA3, 0x1F, 0x3D, 0xD0,  // ...|..=.
            /* 01D0 */  0xE3, 0xB2, 0xE8, 0xF3, 0x80, 0x8C, 0x9F, 0x68,  // .......h
            /* 01D8 */  0x34, 0x2F, 0x7E, 0x3A, 0xE0, 0x87, 0x0F, 0xF0,  // 4/~:....
            /* 01E0 */  0x80, 0x7A, 0x48, 0x38, 0x50, 0xCC, 0xB4, 0x39,  // .zH8P..9
            /* 01E8 */  0xE8, 0xB3, 0xCB, 0xA1, 0x63, 0x87, 0x0B, 0xEF,  // ....c...
            /* 01F0 */  0xFF, 0x3F, 0x5C, 0xF0, 0x9C, 0x40, 0xC0, 0x25,  // .?\..@.%
            /* 01F8 */  0x0F, 0x16, 0x3D, 0x5C, 0xFB, 0x15, 0x80, 0x10,  // ..=\....
            /* 0200 */  0xBA, 0xCC, 0x5B, 0x89, 0x66, 0x15, 0xE1, 0x88,  // ..[.f...
            /* 0208 */  0x61, 0x9C, 0x83, 0x4C, 0x60, 0x91, 0xF0, 0xA8,  // a..L`...
            /* 0210 */  0xE3, 0x85, 0xE1, 0xF9, 0x59, 0x28, 0xFA, 0xC1,  // ....Y(..
            /* 0218 */  0x9C, 0x4A, 0xF8, 0x83, 0x89, 0x72, 0x0A, 0x47,  // .J...r.G
            /* 0220 */  0x63, 0xB9, 0x08, 0xD2, 0x05, 0xA1, 0xA3, 0x93,  // c.......
            /* 0228 */  0x11, 0xCE, 0x20, 0xCA, 0xD9, 0x9D, 0xB1, 0x09,  // .. .....
            /* 0230 */  0x7C, 0x94, 0xF2, 0x11, 0x80, 0x9F, 0x5B, 0x3C,  // |.....[<
            /* 0238 */  0x22, 0x18, 0xE7, 0xA5, 0x28, 0xF6, 0x38, 0x27,  // "...(.8'
            /* 0240 */  0x42, 0x50, 0xE0, 0x70, 0x50, 0x41, 0x9E, 0x0E,  // BP.pPA..
            /* 0248 */  0x3E, 0x6D, 0x51, 0xE9, 0x30, 0xA8, 0x03, 0x17,  // >mQ.0...
            /* 0250 */  0x60, 0x65, 0x12, 0x11, 0x9E, 0x25, 0x6A, 0x83,  // `e...%j.
            /* 0258 */  0xD0, 0xA9, 0xE1, 0x6D, 0xE2, 0x6D, 0xCB, 0xB7,  // ...m.m..
            /* 0260 */  0x80, 0x38, 0xA7, 0xD9, 0xDB, 0x81, 0x8B, 0x60,  // .8.....`
            /* 0268 */  0x44, 0xA8, 0x19, 0x8A, 0x9C, 0xB4, 0x22, 0xC6,  // D.....".
            /* 0270 */  0x88, 0xF2, 0xB8, 0x65, 0x94, 0xB7, 0xAD, 0x17,  // ...e....
            /* 0278 */  0x80, 0x78, 0x27, 0xF6, 0xFF, 0x7F, 0xDE, 0x32,  // .x'....2
            /* 0280 */  0x46, 0xF0, 0xC8, 0x0F, 0x5C, 0x2C, 0xC6, 0xEA,  // F...\,..
            /* 0288 */  0xF5, 0x5F, 0xF3, 0x81, 0x0B, 0xE0, 0xF9, 0xFF,  // ._......
            /* 0290 */  0xFF, 0x7C, 0x82, 0x0F, 0x7A, 0x18, 0x42, 0x0F,  // .|..z.B.
            /* 0298 */  0xC3, 0x53, 0x39, 0x97, 0x4A, 0xA7, 0x22, 0xC4,  // .S9.J.".
            /* 02A0 */  0xA8, 0x61, 0xA2, 0x3E, 0x43, 0xF9, 0x6E, 0xE1,  // .a.>C.n.
            /* 02A8 */  0x03, 0x11, 0xF8, 0xCE, 0x5C, 0xC0, 0xF9, 0x98,  // ....\...
            /* 02B0 */  0x82, 0x3B, 0xD3, 0x80, 0xC7, 0xE7, 0x0C, 0x04,  // .;......
            /* 02B8 */  0x72, 0x2A, 0x3E, 0xD4, 0x00, 0x16, 0x44, 0x3F,  // r*>...D?
            /* 02C0 */  0x21, 0x7C, 0xA2, 0xA1, 0x32, 0x61, 0x50, 0x87,  // !|..2aP.
            /* 02C8 */  0x1A, 0xE0, 0xF0, 0xFF, 0x3F, 0xD4, 0x00, 0xA3,  // ....?...
            /* 02D0 */  0x2B, 0xCC, 0xD3, 0xE8, 0x39, 0x3F, 0xCB, 0xF8,  // +...9?..
            /* 02D8 */  0x54, 0xE3, 0x43, 0xA9, 0x71, 0x0C, 0xF1, 0x32,  // T.C.q..2
            /* 02E0 */  0xF3, 0x50, 0xE3, 0x63, 0xC1, 0x2B, 0xA9, 0x0F,  // .P.c.+..
            /* 02E8 */  0x35, 0x86, 0x8A, 0xF3, 0x50, 0xE3, 0xE1, 0x06,  // 5...P...
            /* 02F0 */  0x8A, 0xFA, 0x66, 0xF3, 0x6C, 0x63, 0xF4, 0xF8,  // ..f.lc..
            /* 02F8 */  0xBE, 0xA1, 0x1A, 0xE2, 0xA1, 0x86, 0x49, 0x5E,  // ......I^
            /* 0300 */  0xA9, 0xC6, 0xE2, 0x43, 0x0D, 0xC0, 0xAB, 0xFF,  // ...C....
            /* 0308 */  0xFF, 0xA1, 0x06, 0xE0, 0xDB, 0xD1, 0x00, 0xCE,  // ........
            /* 0310 */  0x91, 0x11, 0x77, 0x34, 0x00, 0xD7, 0xA1, 0x14,  // ..w4....
            /* 0318 */  0x38, 0xFC, 0xFF, 0x8F, 0x06, 0xC0, 0xE3, 0x28,  // 8......(
            /* 0320 */  0x04, 0xE6, 0x0B, 0x8D, 0x8F, 0x42, 0x80, 0x05,  // .....B..
            /* 0328 */  0xD9, 0xE7, 0x20, 0x94, 0xD0, 0xA3, 0x10, 0x20,  // .. .... 
            /* 0330 */  0xE8, 0xF6, 0xF3, 0x14, 0xF1, 0xEC, 0xE3, 0xCB,  // ........
            /* 0338 */  0xCF, 0x03, 0x41, 0x84, 0xD7, 0x7C, 0x9F, 0x82,  // ..A..|..
            /* 0340 */  0x7C, 0xC8, 0xF7, 0x51, 0x88, 0xC1, 0x18, 0xCA,  // |..Q....
            /* 0348 */  0xD7, 0x20, 0x1F, 0x85, 0x18, 0xD4, 0x6B, 0x90,  // . ....k.
            /* 0350 */  0xEF, 0xFB, 0x06, 0x79, 0xBC, 0x08, 0x12, 0x3B,  // ...y...;
            /* 0358 */  0xCA, 0xFF, 0x3F, 0xD0, 0xA3, 0x10, 0x13, 0x7D,  // ..?....}
            /* 0360 */  0x14, 0x02, 0x68, 0xFF, 0xFF, 0x3F, 0x0A, 0x01,  // ..h..?..
            /* 0368 */  0xFC, 0x0B, 0x70, 0x34, 0x00, 0xDD, 0xB4, 0x1E,  // ..p4....
            /* 0370 */  0x85, 0xC0, 0x7B, 0x67, 0x39, 0xED, 0x13, 0xF0,  // ..{g9...
            /* 0378 */  0x59, 0x08, 0xFB, 0xFF, 0x3F, 0x0B, 0x01, 0x2C,  // Y...?..,
            /* 0380 */  0x39, 0x0A, 0x1D, 0xC5, 0x59, 0xBE, 0x0A, 0x3D,  // 9...Y..=
            /* 0388 */  0x01, 0xBC, 0x00, 0xC4, 0x08, 0xF3, 0x0E, 0xF4,  // ........
            /* 0390 */  0x92, 0xC9, 0xEE, 0xE2, 0xC6, 0x79, 0x72, 0x39,  // .....yr9
            /* 0398 */  0x8B, 0x27, 0x71, 0x5F, 0x82, 0x7C, 0xA0, 0x78,  // .'q_.|.x
            /* 03A0 */  0x16, 0x32, 0xD4, 0xE9, 0x06, 0x7D, 0x23, 0xF7,  // .2...}#.
            /* 03A8 */  0xC0, 0x62, 0xC6, 0x0F, 0xF1, 0x3C, 0x64, 0x88,  // .b...<d.
            /* 03B0 */  0x67, 0x21, 0xC0, 0xC8, 0xFF, 0xFF, 0x2C, 0x04,  // g!....,.
            /* 03B8 */  0xF0, 0xFF, 0xFF, 0x7F, 0x16, 0x02, 0x5C, 0xBF,  // ......\.
            /* 03C0 */  0x00, 0x7C, 0x16, 0x02, 0x9E, 0x27, 0x80, 0x07,  // .|...'..
            /* 03C8 */  0x6D, 0x9F, 0x85, 0x00, 0x43, 0xFF, 0xFF, 0xB3,  // m...C...
            /* 03D0 */  0x10, 0x60, 0xE4, 0x70, 0x79, 0xFE, 0xAF, 0x40,  // .`.py..@
            /* 03D8 */  0xC7, 0xF2, 0x1E, 0xE1, 0x59, 0x9F, 0xE4, 0xEB,  // ....Y...
            /* 03E0 */  0xA5, 0x67, 0xFA, 0x50, 0xF0, 0x2C, 0xC4, 0xB0,  // .g.P.,..
            /* 03E8 */  0x0E, 0xC3, 0x67, 0x21, 0x06, 0xF1, 0xA2, 0x69,  // ..g!...i
            /* 03F0 */  0x88, 0x17, 0x4E, 0x1F, 0x06, 0x18, 0xF0, 0x2B,  // ..N....+
            /* 03F8 */  0xA7, 0x81, 0x82, 0x04, 0x7A, 0x16, 0x02, 0x58,  // ....z..X
            /* 0400 */  0xF2, 0xFF, 0x3F, 0x0B, 0x01, 0xFC, 0xFF, 0xFF,  // ..?.....
            /* 0408 */  0x9F, 0x85, 0x80, 0xD8, 0x1A, 0x75, 0x16, 0x02,  // .....u..
            /* 0410 */  0x96, 0xB7, 0x95, 0x67, 0x6C, 0x9F, 0x56, 0x9E,  // ...gl.V.
            /* 0418 */  0x85, 0x00, 0x0B, 0xB9, 0x8C, 0x1C, 0x84, 0x30,  // .......0
            /* 0420 */  0x11, 0x1F, 0x0E, 0x3E, 0x66, 0x02, 0x7A, 0xFE,  // ...>f.z.
            /* 0428 */  0xFF, 0x53, 0x7C, 0x71, 0x37, 0xC6, 0x13, 0xC0,  // .S|q7...
            /* 0430 */  0x8B, 0xC4, 0x63, 0x26, 0x3B, 0x6A, 0x1A, 0xE6,  // ..c&;j..
            /* 0438 */  0x59, 0xC8, 0x78, 0x67, 0xF1, 0x1A, 0xF0, 0x04,  // Y.xg....
            /* 0440 */  0xEF, 0xC9, 0x3F, 0x0B, 0x31, 0xB0, 0xC3, 0x0A,  // ..?.1...
            /* 0448 */  0xF6, 0x28, 0x64, 0x50, 0x83, 0xC7, 0x0E, 0x11,  // .(dP....
            /* 0450 */  0x26, 0xD0, 0xB3, 0x10, 0x8B, 0xFB, 0x5C, 0xD1,  // &.....\.
            /* 0458 */  0x79, 0xC2, 0x67, 0x21, 0xC0, 0xC9, 0xD5, 0xE0,  // y.g!....
            /* 0460 */  0x59, 0x08, 0x30, 0x71, 0xD8, 0xF0, 0x59, 0x03,  // Y.0q..Y.
            /* 0468 */  0x3C, 0xC3, 0xF7, 0xA8, 0xCE, 0xE1, 0xF1, 0x18,  // <.......
            /* 0470 */  0x78, 0xFD, 0xFF, 0x0F, 0x1A, 0xE0, 0xC9, 0xAA,  // x.......
            /* 0478 */  0xE3, 0x9C, 0xC0, 0x72, 0x2F, 0x5A, 0x36, 0x0E,  // ...r/Z6.
            /* 0480 */  0x34, 0x74, 0x44, 0x56, 0x07, 0xA4, 0xB1, 0x61,  // 4tDV...a
            /* 0488 */  0x2E, 0x25, 0x91, 0x4F, 0x8E, 0x8D, 0xDA, 0x8A,  // .%.O....
            /* 0490 */  0xE0, 0x74, 0x66, 0xF2, 0x09, 0xC0, 0x5A, 0x28,  // .tf...Z(
            /* 0498 */  0xA4, 0x80, 0x46, 0x63, 0x31, 0xBC, 0x33, 0x1F,  // ..Fc1.3.
            /* 04A0 */  0x9D, 0x28, 0x88, 0x01, 0x7D, 0x1C, 0xB2, 0x8D,  // .(..}...
            /* 04A8 */  0x43, 0x01, 0x6A, 0x2F, 0x9A, 0x02, 0x39, 0xE7,  // C.j/..9.
            /* 04B0 */  0x60, 0xF4, 0xCF, 0x8E, 0xCE, 0xC6, 0x77, 0x02,  // `.....w.
            /* 04B8 */  0xAE, 0x01, 0x42, 0xA7, 0x04, 0x43, 0x5B, 0xCD,  // ..B..C[.
            /* 04C0 */  0x2C, 0x51, 0x60, 0xC6, 0x7F, 0x8A, 0x31, 0x81,  // ,Q`...1.
            /* 04C8 */  0xCF, 0x31, 0xF8, 0x83, 0x01, 0x7E, 0xE0, 0x2F,  // .1...~./
            /* 04D0 */  0x06, 0x55, 0xDF, 0x0B, 0x74, 0x5F, 0xB0, 0xBA,  // .U..t_..
            /* 04D8 */  0x9B, 0x0C, 0x84, 0x19, 0x99, 0xA0, 0xBE, 0xD3,  // ........
            /* 04E0 */  0x01, 0x28, 0x80, 0x7C, 0x21, 0xF0, 0x39, 0xEA,  // .(.|!.9.
            /* 04E8 */  0xA1, 0x80, 0x4D, 0x24, 0x44, 0x98, 0x68, 0x46,  // ..M$D.hF
            /* 04F0 */  0x47, 0x4C, 0x18, 0x15, 0x7D, 0xC2, 0x14, 0xC4,  // GL..}...
            /* 04F8 */  0x13, 0x76, 0xAC, 0x09, 0xA3, 0x67, 0xE2, 0x8B,  // .v...g..
            /* 0500 */  0x0E, 0x1B, 0x31, 0x26, 0xC4, 0xD5, 0x03, 0xDA,  // ..1&....
            /* 0508 */  0x04, 0x83, 0xFA, 0x52, 0x04, 0x6B, 0xC8, 0x7C,  // ...R.k.|
            /* 0510 */  0x2C, 0xBE, 0x40, 0xE0, 0xA6, 0xCC, 0xFE, 0xFF,  // ,.@.....
            /* 0518 */  0x53, 0x06, 0xD7, 0x9C, 0xD8, 0x35, 0xC1, 0x97,  // S....5..
            /* 0520 */  0x1D, 0xDC, 0x9C, 0xC1, 0x08, 0x8F, 0xB9, 0x8B,  // ........
            /* 0528 */  0xF1, 0xAB, 0x93, 0x47, 0xC7, 0x0F, 0x0A, 0xBE,  // ...G....
            /* 0530 */  0xE1, 0x30, 0xEC, 0x27, 0x33, 0xCF, 0xE8, 0xBD,  // .0.'3...
            /* 0538 */  0xCC, 0xD7, 0x38, 0x0C, 0xAC, 0xC7, 0xCB, 0x61,  // ..8....a
            /* 0540 */  0x8D, 0x16, 0xF6, 0xD0, 0xDE, 0x43, 0x7C, 0x88,  // .....C|.
            /* 0548 */  0xF1, 0x79, 0xC2, 0x18, 0x61, 0x7D, 0x7B, 0x01,  // .y..a}{.
            /* 0550 */  0xC7, 0x3D, 0x0B, 0xFE, 0x5D, 0x03, 0x3C, 0x97,  // .=..].<.
            /* 0558 */  0x10, 0xDF, 0x35, 0x00, 0x6B, 0xFF, 0xFF, 0xBB,  // ..5.k...
            /* 0560 */  0x06, 0xC0, 0x8F, 0x6B, 0x82, 0xEF, 0x1A, 0xC0,  // ...k....
            /* 0568 */  0x7B, 0xE8, 0xBE, 0x6B, 0x00, 0xBF, 0xFF, 0xFF,  // {..k....
            /* 0570 */  0x5D, 0x03, 0x97, 0xFD, 0xAE, 0x81, 0x3A, 0x06,  // ].....:.
            /* 0578 */  0x58, 0xE1, 0x5D, 0x03, 0xDA, 0x95, 0xED, 0x7D,  // X.]....}
            /* 0580 */  0xED, 0x09, 0xCB, 0x9A, 0x2E, 0x1B, 0x28, 0x35,  // ......(5
            /* 0588 */  0x97, 0x0D, 0x80, 0x04, 0x52, 0x26, 0x8C, 0x0A,  // ....R&..
            /* 0590 */  0x3F, 0x61, 0x0A, 0xE2, 0x09, 0x3B, 0xD8, 0x65,  // ?a...;.e
            /* 0598 */  0x03, 0x14, 0x31, 0x2E, 0x1B, 0xA0, 0x1F, 0xDB,  // ..1.....
            /* 05A0 */  0x29, 0x83, 0xEF, 0xFF, 0x7F, 0xBE, 0x87, 0x73,  // )......s
            /* 05A8 */  0x4F, 0x60, 0xB7, 0x0D, 0xE0, 0x0D, 0xE9, 0xDB,  // O`......
            /* 05B0 */  0x06, 0x70, 0xCD, 0x7F, 0xDB, 0x40, 0x71, 0x58,  // .p...@qX
            /* 05B8 */  0xE5, 0x6D, 0x03, 0xE2, 0x49, 0x9E, 0x11, 0x58,  // .m..I..X
            /* 05C0 */  0xD5, 0x75, 0x03, 0xA5, 0xE7, 0xBA, 0x01, 0xC8,  // .u......
            /* 05C8 */  0xFB, 0xFF, 0x5F, 0x37, 0x80, 0x87, 0x98, 0x09,  // .._7....
            /* 05D0 */  0xA3, 0xE2, 0x4F, 0x98, 0x82, 0x78, 0xC2, 0x8E,  // ..O..x..
            /* 05D8 */  0x76, 0xDD, 0x00, 0x45, 0x90, 0xEB, 0x06, 0xE8,  // v..E....
            /* 05E0 */  0xE7, 0xF5, 0xBA, 0x01, 0x1C, 0x2E, 0x0A, 0x98,  // ........
            /* 05E8 */  0xFB, 0x06, 0xF0, 0x86, 0xE5, 0xF7, 0x0D, 0xE0,  // ........
            /* 05F0 */  0xF9, 0xFF, 0xBF, 0x6F, 0x80, 0xE7, 0x26, 0x8E,  // ...o..&.
            /* 05F8 */  0xB9, 0x6F, 0x00, 0x6C, 0xFE, 0xFF, 0x5F, 0xF5,  // .o.l.._.
            /* 0600 */  0x70, 0x17, 0x05, 0xCC, 0x7D, 0x03, 0x78, 0x5F,  // p...}.x_
            /* 0608 */  0xA4, 0x7D, 0xDF, 0x00, 0xAE, 0xD2, 0xD6, 0xEF,  // .}......
            /* 0610 */  0xC1, 0xD1, 0x13, 0x82, 0xC7, 0x87, 0xBB, 0x5F,  // ......._
            /* 0618 */  0x7A, 0x7C, 0xBE, 0x9B, 0x83, 0x63, 0x90, 0xC7,  // z|...c..
            /* 0620 */  0x78, 0x68, 0x07, 0xFC, 0xFA, 0xEE, 0x89, 0xF9,  // xh......
            /* 0628 */  0x6E, 0x0E, 0xFC, 0xCF, 0x04, 0xC7, 0x83, 0x81,  // n.......
            /* 0630 */  0xC6, 0x21, 0xB6, 0x7A, 0x69, 0x20, 0x47, 0x83,  // .!.zi G.
            /* 0638 */  0xF8, 0xFC, 0xFF, 0x0F, 0xCD, 0xE0, 0x8C, 0x55,  // .......U
            /* 0640 */  0xFC, 0xC9, 0x1F, 0xE1, 0x1C, 0x43, 0x67, 0x87,  // .....Cg.
            /* 0648 */  0x83, 0xC4, 0x0E, 0x82, 0x07, 0x5B, 0xB5, 0x09,  // .....[..
            /* 0650 */  0x14, 0x1A, 0x42, 0x51, 0x60, 0x50, 0x2C, 0x3E,  // ..BQ`P,>
            /* 0658 */  0x60, 0xE0, 0x87, 0xCD, 0xCE, 0x02, 0x4C, 0x12,  // `.....L.
            /* 0660 */  0x1C, 0xEA, 0x08, 0xE0, 0xFB, 0x44, 0xF3, 0xE3,  // .....D..
            /* 0668 */  0xD0, 0xDD, 0xE0, 0x50, 0x3D, 0x96, 0x87, 0x02,  // ...P=...
            /* 0670 */  0x7A, 0x06, 0xC4, 0x1D, 0x33, 0xC8, 0xA4, 0x3D,  // z...3..=
            /* 0678 */  0xA3, 0x88, 0x4F, 0x09, 0xA7, 0x14, 0x26, 0x81,  // ..O...&.
            /* 0680 */  0xCF, 0x0F, 0x0C, 0x8D, 0x13, 0xBC, 0x36, 0x84,  // ......6.
            /* 0688 */  0xC6, 0x9C, 0x14, 0xEC, 0xF9, 0x8E, 0x21, 0x60,  // ......!`
            /* 0690 */  0x13, 0xD8, 0xFD, 0x25, 0x43, 0xD6, 0x06, 0xAE,  // ...%C...
            /* 0698 */  0x5B, 0x92, 0x21, 0x7A, 0xC3, 0x91, 0x2D, 0x14,  // [.!z..-.
            /* 06A0 */  0x4D, 0x27, 0xCA, 0xFB, 0x46, 0x14, 0x3B, 0x43,  // M'..F.;C
            /* 06A8 */  0x10, 0x46, 0x94, 0x60, 0x41, 0x1E, 0x15, 0x62,  // .F.`A..b
            /* 06B0 */  0x45, 0x79, 0x29, 0x30, 0x42, 0xC4, 0x10, 0xAF,  // Ey)0B...
            /* 06B8 */  0x1C, 0x81, 0x4E, 0x38, 0x7C, 0x90, 0xC7, 0xA6,  // ..N8|...
            /* 06C0 */  0x38, 0xED, 0x0F, 0x82, 0xC4, 0x7A, 0x12, 0x68,  // 8....z.h
            /* 06C8 */  0x2C, 0x8E, 0x34, 0x1A, 0xD4, 0x39, 0xC0, 0xC3,  // ,.4..9..
            /* 06D0 */  0xF5, 0x21, 0xC6, 0xC3, 0x7F, 0x08, 0x31, 0xC8,  // .!....1.
            /* 06D8 */  0x41, 0x9E, 0xDB, 0xA3, 0xC2, 0x71, 0xFA, 0x2A,  // A....q.*
            /* 06E0 */  0x61, 0x82, 0x17, 0x00, 0x1F, 0x54, 0xE0, 0xB8,  // a....T..
            /* 06E8 */  0x06, 0xD4, 0x8C, 0x9F, 0x31, 0xC0, 0x72, 0x1C,  // ....1.r.
            /* 06F0 */  0xF7, 0x49, 0x05, 0xEE, 0x78, 0x7C, 0x3F, 0x60,  // .I..x|?`
            /* 06F8 */  0x13, 0x4E, 0x60, 0xF9, 0x83, 0x40, 0x1D, 0x67,  // .N`..@.g
            /* 0700 */  0xF8, 0x3C, 0x5F, 0x58, 0x0C, 0xF9, 0x98, 0x60,  // .<_X...`
            /* 0708 */  0x02, 0x8B, 0x15, 0xF0, 0xFF, 0x3F, 0xD9, 0xB0,  // .....?..
            /* 0710 */  0xF1, 0x80, 0xFF, 0x1E, 0xF3, 0x78, 0xE1, 0x93,  // .....x..
            /* 0718 */  0x89, 0xE7, 0x6B, 0x82, 0x11, 0x21, 0xE4, 0x64,  // ..k..!.d
            /* 0720 */  0x3C, 0xE8, 0x3B, 0x04, 0xE6, 0x7A, 0xC3, 0xCE,  // <.;..z..
            /* 0728 */  0x2D, 0x5C, 0xD4, 0x41, 0x03, 0x75, 0x5A, 0xF0,  // -\.A.uZ.
            /* 0730 */  0x41, 0x81, 0xDD, 0x8C, 0x30, 0xC7, 0x75, 0x7E,  // A...0.u~
            /* 0738 */  0x56, 0x01, 0xFF, 0x08, 0xE1, 0xDF, 0x1E, 0x3C,  // V......<
            /* 0740 */  0x2F, 0x5F, 0x19, 0x5E, 0x1D, 0x12, 0x38, 0xE4,  // /_.^..8.
            /* 0748 */  0x08, 0xD1, 0xE3, 0xF2, 0x08, 0x31, 0xE7, 0x23,  // .....1.#
            /* 0750 */  0xCC, 0x10, 0xC1, 0x75, 0x16, 0x00, 0xC7, 0x10,  // ...u....
            /* 0758 */  0x81, 0xCF, 0x01, 0x07, 0xF6, 0xFF, 0xFF, 0xC2,  // ........
            /* 0760 */  0xC2, 0x2E, 0x4D, 0x7C, 0xA0, 0x3E, 0xE0, 0x00,  // ..M|.>..
            /* 0768 */  0x0E, 0xAE, 0x69, 0xB8, 0x03, 0x0E, 0x38, 0xCE,  // ..i...8.
            /* 0770 */  0x02, 0xEC, 0x70, 0x03, 0x4B, 0xA1, 0x4D, 0x9F,  // ..p.K.M.
            /* 0778 */  0x1A, 0x8D, 0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C,  // ..Z5(S.L
            /* 0780 */  0x83, 0x5A, 0x7D, 0x2A, 0x35, 0x66, 0xEC, 0xAC,  // .Z}*5f..
            /* 0788 */  0xF2, 0x28, 0xAC, 0x47, 0x84, 0x46, 0x65, 0x11,  // .(.G.Fe.
            /* 0790 */  0x8F, 0x02, 0x81, 0x38, 0x32, 0x08, 0x8D, 0x44,  // ...82..D
            /* 0798 */  0x21, 0x10, 0x0B, 0x7F, 0x24, 0x08, 0xC4, 0xC2,  // !...$...
            /* 07A0 */  0x1E, 0x55, 0x02, 0xB1, 0xA8, 0xE7, 0x9C, 0x40,  // .U.....@
            /* 07A8 */  0x1C, 0x63, 0x15, 0x02, 0x27, 0x26, 0xC0, 0x29,  // .c..'&.)
            /* 07B0 */  0x08, 0x0D, 0xA6, 0xE2, 0xA0, 0x42, 0x9F, 0x6A,  // .....B.j
            /* 07B8 */  0x02, 0x71, 0x18, 0x10, 0x2A, 0xFD, 0xAF, 0x27,  // .q..*..'
            /* 07C0 */  0x10, 0x0B, 0xF4, 0x01, 0x48, 0x1F, 0x04, 0x02,  // ....H...
            /* 07C8 */  0x71, 0x04, 0x25, 0xA3, 0xA6, 0x0F, 0x09, 0x81,  // q.%.....
            /* 07D0 */  0x38, 0x2E, 0x08, 0x0D, 0xF5, 0x7C, 0x10, 0x20,  // 8....|. 
            /* 07D8 */  0xB1, 0x02, 0xC2, 0x82, 0x7B, 0x01, 0x61, 0xB2,  // ....{.a.
            /* 07E0 */  0x1F, 0x04, 0x02, 0xB1, 0x48, 0x33, 0x20, 0x4C,  // ....H3 L
            /* 07E8 */  0xCA, 0xAB, 0x4F, 0x80, 0x04, 0x84, 0xCA, 0xB5,  // ..O.....
            /* 07F0 */  0x03, 0xC2, 0xC2, 0x82, 0xD0, 0x68, 0x7A, 0x40,  // .....hz@
            /* 07F8 */  0x58, 0x00, 0x3F, 0x80, 0xF4, 0x15, 0x21, 0x10,  // X.?...!.
            /* 0800 */  0x87, 0x54, 0x04, 0xC2, 0x24, 0x3A, 0x02, 0x61,  // .T..$:.a
            /* 0808 */  0x29, 0x25, 0xFD, 0xFF, 0x21, 0x1A, 0x19, 0xA2,  // )%..!...
            /* 0810 */  0x41, 0x04, 0xE4, 0xA4, 0x96, 0x80, 0x58, 0x6E,  // A.....Xn
            /* 0818 */  0x10, 0x01, 0x39, 0x9C, 0x27, 0x20, 0x96, 0x14,  // ..9.' ..
            /* 0820 */  0x44, 0x40, 0x0E, 0xF8, 0xD2, 0x10, 0x90, 0xE3,  // D@......
            /* 0828 */  0x82, 0x08, 0xC8, 0xA9, 0x54, 0x01, 0xB1, 0x88,  // ....T...
            /* 0830 */  0x20, 0x02, 0x72, 0x32, 0x57, 0x40, 0x2C, 0x27,  //  .r2W@,'
            /* 0838 */  0x88, 0x0E, 0x01, 0xE4, 0x11, 0x14, 0x88, 0xE4,  // ........
            /* 0840 */  0x03, 0x11, 0x90, 0x63, 0xBD, 0x1C, 0x02, 0x91,  // ...c....
            /* 0848 */  0x90, 0x20, 0x02, 0x72, 0xA2, 0x37, 0x86, 0x80,  // . .r.7..
            /* 0850 */  0x1C, 0x0F, 0x44, 0x83, 0x20, 0x5F, 0xA1, 0x40,  // ..D. _.@
            /* 0858 */  0x24, 0x23, 0x88, 0x80, 0xC8, 0xFB, 0x28, 0x08,  // $#....(.
            /* 0860 */  0xD1, 0xF4, 0xAB, 0x13, 0x88, 0x53, 0x83, 0xD0,  // .....S..
            /* 0868 */  0x64, 0xDF, 0xA2, 0x20, 0xE4, 0xFF, 0x0F         // d.. ...
        })
        Name (ZOBF, Buffer (0x1060) {})
        Name (_WDG, Buffer (0x3C)
        {
            /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  // 4.._c,.E
            /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  // ..=D....
            /* 0010 */  0x50, 0x56, 0x01, 0x02, 0x79, 0x42, 0xF2, 0x95,  // PV..yB..
            /* 0018 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  // {M4C....
            /* 0020 */  0xC6, 0x7E, 0xF6, 0x1C, 0x81, 0x00, 0x01, 0x08,  // .~......
            /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
            /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
            /* 0038 */  0x5A, 0x5A, 0x01, 0x00                           // ZZ..
        })
        Method (WVPI, 3, Serialized)
        {
            CreateDWordField (Arg2, Zero, FSNI)
            CreateDWordField (Arg2, 0x04, FCOM)
            CreateDWordField (Arg2, 0x08, FCMT)
            CreateDWordField (Arg2, 0x0C, FDAS)
            Local0 = Zero
            RTCD = 0x03
            Local1 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            If ((FDAS > 0x1060))
            {
                RTCD = 0x05
                Local1 [Zero] = One
            }
            Else
            {
                Name (PVSZ, Package (0x05)
                {
                    Zero, 
                    0x04, 
                    0x80, 
                    0x0400, 
                    0x1000
                })
                Local0 = Zero
                If (((Arg1 >= One) && (Arg1 <= 0x05)))
                {
                    Local0 = DerefOf (PVSZ [(Arg1 - One)])
                }

                DASO = Local0
                SNIN = FSNI /* \_SB_.WMIV.WVPI.FSNI */
                COMD = FCOM /* \_SB_.WMIV.WVPI.FCOM */
                CMTP = FCMT /* \_SB_.WMIV.WVPI.FCMT */
                DASI = FDAS /* \_SB_.WMIV.WVPI.FDAS */
                If ((FDAS > Zero))
                {
                    CreateField (Arg2, 0x80, (FDAS * 0x08), FDAI)
                    PVWB = FDAI /* \_SB_.WMIV.WVPI.FDAI */
                }

                Local1 [One] = Local0
            }

            Return (Local1)
        }

        Method (HVWA, 0, Serialized)
        {
            Local2 = HVWC (COMD, CMTP, DASI, PVWB)
            Local0 = DerefOf (Local2 [Zero])
            If (((Local0 == 0x03) || (Local0 == 0x04)))
            {
                Local2 = HVWP (COMD, CMTP, DASI, PVWB)
            }

            Return (Local2)
        }

        Method (WVPO, 2, Serialized)
        {
            Local1 = Buffer ((0x08 + Arg0)) {}
            CreateDWordField (Local1, Zero, FSNO)
            CreateDWordField (Local1, 0x04, FRTC)
            If ((ObjectType (Arg1) == 0x04))
            {
                FRTC = DerefOf (Arg1 [Zero])
                Local0 = Zero
                If ((SizeOf (Arg1) == 0x02))
                {
                    Local2 = DerefOf (Arg1 [One])
                    Local0 = SizeOf (Local2)
                }
            }
            Else
            {
                FRTC = RTCD /* \RTCD */
                Local0 = DASO /* \DASO */
            }

            If ((Local0 > Arg0))
            {
                FRTC = 0x05
            }
            ElseIf (((Local0 > Zero) && (Local0 <= 0x1060)))
            {
                CreateField (Local1, 0x40, (Local0 * 0x08), FDAO)
                If ((ObjectType (Arg1) == 0x04))
                {
                    FDAO = Local2
                }
                Else
                {
                    Local2 = PVWB /* \PVWB */
                    CreateField (Local2, Zero, (Local0 * 0x08), FDAI)
                    FDAO = FDAI /* \_SB_.WMIV.WVPO.FDAI */
                }
            }

            If ((Zero == (FRTC & 0xFFFF)))
            {
                FSNO = 0x53534150
            }
            Else
            {
                FSNO = 0x4C494146
            }

            Return (Local1)
        }

        Method (WVCM, 0, Serialized)
        {
            SNIN = Zero
            COMD = Zero
            CMTP = Zero
            DASI = Zero
            DASO = Zero
            PVWB = ZOBF /* \_SB_.WMIV.ZOBF */
            PVWS = Zero
            RTCD = Zero
        }

        Method (WMPV, 3, Serialized)
        {
            Local4 = WVPI (Arg0, Arg1, Arg2)
            Local0 = DerefOf (Local4 [Zero])
            Local3 = DerefOf (Local4 [One])
            If ((Local0 == Zero))
            {
                PVWS = 0x03
                GSWS (0x80F3)
                If ((PVWS == 0x03))
                {
                    Local2 = HVWA ()
                }
                ElseIf ((PVWS == 0x05))
                {
                    Local6 = HVWA ()
                    If ((0x00010000 != DerefOf (Local6 [Zero])))
                    {
                        Local2 = Local6
                    }
                }
                Else
                {
                    Local5 = Zero
                    While (((PVWS == 0x04) && (Local5 < 0x8000)))
                    {
                        Sleep (0x19)
                        PVWS = 0x03
                        GSWS (0x80F3)
                        Local5++
                    }
                }
            }

            Local1 = WVPO (Local3, Local2)
            If ((Local0 == Zero))
            {
                WVCM ()
            }

            Return (Local1)
        }

        Name (VEI1, Zero)
        Name (VED1, Zero)
        Name (VEI2, Zero)
        Name (VED2, Zero)
        Name (VEVI, Zero)
        Mutex (VEMX, 0x00)
        Method (_WED, 1, Serialized)  // _Wxx: Wake Event, xx=0x00-0xFF
        {
            Local0 = Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            CreateDWordField (Local0, Zero, EVID)
            CreateDWordField (Local0, 0x04, EVDA)
            EVID = VEI1 /* \_SB_.WMIV.VEI1 */
            EVDA = VED1 /* \_SB_.WMIV.VED1 */
            Acquire (VEMX, 0xFFFF)
            If ((VEI2 != Zero))
            {
                VEI1 = VEI2 /* \_SB_.WMIV.VEI2 */
                VED1 = VED2 /* \_SB_.WMIV.VED2 */
                VEI2 = Zero
                VED2 = Zero
                If ((VEVI == Zero))
                {
                    VEVI = One
                    Notify (WMIV, 0x81) // Information Change
                }
            }
            Else
            {
                VEI1 = Zero
                VED1 = Zero
            }

            Release (VEMX)
            Return (Local0)
        }

        Method (GVWE, 2, Serialized)
        {
            Acquire (VEMX, 0xFFFF)
            If ((VEI1 == Zero))
            {
                VEI1 = Arg0
                VED1 = Arg1
            }
            Else
            {
                VEI2 = Arg0
                VED2 = Arg1
            }

            Release (VEMX)
            Notify (WMIV, 0x81) // Information Change
        }
    }

    OperationRegion (HPCF, SystemMemory, 0xB40D4000, 0x00000035)
    Field (HPCF, AnyAcc, Lock, Preserve)
    {
        ILUX,   8, 
        NFCS,   8, 
        USWE,   8, 
        EAX,    32, 
        EBX,    32, 
        ECX,    32, 
        EDX,    32, 
        REFS,   32, 
        SSCI,   8, 
        WOLE,   8, 
        DFUE,   8, 
        TPLE,   8, 
        THHA,   16, 
        TPSA,   16, 
        PFKB,   8, 
        IWRS,   8, 
        IMCM,   8, 
        OSTS,   8, 
        OSTP,   8, 
        SLPT,   8, 
        VPOM,   8, 
        XMEM,   64, 
        CPPD,   8, 
        HPID,   32, 
        FDRS,   8, 
        APL3,   8
    }

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DBG1, SystemIO, 0x80, 0x02)
    Field (DBG1, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (DBG2, SystemIO, 0x024E, 0x02)
    Field (DBG2, ByteAcc, NoLock, Preserve)
    {
        H24E,   8, 
        H24F,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (GNVS, SystemMemory, 0xB42E7A98, 0x00000192)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        DAS1,   8, 
        DAS3,   8, 
        TNBH,   8, 
        TCP0,   8, 
        TCP1,   8, 
        ATNB,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PWMN,   8, 
        LPTY,   8, 
        M92D,   8, 
        WKPM,   8, 
        ALST,   8, 
        AFUC,   8, 
        EXUS,   8, 
        AIRC,   8, 
        WLSH,   8, 
        TSSS,   8, 
        ODZC,   8, 
        PCBA,   32, 
        PCBL,   32, 
        NAPC,   8, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        SBFN,   8, 
        DID,    32, 
        INFO,   2048, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        ROMS,   32, 
        MUXF,   8, 
        PDDN,   8, 
        YRV2,   8, 
        EN4G,   8, 
        RV4N,   64, 
        RV4M,   64, 
        RV4L,   64, 
        MI4N,   64, 
        MI4M,   64, 
        MI4L,   64, 
        RM3N,   64, 
        RM3M,   64, 
        RM3L,   64, 
        MSCE,   8
    }

    OperationRegion (ERMM, SystemMemory, 0xFED80000, 0x1000)
    Field (ERMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x200), 
            ,   1, 
        G01S,   1, 
        Offset (0x204), 
            ,   1, 
        G01E,   1, 
        Offset (0x208), 
            ,   1, 
        TR01,   1, 
        GT03,   1, 
        Offset (0x20C), 
            ,   1, 
        TL01,   1, 
        Offset (0x20D), 
            ,   7, 
        ACIR,   1, 
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x299), 
            ,   7, 
        G15A,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x377), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BE), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3DF), 
        BLNK,   2, 
        Offset (0x3F0), 
        PHYD,   1, 
        Offset (0xE81), 
            ,   2, 
        ECES,   1
    }

    OperationRegion (GSMG, SystemMemory, 0xFED81500, 0x03FF)
    Field (GSMG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x02), 
        GS00,   1, 
        Offset (0x0C), 
        Offset (0x0E), 
        GE03,   1, 
        Offset (0x44), 
        Offset (0x46), 
        GS17,   1, 
            ,   5, 
        GV17,   1, 
        GE17,   1, 
        Offset (0x6C), 
        Offset (0x6E), 
        GS27,   1, 
            ,   5, 
        GV27,   1, 
        GE27,   1, 
        Offset (0xA8), 
        Offset (0xAA), 
        GS42,   1, 
            ,   5, 
        GV42,   1, 
        GE42,   1, 
        Offset (0x100), 
        Offset (0x102), 
        GS64,   1, 
            ,   5, 
        GV64,   1, 
        GE64,   1, 
        Offset (0x104), 
        Offset (0x106), 
        GS65,   1, 
            ,   5, 
        GV65,   1, 
        GE65,   1, 
        Offset (0x108), 
        Offset (0x10A), 
        GS66,   1, 
            ,   5, 
        GV66,   1, 
        GE66,   1, 
        Offset (0x114), 
        Offset (0x116), 
        GS69,   1, 
            ,   5, 
        GV69,   1, 
        GE69,   1, 
        Offset (0x154), 
        Offset (0x156), 
        GS85,   1, 
        Offset (0x1B0), 
        Offset (0x1B2), 
        GS6C,   1
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xC8), 
            ,   2, 
        SPRE,   1, 
        TPDE,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Scope (\)
    {
        OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
        Field (GSMM, AnyAcc, NoLock, Preserve)
        {
            Offset (0x289), 
                ,   3, 
            APMS,   1, 
            Offset (0x29B), 
                ,   7, 
            APME,   1, 
            Offset (0x2B2), 
                ,   6, 
            SWSE,   2
        }

        Field (PSMI, WordAcc, Lock, Preserve)
        {
            SSWP,   16
        }

        Method (GSWS, 1, NotSerialized)
        {
            While (APMS)
            {
                Stall (One)
            }

            While ((APME != Zero))
            {
                APME = Zero
            }

            While ((SWSE != One))
            {
                SWSE = One
            }

            SSWP = Arg0
            Stall (0x32)
            While (APMS)
            {
                Stall (One)
            }
        }
    }

    Scope (_SB)
    {
        Mutex (MSMI, 0x00)
        Method (SSMI, 5, NotSerialized)
        {
            Acquire (MSMI, 0xFFFF)
            If (Arg4)
            {
                Acquire (_GL, 0xFFFF)
            }

            EAX = (Arg0 << 0x10)
            EBX = Arg1
            ECX = Arg2
            EDX = Arg3
            REFS = Zero
            GSWS (Arg0)
            Local0 = REFS /* \REFS */
            If (Arg4)
            {
                Release (_GL)
            }

            Release (MSMI)
            Return (Local0)
        }
    }

    Scope (_SB)
    {
        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Name (_UID, One)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (AMHP, Zero)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (TOM, 0, NotSerialized)
            {
                Local0 = (TOML * 0x00010000)
                Local1 = (TOMH * 0x01000000)
                Local0 += Local1
                Return (Local0)
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xF8000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, B1MN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, B1MX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, B1LN)  // _LEN: Length
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, B2MN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, B2MX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, B2LN)  // _LEN: Length
                B1MN = TOM ()
                B1LN = ((B1MX - B1MN) + One)
                B2MN = 0xFC000000
                B2MX = 0xFEAFFFFF
                B2LN = ((B2MX - B2MN) + One)
                If (EN4G)
                {
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MIN, B3MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MAX, B3MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._LEN, B3LN)  // _LEN: Length
                    B3MN = RV4N /* \RV4N */
                    B3MX = RV4M /* \RV4M */
                    B3LN = RV4L /* \RV4L */
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MIN, B4MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MAX, B4MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._LEN, B4LN)  // _LEN: Length
                    B4MN = MI4N /* \MI4N */
                    B4MX = MI4M /* \MI4M */
                    B4LN = MI4L /* \MI4L */
                    CreateQWordField (CRES, \_SB.PCI0._Y04._MIN, R3MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y04._MAX, R3MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y04._LEN, R3LN)  // _LEN: Length
                    R3MN = RM3N /* \RM3N */
                    R3MX = RM3M /* \RM3M */
                    R3LN = RM3L /* \RM3L */
                }

                Return (CRES) /* \_SB_.PCI0.CRES */
            }

            Name (PR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Name (NR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x28
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x29
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x2A
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x24
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x25
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x26
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x27
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x20
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x21
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x22
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    If (\NAPC)
                    {
                        Return (NR00) /* \_SB_.PCI0.NR00 */
                    }
                    Else
                    {
                        Return (AR00) /* \_SB_.PCI0.AR00 */
                    }
                }
                Else
                {
                    Return (PR00) /* \_SB_.PCI0.PR00 */
                }
            }

            Device (GP11)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP11.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP11.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP11.PR00 */
                    }
                }
            }

            Device (GP12)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP12.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP12.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP12.PR00 */
                    }
                }
            }

            Device (GP13)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP13.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP13.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP13.PR00 */
                    }
                }
            }

            Device (GP21)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP21.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP21.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP21.PR00 */
                    }
                }
            }

            Device (GP22)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP22.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP22.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP22.PR00 */
                    }
                }
            }

            Device (GP23)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP23.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP23.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP23.PR00 */
                    }
                }
            }

            Device (GP24)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Device (NVME)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                }

                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP24.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP24.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP24.PR00 */
                    }
                }
            }

            Device (GP25)
            {
                Name (_ADR, 0x00020005)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP25.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP25.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP25.PR00 */
                    }
                }
            }

            Device (GP26)
            {
                Name (_ADR, 0x00020006)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP26.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP26.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP26.PR00 */
                    }
                }
            }

            Device (GP27)
            {
                Name (_ADR, 0x00020007)  // _ADR: Address
                Name (PR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        One, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0014FFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GP27.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GP27.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GP27.PR00 */
                    }
                }
            }

            Name (PRWP, Package (0x02)
            {
                0x19, 
                0x04
            })
            Device (BUSA)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (PRWP) /* \_SB_.PCI0.PRWP */
                }

                Device (GFX0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    OperationRegion (PCIG, PCI_Config, Zero, 0x50)
                    Field (PCIG, ByteAcc, NoLock, Preserve)
                    {
                        GVID,   16, 
                        Offset (0x2C), 
                        SVID,   32
                    }
                }

                Event (^^G027)
                Event (^^G009)
                Scope (GFX0)
                {
                    Method (ADR, 1, Serialized)
                    {
                        Local1 = DIDM ()
                        Local2 = SizeOf (Local1)
                        If ((Arg0 < Local2))
                        {
                            Local0 = DerefOf (Local1 [Arg0])
                            If ((GTOS () < 0x06))
                            {
                                Local0 &= 0xFFFF
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }

                        Return (Local0)
                    }

                    Method (DCS, 1, Serialized)
                    {
                        Local1 = (One << Arg0)
                        Local0 = Zero
                        If ((G005 (Zero) & Local1))
                        {
                            Local0 = One
                            If ((G090 & Local1))
                            {
                                Local0 = 0x1D
                                If ((G08F & Local1))
                                {
                                    Local0 = 0x1F
                                }
                            }
                        }

                        Return (Local0)
                    }

                    Method (DGS, 1, Serialized)
                    {
                        Local2 = (One << Arg0)
                        Local0 = Zero
                        If ((G091 & Local2))
                        {
                            Local0 = One
                        }

                        Return (Local0)
                    }

                    Method (DSS, 2, Serialized)
                    {
                        Local1 = (One << Arg0)
                        Local0 = G092 /* \G092 */
                        If ((Arg1 & One))
                        {
                            Local0 |= Local1
                        }
                        Else
                        {
                            Local0 &= ~Local1
                        }

                        G092 = Local0
                        If ((Arg1 & 0x40000000))
                        {
                            G08F = Local0
                        }
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        Local0 = (G08E & 0xF8)
                        Local1 = (G08E & 0x83)
                        G08E = (Local0 | Arg0)
                        If (CondRefOf (^G007, Local2))
                        {
                            G007 (Arg0, Local1)
                        }
                    }

                    Device (LCD)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (Zero))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If (^^^^^LID._LID ())
                            {
                                Return (DCS (Zero))
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (Zero))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (Zero, Arg0)
                        }

                        Method (_BCL, 0, Serialized)  // _BCL: Brightness Control Levels
                        {
                            If ((ILUX == One))
                            {
                                Return (BCL ())
                            }
                            ElseIf ((GTOS () <= 0x07))
                            {
                                Return (BCL ())
                            }
                            Else
                            {
                                Return (Package (0x67)
                                {
                                    0x50, 
                                    0x32, 
                                    Zero, 
                                    One, 
                                    0x02, 
                                    0x03, 
                                    0x04, 
                                    0x05, 
                                    0x06, 
                                    0x07, 
                                    0x08, 
                                    0x09, 
                                    0x0A, 
                                    0x0B, 
                                    0x0C, 
                                    0x0D, 
                                    0x0E, 
                                    0x0F, 
                                    0x10, 
                                    0x11, 
                                    0x12, 
                                    0x13, 
                                    0x14, 
                                    0x15, 
                                    0x16, 
                                    0x17, 
                                    0x18, 
                                    0x19, 
                                    0x1A, 
                                    0x1B, 
                                    0x1C, 
                                    0x1D, 
                                    0x1E, 
                                    0x1F, 
                                    0x20, 
                                    0x21, 
                                    0x22, 
                                    0x23, 
                                    0x24, 
                                    0x25, 
                                    0x26, 
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2A, 
                                    0x2B, 
                                    0x2C, 
                                    0x2D, 
                                    0x2E, 
                                    0x2F, 
                                    0x30, 
                                    0x31, 
                                    0x32, 
                                    0x33, 
                                    0x34, 
                                    0x35, 
                                    0x36, 
                                    0x37, 
                                    0x38, 
                                    0x39, 
                                    0x3A, 
                                    0x3B, 
                                    0x3C, 
                                    0x3D, 
                                    0x3E, 
                                    0x3F, 
                                    0x40, 
                                    0x41, 
                                    0x42, 
                                    0x43, 
                                    0x45, 
                                    0x45, 
                                    0x46, 
                                    0x47, 
                                    0x48, 
                                    0x49, 
                                    0x4A, 
                                    0x4B, 
                                    0x4C, 
                                    0x4D, 
                                    0x4E, 
                                    0x4F, 
                                    0x50, 
                                    0x51, 
                                    0x52, 
                                    0x53, 
                                    0x54, 
                                    0x55, 
                                    0x56, 
                                    0x57, 
                                    0x58, 
                                    0x59, 
                                    0x5A, 
                                    0x5B, 
                                    0x5C, 
                                    0x5D, 
                                    0x5E, 
                                    0x5F, 
                                    0x60, 
                                    0x61, 
                                    0x62, 
                                    0x63, 
                                    0x64
                                })
                            }
                        }

                        Method (_BCM, 1, Serialized)  // _BCM: Brightness Control Method
                        {
                            Local0 = BCM (Arg0)
                            If (Local0)
                            {
                                If ((G045 == Zero))
                                {
                                    If (CondRefOf (\_SB.PCI0.BUSA.GFX0.G01F))
                                    {
                                        If ((G01F () == Zero)) {}
                                    }
                                }
                                ElseIf (CondRefOf (\_SB.PCI0.BUSA.GFX0.G01E))
                                {
                                    If ((G01E () == Zero)) {}
                                }

                                Signal (G027)
                            }
                        }

                        Method (_BQC, 0, Serialized)  // _BQC: Brightness Query Current
                        {
                            Return (BQC ())
                        }
                    }

                    Device (CRT)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (One))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (One))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (One))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (One, Arg0)
                        }
                    }

                    Device (TV)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x02))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x02))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x02))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x02, Arg0)
                        }
                    }

                    Device (DVI)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x03))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x03))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x03))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x03, Arg0)
                        }
                    }

                    Device (DD04)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x04))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x04))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x04))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x04, Arg0)
                        }
                    }

                    Device (DD05)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x05))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x05))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x05))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x05, Arg0)
                        }
                    }

                    Device (DD06)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x06))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x06))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x06))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x06, Arg0)
                        }
                    }

                    Device (DD07)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x07))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x07))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x07))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x07, Arg0)
                        }
                    }

                    Device (DD08)
                    {
                        Method (_ADR, 0, Serialized)  // _ADR: Address
                        {
                            Return (ADR (0x08))
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Return (DCS (0x08))
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Return (DGS (0x08))
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            DSS (0x08, Arg0)
                        }
                    }

                    Name (_S3D, 0x03)  // _S3D: S3 Device State
                    Name (_S4D, 0x03)  // _S4D: S4 Device State
                    Name (INIM, Zero)
                    Name (DIDX, Package (0x09)
                    {
                        0x0110, 
                        0x0100, 
                        0x0200, 
                        0x0210, 
                        0x0220, 
                        0x0230, 
                        0x0240, 
                        0x0250, 
                        0x0260
                    })
                    Method (DIDM, 0, Serialized)
                    {
                        Return (DIDX) /* \_SB_.PCI0.BUSA.GFX0.DIDX */
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Name (DODS, Package (0x05)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        DODS [Zero] = (0x00010000 | DerefOf (DIDX [One]))
                        DODS [One] = (0x00010000 | DerefOf (DIDX [Zero]))
                        DODS [0x02] = (0x00010000 | DerefOf (DIDX [0x03]))
                        DODS [0x03] = (0x00010000 | DerefOf (DIDX [0x04]))
                        DODS [0x04] = (0x00010000 | DerefOf (DIDX [0x05]))
                        Return (DODS) /* \_SB_.PCI0.BUSA.GFX0._DOD.DODS */
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        INIM = One
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((INIM == One))
                        {
                            INIM = Zero
                        }
                    }

                    Name (PSBR, Zero)
                    Name (ABRI, 0xFF)
                    Name (VGSD, Zero)
                    Name (BRIN, Zero)
                    Name (ABRT, Buffer (0x62)
                    {
                        /* 0000 */  0x02, 0x0E, 0x04, 0x10, 0x06, 0x12, 0x08, 0x15,  // ........
                        /* 0008 */  0x0A, 0x17, 0x0C, 0x1A, 0x0E, 0x1D, 0x10, 0x20,  // ....... 
                        /* 0010 */  0x12, 0x23, 0x14, 0x26, 0x16, 0x29, 0x18, 0x2C,  // .#.&.).,
                        /* 0018 */  0x1A, 0x30, 0x1C, 0x34, 0x1E, 0x37, 0x20, 0x3B,  // .0.4.7 ;
                        /* 0020 */  0x22, 0x3E, 0x24, 0x43, 0x26, 0x47, 0x28, 0x4B,  // ">$C&G(K
                        /* 0028 */  0x2A, 0x50, 0x2C, 0x54, 0x2E, 0x58, 0x30, 0x5D,  // *P,T.X0]
                        /* 0030 */  0x32, 0x62, 0x34, 0x67, 0x36, 0x6C, 0x38, 0x71,  // 2b4g6l8q
                        /* 0038 */  0x3A, 0x76, 0x3C, 0x7B, 0x3E, 0x81, 0x40, 0x87,  // :v<{>.@.
                        /* 0040 */  0x42, 0x8C, 0x44, 0x92, 0x46, 0x98, 0x48, 0x9E,  // B.D.F.H.
                        /* 0048 */  0x4A, 0xA4, 0x4C, 0xAB, 0x4E, 0xB1, 0x50, 0xB7,  // J.L.N.P.
                        /* 0050 */  0x52, 0xBE, 0x54, 0xC5, 0x56, 0xCC, 0x58, 0xD3,  // R.T.V.X.
                        /* 0058 */  0x5A, 0xDA, 0x5C, 0xE1, 0x5E, 0xE8, 0x60, 0xF0,  // Z.\.^.`.
                        /* 0060 */  0x62, 0xF7                                       // b.
                    })
                    Name (DEVM, Package (0x09)
                    {
                        One, 
                        0x02, 
                        0x04, 
                        0x08, 
                        0x80, 
                        0x0200, 
                        0x0400, 
                        0x0800, 
                        0x1000
                    })
                    Method (ATIF, 2, Serialized)
                    {
                        G08D |= 0x03
                        Switch (Arg0)
                        {
                            Case (Zero)
                            {
                                Local0 = AFN0 ()
                            }
                            Case (One)
                            {
                                Local0 = AFN1 ()
                            }
                            Case (0x02)
                            {
                                Local0 = AFN2 ()
                            }
                            Case (0x03)
                            {
                                Local0 = AFN3 (Arg1)
                            }
                            Case (0x04)
                            {
                                Local0 = AFN4 ()
                            }
                            Case (0x0F)
                            {
                                Local0 = AF15 ()
                            }
                            Case (0x10)
                            {
                                Local0 = AF16 ()
                            }
                            Default
                            {
                                Local0 = Buffer (0x0100)
                                    {
                                         0x00, 0x00                                       // ..
                                    }
                            }

                        }

                        Return (Local0)
                    }

                    Method (AFN0, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100) {}
                        CreateWordField (Local0, Zero, SIZE)
                        CreateWordField (Local0, 0x02, IVER)
                        CreateDWordField (Local0, 0x04, SNMK)
                        CreateDWordField (Local0, 0x08, SFBV)
                        SIZE = 0x0C
                        IVER = One
                        SNMK = 0xF1
                        SFBV = 0xC00F
                        If (CondRefOf (\_SB.PCI0.HGME))
                        {
                            HGME (0x03)
                        }

                        If ((G306 == Zero))
                        {
                            G306 = One
                            If (CondRefOf (\_SB.PCI0.G307))
                            {
                                G307 (0x06)
                            }
                        }

                        If (CondRefOf (\_SB.PCI0.G309))
                        {
                            G309 (Zero)
                        }

                        Return (Local0)
                    }

                    Method (AFN1, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100) {}
                        CreateWordField (Local0, Zero, SIZE)
                        CreateDWordField (Local0, 0x02, VFMK)
                        CreateDWordField (Local0, 0x06, FLAG)
                        CreateByteField (Local0, 0x0A, NOCC)
                        SIZE = 0x0B
                        VFMK = 0x0107
                        FLAG = 0x0106
                        NOCC = 0xD0
                        Return (Local0)
                    }

                    Method (AFN2, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100) {}
                        CreateWordField (Local0, Zero, SIZE)
                        CreateDWordField (Local0, 0x02, PBRO)
                        CreateByteField (Local0, 0x06, REVE)
                        CreateByteField (Local0, 0x07, TSGC)
                        CreateByteField (Local0, 0x08, TSSD)
                        CreateByteField (Local0, 0x09, FPGC)
                        CreateByteField (Local0, 0x0A, FPSD)
                        CreateByteField (Local0, 0x0B, SPSE)
                        CreateByteField (Local0, 0x0C, PBBL)
                        CreateByteField (Local0, 0x0D, PLTG)
                        CreateDWordField (Local0, 0x0E, PLVW)
                        SIZE = 0x12
                        PBRO = PSBR /* \_SB_.PCI0.BUSA.GFX0.PSBR */
                        PSBR = Zero
                        Local1 = 0x06
                        While ((Local1 < 0x12))
                        {
                            Local0 [Local1] = Zero
                            Local1++
                        }

                        If (((PBRO == Zero) && (GTOS () < 0x06)))
                        {
                            ABRI = G02B ()
                            PBRO = 0x80
                        }

                        If ((PBRO && 0x10))
                        {
                            Local2 = 0x02
                            If ((^^^LPCB.EC0.GACS () == One))
                            {
                                If ((^^^LPCB.EC0.GPID () == Zero))
                                {
                                    Local2 = One
                                }
                                Else
                                {
                                    Local2 = 0x03
                                }
                            }

                            SPSE = Local2
                        }

                        If ((PBRO && 0x80))
                        {
                            PBBL = ABRI /* \_SB_.PCI0.BUSA.GFX0.ABRI */
                        }

                        If ((PBRO && 0x1000)) {}
                        Return (Local0)
                    }

                    Method (AFN3, 1, Serialized)
                    {
                        CreateWordField (Arg0, Zero, SIZI)
                        CreateWordField (Arg0, 0x02, DISI)
                        CreateWordField (Arg0, 0x04, CDIS)
                        Local0 = Buffer (0x0100) {}
                        CreateWordField (Local0, Zero, SIZE)
                        CreateDWordField (Local0, 0x02, DISP)
                        DISP = Zero
                        SIZE = 0x04
                        Switch (VGSD)
                        {
                            Case (One)
                            {
                                G090 = TOHP (CDIS)
                                G08F = TOHP (DISI)
                                DISP = DISI /* \_SB_.PCI0.BUSA.GFX0.AFN3.DISI */
                            }
                            Case (0x02)
                            {
                                DISP = TOAF (G091)
                                G08F = G091 /* \G091 */
                            }
                            Default
                            {
                                If ((DISI == One))
                                {
                                    DISP = (CDIS | One)
                                }
                                ElseIf ((DISI & One))
                                {
                                    DISP = (CDIS & 0xFFFFFFFFFFFFFFFE)
                                }
                                Else
                                {
                                    DISP = One
                                }

                                G08F = TOHP (DISI)
                                G091 = TOHP (DISP)
                            }

                        }

                        Signal (G009)
                        VGSD = Zero
                        If (BRIN)
                        {
                            G01E ()
                            BRIN = Zero
                        }

                        Return (Local0)
                    }

                    Method (AFN4, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100) {}
                        CreateWordField (Local0, Zero, SIZE)
                        CreateByteField (Local0, 0x02, LIDS)
                        SIZE = 0x03
                        If (^^^^LID._LID ())
                        {
                            LIDS = Zero
                        }
                        Else
                        {
                            LIDS = One
                        }

                        Return (Local0)
                    }

                    Method (AF15, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100) {}
                        CreateWordField (Local0, Zero, DNUM)
                        CreateWordField (Local0, 0x02, DSZE)
                        CreateDWordField (Local0, 0x04, FLG1)
                        CreateWordField (Local0, 0x08, BUS1)
                        CreateWordField (Local0, 0x0A, DEV1)
                        CreateDWordField (Local0, 0x0C, FLG2)
                        CreateWordField (Local0, 0x10, BUS2)
                        CreateWordField (Local0, 0x12, DEV2)
                        DNUM = 0x02
                        DSZE = 0x08
                        FLG1 = 0x04
                        BUS1 = Zero
                        DEV1 = One
                        FLG2 = 0x05
                        BUS2 = One
                        DEV2 = Zero
                        Return (Local0)
                    }

                    Method (AF16, 0, Serialized)
                    {
                        Local0 = Buffer (0x0100) {}
                        Local7 = G084 /* \G084 */
                        Local1 = SizeOf (Local7)
                        Local3 = Zero
                        Local4 = Zero
                        While ((Local3 < Local1))
                        {
                            Local2 = DerefOf (Local7 [Local3])
                            If ((Local2 != Zero))
                            {
                                Local4++
                            }

                            Local3++
                        }

                        Divide (Local4, 0x02, Local3, Local2)
                        Local6 = DerefOf (Local7 [Local2])
                        Local1 = DerefOf (Local7 [Zero])
                        If (((Local6 - Local1) < 0x32))
                        {
                            Local4 = Zero
                        }

                        If ((Local4 != Zero))
                        {
                            Local5 = Buffer (0xC6) {}
                        }
                        Else
                        {
                            Local5 = ABRT /* \_SB_.PCI0.BUSA.GFX0.ABRT */
                        }

                        Local1 = SizeOf (Local5)
                        CreateWordField (Local0, Zero, SIZE)
                        CreateWordField (Local0, 0x02, FLGS)
                        CreateByteField (Local0, 0x04, ERRC)
                        CreateByteField (Local0, 0x05, ACLV)
                        CreateByteField (Local0, 0x06, DCLV)
                        CreateByteField (Local0, 0x07, MIIS)
                        CreateByteField (Local0, 0x08, MAIS)
                        CreateByteField (Local0, 0x09, COUN)
                        Local2 = (0x0A + Local1)
                        SIZE = Local2
                        FLGS = Zero
                        ERRC = Zero
                        ACLV = 0x64
                        DCLV = 0x20
                        If ((Local4 != Zero))
                        {
                            MIIS = DerefOf (Local7 [Zero])
                            MAIS = DerefOf (Local7 [(Local4 - One)])
                        }
                        Else
                        {
                            MIIS = 0x0C
                            MAIS = 0xFF
                        }

                        Divide (Local1, 0x02, Local3, Local2)
                        COUN = Local2
                        If ((Local4 != Zero))
                        {
                            Local3 = ((Local6 - MIIS) / 0x32)
                            Local2 = Zero
                            While ((Local2 < 0x31))
                            {
                                Local5 [(Local2 * 0x02)] = (Local2 + One)
                                Local5 [((Local2 * 0x02) + One)] = (
                                    MIIS + (Local3 * (Local2 + One)))
                                Local2++
                            }

                            Local5 [(Local2 * 0x02)] = (Local2 + One)
                            Local5 [((Local2 * 0x02) + One)] = Local6
                            Local2++
                            Local3 = ((MAIS - Local6) / 0x32)
                            While ((Local2 < 0x63))
                            {
                                Local5 [(Local2 * 0x02)] = (Local2 + One)
                                Local5 [((Local2 * 0x02) + One)] = (
                                    Local6 + (Local3 * (Local2 - 0x31)))
                                Local2++
                            }
                        }

                        Local2 = Zero
                        While ((Local2 < Local1))
                        {
                            Local3 = (0x0A + Local2)
                            Local0 [Local3] = DerefOf (Local5 [Local2])
                            Local2++
                        }

                        Return (Local0)
                    }

                    Method (G031, 0, Serialized)
                    {
                        PSBR |= 0x20
                        Notify (^, 0xD0) // Hardware-Specific
                        Return (One)
                    }

                    Method (G02C, 0, Serialized)
                    {
                        PSBR |= One
                        Notify (^, 0xD0) // Hardware-Specific
                        Return (One)
                    }

                    Method (G02F, 0, Serialized)
                    {
                        Local0 = Zero
                    }

                    Method (G02E, 0, Serialized)
                    {
                        PSBR |= 0x10
                        Notify (^, 0xD0) // Hardware-Specific
                        Return (One)
                    }

                    Method (G01E, 0, Serialized)
                    {
                        ABRI = G02B ()
                        PSBR |= 0x80
                        Notify (^, 0xD0) // Hardware-Specific
                        Return (One)
                    }

                    Method (G01A, 1, Serialized)
                    {
                        If (Arg0)
                        {
                            VGSD = One
                            Reset (G009)
                            G02C ()
                        }

                        Wait (G009, 0x0500)
                    }

                    Method (G01C, 0, Serialized)
                    {
                        VGSD = 0x02
                        G02C ()
                        Wait (G009, 0x0500)
                    }

                    Method (G002, 1, Serialized)
                    {
                        If ((Arg0 >= 0x03))
                        {
                            If (((G08E & 0x44) == Zero))
                            {
                                BRIN = One
                            }
                        }
                    }

                    Method (TOHP, 1, Serialized)
                    {
                        Local0 = Zero
                        Local1 = Arg0
                        Local2 = Zero
                        While (((Local0 < 0x09) && Local1))
                        {
                            Local3 = DerefOf (DEVM [Local0])
                            If ((Local1 & Local3))
                            {
                                Local4 = (One << Local0)
                                Local2 |= Local4
                            }

                            Local1 &= ~Local3
                            Local0++
                        }

                        Return (Local2)
                    }

                    Method (TOAF, 1, Serialized)
                    {
                        Local0 = Zero
                        Local1 = Arg0
                        Local2 = Zero
                        While (((Local0 < 0x09) && Local1))
                        {
                            Local3 = (One << Local0)
                            If ((Local1 & Local3))
                            {
                                Local4 = DerefOf (DEVM [Local0])
                                Local2 |= Local4
                            }

                            Local1 &= ~Local3
                            Local0++
                        }

                        Return (Local2)
                    }

                    Method (G030, 0, Serialized)
                    {
                        PSBR |= 0x0100
                        Notify (^, 0xD0) // Hardware-Specific
                        Return (One)
                    }

                    Scope (^^^PCI0)
                    {
                        Name (G306, Zero)
                        Name (G302, Zero)
                        Name (G303, Zero)
                        Method (G305, 0, NotSerialized)
                        {
                            G306 = Zero
                            G270 = Zero
                        }

                        Method (G301, 2, Serialized)
                        {
                            If ((G306 == One))
                            {
                                If (((Arg1 == G270) || (Arg1 == Zero)))
                                {
                                    Return (0x02)
                                }

                                G302 = Arg0
                                G303 = Arg1
                                G270 = Arg1
                                If (CondRefOf (\_SB.PCI0.BUSA.GFX0.PSBR))
                                {
                                    ^BUSA.GFX0.PSBR |= 0x1000
                                    Notify (^BUSA.GFX0, 0xD0) // Hardware-Specific
                                }
                                ElseIf (CondRefOf (\_SB.PCI0.PEG0.PEGP.PSBR))
                                {
                                    ^PEG0.PEGP.PSBR |= 0x1000
                                    Notify (^PEG0.PEGP, 0xD0) // Hardware-Specific
                                }

                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (G30B, 2, Serialized)
                        {
                            If ((G306 == One))
                            {
                                G302 = Arg0
                                G303 = Arg1
                                G270 = Arg1
                                If (CondRefOf (\_SB.PCI0.BUSA.GFX0.PSBR))
                                {
                                    ^BUSA.GFX0.PSBR |= 0x1000
                                    Notify (^BUSA.GFX0, 0xD0) // Hardware-Specific
                                }
                                ElseIf (CondRefOf (\_SB.PCI0.PEG0.PEGP.PSBR))
                                {
                                    ^PEG0.PEGP.PSBR |= 0x1000
                                    Notify (^PEG0.PEGP, 0xD0) // Hardware-Specific
                                }

                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Scope (\_GPE)
                    {
                        Method (G00D, 3, Serialized)
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (One)
                                {
                                    If ((Arg0 & 0x80))
                                    {
                                        Notify (\_SB.PCI0.BUSA.GFX0.LCD, Arg0)
                                    }
                                    ElseIf (((G08E & 0x44) == Zero))
                                    {
                                        \_SB.PCI0.BUSA.GFX0.G01E ()
                                    }
                                }
                                Case (0x03)
                                {
                                    \_SB.PCI0.BUSA.GFX0.G02F ()
                                }
                                Case (0x05)
                                {
                                    \_SB.PCI0.BUSA.GFX0.G02E ()
                                }
                                Case (0x06)
                                {
                                    If ((G08D & One))
                                    {
                                        \_SB.PCI0.BUSA.GFX0.G01C ()
                                    }
                                    Else
                                    {
                                        Notify (\_SB.PCI0.BUSA.GFX0, 0x80) // Status Change
                                    }
                                }
                                Case (0x07)
                                {
                                    \_SB.PCI0.BUSA.GFX0.G01A (Arg0)
                                }
                                Case (0x08)
                                {
                                    \_SB.PCI0.BUSA.GFX0.G002 (Arg0)
                                }
                                Case (0x0A)
                                {
                                    \_SB.ODGW (0xFF02)
                                    \_SB.PCI0.BUSA.GFX0.G030 ()
                                }

                            }

                            Return (Zero)
                        }
                    }

                    Scope (\_GPE)
                    {
                        Method (G001, 1, Serialized)
                        {
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = G00D (Arg0, Zero, One)
                                }
                            }
                        }

                        Name (G00E, One)
                        Method (G014, 0, Serialized)
                        {
                            G00E = One
                            G06C = 0x77
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = G00D (Zero, Zero, 0x03)
                                }
                            }

                            Return (G00E) /* \_GPE.G00E */
                        }

                        Method (G015, 2, Serialized)
                        {
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = G00D (Arg0, Arg1, 0x05)
                                }
                            }
                        }

                        Method (G016, 0, Serialized)
                        {
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = G00D (Zero, Zero, 0x0A)
                                }
                            }
                        }
                    }

                    Scope (\_SB)
                    {
                        Method (G004, 1, Serialized)
                        {
                            If ((G08D & 0x04))
                            {
                                Return (0xFFFF)
                            }
                            Else
                            {
                                If (((G08E & 0x03) == Zero))
                                {
                                    G091 = Arg0
                                    Local1 = One
                                    If (Local1)
                                    {
                                        If (CondRefOf (\_GPE.G00D))
                                        {
                                            Local1 = \_GPE.G00D (Arg0, Zero, 0x06)
                                        }
                                    }
                                }

                                Return (Zero)
                            }

                            Return (Zero)
                        }

                        Method (G003, 1, Serialized)
                        {
                            If (((G08D & 0x04) && Arg0))
                            {
                                Return (0xFFFF)
                            }
                            Else
                            {
                                If ((G08D & One))
                                {
                                    If ((Arg0 == Zero))
                                    {
                                        Local0 = Wait (G009, 0x0500)
                                        If ((Local0 != Zero)) {}
                                    }

                                    Local1 = One
                                    If (Local1)
                                    {
                                        If (CondRefOf (\_GPE.G00D))
                                        {
                                            Local1 = \_GPE.G00D (Arg0, Zero, 0x07)
                                        }
                                    }
                                }
                                ElseIf (Arg0)
                                {
                                    SSMI (0xEA74, 0x02, Zero, Zero, Zero)
                                }

                                Return (G090) /* \G090 */
                            }
                        }

                        Method (G002, 1, Serialized)
                        {
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = \_GPE.G00D (Arg0, Zero, 0x08)
                                }
                            }
                        }

                        Method (G09F, 0, NotSerialized)
                        {
                            Local1 = One
                            If (Local1)
                            {
                                If (CondRefOf (\_GPE.G00D))
                                {
                                    Local1 = \_GPE.G00D (Zero, Zero, 0x09)
                                }
                            }
                        }
                    }

                    Name (ATCB, Buffer (0x0100) {})
                    Name (ATCC, Buffer (0x03) {})
                    Method (ATCS, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (ATC0 ())
                        }

                        If ((Arg0 == One))
                        {
                            Return (ATC1 ())
                        }

                        If ((Arg0 == 0x02))
                        {
                            Return (ATC2 (Arg1))
                        }

                        If ((Arg0 == 0x03))
                        {
                            Return (ATC3 ())
                        }

                        If ((Arg0 == 0x04))
                        {
                            Return (ATC4 (Arg1))
                        }

                        If ((Arg0 == 0x06))
                        {
                            Return (ATC6 (Arg1))
                        }

                        If ((Arg0 == 0x07))
                        {
                            Return (ATC7 (Arg1))
                        }
                        Else
                        {
                            CreateWordField (ATCB, Zero, SSZE)
                            CreateWordField (ATCB, 0x02, VERN)
                            CreateDWordField (ATCB, 0x04, NMSK)
                            SSZE = Zero
                            VERN = Zero
                            NMSK = Zero
                            Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                        }
                    }

                    Method (ATC0, 0, NotSerialized)
                    {
                        CreateWordField (ATCB, Zero, SSZE)
                        CreateWordField (ATCB, 0x02, VERN)
                        CreateDWordField (ATCB, 0x04, NMSK)
                        SSZE = 0x08
                        VERN = One
                        NMSK = 0x6F
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC1, 0, NotSerialized)
                    {
                        CreateWordField (ATCB, Zero, SSZE)
                        CreateDWordField (ATCB, 0x02, VMSK)
                        CreateDWordField (ATCB, 0x06, FLGS)
                        SSZE = 0x0A
                        VMSK = One
                        FLGS = Zero
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC2, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateDWordField (Arg0, 0x04, VFMK)
                        CreateDWordField (Arg0, 0x06, FLAG)
                        CreateField (Arg0, 0x30, One, ADVC)
                        CreateField (Arg0, 0x31, One, WFCM)
                        CreateByteField (Arg0, 0x08, RQST)
                        CreateByteField (Arg0, 0x09, PFRQ)
                        CreateWordField (ATCB, Zero, SZZE)
                        CreateByteField (ATCB, 0x02, RETV)
                        SZZE = 0x03
                        RETV = One
                        ATCB = ALIB (0x02, Arg0)
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC3, 0, Serialized)
                    {
                        CreateWordField (ATCB, Zero, SZZE)
                        CreateByteField (ATCB, 0x02, RETV)
                        CreateWordField (ATCC, Zero, SZZB)
                        CreateByteField (ATCC, 0x02, PSPP)
                        SZZE = 0x03
                        RETV = One
                        SZZB = 0x03
                        PSPP = One
                        ATCB = ALIB (0x03, ATCC)
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC4, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateByteField (Arg0, 0x04, NULN)
                        CreateWordField (ATCB, Zero, SZZE)
                        CreateByteField (ATCB, 0x02, NULM)
                        SZZE = 0x03
                        NULM = One
                        ATCB = ALIB (0x04, Arg0)
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC6, 1, Serialized)
                    {
                        CreateWordField (ATCB, Zero, SZZE)
                        CreateDWordField (ATCB, 0x02, UMAZ)
                        SZZE = 0x06
                        UMAZ = M233 /* External reference */
                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    Method (ATC7, 1, Serialized)
                    {
                        If ((G065 != Zero))
                        {
                            GSWS (M235)
                        }

                        Return (ATCB) /* \_SB_.PCI0.BUSA.GFX0.ATCB */
                    }

                    OperationRegion (VIDR, PCI_Config, Zero, 0x02)
                    Field (VIDR, WordAcc, NoLock, Preserve)
                    {
                        G008,   16
                    }

                    Name (G006, 0xFF)
                    Method (G005, 1, Serialized)
                    {
                        If ((Arg0 && (G006 == 0xFF)))
                        {
                            Local0 = 0x07
                            If (DCKD ())
                            {
                                Local0 |= 0x08
                            }

                            G006 = Local0
                        }

                        Return (G006) /* \_SB_.PCI0.BUSA.GFX0.G006 */
                    }

                    Method (G007, 2, NotSerialized)
                    {
                        If ((Arg0 && Arg1)) {}
                    }

                    Method (LCD._DDC, 1, Serialized)  // _DDC: Display Data Current
                    {
                        Return (HDDC (Arg0))
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (PSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    OperationRegion (PSPX, PCI_Config, 0x20, 0x04)
                    Field (PSPX, AnyAcc, NoLock, Preserve)
                    {
                        PBR3,   32
                    }
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, One))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (One, 0x02))
                            }
                        }

                        Device (HS03)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x03))
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        }

                        Device (HS04)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x04))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, One))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (One, 0x02))
                            }
                        }
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x05))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (One, 0x06))
                            }
                        }

                        Device (HS03)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x07))
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        }

                        Device (HS04)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                            {
                                Return (0x03)
                            }

                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (Zero, 0x08))
                            }

                            Device (CAM0)
                            {
                                Name (_ADR, 0x04)  // _ADR: Address
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x1,
                                        PLD_Panel              = "FRONT",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "CENTER",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x0,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0xC8,
                                        PLD_HorizontalOffset   = 0xA0)

                                })
                            }

                            Device (IRCM)
                            {
                                Name (_ADR, 0x06)  // _ADR: Address
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x1,
                                        PLD_Panel              = "FRONT",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "CENTER",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x0,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0xC8,
                                        PLD_HorizontalOffset   = 0xA0)

                                })
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x05))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (One, 0x06))
                            }
                        }
                    }
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_WOV, 0, NotSerialized)
                    {
                        Return (Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (HDEF)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Name (ASTA, Zero)
                    Name (ASTI, Zero)
                    PowerResource (APPR, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (ASTA) /* \_SB_.PCI0.BUSA.HDEF.ASTA */
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            ASTA = One
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            ASTA = Zero
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        APPR
                    })
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Name (PR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x25
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR17) /* \_SB_.PCI0.BUSA.NR17 */
                        }
                        Else
                        {
                            Return (AR17) /* \_SB_.PCI0.BUSA.AR17 */
                        }
                    }
                    Else
                    {
                        Return (PR17) /* \_SB_.PCI0.BUSA.PR17 */
                    }
                }
            }

            Device (BUSB)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT0)
                    {
                        Name (_ADR, 0xFFFF)  // _ADR: Address
                        Name (IDAS, 0xFF)
                        Name (IDDC, 0xFF)
                        Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                        {
                            CreateByteField (Arg0, 0x0100, BFAS)
                            ToInteger (BFAS, IDAS) /* \_SB_.PCI0.BUSB.SATA.PRT0.IDAS */
                            CreateByteField (Arg0, 0xA7, BFDC)
                            ToInteger (BFDC, IDDC) /* \_SB_.PCI0.BUSB.SATA.PRT0.IDDC */
                            Return (Zero)
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            If ((((IDAS & One) == One) && ((IDDC & 0x08
                                ) == 0x08)))
                            {
                                Return (Buffer (0x0E)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                                })
                            }

                            If (((IDAS & One) == One))
                            {
                                Return (Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                                })
                            }

                            If (((IDDC & 0x08) == 0x08))
                            {
                                Return (Buffer (0x07)
                                {
                                     0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                                })
                            }

                            Return (Buffer (0x07)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                            })
                        }
                    }

                    Device (PRT1)
                    {
                        Name (_ADR, 0x0001FFFF)  // _ADR: Address
                        Name (IDAS, 0xFF)
                        Name (IDDC, 0xFF)
                        Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                        {
                            CreateByteField (Arg0, 0x0100, BFAS)
                            ToInteger (BFAS, IDAS) /* \_SB_.PCI0.BUSB.SATA.PRT1.IDAS */
                            CreateByteField (Arg0, 0xA7, BFDC)
                            ToInteger (BFDC, IDDC) /* \_SB_.PCI0.BUSB.SATA.PRT1.IDDC */
                            Return (Zero)
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            If ((((IDAS & One) == One) && ((IDDC & 0x08
                                ) == 0x08)))
                            {
                                Return (Buffer (0x0E)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                                })
                            }

                            If (((IDAS & One) == One))
                            {
                                Return (Buffer (0x07)
                                {
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                                })
                            }

                            If (((IDDC & 0x08) == 0x08))
                            {
                                Return (Buffer (0x07)
                                {
                                     0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                                })
                            }

                            Return (Buffer (0x07)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                            })
                        }
                    }
                }

                Name (PR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (NR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x23
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x21
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR18) /* \_SB_.PCI0.BUSB.NR18 */
                        }
                        Else
                        {
                            Return (AR18) /* \_SB_.PCI0.BUSB.AR18 */
                        }
                    }
                    Else
                    {
                        Return (PR18) /* \_SB_.PCI0.BUSB.PR18 */
                    }
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Mutex (PSMX, 0x00)
                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_GPE, 0x03)  // _GPE: General Purpose Events
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Mutex (ECMX, 0x00)
                    Name (ECRG, Zero)
                    Name (HSWK, Zero)
                    OperationRegion (P3EC, SystemIO, 0x6A, 0x08)
                    Field (P3EC, ByteAcc, NoLock, Preserve)
                    {
                        PM3D,   8, 
                        Offset (0x02), 
                        Offset (0x03), 
                        Offset (0x04), 
                        PM3C,   8
                    }

                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1D), 
                        INDI,   8, 
                        Offset (0x20), 
                        DMEE,   8, 
                        Offset (0xF5), 
                        VBPS,   8
                    }

                    Method (GBNT, 2, Serialized)
                    {
                        Local0 = (One << Arg1)
                        If (((Arg0 & Local0) == Local0))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (ECRI, 0, Serialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        CRZN = One
                        PHTP = 0x63
                        Release (ECMX)
                        OST = GTOS ()
                        PWUP (0x07, 0xFF)
                        Local0 = GBAP ()
                        ITLB ()
                        SBTN (Local0, 0x81)
                        PRIT ()
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            ECRG = Arg1
                            If ((Arg1 == One))
                            {
                                ECRI ()
                            }
                        }
                    }

                    OperationRegion (ECRM, EmbeddedControl, Zero, 0xFF)
                    Field (ECRM, ByteAcc, NoLock, Preserve)
                    {
                        PMCD,   32, 
                        S0FL,   8, 
                        SXF0,   8, 
                        SXF1,   8, 
                        CPWR,   16, 
                        CVLT,   16, 
                        CCUR,   16, 
                        DIDX,   8, 
                        CIDX,   8, 
                        PMCC,   8, 
                        PMEP,   8, 
                        Offset (0x22), 
                        CRZN,   8, 
                        THTA,   8, 
                        HYST,   8, 
                        CRIT,   8, 
                        TEMP,   8, 
                        TENA,   8, 
                        KBBL,   8, 
                        TOAD,   8, 
                        PHTP,   8, 
                        THEM,   8, 
                        TMPO,   8, 
                        AFAN,   8, 
                        FRDC,   8, 
                        FTGC,   8, 
                        PLTP,   8, 
                        Offset (0x32), 
                        DTMP,   8, 
                        Offset (0x35), 
                        FR2C,   8, 
                        FT2C,   8, 
                        BCVD,   8, 
                        Offset (0x3F), 
                        SNMD,   8, 
                        ABDI,   8, 
                        ABAD,   8, 
                        ABIX,   8, 
                        ABDA,   8, 
                        ABST,   8, 
                        PORI,   8, 
                        Offset (0x4C), 
                        PSSB,   8, 
                        Offset (0x4E), 
                        SLID,   8, 
                        SLDT,   8, 
                        Offset (0x5E), 
                        PPCM,   8, 
                        PPDS,   8, 
                        UCHC,   8, 
                        UCHS,   8, 
                        UCDB,   8, 
                        UCCS,   8, 
                        UCPN,   8, 
                        Offset (0x70), 
                        WKTR,   16, 
                        S5TR,   16, 
                        AS4F,   8, 
                        Offset (0x78), 
                            ,   7, 
                        BCML,   1, 
                        BRIM,   1, 
                        CCFG,   1, 
                            ,   1, 
                            ,   1, 
                        EXTP,   1, 
                        BKDT,   1, 
                        BOTP,   1, 
                        Offset (0x7B), 
                        LMBC,   1, 
                        PPUI,   1, 
                        Offset (0x80), 
                        ESID,   8, 
                            ,   4, 
                        SLPT,   4, 
                        FNSW,   1, 
                        SFNC,   1, 
                        ACPI,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        DETF,   1, 
                        LIDS,   1, 
                        TBLT,   1, 
                            ,   1, 
                        LIDN,   1, 
                        TBTA,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0x84), 
                        ADP,    1, 
                        ADID,   2, 
                        LCTV,   1, 
                        BATP,   4, 
                        BPU,    1, 
                        Offset (0x86), 
                        BSEL,   4, 
                        Offset (0x87), 
                        LB1,    8, 
                        LB2,    8, 
                        BDC,    16, 
                        Offset (0x8C), 
                        BSP,    8, 
                        BFC,    16, 
                        BRTE,   16, 
                        BTC,    1, 
                        Offset (0x92), 
                        BME,    16, 
                        BDN,    8, 
                        BDV,    16, 
                        BCV1,   16, 
                        BST,    4, 
                        BCLE,   1, 
                        Offset (0x9B), 
                        BATE,   16, 
                        BPR,    16, 
                        BCR,    16, 
                        BRC,    16, 
                        BCC,    16, 
                        BPV,    16, 
                        BCV2,   16, 
                        BCV3,   16, 
                        BCV4,   16, 
                        BCW,    16, 
                        BATF,   16, 
                        BCL,    16, 
                        MAXC,   16, 
                        BCG1,   8, 
                        BT1I,   1, 
                        BT2I,   1, 
                            ,   2, 
                        BATN,   4, 
                        BSTS,   16, 
                        BCG2,   8, 
                        Offset (0xBD), 
                        BMO,    8, 
                        Offset (0xBF), 
                        BRCV,   8, 
                        Offset (0xC1), 
                        BIF,    8, 
                        BRCC,   8, 
                        Offset (0xC4), 
                        CPSN,   8, 
                        SCPS,   8, 
                        Offset (0xC7), 
                        MXCG,   8, 
                        MNCG,   8, 
                        BSN,    16, 
                        BDAT,   16, 
                        BMF,    8, 
                        Offset (0xCF), 
                        CTLB,   8, 
                        Offset (0xD1), 
                        BTY,    8, 
                        Offset (0xD3), 
                        EC17,   16, 
                        MFAC,   8, 
                        CFAN,   8, 
                            ,   1, 
                        ABOE,   1, 
                        ABOS,   1, 
                        Offset (0xD8), 
                        OCPS,   8, 
                        OCPR,   8, 
                        OCPE,   8, 
                        TMP1,   8, 
                        TMP2,   8, 
                        NABT,   4, 
                        BCM,    4, 
                        STTI,   8, 
                        STTD,   8, 
                        CBT,    16, 
                        Offset (0xE3), 
                        OST,    4, 
                        Offset (0xE4), 
                        RWTM,   8, 
                        TPTE,   1, 
                        TBBN,   1, 
                            ,   1, 
                        FCDE,   1, 
                            ,   1, 
                        TP,     1, 
                        Offset (0xE6), 
                        SHK,    8, 
                        AUDS,   1, 
                        SPKR,   1, 
                        Offset (0xE8), 
                        PPDT,   8, 
                        Offset (0xEA), 
                            ,   2, 
                        WWP,    1, 
                        WLP,    1, 
                            ,   1, 
                        WWS3,   1, 
                        WLS3,   1, 
                        Offset (0xEC), 
                            ,   4, 
                        PTEN,   1, 
                        ERWB,   1, 
                            ,   1, 
                        Offset (0xED), 
                        Offset (0xEF), 
                        INCH,   2, 
                        IDIS,   2, 
                        INAC,   1, 
                        Offset (0xF3), 
                        COL1,   3, 
                            ,   2, 
                        LDCD,   3, 
                        LEDS,   2, 
                        LEDF,   6, 
                        Offset (0xF6), 
                        AAPI,   8, 
                        ACSE,   8, 
                        ACIX,   8, 
                        ACPR,   16, 
                        Offset (0xFD), 
                        Offset (0xFF)
                    }

                    OperationRegion (SSRM, EmbeddedControl, 0x50, 0x0A)
                    Field (SSRM, ByteAcc, NoLock, Preserve)
                    {
                        FBCM,   8, 
                        FBGI,   8, 
                        FBAE,   8, 
                        FBCB,   8, 
                        FBW1,   8, 
                        FBW2,   8, 
                        Offset (0x07), 
                        FBID,   8, 
                        FUAE,   8, 
                        FRPS,   8
                    }

                    Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, Zero)
                    }

                    Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, 0x02)
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, One)
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, 0x03)
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, 0x04)
                    }

                    Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x00020002, 0x05)
                    }

                    Device (HEPD)
                    {
                        Name (_HID, "HPIC0011")  // _HID: Hardware ID
                        Name (HEPP, Zero)
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Local0 = 0x0F
                            If ((HEPP == Zero))
                            {
                                Local0 = HEPP /* \_SB_.PCI0.LPCB.EC0_.HEPD.HEPP */
                            }

                            Return (Local0)
                        }

                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (One)
                        }
                    }

                    Method (HEPN, 1, Serialized)
                    {
                        ^HEPD.HEPP = Arg0
                        Notify (HEPD, One) // Device Check
                    }

                    Method (_Q29, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        HEPN (0x0F)
                    }

                    Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        HEPN (Zero)
                    }

                    Method (HEP4, 2, Serialized)
                    {
                        ^^^^WMIV.GVWE (0x00020002, Arg0)
                        Sleep (Arg1)
                        HEPN (Zero)
                    }

                    Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        HEP4 (0x08, 0x3A98)
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        HEP4 (0x06, 0x03E8)
                    }

                    Scope (\)
                    {
                        OperationRegion (PBST, SystemMemory, 0xB40B9000, 0x00000004)
                        Field (PBST, AnyAcc, Lock, Preserve)
                        {
                            PBSR,   32
                        }

                        Method (_PBS, 4, Serialized)
                        {
                            PBSR = Arg2
                            If ((Arg2 != Zero))
                            {
                                GSWS (0x90F3)
                            }
                        }
                    }

                    Method (^^^_PBS, 4, Serialized)
                    {
                        \_PBS (Arg0, Arg1, Arg2, Arg3)
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                    }

                    OperationRegion (MAIO, SystemMemory, SMHO, 0xFF)
                    Field (MAIO, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x0A), 
                            ,   7, 
                        CLID,   1, 
                        Offset (0x95), 
                        PWM0,   8, 
                        Offset (0x9D), 
                        PWMC,   8
                    }

                    Method (KFCL, 2, NotSerialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            MFAC = Arg1
                            If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                            {
                                CFAN = Arg0
                            }
                        }

                        Release (ECMX)
                    }

                    Method (KSFS, 1, NotSerialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            CFAN = Arg0
                        }

                        Release (ECMX)
                    }

                    Method (KGFS, 0, NotSerialized)
                    {
                        Local0 = 0x14
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = CFAN /* \_SB_.PCI0.LPCB.EC0_.CFAN */
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (SFSD, 1, Serialized)
                    {
                        Local1 = (Arg0 * 0x40)
                        Local0 = (Local1 / 0x64)
                        Local0 = (0x40 - Local0)
                        Local1 = (PWM0 & 0x80)
                        If ((Local0 == 0x40))
                        {
                            Local1 |= One
                        }
                        Else
                        {
                            Local0 <<= One
                            Local1 |= Local0
                        }

                        PWM0 = Local1
                    }

                    Method (GFSD, 0, Serialized)
                    {
                        Local0 = (PWM0 & 0x7F)
                        If ((Local0 & One))
                        {
                            Local1 = Zero
                        }
                        Else
                        {
                            Local0 >>= One
                            Local0 = (0x40 - Local0)
                            Local0 *= 0x64
                            Local1 = ((Local0 + 0x20) / 0x40)
                            Local1++
                        }

                        Return (Local1)
                    }

                    Method (GSHK, 0, Serialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = SHK /* \_SB_.PCI0.LPCB.EC0_.SHK_ */
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (SSHK, 1, Serialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Debug = Arg0
                            SHK = Arg0
                        }

                        Release (ECMX)
                    }

                    Method (SAST, 1, Serialized)
                    {
                        Local0 = Zero
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            AUDS = Arg0
                            Local0 = One
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (HSPW, 2, Serialized)
                    {
                        If ((Arg0 && Arg1)) {}
                    }

                    Method (UHSW, 0, Serialized)
                    {
                    }

                    Method (CHSW, 1, Serialized)
                    {
                        If (Arg0) {}
                        Local1 = Zero
                        Return (Local1)
                    }

                    Method (HWLP, 1, NotSerialized)
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            WLP = (Arg0 ^ Zero)
                        }

                        Release (ECMX)
                    }

                    Method (HWWP, 1, Serialized)
                    {
                        If (Arg0) {}
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG) {}
                        Release (ECMX)
                    }

                    Method (ECAB, 4, Serialized)
                    {
                        Local0 = 0xECAB
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = 0xFF00
                            ABDI = Arg0
                            ABAD = Arg1
                            ABIX = Arg2
                            If (((Arg1 & One) == Zero))
                            {
                                ABDA = Arg3
                            }

                            ABST = 0xFF
                            Sleep (0x5A)
                            Local0 = 0x80
                            Local1 = 0x0B
                            While (((Local0 & 0x80) && (Local1 > Zero)))
                            {
                                Sleep (0x0A)
                                Local0 = ABST /* \_SB_.PCI0.LPCB.EC0_.ABST */
                                Local1--
                            }

                            Local0 <<= 0x08
                            If (((Local0 == Zero) && (Arg1 & One)))
                            {
                                Local1 = (ABDA & 0xFF)
                                Local0 |= Local1
                            }
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Name (NGBF, 0xFF)
                    Name (NGBT, 0xFF)
                    Name (NBGX, 0xFF)
                    Name (GACP, 0x07)
                    Name (ACST, One)
                    Name (SMAR, Zero)
                    Name (NBAP, Zero)
                    Name (NNBO, One)
                    Name (NDCB, Zero)
                    Name (NLB1, 0x0A)
                    Name (NLB2, 0x05)
                    Name (NLO2, 0x04)
                    Mutex (BTMX, 0x00)
                    Method (UPAD, 0, Serialized)
                    {
                        Acquire (BTMX, 0xFFFF)
                        If ((GACP & One))
                        {
                            GACP &= 0x06
                            Release (BTMX)
                            Local0 = One
                            Local1 = Zero
                            Acquire (ECMX, 0xFFFF)
                            If (ECRG)
                            {
                                Local0 = ADP /* \_SB_.PCI0.LPCB.EC0_.ADP_ */
                                ACSE = 0xFF
                                Local2 = ACIX /* \_SB_.PCI0.LPCB.EC0_.ACIX */
                                If ((Local2 & 0x08))
                                {
                                    Local1 = One
                                }
                                ElseIf ((Local2 & 0x10))
                                {
                                    Local1 = 0x04
                                }
                                ElseIf ((Local2 & 0x40))
                                {
                                    Local1 = 0x02
                                }
                                ElseIf ((Local2 & 0x80))
                                {
                                    Local1 = 0x03
                                }
                            }

                            Release (ECMX)
                            ACST = Local0
                            SMAR = Local1
                        }
                        Else
                        {
                            Release (BTMX)
                        }
                    }

                    Method (GACS, 0, Serialized)
                    {
                        UPAD ()
                        Return (ACST) /* \_SB_.PCI0.LPCB.EC0_.ACST */
                    }

                    Method (GPID, 0, Serialized)
                    {
                        UPAD ()
                        Return (SMAR) /* \_SB_.PCI0.LPCB.EC0_.SMAR */
                    }

                    Method (GBAP, 0, Serialized)
                    {
                        Acquire (BTMX, 0xFFFF)
                        If ((GACP & 0x02))
                        {
                            GACP &= 0x05
                            Release (BTMX)
                            Acquire (ECMX, 0xFFFF)
                            If (ECRG)
                            {
                                NBAP = BATP /* \_SB_.PCI0.LPCB.EC0_.BATP */
                            }

                            Release (ECMX)
                        }
                        Else
                        {
                            Release (BTMX)
                        }

                        Return (NBAP) /* \_SB_.PCI0.LPCB.EC0_.NBAP */
                    }

                    Method (PWUP, 2, Serialized)
                    {
                        Local0 = Zero
                        Acquire (BTMX, 0xFFFF)
                        Local1 = (Arg0 | GACP) /* \_SB_.PCI0.LPCB.EC0_.GACP */
                        GACP = (Local1 & 0x07)
                        If ((GACP & 0x02))
                        {
                            NGBF |= Arg1
                            NBGX |= Arg1
                        }

                        If ((GACP & 0x04))
                        {
                            If ((NGBT != 0xFF))
                            {
                                Local0 = One
                            }

                            NGBT |= Arg1
                        }

                        Release (BTMX)
                        Return (Local0)
                    }

                    Method (BTDR, 1, Serialized)
                    {
                        If ((Arg0 == One))
                        {
                            NNBO = One
                        }
                        ElseIf ((Arg0 == Zero))
                        {
                            NNBO = Zero
                        }

                        Return (NNBO) /* \_SB_.PCI0.LPCB.EC0_.NNBO */
                    }

                    Method (BSTA, 1, Serialized)
                    {
                        BTDR (One)
                        Local0 = GBAP ()
                        Local1 = 0x0F
                        If ((Local0 & Arg0))
                        {
                            Local1 = 0x1F
                        }

                        Return (Local1)
                    }

                    Method (GBSS, 2, Serialized)
                    {
                        ToBCD (Arg0, Local0)
                        Local3 = ISTR (Local0, 0x05)
                        Concatenate (Local3, " ", Local4)
                        Local0 = (Arg1 >> 0x09)
                        Local1 = (Local0 + 0x07BC)
                        ToBCD (Local1, Local0)
                        Local2 = ISTR (Local0, 0x04)
                        Concatenate (Local4, Local2, Local3)
                        Concatenate (Local3, "/", Local4)
                        Local0 = (Arg1 >> 0x05)
                        Local1 = (Local0 & 0x0F)
                        ToBCD (Local1, Local0)
                        Local2 = ISTR (Local0, 0x02)
                        Concatenate (Local4, Local2, Local3)
                        Concatenate (Local3, "/", Local4)
                        Local1 = (Arg1 & 0x1F)
                        ToBCD (Local1, Local0)
                        Local2 = ISTR (Local0, 0x02)
                        Concatenate (Local4, Local2, Local3)
                        Return (Local3)
                    }

                    Method (GBMF, 0, Serialized)
                    {
                        Local0 = Buffer (0x12) {}
                        Local3 = Zero
                        Local1 = BMF /* \_SB_.PCI0.LPCB.EC0_.BMF_ */
                        While (((Local3 < 0x10) && (Local1 != Zero)))
                        {
                            Local0 [Local3] = Local1
                            Local3++
                            Local1 = BMF /* \_SB_.PCI0.LPCB.EC0_.BMF_ */
                        }

                        Return (Local0)
                    }

                    Method (GCTL, 1, Serialized)
                    {
                        If (Arg0) {}
                        Name (CTBF, Buffer (0x10) {})
                        Local3 = Zero
                        Local2 = Zero
                        While ((Local3 != 0x10))
                        {
                            CTBF [Local2] = CTLB /* \_SB_.PCI0.LPCB.EC0_.CTLB */
                            Local2++
                            Local3++
                        }

                        Return (CTBF) /* \_SB_.PCI0.LPCB.EC0_.GCTL.CTBF */
                    }

                    Method (GDNM, 1, Serialized)
                    {
                        If (Arg0) {}
                        Name (DNBF, Buffer (0x07) {})
                        Local3 = Zero
                        Local2 = Zero
                        While ((Local3 != 0x07))
                        {
                            DNBF [Local2] = BDN /* \_SB_.PCI0.LPCB.EC0_.BDN_ */
                            Local2++
                            Local3++
                        }

                        Return (DNBF) /* \_SB_.PCI0.LPCB.EC0_.GDNM.DNBF */
                    }

                    Method (GDCH, 1, Serialized)
                    {
                        If (Arg0) {}
                        Name (DCBF, Buffer (0x04) {})
                        Local3 = Zero
                        Local2 = Zero
                        While ((Local3 != 0x04))
                        {
                            DCBF [Local2] = BTY /* \_SB_.PCI0.LPCB.EC0_.BTY_ */
                            Local2++
                            Local3++
                        }

                        Return (DCBF) /* \_SB_.PCI0.LPCB.EC0_.GDCH.DCBF */
                    }

                    Method (BTIF, 1, Serialized)
                    {
                        Local7 = (One << Arg0)
                        BTDR (One)
                        If ((BSTA (Local7) == 0x0F))
                        {
                            Return (0xFF)
                        }

                        Acquire (BTMX, 0xFFFF)
                        Local0 = NGBF /* \_SB_.PCI0.LPCB.EC0_.NGBF */
                        Release (BTMX)
                        If (((Local0 & Local7) == Zero))
                        {
                            Return (Zero)
                        }

                        NBST [Arg0] = NDBS /* \_SB_.NDBS */
                        Acquire (BTMX, 0xFFFF)
                        NGBT |= Local7
                        Release (BTMX)
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            BSEL = Arg0
                            DerefOf (NBTI [Arg0]) [One] = BDC /* \_SB_.PCI0.LPCB.EC0_.BDC_ */
                            DerefOf (NBTI [Arg0]) [0x02] = BFC /* \_SB_.PCI0.LPCB.EC0_.BFC_ */
                            DerefOf (NBTI [Arg0]) [0x04] = BDV /* \_SB_.PCI0.LPCB.EC0_.BDV_ */
                            Local0 = (BFC * NLB1) /* \_SB_.PCI0.LPCB.EC0_.NLB1 */
                            Local4 = (Local0 / 0x64)
                            DerefOf (NBTI [Arg0]) [0x05] = Local4
                            Local0 = (BFC * NLO2) /* \_SB_.PCI0.LPCB.EC0_.NLO2 */
                            Local4 = (Local0 / 0x64)
                            DerefOf (NBTI [Arg0]) [0x06] = Local4
                            Local0 = BSN /* \_SB_.PCI0.LPCB.EC0_.BSN_ */
                            Local1 = BDAT /* \_SB_.PCI0.LPCB.EC0_.BDAT */
                        }

                        Release (ECMX)
                        Local2 = GBSS (Local0, Local1)
                        DerefOf (NBTI [Arg0]) [0x0A] = Local2
                        Acquire (BTMX, 0xFFFF)
                        NGBF &= ~Local7
                        Release (BTMX)
                        Return (Zero)
                    }

                    Method (BTIX, 1, Serialized)
                    {
                        Local7 = (One << Arg0)
                        BTDR (One)
                        If ((BSTA (Local7) == 0x0F))
                        {
                            Return (0xFF)
                        }

                        Acquire (BTMX, 0xFFFF)
                        Local0 = NBGX /* \_SB_.PCI0.LPCB.EC0_.NBGX */
                        Release (BTMX)
                        If (((Local0 & Local7) == Zero))
                        {
                            Return (Zero)
                        }

                        NBST [Arg0] = NDBS /* \_SB_.NDBS */
                        Acquire (BTMX, 0xFFFF)
                        NGBT |= Local7
                        Release (BTMX)
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            BSEL = Arg0
                            DerefOf (NBTE [Arg0]) [0x02] = BDC /* \_SB_.PCI0.LPCB.EC0_.BDC_ */
                            If ((MXCG == 0x50))
                            {
                                Local0 = (BFC * 0x04)
                                Local1 = (Local0 / 0x05)
                                DerefOf (NBTE [Arg0]) [0x03] = Local1
                            }
                            Else
                            {
                                DerefOf (NBTE [Arg0]) [0x03] = BFC /* \_SB_.PCI0.LPCB.EC0_.BFC_ */
                            }

                            DerefOf (NBTE [Arg0]) [0x05] = BDV /* \_SB_.PCI0.LPCB.EC0_.BDV_ */
                            Local0 = (BFC * NLB1) /* \_SB_.PCI0.LPCB.EC0_.NLB1 */
                            Local4 = (Local0 / 0x64)
                            DerefOf (NBTE [Arg0]) [0x06] = Local4
                            Local0 = (BFC * NLO2) /* \_SB_.PCI0.LPCB.EC0_.NLO2 */
                            Local4 = (Local0 / 0x64)
                            DerefOf (NBTE [Arg0]) [0x07] = Local4
                            DerefOf (NBTE [Arg0]) [0x08] = BCC /* \_SB_.PCI0.LPCB.EC0_.BCC_ */
                            Local0 = BSN /* \_SB_.PCI0.LPCB.EC0_.BSN_ */
                            Local1 = BDAT /* \_SB_.PCI0.LPCB.EC0_.BDAT */
                        }

                        Release (ECMX)
                        Local2 = GBSS (Local0, Local1)
                        DerefOf (NBTE [Arg0]) [0x11] = Local2
                        Acquire (BTMX, 0xFFFF)
                        NBGX &= ~Local7
                        Release (BTMX)
                        Return (Zero)
                    }

                    Method (BTST, 2, Serialized)
                    {
                        Local7 = (One << Arg0)
                        BTDR (One)
                        If ((BSTA (Local7) == 0x0F))
                        {
                            NBST [Arg0] = Package (0x04)
                                {
                                    Zero, 
                                    0xFFFFFFFF, 
                                    0xFFFFFFFF, 
                                    0xFFFFFFFF
                                }
                            Return (0xFF)
                        }

                        Acquire (BTMX, 0xFFFF)
                        If (Arg1)
                        {
                            NGBT = 0xFF
                        }

                        Local0 = NGBT /* \_SB_.PCI0.LPCB.EC0_.NGBT */
                        Release (BTMX)
                        If (((Local0 & Local7) == Zero))
                        {
                            Return (Zero)
                        }

                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            BSEL = Arg0
                            If ((BCLE == One))
                            {
                                Local0 = (BST | 0x08)
                            }
                            Else
                            {
                                Local0 = BST /* \_SB_.PCI0.LPCB.EC0_.BST_ */
                            }

                            Local3 = BPR /* \_SB_.PCI0.LPCB.EC0_.BPR_ */
                            DerefOf (NBST [Arg0]) [0x02] = BRC /* \_SB_.PCI0.LPCB.EC0_.BRC_ */
                            DerefOf (NBST [Arg0]) [0x03] = BPV /* \_SB_.PCI0.LPCB.EC0_.BPV_ */
                        }

                        Release (ECMX)
                        If ((GACS () == One))
                        {
                            Local0 &= 0xFFFFFFFFFFFFFFFE
                        }
                        Else
                        {
                            Local0 &= 0xFFFFFFFFFFFFFFFD
                        }

                        If ((Local0 & One))
                        {
                            Acquire (BTMX, 0xFFFF)
                            NDCB = Local7
                            Release (BTMX)
                        }

                        DerefOf (NBST [Arg0]) [Zero] = Local0
                        If ((Local0 & One))
                        {
                            If (((Local3 < 0x0190) || (Local3 > 0x1964)))
                            {
                                Local5 = DerefOf (DerefOf (NBST [Arg0]) [One])
                                If (((Local5 < 0x0190) || (Local5 > 0x1964)))
                                {
                                    Local3 = 0x0D7A
                                }
                                Else
                                {
                                    Local3 = Local5
                                }
                            }

                            Local3 = 0xFFFFFFFF
                        }
                        ElseIf (((Local0 & 0x02) == Zero))
                        {
                            Local3 = Zero
                        }

                        DerefOf (NBST [Arg0]) [One] = Local3
                        Acquire (BTMX, 0xFFFF)
                        NGBT &= ~Local7
                        Release (BTMX)
                        Return (Zero)
                    }

                    Method (ITLB, 0, NotSerialized)
                    {
                        Local0 = (BFC * NLB1) /* \_SB_.PCI0.LPCB.EC0_.NLB1 */
                        Local4 = (Local0 / 0x64)
                        Divide ((Local4 + 0x09), 0x0A, Local0, Local1)
                        Local0 = (BFC * NLB2) /* \_SB_.PCI0.LPCB.EC0_.NLB2 */
                        Local4 = (Local0 / 0x64)
                        Divide ((Local4 + 0x09), 0x0A, Local0, Local2)
                        If (ECRG)
                        {
                            LB1 = Local1
                            LB2 = Local2
                        }
                    }

                    Method (GBTI, 1, NotSerialized)
                    {
                        Debug = "Enter getbattinfo"
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            If ((BATP & (One << Arg0)))
                            {
                                BSEL = Arg0
                                Local0 = Package (0x02)
                                    {
                                        Zero, 
                                        Buffer (0x6C) {}
                                    }
                                DerefOf (Local0 [One]) [Zero] = BDC /* \_SB_.PCI0.LPCB.EC0_.BDC_ */
                                DerefOf (Local0 [One]) [One] = (BDC >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x02] = BFC /* \_SB_.PCI0.LPCB.EC0_.BFC_ */
                                DerefOf (Local0 [One]) [0x03] = (BFC >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x04] = BRC /* \_SB_.PCI0.LPCB.EC0_.BRC_ */
                                DerefOf (Local0 [One]) [0x05] = (BRC >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x06] = BME /* \_SB_.PCI0.LPCB.EC0_.BME_ */
                                DerefOf (Local0 [One]) [0x07] = (BME >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x08] = BCC /* \_SB_.PCI0.LPCB.EC0_.BCC_ */
                                DerefOf (Local0 [One]) [0x09] = (BCC >> 0x08
                                    )
                                Local1 = CBT /* \_SB_.PCI0.LPCB.EC0_.CBT_ */
                                Local1 -= 0x0AAC
                                Divide (Local1, 0x0A, Local2, Local3)
                                DerefOf (Local0 [One]) [0x0A] = Local3
                                DerefOf (Local0 [One]) [0x0B] = (Local3 >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x0C] = BPV /* \_SB_.PCI0.LPCB.EC0_.BPV_ */
                                DerefOf (Local0 [One]) [0x0D] = (BPV >> 0x08
                                    )
                                Local1 = BPR /* \_SB_.PCI0.LPCB.EC0_.BPR_ */
                                If (Local1)
                                {
                                    If ((BSTS & 0x40))
                                    {
                                        Local1 = (~Local1 + One)
                                        Local1 &= 0xFFFF
                                    }
                                }

                                DerefOf (Local0 [One]) [0x0E] = Local1
                                DerefOf (Local0 [One]) [0x0F] = (Local1 >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x10] = BDV /* \_SB_.PCI0.LPCB.EC0_.BDV_ */
                                DerefOf (Local0 [One]) [0x11] = (BDV >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x12] = BSTS /* \_SB_.PCI0.LPCB.EC0_.BSTS */
                                DerefOf (Local0 [One]) [0x13] = (BSTS >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x14] = BCV1 /* \_SB_.PCI0.LPCB.EC0_.BCV1 */
                                DerefOf (Local0 [One]) [0x15] = (BCV1 >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x16] = BCV2 /* \_SB_.PCI0.LPCB.EC0_.BCV2 */
                                DerefOf (Local0 [One]) [0x17] = (BCV2 >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x18] = BCV3 /* \_SB_.PCI0.LPCB.EC0_.BCV3 */
                                DerefOf (Local0 [One]) [0x19] = (BCV3 >> 0x08
                                    )
                                DerefOf (Local0 [One]) [0x1A] = BCV4 /* \_SB_.PCI0.LPCB.EC0_.BCV4 */
                                DerefOf (Local0 [One]) [0x1B] = (BCV4 >> 0x08
                                    )
                                CreateField (DerefOf (Local0 [One]), 0xE0, 0x80, BTSN)
                                BTSN = GBSS (BSN, BDAT)
                                Local1 = GBMF ()
                                Local2 = SizeOf (Local1)
                                CreateField (DerefOf (Local0 [One]), 0x0160, (Local2 * 0x08), BMAN)
                                BMAN = Local1
                                Local2 += 0x2C
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x80, CLBL)
                                CLBL = GCTL (Zero)
                                Local2 += 0x11
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x38, DNAM)
                                DNAM = GDNM (Zero)
                                Local2 += 0x07
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x20, DCHE)
                                DCHE = GDCH (Zero)
                                Local2 += 0x04
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BMAC)
                                BMAC = Zero
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BMAD)
                                BMAD = BDAT /* \_SB_.PCI0.LPCB.EC0_.BDAT */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BCCU)
                                BCCU = BRCC /* \_SB_.PCI0.LPCB.EC0_.BRCC */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BCVO)
                                BCVO = BRCV /* \_SB_.PCI0.LPCB.EC0_.BRCV */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BAVC)
                                Local1 = BCR /* \_SB_.PCI0.LPCB.EC0_.BCR_ */
                                If (Local1)
                                {
                                    If ((BSTS & 0x40))
                                    {
                                        Local1 = (~Local1 + One)
                                        Local1 &= 0xFFFF
                                    }
                                }

                                BAVC = Local1
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, RTTE)
                                RTTE = BRTE /* \_SB_.PCI0.LPCB.EC0_.BRTE */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, ATTE)
                                ATTE = BATE /* \_SB_.PCI0.LPCB.EC0_.BATE */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, ATTF)
                                ATTF = BATF /* \_SB_.PCI0.LPCB.EC0_.BATF */
                                Local2 += 0x02
                                CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x08, NOBS)
                                NOBS = BATN /* \_SB_.PCI0.LPCB.EC0_.BATN */
                                Local3 = ((ABOS << 0x02) + (ABOE << One))
                                Local4 = (Local3 + One)
                                DerefOf (Local0 [One]) [0x6B] = Local4
                            }
                            Else
                            {
                                Local0 = Package (0x01)
                                    {
                                        0x34
                                    }
                            }
                        }
                        Else
                        {
                            Local0 = Package (0x01)
                                {
                                    0x0D
                                }
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (GBTC, 0, NotSerialized)
                    {
                        Debug = "Enter GetBatteryControl"
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = Package (0x02)
                                {
                                    Zero, 
                                    Buffer (0x04) {}
                                }
                            If ((BATP & One))
                            {
                                BSEL = Zero
                                DerefOf (Local0 [One]) [Zero] = Zero
                                If ((((INAC == Zero) && (INCH == Zero)) && (IDIS == Zero)))
                                {
                                    DerefOf (Local0 [One]) [Zero] = Zero
                                }
                                ElseIf (((((INAC == Zero) && (INCH == 0x02)) && (
                                    IDIS == One)) && (MAXC == Zero)))
                                {
                                    DerefOf (Local0 [One]) [Zero] = One
                                }
                                ElseIf (((INAC == One) && (IDIS == 0x02)))
                                {
                                    DerefOf (Local0 [One]) [Zero] = 0x02
                                }
                                ElseIf (((((INAC == Zero) && (INCH == 0x02)) && (
                                    IDIS == One)) && (MAXC == 0xFA)))
                                {
                                    DerefOf (Local0 [One]) [Zero] = 0x03
                                }
                                ElseIf (((INAC == Zero) && (INCH == 0x03)))
                                {
                                    DerefOf (Local0 [One]) [Zero] = 0x04
                                }
                            }
                            Else
                            {
                                DerefOf (Local0 [One]) [Zero] = 0xFF
                            }

                            If ((BATP & 0x02))
                            {
                                BSEL = One
                                DerefOf (Local0 [One]) [One] = Zero
                                If ((((INAC == Zero) && (INCH == Zero)) && (IDIS == Zero)))
                                {
                                    DerefOf (Local0 [One]) [One] = Zero
                                }
                                ElseIf (((((INAC == Zero) && (INCH == One)) && (
                                    IDIS == 0x02)) && (MAXC == Zero)))
                                {
                                    DerefOf (Local0 [One]) [One] = One
                                }
                                ElseIf (((INAC == One) && (IDIS == One)))
                                {
                                    DerefOf (Local0 [One]) [One] = 0x02
                                }
                                ElseIf (((((INAC == Zero) && (INCH == One)) && (
                                    IDIS == 0x02)) && (MAXC == 0xFA)))
                                {
                                    DerefOf (Local0 [One]) [One] = 0x03
                                }
                                ElseIf (((INAC == Zero) && (INCH == 0x03)))
                                {
                                    DerefOf (Local0 [One]) [One] = 0x04
                                }
                            }
                            Else
                            {
                                DerefOf (Local0 [One]) [One] = 0xFF
                            }
                        }
                        Else
                        {
                            Local0 = Package (0x02)
                                {
                                    0x35, 
                                    Zero
                                }
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (SBTC, 3, NotSerialized)
                    {
                        Debug = "Enter SetBatteryControl"
                        Debug = Arg0
                        Debug = Arg1
                        Debug = Arg2
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = Arg2
                            Debug = Local0
                            Local4 = Package (0x01)
                                {
                                    0x06
                                }
                            Local1 = Zero
                            Local2 = Zero
                            Local1 = DerefOf (Local0 [Zero])
                            If ((Local1 == Zero))
                            {
                                Debug = "battery 0"
                                If ((BATP & One))
                                {
                                    Local2 = DerefOf (Local0 [One])
                                    If ((Local2 == Zero))
                                    {
                                        INCH = Zero
                                        IDIS = Zero
                                        INAC = Zero
                                        MAXC = Zero
                                        PSSB = One
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == One))
                                    {
                                        INAC = Zero
                                        INCH = 0x02
                                        IDIS = One
                                        MAXC = Zero
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x02))
                                    {
                                        INAC = One
                                        INCH = One
                                        IDIS = 0x02
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x03))
                                    {
                                        INCH = 0x02
                                        IDIS = One
                                        INAC = Zero
                                        MAXC = 0xFA
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x04))
                                    {
                                        MAXC = 0xFA
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x05))
                                    {
                                        INAC = Zero
                                        INCH = 0x03
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }
                                }
                                Else
                                {
                                    Local4 = Package (0x01)
                                        {
                                            0x34
                                        }
                                }
                            }

                            If ((Local1 == One))
                            {
                                If ((BATP & 0x02))
                                {
                                    Debug = "battery 1"
                                    Local2 = DerefOf (Local0 [One])
                                    If ((Local2 == Zero))
                                    {
                                        INCH = Zero
                                        IDIS = Zero
                                        INAC = Zero
                                        MAXC = Zero
                                        PSSB = One
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == One))
                                    {
                                        INAC = Zero
                                        INCH = One
                                        IDIS = 0x02
                                        MAXC = Zero
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x02))
                                    {
                                        INAC = One
                                        INCH = 0x02
                                        IDIS = One
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x03))
                                    {
                                        INCH = One
                                        IDIS = 0x02
                                        INAC = Zero
                                        MAXC = 0xFA
                                        PSSB = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x04))
                                    {
                                        INCH = Zero
                                        IDIS = Zero
                                        INAC = Zero
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }

                                    If ((Local2 == 0x05))
                                    {
                                        INAC = Zero
                                        INCH = 0x03
                                        Local4 = Package (0x01)
                                            {
                                                Zero
                                            }
                                    }
                                }
                                Else
                                {
                                    Local4 = Package (0x01)
                                        {
                                            0x34
                                        }
                                }
                            }
                        }

                        Release (ECMX)
                        Return (Local4)
                    }

                    Method (GBBI, 0, Serialized)
                    {
                        Name (BSPI, Buffer (0x1C) {})
                        Local3 = Zero
                        Local2 = Zero
                        BSP = Zero
                        Sleep (0x64)
                        While ((Local3 < 0x1C))
                        {
                            BSPI [Local2] = BSP /* \_SB_.PCI0.LPCB.EC0_.BSP_ */
                            Sleep (0x0A)
                            Local2++
                            Local3++
                        }

                        Return (BSPI) /* \_SB_.PCI0.LPCB.EC0_.GBBI.BSPI */
                    }

                    Mutex (OTMT, 0x00)
                    Name (OTLL, Zero)
                    Name (OTSI, One)
                    Name (OTRT, Zero)
                    Name (OTEN, Zero)
                    Name (LRPC, Zero)
                    Name (ACS1, 0xFF)
                    Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (BTMX, 0xFFFF)
                        Local0 = NDCB /* \_SB_.PCI0.LPCB.EC0_.NDCB */
                        Release (BTMX)
                        PWUP (0x04, Local0)
                        SBTN (Local0, 0x80)
                    }

                    Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (OTMT, 0xFFFF)
                        OTLL = GTST ()
                        OTSI = One
                        Release (OTMT)
                        RPPC ()
                        Notify (^^^^PLTF.C000, 0x80) // Status Change
                        Notify (^^^^PLTF.C001, 0x80) // Status Change
                        If (CondRefOf (\_SB.PLTF.C002.PPCV, Local0))
                        {
                            Notify (^^^^PLTF.C002, 0x80) // Status Change
                            Notify (^^^^PLTF.C003, 0x80) // Status Change
                        }

                        If (CondRefOf (\_SB.PLTF.C004.PPCV, Local0))
                        {
                            Notify (^^^^PLTF.C004, 0x80) // Status Change
                            Notify (^^^^PLTF.C005, 0x80) // Status Change
                            Notify (^^^^PLTF.C006, 0x80) // Status Change
                            Notify (^^^^PLTF.C007, 0x80) // Status Change
                        }

                        If (CondRefOf (\_SB.PLTF.C008.PPCV, Local0))
                        {
                            Notify (^^^^PLTF.C008, 0x80) // Status Change
                            Notify (^^^^PLTF.C009, 0x80) // Status Change
                            Notify (^^^^PLTF.C00A, 0x80) // Status Change
                            Notify (^^^^PLTF.C00B, 0x80) // Status Change
                        }

                        If (CondRefOf (\_SB.PLTF.C00C.PPCV, Local0))
                        {
                            Notify (^^^^PLTF.C00C, 0x80) // Status Change
                            Notify (^^^^PLTF.C00D, 0x80) // Status Change
                            Notify (^^^^PLTF.C00E, 0x80) // Status Change
                            Notify (^^^^PLTF.C00F, 0x80) // Status Change
                        }
                    }

                    Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Local0 = THEM /* \_SB_.PCI0.LPCB.EC0_.THEM */
                        \_TZ.ECTE (Local0)
                    }

                    Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        PWUP (0x05, 0x03)
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC12))
                        {
                            EC14 = EC12 ()
                        }

                        If (BTDR (0x02))
                        {
                            Notify (AC, 0x80) // Status Change
                            Notify (^^^^PLTF.C000, 0x80) // Status Change
                        }

                        \_GPE.G001 (Zero)
                    }

                    Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = UCPN /* \_SB_.PCI0.LPCB.EC0_.UCPN */
                            ^^^^WMIV.GVWE (0x00020001, Local0)
                        }

                        Release (ECMX)
                    }

                    Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        PWUP (0x06, One)
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC13))
                        {
                            EC15 = EC13 ()
                        }

                        Local0 = GBAP ()
                        If ((Local0 != 0x02))
                        {
                            PWUP (0x04, 0x02)
                            If (BTDR (0x02))
                            {
                                Notify (BAT1, 0x80) // Status Change
                            }
                        }

                        If (BTDR (0x02))
                        {
                            Notify (BAT0, 0x81) // Information Change
                        }
                    }

                    Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Local4 = \_GPE.G014 ()
                        Notify (LID, 0x80) // Status Change
                    }

                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        PWUP (0x04, One)
                        If (BTDR (0x02))
                        {
                            Notify (BAT0, 0x80) // Status Change
                        }
                    }

                    Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        PWUP (0x06, 0x02)
                        Local0 = GBAP ()
                        If ((Local0 != One))
                        {
                            PWUP (0x04, One)
                            If (BTDR (0x02))
                            {
                                Notify (BAT0, 0x80) // Status Change
                            }
                        }

                        If (BTDR (0x02))
                        {
                            Notify (BAT1, 0x81) // Information Change
                        }
                    }

                    Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        PWUP (0x04, 0x02)
                        If (BTDR (0x02))
                        {
                            Notify (BAT1, 0x80) // Status Change
                        }
                    }

                    Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            PPCM = 0x03
                            PPDS = One
                            Local0 = PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                            Local0 <<= 0x08
                            PPCM = One
                            PPDS = One
                            Local1 = PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                            If ((Local1 == 0xFC))
                            {
                                Local1 = 0xFE
                            }

                            Local2 = (Local0 | Local1)
                            ^^^^WMIV.GVWE (0x14, Local2)
                        }

                        Release (ECMX)
                    }

                    Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^WMIV.GVWE (0x14, 0xFD)
                    }

                    Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            PPCM = 0x03
                            PPDS = One
                            Local0 = PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                            Local0 <<= 0x08
                            ^^^^WMIV.GVWE (0x14, Local0)
                        }

                        Release (ECMX)
                    }

                    Name (LICN, Zero)
                    Method (SBTN, 2, Serialized)
                    {
                        If ((Arg0 & One))
                        {
                            Notify (BAT0, Arg1)
                        }

                        If ((Arg0 & 0x02))
                        {
                            Notify (BAT1, Arg1)
                        }
                    }

                    Method (PRIT, 0, NotSerialized)
                    {
                        ETSI (0x03, 0x14)
                        If ((^^^BUSA.HDEF.ASTI == Zero))
                        {
                            SAST (^^^BUSA.HDEF.ASTA)
                        }

                        If ((GBAP () & One))
                        {
                            BT0P = 0x1F
                        }

                        ECPB ()
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC12))
                        {
                            EC14 = EC12 ()
                        }

                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC13))
                        {
                            EC15 = EC13 ()
                        }
                    }

                    Method (GTST, 0, Serialized)
                    {
                        Local0 = 0x02
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local0 = OCPS /* \_SB_.PCI0.LPCB.EC0_.OCPS */
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (ETSI, 2, Serialized)
                    {
                        If (((Arg1 != OTRT) || (Arg0 != OTEN)))
                        {
                            Acquire (ECMX, 0xFFFF)
                            If (ECRG)
                            {
                                If ((Arg1 != OTRT))
                                {
                                    OCPR = Arg1
                                    OTRT = Arg1
                                }

                                OCPE = Arg0
                                OTEN = Arg0
                            }

                            Release (ECMX)
                        }
                    }

                    Method (RPPC, 0, Serialized)
                    {
                        Local1 = Zero
                        If (CondRefOf (\_SB.PLTF.C000._PSS, Local2))
                        {
                            Local0 = ^^^^PLTF.C000._PSS /* External reference */
                            Local1 = SizeOf (Local0)
                        }

                        Local3 = Zero
                        If ((Local1 > Zero))
                        {
                            Local1 -= One
                        }
                        Else
                        {
                            Local3 = 0x03
                        }

                        Acquire (OTMT, 0xFFFF)
                        If (OTSI)
                        {
                            Local0 = OTLL /* \_SB_.PCI0.LPCB.EC0_.OTLL */
                            OTSI = Zero
                            If ((Local0 == Zero))
                            {
                                If ((LRPC < Local1))
                                {
                                    LRPC += One
                                }
                            }
                            ElseIf ((Local0 == 0x02))
                            {
                                If ((LRPC > Zero))
                                {
                                    LRPC -= One
                                }
                            }
                        }

                        If ((LRPC < Local1))
                        {
                            Local3 |= One
                        }

                        If ((LRPC > Zero))
                        {
                            Local3 |= 0x02
                        }

                        ETSI (Local3, 0x14)
                        Release (OTMT)
                        If (CondRefOf (\_SB.PLTF.C000.PPCV, Local5))
                        {
                            ^^^^PLTF.C000.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            ^^^^PLTF.C001.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            If (CondRefOf (\_SB.PLTF.C002.PPCV, Local6))
                            {
                                ^^^^PLTF.C002.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C003.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            }

                            If (CondRefOf (\_SB.PLTF.C004.PPCV, Local6))
                            {
                                ^^^^PLTF.C004.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C005.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C006.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C007.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            }

                            If (CondRefOf (\_SB.PLTF.C008.PPCV, Local0))
                            {
                                ^^^^PLTF.C008.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C009.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C00A.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C00B.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            }

                            If (CondRefOf (\_SB.PLTF.C00C.PPCV, Local0))
                            {
                                ^^^^PLTF.C00C.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C00D.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C00E.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                                ^^^^PLTF.C00F.PPCV = LRPC /* \_SB_.PCI0.LPCB.EC0_.LRPC */
                            }
                        }
                    }

                    Method (ECPB, 0, Serialized)
                    {
                        Name (ALDB, Buffer (0x03) {})
                        CreateWordField (ALDB, Zero, SZZE)
                        CreateByteField (ALDB, 0x02, ACDC)
                        SZZE = 0x03
                        Local0 = GACS ()
                        If ((Local0 != ACS1))
                        {
                            If ((Local0 == One))
                            {
                                ACS1 = One
                                ACDC = Zero
                            }
                            Else
                            {
                                ACS1 = Zero
                                ACDC = One
                            }

                            ALIB (One, ALDB)
                        }
                    }

                    Method (RPM3, 1, Serialized)
                    {
                        If (SP3C (0x80))
                        {
                            Sleep (0x0A)
                            If (SP3D (Arg0))
                            {
                                Sleep (0x0A)
                                Local0 = RP3D ()
                                Sleep (0x0A)
                            }

                            Return (Local0)
                        }
                        Else
                        {
                            Return (0xFF)
                        }
                    }

                    Method (WPM3, 2, Serialized)
                    {
                        If (SP3C (0x81))
                        {
                            Sleep (0x0A)
                            If (SP3D (Arg0))
                            {
                                Sleep (0x0A)
                                SP3D (Arg1)
                                Sleep (0x0A)
                            }
                        }
                    }

                    Method (SP3C, 1, Serialized)
                    {
                        Local0 = Zero
                        While (One)
                        {
                            Local1 = (PM3C & One)
                            If ((Local1 != Zero))
                            {
                                Local3 = PM3D /* \_SB_.PCI0.LPCB.EC0_.PM3D */
                                Local0++
                                Local1 = (PM3C & One)
                                If ((Local0 >= 0x00020000))
                                {
                                    Local2 = Zero
                                    Break
                                }
                            }
                            Else
                            {
                                PM3C = Arg0
                                Local2 = One
                                Break
                            }
                        }

                        Return (Local2)
                    }

                    Method (SP3D, 1, Serialized)
                    {
                        Local0 = Zero
                        While (One)
                        {
                            Local1 = (PM3C & 0x02)
                            If ((Local1 != Zero))
                            {
                                Local0++
                                Local1 = (PM3C & 0x02)
                                If ((Local0 >= 0x00020000))
                                {
                                    Local2 = Zero
                                    Break
                                }
                            }
                            Else
                            {
                                PM3D = Arg0
                                Local2 = One
                                Break
                            }
                        }

                        Return (Local2)
                    }

                    Method (RP3D, 0, Serialized)
                    {
                        Local0 = Zero
                        While (One)
                        {
                            Local1 = (PM3C & One)
                            If ((Local1 != One))
                            {
                                Local0++
                                Local1 = (PM3C & One)
                                If ((Local0 >= 0x00020000))
                                {
                                    Local2 = Zero
                                    Break
                                }
                            }
                            Else
                            {
                                Local2 = One
                                Break
                            }
                        }

                        If (Local2)
                        {
                            Local3 = PM3D /* \_SB_.PCI0.LPCB.EC0_.PM3D */
                        }
                        Else
                        {
                            Local3 = 0xFF
                        }

                        Return (Local3)
                    }

                    Method (EC16, 1, Serialized)
                    {
                        Local0 = 0xFFFF
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            If ((Arg0 == Zero))
                            {
                                Local0 = EC17 /* \_SB_.PCI0.LPCB.EC0_.EC17 */
                            }
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (EC18, 0, Serialized)
                    {
                        Local0 = Zero
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            If ((ADP == One))
                            {
                                If ((BT1I == One))
                                {
                                    Local0 = 0x02
                                }
                                Else
                                {
                                    Local0 = One
                                }
                            }
                        }

                        Release (ECMX)
                        Return (Local0)
                    }

                    Method (EC19, 0, Serialized)
                    {
                        Local0 = 0xFFFF
                        Acquire (ECMX, 0xFFFF)
                        If (ECRG)
                        {
                            Local1 = (BRC * 0x64)
                            Local0 = (Local1 / BFC)
                        }

                        Release (ECMX)
                        Return (Local0)
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPCB.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPCB.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPCB.TMR_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPCB.TMR_.BUF1 */
                    }
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x077A,             // Range Minimum
                            0x077A,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        IO (Decode16,
                            0x0840,             // Range Minimum
                            0x0840,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFF00000,         // Address Base
                            0x00100000,         // Address Length
                            _Y05)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPCB.MEM._Y05._LEN, PSIZ)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPCB.MEM._Y05._BAS, PBAS)  // _BAS: Base Address
                        PSIZ = ROMS /* \ROMS */
                        Local0 = (ROMS - One)
                        PBAS = (0xFFFFFFFF - Local0)
                        Return (MSRC) /* \_SB_.PCI0.LPCB.MEM_.MSRC */
                    }
                }

                Device (KBC0)
                {
                    Name (_HID, EisaId ("HPQ8002"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                OperationRegion (LCLM, SystemIO, 0x0C50, 0x03)
                Field (LCLM, ByteAcc, NoLock, Preserve)
                {
                    CLMI,   8, 
                    CLMD,   8, 
                    CLGP,   8
                }

                IndexField (CLMI, CLMD, ByteAcc, NoLock, Preserve)
                {
                    IDRG,   8, 
                    Offset (0x02), 
                    TSTS,   8, 
                    TINT,   8, 
                    Offset (0x12), 
                    I2CC,   8, 
                    GPIO,   8
                }

                Method (RGPM, 0, NotSerialized)
                {
                    Local0 = GPIO /* \_SB_.PCI0.LPCB.GPIO */
                    Local0 &= 0xFFFFFFFFFFFFFF3F
                    GPIO = Local0
                    Local1 = CLGP /* \_SB_.PCI0.LPCB.CLGP */
                    Return (Local1)
                }
            }
        }

        Name (NBTI, Package (0x02)
        {
            Package (0x0D)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Primary", 
                "100000", 
                "LIon", 
                "Hewlett-Packard"
            }, 

            Package (0x0D)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Travel", 
                "100000", 
                "LIon", 
                "Hewlett-Packard"
            }
        })
        Name (NBTE, Package (0x02)
        {
            Package (0x15)
            {
                One, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x00017318, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Primary", 
                "123456789", 
                "LIon", 
                "Hewlett-Packard", 
                One
            }, 

            Package (0x15)
            {
                One, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x00017318, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Primary", 
                "100000", 
                "LIon", 
                "Hewlett-Packard", 
                One
            }
        })
        Name (NBST, Package (0x02)
        {
            Package (0x04)
            {
                Zero, 
                Zero, 
                0x0FA0, 
                0x04B0
            }, 

            Package (0x04)
            {
                Zero, 
                Zero, 
                0x0FA0, 
                0x04B0
            }
        })
        Name (NDBS, Package (0x04)
        {
            Zero, 
            Zero, 
            0x0FA0, 
            0x04B0
        })
        Name (ACST, One)
        Name (SMAR, Zero)
        Name (BT0P, 0x0F)
        Method (BTIF, 1, Serialized)
        {
            Local0 = ^PCI0.LPCB.EC0.BTIF (Arg0)
            If ((Local0 == 0xFF))
            {
                Return (Package (0x0D)
                {
                    Zero, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    "", 
                    "", 
                    "", 
                    Zero
                })
            }
            Else
            {
                Return (DerefOf (NBTI [Arg0]))
            }
        }

        Method (BTIX, 1, Serialized)
        {
            Local0 = ^PCI0.LPCB.EC0.BTIX (Arg0)
            If ((Local0 == 0xFF))
            {
                Return (Package (0x15)
                {
                    One, 
                    One, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    Zero, 
                    Zero, 
                    0x64, 
                    0x00017318, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x64, 
                    0x64, 
                    "", 
                    "", 
                    "", 
                    "", 
                    One
                })
            }
            Else
            {
                Return (DerefOf (NBTE [Arg0]))
            }
        }

        Name (NFBS, One)
        Method (BTST, 1, Serialized)
        {
            Local1 = NFBS /* \_SB_.NFBS */
            If (NFBS)
            {
                NFBS = Zero
            }

            Local0 = ^PCI0.LPCB.EC0.BTST (Arg0, Local1)
            Return (DerefOf (NBST [Arg0]))
        }

        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = ^^PCI0.LPCB.EC0.BSTA (One)
                If ((BT0P ^ Local0))
                {
                    BT0P = Local0
                    Local1 = Local0
                    If ((Local1 != 0x1F))
                    {
                        Local1 = Zero
                    }

                    SSMI (0xEA3A, Zero, Local1, Zero, Zero)
                }

                Return (Local0)
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                Return (BTIX (Zero))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (BTST (Zero))
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                Return (BTIX (One))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (BTST (One))
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
        }

        Device (AC)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Local0 = ^^PCI0.LPCB.EC0.GACS ()
                Local1 = ^^PCI0.LPCB.EC0.GPID ()
                If ((Local0 ^ ACST)) {}
                If (((Local0 && !ACST) || (Local1 && !SMAR)))
                {
                    ^^WMIV.GVWE (0x03, Zero)
                }

                ACST = Local0
                SMAR = Local1
                ^^PCI0.LPCB.EC0.ECPB ()
                Return (Local0)
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = One
                If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC10))
                {
                    Local0 = ^^PCI0.LPCB.EC0.EC10 ()
                }

                Return (Local0)
            }
        }

        Mutex (LDPS, 0x00)
        Mutex (LEXD, 0x00)
        Name (EDDA, Zero)
        OperationRegion (LDPT, SystemIO, 0x80, One)
        Field (LDPT, ByteAcc, NoLock, Preserve)
        {
            LPDG,   8
        }

        OperationRegion (LDBP, SystemIO, 0x024E, 0x02)
        Field (LDBP, ByteAcc, NoLock, Preserve)
        {
            LLPD,   8, 
            LUPD,   8
        }

        Method (ODBB, 2, Serialized)
        {
            Acquire (LDPS, 0xFFFF)
            LLPD = (Arg0 & 0xFF)
            If ((Arg1 >= 0x02))
            {
                LUPD = ((Arg0 >> 0x08) & 0xFF)
            }

            Release (LDPS)
            Acquire (LDPS, 0xFFFF)
            LPDG = (Arg0 & 0xFF)
            Release (LDPS)
            Return (Zero)
        }

        Method (ODBG, 1, NotSerialized)
        {
            ODBB (Arg0, One)
            Return (Zero)
        }

        Method (ODG1, 1, NotSerialized)
        {
            Acquire (LDPS, 0xFFFF)
            LUPD = Arg0
            Release (LDPS)
            Return (Zero)
        }

        Method (ODGW, 1, NotSerialized)
        {
            ODBB (Arg0, 0x02)
            Return (Zero)
        }

        Method (ODGD, 1, NotSerialized)
        {
            ODBB (Arg0, 0x03)
            Return (Zero)
        }

        Method (EODB, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODBG (EDDA)
            Release (LEXD)
        }

        Method (EODW, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODGW (EDDA)
            Release (LEXD)
        }

        Method (EODD, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODGD (EDDA)
            Release (LEXD)
        }

        Device (HTAM)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0xF3000005)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Return (ResourceTemplate ()
                {
                    Memory32Fixed (ReadOnly,
                        0xFED40000,         // Address Base
                        0x00005000,         // Address Length
                        )
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CondRefOf (\_SB.TPM._STA))
                {
                    Local0 = Zero
                }
                Else
                {
                    Local0 = 0x0F
                }

                Return (Local0)
            }
        }

        Device (HST1)
        {
            Name (_HID, EisaId ("PNP0C32"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (HS1S, 0xFF)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((HS1S == 0xFF))
                {
                    Local0 = Zero
                    If ((GTOS () >= 0x06))
                    {
                        If (ISUD ())
                        {
                            Local0 = 0x0F
                        }
                    }

                    HS1S = Local0
                }

                Return (HS1S) /* \_SB_.HST1.HS1S */
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0A, 
                0x05
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                ^^PCI0.LPCB.EC0.HSPW (Arg0, One)
            }

            Method (GHID, 0, Serialized)
            {
                If (_STA ())
                {
                    If (^^PCI0.LPCB.EC0.CHSW (One))
                    {
                        Notify (HST1, 0x02) // Device Wake
                    }
                }

                Return (Buffer (One)
                {
                     0x01                                             // .
                })
            }
        }
    }

    Method (_SB.ISLF, 0, NotSerialized)
    {
        Local0 = LEGF /* \LEGF */
        Return (Local0)
    }

    Method (_SB.DCKD, 0, Serialized)
    {
        Local0 = Zero
        Return (Local0)
    }

    Method (_SB.HST1.ISUD, 0, Serialized)
    {
        Return (Zero)
    }

    Method (HPTS, 1, NotSerialized)
    {
        SLPT = Arg0
        If ((Arg0 == 0x04))
        {
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PCI0.LPCB.EC0.ACPI = Zero
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }
        }

        If ((Arg0 == 0x05))
        {
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PCI0.LPCB.EC0.ACPI = Zero
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }
        }

        \_SB.PCI0.G0B0 (Arg0)
        \_SB.ODGW ((0x5400 | Arg0))
    }

    Method (HWAK, 1, NotSerialized)
    {
        SLPT = Zero
        \_SB.PCI0.G0B1 (Arg0)
        \_SB.ODGW ((0x5600 | Arg0))
    }

    Name (PICM, Zero)
    Name (GPIC, Zero)
    OperationRegion (HPET, SystemMemory, 0xFED00000, 0x0200)
    Field (HPET, AnyAcc, NoLock, Preserve)
    {
        Offset (0x10), 
        TMRE,   1, 
        LGEN,   1
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
        GPIC = Arg0
        If (PICM)
        {
            \_SB.DSPI ()
            If (NAPC)
            {
                \_SB.PCI0.NAPE ()
            }
        }
    }

    Name (XX11, Buffer (0x07) {})
    Method (RSTM, 0, NotSerialized)
    {
        CreateWordField (XX11, Zero, SSZE)
        CreateByteField (XX11, 0x02, SMUF)
        CreateDWordField (XX11, 0x03, SMUD)
        SSZE = 0x07
        SMUF = One
        SMUD = 0x00030D40
        \_SB.ALIB (0x0C, XX11)
        SMUF = 0x02
        SMUD = 0x55
        \_SB.ALIB (0x0C, XX11)
    }

    Name (RTMA, Buffer (0x20)
    {
        /* 0000 */  0x00, 0x5F, 0x52, 0x54, 0x58, 0x4D, 0x41, 0x43,  // ._RTXMAC
        /* 0008 */  0x5F, 0x23, 0xB0, 0x22, 0x7A, 0x73, 0x53, 0x06,  // _#."zsS.
        /* 0010 */  0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // #.......
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
    })
    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
        \_SB.PCI0.LPCB.EC0.CRZN = One
        \_SB.PCI0.LPCB.EC0.PHTP = 0x63
        Release (\_SB.PCI0.LPCB.EC0.ECMX)
        HWAK (Arg0)
        SWAK (Arg0)
        \_SB.AWAK (Arg0)
        \_SB.PCI0.LPCB.EC0.ACS1 = 0xFF
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            TMRE = One
            LGEN = One
            If ((GPIC != Zero))
            {
                \_SB.DSPI ()
                If (NAPC)
                {
                    \_SB.PCI0.NAPE ()
                }
            }
        }

        If ((Arg0 == 0x03))
        {
            Sleep (0x01F4)
            H24E = 0xE3
            IO80 = 0xE3
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0xE3
            Notify (\_SB.PWRB, 0x02) // Device Wake
            \_SB.PCI0.LPCB.EC0.PWUP (0x07, 0xFF)
            \_SB.SSMI (0xEA91, Arg0, Zero, Zero, Zero)
        }

        If ((Arg0 == 0x04))
        {
            H24E = 0xE4
            IO80 = 0xE4
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0xE4
            If ((\_SB.PCI0.LPCB.EC0.OST == Zero))
            {
                \_SB.PCI0.LPCB.EC0.OST = GTOS ()
            }

            \_SB.PCI0._INI ()
            Notify (\_SB.PWRB, 0x02) // Device Wake
            \_SB.PCI0.LPCB.EC0.PWUP (0x07, 0xFF)
        }

        If ((Arg0 == 0x05))
        {
            H24E = 0xE5
            IO80 = 0xE5
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0xE5
        }

        \_SB.IM71 = One
        \_SB.IM72 = One
        Return (Zero)
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        HPTS (Arg0)
        SPTS (Arg0)
        If ((Arg0 == 0x03))
        {
            H24E = 0x53
            IO80 = 0x53
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0x53
            SLPS = One
            If ((GV42 == Zero))
            {
                GV42 = One
            }
        }

        If ((Arg0 == 0x04))
        {
            H24E = 0x54
            IO80 = 0x54
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0x54
            SLPS = One
            RSTU = One
            If ((GV42 == Zero))
            {
                GV42 = One
            }
        }

        If ((Arg0 == 0x05))
        {
            H24E = 0x55
            IO80 = 0x55
            \_SB.ECMI = 0xF1
            \_SB.ECMD = 0x55
            If ((GV42 == Zero))
            {
                GV42 = One
            }
        }

        \_SB.SSMI (0xEA92, Arg0, Zero, Zero, Zero)
        \_SB.APTS (Arg0)
        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GP12.PTS))
        {
            \_SB.PCI0.GP12.PTS (Arg0)
        }
    }

    Method (MSEE, 1, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                GV42 = One
                \_SB.PCI0.LPCB.EC0.SLPT = Zero
            }
            Case (One)
            {
                GV42 = Zero
                \_SB.PCI0.LPCB.EC0.SLPT = 0x06
            }
            Default
            {
                Return (Zero)
            }

        }
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((GPIC == Zero)) {}
            Else
            {
                DSPI ()
                NAPE ()
            }

            \_TZ.BOTT ()
            \_TZ.RETD ()
        }
    }

    Method (_SB.THID, 0, Serialized)
    {
        Return ("ELAN2513")
    }

    Scope (_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }

    Scope (_TZ)
    {
        Name (TRPC, Package (0x06)
        {
            Package (0x04)
            {
                0x63, 
                0x63, 
                0x71, 
                0x80
            }, 

            Package (0x04)
            {
                0x5F, 
                0x66, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x32, 
                0x37, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Name (TRIP, Package (0x06)
        {
            Package (0x04) {}, 
            Package (0x04) {}, 
            Package (0x04) {}, 
            Package (0x04) {}, 
            Package (0x04) {}, 
            Package (0x04) {}
        })
        Method (TRUP, 0, Serialized)
        {
            Local0 = Zero
        }

        Method (INTM, 1, Serialized)
        {
            Local0 = Zero
        }

        Name (WHTR, 0x1F)
        Name (OSTH, Zero)
        Name (LARE, Package (0x05) {})
        Name (LARP, Package (0x05) {})
        Name (CUZO, Package (0x05) {})
        Name (LATR, Package (0x05) {})
        Mutex (THER, 0x00)
        Name (THSC, 0x1F)
        Method (BOTT, 0, Serialized)
        {
            TRUP ()
            Local3 = SizeOf (TRPC)
            Local5 = DerefOf (TRPC [Zero])
            Local4 = SizeOf (Local5)
            Local0 = Zero
            While ((Local0 < Local3))
            {
                Local1 = Zero
                While ((Local1 < Local4))
                {
                    Local6 = DerefOf (DerefOf (TRPC [Local0]) [Local1])
                    Local7 = GETK (Local6)
                    DerefOf (TRIP [Local0]) [Local1] = Local7
                    Local1++
                }

                Local0++
            }
        }

        Method (GETK, 1, Serialized)
        {
            Local0 = (Arg0 * 0x0A)
            Local1 = (Local0 + 0x0AAC)
            Return (Local1)
        }

        Method (RETD, 0, Serialized)
        {
            Acquire (THER, 0xFFFF)
            THSC = 0x1F
            WHTR = 0x1F
            Local0 = Zero
            While ((Local0 < 0x05))
            {
                LARE [Local0] = Zero
                LARP [Local0] = Zero
                CUZO [Local0] = 0xFF
                LATR [Local0] = Zero
                Local0++
            }

            Release (THER)
        }

        Method (OTHI, 1, Serialized)
        {
            ECTI (One)
            If (Arg0)
            {
                NTHS (0x1F)
            }
        }

        Name (OTID, Zero)
        Method (ECTI, 1, Serialized)
        {
            If ((Arg0 == One))
            {
                OTID = One
            }

            If ((\_SB.PCI0.LPCB.EC0.ECRG && OTID))
            {
                THSC = 0x1F
                NTHS (0x1F)
                OTID = Zero
            }
        }

        Method (OSIT, 0, Serialized)
        {
            If ((OSTH == Zero))
            {
                INTM (Zero)
                OSTH = One
            }
        }

        Method (GETP, 2, Serialized)
        {
            Local0 = Arg1
            If ((Arg1 == One))
            {
                Local3 = DerefOf (CUZO [Arg0])
                If (((Local3 > One) && (Local3 != 0xFF)))
                {
                    Local0 = Zero
                }
            }

            Local2 = DerefOf (DerefOf (TRIP [Arg0]) [Local0])
            Return (Local2)
        }

        Method (GTTP, 5, Serialized)
        {
            Local1 = Arg2
            If (((Arg0 <= 0x07) && \_SB.PCI0.LPCB.EC0.ECRG))
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PCI0.LPCB.EC0.CRZN = Arg1
                If ((Arg0 == One))
                {
                    Local1 = \_SB.PCI0.LPCB.EC0.DTMP
                }
                Else
                {
                    Local1 = \_SB.PCI0.LPCB.EC0.TEMP
                }

                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Local2 = Local1
            If ((Local1 < Arg3))
            {
                If ((DerefOf (LARE [Arg0]) < Arg3))
                {
                    LARP [Arg0] = Arg3
                }

                Local1 = DerefOf (LARP [Arg0])
            }
            ElseIf ((Local1 > Arg4))
            {
                If ((DerefOf (LARE [Arg0]) > Arg4))
                {
                    LARP [Arg0] = Arg4
                }

                Local1 = DerefOf (LARP [Arg0])
            }

            LARE [Arg0] = Local2
            LARP [Arg0] = Local1
            Return (Local1)
        }

        Method (SETM, 3, Serialized)
        {
            Local5 = Zero
            If ((Arg0 <= 0x07))
            {
                Acquire (THER, 0xFFFF)
                Local7 = (One << Arg0)
                If (((THSC & Local7) && \_SB.PCI0.LPCB.EC0.ECRG))
                {
                    If ((DerefOf (LATR [Arg0]) && (Arg0 != 0x04)))
                    {
                        Local4 = (Arg2 + 0x02)
                    }
                    Else
                    {
                        Local4 = Arg2
                    }

                    Local2 = DerefOf (DerefOf (TRPC [Arg0]) [Zero])
                    Local0 = One
                    While ((Local0 <= 0x03))
                    {
                        Local6 = DerefOf (DerefOf (TRPC [Arg0]) [Local0])
                        If ((Local4 < Local6))
                        {
                            Break
                        }
                        Else
                        {
                            Local0++
                        }
                    }

                    If ((Local0 == One))
                    {
                        If ((Arg2 > Local2))
                        {
                            If ((DerefOf (LATR [Arg0]) > Local6))
                            {
                                Local0++
                            }
                        }
                    }

                    Local3 = DerefOf (TRPC [Arg0])
                    Local4 = SizeOf (Local3)
                    If (((Local0 != DerefOf (CUZO [Arg0])) && (Local0 < 
                        Local4)))
                    {
                        Local5 = One
                        CUZO [Arg0] = Local0
                        If ((Arg0 <= 0x07))
                        {
                            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                            \_SB.PCI0.LPCB.EC0.CRZN = Arg1
                            If ((DerefOf (LATR [Arg0]) == Zero))
                            {
                                \_SB.PCI0.LPCB.EC0.PLTP = Local2
                            }

                            \_SB.PCI0.LPCB.EC0.PHTP = Local6
                            Release (\_SB.PCI0.LPCB.EC0.ECMX)
                        }

                        LATR [Arg0] = Local6
                    }

                    THSC &= ~Local7
                }

                Release (THER)
            }

            Return (Local5)
        }

        Method (CHOT, 1, Serialized)
        {
            If ((DTCD & 0x00020000))
            {
                Local0 = 0x0FAC
            }
            Else
            {
                Local0 = GETP (Arg0, 0x02)
            }

            Return (Local0)
        }

        ThermalZone (CPUZ)
        {
            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (CHOT (Zero))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (Zero, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                OSIT ()
                Local0 = Zero
                Local0 = GTTP (Zero, One, 0x10, Zero, 0x7F)
                If (SETM (Zero, One, Local0))
                {
                    Notify (CPUZ, 0x81) // Thermal Trip Point Change
                }

                Return (GETK (Local0))
            }
        }

        ThermalZone (GFXZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (One, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (One, 0x02, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (EXTZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x02, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x02, 0x03, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (LOCZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x03, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x03, 0x04, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (BATZ)
        {
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                Return (GETP (0x04, One))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                Return (PSL ())
            }

            Name (_TSP, 0x012C)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x32)  // _TC1: Thermal Constant 1
            Name (_TC2, Zero)  // _TC2: Thermal Constant 2
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x04, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x04, 0x05, Zero, Zero, 0x7F)
                If (SETM (0x04, 0x05, Local0))
                {
                    Notify (BATZ, 0x81) // Thermal Trip Point Change
                }

                Return (GETK (Local0))
            }
        }

        ThermalZone (CHGZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x05, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x05, 0x06, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        Method (NTHS, 1, Serialized)
        {
            If ((Arg0 & One))
            {
                Notify (CPUZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x02))
            {
                Notify (GFXZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x04))
            {
                Notify (EXTZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x08))
            {
                Notify (LOCZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x10))
            {
                Notify (BATZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x20))
            {
                Notify (CHGZ, 0x80) // Thermal Status Change
            }
        }

        Method (ECTE, 1, Serialized)
        {
            Local1 = Zero
            If (Arg0)
            {
                If ((Arg0 & One))
                {
                    Local1 |= One
                }

                If ((Arg0 & 0x02))
                {
                    Local1 |= 0x02
                }

                If ((Arg0 & 0x04))
                {
                    Local1 |= 0x04
                }

                If ((Arg0 & 0x08))
                {
                    Local1 |= 0x08
                }

                If ((Arg0 & 0x10))
                {
                    Local1 |= 0x10
                }

                If ((Arg0 & 0x20))
                {
                    Local1 |= 0x20
                }
            }
            Else
            {
                Local1 |= 0x10
            }

            Acquire (THER, 0xFFFF)
            THSC |= Local1
            Release (THER)
            NTHS (Local1)
        }

        Method (GFRM, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                Local0 = \_SB.PCI0.LPCB.EC0.FRDC
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
                If (Local0)
                {
                    Local1 = (Local0 >> One)
                    Local2 = (0x0003C000 + Local1)
                    Divide (Local2, Local0, Local1, Local0)
                }
            }

            Return (Local0)
        }

        Method (GFVE, 1, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                If ((Arg0 == One))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FRDC
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FR2C
                }

                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Return (Local0)
        }

        Method (GTFV, 1, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                If ((Arg0 == One))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FTGC
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FT2C
                }

                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Return (Local0)
        }

        Method (GTRM, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                Local0 = \_SB.PCI0.LPCB.EC0.FTGC
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
                If (Local0)
                {
                    Local1 = (Local0 >> One)
                    Local2 = (0x0003C000 + Local1)
                    Divide (Local2, Local0, Local1, Local0)
                }
            }

            Return (Local0)
        }

        Method (GFSD, 0, Serialized)
        {
            Local0 = GFRM ()
            Local1 = (Local0 * 0x64)
            Divide (Local1, AMFR, Local1, Local2)
            Return (Local2)
        }

        Method (CTCT, 1, Serialized)
        {
            Local1 = (Arg0 * AMFR) /* \AMFR */
            Divide (Local1, 0x64, Local2, Local0)
            If (Local0)
            {
                Local1 = (Local0 >> One)
                Local2 = (0x0003C000 + Local1)
                Divide (Local2, Local0, Local1, Local0)
            }

            If ((Local0 > 0xF4))
            {
                Local0 = 0xF4
            }

            Return (Local0)
        }

        Method (GCGC, 0, Serialized)
        {
            Name (LTMP, Buffer (0x02) {})
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                LTMP = \_SB.PCI0.LPCB.EC0.BPR
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Return (LTMP) /* \_TZ_.GCGC.LTMP */
        }

        Name (MIFA, Zero)
        Method (CATZ, 1, Serialized)
        {
            Local1 = Arg0
            Return (Local1)
        }

        Method (PSL, 0, Serialized)
        {
            Return (Package (0x10)
            {
                \_SB.PLTF.C000, 
                \_SB.PLTF.C001, 
                \_SB.PLTF.C002, 
                \_SB.PLTF.C003, 
                \_SB.PLTF.C004, 
                \_SB.PLTF.C005, 
                \_SB.PLTF.C006, 
                \_SB.PLTF.C007, 
                \_SB.PLTF.C008, 
                \_SB.PLTF.C009, 
                \_SB.PLTF.C00A, 
                \_SB.PLTF.C00B, 
                \_SB.PLTF.C00C, 
                \_SB.PLTF.C00D, 
                \_SB.PLTF.C00E, 
                \_SB.PLTF.C00F
            })
        }

        Method (GDTP, 2, Serialized)
        {
            If ((Arg1 || DTZS ()))
            {
                Local0 = \_SB.PCI0.SMBS.SRDW (Arg0, 0x05, Zero)
                If ((Local0 == 0xFFFFFFFF))
                {
                    Local0 = Zero
                }
                ElseIf ((Local0 & 0x1000))
                {
                    Local0 = Zero
                }
                Else
                {
                    Local0 >>= 0x04
                    Local0 &= 0xFF
                }

                Return (GETK (Local0))
            }
            Else
            {
                Return (0x0AAC)
            }
        }

        Method (DTZS, 0, NotSerialized)
        {
            If ((DTCD & 0x00010000))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (ATV4, Zero)
        Name (ATV3, One)
        Name (ATV2, 0x02)
        Name (ATV1, 0x03)
        Name (ATV0, 0x04)
        Name (CUFA, Zero)
    }

    Name (NIST, Package (0x10)
    {
        "0", 
        "1", 
        "2", 
        "3", 
        "4", 
        "5", 
        "6", 
        "7", 
        "8", 
        "9", 
        "A", 
        "B", 
        "C", 
        "D", 
        "E", 
        "F"
    })
    Method (ISTR, 2, NotSerialized)
    {
        Local0 = Arg0
        Local7 = ""
        Local4 = Arg1
        While ((Local4 > Zero))
        {
            Local1 = (Local0 & 0x0F)
            Local2 = DerefOf (NIST [Local1])
            Concatenate (Local2, Local7, Local3)
            Local7 = Local3
            Local0 >>= 0x04
            Local4--
        }

        Return (Local7)
    }

    Method (SRCP, 2, Serialized)
    {
        Local7 = SizeOf (Arg0)
        If ((Local7 != SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Name (ST00, Buffer (Local7) {})
        Name (ST01, Buffer (Local7) {})
        ST00 = Arg0
        ST01 = Arg1
        Local6 = Zero
        Local0 = One
        While (((Local6 != Local7) && Local0))
        {
            Local2 = DerefOf (ST00 [Local6])
            Local3 = DerefOf (ST01 [Local6])
            Local6++
            If ((Local2 != Local3))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (SRCM, 3, Serialized)
    {
        Name (ST00, Buffer (0x8C) {})
        Name (ST01, Buffer (0x8C) {})
        ST00 = Arg0
        ST01 = Arg1
        Local6 = Zero
        Local0 = One
        While (((Local6 != Arg2) && Local0))
        {
            Local2 = DerefOf (ST00 [Local6])
            Local3 = DerefOf (ST01 [Local6])
            Local6++
            If ((Local2 != Local3))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Name (EUPC, Package (0x04)
    {
        0xFF, 
        0xFF, 
        Zero, 
        Zero
    })
    Name (EPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
        }
    })
    Method (GPLD, 2, Serialized)
    {
        Name (PCKG, Package (0x01)
        {
            Buffer (0x14) {}
        })
        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
        REV = One
        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
        VISI = Arg0
        CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
        GPOS = Arg1
        Return (PCKG) /* \GPLD.PCKG */
    }

    Method (TPLD, 2, Serialized)
    {
        Name (PCKG, Package (0x01)
        {
            Buffer (0x10) {}
        })
        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
        REV = 0x02
        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
        VISI = Arg0
        CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
        GPOS = Arg1
        CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
        SHAP = One
        CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
        WID = 0x08
        CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
        HGT = 0x03
        Return (PCKG) /* \TPLD.PCKG */
    }

    Method (GUPC, 2, Serialized)
    {
        Name (PCKG, Package (0x04)
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        PCKG [Zero] = Arg0
        PCKG [One] = Arg1
        Return (PCKG) /* \GUPC.PCKG */
    }

    Method (TUPC, 1, Serialized)
    {
        Name (PCKG, Package (0x04)
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
        PCKG [One] = Arg0
        Return (PCKG) /* \TUPC.PCKG */
    }

    Method (CBRT, 2, Serialized)
    {
        Local6 = SizeOf (Arg0)
        Local7 = SizeOf (Arg1)
        If ((Local6 == Zero))
        {
            Local0 = Arg1
            Return (Local0)
        }

        If ((Local7 == Zero))
        {
            Local0 = Arg0
            Return (Local0)
        }

        Local1 = (Local7 + Local6)
        Local1 -= 0x02
        Local0 = Buffer (Local1) {}
        Local1 = Zero
        While ((Local1 < SizeOf (Arg0)))
        {
            Local0 [Local1] = DerefOf (Arg0 [Local1])
            Local1++
        }

        Local1 -= 0x02
        Local2 = Zero
        While ((Local2 < SizeOf (Arg1)))
        {
            Local0 [Local1] = DerefOf (Arg1 [Local2])
            Local1++
            Local2++
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Device (WLBU)
        {
            Name (_HID, EisaId ("HPQ6001"))  // _HID: Hardware ID
            Name (DEPT, 0xFF)
            Method (INIT, 0, Serialized)
            {
                If ((DEPT == 0x0F))
                {
                    DEPT = 0xFF
                }
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DEPT == 0xFF))
                {
                    Local0 = Zero
                    If ((GTOS () >= 0x08))
                    {
                        Local0 = 0x0F
                        UWLS ()
                    }

                    DEPT = Local0
                }

                Return (DEPT) /* \_SB_.WLBU.DEPT */
            }

            Method (UWLS, 0, Serialized)
            {
                Local0 = WDDA /* \WDDA */
                Local1 = DerefOf (Local0 [0x07])
                If ((WFLS & 0x02))
                {
                    WFLS &= 0xFFFFFFFFFFFFFFFD
                }

                Local1 *= 0x10
                Local1 += 0x10
                Local2 = 0x1B
                Local5 = 0x10
                Local4 = Zero
                While ((Local2 < Local1))
                {
                    Local3 = DerefOf (Local0 [Local2])
                    Local6 = DerefOf (Local0 [Local5])
                    If (((Local3 & 0x0A) != 0x0A))
                    {
                        Local0 [Local2] = (Local3 | 0x0A)
                        Local4 = One
                    }

                    If ((Local6 == Zero))
                    {
                        If (((Local3 & 0x10) != Zero))
                        {
                            Local0 [Local2] = (Local3 & 0xEF)
                            Local4 = One
                        }
                    }

                    Local2 += 0x10
                    Local5 += 0x10
                }

                If (Local4)
                {
                    WDDA = Local0
                    SSMI (0xEA84, Zero, Zero, Zero, Zero)
                }
            }

            Method (WLED, 1, Serialized)
            {
                SSMI (0xEA90, Arg0, Zero, Zero, Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (G0B0, 1, Serialized)
        {
        }

        Method (G0B1, 1, Serialized)
        {
        }
    }

    Scope (_SB)
    {
        Name (BCLI, Zero)
        Name (BCLS, Package (0x03)
        {
            Package (0x0D) {}, 
            Package (0x17) {}, 
            Package (0x1B) {}
        })
        Name (NITS, Package (0x03)
        {
            Buffer (0x16) {}, 
            Buffer (0x2A) {}, 
            Buffer (0x32) {}
        })
        Name (G028, Zero)
        Method (BCL, 0, Serialized)
        {
            If ((G028 == Zero))
            {
                If ((ILUX == One))
                {
                    G080 = G081 /* \G081 */
                }
                ElseIf ((GTOS () > 0x06))
                {
                    G080 = G081 /* \G081 */
                }

                Local7 = Zero
                If ((G080 >= 0x15))
                {
                    BCLI = One
                    Local7 = One
                    If ((G080 == 0x19))
                    {
                        BCLI = 0x02
                    }
                }

                Local1 = Zero
                If ((G08D & 0x10))
                {
                    Local0 = G084 /* \G084 */
                    Local5 = Zero
                    Local4 = G082 /* \G082 */
                    While ((Local1 < G080))
                    {
                        If (Local7)
                        {
                            Local3 = Local1
                        }
                        Else
                        {
                            Local3 = DerefOf (Local4 [Local1])
                        }

                        Local2 = DerefOf (Local0 [Local3])
                        Local3 = (Local2 * 0x64)
                        Local2 = ((Local3 + 0x7F) / 0xFF)
                        DerefOf (BCLS [BCLI]) [(Local1 + 0x02)] = 
                            Local2
                        If ((Local2 > Local5))
                        {
                            Local5 = Local2
                        }

                        Local1++
                    }

                    Local3 = (G080 >> One)
                    DerefOf (BCLS [BCLI]) [One] = DerefOf (DerefOf (
                        BCLS [BCLI]) [Local3])
                    DerefOf (BCLS [BCLI]) [Zero] = Local5
                }
                Else
                {
                    Local4 = G083 /* \G083 */
                    Local0 = G082 /* \G082 */
                    While ((Local1 < (G080 + 0x02)))
                    {
                        If ((Local7 || (Local1 < 0x02)))
                        {
                            Local3 = Local1
                        }
                        Else
                        {
                            Local3 = DerefOf (Local0 [(Local1 - 0x02)])
                            Local3 += 0x02
                        }

                        Local2 = DerefOf (Local4 [Local3])
                        DerefOf (BCLS [BCLI]) [Local1] = Local2
                        Local1++
                    }
                }

                Local0 = G085 /* \G085 */
                Local1 = G082 /* \G082 */
                Local2 = Zero
                While ((Local2 < G080))
                {
                    If (Local7)
                    {
                        Local3 = Local2
                    }
                    Else
                    {
                        Local3 = DerefOf (Local1 [Local2])
                    }

                    Local3 <<= One
                    Local5 = (Local2 << One)
                    Local4 = DerefOf (Local0 [Local3])
                    DerefOf (NITS [BCLI]) [Local5] = Local4
                    Local4 = DerefOf (Local0 [(Local3 + One)])
                    DerefOf (NITS [BCLI]) [(Local5 + One)] = 
                        Local4
                    Local2++
                }

                G028 = One
            }

            Return (DerefOf (BCLS [BCLI]))
        }

        Name (G029, Zero)
        Name (G02A, 0x64)
        Method (BCM, 1, Serialized)
        {
            Local0 = Zero
            If ((ILUX == One))
            {
                G08E |= 0x40
                Local0 = One
            }
            ElseIf ((GTOS () > 0x05))
            {
                G08E |= 0x40
                Local0 = One
            }

            G02A = Arg0
            Local1 = Match (DerefOf (BCLS [BCLI]), MGE, Arg0, MTR, Zero, 
                0x02)
            If ((Local1 == Ones))
            {
                Local1 = (SizeOf (DerefOf (BCLS [BCLI])) - One)
            }

            Local1 -= 0x02
            If (Local0)
            {
                G093 = Local1
            }

            G029 = One
            Return (Local0)
        }

        Method (BQC, 0, Serialized)
        {
            Local0 = G02A /* \_SB_.G02A */
            Return (Local0)
        }

        Method (HDDC, 1, Serialized)
        {
            If ((Arg0 == 0x02))
            {
                Local1 = G03E /* \G03E */
            }
            Else
            {
                Local3 = G03E /* \G03E */
                Local0 = 0x80
                Local1 = Buffer (Local0) {}
                Local2 = Zero
                While ((Local2 < Local0))
                {
                    Local1 [Local2] = DerefOf (Local3 [Local2])
                    Local2++
                }
            }

            Return (Local1)
        }

        Method (G02B, 0, Serialized)
        {
            Local0 = G093 /* \G093 */
            ODGW (Local0)
            Local4 = (G080 - One)
            If ((G093 > Local4))
            {
                Local0 = Local4
            }

            If ((G093 < Zero))
            {
                Local0 = Zero
            }

            Local2 = G084 /* \G084 */
            Local5 = G082 /* \G082 */
            If ((G080 == 0x0B))
            {
                Local0 = DerefOf (Local5 [Local0])
            }

            Local1 = DerefOf (Local2 [Local0])
            ODGW (Local1)
            Return (Local1)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (MEMR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Method (BAR3, 0, NotSerialized)
            {
                Return (^^BUSA.PSP.PBR3) /* \_SB_.PCI0.BUSA.PSP_.PBR3 */
            }

            Name (MEM1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y06)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y07)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y08)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._BAS, MB01)  // _BAS: Base Address
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._LEN, ML01)  // _LEN: Length
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y07._BAS, MB02)  // _BAS: Base Address
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y07._LEN, ML02)  // _LEN: Length
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y08._BAS, MB03)  // _BAS: Base Address
                CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y08._LEN, ML03)  // _LEN: Length
                If (GPIC)
                {
                    MB01 = 0xFEC00000
                    MB02 = 0xFEE00000
                    MB03 = 0xFEC20000
                    ML01 = 0x1000
                    ML02 = 0x1000
                    ML03 = 0x1000
                }

                If ((BAR3 () != Zero))
                {
                    MB03 = BAR3 ()
                    ML03 = 0x00100000
                }

                Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
            }
        }

        OperationRegion (NAPC, PCI_Config, 0xF8, 0x08)
        Field (NAPC, DWordAcc, NoLock, Preserve)
        {
            NAPX,   32, 
            NAPD,   32
        }

        Mutex (NAPM, 0x00)
        Method (NAPE, 0, NotSerialized)
        {
            Acquire (NAPM, 0xFFFF)
            NAPX = Zero
            Local0 = NAPD /* \_SB_.PCI0.NAPD */
            Local0 &= 0xFFFFFFEF
            NAPD = Local0
            Release (NAPM)
        }
    }

    Scope (_SB.PCI0.GP13)
    {
        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (RBUF, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0011
                    }
                GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x00AC
                    }
            })
            Return (RBUF) /* \_SB_.PCI0.GP13._CRS.RBUF */
        }

        Device (NCRD)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            OperationRegion (PCFG, PCI_Config, Zero, 0x08)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                DVID,   32, 
                PCMS,   32
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (EPLD) /* \EPLD */
            }

            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (!GV64)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB)
    {
        Method (SGIO, 2, Serialized)
        {
            OperationRegion (TGOS, SystemMemory, Arg0, 0x04)
            Field (TGOS, AnyAcc, NoLock, Preserve)
            {
                    ,   22, 
                TEMP,   1
            }

            TEMP = Arg1
        }
    }

    Scope (_SB.PCI0.GP12)
    {
        OperationRegion (PCI, PCI_Config, Zero, 0x0100)
        Field (PCI, AnyAcc, NoLock, Preserve)
        {
            PVID,   16, 
            PDID,   16, 
            Offset (0x68), 
                ,   4, 
            LIDE,   1, 
            Offset (0x69), 
            CPME,   1
        }

        Name (OFEN, One)
        Name (ONEN, Zero)
        Name (ENF3, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (0x03)
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Local0 = Package (0x02)
                {
                    0x0F, 
                    0x05
                }
            Return (Local0)
        }

        Device (PWAN)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                SGIO (WWBR, One)
                Sleep (0xC8)
                Notify (PWAN, One) // Device Check
                SGIO (WPPE, Zero)
                SGIO (WWBR, Zero)
                Sleep (0xC8)
                Notify (PWAN, One) // Device Check
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x04)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x09                                             // .
                        })
                    }

                    If ((Arg2 == One)) {}
                    If ((Arg2 == 0x02)) {}
                    If ((Arg2 == 0x03))
                    {
                        Return (0x03)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (PSTA ())
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If (^^^LPCB.EC0.ECRG)
                {
                    If ((ONEN == Zero))
                    {
                        Return (Zero)
                    }

                    If ((PDID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If ((One == ^^^LPCB.EC0.WWP))
                    {
                        ENF3 = One
                    }
                    Else
                    {
                        ENF3 = Zero
                    }

                    If (ENF3)
                    {
                        Acquire (^^^LPCB.EC0.ECMX, 0xFFFF)
                        ^^^LPCB.EC0.WWP = Zero
                        Release (^^^LPCB.EC0.ECMX)
                        Sleep (0x1E)
                        If ((WWBR != Zero))
                        {
                            SGIO (WWBR, Zero)
                        }

                        Sleep (0x14)
                        PON ()
                    }

                    OFEN = One
                    ONEN = Zero
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                OFEN = Zero
                ONEN = One
            }
        }

        Method (PSTA, 0, NotSerialized)
        {
            If (^^LPCB.EC0.ECRG)
            {
                If ((WWBR == Zero))
                {
                    Return (Zero)
                }

                If ((WPPE == Zero))
                {
                    Return (Zero)
                }

                If ((Zero == ^^LPCB.EC0.WWP))
                {
                    If ((PDID == 0xFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (PON, 0, NotSerialized)
        {
            Sleep (0x78)
            SGIO (WPPE, Zero)
            If ((PDID != 0xFFFF))
            {
                Local7 = Buffer (0x05) {}
                CreateWordField (Local7, Zero, P23S)
                CreateField (Local7, 0x10, 0x03, WPFN)
                CreateField (Local7, 0x13, 0x05, WPDN)
                CreateByteField (Local7, 0x03, WPBN)
                CreateByteField (Local7, 0x04, W23S)
                P23S = 0x05
                WPBN = Zero
                WPDN = One
                WPFN = 0x02
                W23S = Zero
                APPM (Local7)
            }
        }

        Method (POFF, 0, NotSerialized)
        {
            If ((PDID != 0xFFFF))
            {
                Local7 = Buffer (0x05) {}
                CreateWordField (Local7, Zero, P23S)
                CreateField (Local7, 0x10, 0x03, WPFN)
                CreateField (Local7, 0x13, 0x05, WPDN)
                CreateByteField (Local7, 0x03, WPBN)
                CreateByteField (Local7, 0x04, W23S)
                P23S = 0x05
                WPBN = Zero
                WPDN = One
                WPFN = 0x02
                W23S = One
                APPM (Local7)
            }

            SGIO (WPPE, One)
            Sleep (0x12)
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PXP
        })
        Method (PTS, 1, Serialized)
        {
            If (^^LPCB.EC0.ECRG)
            {
                If ((PDID == 0xFFFF))
                {
                    Return (Zero)
                }

                POFF ()
                SGIO (WWBR, One)
                Sleep (0x1E)
                Acquire (^^LPCB.EC0.ECMX, 0xFFFF)
                ^^LPCB.EC0.WWP = One
                Release (^^LPCB.EC0.ECMX)
                Sleep (0x01F4)
            }

            Return (Zero)
        }
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        If (((DAS3 == Zero) && (DAS1 == Zero)))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }
        Else
        {
            If (((DAS3 == Zero) && (Arg1 == 0x03)))
            {
                PRWP [One] = One
            }

            If (((DAS1 == Zero) && (Arg1 == One)))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        If ((Arg0 == 0x04)) {}
        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
    }

    Method (SWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PWDE = One
        PEWD = Zero
    }

    OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
    Field (PIRQ, ByteAcc, NoLock, Preserve)
    {
        PIDX,   8, 
        PDAT,   8
    }

    IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8, 
        Offset (0x0C), 
        SIRA,   8, 
        SIRB,   8, 
        SIRC,   8, 
        SIRD,   8, 
        PIRS,   8, 
        Offset (0x13), 
        HDAD,   8, 
        Offset (0x17), 
        SDCL,   8, 
        Offset (0x1A), 
        SDIO,   8, 
        Offset (0x30), 
        USB1,   8, 
        Offset (0x34), 
        USB3,   8, 
        Offset (0x41), 
        SATA,   8, 
        Offset (0x62), 
        GIOC,   8, 
        Offset (0x70), 
        I2C0,   8, 
        I2C1,   8, 
        I2C2,   8, 
        I2C3,   8, 
        URT0,   8, 
        URT1,   8
    }

    OperationRegion (KBDD, SystemIO, 0x64, One)
    Field (KBDD, ByteAcc, NoLock, Preserve)
    {
        PD64,   8
    }

    Method (INTA, 1, NotSerialized)
    {
        PIRA = Arg0
        If (PICM)
        {
            HDAD = Arg0
            SDCL = Arg0
        }
    }

    Method (INTB, 1, NotSerialized)
    {
        PIRB = Arg0
    }

    Method (INTC, 1, NotSerialized)
    {
        PIRC = Arg0
        If (PICM)
        {
            USB1 = Arg0
            USB3 = Arg0
        }
    }

    Method (INTD, 1, NotSerialized)
    {
        PIRD = Arg0
        If (PICM)
        {
            SATA = Arg0
        }
    }

    Name (PRS1, ResourceTemplate ()
    {
        IRQ (Level, ActiveLow, Shared, )
            {3,5,6,10,11}
    })
    Name (BUFA, ResourceTemplate ()
    {
        IRQ (Level, ActiveLow, Shared, )
            {15}
    })
    Device (LNKA)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRA && (PIRA != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            INTA (0x1F)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRA) /* \PIRA */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRA = Local0
        }
    }

    Device (LNKB)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRB && (PIRB != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            INTB (0x1F)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRB) /* \PIRB */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRB = Local0
        }
    }

    Device (LNKC)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x03)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRC && (PIRC != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            INTC (0x1F)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRC) /* \PIRC */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRC = Local0
        }
    }

    Device (LNKD)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x04)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRD && (PIRD != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            INTD (0x1F)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRD) /* \PIRD */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRD = Local0
        }
    }

    Device (LNKE)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x05)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRE && (PIRE != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            PIRE = 0x1F
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRE) /* \PIRE */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRE = Local0
        }
    }

    Device (LNKF)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x06)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRF && (PIRF != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            PIRF = 0x1F
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRF) /* \PIRF */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRF = Local0
        }
    }

    Device (LNKG)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x07)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRG && (PIRG != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            PIRG = 0x1F
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRG) /* \PIRG */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRG = Local0
        }
    }

    Device (LNKH)
    {
        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
        Name (_UID, 0x08)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PIRH && (PIRH != 0x1F)))
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
        {
            Return (PRS1) /* \PRS1 */
        }

        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
            PIRH = 0x1F
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUFA, One, IRQX)
            IRQX = (One << PIRH) /* \PIRH */
            Return (BUFA) /* \BUFA */
        }

        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
        {
            CreateWordField (Arg0, One, IRA)
            FindSetRightBit (IRA, Local0)
            Local0--
            PIRH = Local0
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SMBS)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (IRQF, PCI_Config, Zero, 0x0100)
            Field (IRQF, AnyAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                RVID,   8
            }

            OperationRegion (SMBO, SystemIO, 0x0B00, 0x07)
            Field (SMBO, ByteAcc, NoLock, Preserve)
            {
                HSSS,   8, 
                SLSS,   8, 
                HSCT,   8, 
                HSCD,   8, 
                XMSL,   8, 
                HSD0,   8, 
                HSD1,   8
            }

            Method (SMBA, 3, Serialized)
            {
                Acquire (_GL, 0xFFFF)
                Local2 = Zero
                Local0 = 0xFA
                While (((HSSS & One) && (Local0 > Zero)))
                {
                    Stall (0x64)
                    Local0--
                }

                If (Local0)
                {
                    HSCD = Arg1
                    XMSL = Arg0
                    If (((Arg0 & One) == Zero))
                    {
                        HSD0 = Arg2
                    }

                    HSSS = 0xFF
                    HSCT = 0x48
                    Local0 = 0xFA
                    While ((((HSSS & 0x1E) == Zero) && (Local0 > Zero)))
                    {
                        Stall (0x64)
                        Local0--
                    }

                    Local1 = (HSSS & 0x1C)
                    HSSS = 0xFF
                    If (((Local1 == Zero) && (Arg0 & One)))
                    {
                        Local2 = HSD0 /* \_SB_.PCI0.SMBS.HSD0 */
                    }
                }
                Else
                {
                    Local1 = One
                }

                Release (_GL)
                If ((Arg0 & One))
                {
                    Local3 = (Local1 << 0x08)
                    Local1 = (Local3 | Local2)
                }

                Return (Local1)
            }

            Method (SRDW, 3, Serialized)
            {
                Acquire (_GL, 0xFFFF)
                Local2 = Zero
                Local0 = 0xFA
                While (((HSSS & One) && (Local0 > Zero)))
                {
                    Stall (0x64)
                    Local0--
                }

                If (Local0)
                {
                    HSCD = Arg1
                    XMSL = Arg0
                    If (((Arg0 & One) == Zero))
                    {
                        HSD0 = Arg2
                    }

                    HSSS = 0xFF
                    HSCT = 0x4C
                    Local0 = 0xFA
                    While ((((HSSS & 0x1E) == Zero) && (Local0 > Zero)))
                    {
                        Stall (0x64)
                        Local0--
                    }

                    Local1 = (HSSS & 0x1C)
                    HSSS = 0xFF
                    If (((Local1 == Zero) && (Arg0 & One)))
                    {
                        Local2 = ((HSD0 << 0x08) | HSD1)
                    }
                }
                Else
                {
                    Local1 = One
                }

                Release (_GL)
                If ((Arg0 & One))
                {
                    Local3 = (Local1 << 0x10)
                    Local1 = (Local3 | Local2)
                }

                Return (Local1)
            }
        }

        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((HPEN == One))
                {
                    If ((GOSI >= 0x06))
                    {
                        Return (0x0F)
                    }

                    HPEN = Zero
                    Return (One)
                }

                Return (One)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQNoFlags ()
                        {0}
                    IRQNoFlags ()
                        {8}
                    Memory32Fixed (ReadOnly,
                        0xFED00000,         // Address Base
                        0x00000400,         // Address Length
                        _Y09)
                })
                CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y09._BAS, HPEB)  // _BAS: Base Address
                Local0 = 0xFED00000
                HPEB = (Local0 & 0xFFFFFC00)
                Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
            }
        }
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8, 
            Offset (0x71), 
            IM71,   8, 
            IM72,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED81200,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Device (TPAD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                Method (_HID, 0, Serialized)  // _HID: Hardware ID
                {
                    Switch (PRDT)
                    {
                        Case (One)
                        {
                            Return ("SYNA30B0")
                        }
                        Case (0x02)
                        {
                            Return ("SYNA30AF")
                        }
                        Case (0x03)
                        {
                            Return ("SYNA30BF")
                        }
                        Default
                        {
                            Return ("SYNA30B0")
                        }

                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBFI, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0012
                            }
                    })
                    Return (SBFI) /* \_SB_.I2CA.TPAD._CRS.SBFI */
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == One))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Return (0x20)
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Device (CMSR)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "CPLM3218" /* Capella Micro CM3218x Ambient Light Sensor */)  // _HID: Hardware ID
                Name (_CID, "CPLM3218" /* Capella Micro CM3218x Ambient Light Sensor */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    I2CB
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (GS85)
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    CPM1 [Zero] = AC10 /* \AC10 */
                    CPM1 [One] = AC11 /* \AC11 */
                    CPM1 [0x02] = AC12 /* \AC12 */
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        GpioInt (Level, ActiveLow, Exclusive, PullNone, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x005A
                            }
                    })
                    Return (SBUF) /* \_SB_.I2CB.CMSR._CRS.SBUF */
                }

                Name (CPM0, Package (0x07)
                {
                    0x7DB5, 
                    One, 
                    0x0F, 
                    0x0840, 
                    0x013B, 
                    0x011D, 
                    Zero
                })
                Name (CPM1, Package (0x03)
                {
                    0x0898, 
                    0x000186A0, 
                    0x000186A0
                })
                Name (CPM2, Package (0x06)
                {
                    0x61A8, 
                    0x000186A0, 
                    0x000186A0, 
                    0x000186A0, 
                    0x00030D40, 
                    0x00186A00
                })
                Name (CPM3, Package (0x07)
                {
                    Package (0x02)
                    {
                        0x41, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x41, 
                        0x19
                    }, 

                    Package (0x02)
                    {
                        0x4D, 
                        0x28
                    }, 

                    Package (0x02)
                    {
                        0x64, 
                        0x64
                    }, 

                    Package (0x02)
                    {
                        0x64, 
                        0x03E8
                    }, 

                    Package (0x02)
                    {
                        0xC8, 
                        0x07D0
                    }, 

                    Package (0x02)
                    {
                        0x01F4, 
                        0xFFFF
                    }
                })
                Name (CPM5, Package (0x07)
                {
                    Zero, 
                    0x000249F0, 
                    0x0190, 
                    0x03E8, 
                    0x02, 
                    0x32, 
                    0x05
                })
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("0703c6b6-1cca-4144-9fe7-4654f53a0bd9") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }

                        If ((Arg2 == One))
                        {
                            If ((ToInteger (Arg3) == Zero))
                            {
                                Return (CPM0) /* \_SB_.I2CB.CMSR.CPM0 */
                            }

                            If ((ToInteger (Arg3) == One))
                            {
                                Return (CPM1) /* \_SB_.I2CB.CMSR.CPM1 */
                            }

                            If ((ToInteger (Arg3) == 0x02))
                            {
                                Return (CPM2) /* \_SB_.I2CB.CMSR.CPM2 */
                            }

                            If ((ToInteger (Arg3) == 0x03))
                            {
                                Return (CPM3) /* \_SB_.I2CB.CMSR.CPM3 */
                            }

                            If ((ToInteger (Arg3) == 0x05))
                            {
                                Return (CPM5) /* \_SB_.I2CB.CMSR.CPM5 */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC6000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCB000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM4A = One
            IM58 = One
            IM4B = One
            IM57 = One
            IM6D = One
            IM1F = One
            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0A)
                    IRQNoFlags (_Y0B)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y0A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y0A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y0B._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA0 /* \_SB_.IUA0 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0C)
                    IRQNoFlags (_Y0D)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0C._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0C._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y0D._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA1 /* \_SB_.IUA1 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0E)
                    IRQNoFlags (_Y0F)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0E._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0E._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y0F._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA2 /* \_SB_.IUA2 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y10)
                    IRQNoFlags (_Y11)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y10._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y10._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y11._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA3 /* \_SB_.IUA3 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_GPE)
    {
        Method (_E02, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0x012C)
            Local0 = SSCI /* \SSCI */
            If (Local0)
            {
                SSCI = Zero
                If ((Local0 == 0x05))
                {
                    If (\_SB.WLBU._STA ())
                    {
                        Notify (\_SB.WLBU, 0x80) // Status Change
                    }
                    Else
                    {
                        \_SB.WMIV.GVWE (Local0, Zero)
                    }
                }
            }
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.BUSA.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.BUSA.XHC1, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP13, 0x02) // Device Wake
        }

        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP12.PWAN, 0x02) // Device Wake
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (!MSCE)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            0x03, 
            Zero, 
            Zero
        })
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 75
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-BPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]                 FACS Address : B40B2000
[028h 0040   4]                 DSDT Address : B43CA000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000800
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0064
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0011
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0023C5AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 1

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000B43CA000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 03 [DWord Access:32]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000800

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 04 [QWord Access:64]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) */

Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 75 48 50 51 4F 45 4D  // FACP.....uHPQOEM
    0010: 53 4C 49 43 2D 42 50 43 01 00 00 00 48 50 20 20  // SLIC-BPC....HP  
    0020: 01 00 00 00 00 20 0B B4 00 A0 3C B4 00 02 09 00  // ..... ....<.....
    0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 64 00 E9 03 00 00 00 00 01 03 0D 00 32 11 00 00  // d...........2...
    0070: AD C5 23 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ..#.............
    0080: 06 00 00 00 00 00 00 00 00 00 00 00 00 A0 3C B4  // ..............<.
    0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 04  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 66188F2F
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 2F 8F 18 66 00 00 00 00  // FACS@.../..f....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2D
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "EDK2    "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000B3C0E000

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 00000000B3C19000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 2D 48 50 51 4F 45 4D  // FPDTD....-HPQOEM
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 20 20 20 20  // EDK2    ....    
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 E0 C0 B3  // ................
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 90 C1 B3  // ................
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 8B
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "8760    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]            Hardware Block ID : 10228210

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 8B 48 50 51 4F 45 4D  // HPET8.....HPQOEM
    0010: 38 37 36 30 20 20 20 20 01 00 00 00 48 50 20 20  // 8760    ....HP  
    0020: 01 00 00 00 10 82 22 10 00 00 00 00 00 00 D0 FE  // ......".........
    0030: 00 00 00 00 00 80 00 00                          // ........


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000001A4
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 1F
[00Ah 0010   6]                       Oem ID : "AMD  "
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002
[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FD300000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6F

[048h 0072   1]                Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076   1]                Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081   2]                    Device ID : FF00
[053h 0083   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A5
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                Subtable Type : 04 [Device Entry: End of Range]
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096   1]                Subtable Type : 48 [Device Entry: Special Device]
[061h 0097   2]                    Device ID : 0000
[063h 0099   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                Subtable Type : 48 [Device Entry: Special Device]
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108   1]                       Handle : 21
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                Subtable Type : 48 [Device Entry: Special Device]
[071h 0113   2]                    Device ID : 0000
[073h 0115   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116   1]                       Handle : 22
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002
[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FD300000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 206D73EF22254ADE
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164   1]                Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A5
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184   1]                Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196   1]                       Handle : 21
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204   1]                       Handle : 22
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

[0D0h 0208   1]                Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[0D1h 0209   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0D2h 0210   2]                       Length : 00D4
[0D4h 0212   2]                     DeviceId : 0002
[0D6h 0214   2]            Capability Offset : 0040
[0D8h 0216   8]                 Base Address : 00000000FD300000
[0E0h 0224   2]            PCI Segment Group : 0000
[0E2h 0226   2]          Virtualization Info : 0000
[0E4h 0228   4]                   Attributes : 00040200
[0E8h 0232   8]                    EFR Image : 206D73EF22254ADE
[0F0h 0240   8]                     Reserved : 0000000000000000

[0F8h 0248   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0F9h 0249   2]                    Device ID : 0008
[0FBh 0251   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0FCh 0252   1]                Subtable Type : 04 [Device Entry: End of Range]
[0FDh 0253   2]                    Device ID : FFFE
[0FFh 0255   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[100h 0256   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[101h 0257   2]                    Device ID : FF00
[103h 0259   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[104h 0260   1]                     Reserved : 00
[105h 0261   2]        Source Used Device ID : 00A5
[107h 0263   1]                     Reserved : 00

[108h 0264   1]                Subtable Type : 04 [Device Entry: End of Range]
[109h 0265   2]                    Device ID : FFFF
[10Bh 0267   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[10Ch 0268   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[10Dh 0269   2]                    Device ID : 0000
[10Fh 0271   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[110h 0272   1]                Subtable Type : 48 [Device Entry: Special Device]
[111h 0273   2]                    Device ID : 0000
[113h 0275   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[114h 0276   1]                       Handle : 00
[115h 0277   2]        Source Used Device ID : 00A0
[117h 0279   1]                      Variety : 02

[118h 0280   1]                Subtable Type : 48 [Device Entry: Special Device]
[119h 0281   2]                    Device ID : 0000
[11Bh 0283   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[11Ch 0284   1]                       Handle : 21
[11Dh 0285   2]        Source Used Device ID : 00A0
[11Fh 0287   1]                      Variety : 01

[120h 0288   1]                Subtable Type : 48 [Device Entry: Special Device]
[121h 0289   2]                    Device ID : 0000
[123h 0291   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[124h 0292   1]                       Handle : 22
[125h 0293   2]        Source Used Device ID : 0001
[127h 0295   1]                      Variety : 01

[128h 0296   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[129h 0297   2]                    Device ID : 00A5
[12Bh 0299   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[12Ch 0300   8]                     ACPI HID : "AMDI0020"
[134h 0308   8]                     ACPI CID : 0000000000000000
[13Ch 0316   1]                   UID Format : 02
[13Dh 0317   1]                   UID Length : 09
[13Eh 0318   9]                          UID : "\_SB.FUR0"

[147h 0327   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[148h 0328   2]                    Device ID : 00A5
[14Ah 0330   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[14Bh 0331   8]                     ACPI HID : "AMDI0020"
[153h 0339   8]                     ACPI CID : 0000000000000000
[15Bh 0347   1]                   UID Format : 02
[15Ch 0348   1]                   UID Length : 09
[15Dh 0349   9]                          UID : "\_SB.FUR1"

[166h 0358   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[167h 0359   2]                    Device ID : 00A5
[169h 0361   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[16Ah 0362   8]                     ACPI HID : "AMDI0020"
[172h 0370   8]                     ACPI CID : 0000000000000000
[17Ah 0378   1]                   UID Format : 02
[17Bh 0379   1]                   UID Length : 09
[17Ch 0380   9]                          UID : "\_SB.FUR2"

[185h 0389   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[186h 0390   2]                    Device ID : 00A5
[188h 0392   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[189h 0393   8]                     ACPI HID : "AMDI0020"
[191h 0401   8]                     ACPI CID : 0000000000000000
[199h 0409   1]                   UID Format : 02
[19Ah 0410   1]                   UID Length : 09
[19Bh 0411   9]                          UID : "\_SB.FUR3"

Raw Table Data: Length 420 (0x1A4)

    0000: 49 56 52 53 A4 01 00 00 02 1F 41 4D 44 20 20 00  // IVRS......AMD  .
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 30 FD 00 00 00 00  // ..H...@...0.....
    0040: 00 00 00 00 6F 8F 04 80 03 08 00 00 04 FE FF 00  // ....o...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    0070: 48 00 00 00 22 01 00 01 11 B0 58 00 02 00 40 00  // H...".....X...@.
    0080: 00 00 30 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ..0.............
    0090: DE 4A 25 22 EF 73 6D 20 00 00 00 00 00 00 00 00  // .J%".sm ........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 21 A0 00 01 48 00 00 00 22 01 00 01  // H...!...H..."...
    00D0: 40 B0 D4 00 02 00 40 00 00 00 30 FD 00 00 00 00  // @.....@...0.....
    00E0: 00 00 00 00 00 02 04 00 DE 4A 25 22 EF 73 6D 20  // .........J%".sm 
    00F0: 00 00 00 00 00 00 00 00 03 08 00 00 04 FE FF 00  // ................
    0100: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0110: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    0120: 48 00 00 00 22 01 00 01 F0 A5 00 40 41 4D 44 49  // H..."......@AMDI
    0130: 30 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F  // 0020..........\_
    0140: 53 42 2E 46 55 52 30 F0 A5 00 40 41 4D 44 49 30  // SB.FUR0...@AMDI0
    0150: 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53  // 020..........\_S
    0160: 42 2E 46 55 52 31 F0 A5 00 40 41 4D 44 49 30 30  // B.FUR1...@AMDI00
    0170: 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42  // 20..........\_SB
    0180: 2E 46 55 52 32 F0 A5 00 40 41 4D 44 49 30 30 32  // .FUR2...@AMDI002
    0190: 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42 2E  // 0..........\_SB.
    01A0: 46 55 52 33                                      // FUR3


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 76
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "8760    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 76 48 50 51 4F 45 4D  // MCFG<....vHPQOEM
    0010: 38 37 36 30 20 20 20 20 01 00 00 00 48 50 20 20  // 8760    ....HP  
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 0D
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-BPC"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036  49] Software Licensing Structure : \
    45 45 53 54 00 00 00 00 61 0A 00 00 00 00 00 00 \
    E0 AC DF A0 73 7F 00 00 E0 AC DF A0 73 7F 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 0D 48 50 51 4F 45 4D  // MSDMU.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 00 00 00 00 48 50 20 20  // SLIC-BPC....HP  
    0020: 01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 36 57 44 47 4E 2D 37 42  // ........6WDGN-7B
    0040: 4D 48 43 2D 32 51 4B 34 46 2D 43 37 4B 59 42 2D  // MHC-2QK4F-C7KYB-
    0050: 4A 4B 38 58 43                                   // JK8XC


OEML
----


RTMA
----
[000h 0000   4]                    Signature : "RTMA"    
[004h 0004   4]                 Table Length : 0000009E
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E1
[00Ah 0010   6]                       Oem ID : "HP"
[010h 0016   8]                 Oem Table ID : "_HBMART_"
[018h 0024   4]                 Oem Revision : 00001000
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [RTMA]


Raw Table Data: Length 158 (0x9E)

    0000: 52 54 4D 41 9E 00 00 00 01 E1 48 50 00 00 00 00  // RTMA......HP....
    0010: 5F 48 42 4D 41 52 54 5F 00 10 00 00 48 50 20 20  // _HBMART_....HP  
    0020: 01 00 00 00 5F 52 54 41 43 50 49 5F 00 7A 00 00  // ...._RTACPI_.z..
    0030: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0040: 01 00 5F 52 54 55 45 30 30 5F 00 5C 00 00 02 00  // .._RTUE00_.\....
    0050: 0B DA 81 53 00 00 00 00 30 00 00 00 00 00 00 00  // ...S....0.......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 01 00 5F 41 55 58 4D 41 43 5F  // ........_AUXMAC_
    0080: 00 26 00 00 00 00 00 00 00 00 01 00 00 00 00 00  // .&..............
    0090: 00 00 01 00 00 00 B0 22 7A 73 53 06 00 00        // ......."zsS...


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EF
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-BPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036 338] Software Licensing Structure : \
    33 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    B0 30 C9 51 D1 55 00 00 03 00 00 00 00 00 00 00 \
    4C 4D 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    D0 30 C9 51 D1 55 00 00 03 00 00 00 00 00 00 00 \
    4D 4D 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    F0 30 C9 51 D1 55 00 00 03 00 00 00 00 00 00 00 \
    4D 53 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    10 31 C9 51 D1 55 00 00 04 00 00 00 00 00 00 00 \
    4D 44 53 54 00 00 00 00 21 00 00 00 00 00 00 00 \
    30 31 C9 51 D1 55 00 00 03 00 00 00 00 00 00 00 \
    4D 53 44 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    50 31 C9 51 D1 55 00 00 03 00 00 00 00 00 00 00 \
    4D 53 4B 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    70 31 C9 51 D1 55 00 00 03 00 00 00 00 00 00 00 \
    2B 30 35 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    90 31 C9 51 D1 55 00 00 03 00 00 00 00 00 00 00 \
    45 45 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \
    45 45 53 54 00 00 00 00 41 09 00 00 00 00 00 00 \
    E0 AC 1F 0D E0 7F 00 00 E0 AC 1F 0D E0 7F 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 EF 48 50 51 4F 45 4D  // SLICv.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 01 00 00 00 48 50 20 20  // SLIC-BPC....HP  
    0020: 01 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD  // [.`V.X.....\.O..
    0050: 1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87  // ..........Y...>.
    0060: 31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D  // 1..t..;.[...|9..
    0070: 7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21  // |"..*....m.....!
    0080: 96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38  // ...h..DE><....78
    0090: 57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3  // W........~.@.Q:.
    00A0: 02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0  // .H...r.Bx.G.T...
    00B0: 93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6  // ...........2..T.
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F  // ............HPQO
    00D0: 45 4D 53 4C 49 43 2D 42 50 43 57 49 4E 44 4F 57  // EMSLIC-BPCWINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 33 06 D7 20 8A 0A 63 95 08 94  // ......3.. ..c...
    0100: A9 60 30 37 CE 9F E8 B9 7B 07 DD CF 72 B3 0B E4  // .`07....{...r...
    0110: 0C 88 79 3C E8 46 01 E8 8B E0 60 F3 63 18 DE 7B  // ..y<.F....`.c..{
    0120: 5C BB A9 53 FE B1 C1 D4 82 67 5B 6C 13 45 9E 66  // \..S.....g[l.E.f
    0130: 49 23 CC 33 09 92 76 FA 31 70 35 F1 57 F8 BA A9  // I#.3..v.1p5.W...
    0140: 56 6F 3F 41 84 A5 3A E9 CD 6C 67 43 9B 70 91 7F  // Vo?A..:..lgC.p..
    0150: B4 06 F8 26 E2 FC 19 46 E5 F6 D7 66 0C 2D 73 99  // ...&...F...f.-s.
    0160: BA 94 38 64 D7 24 98 EB DA 39 64 C8 D3 8C 36 87  // ..8d.$...9d...6.
    0170: FD E5 47 BB A6 B8                                // ..G...


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "STD3", 0x00000001)
{
    External (_SB_.PCI0.BUSB.SAT1, DeviceObj)
    External (_SB_.PCI0.BUSB.SATA, DeviceObj)

    OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
    Field (SMIC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x36A), 
        SMIB,   8
    }

    OperationRegion (SSMI, SystemIO, SMIB, 0x02)
    Field (SSMI, AnyAcc, NoLock, Preserve)
    {
        SMIW,   16
    }

    Scope (\_SB)
    {
        Name (D0S0, One)
        Name (D3S0, One)
        Name (D0S1, One)
        Name (D3S1, One)
        Name (STDS, Zero)
        PowerResource (P0S0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0S0) /* \_SB_.D0S0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D0S0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0S0 = Zero
            }
        }

        PowerResource (P3S0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D3S0) /* \_SB_.D3S0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D3S0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D3S0 = Zero
            }
        }

        PowerResource (P0S1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0S1) /* \_SB_.D0S1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D0S1 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0S1 = Zero
            }
        }

        PowerResource (P3S1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D3S1) /* \_SB_.D3S1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D3S1 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D3S1 = Zero
            }
        }
    }

    Scope (\_SB.PCI0.BUSB.SATA)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0S0
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3S0
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((STDS == One))
            {
                Return (0x03)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((STDS == One))
            {
                SMIW = 0xD6
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((STDS == One))
            {
                SMIW = 0xD5
            }
        }
    }

    Scope (\_SB.PCI0.BUSB.SAT1)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0S1
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3S1
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((STDS == One))
            {
                Return (0x03)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((STDS == One))
            {
                SMIW = 0x01D6
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((STDS == One))
            {
                SMIW = 0x01D5
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "HP    ", "OPALPWD", 0x00000001)
{
    External (_SB_.PCI0.GP24, DeviceObj)
    External (_SB_.PCI0.GP24.NVME, DeviceObj)
    External (_SB_.SSMI, MethodObj)    // 5 Arguments

    Scope (\_SB)
    {
        OperationRegion (PM80, SystemMemory, 0xFED80380, 0x10)
        Field (PM80, AnyAcc, NoLock, Preserve)
        {
            SI3R,   1
        }
    }

    Scope (\_SB.PCI0.GP24)
    {
        OperationRegion (ONVS, SystemMemory, 0xB40D6000, 0x10)
        Field (ONVS, AnyAcc, NoLock, Preserve)
        {
            SMIN,   8
        }

        PowerResource (P0NV, 0x00, 0x0000)
        {
            Name (D0NV, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0NV) /* \_SB_.PCI0.GP24.P0NV.D0NV */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If (SI3R)
                {
                    \_SB.SSMI (SMIN, Zero, Zero, Zero, Zero)
                    SI3R = Zero
                }

                D0NV = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0NV = Zero
            }
        }
    }

    Scope (\_SB.PCI0.GP24.NVME)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0NV
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            P0NV
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P0NV
        })
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.PCI0.BUSA.XHC0, DeviceObj)
    External (_SB_.PCI0.BUSA.XHC1, DeviceObj)
    External (_SB_.PCI0.GP12, DeviceObj)
    External (_SB_.PCI0.GP13, DeviceObj)
    External (_SB_.PWRB, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)

    Scope (\_SB)
    {
        OperationRegion (P000, SystemMemory, 0xFED80300, 0x04)
        Field (P000, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            SMBA,   8
        }
    }

    Method (MSTP, 1, Serialized)
    {
        Local0 = (Arg0 - 0x0C00)
        M000 (Local0)
    }

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUF0, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullDefault, 0x1388,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x002C
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003A
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003B
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0011
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0018
                    }
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0031
                    }
            })
            Return (BUF0) /* \_SB_.GPIO._AEI.BUF0 */
        }

        OperationRegion (ECRM, EmbeddedControl, Zero, 0xFF)
        Field (ECRM, ByteAcc, NoLock, Preserve)
        {
            Offset (0xCC), 
            PBCN,   8
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = PBCN /* \_SB_.GPIO.PBCN */
                    Local0 &= One
                    If ((Local0 == One))
                    {
                        MSTP (0x3900)
                        Notify (\_SB.PWRB, 0x80) // Status Change
                    }
                }
                Case (0x02)
                {
                    MSTP (0x3902)
                }
                Case (0x11)
                {
                    MSTP (0x3917)
                    Notify (\_SB.PCI0.GP13, 0x02) // Device Wake
                }
                Case (0x18)
                {
                    MSTP (0x3918)
                    Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
                }
                Case (0x31)
                {
                    MSTP (0x3949)
                    Local0 = ((SMBA * 0x0100) + 0x20)
                    OperationRegion (ASFA, SystemIO, Local0, 0x10)
                    Field (ASFA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x0A), 
                        ASTS,   8
                    }

                    If (((ASTS & 0x04) == 0x04))
                    {
                        Notify (\_SB.PWRB, 0x80) // Status Change
                    }

                    ASTS = 0xFF
                }
                Case (0x3A)
                {
                    MSTP (0x3958)
                    Notify (\_SB.PCI0.BUSA.XHC0, 0x02) // Device Wake
                }
                Case (0x3B)
                {
                    MSTP (0x3959)
                    Notify (\_SB.PCI0.BUSA.XHC1, 0x02) // Device Wake
                }
                Case (0x3D)
                {
                    MSTP (0x3961)
                }
                Case (0x3E)
                {
                    MSTP (0x3961)
                }

            }
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 1, "HP", "HPNBCONV", 0x00001000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.KBBL, FieldUnitObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.WMIV.GVWE, MethodObj)    // 2 Arguments
    External (CDP1, UnknownObj)
    External (RAFB, IntObj)
    External (RCWG, IntObj)
    External (RFCR, IntObj)
    External (RVFB, IntObj)

    Scope (\_GPE)
    {
        Method (RFBL, 0, NotSerialized)
        {
            Local0 = \CDP1 /* External reference */
            Local0 += One
            \CDP1 = Local0
            If ((RVFB == One))
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PCI0.LPCB.EC0.KBBL = 0xFF
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            If ((RAFB == One))
            {
                If ((RCWG != Zero))
                {
                    \_SB.SGOV (\RCWG, Zero)
                    Sleep (0xC8)
                    \_SB.SGOV (\RCWG, One)
                }
            }

            \_SB.WMIV.GVWE (0x1C, Zero)
            \_SB.CAGS (RFCR)
        }
    }

    Scope (\_SB)
    {
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100) {})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x03, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x04,  // ........
            /* 0050 */  0x04, 0xFF, 0xFF, 0x02, 0x00, 0x01, 0x02, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0060 */  0x00, 0x00, 0x00, 0x05, 0x05, 0xFF, 0xFF, 0x03,  // ........
            /* 0068 */  0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A013)
                CreateWordField (Arg1, 0x02, A014)
                CreateDWordField (Arg1, 0x04, A015)
                Local0 = Buffer (0x0100) {}
                CreateWordField (Local0, 0x00, A016)
                A016 = A013 /* \_SB_.ALIB.A013 */
                CreateWordField (Local0, 0x02, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateDWordField (Local0, 0x04, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                A018 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A018 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A019 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A022 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A024 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A025 (Arg1)
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18) {}
                CreateDWordField (Local7, 0x00, A026)
                CreateDWordField (Local7, 0x04, A027)
                CreateDWordField (Local7, 0x08, A028)
                CreateDWordField (Local7, 0x0C, A029)
                CreateDWordField (Local7, 0x10, A030)
                CreateDWordField (Local7, 0x14, A031)
                A026 = 0x00
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A011 (0x26, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18) {}
                CreateDWordField (Local6, 0x00, A005)
                CreateDWordField (Local6, 0x04, A006)
                CreateDWordField (Local6, 0x08, A007)
                CreateDWordField (Local6, 0x0C, A008)
                CreateDWordField (Local6, 0x10, A009)
                CreateDWordField (Local6, 0x14, A010)
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 (0x25, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                Local6 = Buffer (0x18) {}
                CreateDWordField (Local6, 0x00, A032)
                CreateDWordField (Local6, 0x04, A033)
                CreateDWordField (Local6, 0x08, A034)
                CreateDWordField (Local6, 0x0C, A035)
                CreateDWordField (Local6, 0x10, A036)
                CreateDWordField (Local6, 0x14, A037)
                A032 = 0x00
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                A038 (Arg1)
            }

            Return (0x00)
        }

        Method (A022, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A089 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A090 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A016)
            CreateByteField (Local7, 0x02, A040)
            CreateByteField (Local7, 0x03, A091)
            A016 = 0x04
            A040 = 0x00
            If ((Local2 == 0x00))
            {
                A091 = 0x00
            }
            Else
            {
                A091 = 0x01
            }

            Return (Local7)
        }

        Method (A089, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A084 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A084 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A084 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A084 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A084 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A084 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A084 (Arg1))
            }
        }

        Method (A090, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A085 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A019, 1, NotSerialized)
        {
            AD00 = Arg0
            A004 ()
        }

        Method (A023, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A024, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A039, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100) {}
            CreateWordField (Local7, 0x00, A016)
            A016 = 0x03
            CreateByteField (Local7, 0x02, A040)
            A040 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A040 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A040 = 0x01
                Return (Local7)
            }

            A041 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A042 ()
            A040 = 0x02
            Return (Local7)
        }

        Method (A043, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A042 ()
        }

        Method (A044, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A045, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A046, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A047 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A042 ()
            AP0B = Local1
            Local7 = Buffer (0x0100) {}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A048, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A041, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                If ((A049 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A050 (Local0)
                        A051 (Local0, Local1)
                    }
                    Else
                    {
                        A051 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A052, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A054, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A055 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A042, 0, NotSerialized)
        {
            A054 ()
            A052 ()
            If ((AP02 != AP01))
            {
                A012 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                Local2 = A056 (Local0)
                If ((Local1 != Local2))
                {
                    A057 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A057 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A057, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A058 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A058 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A058 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A058 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A058 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A058 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A058 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A058 (Arg1))
            }
        }

        Method (A056, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A059 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A059 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A059 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A059 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A059 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A059 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A059 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A059 ())
            }
        }

        Method (A053, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 ())
            }
        }

        Method (A055, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 ())
            }
        }

        Method (A050, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A062 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A062 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A062 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A062 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A062 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A062 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A062 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A062 ())
            }
        }

        Method (A051, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A063 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A063 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A063 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A063 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A063 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A063 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A063 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A063 (Arg1))
            }
        }

        Method (A049, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A064 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A064 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A064 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A064 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A064 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A064 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A064 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A064 (Arg1))
            }
        }

        Method (A047, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A065 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A065 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A065 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A065 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A065 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A065 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A065 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A065 ())
            }
        }

        OperationRegion (A120, SystemMemory, AGRB, 0x1000)
        Field (A120, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A121,   32
        }

        BankField (A120, A121, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A118,   32
        }

        BankField (A120, A121, 0x03B10564, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A111,   32
        }

        BankField (A120, A121, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A112,   32
        }

        BankField (A120, A121, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A113,   32
        }

        BankField (A120, A121, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A114,   32
        }

        BankField (A120, A121, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A115,   32
        }

        BankField (A120, A121, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A116,   32
        }

        BankField (A120, A121, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A117,   32
        }

        BankField (A120, A121, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A094,   32
        }

        BankField (A120, A121, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A102,   32
        }

        BankField (A120, A121, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A120, A121, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A120, A121, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A095,   32
        }

        BankField (A120, A121, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A096,   32
        }

        BankField (A120, A121, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A097,   32
        }

        BankField (A120, A121, 0x11243280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A098,   32
        }

        BankField (A120, A121, 0x11244280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A099,   32
        }

        BankField (A120, A121, 0x11245280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A100,   32
        }

        BankField (A120, A121, 0x11246280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A101,   32
        }

        Method (A092, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A073 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A073 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A073 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A073 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A073 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A073 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A073 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A073 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A073 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A073 (Arg1))
            }
        }

        Method (A093, 2, NotSerialized)
        {
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000B0300
                }

                Local1 = A094 /* \_SB_.A094 */
                Local1 &= 0xFF00FCFF
                A094 = (Local0 | Local1)
                Local1 = A094 /* \_SB_.A094 */
                A094 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0x00400000 | Local1)
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0x00400000 | Local1)
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0x00400000 | Local1)
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0x00400000 | Local1)
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0x00400000 | Local1)
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0x00400000 | Local1)
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0x00400000 | Local1)
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0x00400000 | Local1)
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0x00400000 | Local1)
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0x00400000 | Local1)
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0xFFBFFFFF & Local1)
                }
            }
        }

        Method (A003, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A092 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A093 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A011, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A105)
            CreateDWordField (Arg1, 0x04, A106)
            CreateDWordField (Arg1, 0x08, A107)
            CreateDWordField (Arg1, 0x0C, A108)
            CreateDWordField (Arg1, 0x10, A109)
            CreateDWordField (Arg1, 0x14, A110)
            A111 = 0x00
            While ((A111 != 0x00)) {}
            A112 = A105 /* \_SB_.A011.A105 */
            A113 = A106 /* \_SB_.A011.A106 */
            A114 = A107 /* \_SB_.A011.A107 */
            A115 = A108 /* \_SB_.A011.A108 */
            A116 = A109 /* \_SB_.A011.A109 */
            A117 = A110 /* \_SB_.A011.A110 */
            A118 = Arg0
            While ((A111 == 0x00)) {}
        }

        Method (A087, 5, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg0
            A006 = Arg1
            A007 = Arg2
            A008 = Arg3
            A011 (0x09, Local7)
        }

        Method (A025, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A119)
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            While ((Local0 < A119))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                If ((Local1 == 0x01))
                {
                    A005 = Local2
                    A011 (0x18, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A005 = Local2
                    A011 (0x19, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A005 = Local2
                    A011 (0x14, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A005 = Local2
                    A011 (0x15, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A005 = Local2
                    A011 (0x16, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A005 = Local2
                    A011 (0x17, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A005 = Local2
                    A011 (0x20, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A005 = Local2
                    A011 (0x1A, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A005 = Local2
                    A011 (0x1C, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A005 = Local2
                    A011 (0x1E, Local7)
                }

                If ((Local1 == 0x0E))
                {
                    A005 = Local2
                    A011 (0x1B, Local7)
                }

                If ((Local1 == 0x0F))
                {
                    A005 = Local2
                    A011 (0x1F, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A011 (0x26, Local7)
                        }
                        Else
                        {
                            A011 (0x25, Local7)
                        }
                    }
                }

                If ((Local1 == 0x11))
                {
                    A005 = Local2
                    A011 (0x1D, Local7)
                }

                If ((Local1 == 0x12))
                {
                    A005 = Local2
                    A011 (0x5E, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A005 = Local2
                    A011 (0x21, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A005 = Local2
                    A011 (0x36, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A005 = Local2
                    A011 (0x37, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A005 = Local2
                    A011 (0x38, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A005 = Local2
                    A011 (0x39, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A005 = Local2
                    A011 (0x3A, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A005 = Local2
                    A011 (0x3B, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A005 = Local2
                    A011 (0x3C, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A005 = Local2
                    A011 (0x3D, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A005 = Local2
                    A011 (0x3E, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A005 = Local2
                    A011 (0x3F, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A005 = Local2
                    A011 (0x40, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A005 = Local2
                    A011 (0x41, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A005 = Local2
                    A011 (0x42, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A005 = Local2
                    A011 (0x43, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A005 = Local2
                    A011 (0x53, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR0.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR0.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR1.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR1.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR2.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR2.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR3.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR3.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR4.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR4.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR5.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR5.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR6.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR6.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR7.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR7.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR8.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR8.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR8.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR8.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR9.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR9.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR9.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR9.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A122, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A123 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A076, 3, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg1
            A006 = Arg2
            A011 (Arg0, Local7)
        }

        Method (A123, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A074 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A074 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A074 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A074 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A074 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A074 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A074 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A074 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A074 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A074 (Arg1))
            }
        }

        Method (A038, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((Local1 == 0x00))
            {
                A005 = Local2
                A122 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A005 = Local2
                A122 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A005 = Local2
                A011 (0x25, Local7)
            }

            If ((Local1 == 0x03))
            {
                A005 = Local2
                A011 (0x26, Local7)
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A003 (Local0, Local1)
        }

        Method (A004, 0, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((AD00 == 0x00))
            {
                A011 (0x11, Local7)
            }
            Else
            {
                A011 (0x12, Local7)
            }
        }

        Method (A012, 2, NotSerialized)
        {
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0.BUSA.ACP_, DeviceObj)
    External (_SB_.PCI0.BUSA.HDAU, DeviceObj)
    External (_SB_.PCI0.BUSA.HDEF, DeviceObj)

    Scope (\_SB.PCI0.BUSA.ACP)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                Zero, 
                Zero
            })
        }
    }

    Scope (\_SB.PCI0.BUSA.HDEF)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                Zero, 
                Zero
            })
        }
    }

    Scope (\_SB.PCI0.BUSA.HDAU)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                Zero, 
                Zero
            })
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 1, "HP    ", "NVTEC", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ACPR, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.ADP_, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.BDC_, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.BDV_, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CLID, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Method (EC10, 0, NotSerialized)
        {
            Local0 = \_SB.PCI0.LPCB.EC0.CLID /* External reference */
            Return (Local0)
        }

        Method (EC11, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ADP /* External reference */
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC12, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ACPR /* External reference */
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC13, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Local1 = \_SB.PCI0.LPCB.EC0.BDV /* External reference */
                Local2 = \_SB.PCI0.LPCB.EC0.BDC /* External reference */
                Local0 = (Local1 * Local2)
                Divide (Local0, 0x000F4240, Local3, Local0)
                If ((Local3 >= 0x0007A120))
                {
                    Local0++
                }
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0.BUSA.XHC0, DeviceObj)
    External (_SB_.PCI0.BUSA.XHC1, DeviceObj)
    External (MSTP, MethodObj)    // 1 Arguments

    Scope (\_SB.PCI0.BUSA.XHC0)
    {
        Name (D0U0, One)
        Name (D3U0, Zero)
        PowerResource (P0U0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                MSTP (0x3C05)
                Return (D0U0) /* \_SB_.PCI0.BUSA.XHC0.D0U0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                MSTP (0x3C06)
                D0U0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                MSTP (0x3C08)
                D0U0 = Zero
            }
        }

        PowerResource (P3U0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                MSTP (0x3C0A)
                Return (D3U0) /* \_SB_.PCI0.BUSA.XHC0.D3U0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                MSTP (0x3C0B)
                D3U0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                MSTP (0x3C0D)
                D3U0 = Zero
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U0
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3U0
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            MSTP (0x3C04)
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            MSTP (0x3C01)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            MSTP (0x3C03)
        }
    }

    Scope (\_SB.PCI0.BUSA.XHC1)
    {
        Name (D0U1, One)
        Name (D3U1, Zero)
        PowerResource (P0U1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                MSTP (0x3D05)
                Return (D0U1) /* \_SB_.PCI0.BUSA.XHC1.D0U1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                MSTP (0x3D06)
                D0U1 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                MSTP (0x3D08)
                D0U1 = Zero
            }
        }

        PowerResource (P3U1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                MSTP (0x3D0A)
                Return (D3U1) /* \_SB_.PCI0.BUSA.XHC1.D3U1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                MSTP (0x3D0B)
                D3U1 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                MSTP (0x3D0D)
                D3U1 = Zero
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U1
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3U1
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            MSTP (0x3D04)
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            MSTP (0x3D01)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            MSTP (0x3D03)
        }
    }
}



SSDT17
------
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)

    Scope (\_SB.PCI0)
    {
        Device (P010)
        {
            Name (_ADR, 0x00010000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P020)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P080)
        {
            Name (_ADR, 0x00080000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P180)
        {
            Name (_ADR, 0x00180000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P181)
        {
            Name (_ADR, 0x00180001)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P182)
        {
            Name (_ADR, 0x00180002)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P183)
        {
            Name (_ADR, 0x00180003)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P184)
        {
            Name (_ADR, 0x00180004)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P185)
        {
            Name (_ADR, 0x00180005)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P186)
        {
            Name (_ADR, 0x00180006)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P187)
        {
            Name (_ADR, 0x00180007)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }
    }
}



SSDT18
------
DefinitionBlock ("", "SSDT", 2, "HPQOEM", "Tpm2Tabl", 0x00001000)
{
    External (GSWS, MethodObj)    // 1 Arguments

    Scope (\_SB)
    {
        Device (TPM)
        {
            Name (_HID, "IFX0785")  // _HID: Hardware ID
            Noop
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            OperationRegion (TPMR, SystemMemory, 0xFED40000, 0x5000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                ACC0,   8, 
                Offset (0x08), 
                INTE,   32, 
                INTV,   8, 
                Offset (0x10), 
                INTS,   32, 
                INTF,   32, 
                STS0,   32, 
                Offset (0x24), 
                FIFO,   32, 
                Offset (0x30), 
                TID0,   32
            }

            OperationRegion (TNVS, SystemMemory, 0xB40BA000, 0x2F)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                UCRQ,   32, 
                IRQN,   32, 
                SFRB,   8
            }

            Name (RESS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000001,
                    0x00000002,
                    0x00000003,
                    0x00000004,
                    0x00000005,
                    0x00000006,
                    0x00000007,
                    0x00000008,
                    0x00000009,
                    0x0000000A,
                }
            })
            Name (RESL, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000001,
                    0x00000002,
                    0x00000003,
                    0x00000004,
                    0x00000005,
                    0x00000006,
                    0x00000007,
                    0x00000008,
                    0x00000009,
                    0x0000000A,
                    0x0000000B,
                    0x0000000C,
                    0x0000000D,
                    0x0000000E,
                    0x0000000F,
                }
            })
            Name (RES0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y00)
                {
                    0x0000000C,
                }
            })
            Name (RES1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If ((IRQN == Zero))
                {
                    Return (RES1) /* \_SB_.TPM_.RES1 */
                }
                Else
                {
                    CreateDWordField (RES0, \_SB.TPM._Y00._INT, LIRQ)  // _INT: Interrupts
                    LIRQ = IRQN /* \_SB_.TPM_.IRQN */
                    Return (RES0) /* \_SB_.TPM_.RES0 */
                }
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                If ((IRQN != Zero))
                {
                    CreateDWordField (Arg0, 0x11, IRQ0)
                    CreateDWordField (RES0, \_SB.TPM._Y00._INT, LIRQ)  // _INT: Interrupts
                    LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    IRQN = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    CreateBitField (Arg0, 0x79, ITRG)
                    CreateBitField (RES0, \_SB.TPM._Y00._HE, LTRG)  // _HE_: High-Edge
                    LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    CreateBitField (Arg0, 0x7A, ILVL)
                    CreateBitField (RES0, \_SB.TPM._Y00._LL, LLVL)  // _LL_: Low Level
                    LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                    If ((((TID0 & 0x0F) == Zero) || ((TID0 & 0x0F
                        ) == 0x0F)))
                    {
                        If ((IRQ0 < 0x10))
                        {
                            INTV = (IRQ0 & 0x0F)
                        }

                        If ((ITRG == One))
                        {
                            INTE |= 0x10
                        }
                        Else
                        {
                            INTE &= 0xFFFFFFEF
                        }

                        If ((ILVL == Zero))
                        {
                            INTE |= 0x08
                        }
                        Else
                        {
                            INTE &= 0xFFFFFFF7
                        }
                    }
                }
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                If ((IRQN == Zero))
                {
                    Return (RES1) /* \_SB_.TPM_.RES1 */
                }
                ElseIf ((SFRB == Zero))
                {
                    Return (RESL) /* \_SB_.TPM_.RESL */
                }
                Else
                {
                    Return (RESS) /* \_SB_.TPM_.RESS */
                }
            }

            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        GSWS (MCIN)
                    }
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ACC0 == 0xFF))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (HINF, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                0x02, 
                                Zero
                            }
                        })
                        If ((_STA () == Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM_.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg1 [Zero])
                        PPRM = Zero
                        PPIP = 0x02
                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [One] = PPRQ /* \_SB_.TPM_.PPRQ */
                        Return (TPM2) /* \_SB_.TPM_.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        GSWS (PPIN)
                        TPM3 [One] = LPPR /* \_SB_.TPM_.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM_.PPRP */
                        Return (TPM3) /* \_SB_.TPM_.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg1 [Zero])
                        PPRM = Zero
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg1 [One])
                        }

                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        UCRQ = DerefOf (Arg1 [Zero])
                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (TMCI, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        MORD = DerefOf (Arg1 [Zero])
                        MCIP = One
                        GSWS (MCIN)
                        Return (MRET) /* \_SB_.TPM_.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg2))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT19
------
DefinitionBlock ("", "SSDT", 2, "HP    ", "PwrCtlEv", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.PSSB, FieldUnitObj)
    External (_SB_.WMIV.GVWE, MethodObj)    // 2 Arguments
    External (ECRG, IntObj)

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        OperationRegion (HPSF, SystemMemory, 0xB40B7000, 0x00000003)
        Field (HPSF, AnyAcc, Lock, Preserve)
        {
            PSCF,   8, 
            BCIF,   8, 
            BCSC,   8
        }

        Name (PSSS, Zero)
        Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (ECRG)
            {
                Local0 = (PSSS & One)
                Local1 = (\_SB.PCI0.LPCB.EC0.PSSB & One)
                Local2 = (PSSS & 0x02)
                Local3 = (\_SB.PCI0.LPCB.EC0.PSSB & 0x02)
                Local4 = (PSSS & 0x10)
                Local5 = (\_SB.PCI0.LPCB.EC0.PSSB & 0x10)
                If (((Local0 != Local1) && (Local0 == Zero)))
                {
                    \_SB.WMIV.GVWE (0x0F, Zero)
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local4 != Local5) && (Local4 == Zero)))
                {
                    \_SB.WMIV.GVWE (0x0F, 0x03)
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local0 != Local1) && (Local0 == One)))
                {
                    \_SB.WMIV.GVWE (0x0F, One)
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local2 != Local3) && (Local2 == 0x02)))
                {
                    If (!BCIF)
                    {
                        \_SB.WMIV.GVWE (0x10, Zero)
                    }

                    BCIF = Zero
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local2 != Local3) && (Local2 == Zero)))
                {
                    If (!BCIF)
                    {
                        \_SB.WMIV.GVWE (0x10, One)
                    }

                    BCIF = Zero
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "HP    ", "ShmTable", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB, DeviceObj)

    Scope (\_SB.PCI0.LPCB)
    {
        Device (NSHM)
        {
            Name (IOBA, 0x00000200)
            Name (IOLN, 0x00000080)
            Name (MEBA, 0xFEDF1000)
            Name (MELN, 0x00001000)
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x1000)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0x00,               // Length
                    _Y00)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y01)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y00._MIN, IMIN)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y00._MAX, IMAX)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, \_SB.PCI0.LPCB.NSHM._Y00._LEN, ILEN)  // _LEN: Length
                IMIN = IOBA /* \_SB_.PCI0.LPCB.NSHM.IOBA */
                IMAX = IOBA /* \_SB_.PCI0.LPCB.NSHM.IOBA */
                ILEN = IOLN /* \_SB_.PCI0.LPCB.NSHM.IOLN */
                CreateDWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y01._BAS, MBAS)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y01._LEN, MLEN)  // _LEN: Length
                MBAS = MEBA /* \_SB_.PCI0.LPCB.NSHM.MEBA */
                MLEN = MELN /* \_SB_.PCI0.LPCB.NSHM.MELN */
                Return (BUF0) /* \_SB_.PCI0.LPCB.NSHM.BUF0 */
            }
        }
    }
}



SSDT20
------
DefinitionBlock ("", "SSDT", 1, "HP", "HPCONDEV", 0x00001000)
{
    Scope (\_GPE)
    {
    }

    Scope (\_SB)
    {
    }
}



SSDT21
------
DefinitionBlock ("", "SSDT", 2, "HP    ", "UcsiAcpi", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRM, OpRegionObj)
    External (ECRM, MethodObj)    // Warning: Unknown method, guessing 4 arguments

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Field (ECRM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x1B), 
            UCOS,   8, 
            UDAT,   8
        }

        Method (RRMB, 1, Serialized)
        {
            Debug = "Enter RRMB"
            Name (RBUF, Buffer (Arg0) {})
            Local0 = Zero
            While ((Local0 < Arg0))
            {
                RBUF [Local0] = Zero
                Local0++
            }

            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                {
                    Return (Zero)
                }

                UNL2 [Zero] = "RRMByte"
                Local0 = Zero
                While ((Local0 < Arg0))
                {
                    RBUF [Local0] = UDAT /* \_SB_.PCI0.LPCB.EC0_.UDAT */
                    Local0++
                }

                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }
            Else
            {
                UNL2 [Zero] = "RRMByte-no ECREG?"
                Debug = "RRMB No ECREG"
            }

            Debug = "Exit RRMB"
            Return (RBUF) /* \_SB_.PCI0.LPCB.EC0_.RRMB.RBUF */
        }

        Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Debug = "Enter Q27"
            UNL1 = 0xC027
            \_SB.UBTC.UQDC ()
            Debug = "Exit Q27"
            UNL1 = 0xCF27
        }
    }

    Scope (\_SB)
    {
        Name (UNL1, Zero)
        Name (UNL2, Buffer (0x20) {})
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "USB Type-C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Name (UBCB, 0xB40D0000)
            Name (UBCL, 0x00001000)
            Name (CRS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y00)
            })
            Mutex (UMUT, 0x00)
            Name (UTE1, Zero)
            Mutex (UMU1, 0x00)
            Name (UOBF, Buffer (0x1A) {})
            Name (UTE2, Zero)
            Mutex (UMU2, 0x00)
            OperationRegion (USBC, SystemMemory, UBCB, 0x30)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.UBTC._Y00._BAS, CBAS)  // _BAS: Base Address
                CBAS = UBCB /* \_SB_.UBTC.UBCB */
                Return (CRS) /* \_SB_.UBTC.CRS_ */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Debug = "Enter UCSI _DSM"
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    Debug = "Arg2 = "
                    Debug = Arg2
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            UNL1 = 0x0D50
                            Debug = "Exit UCSI _DSM Arg2=0"
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            UNL1 = 0x0D51
                            \_SB.UBTC.CCI0 = Zero
                            \_SB.UBTC.CCI1 = Zero
                            \_SB.UBTC.CCI2 = Zero
                            \_SB.UBTC.CCI3 = Zero
                            If ((\_SB.UBTC.CTL0 == One))
                            {
                                If ((URST () == One))
                                {
                                    \_SB.UBTC.CCI0 = Zero
                                    \_SB.UBTC.CCI1 = Zero
                                    \_SB.UBTC.CCI2 = Zero
                                    \_SB.UBTC.CCI3 = 0x08
                                    Notify (\_SB.UBTC, 0x80) // Status Change
                                }
                            }
                            Else
                            {
                                UOTE ()
                            }
                        }
                        Case (0x02)
                        {
                            UNL1 = 0x0D52
                        }
                        Case (0x03)
                        {
                            Debug = "Exit UCSI _DSM Arg2=3"
                            Return (Zero)
                        }

                    }
                }

                Debug = "Exit UCSI _DSM"
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (UCL1, 0, Serialized)
            {
                Debug = "Enter UCL1"
                UNL1 = 0xA001
                Name (ZBUF, Buffer (0x1A) {})
                Local0 = Zero
                While ((Local0 < 0x1A))
                {
                    ZBUF [Local0] = Zero
                    Local0++
                }

                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = 0xFFFFFFFFFFFFFFFE
                UTE1 &= Local0
                Release (UMU1)
                If (Acquire (UMU2, 0xFFFF))
                {
                    Return (Zero)
                }

                \_SB.UBTC.UOBF = ZBUF /* \_SB_.UBTC.UCL1.ZBUF */
                UTE2 = Zero
                Release (UMU2)
                Debug = "Exit UCL1"
                Return (Zero)
            }

            Method (UCRT, 1, Serialized)
            {
                Debug = "Enter UCRT"
                Local0 = Zero
                Local3 = Zero
                UETO (Arg0)
                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local1 = (UTE1 & One)
                Release (UMU1)
                If ((Local1 == One))
                {
                    If (!Acquire (UMUT, 0x03E8))
                    {
                        If (Acquire (UMU2, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        Local2 = UTE2 /* \_SB_.UBTC.UTE2 */
                        Release (UMU2)
                        Debug = "Resignal EC to fetch cmd"
                        If ((UDHX (Local2) != One))
                        {
                            Local3 = One
                        }

                        Release (UMUT)
                    }
                    Else
                    {
                        UNL1 = 0xF031
                        Debug = "UCRT UMUT timeout"
                        Local3 = One
                    }
                }

                If ((Local3 == One))
                {
                    Debug = "UCRT bad exit"
                    Local0 = One
                    \_SB.UBTC.UCL1 ()
                }

                Debug = "Exit UCRT"
                Return (Local0)
            }

            Method (UQDC, 0, Serialized)
            {
                Debug = "Enter UQDC"
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Local5 = Zero
                    If (Acquire (UMU1, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = UTE1 /* \_SB_.UBTC.UTE1 */
                    Release (UMU1)
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    UNL1 = 0xC001
                    Local2 = \_SB.PCI0.LPCB.EC0.UCOS
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    Debug = "UCOS = "
                    Debug = Local2
                    Switch (ToInteger (Local2))
                    {
                        Case (Zero)
                        {
                            Local1 = (Local0 & One)
                            If ((Local1 != Zero))
                            {
                                Debug = "ASL slow execution timeout"
                                \_SB.UBTC.UCL1 ()
                            }

                            Return (One)
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Case (0x02)
                        {
                            UNL1 = 0xC002
                            Local1 = (Local0 & One)
                            If ((Local1 != Zero))
                            {
                                Local3 = UTTE ()
                                If ((Local3 == One))
                                {
                                    UNL2 [Zero] = "UQ-0"
                                    Debug = "Exit UQDC Cmd Fetched"
                                    Return (One)
                                }

                                UNL2 [Zero] = "UQDC() failout."
                                UNL1 = 0xF002
                                Local5 = One
                            }
                            Else
                            {
                                Debug = "Panic cleanup"
                                Local5 = One
                            }
                        }
                        Case (0x04)
                        {
                            UNL1 = 0xC003
                            UNL2 [Zero] = "UQ-F"
                            If ((UCRT (Local2) == One))
                            {
                                UNL2 [Zero] = "FOOK - FullResp override."
                            }
                        }
                        Case (0x05)
                        {
                            UNL1 = 0xC003
                            UNL2 [Zero] = "UQ-F"
                            If ((UCRT (Local2) == One))
                            {
                                UNL2 [Zero] = "FOOK - AbbrevResp override."
                            }
                        }
                        Case (0x07)
                        {
                            UNL2 [Zero] = "EC indicate cmdFail"
                            UNL1 = 0xF003
                            Local5 = One
                        }
                        Default
                        {
                            UNL1 = 0xF004
                            Local5 = One
                        }

                    }
                }
                Else
                {
                    Debug = "UQDC Fail ECREG"
                    Local5 = One
                }

                If ((Local5 == One))
                {
                    UNL1 = 0xF005
                    UNL2 [Zero] = "BigErr!Cleanup."
                    Debug = "UQDC Exit Big Error Cleanup"
                    \_SB.UBTC.UCL1 ()
                    Return (Zero)
                }

                Debug = "Exit UQDC"
                Return (One)
            }

            Method (UTTE, 0, Serialized)
            {
                Debug = "Enter UTTE"
                Local0 = One
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL1 = 0xF0F0
                    Debug = "UTTE UMUT timeout"
                    Local0 = Zero
                }
                Else
                {
                    If (\_SB.PCI0.LPCB.EC0.ECRG)
                    {
                        UNL1 = 0xA003
                        If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (Acquire (UMU2, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        Local1 = Zero
                        While ((Local1 < UTE2))
                        {
                            \_SB.PCI0.LPCB.EC0.UDAT = DerefOf (UOBF [Local1])
                            Local1++
                        }

                        Debug = "UTTE Work done"
                        Release (UMU2)
                        Release (\_SB.PCI0.LPCB.EC0.ECMX)
                        UNL1 = 0xA004
                    }
                    Else
                    {
                        UNL2 [Zero] = "UTTE fail ECREG"
                        UNL1 = 0xF006
                        Debug = "UTTE fail ECREG"
                        Local0 = Zero
                    }

                    UCL1 ()
                }

                Release (UMUT)
                Debug = "Exit UTTE"
                Return (Local0)
            }

            Method (UDCT, 0, Serialized)
            {
                Debug = "Enter UDCT"
                UNL1 = 0xA011
                If ((DerefOf (UOBF [0x03]) != Zero))
                {
                    Debug = "Exit UDCT Long"
                    Return (0x1A)
                }

                Debug = "Exit UDCT short"
                Return (0x0A)
            }

            Method (UBCP, 0, Serialized)
            {
                Debug = "Enter UBCP"
                UOBF [Zero] = \_SB.UBTC.RSV1
                UOBF [One] = \_SB.UBTC.RSV2
                UOBF [0x02] = \_SB.UBTC.CTL0
                UOBF [0x03] = \_SB.UBTC.CTL1
                UOBF [0x04] = \_SB.UBTC.CTL2
                UOBF [0x05] = \_SB.UBTC.CTL3
                UOBF [0x06] = \_SB.UBTC.CTL4
                UOBF [0x07] = \_SB.UBTC.CTL5
                UOBF [0x08] = \_SB.UBTC.CTL6
                UOBF [0x09] = \_SB.UBTC.CTL7
                UOBF [0x0A] = \_SB.UBTC.MGO0
                UOBF [0x0B] = \_SB.UBTC.MGO1
                UOBF [0x0C] = \_SB.UBTC.MGO2
                UOBF [0x0D] = \_SB.UBTC.MGO3
                UOBF [0x0E] = \_SB.UBTC.MGO4
                UOBF [0x0F] = \_SB.UBTC.MGO5
                UOBF [0x10] = \_SB.UBTC.MGO6
                UOBF [0x11] = \_SB.UBTC.MGO7
                UOBF [0x12] = \_SB.UBTC.MGO8
                UOBF [0x13] = \_SB.UBTC.MGO9
                UOBF [0x14] = \_SB.UBTC.MGOA
                UOBF [0x15] = \_SB.UBTC.MGOB
                UOBF [0x16] = \_SB.UBTC.MGOC
                UOBF [0x17] = \_SB.UBTC.MGOD
                UOBF [0x18] = \_SB.UBTC.MGOE
                UOBF [0x19] = \_SB.UBTC.MGOF
                Debug = "Exit UBCP"
            }

            Method (UDHX, 1, Serialized)
            {
                Debug = "Enter UDHX"
                Local0 = Zero
                Local1 = 0x03
                If ((Arg0 == 0x1A))
                {
                    Local1 = 0x04
                }

                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    \_SB.PCI0.LPCB.EC0.UCOS = Local1
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    UNL1 = 0xA020
                    Local0 = One
                }
                Else
                {
                    UNL2 [Zero] = "UDHX-Fail ECREG"
                    UNL1 = 0xF008
                    Debug = "UDHX fail ECREG"
                }

                Debug = "Exit UDHX"
                Return (Local0)
            }

            Method (UOTE, 0, Serialized)
            {
                Debug = "Enter UOTE"
                Local3 = One
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL1 = 0xF011
                    Debug = "UMUT dumping command"
                    Return (Zero)
                }

                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = (UTE1 & One)
                If ((Local0 == Zero))
                {
                    UBCP ()
                    UTE1 |= One
                    Local2 = UDCT ()
                    If (Acquire (UMU2, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    UTE2 = Local2
                    Release (UMU2)
                    If ((UDHX (Local2) != One))
                    {
                        UNL2 [Zero] = "UOTE-Fail ECREG"
                        UNL1 = 0xF008
                        Debug = "UOTE Fail ECREG"
                        Local3 = Zero
                    }
                }
                Else
                {
                    Debug = "OUTCMD already started"
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    Local4 = \_SB.PCI0.LPCB.EC0.UCOS
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    If ((Local4 == Zero))
                    {
                        Debug = "EC is illegally IDLE cleanup"
                        Local3 = Zero
                    }
                }

                Release (UMU1)
                If ((Local3 == Zero))
                {
                    UCL1 ()
                }

                Release (UMUT)
                Debug = "Exit UOTE"
                Return (Local3)
            }

            Method (UETO, 1, Serialized)
            {
                Debug = "Enter UETO"
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL2 [Zero] = "UETO-failUMUTacquire"
                    UNL1 = 0xCF01
                    Debug = "UETO UMUT timeout"
                    Return (Zero)
                }

                UNL1 = 0xCF00
                If ((Arg0 == 0x04))
                {
                    Local1 = 0x18
                    UNL2 [Zero] = "FullUETO"
                    UNL1 = 0xCF10
                }
                ElseIf ((Arg0 == 0x05))
                {
                    Local1 = 0x08
                    UNL2 [Zero] = "AbbrvUETO"
                    UNL1 = 0xCF11
                }

                Name (BUFF, Buffer (Local1) {})
                BUFF = \_SB.PCI0.LPCB.EC0.RRMB (Local1)
                \_SB.UBTC.VER1 = DerefOf (BUFF [Zero])
                \_SB.UBTC.VER2 = DerefOf (BUFF [One])
                \_SB.UBTC.RSV1 = DerefOf (BUFF [0x02])
                \_SB.UBTC.RSV2 = DerefOf (BUFF [0x03])
                \_SB.UBTC.CCI0 = DerefOf (BUFF [0x04])
                \_SB.UBTC.CCI1 = DerefOf (BUFF [0x05])
                \_SB.UBTC.CCI2 = DerefOf (BUFF [0x06])
                \_SB.UBTC.CCI3 = DerefOf (BUFF [0x07])
                If ((0x18 == Local1))
                {
                    UNL1 = 0xCF13
                    \_SB.UBTC.MGI0 = DerefOf (BUFF [0x08])
                    \_SB.UBTC.MGI1 = DerefOf (BUFF [0x09])
                    \_SB.UBTC.MGI2 = DerefOf (BUFF [0x0A])
                    \_SB.UBTC.MGI3 = DerefOf (BUFF [0x0B])
                    \_SB.UBTC.MGI4 = DerefOf (BUFF [0x0C])
                    \_SB.UBTC.MGI5 = DerefOf (BUFF [0x0D])
                    \_SB.UBTC.MGI6 = DerefOf (BUFF [0x0E])
                    \_SB.UBTC.MGI7 = DerefOf (BUFF [0x0F])
                    \_SB.UBTC.MGI8 = DerefOf (BUFF [0x10])
                    \_SB.UBTC.MGI9 = DerefOf (BUFF [0x11])
                    \_SB.UBTC.MGIA = DerefOf (BUFF [0x12])
                    \_SB.UBTC.MGIB = DerefOf (BUFF [0x13])
                    \_SB.UBTC.MGIC = DerefOf (BUFF [0x14])
                    \_SB.UBTC.MGID = DerefOf (BUFF [0x15])
                    \_SB.UBTC.MGIE = DerefOf (BUFF [0x16])
                    \_SB.UBTC.MGIF = DerefOf (BUFF [0x17])
                }

                Notify (\_SB.UBTC, 0x80) // Status Change
                Release (UMUT)
                UNL2 [Zero] = "xUETO"
                UNL1 = 0xCFFF
                Debug = "Exit UETO"
            }

            Method (URST, 0, Serialized)
            {
                Debug = "Enter URST"
                Local0 = Zero
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    \_SB.PCI0.LPCB.EC0.UCOS = 0x07
                    Local1 = 0x23
                    Local2 = \_SB.PCI0.LPCB.EC0.UCOS
                    While (((ToInteger (Local2) != Zero) && (Local1 > Zero)))
                    {
                        Sleep (0x0A)
                        Local2 = \_SB.PCI0.LPCB.EC0.UCOS
                        Local1--
                    }

                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    Debug = "UCOS = "
                    Debug = Local2
                    If ((ToInteger (Local2) == Zero))
                    {
                        UNL1 = 0xA030
                        Local0 = One
                    }
                }
                Else
                {
                    UNL2 [Zero] = "URST-Fail ECREG"
                    UNL1 = 0xF013
                    Debug = "URST fail ECREG"
                }

                Debug = "Exit URST"
                Return (Local0)
            }
        }
    }
}



SSDT22
------
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF, DeviceObj)

    Scope (\_SB.PLTF)
    {
        Name (_LPI, Package (0x04)  // _LPI: Low Power Idle States
        {
            Zero, 
            Zero, 
            One, 
            Package (0x0A)
            {
                0x000F4240, 
                0xC350, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "S0i3"
            }
        })
    }
}



SSDT23
------
DefinitionBlock ("", "SSDT", 1, "HP", "AMDTPL", 0x00001000)
{
    External (_SB_.I2CC, DeviceObj)
    External (_SB_.IM71, FieldUnitObj)
    External (_SB_.IM72, FieldUnitObj)
    External (_SB_.THID, MethodObj)    // 0 Arguments
    External (G03E, FieldUnitObj)
    External (THHA, FieldUnitObj)
    External (TPLE, FieldUnitObj)
    External (TPSA, FieldUnitObj)

    Scope (\_SB.I2CC)
    {
        Device (TPL0)
        {
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CC",
                    0x00, ResourceConsumer, _Y00, Exclusive,
                    )
            })
            CreateWordField (SBFB, \_SB.I2CC.TPL0._Y00._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.I2CC.TPL0._Y00._SPE, SPED)  // _SPE: Speed
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, Exclusive, PullUp, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            CreateWordField (SBFG, 0x17, INT1)
            Name (_ADR, One)  // _ADR: Address
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Local1 = G03E /* External reference */
                CreateWordField (Local1, 0x08, PNID)
                CreateWordField (Local1, 0x0A, DNID)
                If ((PNID == 0xAF06))
                {
                    If ((DNID == 0x232D))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x333D))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x203D))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x20ED))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x518B))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x9B8B))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0xA68B))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x569E))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x9B95))
                    {
                        Return ("ELAN2513")
                    }
                }
                ElseIf ((PNID == 0xE509))
                {
                    If ((DNID == 0x07F5))
                    {
                        Return ("GTCH7503")
                    }
                    ElseIf ((DNID == 0x07EF))
                    {
                        Return ("GTCH7503")
                    }
                    ElseIf ((DNID == 0x07F0))
                    {
                        Return ("GTCH7503")
                    }
                    ElseIf ((DNID == 0x07EE))
                    {
                        Return ("GTCH7503")
                    }
                    ElseIf ((DNID == 0x08A2))
                    {
                        Return ("GTCH7503")
                    }
                    ElseIf ((DNID == 0x08BF))
                    {
                        Return ("GTCH7503")
                    }
                    ElseIf ((DNID == 0x08CB))
                    {
                        Return ("GTCH7503")
                    }
                    ElseIf ((DNID == 0x0999))
                    {
                        Return ("GTCH7503")
                    }
                    ElseIf ((DNID == 0x0803))
                    {
                        Return ("GTCH7503")
                    }
                    ElseIf ((DNID == 0x0A49))
                    {
                        Return ("GTCH7503")
                    }
                }
                ElseIf ((PNID == 0xAE0D))
                {
                    If ((DNID == 0x1392))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x14F5))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x14F4))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x1505))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x1407))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x13AB))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x1518))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x13BC))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x141E))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x1531))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x13CA))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x143D))
                    {
                        Return ("ELAN2513")
                    }
                }
                ElseIf ((PNID == 0xCF26))
                {
                    If ((DNID == 0x057D))
                    {
                        Return ("ELAN2513")
                    }
                    ElseIf ((DNID == 0x8C5F))
                    {
                        Return ("ELAN2513")
                    }
                }

                If (CondRefOf (\_SB.THID))
                {
                    Return (\_SB.THID ())
                }

                Return ("ELAN2513")
            }

            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                \_SB.IM71 = One
                \_SB.IM72 = One
                BADR = TPSA /* External reference */
                SPED = 0x00061A80
                INT1 = 0x5C
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (THHA) /* External reference */
                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (TPLE) /* External reference */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (ConcatenateResTemplate (SBFB, SBFG))
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)
    External (MSEE, MethodObj)    // 1 Arguments
    External (MSTP, MethodObj)    // 1 Arguments
    External (TPOS, UnknownObj)

    Scope (\_SB.PCI0)
    {
        Name (_DEP, Package (0x01)  // _DEP: Dependencies
        {
            \_SB.PEP
        })
    }

    Scope (\_SB)
    {
        Device (PEP)
        {
            Name (_HID, "AMDI0005")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (DEVL, Package (0x03)
            {
                Zero, 
                0x27, 
                Package (0x27)
                {
                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C000", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C001", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C002", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C003", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C004", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C005", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C006", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C007", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C008", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C009", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00A", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00B", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00C", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00D", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00E", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00F", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP11", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP12", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP13", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP21", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP22", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP23", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP24", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP25", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP26", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP27", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP21.NIC", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP13.NCRD", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP12.PWAN", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP24.NVME", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.BUSA.GFX0", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.BUSA.HDEF", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.BUSA.ACP", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.BUSA.HDAU", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.BUSA.XHC0", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.BUSA.XHC1", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.BUSA.XHC0.RHUB.HS03", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.BUSA.XHC1.RHUB.HS03", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.BUSB.SATA", 
                        Zero, 
                        0x03
                    }
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPOS >= 0x60))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e3f32452-febc-43ce-9039-932122d37721") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            MSTP (0x3E01)
                            Return (DEVL) /* \_SB_.PEP_.DEVL */
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                ElseIf ((Arg0 == ToUUID ("11e00d56-ce64-47ce-837b-1f898f9aa461") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (0x02)
                                    {
                                         0xF9, 0x01                                       // ..
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (0x03)
                        {
                            \MSEE (One)
                            MSTP (0x3E03)
                            Return (Zero)
                        }
                        Case (0x04)
                        {
                            \MSEE (Zero)
                            MSTP (0x3E04)
                            Return (Zero)
                        }
                        Case (0x05)
                        {
                            MSTP (0x3E05)
                            Return (Zero)
                        }
                        Case (0x06)
                        {
                            MSTP (0x3E06)
                            Return (Zero)
                        }
                        Case (0x07)
                        {
                            MSTP (0x3E07)
                            Return (Zero)
                        }
                        Case (0x08)
                        {
                            MSTP (0x3E08)
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Name (SUPP, Zero)
            CreateDWordField (Arg3, Zero, CDW1)
            CreateDWordField (Arg3, 0x04, CDW2)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                SUPP = CDW2 /* \_SB_._OSC.CDW2 */
                SUPP &= 0x00080004
                CDW2 = SUPP /* \_SB_._OSC.SUPP */
                Return (Arg3)
            }
            Else
            {
                CDW1 |= 0x04
                Return (Arg3)
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments

    OperationRegion (CPNV, SystemMemory, 0xB4368018, 0x000100CF)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == One))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, Zero)
        Local3 >>= Local2
        Local3 &= One
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, One)
        Local3 &= (Ones ^ (One << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, One, Local3)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((M085 >= 0x0B))
            {
                If ((M085 >= 0x0D))
                {
                    Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                        0x04), Zero, One))
                }
                Else
                {
                    Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                        0x04), Zero, One))
                }
            }
            Else
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                    0x04), Zero, One))
            }
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            If ((M013 (Local0, Zero, Zero, 0x20) != Ones))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)) {}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)) {}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > Zero))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                ), 0x02, Zero)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > Zero))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                Local6 |= (0x03 << (Local2 << One))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > Zero))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                    Local6 |= (Local3 << (Local2 << One))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05) {})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), Zero, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
        }
        Else
        {
            Local2 = 0x0A
        }

        Local3 = 0x14301000
        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x11180188)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, 0x11180188, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140294 + (Local4 << 0x0C))
            }

            Local3 = M249 (Zero, Zero, Zero, Local2)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local2)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, 0x11180188, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), One, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & One) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (Ones ^ (0x03 << (Local1 << One)))
                Local0 |= (Arg5 << (Local1 << One))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), One, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                One) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local2 = 0x03E8
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                Release (M408)
                Return (Zero)
            }

            Local1 = SMB0 /* \M409.SMB0 */
            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local2 = 0x03E8
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                Release (M408)
                Return (Zero)
            }

            Local1 = SMB0 /* \M410.SMB0 */
            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & One)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, One)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xFF)
        Method (XL0A, 0, NotSerialized)
        {
            Local0 = (\_GPE.M415 & One)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, Zero)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000006A4, 
                0x00000817, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x000005F0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "HP", "HPCAHWID", 0x00001000)
{
    External (FDRS, FieldUnitObj)

    Scope (\_SB)
    {
        Device (FDAD)
        {
            Name (_HID, "HPIC000C")  // _HID: Hardware ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((FDRS == One))
                {
                    If (Ones)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "HP    ", "UcsiCntr", 0x00000001)
{
    External (_SB_.UBTC, DeviceObj)
    External (TPLD, MethodObj)    // 2 Arguments

    Scope (\_SB.UBTC)
    {
        Device (CR01)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (\TPLD (One, 0x03))
            }
        }

        Device (CR02)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (\TPLD (One, 0x04))
            }
        }

        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0.BUSA.ACP_, DeviceObj)
    External (_SB_.PCI0.BUSA.HDEF, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M276, MethodObj)    // 0 Arguments
    External (M277, MethodObj)    // 0 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)

    Name (M278, One)
    Name (M279, One)
    Name (M27A, One)
    Name (APGE, One)
    Name (ACGE, One)
    Method (M276, 0, NotSerialized)
    {
        If ((M27A == Zero))
        {
            M278 = Zero
        }

        If (((M278 == One) || (M279 == One)))
        {
            Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
            Local1 = M019 (Local0, Zero, 0x05, Zero)
            If ((M27A == Zero))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                If ((Local1 != Ones))
                {
                    M000 (0xB4)
                    If ((ACGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x03B10564, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10998, 0xC8)
                        M250 (Zero, Zero, Zero, 0x03B10528, 0x59)
                        Local4 = M249 (Zero, Zero, Zero, 0x03B10564)
                        While ((Local4 == Zero))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x03B10564)
                            If ((Local4 != Zero))
                            {
                                Break
                            }
                        }
                    }

                    If ((APGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x0900E784, 0x0103)
                        Local4 = One
                        Local5 = 0x64
                        While (((Local4 != Zero) && Local5))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E784)
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (Zero, Zero, Zero, 0x0900E784, Local4)
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E78C)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (Zero, Zero, Zero, 0x0900E784, Zero)
                        M000 (0xB5)
                    }
                }
            }
        }
    }

    Method (M277, 0, NotSerialized)
    {
        If ((M27A == Zero))
        {
            M278 = Zero
        }

        If (((M278 == Zero) && (M279 == Zero)))
        {
            Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
            Local1 = M019 (Local0, Zero, 0x05, Zero)
            If ((M27A == Zero))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                If ((Local1 != Ones))
                {
                    M000 (0xB6)
                    If ((ACGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x03B10564, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10998, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10528, 0x59)
                        Local4 = M249 (Zero, Zero, Zero, 0x03B10564)
                        While ((Local4 == Zero))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x03B10564)
                            If ((Local4 != Zero))
                            {
                                Break
                            }
                        }
                    }

                    If ((APGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x0900E784, 0x0101)
                        Local4 = One
                        Local5 = 0x64
                        While (((Local4 != 0x02) && Local5))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E784)
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (Zero, Zero, Zero, 0x0900E784, Local4)
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E78C)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (Zero, Zero, Zero, 0x0900E784, Zero)
                        M000 (0xB7)
                    }
                }
            }
        }
    }

    Scope (\_SB.PCI0.BUSA.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M278 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M278 = Zero
            M277 ()
        }

        Method (MSG0, 3, Serialized)
        {
            M000 (0x5511)
            OperationRegion (VARM, SystemIO, 0x80, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            If ((Arg2 != 0x09))
            {
                M000 (0x5518)
                M250 (Zero, Zero, Zero, 0x00058A74, Arg0)
                M250 (Zero, Zero, Zero, 0x00058A54, Arg1)
                M250 (Zero, Zero, Zero, 0x00058A14, Arg2)
                Local0 = M249 (Zero, Zero, Zero, 0x00058A74)
                While ((Local0 == Zero))
                {
                    Local0 = M249 (Zero, Zero, Zero, 0x00058A74)
                    If ((Local0 != Zero))
                    {
                        Break
                    }
                }

                M000 (0x5519)
                Local1 = M249 (Zero, Zero, Zero, 0x00058A54)
                Return (Local1)
            }

            Name (MBOX, Buffer (0x04) {})
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            VARR = Local0
            MBOX = Local0
            CreateWordField (MBOX, Zero, STAS)
            CreateByteField (MBOX, 0x02, CMDI)
            CreateField (MBOX, 0x18, 0x05, RESV)
            CreateBitField (MBOX, 0x1D, RSET)
            CreateBitField (MBOX, 0x1E, RCOV)
            CreateBitField (MBOX, 0x1F, REDY)
            VARR = MBOX /* \_SB_.PCI0.BUSA.ACP_.MSG0.MBOX */
            While (((REDY != One) || (CMDI != Zero)))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                M000 (0x5516)
                VARR = MBOX /* \_SB_.PCI0.BUSA.ACP_.MSG0.MBOX */
            }

            Local0 = Zero
            MBOX = Local0
            REDY = Zero
            CMDI = 0x33
            M000 (0x5514)
            Local0 = MBOX /* \_SB_.PCI0.BUSA.ACP_.MSG0.MBOX */
            VARR = Local0
            M250 (Zero, Zero, Zero, 0x03810570, Local0)
            Sleep (One)
            M000 (0x5515)
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            MBOX = Local0
            VARR = MBOX /* \_SB_.PCI0.BUSA.ACP_.MSG0.MBOX */
            While ((CMDI != Zero))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                M000 (0x5517)
                VARR = MBOX /* \_SB_.PCI0.BUSA.ACP_.MSG0.MBOX */
            }

            If ((STAS != Zero))
            {
                M000 (0x5513)
            }

            M000 (0x5512)
            Return (Local0)
        }
    }

    Scope (\_SB.PCI0.BUSA.HDEF)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M279 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M279 = Zero
            M277 ()
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "HP", "HPADNBWL", 0x00001000)
{
    External (_SB_.PCI0.GP13, DeviceObj)
    External (_SB_.PCI0.GP13.NCRD, DeviceObj)
    External (DS21, FieldUnitObj)
    External (DS22, FieldUnitObj)
    External (DS23, FieldUnitObj)
    External (DS24, FieldUnitObj)
    External (DS25, FieldUnitObj)
    External (DS26, FieldUnitObj)
    External (DS27, FieldUnitObj)
    External (DS28, FieldUnitObj)
    External (DS29, FieldUnitObj)
    External (DS2A, FieldUnitObj)
    External (DS31, FieldUnitObj)
    External (DS32, FieldUnitObj)
    External (DS33, FieldUnitObj)
    External (DS34, FieldUnitObj)
    External (DS35, FieldUnitObj)
    External (DS36, FieldUnitObj)
    External (DS37, FieldUnitObj)
    External (DS38, FieldUnitObj)
    External (DS39, FieldUnitObj)
    External (DS3A, FieldUnitObj)
    External (DS41, FieldUnitObj)
    External (DS42, FieldUnitObj)
    External (DS43, FieldUnitObj)
    External (DS44, FieldUnitObj)
    External (DS45, FieldUnitObj)
    External (DS46, FieldUnitObj)
    External (DS47, FieldUnitObj)
    External (DS48, FieldUnitObj)
    External (DS49, FieldUnitObj)
    External (DS4A, FieldUnitObj)
    External (DWNS, FieldUnitObj)
    External (DWRS, FieldUnitObj)
    External (GA20, FieldUnitObj)
    External (GA21, FieldUnitObj)
    External (GA22, FieldUnitObj)
    External (GA23, FieldUnitObj)
    External (GA24, FieldUnitObj)
    External (GA50, FieldUnitObj)
    External (GA51, FieldUnitObj)
    External (GA52, FieldUnitObj)
    External (GA53, FieldUnitObj)
    External (GA54, FieldUnitObj)
    External (GB20, FieldUnitObj)
    External (GB21, FieldUnitObj)
    External (GB22, FieldUnitObj)
    External (GB23, FieldUnitObj)
    External (GB24, FieldUnitObj)
    External (GB50, FieldUnitObj)
    External (GB51, FieldUnitObj)
    External (GB52, FieldUnitObj)
    External (GB53, FieldUnitObj)
    External (GB54, FieldUnitObj)
    External (GC20, FieldUnitObj)
    External (GC21, FieldUnitObj)
    External (GC22, FieldUnitObj)
    External (GC23, FieldUnitObj)
    External (GC24, FieldUnitObj)
    External (GC50, FieldUnitObj)
    External (GC51, FieldUnitObj)
    External (GC52, FieldUnitObj)
    External (GC53, FieldUnitObj)
    External (GC54, FieldUnitObj)
    External (NF2A, FieldUnitObj)
    External (NF2B, FieldUnitObj)
    External (NF2M, FieldUnitObj)
    External (NF5A, FieldUnitObj)
    External (NF5B, FieldUnitObj)
    External (NF5M, FieldUnitObj)
    External (NJ2A, FieldUnitObj)
    External (NJ2B, FieldUnitObj)
    External (NJ2M, FieldUnitObj)
    External (NJ5A, FieldUnitObj)
    External (NJ5B, FieldUnitObj)
    External (NJ5M, FieldUnitObj)
    External (NR2A, FieldUnitObj)
    External (NR2B, FieldUnitObj)
    External (NR2M, FieldUnitObj)
    External (NR5A, FieldUnitObj)
    External (NR5B, FieldUnitObj)
    External (NR5M, FieldUnitObj)
    External (RT00, FieldUnitObj)
    External (RT01, FieldUnitObj)
    External (RT02, FieldUnitObj)
    External (RT03, FieldUnitObj)
    External (RT04, FieldUnitObj)
    External (RT05, FieldUnitObj)
    External (RT06, FieldUnitObj)
    External (RT07, FieldUnitObj)
    External (RT08, FieldUnitObj)
    External (RT09, FieldUnitObj)
    External (RT10, FieldUnitObj)
    External (RT11, FieldUnitObj)
    External (RT12, FieldUnitObj)
    External (RT13, FieldUnitObj)
    External (RT14, FieldUnitObj)
    External (RT15, FieldUnitObj)
    External (RT16, FieldUnitObj)
    External (RT17, FieldUnitObj)
    External (RT18, FieldUnitObj)
    External (RT19, FieldUnitObj)
    External (RTXE, FieldUnitObj)
    External (WGEN, FieldUnitObj)
    External (WGR1, FieldUnitObj)
    External (WGR2, FieldUnitObj)
    External (WGR3, FieldUnitObj)
    External (WGR4, FieldUnitObj)
    External (WRD1, FieldUnitObj)
    External (WRD2, FieldUnitObj)
    External (WTX0, FieldUnitObj)
    External (WTX1, FieldUnitObj)
    External (WTX2, FieldUnitObj)
    External (WTX3, FieldUnitObj)
    External (WTX4, FieldUnitObj)
    External (WTX5, FieldUnitObj)
    External (WTX6, FieldUnitObj)
    External (WTX7, FieldUnitObj)
    External (WTX8, FieldUnitObj)
    External (WTX9, FieldUnitObj)
    External (WTXE, FieldUnitObj)

    Scope (\_SB.PCI0.GP13)
    {
    }

    Scope (\_SB.PCI0.GP13.NCRD)
    {
        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        PowerResource (WLRT, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }

            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                If ((DCAP & 0x10000000))
                {
                    Local0 = DCTR /* \_SB_.PCI0.GP13.NCRD.DCTR */
                    Local0 |= 0x8000
                    DCTR = Local0
                }
            }
        }

        Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
        {
            WLRT
        })
        OperationRegion (RPWL, PCI_Config, Zero, 0x10)
        Field (RPWL, AnyAcc, NoLock, Preserve)
        {
            VNID,   16
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            DerefOf (WRDX [One]) [Zero] = 0x07
            DerefOf (WRDX [One]) [One] = \WRD1 /* External reference */
            DerefOf (WRDX [0x02]) [Zero] = 0x10
            DerefOf (WRDX [0x02]) [One] = \WRD2 /* External reference */
            Return (WRDX) /* \_SB_.PCI0.GP13.NCRD.WRDX */
        }

        Name (WRDY, Package (0x03)
        {
            Zero, 
            Package (0x0C)
            {
                0x07, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x06)
            {
                0x10, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Name (WRDR, Package (0x17)
        {
            0x48, 
            0x50, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Method (WRDS, 0, Serialized)
        {
            DerefOf (WRDY [One]) [One] = \WTXE /* External reference */
            DerefOf (WRDY [One]) [0x02] = \WTX0 /* External reference */
            DerefOf (WRDY [One]) [0x03] = \WTX1 /* External reference */
            DerefOf (WRDY [One]) [0x04] = \WTX2 /* External reference */
            DerefOf (WRDY [One]) [0x05] = \WTX3 /* External reference */
            DerefOf (WRDY [One]) [0x06] = \WTX4 /* External reference */
            DerefOf (WRDY [One]) [0x07] = \WTX5 /* External reference */
            DerefOf (WRDY [One]) [0x08] = \WTX6 /* External reference */
            DerefOf (WRDY [One]) [0x09] = \WTX7 /* External reference */
            DerefOf (WRDY [One]) [0x0A] = \WTX8 /* External reference */
            DerefOf (WRDY [One]) [0x0B] = \WTX9 /* External reference */
            DerefOf (WRDY [0x02]) [One] = \WGEN /* External reference */
            DerefOf (WRDY [0x02]) [0x02] = \WGR1 /* External reference */
            DerefOf (WRDY [0x02]) [0x03] = \WGR2 /* External reference */
            DerefOf (WRDY [0x02]) [0x04] = \WGR3 /* External reference */
            DerefOf (WRDY [0x02]) [0x05] = \WGR4 /* External reference */
            WRDR [0x02] = \RTXE /* External reference */
            WRDR [0x03] = \RT00 /* External reference */
            WRDR [0x04] = \RT01 /* External reference */
            WRDR [0x05] = \RT02 /* External reference */
            WRDR [0x06] = \RT03 /* External reference */
            WRDR [0x07] = \RT04 /* External reference */
            WRDR [0x08] = \RT05 /* External reference */
            WRDR [0x09] = \RT06 /* External reference */
            WRDR [0x0A] = \RT07 /* External reference */
            WRDR [0x0B] = \RT08 /* External reference */
            WRDR [0x0C] = \RT09 /* External reference */
            WRDR [0x0D] = \RT10 /* External reference */
            WRDR [0x0E] = \RT11 /* External reference */
            WRDR [0x0F] = \RT12 /* External reference */
            WRDR [0x10] = \RT13 /* External reference */
            WRDR [0x11] = \RT14 /* External reference */
            WRDR [0x12] = \RT15 /* External reference */
            WRDR [0x13] = \RT16 /* External reference */
            WRDR [0x14] = \RT17 /* External reference */
            WRDR [0x15] = \RT18 /* External reference */
            WRDR [0x16] = \RT19 /* External reference */
            If (CondRefOf (VNID))
            {
                Switch (ToInteger (VNID))
                {
                    Case (0x8086)
                    {
                        Return (WRDY) /* \_SB_.PCI0.GP13.NCRD.WRDY */
                    }
                    Case (0x10EC)
                    {
                        Return (WRDR) /* \_SB_.PCI0.GP13.NCRD.WRDR */
                    }
                    Default
                    {
                        Return (WRDY) /* \_SB_.PCI0.GP13.NCRD.WRDY */
                    }

                }
            }
        }

        Name (EWRY, Package (0x02)
        {
            Zero, 
            Package (0x21)
            {
                0x07, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (EWRD, 0, Serialized)
        {
            DerefOf (EWRY [One]) [One] = \DWRS /* External reference */
            DerefOf (EWRY [One]) [0x02] = \DWNS /* External reference */
            DerefOf (EWRY [One]) [0x03] = \DS21 /* External reference */
            DerefOf (EWRY [One]) [0x04] = \DS22 /* External reference */
            DerefOf (EWRY [One]) [0x05] = \DS23 /* External reference */
            DerefOf (EWRY [One]) [0x06] = \DS24 /* External reference */
            DerefOf (EWRY [One]) [0x07] = \DS25 /* External reference */
            DerefOf (EWRY [One]) [0x08] = \DS26 /* External reference */
            DerefOf (EWRY [One]) [0x09] = \DS27 /* External reference */
            DerefOf (EWRY [One]) [0x0A] = \DS28 /* External reference */
            DerefOf (EWRY [One]) [0x0B] = \DS29 /* External reference */
            DerefOf (EWRY [One]) [0x0C] = \DS2A /* External reference */
            DerefOf (EWRY [One]) [0x0D] = \DS31 /* External reference */
            DerefOf (EWRY [One]) [0x0E] = \DS32 /* External reference */
            DerefOf (EWRY [One]) [0x0F] = \DS33 /* External reference */
            DerefOf (EWRY [One]) [0x10] = \DS34 /* External reference */
            DerefOf (EWRY [One]) [0x11] = \DS35 /* External reference */
            DerefOf (EWRY [One]) [0x12] = \DS36 /* External reference */
            DerefOf (EWRY [One]) [0x13] = \DS37 /* External reference */
            DerefOf (EWRY [One]) [0x14] = \DS38 /* External reference */
            DerefOf (EWRY [One]) [0x15] = \DS39 /* External reference */
            DerefOf (EWRY [One]) [0x16] = \DS3A /* External reference */
            DerefOf (EWRY [One]) [0x17] = \DS41 /* External reference */
            DerefOf (EWRY [One]) [0x18] = \DS42 /* External reference */
            DerefOf (EWRY [One]) [0x19] = \DS43 /* External reference */
            DerefOf (EWRY [One]) [0x1A] = \DS44 /* External reference */
            DerefOf (EWRY [One]) [0x1B] = \DS45 /* External reference */
            DerefOf (EWRY [One]) [0x1C] = \DS46 /* External reference */
            DerefOf (EWRY [One]) [0x1D] = \DS47 /* External reference */
            DerefOf (EWRY [One]) [0x1E] = \DS48 /* External reference */
            DerefOf (EWRY [One]) [0x1F] = \DS49 /* External reference */
            DerefOf (EWRY [One]) [0x20] = \DS4A /* External reference */
            Return (EWRY) /* \_SB_.PCI0.GP13.NCRD.EWRY */
        }

        Name (WGDY, Package (0x02)
        {
            Zero, 
            Package (0x13)
            {
                0x07, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (WGDS, 0, Serialized)
        {
            DerefOf (WGDY [One]) [One] = \NF2M /* External reference */
            DerefOf (WGDY [One]) [0x02] = \NF2A /* External reference */
            DerefOf (WGDY [One]) [0x03] = \NF2B /* External reference */
            DerefOf (WGDY [One]) [0x04] = \NF5M /* External reference */
            DerefOf (WGDY [One]) [0x05] = \NF5A /* External reference */
            DerefOf (WGDY [One]) [0x06] = \NF5B /* External reference */
            DerefOf (WGDY [One]) [0x07] = \NJ2M /* External reference */
            DerefOf (WGDY [One]) [0x08] = \NJ2A /* External reference */
            DerefOf (WGDY [One]) [0x09] = \NJ2B /* External reference */
            DerefOf (WGDY [One]) [0x0A] = \NJ5M /* External reference */
            DerefOf (WGDY [One]) [0x0B] = \NJ5A /* External reference */
            DerefOf (WGDY [One]) [0x0C] = \NJ5B /* External reference */
            DerefOf (WGDY [One]) [0x0D] = \NR2M /* External reference */
            DerefOf (WGDY [One]) [0x0E] = \NR2A /* External reference */
            DerefOf (WGDY [One]) [0x0F] = \NR2B /* External reference */
            DerefOf (WGDY [One]) [0x10] = \NR5M /* External reference */
            DerefOf (WGDY [One]) [0x11] = \NR5A /* External reference */
            DerefOf (WGDY [One]) [0x12] = \NR5B /* External reference */
            Return (WGDY) /* \_SB_.PCI0.GP13.NCRD.WGDY */
        }

        Name (RWGY, Package (0x1E)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Method (RWGS, 0, Serialized)
        {
            RWGY [Zero] = \GA20 /* External reference */
            RWGY [One] = \GA21 /* External reference */
            RWGY [0x02] = \GA22 /* External reference */
            RWGY [0x03] = \GA23 /* External reference */
            RWGY [0x04] = \GA24 /* External reference */
            RWGY [0x05] = \GA50 /* External reference */
            RWGY [0x06] = \GA51 /* External reference */
            RWGY [0x07] = \GA52 /* External reference */
            RWGY [0x08] = \GA53 /* External reference */
            RWGY [0x09] = \GA54 /* External reference */
            RWGY [0x0A] = \GB20 /* External reference */
            RWGY [0x0B] = \GB21 /* External reference */
            RWGY [0x0C] = \GB22 /* External reference */
            RWGY [0x0D] = \GB23 /* External reference */
            RWGY [0x0E] = \GB24 /* External reference */
            RWGY [0x0F] = \GB50 /* External reference */
            RWGY [0x10] = \GB51 /* External reference */
            RWGY [0x11] = \GB52 /* External reference */
            RWGY [0x12] = \GB53 /* External reference */
            RWGY [0x13] = \GB54 /* External reference */
            RWGY [0x14] = \GC20 /* External reference */
            RWGY [0x15] = \GC21 /* External reference */
            RWGY [0x16] = \GC22 /* External reference */
            RWGY [0x17] = \GC23 /* External reference */
            RWGY [0x18] = \GC24 /* External reference */
            RWGY [0x19] = \GC50 /* External reference */
            RWGY [0x1A] = \GC51 /* External reference */
            RWGY [0x1B] = \GC52 /* External reference */
            RWGY [0x1C] = \GC53 /* External reference */
            RWGY [0x1D] = \GC54 /* External reference */
            Return (RWGY) /* \_SB_.PCI0.GP13.NCRD.RWGY */
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : BA
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "EDK2    "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]                     Reserved : 00000000
[028h 0040   8]              Control Address : 0000000000000000
[030h 0048   4]                 Start Method : 00000006

Raw Table Data: Length 52 (0x34)

    0000: 54 50 4D 32 34 00 00 00 03 BA 48 50 51 4F 45 4D  // TPM24.....HPQOEM
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 20 20 20 20  // EDK2    ....    
    0020: 13 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 06 00 00 00                                      // ....


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000D684
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 82
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-BPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 54916 (0xD684)

    0000: 56 46 43 54 84 D6 00 00 01 82 48 50 51 4F 45 4D  // VFCT......HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 01 00 00 00 41 4D 44 00  // SLIC-BPC....AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 36 16 00 00 00 00  // ..........6.....
    0060: 01 00 00 00 00 D6 00 00 55 AA 6B E9 FF 01 00 00  // ........U.k.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: B0 01 00 00 00 00 49 42 4D B8 AE 90 00 00 00 00  // ......IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 86 01 00 00 00 00 00 00 30 32 2F 32 33 2F 32 32  // ........02/23/22
    00C0: 2C 30 36 3A 32 31 3A 30 38 00 00 00 E9 2F 03 00  // ,06:21:08..../..
    00D0: E9 39 03 00 00 00 70 00 31 31 33 2D 52 45 4E 4F  // .9....p.113-RENO
    00E0: 49 52 2D 30 33 37 00 52 45 4E 4F 49 52 00 50 43  // IR-037.RENOIR.PC
    00F0: 49 5F 45 58 50 52 45 53 53 00 30 00 0D 0A 52 65  // I_EXPRESS.0...Re
    0100: 6E 6F 69 72 20 47 65 6E 65 72 69 63 20 56 42 49  // noir Generic VBI
    0110: 4F 53 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // OS              
    0120: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20  //           ..... 
    0150: 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30 31 38  // ...(C) 1988-2018
    0160: 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63 72 6F  // , Advanced Micro
    0170: 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E 00 41  //  Devices, Inc..A
    0180: 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45  // TOMBIOSBK-AMD VE
    0190: 52 30 31 37 2E 30 31 30 2E 30 30 30 2E 30 33 31  // R017.010.000.031
    01A0: 2E 30 30 30 30 30 30 00 52 4E 47 65 6E 65 72 69  // .000000.RNGeneri
    01B0: 63 56 62 69 00 32 33 38 37 33 39 30 20 00 36 30  // cVbi.2387390 .60
    01C0: 33 31 38 37 20 20 00 20 20 20 20 20 20 20 20 00  // 3187  .        .
    01D0: 41 4D 44 5F 52 65 6E 6F 69 72 5F 47 65 6E 65 72  // AMD_Renoir_Gener
    01E0: 69 63 5C 63 6F 6E 66 69 67 2E 68 00 00 00 28 00  // ic\config.h...(.
    01F0: 02 02 41 54 4F 4D 00 C0 02 03 40 01 D5 01 94 00  // ..ATOM....@.....
    0200: 74 03 00 00 00 00 02 10 02 10 B0 01 FA 93 A0 94  // t...............
    0210: 00 00 00 00 00 00 00 00 50 43 49 52 02 10 36 16  // ........PCIR..6.
    0220: 00 00 18 00 00 00 00 03 6B 00 0A 11 00 80 00 00  // ........k.......
    0230: 41 4D 44 20 41 54 4F 4D 42 49 4F 53 00 2E 00 73  // AMD ATOMBIOS...s
    0240: 8B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 1E 06 66  // ...............f
    0270: 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3  // PfQfRfSfUfVfW...
    0280: 14 00 8C 0E 08 00 B2 20 E8 AB 2F 0B C0 75 14 A2  // ....... ../..u..
    0290: 02 00 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // ..f_f^f]f[fZfYfX
    02A0: 07 1F CB E8 C5 30 E8 F3 00 E8 94 2E 32 D2 8D 3E  // .....0......2..>
    02B0: 86 01 89 55 16 E8 81 11 E8 44 11 E8 9B 12 E8 EC  // ...U.....D......
    02C0: 02 E8 C5 28 0B C0 74 0C E8 39 00 E8 9C 56 E8 40  // ...(..t..9...V.@
    02D0: 11 E8 EB 56 E8 A9 00 B4 80 E8 8E 2E 8A C7 66 C1  // ...V..........f.
    02E0: E0 10 8A E3 B0 20 66 A3 AE 90 E8 EB 02 E8 53 11  // ..... f.......S.
    02F0: E8 BB 30 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // ..0f_f^f]f[fZfYf
    0300: 58 07 1F CB 2E 8B 1E 08 00 83 3E 14 03 00 75 04  // X.........>...u.
    0310: 89 1E 12 03 1E 2E 8E 1E 0A 03 9C FA 66 C7 06 08  // ............f...
    0320: 01 65 F0 00 F0 C7 06 40 00 74 03 89 1E 42 00 C7  // .e.....@.t...B..
    0330: 06 B4 01 74 03 89 1E B6 01 C7 06 7C 00 90 5E 89  // ...t.......|..^.
    0340: 1E 7E 00 C7 06 0C 01 A3 62 89 1E 0E 01 C7 06 A8  // .~......b.......
    0350: 04 C8 58 89 1E AA 04 2E 8E 1E 12 03 8B C3 A3 CA  // ..X.............
    0360: 58 A3 DA 58 A3 EC 58 9D 1F C3 50 4D 49 44 74 03  // X..X..X...PMIDt.
    0370: FA 48 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00  // .H..............
    0380: BB 00 00 E8 A6 10 66 C1 E8 10 A3 B6 01 BB 0B 00  // ......f.........
    0390: E8 99 10 8D 3E 86 01 66 89 45 18 C3 66 50 66 52  // ....>..f.E..fPfR
    03A0: 51 56 66 B8 52 54 53 5F BA 80 00 66 EF B0 56 EE  // QVf.RTS_...f..V.
    03B0: B0 42 EE B0 49 EE B0 4F EE B0 53 EE B0 20 EE BE  // .B..I..O..S.. ..
    03C0: 26 01 B9 19 00 AC E6 80 E2 FB 66 B8 44 4E 45 5F  // &.........f.DNE_
    03D0: BA 80 00 66 EF 5E 59 66 5A 66 58 C3 E8 AA 2F 80  // ...f.^YfZfX.../.
    03E0: FC A0 75 05 E8 3D 00 EB 11 80 FC 4F 75 05 E8 97  // ..u..=.....Ou...
    03F0: 44 EB 07 E8 EC 49 EB 02 B4 01 E8 B1 2F CF E8 88  // D....I....../...
    0400: 2F E8 20 00 EB 02 B4 01 E8 A3 2F CB E8 7A 2F 80  // /. ......./..z/.
    0410: FC 4F 75 05 E8 71 44 EB 07 E8 C6 49 EB 02 B4 01  // .Ou..qD....I....
    0420: E8 8B 2F CB 1E 06 66 50 66 51 66 52 66 53 66 55  // ../...fPfQfRfSfU
    0430: 66 56 66 57 0E 1F 3C 04 75 29 2E A1 1A 00 66 C1  // fVfW..<.u)....f.
    0440: E0 10 2E A1 18 00 8D 36 95 00 8A 3C 80 EF 30 B3  // .......6...<..0.
    0450: 02 8B EC 89 5E 0C 89 46 04 66 C1 E8 10 89 46 00  // ....^..F.f....F.
    0460: E9 28 01 3C 05 75 18 E8 00 2D E8 D3 2C 2E A1 08  // .(.<.u...-..,...
    0470: 00 8B EC 89 56 10 89 46 00 89 5E 04 E9 0C 01 3C  // ....V..F..^....<
    0480: 06 75 32 E8 8E 0F 66 D1 E0 8B EC 89 46 14 BB 02  // .u2...f.....F...
    0490: 00 E8 98 0F 88 46 18 E8 82 0F 66 89 46 0C BB 09  // .....F....f.F...
    04A0: 00 E8 88 0F 33 C0 66 89 46 00 2E 8B 16 B6 01 89  // ....3.f.F.......
    04B0: 56 10 E9 D6 00 3C 0B 75 24 0A DB 75 11 B9 80 00  // V....<.u$..u....
    04C0: BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 BD 00 8A C7  // ......^..N......
    04D0: E8 D0 00 E8 34 01 0F 84 A9 00 E9 AE 00 3C 17 75  // ....4........<.u
    04E0: 1D E8 37 12 74 06 E8 95 0D E8 1F 17 E8 EE 09 E8  // ..7.t...........
    04F0: 00 0F 33 C9 8B C8 8B EC 89 4E 14 E9 8D 00 3C 18  // ..3......N....<.
    0500: 75 45 0A FF 75 10 E8 BE 11 8B EC 89 46 0C E8 3B  // uE..u.......F..;
    0510: 0A 89 4E 10 EB 75 E8 02 12 75 68 BB 00 1C E8 06  // ..N..u...uh.....
    0520: 2E 66 0B C0 74 5D 23 C9 74 59 E8 D6 11 BE 00 1C  // .f..t]#.tY......
    0530: E8 26 0F 74 4E BE 00 1C B0 40 E8 75 0F E8 87 11  // .&.tN....@.u....
    0540: 8B EC 89 46 0C EB 44 3C 82 75 1A 80 FB 05 75 15  // ...F..D<.u....u.
    0550: 0A FF 75 0A E8 CB 10 8B EC 89 46 14 EB 2D E8 98  // ..u.......F..-..
    0560: 10 74 18 EB 26 3C 8E 75 12 80 FF 01 74 08 80 FF  // .t..&<.u....t...
    0570: 02 75 08 80 C1 02 E8 F1 10 EB 10 8B EC C6 46 19  // .u............F.
    0580: 02 EB 0F 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88  // ......F....2....
    0590: 66 19 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // f.f_f^f]f[fZfYfX
    05A0: 07 1F C3 51 8A C8 B8 01 00 D3 E0 59 C3 E8 24 2E  // ...Q.......Y..$.
    05B0: C3 0C 01 C3 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05  // ....PQ...C.3.B..
    05C0: E6 42 E4 61 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8  // .B.a.....a......
    05D0: 33 29 E6 61 59 58 C3 00 1E 56 0E 1F 80 3E 02 00  // 3).aYX...V...>..
    05E0: 80 76 05 C6 06 02 00 80 8A 0E 02 00 C1 E1 09 FC  // .v..............
    05F0: C6 06 21 00 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4  // ..!..3.2........
    0600: FE C4 88 26 21 00 5E 1F C3 00 57 0B C0 75 0F E8  // ...&!.^...W..u..
    0610: 34 0C 74 25 E8 24 00 F6 C3 04 74 F3 EB 11 8B C8  // 4.t%.$....t.....
    0620: E8 66 25 23 C1 74 12 E8 11 00 F6 C3 04 74 0A 5F  // .f%#.t.......t._
    0630: 8D 5C 28 E8 4C 06 0B F6 C3 5F C3 50 E8 E9 0B E8  // .\(.L...._.P....
    0640: B8 24 E8 C6 24 0A C9 74 69 0A ED 74 10 8A CD B5  // .$..$..ti..t....
    0650: 02 E8 34 28 B1 02 8D 9C 48 01 E8 6E 2C E8 76 02  // ..4(....H..n,.v.
    0660: F6 C3 04 74 08 E8 FB 0C E8 29 23 74 45 8D 5C 28  // ...t.....)#tE.\(
    0670: E8 69 00 56 83 C6 08 E8 F5 22 5E 80 FD 02 75 11  // .i.V....."^...u.
    0680: 51 E8 16 18 59 80 FB 00 75 4D 51 B5 08 E8 E8 05  // Q...Y...uMQ.....
    0690: 59 8A DD 33 C9 E8 07 17 0A C0 75 3B E8 37 02 8A  // Y..3......u;.7..
    06A0: EB 8D 5C 28 80 CD 02 E8 3B 00 74 03 80 CD 04 E8  // ..\(....;.t.....
    06B0: C6 05 8D 9C A6 00 E8 6E 2C 0A C0 74 1A 56 83 C6  // .......n,..t.V..
    06C0: 08 E8 AB 22 5E 8A DD B9 80 00 E8 D2 16 E8 D8 04  // ..."^...........
    06D0: 74 05 33 C9 E8 A1 05 E8 FC 01 58 C3 51 B9 49 00  // t.3.......X.Q.I.
    06E0: E8 D1 27 59 C3 51 E8 1A 00 75 14 E8 B9 01 3C 01  // ..'Y.Q...u....<.
    06F0: 75 0D B9 20 00 E8 27 00 75 05 80 C9 01 EB 02 33  // u.. ..'.u......3
    0700: C9 59 C3 53 E8 20 2C 66 3D 00 FF FF FF 75 0E 83  // .Y.S. ,f=....u..
    0710: C3 04 E8 12 2C 66 3D FF FF FF 00 75 00 5B C3 50  // ....,f=....u.[.P
    0720: 52 32 D2 E8 01 2C 02 D0 02 D4 66 C1 E8 10 02 D0  // R2...,....f.....
    0730: 02 D4 83 C3 04 E2 EC 0A D2 5A 58 C3 E8 E9 0A 8D  // .........ZX.....
    0740: 9C 4C 01 E8 39 01 E8 8D 01 B5 13 F6 C3 08 75 0C  // .L..9.........u.
    0750: E8 10 0C 8A EA 80 FD 13 75 02 B5 03 66 50 8D 9C  // ........u...fP..
    0760: B8 02 66 33 C0 8A C5 E8 1D 2B 66 58 A9 DD 0F 74  // ..f3.....+fX...t
    0770: 55 E8 62 01 F6 C3 08 74 0F E8 0F 05 8D 5C 28 E8  // U.b....t.....\(.
    0780: 04 01 75 04 E8 72 00 C3 B5 02 E8 23 01 E8 46 01  // ..u..r.....#..F.
    0790: F6 C3 04 74 21 8D 5C 28 E8 49 01 E8 94 03 74 05  // ...t!.\(.I....t.
    07A0: B5 03 E8 0B 01 E8 68 04 E8 21 01 80 FD 00 75 48  // ......h..!....uH
    07B0: B5 02 E8 0D 01 C3 8D 9C 68 01 B8 00 55 E8 64 11  // ........h...U.d.
    07C0: B5 02 E8 FD 00 C3 A9 02 00 74 2D B5 04 E8 E0 00  // .........t-.....
    07D0: E8 03 01 F6 C3 08 74 03 E8 B0 04 8D 9C 68 01 56  // ......t......h.V
    07E0: E8 0B 29 8B F7 E8 68 04 5E E8 A8 28 E8 D3 00 8D  // ..)...h.^..(....
    07F0: 5C 28 E8 C8 28 E8 18 04 C3 B5 01 E8 B2 00 B5 02  // \(..(...........
    0800: E8 BF 00 E8 D0 00 F6 C3 04 75 10 8D 9C 68 01 B8  // .........u...h..
    0810: 00 55 E8 0F 11 B5 02 E8 17 00 C3 E8 C6 00 B5 02  // .U..............
    0820: 8D 5C 28 E8 6E 00 75 02 B5 01 E8 04 00 E8 E0 03  // .\(.n.u.........
    0830: C3 8D 9C B4 02 B1 02 E8 91 2A B5 02 E8 83 00 C3  // .........*......
    0840: 8D 9C 4C 01 E8 38 00 E8 8C 00 F6 C3 04 74 23 8D  // ..L..8.......t#.
    0850: 5C 28 E8 8F 00 E8 96 28 8D 9C 68 01 06 0E 07 B9  // \(.....(..h.....
    0860: 07 00 E8 89 26 07 E8 63 00 E8 F7 0A 8D 5C 28 E8  // ....&..c.....\(.
    0870: 87 28 8D 5C 28 E8 25 28 B8 02 00 E8 BE FE C3 B9  // .(.\(.%(........
    0880: 61 00 E8 2F 26 C3 53 81 C3 05 01 E8 99 2A 24 06  // a../&.S......*$.
    0890: 3C 02 5B C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18  // <.[....=..u.S...
    08A0: E8 84 2A 5B A8 01 C3 53 83 C3 12 E8 79 2A 5B C3  // ..*[...S....y*[.
    08B0: 8D 9C B4 02 32 C9 E8 12 2A C3 8D 9C B4 02 E8 66  // ....2...*......f
    08C0: 2A C3 8D 9C B4 02 B1 01 E8 00 2A C3 8D 9C B4 02  // *.........*.....
    08D0: B1 01 E8 0E 2A C3 66 50 8D 9C 48 01 E8 48 2A 8A  // ....*.fP..H..H*.
    08E0: D8 66 58 C3 55 57 51 B9 08 00 BD 00 00 BB 08 00  // .fX.UWQ.........
    08F0: 2B D9 D1 E3 8D 58 4E E8 2D 2A E8 E3 01 E2 EE 8D  // +....XN.-*......
    0900: 5C 4B E8 22 2A B9 03 00 8B D0 BF 5C 09 85 55 06  // \K."*......\..U.
    0910: 74 17 66 8B 05 8D 9A F4 01 E8 6B 29 8B 45 04 8D  // t.f.......k).E..
    0920: 9A F8 01 E8 79 29 83 C5 08 83 C7 08 E2 DF 8D 7C  // ....y).........|
    0930: 5E B9 04 00 33 ED 8B DF E8 EC 29 0B C0 74 09 E8  // ^...3.....)..t..
    0940: 5D 01 E8 97 00 83 C5 1C 83 C7 12 E2 E9 55 32 ED  // ]............U2.
    0950: E8 6F FF 8D 5C 28 E8 4E FF 3D 01 04 75 10 83 C3  // .o..\(.N.=..u...
    0960: 14 E8 C3 29 24 70 C0 E8 04 8A E8 E8 54 FF 5D 8D  // ...)$p......T.].
    0970: 9C A6 00 E8 B1 29 0A C0 74 46 8D 9C A8 00 E8 A6  // .....)..tF......
    0980: 29 3C 02 75 3B 66 C1 E8 10 3C 04 72 33 8D 9C A8  // )<.u;f...<.r3...
    0990: 00 32 E4 03 D8 8B FB B9 04 00 8B DF E8 88 29 0B  // .2............).
    09A0: C0 74 15 E8 F9 00 A9 80 00 75 0D E8 2E 00 83 C5  // .t.......u......
    09B0: 1C 55 58 83 F8 70 73 08 83 C7 12 49 0B C9 75 DA  // .UX..ps....I..u.
    09C0: 59 5F 5D C3 20 03 58 02 3C 00 01 00 00 04 00 03  // Y_]. .X.<.......
    09D0: 3C 00 00 08 80 02 E0 01 3C 00 20 00 51 8D 1D E8  // <.......<. .Q...
    09E0: 45 29 8D 9A 68 01 E8 B6 28 8D 5D 02 E8 38 29 8D  // E)..h...(.]..8).
    09F0: 9A 6A 01 E8 89 00 8D 5D 05 E8 2B 29 8D 9A 6E 01  // .j.....]..+)..n.
    0A00: E8 7C 00 8D 5D 08 E8 1E 29 8B C8 8A DC 66 C1 C8  // .|..]...)....f..
    0A10: 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A EC C0 ED 06  // ................
    0A20: 8A FC C0 EF 04 80 E7 03 80 E4 0F C0 E4 04 0A D4  // ................
    0A30: 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A 74  // ..?............t
    0A40: 01 E8 5B 28 8D 9A 72 01 8B C1 E8 52 28 8D 9A 76  // ..[(..r....R(..v
    0A50: 01 33 C0 8A C6 E8 47 28 8D 9A 78 01 33 C0 8A C2  // .3....G(..x.3...
    0A60: E8 3C 28 8D 5D 0C E8 BE 28 8D 9A 7A 01 E8 0F 00  // .<(.]...(..z....
    0A70: 8D 5D 0F E8 B1 28 8D 9A 7E 01 E8 22 28 59 C3 8B  // .]...(..~.."(Y..
    0A80: C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0 ED  // ...f............
    0A90: 04 8B C1 E8 09 28 83 C3 02 8B C2 E8 01 28 C3 8D  // .....(.......(..
    0AA0: 5D 11 E8 82 28 8A E0 BA 06 00 C0 E8 07 74 03 80  // ]...(........t..
    0AB0: CA 80 8A C4 C0 E8 03 24 03 3C 02 75 03 80 CA 40  // .......$.<.u...@
    0AC0: 3C 03 75 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD A8  // <.u.......t.....
    0AD0: 02 74 03 80 E2 FB 8B C2 8D 9A 80 01 E8 C0 27 C3  // .t............'.
    0AE0: 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A F8  // <.t=.....$?.<...
    0AF0: 01 E8 AB 27 0F B6 C2 83 C0 1F C1 E0 03 8D 9A F4  // ...'............
    0B00: 01 E8 9B 27 0F B6 DE C1 EB 06 C1 E3 02 2E F7 A7  // ...'............
    0B10: BC 0A 2E F7 B7 BA 0A 8D 9A F6 01 E8 81 27 83 C5  // .............'..
    0B20: 08 C3 10 00 0A 00 04 00 03 00 05 00 04 00 10 00  // ................
    0B30: 09 00 8D 9C A6 00 E8 EE 27 0A C0 74 1F 8D 9C A8  // ........'..t....
    0B40: 00 51 B1 03 E8 18 00 59 0B DB 74 10 E8 D8 27 32  // .Q.....Y..t...'2
    0B50: C0 66 3D 00 03 0C 00 75 03 0B DB C3 33 DB C3 66  // .f=....u....3..f
    0B60: 50 52 E8 C2 27 3C 02 75 39 80 FC 03 72 34 66 C1  // PR..'<.u9...r4f.
    0B70: E8 10 32 E4 3C 04 76 2A 03 C3 8B D0 83 C3 04 3B  // ..2.<.v*.......;
    0B80: DA 73 1F E8 A1 27 8A E0 80 E4 E0 C0 EC 05 24 1F  // .s...'........$.
    0B90: 38 CC 74 08 32 E4 FE C0 03 D8 EB E3 0B DB 5A 66  // 8.t.2.........Zf
    0BA0: 58 C3 33 DB 5A 66 58 C3 51 8D 9C A6 00 E8 77 27  // X.3.ZfX.Q.....w'
    0BB0: 0A C0 74 1B 8D 9C A8 00 B1 12 E8 18 00 74 10 E8  // ..t..........t..
    0BC0: 65 27 66 C1 E8 10 80 E4 07 75 04 B0 01 EB 02 32  // e'f......u.....2
    0BD0: C0 0A C0 59 C3 66 50 52 E8 4C 27 3C 70 75 2B 66  // ...Y.fPR.L'<pu+f
    0BE0: C1 E8 10 32 E4 83 C3 05 03 C3 8B D0 3B DA 73 1A  // ...2........;.s.
    0BF0: E8 34 27 38 C8 74 0D 66 C1 E8 10 32 E4 83 C0 03  // .4'8.t.f...2....
    0C00: 03 D8 EB E8 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3  // ......ZfX.3.ZfX.
    0C10: 57 66 51 8D 9C 68 01 8B FB 8B DF E8 3D 00 0B C9  // WfQ..h......=...
    0C20: 74 0B 66 8B D1 E8 AA 0F 83 C7 1C EB EC 66 59 5F  // t.f..........fY_
    0C30: C3 50 53 51 B9 07 00 53 8B DA E8 EA 26 83 F8 00  // .PSQ...S....&...
    0C40: 5B 74 09 66 C1 E3 10 8B DA E8 7D 22 59 5B 58 C3  // [t.f......}"Y[X.
    0C50: 51 53 B9 07 00 E8 8A 22 5B 59 C3 66 50 53 83 C3  // QS....."[Y.fPS..
    0C60: 06 E8 C3 26 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8  // ...&[..f...S....
    0C70: B5 26 8B C8 5B 66 58 C3 8D 9C 48 01 32 C9 E8 4A  // .&..[fX...H.2..J
    0C80: 26 C3 57 B9 20 00 E8 65 22 5F C3 E8 83 01 66 8B  // &.W. ..e"_....f.
    0C90: CA 66 52 E8 CD 06 E8 FB 1C 66 5A 74 10 E8 43 06  // .fR......fZt..C.
    0CA0: B3 00 E8 A8 19 66 3B CA 73 03 66 8B D1 8D 9C D0  // .....f;.s.f.....
    0CB0: 03 E8 73 26 0B C0 75 44 8D 9C 54 02 66 B8 48 3F  // ..s&..uD..T.f.H?
    0CC0: 00 00 E8 C2 25 B5 01 66 81 FA 78 69 00 00 72 25  // ....%..f..xi..r%
    0CD0: 83 C3 04 66 B8 78 69 00 00 E8 AB 25 B5 02 66 81  // ...f.xi....%..f.
    0CE0: FA F0 D2 00 00 72 0E 83 C3 04 66 B8 F0 D2 00 00  // .....r....f.....
    0CF0: E8 94 25 B5 03 B1 03 E8 CF 01 EB 45 66 B9 08 00  // ..%........Ef...
    0D00: 00 00 66 33 D2 53 8D 9C 54 02 8B D3 5B E8 17 26  // ..f3.S..T...[..&
    0D10: 0B C0 74 22 66 25 FF FF 00 00 66 D1 E0 53 8B DA  // ..t"f%....f..S..
    0D20: E8 64 25 5B 66 C1 CA 10 FE C2 66 C1 CA 10 83 C2  // .d%[f.....f.....
    0D30: 04 83 C3 02 E2 D7 66 C1 CA 10 8A EA B1 03 E8 88  // ......f.........
    0D40: 01 E8 41 06 A8 01 74 3F 8D 9C AE 03 E8 D8 25 3C  // ..A...t?......%<
    0D50: 00 74 34 E8 D8 05 8A EB E8 5C 01 32 ED E8 63 01  // .t4......\.2..c.
    0D60: E8 AB 05 8D 9C BB 02 E8 BD 25 33 C9 8A C8 E8 28  // .........%3....(
    0D70: 01 66 3B C2 74 0E 51 E8 43 01 FE C5 E8 44 01 59  // .f;.t.Q.C....D.Y
    0D80: E2 EC EB 03 B3 00 C3 8D 9C BB 02 E8 99 25 FE C8  // .............%..
    0D90: 8A E8 E8 2E 01 8D 9C 40 03 B9 00 00 E8 2C 25 E8  // .......@.....,%.
    0DA0: CC 02 E8 D2 00 E8 0F 01 66 52 E8 B6 05 E8 E4 1B  // ........fR......
    0DB0: 66 5A 75 04 B3 00 EB 58 E8 F6 00 80 FD 01 77 07  // fZu....X......w.
    0DC0: E8 FA 00 0A ED 74 47 E8 28 03 E8 3A 11 80 FB 00  // .....tG.(..:....
    0DD0: 75 1D E8 B0 05 A8 01 74 07 B1 0D E8 51 19 EB 30  // u......t....Q..0
    0DE0: B5 01 E8 A7 05 E8 37 0F B5 00 E8 9F 05 EB 21 E8  // ......7.......!.
    0DF0: BF 00 80 FD 01 76 07 D0 ED E8 BB 00 EB BA E8 76  // .....v.........v
    0E00: 00 E8 B3 00 E8 B6 00 FE CD E8 B7 00 EB AA B3 08  // ................
    0E10: C3 8D 9C 29 01 E8 0F 25 66 33 D2 8A D0 66 B8 8C  // ...)...%f3...f..
    0E20: 0A 00 00 66 F7 E2 E8 3A 05 E8 68 1B 75 3D 66 50  // ...f...:..h.u=fP
    0E30: 8D 9C 28 01 E8 F0 24 3C 14 66 58 72 2E 66 50 8D  // ..(...$<.fXr.fP.
    0E40: 9C D0 03 E8 E1 24 0B C0 66 58 74 1F B9 07 00 8D  // .....$..fXt.....
    0E50: 9C D0 03 8B C1 D1 E0 03 D8 E8 CB 24 0B C0 75 02  // ...........$..u.
    0E60: E2 ED 66 25 FF FF 00 00 66 D1 E0 66 0B C0 75 03  // ..f%....f..f..u.
    0E70: B8 48 3F 66 8B D0 C3 8D 9C 2A 01 E8 A9 24 24 0F  // .H?f.....*...$$.
    0E80: 8A E8 0A ED 75 02 B5 01 C3 B5 00 8D 9C 31 01 E8  // ....u........1..
    0E90: 95 24 A8 01 74 02 B5 01 C3 53 51 E8 1F 00 32 E4  // .$..t....SQ...2.
    0EA0: 8A C5 C1 E0 02 59 8D 9C 54 02 03 D8 E8 78 24 5B  // .....Y..T....x$[
    0EB0: C3 B1 02 E8 1D 00 C3 B1 02 E8 0D 00 C3 B1 01 E8  // ................
    0EC0: 11 00 C3 B1 01 E8 01 00 C3 53 8D 9C B8 02 E8 FA  // .........S......
    0ED0: 23 5B C3 53 8D 9C B8 02 E8 08 24 5B C3 33 C9 E8  // #[.S......$[.3..
    0EE0: 9C 20 75 3C 66 BA 22 F0 FF FF 66 33 C0 E8 E9 04  // . u<f."...f3....
    0EF0: 33 C0 E8 51 03 74 1C A9 DD 0F 74 F6 E8 3C F7 F6  // 3..Q.t....t..<..
    0F00: C3 04 75 05 F6 C3 18 74 E9 E8 30 00 50 E8 2C F8  // ..u....t..0.P.,.
    0F10: 58 EB DF E8 1C 00 75 08 E8 31 00 8B C1 E8 1C F8  // X.....u..1......
    0F20: C3 8D 5D 28 66 C1 E3 10 8D 5C 28 B9 49 00 E8 98  // ..](f....\(.I...
    0F30: 1F C3 66 50 E8 BB 04 8B C8 66 58 C3 66 52 66 BA  // ..fP.....fX.fRf.
    0F40: FF FF FF FF 33 D0 E8 90 04 66 5A C3 50 53 52 E8  // ....3....fZ.PSR.
    0F50: E0 FF 75 13 B9 08 00 E8 2F 1C 23 C8 75 19 33 C0  // ..u...../.#.u.3.
    0F60: E8 E3 02 8B C8 EB 10 83 F9 02 74 0B E8 2B 08 80  // ..........t..+..
    0F70: FB 01 75 03 83 E1 FD 5A 5B 58 C3 56 66 33 C0 66  // ..u....Z[X.Vf3.f
    0F80: BA 00 F0 FF FF E8 4E 07 66 C1 E6 10 E8 C4 02 0B  // ......N.f.......
    0F90: C0 74 03 E8 1C 00 E8 2E 07 5E C3 66 52 66 8B D0  // .t.......^.fRf..
    0FA0: E8 DA 15 8D 9C 1C 03 E8 7D 23 8A C2 E8 D8 22 66  // ........}#...."f
    0FB0: 5A C3 50 51 E8 71 02 50 32 C0 E8 FC 03 E8 CC 01  // Z.PQ.q.P2.......
    0FC0: E8 98 00 8D 9C 40 03 E8 5D 23 38 E8 74 0A 8A C5  // .....@..]#8.t...
    0FD0: E8 B4 22 B0 02 E8 E1 03 58 E8 CA 00 E8 A8 00 E8  // ..".....X.......
    0FE0: 8C 00 8D 9C 4C 01 E8 3E 23 8B C8 8B D3 8D 9C 00  // ....L..>#.......
    0FF0: 03 E8 33 23 3B C1 74 05 B0 02 E8 BC 03 E8 31 FC  // ..3#;.t.......1.
    1000: 8D 9C 00 03 E8 53 15 8D 9C D8 02 E8 79 22 E8 8A  // .....S......y"..
    1010: FF 66 C1 CE 10 8B FE 66 C1 CE 10 E8 95 00 E8 D1  // .f.....f........
    1020: 00 E8 23 03 8A E9 8D 9C DC 02 32 C9 E8 9C 22 E8  // ..#.......2...".
    1030: 0C 03 66 25 FF 0F 00 00 59 58 66 BA FF FF FF FF  // ..f%....YXf.....
    1040: 33 D0 E8 91 06 33 D2 C3 53 66 50 8D 9C D4 02 E8  // 3....3..SfP.....
    1050: D5 22 8A C4 E8 30 22 66 58 5B C3 53 66 50 8D 9C  // ."...0"fX[.SfP..
    1060: D4 02 E8 C2 22 8A E0 E8 1D 22 66 58 5B C3 E8 72  // ...."...."fX[..r
    1070: 02 E8 2E 02 8A DD E8 9B 16 8A E9 8D 9C 3C 03 32  // .............<.2
    1080: C9 E8 47 22 0B DB C3 83 EC 08 8B EC E8 54 02 E8  // ..G".........T..
    1090: 10 02 E8 21 16 8D 9C 4C 03 E8 8B 22 8A 46 00 E8  // ...!...L...".F..
    10A0: E5 21 83 C4 08 C3 8D 9C D4 02 E8 7A 22 32 C0 E8  // .!.........z"2..
    10B0: D5 21 C3 E8 0A 00 8D 9C D0 02 32 C9 E8 0C 22 C3  // .!........2...".
    10C0: B5 00 8D 1D E8 60 22 66 8B D0 8D 9C 02 03 E8 56  // .....`"f.......V
    10D0: 22 0B C0 74 1C 51 8B C8 8D 9C 06 03 E8 48 22 66  // "..t.Q.......H"f
    10E0: C1 E0 10 8B C1 59 66 3B C2 75 04 B5 00 EB 02 B5  // .....Yf;.u......
    10F0: 02 C3 E8 2A 02 8D 9C 40 03 B1 03 E8 CD 21 E8 CB  // ...*...@.....!..
    1100: F7 8D 9C 40 03 B1 02 E8 C1 21 E8 95 01 80 FD 00  // ...@.....!......
    1110: 75 14 E8 9C FD E8 8A 02 E8 7E FD 66 8B D0 E8 76  // u........~.f...v
    1120: 02 E8 8A 02 EB 21 E8 49 02 E8 6B 02 E8 73 01 80  // .....!.I..k..s..
    1130: FD 02 B5 04 75 0B 81 FA 74 40 76 05 B5 08 66 D1  // ....u...t@v...f.
    1140: EA E8 6A 02 E8 5B 02 E8 2B 00 C3 66 52 52 32 ED  // ..j..[..+..fRR2.
    1150: 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B C8 5A 51 66  // ........f3...ZQf
    1160: 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66  // ....f..f...Yf..f
    1170: 8B C8 66 5A C3 B5 00 E8 E9 01 E8 13 18 75 03 E8  // ..fZ.........u..
    1180: 07 FD 8D 9C 48 03 32 C9 E8 40 21 C3 53 E8 5E 01  // ....H.2..@!.S.^.
    1190: 66 C1 E2 10 E8 4C 01 8D 9C B8 02 E8 89 21 8A E8  // f....L.......!..
    11A0: 8D 9C B4 02 E8 80 21 8A C8 E8 C2 14 8A EB 5B C3  // ......!.......[.
    11B0: 57 53 53 E8 D6 FF E8 2A 01 5B E8 27 15 74 66 80  // WSS....*.[.'.tf.
    11C0: FD 00 75 29 53 E8 D1 FC 66 8B D0 E8 FE F6 8A CD  // ..u)S...f.......
    11D0: 51 E8 DD FC 8A FD 59 E8 71 FF 5B E8 49 21 66 25  // Q.....Y.q.[.I!f%
    11E0: FF FF 00 00 66 3B C8 73 39 32 DB EB 38 80 FD 02  // ....f;.s92..8...
    11F0: 75 16 E8 6E 01 E8 A9 17 74 28 8D 1F E8 28 21 3D  // u..n....t(...(!=
    1200: 74 40 76 1E 32 DB EB 1D 80 FD 03 75 15 53 E8 D2  // t@v.2......u.S..
    1210: 00 B3 03 E8 37 14 5B E8 0D 21 3B C2 76 04 32 DB  // ....7.[..!;.v.2.
    1220: EB 03 80 CB 01 5B 5F C3 53 8B F0 E8 5B 19 23 F0  // .....[_.S...[.#.
    1230: 74 09 8B C6 E8 FA 17 8B F3 0B DB 5B C3 51 E8 0B  // t..........[.Q..
    1240: FD E8 0F 00 59 C3 51 50 E8 3E 19 8B C8 58 E8 02  // ....Y.QP.>...X..
    1250: 00 59 C3 57 53 E8 32 1B 0B C0 74 09 8B 1D 83 C7  // .Y.WS.2...t.....
    1260: 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B 83 C7 02 85  // .;.u......t.....
    1270: D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0  // .t.....3...[_.3.
    1280: E8 C3 FF 74 13 E8 A0 FF 8B DE B9 FB 00 E8 24 1C  // ...t..........$.
    1290: 83 C6 08 E8 A3 18 EB E8 BB F0 16 B8 5A A5 E8 FE  // ............Z...
    12A0: 1F C3 53 66 50 8D 9C 40 03 E8 7B 20 8A E8 66 58  // ..SfP..@..{ ..fX
    12B0: 5B C3 8D 9C 69 03 E8 6E 20 C3 56 E8 EA 1A 8B 44  // [...i..n .V....D
    12C0: 18 5E C3 53 66 50 8D 9C D4 02 E8 5A 20 8A C8 66  // .^.SfP.....Z ..f
    12D0: 58 5B C3 53 66 50 8D 9C D5 02 E8 4A 20 8A C8 66  // X[.SfP.....J ..f
    12E0: 58 5B C3 53 8D 5C 14 E8 3D 20 8B D0 5B C3 53 66  // X[.S.\..= ..[.Sf
    12F0: 50 8D 5C 16 E8 30 20 8B D0 66 58 5B C3 53 66 50  // P.\..0 ..fX[.SfP
    1300: 8D 9C 50 03 E8 20 20 66 8B D0 66 58 5B C3 53 66  // ..P..  f..fX[.Sf
    1310: 50 8D 9C 54 03 E8 0F 20 66 8B D0 66 58 5B C3 53  // P..T... f..fX[.S
    1320: 66 50 8D 5C 10 E8 FF 1F 8B C8 66 58 5B C3 66 50  // fP.\......fX[.fP
    1330: 53 8D 9C 41 03 E8 EF 1F 5B 8A D8 66 58 C3 53 8D  // S..A....[..fX.S.
    1340: 5C 08 E8 E2 1F 5B C3 53 50 8D 9C 4C 03 E8 D7 1F  // \....[.SP..L....
    1350: 8A C8 58 5B C3 53 50 8D 9C 4D 03 E8 C9 1F 8A C8  // ..X[.SP..M......
    1360: 58 5B C3 53 66 50 8D 5C 0C E8 BB 1F 8B D0 66 58  // X[.SfP.\......fX
    1370: 5B C3 53 66 50 8D 9C 00 03 E8 AB 1F 66 33 D2 8B  // [.SfP.......f3..
    1380: D0 66 58 5B C3 8D 5C 04 E8 9C 1F C3 51 8D 5C 04  // .fX[..\.....Q.\.
    1390: 32 C9 E8 36 1F 59 C3 8D 9C 50 03 66 8B C2 E8 E6  // 2..6.Y...P.f....
    13A0: 1E C3 53 8D 9C 40 03 B1 01 E8 1F 1F 5B C3 8D 9C  // ..S..@......[...
    13B0: 54 03 66 8B C2 E8 CF 1E C3 53 51 8A E8 E8 C5 FF  // T.f......SQ.....
    13C0: 24 FD 0A E8 E8 C5 FF 59 5B C3 66 50 8D 9C D8 02  // $......Y[.fP....
    13D0: E8 54 1F 66 8B D0 66 58 C3 53 66 50 51 66 8B C8  // .T.f..fX.SfPQf..
    13E0: BB 00 00 E8 2C 16 23 C2 0B C1 E8 2E 16 59 66 58  // ....,.#......YfX
    13F0: 5B C3 BB 00 00 E8 1A 16 66 25 DF 0F 00 00 C3 E8  // [.......f%......
    1400: 70 1A E8 FF 19 E8 DD 19 75 06 E8 8E 17 E8 E1 19  // p.......u.......
    1410: C3 B0 01 C3 55 B3 01 E8 00 1D 5D C3 66 53 66 BB  // ....U.....].fSf.
    1420: 04 00 00 00 E8 05 00 33 C0 66 5B C3 55 66 C1 E3  // .......3.f[.Uf..
    1430: 10 BB 00 00 E8 E3 1C 5D C3 E8 2F 1B BB 0A 00 E8  // .......]../.....
    1440: D9 15 C3 BB 0A 00 E8 C9 15 66 8B C8 E8 1C 1B BB  // .........f......
    1450: 0A 00 66 2B C1 E8 C3 15 C3 E8 29 00 0B C9 74 22  // ..f+......)...t"
    1460: E8 18 FB E8 31 07 66 51 66 8B C8 BB 07 00 E8 A1  // ....1.fQf.......
    1470: 15 66 25 00 FE 00 00 66 0B C1 E8 9E 15 66 59 0C  // .f%....f.....fY.
    1480: 01 C3 32 C0 C3 E8 6B 02 0B C9 75 06 E8 BD FA E8  // ..2...k...u.....
    1490: 71 02 51 E8 B6 FA 66 C1 E6 10 33 C0 E8 9E FD 74  // q.Q...f...3....t
    14A0: 09 E8 16 03 75 F6 33 C8 EB F2 58 23 C8 66 C1 EE  // ....u.3...X#.f..
    14B0: 10 C3 A8 10 75 63 E8 F0 06 66 C1 E6 10 33 C0 E8  // ....uc...f...3..
    14C0: 84 FD 74 35 E8 61 FD 50 51 8B C8 E8 F9 01 85 C1  // ..t5.a.PQ.......
    14D0: 59 58 74 0D 50 E8 AD FE 24 03 3C 03 58 75 E0 EB  // YXt.P...$.<.Xu..
    14E0: 0C 50 E8 A0 FE A8 01 58 74 D5 E8 6E FB 50 E8 D9  // .P.....Xt..n.P..
    14F0: 07 58 B5 00 E8 95 FE EB C6 E8 CB 01 E8 29 FD E8  // .X...........)..
    1500: 34 01 B1 00 E8 4D 07 66 C1 EE 10 E8 94 06 A8 20  // 4....M.f....... 
    1510: 75 42 A8 40 75 03 E8 1B 0E E8 7B 06 0A C0 75 07  // uB.@u.....{...u.
    1520: 32 C9 B5 01 E8 BE 0E E8 9D 01 E8 FB FC E8 33 FE  // 2.............3.
    1530: E8 61 14 75 14 E8 62 02 0A DB 74 0D E8 1C FB E8  // .a.u..b...t.....
    1540: 88 07 B5 00 E8 45 FE EB 08 E8 65 07 B5 01 E8 3B  // .....E....e....;
    1550: FE E8 E6 00 C3 E8 31 16 C3 E8 22 FD E8 AC 06 33  // ......1..."....3
    1560: C9 E8 9F 01 66 33 D2 66 33 C0 E8 6C FE E8 52 00  // ....f3.f3..l..R.
    1570: B1 FF E8 84 00 33 C0 E8 CC FC 74 0A E8 A9 FC 50  // .....3....t....P
    1580: E8 D1 07 58 EB F1 32 C9 E8 C4 01 E8 FB 15 0B C0  // ...X..2.........
    1590: C3 E8 EA FC E8 74 06 66 33 C0 66 BA 00 F0 FF FF  // .....t.f3.f.....
    15A0: E8 33 01 51 B1 01 E8 8C 01 59 33 C0 E8 97 FC 74  // .3.Q.....Y3....t
    15B0: 0A E8 74 FC 50 E8 67 07 58 EB F1 E8 B3 0D E8 96  // ..t.P.g.X.......
    15C0: 18 C3 B8 02 00 E8 60 FC 74 2E B1 07 E8 01 12 B8  // ......`.t.......
    15D0: 02 00 E8 66 F0 F6 C3 04 75 12 E8 11 1B 83 3D 00  // ...f....u.....=.
    15E0: 75 0A E8 A4 15 83 E0 FD E8 A7 15 C3 66 B8 02 00  // u...........f...
    15F0: 00 00 E8 E4 FD E8 48 F2 C3 E8 28 14 74 23 38 E1  // ......H...(.t#8.
    1600: 76 04 8A CC EB 06 38 C1 73 02 8A C8 BB 02 00 E8  // v.....8.s.......
    1610: 00 14 8A E1 E8 04 14 B1 04 E8 B4 11 0C 01 C3 0C  // ................
    1620: 01 C3 51 E8 FE 13 74 0C 8A CC BB 02 00 E8 E2 13  // ..Q...t.........
    1630: 8A C4 8A E1 59 C3 E8 FD 05 C3 E8 08 06 C3 E8 3D  // ....Y..........=
    1640: 19 75 18 E8 81 00 E8 DF FB 80 F9 01 75 0E 51 E8  // .u..........u.Q.
    1650: 5F 06 B5 01 E8 35 FD 59 E8 DF FF C3 E8 D7 FF 51  // _....5.Y.......Q
    1660: E8 BC 06 B5 00 E8 24 FD 59 C3 B8 02 00 E8 B8 FB  // ......$.Y.......
    1670: 74 03 E8 5B 11 C3 E8 BD 04 3B C1 7C 3A 8B C1 E8  // t..[.....;.|:...
    1680: FD 04 E8 C6 0E 8B C8 51 E8 2D 05 E8 F1 04 59 E8  // .......Q.-....Y.
    1690: B9 0E 3B C8 72 02 8B C1 8D 5C 04 E8 01 1C 32 C9  // ..;.r....\....2.
    16A0: B5 0F E8 04 0D E8 03 18 FE C1 38 C1 72 F2 8D 5C  // ..........8.r..\
    16B0: 04 E8 73 1C 0B C0 C3 33 C0 C3 BB 00 18 33 C0 8A  // ..s....3.....3..
    16C0: C2 C1 E0 02 03 D8 C3 53 BB 03 00 E8 44 13 66 25  // .......S....D.f%
    16D0: FF 0F 00 00 5B C3 53 66 50 66 51 66 8B C8 BB 03  // ....[.SfPfQf....
    16E0: 00 E8 2E 13 66 23 C2 66 0B C1 E8 2E 13 66 59 66  // ....f#.f.....fYf
    16F0: 58 5B C3 66 50 BB 05 00 E8 17 13 25 FF 0F 8B C8  // X[.fP......%....
    1700: 66 58 C3 E8 83 14 23 C8 66 50 BB 05 00 E8 02 13  // fX....#.fP......
    1710: 25 00 F0 0B C1 E8 03 13 66 58 C3 66 50 53 BB 06  // %.......fX.fPS..
    1720: 00 E8 EE 12 A8 10 75 09 BB F0 16 E8 F9 1B 3D 5A  // ......u.......=Z
    1730: A5 5B 66 58 C3 66 50 53 BB 06 00 E8 D4 12 80 F1  // .[fX.fPS........
    1740: 01 C0 E1 04 24 EF 0A C1 E8 D0 12 5B 66 58 C3 53  // ....$......[fX.S
    1750: 66 50 BB F8 16 E8 CF 1B 8A C1 E8 2A 1B 66 58 5B  // fP.........*.fX[
    1760: C3 53 BB F8 16 E8 BF 1B 83 E0 01 5B C3 53 66 50  // .S.........[.SfP
    1770: BB 07 00 E8 9C 12 F6 C4 01 66 58 B0 06 74 02 B0  // .........fX..t..
    1780: 08 5B C3 53 BB 07 00 E8 88 12 80 E4 FE 80 FD 06  // .[.S............
    1790: 74 03 80 CC 01 E8 83 12 5B C3 66 50 BB 06 00 E8  // t.......[.fP....
    17A0: 70 12 24 40 C0 E8 06 8A D8 66 58 C3 B3 81 E8 5E  // p.$@.....fX....^
    17B0: 19 75 04 83 C8 01 C3 33 C0 C3 50 66 51 E8 68 FA  // .u.....3..PfQ.h.
    17C0: 83 EC 04 8B EC 66 33 C0 66 89 46 00 33 D2 8D BC  // .....f3.f.F.3...
    17D0: 68 01 8D 1D E8 50 1B 0B C0 74 22 8B DF B0 00 E8  // h....P...t".....
    17E0: 12 01 74 14 8B DF E8 72 F4 66 8B 46 00 66 3B C8  // ..t....r.f.F.f;.
    17F0: 72 06 8B D7 66 89 4E 00 83 C7 1C EB D5 0B D2 74  // r...f.N........t
    1800: 0A 8D 9C 4C 01 E8 29 F4 E9 88 00 66 33 C0 66 89  // ...L..)....f3.f.
    1810: 46 00 8D BC F4 01 33 D2 8D 1D E8 0A 1B 0B C0 74  // F.....3........t
    1820: 58 66 50 E8 94 F0 3C 01 66 58 74 05 3D 40 06 73  // XfP...<.fXt.=@.s
    1830: 43 66 52 66 8B D0 8D 5D 04 E8 EB 1A E8 5D 00 8B  // CfRf...].....]..
    1840: CA 66 5A 74 2F 56 8D 9C 4C 01 8B F1 E8 01 F4 5E  // .fZt/V..L......^
    1850: B0 00 E8 9F 00 74 1D 8D 1D E8 CB 1A 8B D9 8B 47  // .....t.........G
    1860: 06 66 C1 E0 10 8B 47 02 66 3B 46 00 72 06 8B D1  // .f....G.f;F.r...
    1870: 66 89 46 00 83 C7 08 EB 9F 0B D2 74 16 56 8D 9C  // f.F........t.V..
    1880: 4C 01 8B F2 E8 C9 F3 5E 53 8D 9C 62 01 33 C0 E8  // L......^S..b.3..
    1890: 0D 1A 5B 83 C4 04 0B D2 66 59 58 C3 57 53 51 E8  // ..[.....fYX.WSQ.
    18A0: 0F 15 3B 55 02 75 18 66 C1 CA 10 8B DA 66 C1 CA  // ..;U.u.f.....f..
    18B0: 10 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B 74 09 83  // .;].u...t.:E.t..
    18C0: C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59 5B 5F C3  // ....3.......Y[_.
    18D0: 51 66 52 E8 DB 14 3A 65 1A 75 09 0A C0 74 0E 3A  // QfR...:e.u...t.:
    18E0: 45 1B 74 09 83 C7 1C E2 ED 33 FF EB 00 0B FF 66  // E.t......3.....f
    18F0: 5A 59 C3 C3 66 51 66 52 53 53 66 C1 CE 10 8B DE  // ZY..fQfRSSf.....
    1900: 66 C1 CE 10 E8 20 1A 5B 66 8B D0 E8 4D F3 3B CA  // f.... .[f...M.;.
    1910: 72 0A 66 3B CA 72 05 E8 96 F8 75 02 32 C0 5B 66  // r.f;.r....u.2.[f
    1920: 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8 22 F3 5F 5E  // ZfY.VW......"._^
    1930: C3 66 50 53 66 51 52 57 56 51 8B DE B9 08 00 E8  // .fPSfQRWVQ......
    1940: 72 15 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2 E8 36  // r.Y.\...f......6
    1950: 19 F6 C2 03 75 24 8B C1 24 7F BF 14 1A 80 3D FF  // ....u$..$.....=.
    1960: 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66 B9 00 05  // ....:.u.f.E.f...
    1970: 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01 74 25 8B  // .............t%.
    1980: C1 E8 70 01 0F 84 EB 00 33 C9 8A CC 8A D0 0A C0  // ..p.....3.......
    1990: 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1 E0 08 E8  // u..\.f%....f....
    19A0: E5 18 EB B2 8A E1 8A CA 80 E1 0C C0 E9 02 80 E2  // ................
    19B0: F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC 75 73 25  // ........pr*..us%
    19C0: 80 EC 70 8A C4 32 E4 50 E8 30 02 8B D8 58 38 D8  // ..p..2.P.0...X8.
    19D0: 72 05 33 C0 E9 9C 00 E8 28 02 E8 4A 19 0B C0 0F  // r.3.....(..J....
    19E0: 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84 85 00 8D 5C  // .....2.........\
    19F0: 16 8B 05 E8 A9 18 8B 45 06 66 C1 E0 10 8B 45 02  // .......E.f....E.
    1A00: 50 E8 47 0B 66 C1 E1 10 8B C8 58 8D 1C E8 77 18  // P.G.f.....X...w.
    1A10: 66 50 8D 5C 04 66 8B C1 E8 6C 18 66 58 66 C1 E8  // fP.\.f...l.fXf..
    1A20: 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50 8D 5C 06  // .f......f..fP.\.
    1A30: E8 F4 18 8B C8 66 58 66 D3 E0 66 C1 E8 10 40 8D  // .....fXf..f...@.
    1A40: 5C 14 E8 5A 18 BF 74 1A 83 F9 01 74 11 BF 7C 1A  // \..Z..t....t..|.
    1A50: 81 F9 01 01 74 08 BF 84 1A 83 F9 02 75 15 8D 5C  // ....t.......u..\
    1A60: 0C 66 8B 05 E8 20 18 8D 5C 10 66 8B 45 04 E8 16  // .f... ..\.f.E...
    1A70: 18 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00 40 01 90  // ...^_ZfY[fX..@..
    1A80: 01 01 40 01 90 01 02 80 02 90 01 03 80 02 90 01  // ..@.............
    1A90: 04 40 01 90 01 05 40 01 90 01 06 80 02 90 01 07  // .@....@.........
    1AA0: D0 02 5E 01 0D 40 01 90 01 0E 80 02 90 01 0F 80  // ..^..@..........
    1AB0: 02 5E 01 10 80 02 5E 01 11 80 02 E0 01 12 80 02  // .^....^.........
    1AC0: E0 01 13 80 02 90 01 23 20 04 90 01 32 20 04 B0  // .......# ...2 ..
    1AD0: 02 33 20 04 C0 02 62 80 02 E0 01 FF 05 0A 05 05  // .3 ...b.........
    1AE0: 05 00 00 00 05 0B 06 05 05 00 00 00 08 10 08 08  // ................
    1AF0: 08 00 00 00 56 E8 8D 15 80 E4 01 3B 04 74 09 83  // ....V......;.t..
    1B00: C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E C3 57  // ....3....D...^.W
    1B10: 53 50 E8 70 15 83 E9 0A E8 E0 00 83 F8 05 76 03  // SP.p..........v.
    1B20: B8 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF  // ................
    1B30: FF AB 58 5B 5F C3 66 53 51 66 52 E8 41 00 E8 77  // ..X[_.fSQfR.A..w
    1B40: 00 66 C1 E8 10 66 0F B7 D8 66 B8 00 00 00 03 66  // .f...f...f.....f
    1B50: D3 E8 66 33 D2 66 F7 F3 E8 F0 09 66 5A 59 66 5B  // ..f3.f.....fZYf[
    1B60: C3 53 66 50 BB 07 00 E8 A8 0E 0A C0 66 58 5B C3  // .SfP........fX[.
    1B70: 53 66 50 BB 07 00 E8 99 0E A8 01 66 58 5B C3 53  // SfP........fX[.S
    1B80: 66 50 8D 5C 06 E8 9F 17 8A C8 66 58 5B C3 51 B9  // fP.\......fX[.Q.
    1B90: 08 00 E8 34 13 59 C3 53 8D 5C 08 E8 89 17 24 03  // ...4.Y.S.\....$.
    1BA0: 5B C3 8D 5C 09 E8 7F 17 C3 51 53 B1 01 8A E8 8D  // [..\.....QS.....
    1BB0: 5C 08 E8 16 17 5B 59 C3 53 8D 1C E8 69 17 5B C3  // \....[Y.S...i.[.
    1BC0: 53 8D 5C 04 E8 60 17 5B C3 53 8D 5C 16 E8 57 17  // S.\..`.[.S.\..W.
    1BD0: 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A 75 1B E8 34  // [.SfR3....fZu..4
    1BE0: 00 74 16 E8 15 00 40 83 F8 05 73 0D E8 98 16 48  // .t....@...s....H
    1BF0: E8 0F 00 66 8B C2 E8 8E 16 5B C3 BB 00 1E E8 26  // ...f.....[.....&
    1C00: 17 C3 BB 08 1E C1 E0 03 03 D8 C3 BB 00 1E B9 32  // ...............2
    1C10: 00 E8 A0 12 C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB  // .....Q.....t....
    1C20: 08 1E E8 02 17 66 3B C2 74 07 83 C3 08 E2 F3 0B  // .....f;.t.......
    1C30: DB 59 C3 C3 C3 00 BB 20 DF E8 AB 36 E8 84 F6 B5  // .Y..... ...6....
    1C40: 01 E8 E5 07 C3 BB 00 DF E8 9C 36 E8 75 F6 B5 00  // ..........6.u...
    1C50: E8 D6 07 C3 80 F9 00 75 0A E8 55 12 8A C8 B5 02  // .......u..U.....
    1C60: E8 1D 09 0B F6 74 2E E8 59 F6 B5 01 51 E8 C0 07  // .....t..Y...Q...
    1C70: 59 E8 C3 07 56 33 F6 B5 00 E8 2D 07 5E B5 01 E8  // Y...V3....-.^...
    1C80: C5 F6 E8 FB 08 E8 C4 09 E8 38 F6 8D 9C 00 03 E8  // .........8......
    1C90: AC 07 E8 F5 07 66 C1 CE 10 B5 01 E8 0B 07 E8 01  // .....f..........
    1CA0: FF A8 40 75 07 32 C0 B5 01 E8 7E 08 66 C1 CE 10  // ..@u.2....~.f...
    1CB0: C3 E8 0F F6 B5 01 E8 4B 07 B5 00 E8 79 07 E8 DC  // .......K....y...
    1CC0: 07 B1 0F E8 69 0A E8 26 00 C3 E8 52 00 E8 03 F6  // ....i..&...R....
    1CD0: B5 00 E8 2F 07 B5 00 E8 5D 07 E8 78 F6 E8 D1 11  // .../....]..x....
    1CE0: 38 C1 74 0A 80 F9 0B 74 05 B5 03 E8 92 08 C3 B1  // 8.t....t........
    1CF0: 10 E8 3B 0A E8 AB F5 80 FD 00 74 06 B1 01 E8 CF  // ..;.......t.....
    1D00: 0A C3 E8 A6 05 80 FD 01 75 07 B5 02 E8 D5 05 EB  // ........u.......
    1D10: 03 E8 F3 01 B1 0D E8 16 0A B1 03 E8 54 00 C3 E8  // ............T...
    1D20: CC F5 0B D2 74 05 B1 00 E8 42 0A B1 02 E8 42 00  // ....t....B....B.
    1D30: E8 52 F6 A8 01 74 12 E8 68 F5 80 FD 00 75 0A B1  // .R...t..h....u..
    1D40: 0C E8 EB 09 B0 02 E8 91 04 B1 00 E8 82 0A B1 0D  // ................
    1D50: E8 1F 00 C3 B1 07 E8 77 0A E8 92 F5 0B D2 75 0C  // .......w......u.
    1D60: E8 00 F6 E8 2A 0C 75 09 E8 1D 0B C3 B1 07 E8 FC  // ....*.u.........
    1D70: 09 C3 E8 EE F5 E8 18 0C 75 24 51 E8 52 0A 59 80  // ........u$Q.R.Y.
    1D80: F9 0C 75 1A 33 D2 56 83 C6 08 E8 41 0C 5E 0A C0  // ..u.3.V....A.^..
    1D90: 75 0C B9 0A 00 E8 6D 11 42 83 FA 1E 75 E8 C3 80  // u.....m.B...u...
    1DA0: FB 01 0F 84 C5 00 E8 A5 05 66 C1 E1 10 8D 9C 35  // .........f.....5
    1DB0: 01 E8 73 15 A8 01 74 05 51 E8 2B 04 59 E8 5F F5  // ..s...t.Q.+.Y._.
    1DC0: B0 04 E8 9C 05 66 BA 50 01 40 50 E8 76 05 E8 F7  // .....f.P.@P.v...
    1DD0: 0A 75 7E 66 BA 50 01 50 4F 8D 9C 2D 01 E8 47 15  // .u~f.P.PO..-..G.
    1DE0: 24 06 3C 02 75 02 B6 02 B0 05 E8 74 05 E8 54 05  // $.<.u......t..T.
    1DF0: 8D 5C 28 03 D8 E8 D0 0A 75 57 0A FF 75 09 B0 0A  // .\(.....uW..u...
    1E00: E8 5E 05 32 DB EB 4A 51 33 C9 8A CF E8 35 05 03  // .^.2..JQ3....5..
    1E10: C8 E8 3A 05 59 B0 07 E8 47 05 66 BA 50 01 10 30  // ..:.Y...G.f.P..0
    1E20: 33 DB E8 A3 0A 74 0F 51 8A EB 8D 9C 44 01 B1 02  // 3....t.Q....D...
    1E30: E8 98 14 59 EB 61 E8 0B 05 66 C1 C9 10 2B C1 66  // ...Y.a...f...+.f
    1E40: C1 C1 10 3D 80 00 0F 82 76 FF B0 08 E8 12 05 EB  // ...=....v.......
    1E50: 43 51 8A EB 8D 9C 44 01 B1 02 E8 6E 14 59 66 BA  // CQ....D....n.Yf.
    1E60: 50 01 10 30 33 DB E8 5F 0A EB 2C 8D 5C 28 03 D9  // P..03.._..,.\(..
    1E70: 53 8A E9 B1 32 51 5F E8 A5 F4 8A E9 B1 A0 BA 00  // S...2Q_.........
    1E80: 80 E8 19 0A 80 FF 01 5B 74 0A B1 A2 E8 0E 0A 80  // .......[t.......
    1E90: FF 01 75 03 B0 00 C3 B0 01 C3 51 B1 0C E8 D2 FE  // ..u.......Q.....
    1EA0: 59 B0 01 E8 BB 04 56 83 C6 08 E8 21 0B 5E 0A C0  // Y.....V....!.^..
    1EB0: 75 04 B3 10 EB 3F B0 02 E8 A6 04 E8 38 00 74 11  // u....?......8.t.
    1EC0: B0 03 E8 9C 04 B0 01 E8 10 03 75 29 E8 27 00 75  // ..........u).'.u
    1ED0: 24 66 BA 0C 00 90 43 8D 9C 30 01 E8 EA 09 66 BA  // $f....C..0....f.
    1EE0: 20 00 90 41 8D 9C 34 01 E8 DD 09 E8 BD 03 B0 09  //  ..A..4.........
    1EF0: E8 6E 04 33 DB C3 E8 26 F4 66 BA 00 00 90 47 8D  // .n.3...&.f....G.
    1F00: 9C 28 01 E8 C2 09 C3 B1 0C E8 66 FE B1 00 E8 BF  // .(........f.....
    1F10: 08 B1 01 E8 BA 08 8D 9C AC 03 66 B8 00 00 00 00  // ..........f.....
    1F20: E8 64 13 B0 01 E8 B2 02 74 0A B5 04 E8 CB 03 B3  // .d......t.......
    1F30: 08 E9 3F 01 B1 08 E8 F6 07 E8 D2 02 B1 09 E8 EE  // ..?.............
    1F40: 07 E8 C5 01 8D 9C B8 03 66 33 C0 E8 39 13 E8 60  // ........f3..9..`
    1F50: 01 B9 90 01 E8 A3 0F B0 01 E8 63 02 B5 02 E8 8D  // ..........c.....
    1F60: 03 E8 74 01 E8 9F 03 E8 E0 01 B5 03 E8 7F 03 33  // ..t............3
    1F70: C9 E8 00 01 F6 C5 01 75 34 B5 02 E8 70 03 E8 20  // .......u4...p.. 
    1F80: 01 F6 C5 04 74 08 B5 01 E8 6F 03 E9 CC 00 8A FD  // ....t....o......
    1F90: 80 E7 03 E8 E8 00 80 E3 03 38 FB 75 0D E8 4C 01  // .........8.u..L.
    1FA0: 75 08 B5 02 E8 53 03 E9 B0 00 E8 67 01 FE C1 E8  // u....S.....g....
    1FB0: 7C F3 38 D9 75 BB 8D 9C AC 03 E8 6A 13 3C 03 74  // |.8.u......j.<.t
    1FC0: 05 E8 ED 00 EB 9B 8D 9C B0 03 66 33 C0 E8 B7 12  // ..........f3....
    1FD0: 8D 9C 2A 01 E8 50 13 A8 40 74 0C B1 13 E8 4F 07  // ..*..P..@t....O.
    1FE0: B0 03 E8 DA 01 EB 0A B1 0A E8 43 07 B0 02 E8 CE  // ..........C.....
    1FF0: 01 B5 04 E8 F8 02 E8 DF 00 E8 0A 03 E8 4B 01 B5  // .............K..
    2000: 05 E8 EA 02 33 C9 E8 6B 00 80 FD 07 75 05 E8 86  // ....3..k....u...
    2010: 00 75 2E 51 B5 04 E8 D5 02 59 F6 C5 01 75 07 B5  // .u.Q.....Y...u..
    2020: 03 E8 D6 02 EB 34 E8 78 00 8A D5 E8 E6 00 E8 70  // .....4.x.......p
    2030: 00 38 EA 75 0C E8 B4 00 75 07 B5 02 E8 BB 02 EB  // .8.u....u.......
    2040: 19 FE C1 E8 E8 F2 38 D9 75 BC 8D 9C AC 03 E8 D6  // ......8.u.......
    2050: 12 3C 04 75 05 E8 59 00 EB 9C B0 00 E8 60 01 B1  // .<.u..Y......`..
    2060: 0B E8 CB 06 8D 9C AD 03 E8 BC 12 B3 00 0A C0 74  // ...............t
    2070: 02 B3 08 C3 8D 9C C0 03 E8 0F 00 8A E8 C3 53 8D  // ..............S.
    2080: 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8 99 12 C0 E1  // ......[...Q.....
    2090: 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8 89 12 A8 01  // ...$.Y..........
    20A0: C3 8D 9C B8 03 E8 3B 12 C3 8D 9C B8 03 E8 1B 12  // ......;.........
    20B0: C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02 8A D5 FE C1  // .3.3....8.v.....
    20C0: E8 6B F2 38 D9 72 EE 33 C9 8A EA 8D 9C 5C 03 E8  // .k.8.r.3.....\..
    20D0: F9 11 B1 0B E8 F9 06 C3 E8 44 F2 8D 9C B8 03 E8  // .........D......
    20E0: 45 12 66 BA 03 01 80 83 E8 DD 07 C3 51 53 8D 9C  // E.f.........QS..
    20F0: B0 03 E8 EE 11 FE C5 E8 D1 11 80 FD 06 72 07 B5  // .............r..
    2100: 02 E8 F6 01 33 C9 5B 59 C3 66 33 C0 8D 9C B0 03  // ....3.[Y.f3.....
    2110: E8 74 11 C3 32 ED E8 65 FF 80 E3 0C C0 EB 02 B7  // .t..2..e........
    2120: 03 2A FB C0 E3 03 8A EB 80 FB 18 72 03 80 CD 20  // .*.........r... 
    2130: E8 4B FF 80 E3 03 38 FB 72 02 8A DF 80 FB 03 75  // .K....8.r......u
    2140: 03 80 CD 04 0A EB E8 60 FF C3 E8 D2 F1 8D 9C C0  // .......`........
    2150: 03 66 BA 02 02 90 45 E8 6E 07 C3 E8 C1 F1 66 BA  // .f....E.n.....f.
    2160: 00 01 90 42 8D 9C B4 03 E8 5D 07 E8 B1 F1 66 BA  // ...B.....]....f.
    2170: 03 01 90 45 8D 9C B8 03 E8 4D 07 E8 E5 F1 E8 13  // ...E.....M......
    2180: 08 75 3B E8 99 F1 66 BA 0A 01 90 40 8D 9C BF 03  // .u;...f....@....
    2190: E8 35 07 8D 9C 28 01 E8 8D 11 3C 14 72 20 E8 7E  // .5...(....<.r .~
    21A0: F1 66 BA 10 00 90 4F 8D 9C D0 03 E8 1A 07 E8 6E  // .f....O........n
    21B0: F1 66 BA 15 01 90 40 8D 9C CC 03 E8 0A 07 C3 E8  // .f....@.........
    21C0: 5D F1 66 BA 02 01 80 50 E8 FD 06 C3 E8 3F F1 8B  // ].f....P.....?..
    21D0: C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 42 F1 66 BA 00  // .f3........B.f..
    21E0: 06 80 50 E8 E2 06 C3 E8 35 F1 66 BA 11 01 80 50  // ..P.....5.f....P
    21F0: B0 04 E8 D3 06 C3 E8 26 F1 66 BA 00 06 90 40 8D  // .......&.f....@.
    2200: 9C C8 03 E8 C2 06 8D 9C C8 03 E8 1A 11 C3 E8 BB  // ................
    2210: FF 3C 06 74 0E 3C 0A 74 0A 3C 14 74 06 3C 1E 74  // .<.t.<.t.<.t.<.t
    2220: 02 33 C0 E8 08 F1 8A E3 80 CC 80 50 E8 F0 F0 58  // .3.........P...X
    2230: 66 BA 00 01 80 61 E8 8F 06 33 C9 E8 7C F0 0B C0  // f....a...3..|...
    2240: 74 02 B5 10 8D 9C BC 03 E8 80 10 8A C5 E8 CF F0  // t...............
    2250: 66 BA 07 01 80 50 E8 6F 06 E8 07 F1 E8 35 07 75  // f....P.o.....5.u
    2260: 49 8D 9C 48 03 E8 BF 10 0A C0 74 0E E8 B0 F0 66  // I..H......t....f
    2270: BA 0A 01 80 50 B0 01 E8 4E 06 8D 9C 28 01 E8 A6  // ....P...N...(...
    2280: 10 3C 14 72 25 8D 9C D0 03 E8 9B 10 0B C0 74 1A  // .<.r%.........t.
    2290: E8 2A EC 32 C9 8D 9C CC 03 E8 2F 10 8A C5 E8 7E  // .*.2....../....~
    22A0: F0 66 BA 15 01 80 50 E8 1E 06 C3 8D 9C B4 03 B9  // .f....P.........
    22B0: 0E 00 E8 FF 0B E8 A3 FE E8 8F FE E8 38 FF 3C 01  // ............8.<.
    22C0: 75 1C E8 D2 FD 74 17 33 C9 E8 A8 FD 80 FD 07 75  // u....t.3.......u
    22D0: 0D FE C1 E8 58 F0 38 D9 75 EF B5 01 EB 02 B5 00  // ....X.8.u.......
    22E0: E8 01 00 C3 8D 9C AC 03 B1 02 E8 DE 0F C3 51 8D  // ..............Q.
    22F0: 9C AC 03 32 C9 E8 D3 0F 59 C3 51 8D 9C AC 03 B1  // ...2....Y.Q.....
    2300: 01 E8 C7 0F 59 C3 8D 9C 32 01 E8 1A 10 24 07 75  // ....Y...2....$.u
    2310: 15 B9 64 00 8D 9C AC 03 E8 0C 10 3C 02 74 03 B9  // ..d........<.t..
    2320: 90 01 E8 D5 0B C3 32 E4 B1 04 33 D2 F6 E1 8B C8  // ......2...3.....
    2330: E8 D2 0B C3 51 8D 5C 14 E8 EC 0F 66 C1 E0 10 E8  // ....Q.\....f....
    2340: A4 01 59 C3 53 8D 9C 44 01 E8 DB 0F 5B C3 53 66  // ..Y.S..D....[.Sf
    2350: 50 8D 9C 44 01 E8 CF 0F 8B C1 E8 2A 0F 66 58 5B  // P..D.......*.fX[
    2360: C3 53 51 8D 9C 44 01 8A E8 B1 03 E8 5D 0F 59 5B  // .SQ..D......].Y[
    2370: C3 33 C9 E8 38 0B 38 C1 73 05 B5 00 E8 8C 00 B5  // .3..8.8.s.......
    2380: 00 E8 80 00 FE C1 E8 25 0B 38 C1 72 E6 B1 14 8A  // .......%.8.r....
    2390: E9 E8 1D 0B 38 C1 74 05 B5 03 E8 E3 01 FE C1 E8  // ....8.t.........
    23A0: 06 0B 04 14 38 C1 76 E7 C3 83 EC 0C 8B EC 0B F6  // ....8.v.........
    23B0: 74 1E E8 03 F8 66 C1 C8 10 66 89 46 00 8D 5C 04  // t....f...f.F..\.
    23C0: E8 64 0F 66 89 46 04 8D 5C 08 E8 5A 0F 88 46 0A  // .d.f.F..\..Z..F.
    23D0: 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00 E8 E3  // .N...f......+...
    23E0: 09 83 C4 0C C3 83 EC 04 8B EC B0 02 88 46 01 88  // .............F..
    23F0: 4E 00 8C D0 66 C1 E0 10 8B C4 BB 25 00 E8 C4 09  // N...f......%....
    2400: 83 C4 04 C3 BB 23 00 E8 08 00 C3 BB 17 00 E8 01  // .....#..........
    2410: 00 C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0 10  // ........N...f...
    2420: 8B C4 E8 9F 09 83 C4 04 C3 BB 22 00 E8 E3 FF C3  // ..........".....
    2430: BB 27 00 E8 DC FF C3 BB 2C 00 E8 D5 FF C3 E8 E6  // .'......,.......
    2440: 0E 66 A9 00 00 FF FF 74 40 83 EC 18 8B EC 55 51  // .f.....t@.....UQ
    2450: B9 04 00 83 C3 02 E8 CE 0E 66 89 46 00 83 C5 04  // .........f.F....
    2460: 83 C3 04 E2 F1 83 C3 04 E8 BC 0E 66 C1 C8 10 66  // ...........f...f
    2470: 89 46 00 59 5D 88 4E 14 8C D0 66 C1 E0 10 8B C4  // .F.Y].N...f.....
    2480: BB 31 00 E8 3E 09 83 C4 18 C3 E8 36 EE 8D 9C D0  // .1..>......6....
    2490: 02 E8 93 0E 8A E8 BB 21 00 E8 76 FF C3 8D 9C 3C  // .......!..v....<
    24A0: 03 E8 83 0E 8A F8 E8 F9 ED 8A DD 53 8D 9C 42 03  // ...........S..B.
    24B0: E8 74 0E 8A E8 5B E8 0A EE E8 A7 EE E8 D5 04 75  // .t...[.........u
    24C0: 02 B3 01 83 EC 04 8B EC 88 4E 00 88 7E 01 88 5E  // .........N..~..^
    24D0: 02 88 6E 03 8C D0 66 C1 E0 10 8B C4 BB 2A 00 E8  // ..n...f......*..
    24E0: E2 08 83 C4 04 C3 83 EC 10 8B EC 66 3D F0 FF FF  // ...........f=...
    24F0: 03 76 06 66 B8 F0 FF FF 03 66 8B C8 66 33 C0 66  // .v.f.....f..f3.f
    2500: 89 46 04 66 89 46 00 66 89 46 08 66 B8 00 00 00  // .F.f.F.f.F.f....
    2510: D0 66 0B C1 66 89 46 0C 8C D0 66 C1 E0 10 8B C4  // .f..f.F...f.....
    2520: BB 35 00 E8 9E 08 83 C4 10 C3 83 EC 08 8B EC 89  // .5..............
    2530: 4E 00 66 89 56 02 89 5E 06 8C D0 66 C1 E0 10 8B  // N.f.V..^...f....
    2540: C4 BB 2D 00 E8 7D 08 83 C4 08 C3 3D C0 7F 76 04  // ..-..}.....=..v.
    2550: B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8 C9 0D 66 33  // ......?$..Q...f3
    2560: D2 B9 0A 00 F7 F1 8B C8 E8 BC 0D 03 C1 66 25 FF  // .............f%.
    2570: FF 00 00 59 3D 10 27 73 03 B8 10 27 C3 32 D2 C3  // ...Y=.'s...'.2..
    2580: 80 FD 02 75 25 E8 42 EE 66 BB 00 08 00 00 E8 9A  // ...u%.B.f.......
    2590: 00 E8 36 EE 66 BB 03 08 00 00 E8 8E 00 66 33 D2  // ..6.f........f3.
    25A0: 66 BB 01 08 00 00 E8 82 00 C3 80 FD 03 75 10 66  // f............u.f
    25B0: 33 C0 8A C1 66 33 D2 66 BB FF 00 00 00 EB 36 51  // 3...f3.f......6Q
    25C0: 33 D2 E8 DD EC 8A D5 66 C1 E2 10 E8 15 ED 8A F2  // 3......f........
    25D0: 8A D1 66 8B C2 66 0D 00 00 00 80 E8 50 ED 80 FB  // ..f..f......P...
    25E0: 04 76 06 66 0D 00 00 00 08 E8 86 ED E8 D4 EC 66  // .v.f...........f
    25F0: 33 DB 8A D9 59 83 EC 10 8B EC 66 89 46 04 66 89  // 3...Y.....f.F.f.
    2600: 5E 08 66 8B C2 66 33 D2 66 BB 64 00 00 00 66 F7  // ^.f..f3.f.d...f.
    2610: E3 66 89 46 00 BB 0C 00 8C D0 66 C1 E0 10 8B C4  // .f.F......f.....
    2620: E8 A1 07 8B EC B3 01 83 C4 10 C3 83 EC 10 8B EC  // ................
    2630: 66 89 56 00 66 89 5E 04 BB 2E 00 8C D0 66 C1 E0  // f.V.f.^......f..
    2640: 10 8B C4 E8 7E 07 B3 01 83 C4 10 C3 C3 53 51 66  // ....~........SQf
    2650: 50 B9 68 74 80 FB 03 74 0B B9 A0 8C 80 FB 00 75  // P.ht...t.......u
    2660: 03 B9 78 69 66 33 D2 8B D1 66 58 59 5B C3 66 52  // ..xif3...fXY[.fR
    2670: B3 00 66 F7 C2 00 00 FF FF 75 1A 80 FD 13 74 15  // ..f......u....t.
    2680: 80 FD 14 74 10 B3 01 80 FD 0E 74 09 B3 03 80 F9  // ...t......t.....
    2690: 03 74 02 B3 02 66 5A C3 B5 11 80 FA 23 74 07 80  // .t...fZ.....#t..
    26A0: FA 22 74 02 B5 00 C3 B5 02 80 FA 23 74 07 80 FA  // ."t........#t...
    26B0: 22 74 02 B3 01 C3 32 C9 80 FD 00 75 08 C7 46 00  // "t....2....u..F.
    26C0: 0B 01 B1 01 C3 50 33 C0 E8 9E 01 04 14 89 46 00  // .....P3.......F.
    26D0: 58 B1 01 C3 C3 8B DA B7 22 80 FE 21 74 02 B7 21  // X......."..!t..!
    26E0: C3 0C 01 C3 E8 40 0C 66 C1 E8 10 0B C0 74 1C 53  // .....@.f.....t.S
    26F0: 83 C3 06 E8 31 0C 5B 3D E0 01 72 0F 53 83 C3 18  // ....1.[=..r.S...
    2700: E8 24 0C 5B A8 80 75 03 0C 01 C3 32 C0 C3 B5 0C  // .$.[..u....2....
    2710: C3 B5 02 C3 50 E8 51 01 B1 03 0A C0 74 04 B1 08  // ....P.Q.....t...
    2720: 02 C8 58 C3 80 FA 22 75 05 C7 46 00 78 69 C3 E8  // ..X..."u..F.xi..
    2730: 1A 01 80 FD FF 74 35 83 EC 0C 8B EC 88 4E 01 88  // .....t5......N..
    2740: 6E 00 80 F9 0F 75 05 E8 4F 00 EB 0F 80 F9 10 75  // n....u..O......u
    2750: 0A 8D 9C 48 03 E8 CF 0B 88 46 02 8C D0 66 C1 E0  // ...H.....F...f..
    2760: 10 8B C4 BB 04 00 E8 5B 06 83 C4 0C C3 83 EC 10  // .......[........
    2770: 8B EC 88 4E 01 E8 76 EB 81 E2 00 07 FE CE C0 E6  // ...N..v.........
    2780: 04 88 76 00 E8 12 00 8C D0 66 C1 E0 10 8B C4 BB  // ..v......f......
    2790: 32 00 E8 2F 06 83 C4 10 C3 66 53 E8 70 EB 66 8B  // 2../.....fS.p.f.
    27A0: C2 66 33 D2 66 BB 8C 0A 00 00 66 F7 F3 66 5B 8A  // .f3.f.....f..f[.
    27B0: E8 88 6E 09 8D 9C 40 03 E8 6C 0B 88 46 02 88 66  // ..n...@..l..F..f
    27C0: 03 66 C1 E8 10 88 46 08 E8 32 EB 66 89 56 04 C3  // .f....F..2.f.V..
    27D0: 83 EC 20 8B EC 80 F9 04 75 0A 88 4E 01 32 C0 88  // .. .....u..N.2..
    27E0: 46 00 EB 56 E8 FC EA E8 7F 00 88 46 00 88 4E 01  // F..V.......F..N.
    27F0: E8 70 EB 88 56 0A 80 F9 01 74 18 80 F9 0B 75 3A  // .p..V....t....u:
    2800: 8D 9C 5C 03 E8 20 0B 88 46 02 E8 F0 EA 66 89 56  // ..\.. ..F....f.V
    2810: 04 EB 27 E8 09 EB 88 6E 08 E8 E1 EA 66 89 56 04  // ..'....n....f.V.
    2820: E8 0B EB 88 5E 03 E8 79 EA 88 6E 02 51 E8 1C 00  // ....^..y..n.Q...
    2830: 8A CD B0 01 D2 E0 59 88 46 09 8C D0 66 C1 E0 10  // ......Y.F...f...
    2840: 8B C4 BB 4C 00 E8 7C 05 83 C4 20 C3 8D 9C 3C 03  // ...L..|... ...<.
    2850: E8 D4 0A 32 ED 3C 03 74 0C 3C 09 72 09 3C 0E 77  // ...2.<.t.<.r.<.w
    2860: 05 2C 08 8A E8 C3 B5 FF C3 52 32 C0 80 EE 21 80  // .,.......R2...!.
    2870: FA 1E 74 10 B0 02 80 FA 20 74 09 B0 04 80 FA 21  // ..t..... t.....!
    2880: 74 02 B0 06 02 C6 5A C3 83 EC 08 8C D0 66 C1 E0  // t.....Z......f..
    2890: 10 8B C4 BB 4B 00 E8 2B 05 83 C4 08 C3 83 EC 08  // ....K..+........
    28A0: 8B EC 89 7E 00 89 5E 02 89 56 04 89 4E 06 8C D0  // ...~..^..V..N...
    28B0: 66 C1 E0 10 8B C4 BB 36 00 E8 08 05 8B EC 8B 5E  // f......6.......^
    28C0: 02 8A 7E 01 83 C4 08 C3 56 33 F6 66 F7 C2 00 00  // ..~.....V3.f....
    28D0: 80 00 75 0A 50 33 C0 8A C6 8B F0 32 F6 58 53 BB  // ..u.P3.....2.XS.
    28E0: 04 1F E8 A2 09 66 8B C2 BB 00 1F E8 99 09 5B 66  // .....f........[f
    28F0: F7 C2 00 00 10 00 75 02 33 DB 8B D3 66 C1 E2 10  // ......u.3...f...
    2900: BA 00 1F 83 EC 08 8B EC 66 89 56 00 88 4E 04 8A  // ........f.V..N..
    2910: C5 FE C8 88 46 07 C6 46 05 00 C6 46 06 00 8C D0  // ....F..F...F....
    2920: 66 C1 E0 10 8B C4 BB 4E 00 E8 98 04 8B EC 8A 5E  // f......N.......^
    2930: 05 8A 7E 06 83 C4 08 0A DB 74 32 51 B9 90 01 80  // ..~......t2Q....
    2940: FB 20 74 05 80 FB 80 75 13 B9 0A 00 8B C6 0A C0  // . t....u........
    2950: 74 0A B9 90 01 3C 01 74 03 B9 E8 03 E8 9B 05 59  // t....<.t.......Y
    2960: 8B C6 FE C4 8B F0 80 FC 06 76 98 0A DB 5E C3 8D  // .........v...^..
    2970: 5C 04 E8 B2 09 8B D0 B5 02 E8 14 00 74 11 B5 01  // \...........t...
    2980: 80 FA 13 75 0A E8 61 00 80 FA 13 75 02 B5 02 C3  // ...u..a....u....
    2990: 80 FA 14 C3 E8 F9 FF 74 03 80 FA 0E C3 80 FA 05  // .......t........
    29A0: C3 80 FA 02 74 03 80 FA 04 C3 80 FA 01 74 03 80  // ....t........t..
    29B0: FA 02 C3 80 FA 02 75 03 B2 01 C3 80 FA 04 75 03  // ......u.......u.
    29C0: B2 03 C3 C3 B5 08 E8 D8 FF 74 02 B5 04 C3 8D 5C  // .........t.....\
    29D0: 09 E8 53 09 8A C8 0A C9 75 03 32 C0 C3 B5 02 E8  // ..S.....u.2.....
    29E0: A6 04 8A C5 24 02 D0 E8 C3 8D 5C 08 E8 38 09 8A  // ....$.....\..8..
    29F0: D0 B6 01 83 EC 10 8B EC 89 56 02 8C D0 66 C1 E0  // .........V...f..
    2A00: 10 8B C4 BB 4F 00 E8 BB 03 8B EC 8A 56 04 83 C4  // ....O.......V...
    2A10: 10 C3 53 83 C3 4C E8 DC 08 5B C3 53 83 C3 4C E8  // ..S..L...[.S..L.
    2A20: 2E 08 5B C3 56 E8 59 03 8B 44 38 83 7D 20 00 5E  // ..[.V.Y..D8.} .^
    2A30: C3 52 50 0F BC D8 32 FF 80 FB 01 75 05 BB 00 24  // .RP...2....u...$
    2A40: EB 0C FE CB B8 00 04 F7 E3 05 00 20 8B D8 58 5A  // ........... ..XZ
    2A50: C3 57 E8 56 00 74 0A 8B 5D 02 E8 08 00 0B DB 5F  // .W.V.t..]......_
    2A60: C3 33 DB 5F C3 52 51 0B DB 74 1B 56 E8 F9 02 03  // .3._.RQ..t.V....
    2A70: DE 5E 33 C9 8A 4F 01 80 3F FF 74 08 3A 07 74 06  // .^3..O..?.t.:.t.
    2A80: 03 D9 EB F0 33 DB 0B DB 59 5A C3 56 51 E8 D8 02  // ....3...YZ.VQ...
    2A90: 32 C9 8D 7C 08 3B 5D 04 74 0C 83 C7 10 FE C1 3A  // 2..|.;].t......:
    2AA0: 4C 06 72 F1 33 FF 0B FF 59 5E C3 56 51 E8 B8 02  // L.r.3...Y^.VQ...
    2AB0: 32 C9 8D 7C 08 3B 1D 74 0C 83 C7 10 FE C1 3A 4C  // 2..|.;.t......:L
    2AC0: 06 72 F2 33 FF 0B FF 59 5E C3 56 51 E8 99 02 32  // .r.3...Y^.VQ...2
    2AD0: C9 8D 7C 08 3B 45 0C 74 0C 83 C7 10 FE C1 3A 4C  // ..|.;E.t......:L
    2AE0: 06 72 F1 33 FF 0B FF 59 5E C3 57 50 E8 DB FF 8A  // .r.3...Y^.WP....
    2AF0: C3 8B 5D 02 E8 6E FF 58 5F C3 53 32 C9 B3 01 E8  // ..]..n.X_.S2....
    2B00: E8 FF 74 03 8A 4F 02 0A C9 5B C3 53 32 ED B3 02  // ..t..O...[.S2...
    2B10: E8 D7 FF 74 03 8A 6F 02 0A ED 5B C3 50 57 8B DA  // ...t..o...[.PW..
    2B20: E8 68 FF 75 04 33 DB EB 0D B0 14 8B 5D 08 E8 34  // .h.u.3......]..4
    2B30: FF 74 F2 8B 5F 02 5F 58 C3 66 50 53 51 57 8D 1C  // .t.._._X.fPSQW..
    2B40: 66 25 FF FF 00 00 E8 3E 07 8B D8 E8 3B 00 23 C3  // f%.....>....;.#.
    2B50: 74 31 E8 75 FF 0B FF 74 2A 66 50 66 8B 45 04 8D  // t1.u...t*fPf.E..
    2B60: 5C 0C E8 22 07 66 33 C0 8B 05 8D 5C 04 E8 17 07  // \..".f3....\....
    2B70: 66 58 E8 85 FF E8 93 FF 8D 5C 08 66 33 C0 8B C1  // fX.......\.f3...
    2B80: E8 04 07 5F 59 5B 66 58 C3 56 E8 DB 01 8B 44 04  // ..._Y[fX.V....D.
    2B90: 5E C3 56 E8 D2 01 89 44 04 5E C3 E8 F8 01 8B F7  // ^.V....D.^......
    2BA0: 83 C6 38 BB 00 2C B9 23 00 E8 36 03 E8 01 00 C3  // ..8..,.#..6.....
    2BB0: 51 66 57 56 E8 B1 01 66 33 FF 8D 7C 08 33 C0 E8  // QfWV...f3..|.3..
    2BC0: D0 FF 32 C9 8B 15 B8 00 70 23 C2 3D 00 30 75 5A  // ..2.....p#.=.0uZ
    2BD0: 80 FA 15 74 0B E8 B1 FF 0B 45 0C E8 B4 FF EB 4A  // ...t.....E.....J
    2BE0: E8 64 00 89 45 0C 0B C0 75 04 89 05 EB 3C E8 98  // .d..E...u....<..
    2BF0: FF 0B 45 0C E8 9B FF 83 7D 06 00 74 16 E8 50 00  // ..E.....}..t..P.
    2C00: 89 45 06 0B C0 74 0C 83 7D 06 00 74 06 8B 5C 0A  // .E...t..}..t..\.
    2C10: E8 C1 00 E8 46 00 89 05 8B 5D 02 E8 B6 00 8B 5D  // ....F....].....]
    2C20: 02 E8 D1 00 8B 5D 08 E8 EF 00 83 C7 10 FE C1 3A  // .....].........:
    2C30: 4C 06 72 90 5E 66 5F 59 C3 08 00 80 00 00 02 00  // L.r.^f_Y........
    2C40: 04 00 08 40 00 00 00 53 E8 58 00 E8 D9 06 5B C3  // ...@...S.X....[.
    2C50: 53 E8 4F 00 83 C3 08 E8 CD 06 5B C3 53 57 52 E8  // S.O.......[.SWR.
    2C60: 41 00 83 C3 04 E8 BF 06 8B D0 E8 34 FD 75 16 8B  // A..........4.u..
    2C70: 5D 04 8B D3 E8 5E FA 57 E8 10 FE 5F 75 07 8B D0  // ]....^.W..._u...
    2C80: E8 30 FD 8B C2 5A 5F 5B C3 E8 D0 FF 66 C1 E8 10  // .0...Z_[....f...
    2C90: B4 11 E8 25 00 C3 E8 C3 FF 66 C1 E8 18 B4 10 E8  // ...%.....f......
    2CA0: 18 00 C3 51 52 33 C9 8A CE 80 E1 07 49 B8 10 00  // ...QR3......I...
    2CB0: F7 E1 BB 14 2C 03 D8 5A 59 C3 57 53 51 33 C9 8A  // ....,..ZY.WSQ3..
    2CC0: C8 8A C4 BB 03 71 E8 88 FD 83 C3 02 03 D9 8A 07  // .....q..........
    2CD0: 59 5B 5F C3 50 53 B0 01 E8 8A FD 74 15 E8 A9 FF  // Y[_.PS.....t....
    2CE0: 88 47 02 5B 53 B0 02 E8 7B FD 74 06 E8 A7 FF 88  // .G.[S...{.t.....
    2CF0: 47 02 5B 58 C3 51 50 B0 17 E8 69 FD 74 18 53 E8  // G.[X.QP...i.t.S.
    2D00: A1 FF 83 C3 0C E8 1F 06 8B C8 5B F7 C1 00 04 74  // ..........[....t
    2D10: 05 66 83 4F 02 01 58 59 C3 51 50 B0 14 E8 45 FD  // .f.O..XY.QP...E.
    2D20: 74 3A 53 E8 7D FF 83 C3 0C E8 FB 05 8B C8 5B F6  // t:S.}.........[.
    2D30: C1 01 74 05 66 83 67 02 FD F6 C1 80 74 05 66 83  // ..t.f.g.....t.f.
    2D40: 67 02 F7 F7 C1 00 01 74 08 66 81 4F 02 00 01 00  // g......t.f.O....
    2D50: 00 F7 C1 00 02 74 05 66 83 67 02 FB 58 59 C3 BF  // .....t.f.g..XY..
    2D60: A6 01 8B 3D 8B 7D 0C C3 BE A6 01 8B 34 8B 74 30  // ...=.}......4.t0
    2D70: C3 1E 0E 1F BF A6 01 8B 3D 8B 7D 0E 83 C7 04 1F  // ........=.}.....
    2D80: C3 BE A6 01 8B 34 8B 74 10 C3 BF A6 01 8B 3D 8B  // .....4.t......=.
    2D90: 7D 26 83 C7 04 C3 BF A6 01 8B 3D 8B 7D 40 C3 BE  // }&........=.}@..
    2DA0: A6 01 8B 34 8B 74 1A C3 BE A6 01 8B 34 8B 74 3A  // ...4.t......4.t:
    2DB0: C3 BF A6 01 8B 3D 8B 7D 0A 83 C7 04 B9 0C 00 C3  // .....=.}........
    2DC0: E8 01 00 CB 83 EC 06 8B EC 89 46 00 66 33 C0 C6  // ..........F.f3..
    2DD0: 46 04 00 89 46 02 06 52 8A D3 8B C5 E8 8A 17 5A  // F...F..R.......Z
    2DE0: 07 83 C4 06 C3 E8 77 FF 66 F7 45 10 01 00 00 00  // ......w.f.E.....
    2DF0: C3 50 E8 6A FF B8 01 00 09 45 10 58 C3 E8 5F FF  // .P.j.....E.X.._.
    2E00: 88 45 10 C3 66 53 83 EC 48 8B EC 66 89 5E 00 66  // .E..fS..H..f.^.f
    2E10: 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00 00 E8 A3  // .N...f..........
    2E20: FF 83 C4 48 66 5B E8 6A 01 E8 A4 01 83 EC 1C 8B  // ...Hf[.j........
    2E30: EC C6 46 01 07 8C D0 66 C1 E0 10 8B C4 BB 0D 00  // ..F....f........
    2E40: E8 81 FF 83 C4 1C E8 0E 00 BB 04 00 E8 C3 FB 66  // ...............f
    2E50: C1 E8 10 E8 A7 FF C3 83 EC 1C 8B EC C6 46 01 08  // .............F..
    2E60: 8C D0 66 C1 E0 10 8B C4 BB 0D 00 E8 56 FF 83 C4  // ..f.........V...
    2E70: 1C C3 E8 EA FE 66 8B 5D 08 66 8B 4D 0C C3 56 E8  // .....f.].f.M..V.
    2E80: 26 FF 66 8B 44 08 5E C3 83 EC 04 8B EC 89 4E 00  // &.f.D.^.......N.
    2E90: 8C D0 66 C1 E0 10 8B C4 BB 38 00 E8 26 FF 8B EC  // ..f......8..&...
    2EA0: 8A 6E 02 83 C4 04 C3 C3 B0 05 C3 B0 01 C3 B0 04  // .n..............
    2EB0: C3 B0 08 C3 53 66 50 66 33 C0 E8 CA 03 83 C3 04  // ....SfPf3.......
    2EC0: E2 F8 66 58 5B C3 32 C0 C3 FC E8 5A 04 66 C1 CB  // ..fX[.2....Z.f..
    2ED0: 10 E8 B3 03 66 C1 CB 10 66 81 C3 04 00 04 00 E2  // ....f...f.......
    2EE0: E9 C3 FC 66 AD E8 9F 03 83 C3 04 E2 F6 C3 FC E8  // ...f............
    2EF0: 35 04 66 AB 83 C3 04 E2 F6 C3 66 50 B8 30 00 E8  // 5.f.......fP.0..
    2F00: 10 00 66 58 C3 66 50 B8 C0 5D D1 E1 E8 03 00 66  // ..fX.fP..].....f
    2F10: 58 C3 52 F7 E1 8B CA E8 26 02 66 53 8B D9 66 C1  // X.R.....&.fS..f.
    2F20: E3 10 8B D8 66 B8 04 B1 03 00 B2 00 66 EF B2 04  // ....f.......f...
    2F30: 66 33 C0 66 EF 66 B8 08 B1 03 00 B2 00 66 EF B2  // f3.f.f.......f..
    2F40: 04 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00 00  // .f.3.f..s.f.f...
    2F50: 00 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10 3B  // ..u.f.f;.s.f...;
    2F60: C1 72 04 8B C8 EB ED 66 5B 5A C3 BB 42 EC E8 84  // .r.....f[Z..B...
    2F70: 03 66 33 D2 66 BB 30 00 00 00 66 F7 F3 C3 66 50  // .f3.f.0...f...fP
    2F80: 53 BB 07 00 E8 8B FA 25 00 02 35 00 02 0B C0 5B  // S......%..5....[
    2F90: 66 58 C3 66 51 B3 01 E8 80 01 E8 02 FE 66 33 C9  // fX.fQ........f3.
    2FA0: 8B 4C 08 66 C1 E0 0A 0B C9 75 03 B9 20 00 66 2B  // .L.f.....u.. .f+
    2FB0: C1 E8 EB FD 66 89 44 04 89 4C 08 66 59 C3 56 1E  // ....f.D..L.fY.V.
    2FC0: 0E 1F E8 DA FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3  // .....f.D.f....^.
    2FD0: E8 C0 FF 06 E8 BF FD 0E 07 BB 00 78 E8 48 03 66  // ...........x.H.f
    2FE0: 3B 05 75 07 B9 00 01 FC E8 03 FF E8 A8 FD BE A6  // ;.u.............
    2FF0: 01 8B 34 8B 74 14 8B 45 14 89 44 0C E8 82 FD 0B  // ..4.t..E..D.....
    3000: F6 74 4F 8B 45 28 89 44 20 8A 45 33 88 44 38 F6  // .tO.E(.D .E3.D8.
    3010: 45 26 08 74 17 8A 45 26 C0 E8 04 88 44 24 80 64  // E&.t..E&....D$.d
    3020: 24 FD F6 45 26 01 74 04 80 4C 24 02 57 83 C7 38  // $..E&.t..L$.W..8
    3030: 8A 85 87 00 88 44 3B 5F 66 8B 45 18 89 44 28 B9  // .....D;_f.E..D(.
    3040: 07 00 8D 5D 2C 8A 07 0A C0 74 03 88 44 2C 43 46  // ...],....t..D,CF
    3050: E2 F3 E8 53 FD 8B 45 20 89 44 10 8B 45 22 89 44  // ...S..E .D..E".D
    3060: 12 8B 45 1C 89 44 14 8B 45 1E 89 44 16 BB 04 71  // ..E..D..E..D...q
    3070: B0 09 E8 DC F9 74 0C 57 83 C7 38 8A 85 85 00 88  // .....t.W..8.....
    3080: 47 04 5F 07 C3 BE A6 01 8B 34 8B 74 1E 83 C6 04  // G._......4.t....
    3090: B9 26 00 C3 56 E8 E9 FC 8A 6C 33 5E C3 56 E8 E0  // .&..V....l3^.V..
    30A0: FC 53 81 C3 09 01 E8 7E 02 8A E8 5B 53 81 C3 00  // .S.....~...[S...
    30B0: 01 E8 73 02 5B 8A C5 66 89 44 34 5E C3 56 E8 C0  // ..s.[..f.D4^.V..
    30C0: FC 66 8B 44 34 53 81 C3 08 01 B1 01 8A E8 E8 FA  // .f.D4S..........
    30D0: 01 5B 53 81 C3 00 01 B1 01 8A EC E8 ED 01 5B 53  // .[S...........[S
    30E0: 81 C3 02 01 66 C1 E8 10 E8 B4 01 5B 5E C3 56 E8  // ....f......[^.V.
    30F0: 8F FC 8B FE 83 C7 04 5E C3 56 E8 84 FC 8A 44 24  // .......^.V....D$
    3100: 80 FD 00 74 05 88 6C 33 0C 02 88 44 24 5E C3 32  // ...t..l3...D$^.2
    3110: C0 C3 E8 81 FC 66 8B 45 08 C3 66 53 83 EC 04 8B  // .....f.E..fS....
    3120: EC 8C D0 66 C1 E0 10 8B C4 66 89 5E 00 BB 06 00  // ...f.....f.^....
    3130: E8 91 FC 8B EC 66 8B 46 00 83 C4 04 66 5B C3 00  // .....f.F....f[..
    3140: 66 50 8C C8 3D 00 C0 75 0C BA C3 03 EC 8A F0 0A  // fP..=..u........
    3150: F6 74 02 EB 0E 53 2E 8B 1E 14 00 B2 20 E8 D6 00  // .t...S...... ...
    3160: 8A F4 5B 32 D2 66 ED 66 58 C3 2E 8B 1E 14 00 C3  // ..[2.f.fX.......
    3170: 0B C9 75 1A 4B 74 16 43 3B DA 77 09 8B C8 8B C2  // ..u.Kt.C;.w.....
    3180: 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B C9 C3 3B CA  // +..........+..;.
    3190: 72 1A 75 10 3B D8 77 0C 2B C3 8B D8 2B C9 2B D2  // r.u.;.w.+...+.+.
    31A0: B8 01 00 C3 2B C9 2B DB 93 87 CA C3 55 56 2B F6  // ....+.+.....UV+.
    31B0: 8B EE 03 DB 13 C9 72 11 45 3B CA 72 F5 77 04 3B  // ......r.E;.r.w.;
    31C0: D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1 DB 2B C3 1B  // .v....Mx ....+..
    31D0: D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1 DB 03 C3 13  // ..r...Mx........
    31E0: D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B CA 8B C6 33  // .s.............3
    31F0: D2 5E 5D C3 93 50 92 0B C0 74 02 F7 E2 91 0B C0  // .^]..P...t......
    3200: 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3 52 66 50 B4  // t.....X.....RfP.
    3210: 80 8A C7 66 C1 E0 10 8A E3 8A C2 24 FC BA F8 0C  // ...f.......$....
    3220: 66 EF 66 58 5A C3 52 BA FC 0C 66 ED 5A C3 52 BA  // f.fXZ.R...f.Z.R.
    3230: FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8 CE FF E8 E5  // ..f.Z..1........
    3240: FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8 E0 FF 9D C3  // ....$...........
    3250: 52 66 53 66 50 E8 06 00 66 58 66 5B 5A C3 66 C1  // RfSfP...fXf[Z.f.
    3260: E3 10 66 C1 EB 0E E8 D7 FE E8 93 01 C3 66 50 66  // ..f..........fPf
    3270: C1 E3 10 66 C1 EB 10 E8 44 FD 66 03 D8 66 81 CB  // ...f....D.f..f..
    3280: 00 00 00 80 66 58 C3 52 66 53 E8 04 00 66 5B 5A  // ....fX.RfS...f[Z
    3290: C3 66 50 E8 AA FE E8 D4 FF E8 63 01 66 58 C3 52  // .fP.......c.fX.R
    32A0: 51 66 53 66 50 8A CB 80 E3 FC 80 E1 03 C0 E1 03  // QfSfP...........
    32B0: E8 8D FE E8 B7 FF E8 2D 01 66 D3 C8 58 50 66 D3  // .......-.f..XPf.
    32C0: C0 E8 3B 01 66 58 66 5B 59 5A C3 66 50 51 C0 E1  // ..;.fXf[YZ.fPQ..
    32D0: 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0 E8 A8 FF 59  // ..S.f....f.....Y
    32E0: 66 58 C3 66 50 51 C0 E1 03 E8 3B 00 66 D3 C8 59  // fX.fPQ....;.f..Y
    32F0: 8A E8 66 58 C3 E8 5F 00 C3 E8 44 FE 66 C1 E3 10  // ..fX.._...D.f...
    3300: 66 C1 EB 0E E8 DF 00 C3 E8 35 FE 66 C1 E3 02 E8  // f........5.f....
    3310: D4 00 C3 52 66 53 E8 04 00 66 5B 5A C3 E8 20 FE  // ...RfS...f[Z.. .
    3320: E8 4A FF E8 C0 00 C3 51 66 52 8A EB 8A CB 80 E1  // .J.....QfR......
    3330: 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9 00 74 14 66  // .............t.f
    3340: 8B D0 83 C3 04 E8 CB FF 83 EB 04 66 92 66 0F AD  // ...........f.f..
    3350: D0 8A DD 66 5A 59 C3 52 66 53 E8 9C FF 66 5B 5A  // ...fZY.RfS...f[Z
    3360: C3 52 66 53 E8 A1 FF 66 5B 5A C3 66 50 55 52 66  // .RfS...f[Z.fPURf
    3370: 50 8B EC 8B 56 0C 89 56 08 E8 C4 FD B2 00 66 ED  // P...V..V......f.
    3380: 66 89 46 0A 66 58 5A 5D C3 66 50 55 52 66 50 8B  // f.F.fXZ].fPURfP.
    3390: EC 8B 56 0C 89 56 08 E8 A6 FD 2E A1 F5 01 B2 18  // ..V..V..........
    33A0: EF B2 00 66 ED 66 89 46 0A 66 58 5A 5D C3 66 50  // ...f.f.F.fXZ].fP
    33B0: 55 52 8B EC E8 89 FD B2 00 66 8B 46 0A 66 EF 8B  // UR.......f.F.f..
    33C0: 56 08 89 56 0C 66 8B 46 04 66 89 46 08 5A 5D 66  // V..V.f.F.f.F.Z]f
    33D0: 58 66 58 C3 66 50 52 E8 66 FD B2 18 66 ED 2E A3  // XfX.fPR.f...f...
    33E0: F5 01 5A 66 58 C3 66 81 FB FF 00 00 00 77 04 8A  // ..ZfX.f......w..
    33F0: D3 EB 09 66 8B C3 B2 00 66 EF B2 04 66 ED C3 66  // ...f....f...f..f
    3400: 81 FB FF 00 00 00 77 04 8A D3 EB 0A 66 93 B2 00  // ......w.....f...
    3410: 66 EF 66 93 B2 04 66 EF C3 C3 C3 55 8B EC 53 51  // f.f...f....U..SQ
    3420: 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC  // ..&.\.&.L..(..f.
    3430: 59 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14  // Y[].SQ..&.\$3...
    3440: 00 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26  // .Y[.U..SQ..&.\.&
    3450: 8B 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E  // .L...RVW.......N
    3460: FE 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20  // .....&.|&.E.2.. 
    3470: 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA  // .+..............
    3480: 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7  // .M.2............
    3490: D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26  // ...&!D.&!|.....&
    34A0: 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66  // .|&.M.2.. .+...f
    34B0: C7 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2  // .F........n..^..
    34C0: F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1  // ..M.2....V......
    34D0: D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06  // ...#F.#V..M.2...
    34E0: D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F  // ......&.D.&.T.._
    34F0: 5E 5A C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F  // ^Z.U..SQRWP..&..
    3500: 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0  // &.E.2.. .+......
    3510: E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46  // .........M..N..F
    3520: F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26  // .....N.........&
    3530: 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53  // .G.&....f._Z...S
    3540: 51 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01  // QRW......&.w&.L.
    3550: 32 ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06  // 2.. .+..........
    3560: D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B  // ......&..&.M.2..
    3570: C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    3580: 1C 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E  // .&!W._...SV.....
    3590: C2 26 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A  // .&.w&.<.ts.<.uX.
    35A0: 44 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75  // D.2.&....uL&;G.u
    35B0: 46 8A 04 6B F0 03 8A 84 E2 91 26 01 47 26 8C D0  // F..k......&.G&..
    35C0: 8E C0 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B  // ..&.w&.<.t...2.k
    35D0: F0 03 8B C3 FF 94 E0 91 26 8B 77 26 8A 04 32 E4  // ........&.w&..2.
    35E0: EB D1 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47  // ...D.&)G&&.G&&.G
    35F0: 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B  // .&.w...&.w&..2.k
    3600: F0 03 8A 84 E2 91 26 01 47 26 E9 80 FF 33 C0 33  // ......&.G&...3.3
    3610: F6 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26  // ...^[.SQRV...w5&
    3620: 8B 54 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26  // .T.&.W.&.G.....&
    3630: 8B 47 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E  // .G 3.&.G.&.T....
    3640: C1 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75  // .&.G/.....&..4.u
    3650: 22 26 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26  // "&.w.&.w.u.&.g.&
    3660: D1 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 79 11  // .W.&.g.&.W....y.
    3670: E9 E1 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47  // ...&.G42.....&.G
    3680: 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B  // .&.W.........SV.
    3690: D8 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37  // ..w5&.D.2....&.7
    36A0: 26 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04  // &.4..&.G.&._.&..
    36B0: 26 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77  // &.\.^[.SRV.....w
    36C0: 35 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02  // 5..&.T...@s!&.w.
    36D0: 32 F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26  // 2....&.t...&.W.&
    36E0: 8B 47 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41  // .G.&..&.D......A
    36F0: 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89  // u.&.G.&.W.&.G.&.
    3700: 57 12 EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57  // W..h..@u.&.G.&.W
    3710: 0A 26 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A  // .&.G.&.W..Q..Bu.
    3720: 26 8B 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26  // &.G.&.G".B..Cu.&
    3730: 8A 47 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B  // .G.&.G3.3..Fu.&.
    3740: 57 08 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C  // W.&.G.&.W.&.G...
    3750: 80 FA 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80  // ..Gu.&.G.&.G$...
    3760: FA 48 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3  // .Hu.&.G.&.G ^Z[.
    3770: 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47  // SV...w5&.D.2.&.G
    3780: 14 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B  // .&.G...^[.SV..&.
    3790: 77 02 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7  // w.&.t...2.&.G.&.
    37A0: 47 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53  // G...&._.&.G.^[.S
    37B0: 56 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77  // V..&.w.&.t..4&.w
    37C0: 14 26 C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02  // .&.G...&._.&.G..
    37D0: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    37E0: 04 8B 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02  // ..t.&.G.&.w.&._.
    37F0: 26 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF  // &.G..^[.SRV...p.
    3800: 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA  // ..&.G.&.W.......
    3810: D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 2B 10 E9  // ..&.G.&.T....+..
    3820: 4A FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53  // J.S..&._.&.G.[.S
    3830: 8B D8 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B  // ..&._.&.G..[.SV.
    3840: D8 E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14  // ..k...&.W 3.&.W.
    3850: 26 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4  // &.D.....&.G.2...
    3860: 06 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47  // .=..u.2.3.^[.&.G
    3870: 2E 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00  // .2....=..t.&..4.
    3880: 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34 32 E4  // u..../.^[.&.G42.
    3890: 26 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E  // &.G.&.G........^
    38A0: 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26  // [.S.....&.G....&
    38B0: 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3  // ..&....&..&.W.[.
    38C0: C6 38 BB 38 D1 38 20 39 D7 38 EF 38 09 39 14 39  // .8.8.8 9.8.8.9.9
    38D0: 1A 39 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83  // .9SQV.........&.
    38E0: 7F 16 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02  // ...u"&...@s.&.w.
    38F0: 26 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07  // &._....&.D...&..
    3900: 26 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83  // &.W..{.&.w.&.G..
    3910: C6 C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF  // .....uq...wl....
    3920: A4 58 38 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B  // .X8&.G.&.W..T.&.
    3930: 47 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26  // G.&.W..I.&.G".K&
    3940: 8A 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2  // .O32....3.......
    3950: E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00  // .....+.&.O32....
    3960: 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11  // 3...............
    3970: 05 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24  // .&.G.&.W....&.G$
    3980: EB 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53  // ..&.G ..3.3....S
    3990: 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A  // V.......&.G.&.W.
    39A0: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    39B0: 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B  // .....^[.3.3..SV.
    39C0: D8 E8 EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54  // ....&.w.&.w"...T
    39D0: 02 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26  // .^[.S..&.G+....&
    39E0: 8B 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B  // .G.&.W.[.S..&.G+
    39F0: 01 E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2  // ......S..&.G+...
    3A00: FD EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03  // ...S....5&._....
    3A10: 80 E3 07 32 FF 03 DB FF 97 70 91 5B C3 53 52 56  // ...2.....p.[.SRV
    3A20: 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    3A30: 8C 91 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4  // ..&.G.&.W.&.G-2.
    3A40: 8B F0 03 F0 8B C3 FF 94 A4 91 26 89 47 04 26 89  // ..........&.G.&.
    3A50: 57 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED  // W....SQV..&.O+2.
    3A60: 8B F1 8A 8C D4 91 E3 0A 26 D1 6F 06 26 D1 5F 04  // ........&.o.&._.
    3A70: E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C B4  // ..&.O+2.........
    3A80: 91 8B B4 B6 91 26 21 4F 04 26 21 77 06 26 8A 4F  // .....&!O.&!w.&.O
    3A90: 2A 32 ED 8B F1 8A 8C DC 91 E3 0A 26 D1 67 04 26  // *2.........&.g.&
    3AA0: D1 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F  // .W...&.O.&.w.&.O
    3AB0: 14 26 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C  // .&.w....SQRVW...
    3AC0: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A  // ...&.G+2......&.
    3AD0: 47 2A 8B F8 8A 8D DC 91 32 ED 8B 84 B4 91 8B 94  // G*......2.......
    3AE0: B6 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // ..............&!
    3AF0: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    3B00: DC 91 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6  // ..2...&.o.&._...
    3B10: 26 8A 47 2B 8B F0 C1 E6 02 8B 84 B4 91 8B 94 B6  // &.G+............
    3B20: 91 26 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B  // .&!G.&!W.&.G*2..
    3B30: F0 8A 8C DC 91 32 ED E3 0A 26 D1 67 08 26 D1 57  // .....2...&.g.&.W
    3B40: 0A E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26  // ...&.G.&.W.&.G.&
    3B50: 09 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A  // .W._^ZY[.SQV..&.
    3B60: 4F 2B 32 ED 8B F1 8A 8C D4 91 E3 0A 26 D1 6F 06  // O+2.........&.o.
    3B70: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    3B80: 02 8B 8C B4 91 8B B4 B6 91 26 21 4F 04 26 21 77  // .........&!O.&!w
    3B90: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C DC 91 E3 0A 26  // .&.O*2.........&
    3BA0: D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B  // .o.&._...&.O+2..
    3BB0: F1 C1 E6 02 8B 8C B4 91 8B B4 B6 91 26 21 4F 08  // ............&!O.
    3BC0: 26 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0  // &!w....QRW......
    3BD0: 26 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03  // &..+.t.&.G,2....
    3BE0: F0 8B C3 FF 94 8C 91 26 89 47 08 26 89 57 0A EB  // .......&.G.&.W..
    3BF0: 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 98  // .&.G,2..........
    3C00: 91 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 A4  // .&.G-2..........
    3C10: 91 26 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F  // .&.G.&.W.....&..
    3C20: 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26  // +.tJ&.G+2......&
    3C30: 8A 47 2A 8B F8 8A 8D DC 91 32 ED 8B 84 B4 91 8B  // .G*......2......
    3C40: 94 B6 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26  // ...............&
    3C50: 21 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04  // !G.&!W......&.G.
    3C60: 26 8B 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B  // &.W.&.G.&.W...&.
    3C70: 57 04 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A  // W.&.G.&.W.&.G.&.
    3C80: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 80 91 5F 5A  // G,2..........._Z
    3C90: 59 C3 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B  // Y.SQRVW..&.G*2..
    3CA0: F0 8A 8C DC 91 32 ED E3 0A 26 D1 67 04 26 D1 57  // .....2...&.g.&.W
    3CB0: 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // .......&.G+2....
    3CC0: E6 02 26 8A 47 2A 8B F8 8A 8D DC 91 32 ED 8B 84  // ..&.G*......2...
    3CD0: B4 91 8B 94 B6 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ................
    3CE0: F7 D2 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B  // ..&.G.&.W.&.G.&.
    3CF0: 57 06 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC  // W.&!G.&!W..V.U..
    3D00: 51 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // QRP..&.G,2......
    3D10: C3 FF 94 8C 91 26 89 47 08 26 89 57 0A 26 8A 47  // .....&.G.&.W.&.G
    3D20: 2B 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57  // +.F......&.G.&.W
    3D30: 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 A4  // .&.O-2..........
    3D40: 91 26 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46  // .&.G.&.W....D..F
    3D50: FA 32 E4 8B F0 8A 8C D4 91 E3 0A 26 D1 6F 16 26  // .2.........&.o.&
    3D60: D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02  // ._...&.W+2......
    3D70: 8B 84 B4 91 8B 94 B6 91 26 21 47 14 26 21 57 16  // ........&!G.&!W.
    3D80: 26 8A 47 2A 32 E4 8B F0 8A 8C DC 91 32 ED E3 0A  // &.G*2.......2...
    3D90: 26 D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B  // &.g.&.W...&.G.&.
    3DA0: 57 16 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4  // W.&.G.&.W.&.G,2.
    3DB0: 8B F0 03 F0 8B C3 FF 94 80 91 8D 66 FC 5A 59 5D  // ...........f.ZY]
    3DC0: C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A  // .Q...V.&.O+2....
    3DD0: 8C D4 91 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B  // .....&.o.&._....
    3DE0: C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3  // ....&.O,2.......
    3DF0: FF 94 80 91 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC  // ....Y...."....U.
    3E00: 26 8B 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A  // &.G.&.w.&.G.&.w.
    3E10: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 80 91  // &.G,2...........
    3E20: C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47  // .SV........(.&.G
    3E30: 04 26 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47  // .&.w.&1G.&1w.&.G
    3E40: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 80 91 5E 5B C3  // ,2...........^[.
    3E50: 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F  // SQV..........&.O
    3E60: 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8  // ...&.g.&.W......
    3E70: 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94  // F.&.O,2.........
    3E80: 80 91 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3  // ..^Y[.SQV.......
    3E90: E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F  // ...&.O...&.o.&._
    3EA0: 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB  // .....R...r......
    3EB0: 8B F3 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11  // ..&.G.&.W.&.G.&.
    3EC0: 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03  // T......&.G,2....
    3ED0: F0 8B C3 FF 94 80 91 5A C3 52 8B D8 E8 3E FB 8B  // .......Z.R...>..
    3EE0: C3 E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29  // ..q...&.G.&.W.&)
    3EF0: 47 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B  // G.&.T...QR......
    3F00: C6 E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ..U.&.D.&.T.&.\.
    3F10: 26 8B 4C 06 E8 DD F2 26 89 44 0C 26 89 54 0E 5A  // &.L....&.D.&.T.Z
    3F20: 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B C2 E8  // Y.R........,....
    3F30: 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6 E8 18  // \.Z.QRW.........
    3F40: FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C  // .&.D.&.T.&.\.&.L
    3F50: 06 E8 1C F2 26 89 44 0C 26 89 54 0E 8C D7 8E C7  // ....&.D.&.T.....
    3F60: 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06  // &.D.&.T.&.\.&.L.
    3F70: E8 FD F1 26 89 5C 10 26 89 4C 12 E9 10 FD 52 8B  // ...&.\.&.L....R.
    3F80: D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07 5A C3  // ..............Z.
    3F90: 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1 8E C1  // QR..............
    3FA0: 26 8B 47 08 26 8B 57 0A 26 3B 57 06 75 0E 26 3B  // &.G.&.W.&;W.u.&;
    3FB0: 47 04 75 08 26 C6 47 30 01 5A 59 C3 8B D0 26 8B  // G.u.&.G0.ZY...&.
    3FC0: 47 0A 26 3B 47 06 72 08 75 0A 26 3B 57 04 73 04  // G.&;G.r.u.&;W.s.
    3FD0: 33 C0 EB 03 B8 02 00 26 88 47 30 5A 59 C3 51 52  // 3......&.G0ZY.QR
    3FE0: 57 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // W..&.G,2........
    3FF0: 94 8C 91 26 89 47 08 26 89 57 0A 8C D0 8E C0 26  // ...&.G.&.W.....&
    4000: 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D D4 91  // .G+2............
    4010: 32 ED 8B 84 B4 91 8B 94 B6 91 E3 06 D1 E0 D1 D2  // 2...............
    4020: E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A E9 4D  // ......&!G.&!W..M
    4030: FC 55 8B EC 51 52 57 83 EC 06 8B D8 26 8A 47 2B  // .U..QRW.....&.G+
    4040: 32 E4 8B F0 C1 E6 02 8B F8 8A 8D D4 91 32 ED 8B  // 2............2..
    4050: 84 B4 91 89 46 F4 8B 84 B6 91 89 46 F6 E3 08 D1  // ....F......F....
    4060: 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89 46 F8  // f..V....~..F..F.
    4070: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 8C 91  // &.G,2...........
    4080: 26 89 47 08 26 89 57 0A 8B C3 E8 47 F9 26 89 47  // &.G.&.W....G.&.G
    4090: 04 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2 26 23  // .&.W......V...&#
    40A0: 47 08 26 23 57 0A 26 89 47 14 26 89 57 16 26 21  // G.&#W.&.G.&.W.&!
    40B0: 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D 77 35 8E C1  // ...F.&!G....w5..
    40C0: 26 80 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1 67 08  // &.<.s.&.O...&.g.
    40D0: 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A 26 D1  // &.W.....&.O...&.
    40E0: 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46 F8 26  // o.&._...&!...F.&
    40F0: 21 47 0A 26 8B 57 14 26 8B 47 16 26 09 57 08 26  // !G.&.W.&.G.&.W.&
    4100: 09 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // .G.&.G,2........
    4110: 94 80 91 8D 66 FA 5F E9 A3 FC 52 8B D8 E8 FD F8  // ....f._...R.....
    4120: 8B C3 E8 34 FA 26 8B 47 08 26 8B 57 0A 26 85 57  // ...4.&.G.&.W.&.W
    4130: 06 75 06 26 85 47 04 74 05 B8 03 00 EB 03 B8 01  // .u.&.G.t........
    4140: 00 26 88 47 30 5A C3 53 51 52 56 8B D8 26 8A 4F  // .&.G0Z.SQRV..&.O
    4150: 2D 32 ED 8B F1 03 F1 FF 94 A4 91 26 89 47 04 26  // -2.........&.G.&
    4160: 89 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C D4 91 E3  // .W.&.G+2........
    4170: 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47 2B 8B  // .&.o.&._...&.G+.
    4180: F0 C1 E6 02 8B 84 B4 91 8B 94 B6 91 26 21 47 04  // ............&!G.
    4190: 26 21 57 06 E9 BD F9 52 8B D8 E8 AA FF 26 8B 47  // &!W....R.....&.G
    41A0: 04 26 8B 57 06 26 89 47 18 26 89 57 1A 5A C3 51  // .&.W.&.G.&.W.Z.Q
    41B0: 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77 02 26 8B  // R.........&.w.&.
    41C0: 74 02 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B 74 02  // t..<ZZt[&.w.&.t.
    41D0: 80 3C 63 75 E1 26 8B 77 02 26 FF 44 02 8B C3 E8  // .<cu.&.w.&.D....
    41E0: 21 F8 26 89 47 08 26 89 57 0A 8B C3 E8 FA F7 26  // !.&.G.&.W......&
    41F0: 89 47 14 26 89 57 16 8C D1 8E C1 26 8B 57 04 26  // .G.&.W.....&.W.&
    4200: 8B 47 06 26 3B 47 0A 75 AD 26 3B 57 08 75 A7 26  // .G.&;G.u.&;W.u.&
    4210: 8B 77 02 26 8B 04 26 03 47 14 8B DE 26 89 47 02  // .w.&..&.G...&.G.
    4220: 5A 59 C3 26 8B 5F 02 26 83 47 02 02 5A 59 C3 52  // ZY.&._.&.G..ZY.R
    4230: 57 8B D8 8C D0 8E C0 26 8B 77 02 26 8B 74 02 8A  // W......&.w.&.t..
    4240: 54 01 84 D2 75 08 26 C7 47 22 00 00 EB 2F 80 FA  // T...u.&.G".../..
    4250: FF 75 14 26 8B 77 02 26 8B 3F 26 8B 34 26 2B 75  // .u.&.w.&.?&.4&+u
    4260: 02 26 89 77 22 EB 16 26 8B 07 E8 E3 02 8B F0 8A  // .&.w"..&........
    4270: C2 32 E4 03 C0 03 F0 8B 04 26 89 47 22 26 8B 5F  // .2.......&.G"&._
    4280: 02 26 83 47 02 02 5F 5A C3 8B D8 26 80 67 2F F9  // .&.G.._Z...&.g/.
    4290: 26 8B 77 02 26 8B 74 02 8A 44 01 26 88 47 34 26  // &.w.&.t..D.&.G4&
    42A0: 8B 5F 02 26 83 47 02 03 C3 8B D8 26 8B 77 02 26  // ._.&.G.....&.w.&
    42B0: 8B 74 02 8B 74 01 26 89 77 20 EB E3 53 8B D8 26  // .t..t.&.w ..S..&
    42C0: 8A 47 2C 32 E4 24 03 26 80 67 2F F9 C1 E0 09 26  // .G,2.$.&.g/....&
    42D0: 09 47 2E E9 4F F5 8B D8 26 8B 77 02 26 8B 74 02  // .G..O...&.w.&.t.
    42E0: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    42F0: C3 E8 40 04 26 8B 5F 02 26 83 47 02 02 C3 8B D8  // ..@.&._.&.G.....
    4300: 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47  // &.w.&.t..D.2.&.G
    4310: 04 26 C7 47 06 00 00 8B C3 E8 08 04 EB D6 53 56  // .&.G..........SV
    4320: 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26  // ..&.w.&.t..D.2.&
    4330: 89 47 04 26 C7 47 06 00 00 8B C3 E8 06 04 E9 86  // .G.&.G..........
    4340: F4 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01  // .SV..&.w.&.t..D.
    4350: 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 F0  // 2.&.G.&.G.......
    4360: 03 E9 63 F4 53 56 8B D8 26 8B 77 02 8B DE 26 8B  // ..c.SV..&.w...&.
    4370: 5F 02 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B C3 51  // _.._....&.\.^[.Q
    4380: 52 8B D8 26 8B 77 02 26 83 44 02 02 26 8B 07 E8  // R..&.w.&.D..&...
    4390: A0 01 8B C8 26 8B 77 28 8A 44 01 32 E4 03 C0 8B  // ....&.w(.D.2....
    43A0: F1 03 F0 83 3C 00 74 4F 26 8B 77 28 8A 54 01 32  // ....<.tO&.w(.T.2
    43B0: F6 8B C3 E8 B0 01 26 88 47 31 26 8B 77 02 26 8B  // ......&.G1&.w.&.
    43C0: 34 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8 02 32 E4  // 4.D....2.$....2.
    43D0: 24 1F 26 80 67 2F 07 C1 E0 0B 26 09 47 2E 26 8B  // $.&.g/....&.G.&.
    43E0: 37 26 8B 47 2E C1 E8 0B C1 E0 02 26 01 04 26 C6  // 7&.G.......&..&.
    43F0: 47 32 01 26 89 4F 28 5A 59 C3 53 8B D8 26 C6 47  // G2.&.O(ZY.S..&.G
    4400: 32 82 5B C3 57 8B D8 8C D6 8E C6 26 80 7F 2C 05  // 2.[.W......&..,.
    4410: 74 0A 26 8A 47 2C 26 3A 47 30 75 1E 26 8B 77 02  // t.&.G,&:G0u.&.w.
    4420: 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7  // &.t.&...&.=.t...
    4430: 26 8B 5F 02 26 89 77 02 5F C3 26 8B 5F 02 26 83  // &._.&.w._.&._.&.
    4440: 47 02 03 5F C3 53 56 57 8B D8 8C D6 8E C6 26 80  // G.._.SVW......&.
    4450: 7F 30 01 74 0A 26 8A 47 30 26 3A 47 2C 75 20 26  // .0.t.&.G0&:G,u &
    4460: 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74  // .w.&.t.&...&.=.t
    4470: 01 03 F7 26 8B 5F 02 26 89 77 02 5F 5E 5B C3 26  // ...&._.&.w._^[.&
    4480: 8B 5F 02 26 83 47 02 03 EB F1 53 56 57 8B D8 8C  // ._.&.G....SVW...
    4490: D0 8E C0 26 80 7F 30 01 74 E5 EB C3 55 8B EC 53  // ...&..0.t...U..S
    44A0: 51 52 57 8B D8 26 8B 77 02 26 8B 74 02 8A 04 26  // QRW..&.w.&.t...&
    44B0: C6 47 3D 00 8C D1 8E C1 26 80 7F 3D 08 73 20 26  // .G=.....&..=.s &
    44C0: 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C 02 03 FA 8B  // .w.&.W=2.&.|....
    44D0: F3 03 F2 8A 15 26 88 54 35 26 FE 47 3D EB D5 26  // .....&.T5&.G=..&
    44E0: 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94 01 92  // .....2..........
    44F0: 26 01 55 02 26 8B 7F 28 8A 55 01 80 E2 07 26 88  // &.U.&..(.U....&.
    4500: 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2 07 26  // W-&..(.U.......&
    4510: 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26 88 57  // .W+&..(.U....&.W
    4520: 2A 8A 94 00 92 26 88 57 2C 8D 66 F8 5F 5A 59 5B  // *....&.W,.f._ZY[
    4530: 5D C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03  // ].SV..&.w....tH.
    4540: F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3  // ....t........^[.
    4550: 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B  // SV..&.w....tH...
    4560: D8 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51  // ..t .......U..SQ
    4570: 56 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89  // VW..@...F.......
    4580: 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46  // F.&.E.._....^..F
    4590: DE 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8  // ........F.2..F..
    45A0: C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00  // ....2....^....?.
    45B0: 0F 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7  // ..e..F..f...F...
    45C0: 46 D8 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00  // F...f.F......F..
    45D0: 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9  // ..F....<......V.
    45E0: 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75  // ..2....^....?.tu
    45F0: 26 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83  // &.E......G.2....
    4600: C1 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0  // ..2.......t...3.
    4610: 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0  // P.......F...tA..
    4620: 08 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8  // .&.G...2....^...
    4630: 26 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26  // &.E....^.&...^.&
    4640: 8B 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26  // .....&.G..^..v.&
    4650: 89 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6  // .w..^..^..F.....
    4660: 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8  // F.....F...F.2...
    4670: 10 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F  // ......f..F.2....
    4680: 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E  // ......^...&._..^
    4690: E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA  // ..^.&._..?[uJ.F.
    46A0: 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B  // ..^.&._..^..^.&.
    46B0: 1F 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE  // ..G.2......2....
    46C0: 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B  // ...^..^...t.&...
    46D0: 47 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B  // G....2.$........
    46E0: 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A D0 8D  // ^.&)....F.......
    46F0: 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF  // F......2.....F..
    4700: 97 FE 91 E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E  // ....r..~.......~
    4710: EA 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E  // ..t..F...2..f._^
    4720: E9 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 C9  // ....SQ..&.O.2...
    4730: E7 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 C4  // .Y[.SQ..&.O.2...
    4740: E7 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B  // .Y[.S..&.G.2...[
    4750: C3 53 51 8B D8 26 8A 4F 04 32 ED E8 D6 D4 59 5B  // .SQ..&.O.2....Y[
    4760: C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66  // .S..fPfRfQf&.G.f
    4770: 26 8B 57 10 66 26 8B 4F 04 66 F7 F1 66 26 89 47  // &.W.f&.O.f..f&.G
    4780: 0C 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53 8B  // .f&.W.fYfZfX[.S.
    4790: D8 66 50 66 52 66 51 66 26 8B 47 08 66 26 8B 4F  // .fPfRfQf&.G.f&.O
    47A0: 04 66 F7 E1 66 26 89 47 0C 66 26 89 57 10 66 59  // .f..f&.G.f&.W.fY
    47B0: 66 5A 66 58 5B C3 53 57 8B D8 26 8B 5F 14 E8 38  // fZfX[.SW..&._..8
    47C0: EB 8B D0 66 C1 E8 10 92 5F 5B C3 53 57 8B D8 26  // ...f...._[.SW..&
    47D0: 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B  // .G.&.W.....f....
    47E0: DA C1 E3 02 E8 36 EB EB D8 53 52 57 8B D8 26 8B  // .....6...SRW..&.
    47F0: 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 26 8B 5F  // G.&.W..f.....&._
    4800: 14 E8 5A EA 5F 5A 5B C3 53 52 8B D8 26 8B 47 1C  // ..Z._Z[.SR..&.G.
    4810: 26 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F 26 8B  // &.W..f.....&._&.
    4820: 5F 01 E8 39 EA 5A 5B C3 53 52 56 8B F0 26 8B 5C  // _..9.Z[.SRV..&.\
    4830: 26 8B 5F 01 E8 C2 EA 8B D0 66 C1 E8 10 92 26 89  // &._......f....&.
    4840: 44 1C 26 89 54 1E 5E 5A 5B C3 53 51 52 57 8B D8  // D.&.T.^Z[.SQRW..
    4850: 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 8B  // &.G.&.W..f......
    4860: C8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3  // .&.G.&.W.....f..
    4870: 10 8B DA C1 E3 02 8B C1 E8 16 EA 5F 5A 59 5B C3  // ..........._ZY[.
    4880: 8B D0 66 C1 E8 10 92 C3 1E 06 66 50 66 51 66 52  // ..f.......fPfQfR
    4890: 66 53 66 55 66 56 66 57 0E 1F 0A C0 75 06 E8 07  // fSfUfVfW....u...
    48A0: 01 E9 A8 00 3C 01 75 06 E8 37 01 E9 9E 00 3C 02  // ....<.u..7....<.
    48B0: 75 06 E8 5F 02 E9 94 00 3C 03 75 0B E8 91 03 8B  // u.._....<.u.....
    48C0: EC 89 5E 0C E9 85 00 3C 04 75 02 EB 7D 3C 05 75  // ..^....<.u..}<.u
    48D0: 0A E8 0E 04 8B EC 89 56 10 EB 71 3C 06 75 10 E8  // .......V..q<.u..
    48E0: 8C 03 8B EC 89 5E 0C 89 4E 14 89 56 10 EB 5D 3C  // .....^..N..V..]<
    48F0: 07 75 02 EB 55 3C 08 75 0A E8 D0 03 8B EC 88 7E  // .u..U<.u.......~
    4900: 0D EB 49 3C 09 75 02 EB 41 3C 0A 75 10 E8 65 04  // ..I<.u..A<.u..e.
    4910: 8B EC 89 4E 14 89 7E 00 8C 46 1C EB 2F 3C 0B 75  // ...N..~..F../<.u
    4920: 02 EB 27 3C 10 75 0A E8 5A 04 8B EC 89 5E 0C EB  // ..'<.u..Z....^..
    4930: 1B 3C 11 75 02 EB 13 3C 15 75 0F E8 80 04 8B EC  // .<.u...<.u......
    4940: 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC 89 46  // .^....O...2....F
    4950: 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    4960: 1F C3 50 1E 2E 8E 1E 12 03 8C D8 A3 CA 58 A3 DA  // ..P..........X..
    4970: 58 A3 EC 58 2E 8E 1E 0A 03 A3 AA 04 1F 58 CB 00  // X..X.........X..
    4980: 30 31 2E 30 30 00 56 45 53 41 00 03 C8 01 00 00  // 01.00.VESA......
    4990: 01 00 00 00 00 00 00 00 00 03 0A 11 EB 00 00 00  // ................
    49A0: 7F 00 00 00 18 49 00 00 B9 3F 00 8B DF 83 C7 04  // .....I...?......
    49B0: FC 66 33 C0 F3 66 AB 8B FB BE 1E 49 B9 22 00 F3  // .f3..f.....I."..
    49C0: A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C  // ....O..G..O..O..
    49D0: 4F 20 83 C7 22 89 7F 0E 0E 1F E8 32 D1 B0 4F 32  // O .."......2..O2
    49E0: E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB 5F 59  // ..VQW...f3..f._Y
    49F0: 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45 04 40  // .........E...E.@
    4A00: 00 C7 45 06 40 00 C6 45 1B 06 C6 45 18 01 C6 45  // ..E.@..E...E...E
    4A10: 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17 8E DB  // ...E..f.E>......
    4A20: E8 F9 C9 66 0B C0 0F 84 E1 00 06 1F 66 89 45 28  // ...f........f.E(
    4A30: 8C C8 66 C1 E0 10 B8 D7 4C 66 89 45 0C 81 F9 FF  // ..f.....Lf.E....
    4A40: 81 0F 84 C2 00 80 E5 03 B2 01 53 8E DB BE 80 1C  // ..........S.....
    4A50: E8 DE CE 5B 06 1F 0F 84 B1 00 53 E8 5A D1 66 89  // ...[......S.Z.f.
    4A60: 45 12 C7 45 16 08 10 8D 5C 0C E8 BA E8 66 89 45  // E..E....\....f.E
    4A70: 1F 66 89 45 36 8D 5C 10 E8 AC E8 66 89 45 23 66  // .f.E6.\....f.E#f
    4A80: 89 45 3A 8D 5C 08 E8 9E E8 0A C0 75 03 5B EB 7B  // .E:.\......u.[.{
    4A90: E8 25 D1 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01 74  // .%.f...=X.t.=^.t
    4AA0: 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E 2E A1 0C  // .w..E.....E.....
    4AB0: 03 89 45 08 8D 5C 04 E8 6D E8 66 8B C8 66 C1 E9  // ..E..\..m.f..f..
    4AC0: 10 D3 E0 89 45 10 89 45 32 B0 08 D2 E0 88 45 19  // ....E..E2.....E.
    4AD0: 8D 5C 14 E8 51 E8 5B 3D 00 03 77 2F 53 8B D8 B8  // .\..Q.[=..w/S...
    4AE0: 00 03 33 D2 F7 F3 5B FE C8 88 45 1D 88 45 35 88  // ..3...[...E..E5.
    4AF0: 45 34 8E DB 57 53 BE 80 1C E8 89 C9 5B 5F 0B C9  // E4..WS......[_..
    4B00: 75 05 06 1F 83 25 FE 32 E4 EB 02 B4 03 B0 4F 8E  // u....%.2......O.
    4B10: DB 5E C3 00 81 FB FF 81 74 68 0A FF 75 04 8B C3  // .^......th..u...
    4B20: EB 21 F6 C7 08 75 61 8B CB B2 01 BE 20 1C E8 00  // .!...ua..... ...
    4B30: CE 74 55 E8 61 D0 0A C0 75 0E 66 C1 E8 10 80 E7  // .tU.a...u.f.....
    4B40: 80 0A C7 E8 D5 02 EB 3A E8 D0 CB 74 06 E8 41 CA  // .......:...t..A.
    4B50: E8 8A C3 BE 20 1C E8 00 C9 74 2D E8 A5 00 E8 2C  // .... ....t-....,
    4B60: 00 66 BB 20 1C 00 1C E8 24 D0 BE 00 1C E8 27 D0  // .f. ....$.....'.
    4B70: 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74 02 B0 40 E8  // f.....2....t..@.
    4B80: 30 C9 B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56 06 33  // 0..O2....O...V.3
    4B90: C0 8E C0 BE 20 1C E8 1F D0 8B C8 66 C1 E8 10 8B  // .... ......f....
    4BA0: D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04 FE CA 26 88  // ....&..J......&.
    4BB0: 16 84 04 26 C6 06 51 04 00 26 C6 06 50 04 00 26  // ...&..Q..&..P..&
    4BC0: C6 06 49 04 62 26 C7 06 4C 04 00 A0 26 C6 06 85  // ..I.b&..L...&...
    4BD0: 04 10 26 C7 06 0C 01 A3 62 8C C8 26 A3 0E 01 07  // ..&.....b..&....
    4BE0: 5E C3 01 0F 00 0A 00 00 00 00 00 40 05 0F FF 00  // ^..........@....
    4BF0: 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01  // ................
    4C00: 00 0F 00 FC BA C4 03 B8 00 01 EF B9 04 00 B4 01  // ................
    4C10: BE 7A 4B AC 86 E0 EF 8A E0 FE C4 E2 F6 B8 00 03  // .zK.............
    4C20: EF B9 09 00 BA CE 03 32 E4 BE 7E 4B 8A C4 EE AC  // .......2..~K....
    4C30: 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9 14 00 BA C0  // B.J.............
    4C40: 03 32 E4 BE 87 4B 8A C4 EE AC EE FE C4 E2 F7 C3  // .2...K..........
    4C50: BE 00 1C E8 41 CF 66 C1 E8 10 8B D8 E8 11 CF 75  // ....A.f........u
    4C60: 05 E8 FD CE 75 04 B8 4F 00 C3 B8 4F 03 C3 E8 FF  // ....u..O...O....
    4C70: CE 74 53 BE 00 1C 80 FB 00 74 18 80 FB 01 75 05  // .tS......t....u.
    4C80: E8 3D CF EB 1D 80 FB 02 75 10 8B C1 E8 F0 CE D3  // .=......u.......
    4C90: E8 8B C8 E8 E0 C9 74 2E EB 08 80 FB 03 75 24 E8  // ......t......u$.
    4CA0: 94 CE E8 DA CE 8B D8 D3 E3 50 33 C0 BA 00 03 3B  // .........P3....;
    4CB0: DA 77 05 BA FF FF EB 04 F7 F3 8B D0 58 8B C8 B8  // .w..........X...
    4CC0: 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00 0A DB 75 07  // O..2...O......u.
    4CD0: 8A EF E8 AE CA EB 05 E8 93 CA 8A F8 B0 4F 32 E4  // .............O2.
    4CE0: C3 00 E8 8B CE 74 2C BE 00 1C E8 AA CE 66 C1 E8  // .....t,......f..
    4CF0: 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E 00 EB 0F 80  // ...@u...u.......
    4D00: FF 01 75 14 BB 13 00 E8 EB E5 D1 E8 8B D0 B0 4F  // ..u............O
    4D10: 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52 53 66 50 81  // 2...O...2..RSfP.
    4D20: E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10 8B C2 BB 13  // .......@f.......
    4D30: 00 E8 1C E5 BB 12 00 E8 16 E5 66 58 5B 5A C3 9C  // ..........fX[Z..
    4D40: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    4D50: 0E 1F E8 34 E6 E8 8A FF E8 53 E6 8B EC 89 56 10  // ...4.....S....V.
    4D60: 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // .F.f_f^f]f[fZfYf
    4D70: 58 07 1F 9D CB 0E 07 BF A6 90 2E 8B 0E A4 90 B8  // X...............
    4D80: 4F 00 C3 00 0A DB 75 06 B7 04 B3 10 EB 26 80 FB  // O.....u......&..
    4D90: 01 75 14 E8 85 C9 75 21 53 B1 01 0A FF 74 02 B1  // .u....u!S....t..
    4DA0: 00 E8 9A C8 5B EB 0D 80 FB 02 75 0D E8 B2 C9 8A  // ....[.....u.....
    4DB0: F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 00 80 E3  // .....O2...O.....
    4DC0: 01 0A DB 75 05 BB 02 01 EB 0E E8 4E C9 75 0E 33  // ...u.......N.u.3
    4DD0: C0 53 E8 35 B8 5B 74 05 B0 4F 32 E4 C3 B0 4F B4  // .S.5.[t..O2...O.
    4DE0: 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06 66 50 66 51  // .....r..B...fPfQ
    4DF0: 66 52 66 53 66 55 66 56 66 57 0E 1F 50 0F B6 C4  // fRfSfUfVfW..P...
    4E00: D1 E0 8B F0 58 2E FF 94 C4 4D 66 5F 66 5E 66 5D  // ....X....Mf_f^f]
    4E10: 66 5B 66 5A 66 59 66 58 07 1F C3 0E 1F 50 0F B6  // f[fZfYfX.....P..
    4E20: C4 D1 E0 8B F0 58 2E FF 94 C4 4D C3 FE 4D 0E 87  // .....X....M..M..
    4E30: 27 87 44 87 F1 4E 47 7E 79 7E EC 7E 6F 7F FD 80  // '.D..NG~y~.~o...
    4E40: 01 81 0A 84 DB 84 5E 85 C5 85 60 87 C2 87 6B 8A  // ......^...`...k.
    4E50: 0A 51 B2 8E B2 4D B2 4D B2 4D B2 4D B2 4D B2 4D  // .Q...M.M.M.M.M.M
    4E60: 82 8F 85 73 D9 74 2E 8E 1E 0A 03 80 26 87 04 F3  // ...s.t......&...
    4E70: 50 8A E0 80 E4 7F E8 C4 01 3B D3 75 02 58 C3 BA  // P........;.u.X..
    4E80: CC 03 EC B2 B4 B1 30 26 F6 47 09 01 74 0C B2 D4  // ......0&.G..t...
    4E90: B1 20 A8 01 75 49 B5 09 EB 06 A8 01 74 41 B5 0B  // . ..uI......tA..
    4EA0: 53 E8 6A 41 0A FF 5B 75 0B 80 26 88 04 F0 08 2E  // S.jA..[u..&.....
    4EB0: 88 04 EB 2B 58 80 0E 87 04 08 80 26 10 04 CF 08  // ...+X......&....
    4EC0: 0E 10 04 89 16 63 04 C7 06 85 04 08 00 C6 06 84  // .....c..........
    4ED0: 04 18 C7 06 0C 01 90 5A 8C 0E 0E 01 CD 42 C3 80  // .......Z.....B..
    4EE0: 26 10 04 CF 08 0E 10 04 58 53 50 0E 1F 33 C9 8A  // &.......XSP..3..
    4EF0: C8 E8 27 C8 74 06 E8 98 C6 E8 E1 BF B2 08 BE 40  // ..'.t..........@
    4F00: 1C E8 2D CA BE 40 1C E8 4F C5 58 5B 0F 84 6E FF  // ..-..@..O.X[..n.
    4F10: 2E 8E 1E 0A 03 0E 07 E8 13 29 0E 1F 53 66 BB 40  // .........)..Sf.@
    4F20: 1C 00 1C E8 68 CC BE 00 1C B0 20 E8 84 C5 5B 2E  // ....h..... ...[.
    4F30: 8E 1E 0A 03 0E 07 E8 1C 2E E8 24 00 E8 28 3D E8  // ..........$..(=.
    4F40: D1 01 E8 8E 01 E8 AE 3E 0E 1F BE 00 1C B0 10 E8  // .......>........
    4F50: 60 C5 E8 F7 2D E8 EF 2D C3 8B EC C6 46 1B 00 C3  // `...-..-....F...
    4F60: E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00 E8 5C 0A C3  // ./........R..\..
    4F70: 53 83 C3 0A 8B 16 63 04 B9 19 00 B8 11 30 EF 32  // S.....c......0.2
    4F80: C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06 32 C0  // .&.'.C....[...2.
    4F90: EE C3 53 BA C4 03 83 C3 05 B9 04 00 B0 01 26 8A  // ..S...........&.
    4FA0: 27 3C 01 75 03 80 CC 20 EF 43 FE C0 E2 F0 5B 26  // '<.u... .C....[&
    4FB0: 8A 47 09 BA C2 03 EE B2 C4 B8 00 03 EF C3 8B F3  // .G..............
    4FC0: 83 C6 23 BA DA 03 26 F6 47 09 01 75 02 B2 BA F6  // ..#...&.G..u....
    4FD0: 06 89 04 08 74 1D 83 C6 10 EC B9 04 00 B4 10 B2  // ....t...........
    4FE0: C0 80 FC 11 74 07 8A C4 EE 26 8A 04 EE 46 FE C4  // ....t....&...F..
    4FF0: E2 EF C3 53 EC 8B DE B9 14 00 32 E4 B2 C0 8A C4  // ...S......2.....
    5000: EE FE C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32 C0 EE  // ...&...C.....2..
    5010: 1E 06 E8 49 2D 0B ED 74 09 1F 1E B9 10 00 F3 A4  // ...I-..t........
    5020: 46 A4 07 1F 5B C3 53 83 C3 37 B9 09 00 32 C0 BA  // F...[.S..7...2..
    5030: CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB C8 52  // ..&.'.C....[...R
    5040: 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33 F6 80  // ......}......3..
    5050: FC 03 7F 3C 4A F6 06 89 04 10 75 20 A0 88 04 24  // ...<J.....u ...$
    5060: 0F 3C 02 7E 24 3C 08 74 20 3C 06 74 1C 3C 07 74  // .<.~$<.t <.t.<.t
    5070: 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3 B0 40 D0 EC  // ..@..........@..
    5080: F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6 E4 03 D8 C3  // ..........@.....
    5090: 80 FC 07 75 11 F6 06 89 04 10 75 05 81 C3 00 01  // ...u......u.....
    50A0: C3 81 C3 00 05 C3 BF 4A 50 BE 6B 50 33 C9 E8 4E  // .......JP.kP3..N
    50B0: 00 C3 04 80 00 05 80 00 06 C0 00 0D 80 02 0E C0  // ................
    50C0: 02 0F 80 03 10 C0 03 11 40 05 12 80 05 13 C0 05  // ........@.......
    50D0: 62 40 01 53 8A 1E 49 04 80 FB 07 7F 10 32 FF D1  // b@.S..I......2..
    50E0: E3 2E 8B 87 87 50 A2 65 04 88 26 66 04 5B C3 2C  // .....P.e..&f.[.,
    50F0: 30 28 30 2D 30 29 30 2A 30 2E 30 1E 3F 29 30 2E  // 0(0-0)0*0.0.?)0.
    5100: 38 25 75 07 2E 03 5D 01 33 F6 C3 83 C7 03 3B FE  // 8%u...].3.....;.
    5110: 75 ED C3 1E 06 2E 8E 1E 0A 03 F6 06 87 04 80 75  // u..............u
    5120: 49 83 3E 4C 04 00 74 42 A0 49 04 B9 00 20 2E 8B  // I.>L..tB.I... ..
    5130: 3E 10 03 26 F6 47 33 01 75 0E 26 F6 47 09 01 75  // >..&.G3.u.&.G..u
    5140: 1B 2E 8B 3E 0E 03 EB 14 3C 06 7E 0B 2E 8B 3E 0C  // ...>....<.~...>.
    5150: 03 26 8A 67 37 B5 40 66 33 C0 EB 06 66 B8 20 07  // .&.g7.@f3...f. .
    5160: 20 07 8E C7 66 33 FF F3 66 AB 80 26 87 04 7F 07  //  ...f3..f..&....
    5170: 1F C3 2E 8E 1E 0A 03 80 FB 10 75 03 E9 7A 01 80  // ..........u..z..
    5180: FB 20 75 03 E9 9B 01 80 FB 32 75 1F BA CC 03 0A  // . u......2u.....
    5190: C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8 0F 85  // .u..............
    51A0: F3 00 EC 24 FD B2 C2 EE E9 E4 00 80 FB 35 75 28  // ...$.........5u(
    51B0: 3C 80 75 08 80 0E 89 04 40 E9 D3 00 F6 06 89 04  // <.u.....@.......
    51C0: 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE C8 75 06 E8  // @............u..
    51D0: 98 07 E9 BA 00 E9 BD 00 80 FB 30 74 03 E9 96 00  // ..........0t....
    51E0: 50 E8 2A 3E 8A EF BA CC 03 EC 8A C8 58 0A C0 75  // P.*>........X..u
    51F0: 30 B7 08 F6 C1 01 75 12 0A ED 75 0B A0 10 04 24  // 0.....u...u....$
    5200: 30 3C 30 75 10 B7 02 E9 8B 00 A0 10 04 24 30 3C  // 0<0u.........$0<
    5210: 30 75 02 B7 02 80 26 89 04 6F 80 0E 89 04 80 EB  // 0u....&..o......
    5220: 36 3C 01 75 41 80 26 89 04 6F B7 09 F6 C1 01 75  // 6<.uA.&..o.....u
    5230: 15 B7 0B A0 10 04 24 30 3C 30 74 1B B7 09 0A ED  // ......$0<0t.....
    5240: 74 15 B7 05 EB 11 A0 10 04 24 30 3C 30 75 08 B7  // t........$0<0u..
    5250: 0B 0A ED 74 02 B7 03 8A 1E 88 04 80 E3 F0 0A DF  // ...t............
    5260: 88 1E 88 04 EB 29 3C 02 75 2B 80 26 89 04 6F 80  // .....)<.u+.&..o.
    5270: 0E 89 04 10 EB B4 80 FB 31 75 1B 0A C0 74 0B 3C  // ........1u...t.<
    5280: 01 75 0C 80 0E 89 04 08 EB 05 80 26 89 04 F7 8B  // .u.........&....
    5290: EC C6 46 1A 12 C3 80 FB 33 75 16 3C 00 74 0B 3C  // ..F.....3u.<.t.<
    52A0: 01 75 EC 80 26 89 04 FD EB E5 80 0E 89 04 02 EB  // .u..&...........
    52B0: DE 80 FB 34 75 17 3C 00 75 07 80 26 87 04 FE EB  // ...4u.<.u..&....
    52C0: CE 3C 01 75 07 80 0E 87 04 01 EB C3 C3 80 FB 36  // .<.u...........6
    52D0: 75 26 BB 20 FF 3C 01 74 09 BB 00 DF 3C 00 74 02  // u&. .<.t....<.t.
    52E0: EB AD E8 02 00 EB A8 9C FA BA C4 03 B0 01 EE 42  // ...............B
    52F0: EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA CC 03  // ."..............
    5300: EC A8 01 75 02 B7 01 A0 88 04 8A E0 B1 04 D2 EC  // ...u............
    5310: 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6 46 1A  // %.......^..N..F.
    5320: 12 C3 9C FA C7 06 14 00 72 78 8C 0E 16 00 9D C3  // ........rx......
    5330: 28 18 08 00 08 09 03 00 02 63 2D 27 28 90 2B A0  // (........c-'(.+.
    5340: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 14 1F 96  // ................
    5350: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    5360: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    5370: 50 18 08 00 10 01 03 00 02 63 5F 4F 50 82 55 81  // P........c_OP.U.
    5380: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 28 1F 96  // .............(..
    5390: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    53A0: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    53B0: 28 18 08 00 40 09 03 00 02 63 2D 27 28 90 2B 80  // (...@....c-'(.+.
    53C0: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    53D0: B9 A2 FF 00 13 15 17 02 04 06 07 10 11 12 13 14  // ................
    53E0: 15 16 17 01 00 03 00 00 00 00 00 00 30 0F 00 FF  // ............0...
    53F0: 50 18 08 00 40 01 01 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    5400: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    5410: B9 C2 FF 00 17 17 17 17 17 17 17 17 17 17 17 17  // ................
    5420: 17 17 17 01 00 01 00 00 00 00 00 00 00 0D 00 FF  // ................
    5430: 50 18 0E 00 10 00 03 00 03 A6 5F 4F 50 82 55 81  // P........._OP.U.
    5440: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 0D 63  // ...M........](.c
    5450: BA A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    5460: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    5470: 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F 50 82 54 80  // P........._OP.T.
    5480: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 50 00 E7  // .>.@.........P..
    5490: 04 E3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    54A0: 0D 0E 0F 01 00 0F 00 10 00 00 00 00 40 05 0F FF  // ............@...
    54B0: 00 05 11 1C 08 0B 14 28 0E 18 2D 32 20 24 38 3F  // .......(..-2 $8?
    54C0: 00 05 08 0B 0E 11 14 18 1C 20 24 28 2D 32 38 3F  // ......... $(-28?
    54D0: 07 0C 10 15 1A 18 16 15 13 1C 25 2F 38 33 2E 2A  // ..........%/83.*
    54E0: 25 27 29 2A 2C 23 19 10 23 25 27 2A 2C 2B 2A 29  // %')*,#..#%'*,+*)
    54F0: 29 2D 32 37 3B 39 37 34 32 33 34 35 35 31 2C 27  // )-27;974234551,'
    5500: 2F 30 32 33 34 34 33 33 32 35 38 3A 3D 3C 3A 39  // /0234433258:=<:9
    5510: 38 38 39 39 3A 37 34 31 03 05 07 09 0B 0B 0A 09  // 8899:741........
    5520: 08 0D 11 15 19 17 15 13 11 11 12 13 14 0F 0B 07  // ................
    5530: 10 10 12 13 14 13 13 13 12 14 16 18 1A 19 18 17  // ................
    5540: 16 17 17 17 18 15 14 11 15 15 16 17 17 17 17 17  // ................
    5550: 16 18 19 1A 1B 1B 1A 19 19 19 19 19 1A 18 17 16  // ................
    5560: 02 03 04 05 07 06 06 05 05 07 0A 0C 0E 0D 0C 0B  // ................
    5570: 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B 0B 0B  // ................
    5580: 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A  // ................
    5590: 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E  // ................
    55A0: 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00 00 00  // ................
    55B0: 28 18 08 00 20 09 0F 00 06 63 2D 27 28 90 2B 80  // (... ....c-'(.+.
    55C0: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    55D0: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    55E0: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    55F0: 50 18 08 00 40 01 0F 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    5600: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    5610: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    5620: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    5630: 00 05 11 1C 08 0B 25 28 02 07 1B 20 0F 14 28 2C  // ......%(... ..(,
    5640: 0C 11 25 2A 14 1E 32 36 0F 13 27 2C 1B 20 34 39  // ..%*..26..',. 49
    5650: 06 0B 1F 24 13 18 2C 30 09 0D 21 26 15 1A 2E 33  // ...$..,0..!&...3
    5660: 13 17 2B 30 1F 24 38 3D 0E 18 2D 32 20 24 38 3F  // ..+0.$8=..-2 $8?
    5670: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    5680: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    5690: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    56A0: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    56B0: 50 18 0E 00 80 01 0F 00 06 A2 5F 4F 50 82 54 80  // P........._OP.T.
    56C0: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    56D0: BA E3 FF 00 08 00 00 18 18 00 00 00 08 00 00 00  // ................
    56E0: 18 00 00 0B 00 05 00 00 00 00 00 00 00 05 05 FF  // ................
    56F0: 50 18 0E 00 80 01 0F 00 06 A3 5F 4F 50 82 54 80  // P........._OP.T.
    5700: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    5710: BA E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    5720: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    5730: 28 18 0E 00 08 09 03 00 02 A3 2D 27 28 90 2B A0  // (.........-'(.+.
    5740: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 14 1F 63  // ...M........]..c
    5750: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    5760: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    5770: 50 18 0E 00 10 01 03 00 02 A3 5F 4F 50 82 55 81  // P........._OP.U.
    5780: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 1F 63  // ...M........](.c
    5790: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    57A0: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    57B0: 28 18 10 00 08 08 03 00 02 67 2D 27 28 90 2B A0  // (........g-'(.+.
    57C0: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14 1F 96  // ...O............
    57D0: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    57E0: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    57F0: 50 18 10 00 10 00 03 00 02 67 5F 4F 50 82 55 81  // P........g_OP.U.
    5800: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 1F 96  // ...O.........(..
    5810: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    5820: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    5830: 50 18 10 00 10 00 03 00 02 66 5F 4F 50 82 55 81  // P........f_OP.U.
    5840: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 0F 96  // ...O.........(..
    5850: B9 A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    5860: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    5870: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    5880: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    5890: 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ....????????????
    58A0: 3F 3F 3F 01 00 0F 00 00 00 00 00 00 00 05 01 FF  // ???.............
    58B0: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    58C0: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    58D0: 04 E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    58E0: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    58F0: 28 18 08 00 20 01 0F 00 0E 63 5F 4F 50 82 54 80  // (... ....c_OP.T.
    5900: BF 1F 00 41 00 00 00 00 00 00 9C 8E 8F 28 40 96  // ...A.........(@.
    5910: B9 A3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    5920: 0D 0E 0F 41 00 0F 00 00 00 00 00 00 40 05 0F FF  // ...A........@...
    5930: C8 52 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // .R..............
    5940: E8 58 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // .X..............
    5950: 1A 00 80 90 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    5960: 00 00 00 00 00 00 00 00 00 00 1E E8 10 00 2E 8E  // ................
    5970: 1E 0A 03 E8 F8 36 E8 CF 36 E8 70 1A 1F C3 2E 8E  // .....6..6.p.....
    5980: 1E 0A 03 C7 06 87 04 60 F9 C6 06 8A 04 0B A0 89  // .......`........
    5990: 04 0C 11 24 17 A2 89 04 B4 01 E8 6D 1E A0 89 04  // ...$.......m....
    59A0: 80 26 10 04 CF 80 0E 10 04 20 C7 06 63 04 D4 03  // .&....... ..c...
    59B0: 0E 1F E8 97 B5 F7 C1 02 00 75 03 E8 1F B5 C3 1E  // .........u......
    59C0: 2E 8E 1E 0A 03 0E 07 EB 00 1F C3 F6 06 89 04 08  // ................
    59D0: 74 01 C3 53 BA C8 03 EC B0 FF B2 C6 EE B2 C8 80  // t..S............
    59E0: 3E 63 04 B4 75 2F BE 44 5A B9 40 00 33 DB 9C FA  // >c..u/.DZ.@.3...
    59F0: 8A C3 EE 8B FB C1 EF 03 83 E7 03 03 FE 2E 8A 05  // ................
    5A00: 42 EE 2E 8A 45 04 EE 2E 8A 45 08 EE FE C3 4A E2  // B...E....E....J.
    5A10: DF 9D E9 85 00 26 8A 47 2B F6 06 89 04 06 74 31  // .....&.G+.....t1
    5A20: B9 F8 00 BF 48 54 3C 08 74 11 B9 40 00 BF C8 55  // ....HT<.t..@...U
    5A30: 3C 38 74 07 3C 3F 74 03 BF 08 56 33 DB 9C FA 8A  // <8t.<?t...V3....
    5A40: C3 EE 2E 8A 01 42 EE EE EE FE C3 4A E2 F1 9D EB  // .....B.....J....
    5A50: 49 3C 08 74 25 3C 38 74 2E 3C 3F 74 2A B9 08 00  // I<.t%<8t.<?t*...
    5A60: 33 DB 51 E8 0B D3 B9 08 00 F7 C3 10 00 74 03 83  // 3.Q..........t..
    5A70: C7 18 E8 67 00 59 E2 EA EB 20 E8 F4 D2 B9 00 01  // ...g.Y... ......
    5A80: 33 DB E8 57 00 EB 13 B9 40 00 33 DB 51 E8 28 00  // 3..W....@.3.Q.(.
    5A90: 8A C3 E8 B7 2F FE C3 59 E2 F2 5B C3 00 2A 00 2A  // ..../..Y..[..*.*
    5AA0: 00 2A 00 2A 15 3F 15 3F 15 3F 15 3F 00 2A 00 3F  // .*.*.?.?.?.?.*.?
    5AB0: 00 2A 00 3F 00 2A 00 3F 8B FB C1 EF 02 83 E7 0F  // .*.?.*.?........
    5AC0: 2E 8A B5 34 5A 8B FB D1 EF 83 E7 0F 2E 8A AD 34  // ...4Z..........4
    5AD0: 5A 8B FB 83 E7 0F 2E 8A 8D 34 5A C3 9C 8A C3 FA  // Z........4Z.....
    5AE0: EE 2E 8A 05 42 EE 47 2E 8A 05 EE 47 2E 8A 05 EE  // ....B.G....G....
    5AF0: 47 FE C3 4A E2 E7 9D C3 00 00 00 00 00 00 00 00  // G..J............
    5B00: 7E 81 A5 81 BD 99 81 7E 7C FE D6 BA C6 FE 7C 00  // ~......~|.....|.
    5B10: C6 EE FE FE 7C 38 10 00 10 38 7C FE 7C 38 10 00  // ....|8...8|.|8..
    5B20: 10 38 10 EE EE 10 38 00 38 7C FE FE 6C 10 38 00  // .8....8.8|..l.8.
    5B30: 00 18 3C 7E 3C 18 00 00 FF E7 C3 81 C3 E7 FF FF  // ..<~<...........
    5B40: 00 18 3C 66 66 3C 18 00 FF E7 C3 99 99 C3 E7 FF  // ..<ff<..........
    5B50: 1E 0E 1E 36 78 CC CC 78 7E C3 C3 7E 18 7E 18 18  // ...6x..x~..~.~..
    5B60: 1E 1A 1E 18 18 70 F0 60 3E 3E 36 36 F6 66 1E 0C  // .....p.`>>66.f..
    5B70: DB 3C 66 E7 66 3C DB 00 80 C0 F0 F8 F0 C0 80 00  // .<f.f<..........
    5B80: 02 06 1E 3E 1E 06 02 00 18 3C 7E 18 7E 3C 18 00  // ...>.....<~.~<..
    5B90: 66 66 66 66 66 00 66 00 7F DB 7B 3B 1B 1B 1B 00  // fffff.f...{;....
    5BA0: 3C 66 38 6C 6C 38 CC 78 00 00 00 00 FE FE FE 00  // <f8ll8.x........
    5BB0: 18 3C 7E 18 7E 3C 18 7E 18 3C 7E 18 18 18 18 00  // .<~.~<.~.<~.....
    5BC0: 18 18 18 18 7E 3C 18 00 00 18 1C FE 1C 18 00 00  // ....~<..........
    5BD0: 00 30 70 FE 70 30 00 00 00 00 C0 C0 C0 FE 00 00  // .0p.p0..........
    5BE0: 00 24 66 FF 66 24 00 00 00 10 38 7C 7C FE 00 00  // .$f.f$....8||...
    5BF0: 00 FE 7C 7C 38 10 00 00 00 00 00 00 00 00 00 00  // ..||8...........
    5C00: 18 3C 3C 18 18 00 18 00 6C 6C 6C 00 00 00 00 00  // .<<.....lll.....
    5C10: 6C 6C FE 6C FE 6C 6C 00 18 7E C0 7C 06 FC 18 00  // ll.l.ll..~.|....
    5C20: 00 C6 0C 18 30 60 C6 00 38 6C 38 76 CC CC 76 00  // ....0`..8l8v..v.
    5C30: 18 18 30 00 00 00 00 00 18 30 60 60 60 30 18 00  // ..0......0```0..
    5C40: 60 30 18 18 18 30 60 00 00 EE 7C FE 7C EE 00 00  // `0...0`...|.|...
    5C50: 00 18 18 7E 18 18 00 00 00 00 00 00 18 18 30 00  // ...~..........0.
    5C60: 00 00 00 FE 00 00 00 00 00 00 00 00 00 38 38 00  // .............88.
    5C70: 06 0C 18 30 60 C0 80 00 7C C6 CE DE F6 E6 7C 00  // ...0`...|.....|.
    5C80: 18 78 18 18 18 18 7E 00 7C C6 0C 18 30 66 FE 00  // .x....~.|...0f..
    5C90: 7C C6 06 3C 06 C6 7C 00 0C 1C 3C 6C FE 0C 0C 00  // |..<..|...<l....
    5CA0: FE C0 FC 06 06 C6 7C 00 7C C6 C0 FC C6 C6 7C 00  // ......|.|.....|.
    5CB0: FE C6 06 0C 18 18 18 00 7C C6 C6 7C C6 C6 7C 00  // ........|..|..|.
    5CC0: 7C C6 C6 7E 06 C6 7C 00 00 1C 1C 00 00 1C 1C 00  // |..~..|.........
    5CD0: 00 18 18 00 00 18 18 30 0C 18 30 60 30 18 0C 00  // .......0..0`0...
    5CE0: 00 00 FE 00 00 FE 00 00 60 30 18 0C 18 30 60 00  // ........`0...0`.
    5CF0: 7C C6 06 0C 18 00 18 00 7C C6 C6 DE DC C0 7E 00  // |.......|.....~.
    5D00: 38 6C C6 C6 FE C6 C6 00 FC 66 66 7C 66 66 FC 00  // 8l.......ff|ff..
    5D10: 3C 66 C0 C0 C0 66 3C 00 F8 6C 66 66 66 6C F8 00  // <f...f<..lfffl..
    5D20: FE C2 C0 F8 C0 C2 FE 00 FE 62 60 7C 60 60 F0 00  // .........b`|``..
    5D30: 7C C6 C0 C0 DE C6 7C 00 C6 C6 C6 FE C6 C6 C6 00  // |.....|.........
    5D40: 3C 18 18 18 18 18 3C 00 3C 18 18 18 D8 D8 70 00  // <.....<.<.....p.
    5D50: C6 CC D8 F0 D8 CC C6 00 F0 60 60 60 60 62 FE 00  // .........````b..
    5D60: C6 EE FE D6 D6 C6 C6 00 C6 E6 E6 F6 DE CE C6 00  // ................
    5D70: 7C C6 C6 C6 C6 C6 7C 00 FC 66 66 7C 60 60 F0 00  // |.....|..ff|``..
    5D80: 7C C6 C6 C6 C6 D6 7C 06 FC C6 C6 FC D8 CC C6 00  // |.....|.........
    5D90: 7C C6 C0 7C 06 C6 7C 00 7E 5A 18 18 18 18 3C 00  // |..|..|.~Z....<.
    5DA0: C6 C6 C6 C6 C6 C6 7C 00 C6 C6 C6 C6 6C 38 10 00  // ......|.....l8..
    5DB0: C6 C6 D6 D6 FE EE C6 00 C6 6C 38 38 38 6C C6 00  // .........l888l..
    5DC0: 66 66 66 3C 18 18 3C 00 FE 86 0C 18 30 62 FE 00  // fff<..<.....0b..
    5DD0: 7C 60 60 60 60 60 7C 00 C0 60 30 18 0C 06 02 00  // |`````|..`0.....
    5DE0: 7C 0C 0C 0C 0C 0C 7C 00 10 38 6C C6 00 00 00 00  // |.....|..8l.....
    5DF0: 00 00 00 00 00 00 00 FF 30 30 18 00 00 00 00 00  // ........00......
    5E00: 00 00 78 0C 7C CC 7E 00 E0 60 7C 66 66 66 FC 00  // ..x.|.~..`|fff..
    5E10: 00 00 7C C6 C0 C6 7C 00 1C 0C 7C CC CC CC 7E 00  // ..|...|...|...~.
    5E20: 00 00 7C C6 FE C0 7C 00 1C 36 30 FC 30 30 78 00  // ..|...|..60.00x.
    5E30: 00 00 76 CE C6 7E 06 7C E0 60 7C 66 66 66 E6 00  // ..v..~.|.`|fff..
    5E40: 18 00 38 18 18 18 3C 00 0C 00 1C 0C 0C 0C CC 78  // ..8...<........x
    5E50: E0 60 66 6C 78 6C E6 00 18 18 18 18 18 18 1C 00  // .`flxl..........
    5E60: 00 00 6C FE D6 D6 C6 00 00 00 DC 66 66 66 66 00  // ..l........ffff.
    5E70: 00 00 7C C6 C6 C6 7C 00 00 00 DC 66 66 7C 60 F0  // ..|...|....ff|`.
    5E80: 00 00 76 CC CC 7C 0C 1E 00 00 DC 66 60 60 F0 00  // ..v..|.....f``..
    5E90: 00 00 7C C0 7C 06 7C 00 30 30 FC 30 30 36 1C 00  // ..|.|.|.00.006..
    5EA0: 00 00 CC CC CC CC 76 00 00 00 C6 C6 6C 38 10 00  // ......v.....l8..
    5EB0: 00 00 C6 C6 D6 FE 6C 00 00 00 C6 6C 38 6C C6 00  // ......l....l8l..
    5EC0: 00 00 C6 C6 CE 76 06 7C 00 00 FC 98 30 64 FC 00  // .....v.|....0d..
    5ED0: 0E 18 18 70 18 18 0E 00 18 18 18 00 18 18 18 00  // ...p............
    5EE0: 70 18 18 0E 18 18 70 00 76 DC 00 00 00 00 00 00  // p.....p.v.......
    5EF0: 00 10 38 38 6C 6C FE 00 3C 66 C0 66 3C 18 CC 78  // ..88ll..<f.f<..x
    5F00: 00 C6 00 C6 C6 CE 76 00 0E 00 7C C6 FE C0 7C 00  // ......v...|...|.
    5F10: 7C C6 78 0C 7C CC 7E 00 C6 00 78 0C 7C CC 7E 00  // |.x.|.~...x.|.~.
    5F20: E0 00 78 0C 7C CC 7E 00 38 38 78 0C 7C CC 7E 00  // ..x.|.~.88x.|.~.
    5F30: 00 00 7C C0 7C 18 6C 38 7C C6 7C C6 FE C0 7C 00  // ..|.|.l8|.|...|.
    5F40: C6 00 7C C6 FE C0 7C 00 E0 00 7C C6 FE C0 7C 00  // ..|...|...|...|.
    5F50: 66 00 38 18 18 18 3C 00 7C C6 38 18 18 18 3C 00  // f.8...<.|.8...<.
    5F60: 00 00 38 18 18 18 3C 00 C6 38 6C C6 FE C6 C6 00  // ..8...<..8l.....
    5F70: 38 38 00 7C C6 FE C6 00 0E 00 FE C0 F8 C0 FE 00  // 88.|............
    5F80: 00 00 6C 9A 7E D8 6E 00 7E D8 D8 FE D8 D8 DE 00  // ..l.~.n.~.......
    5F90: 7C C6 00 7C C6 C6 7C 00 00 C6 00 7C C6 C6 7C 00  // |..|..|....|..|.
    5FA0: 00 E0 00 7C C6 C6 7C 00 7C C6 00 C6 C6 CE 76 00  // ...|..|.|.....v.
    5FB0: 00 E0 00 C6 C6 CE 76 00 18 00 3C 18 18 18 3C 00  // ......v...<...<.
    5FC0: C6 38 6C C6 C6 6C 38 00 C6 00 C6 C6 C6 C6 7C 00  // .8l..l8.......|.
    5FD0: 00 18 7E D8 D8 7E 18 00 38 6C 60 F0 66 F6 6C 00  // ..~..~..8l`.f.l.
    5FE0: C3 66 3C 7E 18 3C 18 00 3E 63 38 0E 63 3E 00 1C  // .f<~.<..>c8.c>..
    5FF0: 00 3E 61 3C 86 7C 00 1C 0E 00 78 0C 7C CC 7E 00  // .>a<.|....x.|.~.
    6000: 1C 00 38 18 18 18 3C 00 00 0E 00 7C C6 C6 7C 00  // ..8...<....|..|.
    6010: 00 0E 00 CC CC DC 76 00 00 FC 00 BC 66 66 E6 00  // ......v.....ff..
    6020: FE 00 C6 E6 F6 CE C6 00 3E 00 3E 60 67 63 3D 00  // ........>.>`gc=.
    6030: 3E 00 76 CE C6 7E 06 7C 18 00 18 30 60 66 3C 00  // >.v..~.|...0`f<.
    6040: 00 00 00 7C 60 60 00 00 00 00 00 7C 0C 0C 00 00  // ...|``.....|....
    6050: C0 CC D8 30 7C 36 0C 3E C0 CC D8 30 6C 3C 7E 0C  // ...0|6.>...0l<~.
    6060: 18 00 18 18 3C 3C 18 00 00 36 6C D8 6C 36 00 00  // ....<<...6l.l6..
    6070: 00 D8 6C 36 6C D8 00 00 22 88 22 88 22 88 22 88  // ..l6l...".".".".
    6080: 55 AA 55 AA 55 AA 55 AA DD 77 DD 77 DD 77 DD 77  // U.U.U.U..w.w.w.w
    6090: 18 18 18 18 18 18 18 18 18 18 18 18 F8 18 18 18  // ................
    60A0: 18 18 F8 18 F8 18 18 18 36 36 36 36 F6 36 36 36  // ........6666.666
    60B0: 00 00 00 00 FE 36 36 36 00 00 F8 18 F8 18 18 18  // .....666........
    60C0: 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36 36 36  // 66...66666666666
    60D0: 00 00 FE 06 F6 36 36 36 36 36 F6 06 FE 00 00 00  // .....66666......
    60E0: 36 36 36 36 FE 00 00 00 18 18 F8 18 F8 00 00 00  // 6666............
    60F0: 00 00 00 00 F8 18 18 18 18 18 18 18 1F 00 00 00  // ................
    6100: 18 18 18 18 FF 00 00 00 00 00 00 00 FF 18 18 18  // ................
    6110: 18 18 18 18 1F 18 18 18 00 00 00 00 FF 00 00 00  // ................
    6120: 18 18 18 18 FF 18 18 18 18 18 1F 18 1F 18 18 18  // ................
    6130: 36 36 36 36 37 36 36 36 36 36 37 30 3F 00 00 00  // 666676666670?...
    6140: 00 00 3F 30 37 36 36 36 36 36 F7 00 FF 00 00 00  // ..?0766666......
    6150: 00 00 FF 00 F7 36 36 36 36 36 37 30 37 36 36 36  // .....66666707666
    6160: 00 00 FF 00 FF 00 00 00 36 36 F7 00 F7 36 36 36  // ........66...666
    6170: 18 18 FF 00 FF 00 00 00 36 36 36 36 FF 00 00 00  // ........6666....
    6180: 00 00 FF 00 FF 18 18 18 00 00 00 00 FF 36 36 36  // .............666
    6190: 36 36 36 36 3F 00 00 00 18 18 1F 18 1F 00 00 00  // 6666?...........
    61A0: 00 00 1F 18 1F 18 18 18 00 00 00 00 3F 36 36 36  // ............?666
    61B0: 36 36 36 36 FF 36 36 36 18 18 FF 18 FF 18 18 18  // 6666.666........
    61C0: 18 18 18 18 F8 00 00 00 00 00 00 00 1F 18 18 18  // ................
    61D0: FF FF FF FF FF FF FF FF 00 00 00 00 FF FF FF FF  // ................
    61E0: F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    61F0: FF FF FF FF 00 00 00 00 00 00 66 DC D8 DC 66 00  // ..........f...f.
    6200: 00 78 CC F8 CC C6 CC 00 00 FE 62 60 60 60 E0 00  // .x........b```..
    6210: 00 FE 6C 6C 6C 6C 6C 00 FE C6 60 30 60 C6 FE 00  // ..lllll...`0`...
    6220: 00 7E D8 CC CC D8 70 00 00 66 66 66 66 7C C0 00  // .~....p..ffff|..
    6230: 00 76 DC 18 18 18 38 00 FE 38 6C C6 6C 38 FE 00  // .v....8..8l.l8..
    6240: 38 6C C6 FE C6 6C 38 00 38 6C C6 C6 6C 6C EE 00  // 8l...l8.8l..ll..
    6250: 3E 60 38 66 C6 CC 78 00 00 00 7E DB DB 7E 00 00  // >`8f..x...~..~..
    6260: 06 7C DE F6 E6 7C C0 00 38 60 C0 F8 C0 60 38 00  // .|...|..8`...`8.
    6270: 7C C6 C6 C6 C6 C6 C6 00 00 FE 00 FE 00 FE 00 00  // |...............
    6280: 18 18 7E 18 18 00 7E 00 30 18 0C 18 30 00 7E 00  // ..~...~.0...0.~.
    6290: 0C 18 30 18 0C 00 7E 00 0C 1E 18 18 18 18 18 18  // ..0...~.........
    62A0: 18 18 18 18 18 78 30 00 00 00 18 00 7E 00 18 00  // .....x0.....~...
    62B0: 00 76 DC 00 76 DC 00 00 7C C6 C6 7C 00 00 00 00  // .v..v...|..|....
    62C0: 00 00 00 18 18 00 00 00 00 00 00 00 18 00 00 00  // ................
    62D0: 1F 18 18 18 F8 38 18 00 D8 6C 6C 6C 00 00 00 00  // .....8...lll....
    62E0: 70 D8 30 F8 00 00 00 00 00 00 7C 7C 7C 7C 00 00  // p.0.......||||..
    62F0: 00 00 00 00 00 00 00 00 1D 00 00 00 00 24 66 FF  // .............$f.
    6300: 66 24 00 00 00 00 00 00 00 10 00 00 00 00 00 00  // f$..............
    6310: 00 00 00 00 00 00 00 00 00 00 00 00 00 7E 81 A5  // .............~..
    6320: 81 81 BD 99 81 81 7E 00 00 00 00 00 00 7C FE FE  // ......~......|..
    6330: D6 FE FE BA C6 FE 7C 00 00 00 00 00 00 00 6C EE  // ......|.......l.
    6340: FE FE FE FE 7C 38 10 00 00 00 00 00 00 00 10 38  // ....|8.........8
    6350: 7C FE 7C 38 10 00 00 00 00 00 00 00 00 00 10 38  // |.|8...........8
    6360: 38 10 6C EE 6C 10 38 00 00 00 00 00 00 10 38 7C  // 8.l.l.8.......8|
    6370: 7C FE FE FE 6C 10 38 00 00 00 00 00 00 00 00 00  // |...l.8.........
    6380: 18 3C 3C 3C 18 00 00 00 00 00 00 FF FF FF FF FF  // .<<<............
    6390: E7 C3 C3 C3 E7 FF FF FF FF FF FF 00 00 00 00 18  // ................
    63A0: 3C 66 66 66 3C 18 00 00 00 00 00 FF FF FF FF E7  // <fff<...........
    63B0: C3 99 99 99 C3 E7 FF FF FF FF FF 00 00 1E 0E 1E  // ................
    63C0: 36 78 CC CC CC CC 78 00 00 00 00 00 00 3C 66 66  // 6x....x......<ff
    63D0: 66 3C 18 7E 18 18 18 00 00 00 00 00 00 1E 1A 1E  // f<.~............
    63E0: 18 18 18 18 78 F8 70 00 00 00 00 00 00 3E 36 3E  // ....x.p......>6>
    63F0: 36 36 76 F6 66 0E 1E 0C 00 00 00 00 00 18 DB 7E  // 66v.f..........~
    6400: 3C 66 66 3C 7E DB 18 00 00 00 00 00 00 00 80 E0  // <ff<~...........
    6410: F0 FC FE FC F0 E0 80 00 00 00 00 00 00 00 02 0E  // ................
    6420: 3E 7E FE 7E 3E 0E 02 00 00 00 00 00 00 18 3C 7E  // >~.~>.........<~
    6430: 18 18 18 18 7E 3C 18 00 00 00 00 00 00 66 66 66  // ....~<.......fff
    6440: 66 66 66 66 00 66 66 00 00 00 00 00 00 7F DB DB  // ffff.ff.........
    6450: DB DB 7B 1B 1B 1B 1B 00 00 00 00 00 00 7C C6 C6  // ..{..........|..
    6460: 60 7C F6 DE 7C 0C C6 C6 7C 00 00 00 00 00 00 00  // `|..|...|.......
    6470: 00 00 00 FE FE FE FE 00 00 00 00 00 00 18 3C 7E  // ..............<~
    6480: 18 18 18 7E 3C 18 7E 00 00 00 00 00 00 18 3C 7E  // ...~<.~.......<~
    6490: 18 18 18 18 18 18 18 00 00 00 00 00 00 18 18 18  // ................
    64A0: 18 18 18 18 7E 3C 18 00 00 00 00 00 00 00 00 00  // ....~<..........
    64B0: 0C 0E FF 0E 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    64C0: 30 70 FE 70 30 00 00 00 00 00 00 00 00 00 00 00  // 0p.p0...........
    64D0: 00 C0 C0 C0 FE 00 00 00 00 00 00 00 00 00 00 00  // ................
    64E0: 24 66 FF 66 24 00 00 00 00 00 00 00 00 00 10 38  // $f.f$..........8
    64F0: 38 38 7C 7C FE FE 00 00 00 00 00 00 00 00 FE FE  // 88||............
    6500: 7C 7C 7C 38 38 10 00 00 00 00 00 00 00 00 00 00  // |||88...........
    6510: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 3C 3C  // ..............<<
    6520: 3C 3C 18 18 00 18 18 00 00 00 00 00 36 36 36 36  // <<..........6666
    6530: 14 00 00 00 00 00 00 00 00 00 00 00 00 6C 6C 6C  // .............lll
    6540: FE 6C 6C FE 6C 6C 6C 00 00 00 00 00 00 18 18 7C  // .ll.lll........|
    6550: C6 C0 78 3C 06 C6 7C 18 18 00 00 00 00 00 00 00  // ..x<..|.........
    6560: 62 66 0C 18 30 66 C6 00 00 00 00 00 00 38 6C 38  // bf..0f.......8l8
    6570: 30 76 7E CC CC CC 76 00 00 00 00 00 0C 0C 0C 18  // 0v~...v.........
    6580: 00 00 00 00 00 00 00 00 00 00 00 00 00 0C 18 30  // ...............0
    6590: 30 30 30 30 30 18 0C 00 00 00 00 00 00 30 18 0C  // 00000........0..
    65A0: 0C 0C 0C 0C 0C 18 30 00 00 00 00 00 00 00 00 00  // ......0.........
    65B0: 6C 38 FE 38 6C 00 00 00 00 00 00 00 00 00 00 00  // l8.8l...........
    65C0: 18 18 7E 18 18 00 00 00 00 00 00 00 00 00 00 00  // ..~.............
    65D0: 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00  // ................
    65E0: 00 00 FE 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    65F0: 00 00 00 00 00 18 18 00 00 00 00 00 00 00 00 02  // ................
    6600: 06 0C 18 30 60 C0 80 00 00 00 00 00 00 7C C6 C6  // ...0`........|..
    6610: CE DE F6 E6 C6 C6 7C 00 00 00 00 00 00 18 78 18  // ......|.......x.
    6620: 18 18 18 18 18 18 7E 00 00 00 00 00 00 7C C6 C6  // ......~......|..
    6630: 06 0C 18 30 60 C6 FE 00 00 00 00 00 00 7C C6 06  // ...0`........|..
    6640: 06 3C 06 06 06 C6 7C 00 00 00 00 00 00 0C 1C 3C  // .<....|........<
    6650: 6C CC CC FE 0C 0C 1E 00 00 00 00 00 00 FE C0 C0  // l...............
    6660: C0 FC 06 06 06 C6 7C 00 00 00 00 00 00 7C C6 C0  // ......|......|..
    6670: C0 FC C6 C6 C6 C6 7C 00 00 00 00 00 00 FE C6 06  // ......|.........
    6680: 0C 18 30 30 30 30 30 00 00 00 00 00 00 7C C6 C6  // ..00000......|..
    6690: C6 7C C6 C6 C6 C6 7C 00 00 00 00 00 00 7C C6 C6  // .|....|......|..
    66A0: C6 C6 7E 06 06 C6 7C 00 00 00 00 00 00 00 00 00  // ..~...|.........
    66B0: 0C 0C 00 00 0C 0C 00 00 00 00 00 00 00 00 00 00  // ................
    66C0: 0C 0C 00 00 0C 0C 0C 18 00 00 00 00 00 00 0C 18  // ................
    66D0: 30 60 C0 60 30 18 0C 00 00 00 00 00 00 00 00 00  // 0`.`0...........
    66E0: 00 FE 00 FE 00 00 00 00 00 00 00 00 00 00 60 30  // ..............`0
    66F0: 18 0C 06 0C 18 30 60 00 00 00 00 00 00 7C C6 C6  // .....0`......|..
    6700: 0C 18 18 18 00 18 18 00 00 00 00 00 00 7C C6 C6  // .............|..
    6710: C6 DE DE DE DC C0 7E 00 00 00 00 00 00 38 6C C6  // ......~......8l.
    6720: C6 C6 FE C6 C6 C6 C6 00 00 00 00 00 00 FC 66 66  // ..............ff
    6730: 66 7C 66 66 66 66 FC 00 00 00 00 00 00 3C 66 C2  // f|ffff.......<f.
    6740: C0 C0 C0 C0 C2 66 3C 00 00 00 00 00 00 F8 6C 66  // .....f<.......lf
    6750: 66 66 66 66 66 6C F8 00 00 00 00 00 00 FE 66 60  // fffffl........f`
    6760: 64 7C 64 60 60 66 FE 00 00 00 00 00 00 FE 66 60  // d|d``f........f`
    6770: 64 7C 64 60 60 60 F0 00 00 00 00 00 00 7C C6 C6  // d|d```.......|..
    6780: C0 C0 C0 CE C6 C6 7C 00 00 00 00 00 00 C6 C6 C6  // ......|.........
    6790: C6 FE C6 C6 C6 C6 C6 00 00 00 00 00 00 3C 18 18  // .............<..
    67A0: 18 18 18 18 18 18 3C 00 00 00 00 00 00 3C 18 18  // ......<......<..
    67B0: 18 18 18 18 D8 D8 70 00 00 00 00 00 00 C6 C6 CC  // ......p.........
    67C0: D8 F0 F0 D8 CC C6 C6 00 00 00 00 00 00 F0 60 60  // ..............``
    67D0: 60 60 60 60 62 66 FE 00 00 00 00 00 00 C6 C6 EE  // ````bf..........
    67E0: EE FE D6 D6 D6 C6 C6 00 00 00 00 00 00 C6 C6 E6  // ................
    67F0: E6 F6 DE CE CE C6 C6 00 00 00 00 00 00 7C C6 C6  // .............|..
    6800: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 FC 66 66  // ......|.......ff
    6810: 66 66 7C 60 60 60 F0 00 00 00 00 00 00 7C C6 C6  // ff|```.......|..
    6820: C6 C6 C6 C6 D6 D6 7C 06 00 00 00 00 00 FC 66 66  // ......|.......ff
    6830: 66 7C 78 6C 66 66 E6 00 00 00 00 00 00 7C C6 C0  // f|xlff.......|..
    6840: C0 70 1C 06 06 C6 7C 00 00 00 00 00 00 7E 5A 18  // .p....|......~Z.
    6850: 18 18 18 18 18 18 3C 00 00 00 00 00 00 C6 C6 C6  // ......<.........
    6860: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 C6 C6  // ......|.........
    6870: C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 C6 C6 C6  // ....l8..........
    6880: D6 D6 D6 FE EE C6 C6 00 00 00 00 00 00 C6 C6 C6  // ................
    6890: 6C 38 38 6C C6 C6 C6 00 00 00 00 00 00 66 66 66  // l88l.........fff
    68A0: 66 66 3C 18 18 18 3C 00 00 00 00 00 00 FE C6 86  // ff<...<.........
    68B0: 0C 18 30 60 C2 C6 FE 00 00 00 00 00 00 7C 60 60  // ..0`.........|``
    68C0: 60 60 60 60 60 60 7C 00 00 00 00 00 00 00 00 80  // ``````|.........
    68D0: C0 60 30 18 0C 06 02 00 00 00 00 00 00 7C 0C 0C  // .`0..........|..
    68E0: 0C 0C 0C 0C 0C 0C 7C 00 00 00 00 00 10 38 6C C6  // ......|......8l.
    68F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6900: 00 00 00 00 00 00 00 00 FF 00 00 00 18 18 18 0C  // ................
    6910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6920: 78 0C 7C CC CC DC 76 00 00 00 00 00 00 E0 60 60  // x.|...v.......``
    6930: 7C 66 66 66 66 66 FC 00 00 00 00 00 00 00 00 00  // |fffff..........
    6940: 7C C6 C0 C0 C0 C6 7C 00 00 00 00 00 00 1C 0C 0C  // |.....|.........
    6950: 7C CC CC CC CC CC 7E 00 00 00 00 00 00 00 00 00  // |.....~.........
    6960: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 1C 36 30  // |.....|.......60
    6970: 30 FC 30 30 30 30 78 00 00 00 00 00 00 00 00 00  // 0.0000x.........
    6980: 76 CE C6 C6 CE 76 06 C6 7C 00 00 00 00 E0 60 60  // v....v..|.....``
    6990: 7C 66 66 66 66 66 E6 00 00 00 00 00 00 18 18 00  // |fffff..........
    69A0: 38 18 18 18 18 18 3C 00 00 00 00 00 00 0C 0C 00  // 8.....<.........
    69B0: 1C 0C 0C 0C 0C 0C CC CC 78 00 00 00 00 E0 60 60  // ........x.....``
    69C0: 66 66 6C 78 6C 66 E6 00 00 00 00 00 00 18 18 18  // fflxlf..........
    69D0: 18 18 18 18 18 18 1C 00 00 00 00 00 00 00 00 00  // ................
    69E0: 6C FE D6 D6 C6 C6 C6 00 00 00 00 00 00 00 00 00  // l...............
    69F0: DC 66 66 66 66 66 66 00 00 00 00 00 00 00 00 00  // .ffffff.........
    6A00: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 00 00 00  // |.....|.........
    6A10: DC 66 66 66 66 7C 60 60 F0 00 00 00 00 00 00 00  // .ffff|``........
    6A20: 76 CC CC CC CC 7C 0C 0C 1E 00 00 00 00 00 00 00  // v....|..........
    6A30: DC 66 60 60 60 60 F0 00 00 00 00 00 00 00 00 00  // .f````..........
    6A40: 7C C6 C0 7C 06 C6 7C 00 00 00 00 00 00 30 30 30  // |..|..|......000
    6A50: FC 30 30 30 30 36 1C 00 00 00 00 00 00 00 00 00  // .00006..........
    6A60: CC CC CC CC CC CC 76 00 00 00 00 00 00 00 00 00  // ......v.........
    6A70: C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 00 00 00  // ....l8..........
    6A80: C6 C6 D6 D6 D6 FE 6C 00 00 00 00 00 00 00 00 00  // ......l.........
    6A90: C6 C6 6C 38 6C C6 C6 00 00 00 00 00 00 00 00 00  // ..l8l...........
    6AA0: C6 C6 C6 C6 CE 76 06 C6 7C 00 00 00 00 00 00 00  // .....v..|.......
    6AB0: FE 86 0C 18 30 62 FE 00 00 00 00 00 00 0E 18 18  // ....0b..........
    6AC0: 18 70 18 18 18 18 0E 00 00 00 00 00 00 18 18 18  // .p..............
    6AD0: 18 00 18 18 18 18 18 00 00 00 00 00 00 70 18 18  // .............p..
    6AE0: 18 0E 18 18 18 18 70 00 00 00 00 00 00 76 DC 00  // ......p......v..
    6AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6B00: 10 38 38 6C 6C FE 00 00 00 00 00 00 00 3C 66 C0  // .88ll........<f.
    6B10: C0 C0 C6 66 3C 18 0C CC 38 00 00 00 00 C6 00 00  // ...f<...8.......
    6B20: C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 0C 18 30 00  // ......v.......0.
    6B30: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 78 CC 00  // |.....|.....0x..
    6B40: 78 0C 7C CC CC DC 76 00 00 00 00 00 00 CC 00 00  // x.|...v.........
    6B50: 78 0C 7C CC CC DC 76 00 00 00 00 00 60 30 18 00  // x.|...v.....`0..
    6B60: 78 0C 7C CC CC DC 76 00 00 00 00 00 38 6C 38 00  // x.|...v.....8l8.
    6B70: 78 0C 7C CC CC DC 76 00 00 00 00 00 00 00 00 7C  // x.|...v........|
    6B80: C6 C0 C0 C6 7C 18 0C 6C 38 00 00 00 30 78 CC 00  // ....|..l8...0x..
    6B90: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 CC 00 00  // |.....|.........
    6BA0: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 18 0C 00  // |.....|.....0...
    6BB0: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 66 00 00  // |.....|......f..
    6BC0: 38 18 18 18 18 18 3C 00 00 00 00 00 18 3C 66 00  // 8.....<......<f.
    6BD0: 38 18 18 18 18 18 3C 00 00 00 00 00 00 00 00 00  // 8.....<.........
    6BE0: 38 18 18 18 18 18 3C 00 00 00 00 00 C6 00 38 6C  // 8.....<.......8l
    6BF0: C6 C6 C6 FE C6 C6 C6 00 00 00 00 38 6C 38 00 38  // ...........8l8.8
    6C00: 6C C6 C6 FE C6 C6 C6 00 00 00 00 0C 18 30 00 FE  // l............0..
    6C10: 60 60 7C 60 60 60 FE 00 00 00 00 00 00 00 00 66  // ``|```.........f
    6C20: DB 1B 7F D8 D8 DF 76 00 00 00 00 00 00 7E D8 D8  // ......v......~..
    6C30: D8 D8 FE D8 D8 D8 DE 00 00 00 00 00 30 78 CC 00  // ............0x..
    6C40: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 00 00  // |.....|.........
    6C50: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 18 0C 00  // |.....|.....0...
    6C60: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 78 CC 00  // |.....|.....0x..
    6C70: C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 60 30 18 00  // ......v.....`0..
    6C80: C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 18 00 3C 18  // ......v.......<.
    6C90: 18 18 18 18 18 18 3C 00 00 00 00 00 C6 00 7C C6  // ......<.......|.
    6CA0: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 C6 00 C6 C6  // ......|.........
    6CB0: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 18 18 7C  // ......|........|
    6CC0: C6 C0 C0 C6 7C 18 18 00 00 00 00 00 38 6C 60 60  // ....|.......8l``
    6CD0: F0 60 60 60 66 F6 6C 00 00 00 00 00 66 66 66 66  // .```f.l.....ffff
    6CE0: 3C 18 7E 18 3C 18 18 00 00 00 00 00 00 3E 63 63  // <.~.<........>cc
    6CF0: 30 1C 06 63 63 3E 00 1C 00 00 00 00 00 00 00 00  // 0..cc>..........
    6D00: 3E 63 38 0E 63 3E 00 1C 00 00 00 00 0C 18 30 00  // >c8.c>........0.
    6D10: 78 0C 7C CC CC DC 76 00 00 00 00 00 0C 18 30 00  // x.|...v.......0.
    6D20: 38 18 18 18 18 18 3C 00 00 00 00 00 0C 18 30 00  // 8.....<.......0.
    6D30: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 18 30 60 00  // |.....|......0`.
    6D40: CC CC CC CC CC DC 76 00 00 00 00 00 00 76 DC 00  // ......v......v..
    6D50: BC 66 66 66 66 66 E6 00 00 00 00 00 76 DC 00 C6  // .fffff......v...
    6D60: C6 E6 F6 DE CE C6 C6 00 00 00 00 00 21 1E 00 1E  // ............!...
    6D70: 33 60 60 67 63 33 1D 00 00 00 00 00 42 3C 00 3B  // 3``gc3......B<.;
    6D80: 66 66 66 3E 06 66 3C 00 00 00 00 00 00 30 30 00  // fff>.f<......00.
    6D90: 30 30 30 60 C6 C6 7C 00 00 00 00 00 00 00 00 00  // 000`..|.........
    6DA0: 00 00 7E 60 60 60 00 00 00 00 00 00 00 00 00 00  // ..~```..........
    6DB0: 00 00 7E 06 06 06 00 00 00 00 00 00 60 60 62 66  // ..~.........``bf
    6DC0: 6C 18 30 60 DC 36 0C 18 3E 00 00 00 60 60 62 66  // l.0`.6..>...``bf
    6DD0: 6C 18 36 6E DE 36 7E 06 06 00 00 00 00 18 18 00  // l.6n.6~.........
    6DE0: 18 18 3C 3C 3C 3C 18 00 00 00 00 00 00 00 00 00  // ..<<<<..........
    6DF0: 36 6C D8 6C 36 00 00 00 00 00 00 00 00 00 00 00  // 6l.l6...........
    6E00: D8 6C 36 6C D8 00 00 00 00 00 00 11 44 11 44 11  // .l6l........D.D.
    6E10: 44 11 44 11 44 11 44 11 44 11 44 AA 55 AA 55 AA  // D.D.D.D.D.D.U.U.
    6E20: 55 AA 55 AA 55 AA 55 AA 55 AA 55 DD 77 DD 77 DD  // U.U.U.U.U.U.w.w.
    6E30: 77 DD 77 DD 77 DD 77 DD 77 DD 77 18 18 18 18 18  // w.w.w.w.w.w.....
    6E40: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6E50: 18 18 F8 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6E60: F8 18 F8 18 18 18 18 18 18 18 18 36 36 36 36 36  // ...........66666
    6E70: 36 36 F6 36 36 36 36 36 36 36 36 00 00 00 00 00  // 66.66666666.....
    6E80: 00 00 FE 36 36 36 36 36 36 36 36 00 00 00 00 00  // ...66666666.....
    6E90: F8 18 F8 18 18 18 18 18 18 18 18 36 36 36 36 36  // ...........66666
    6EA0: F6 06 F6 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    6EB0: 36 36 36 36 36 36 36 36 36 36 36 00 00 00 00 00  // 66666666666.....
    6EC0: FE 06 F6 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    6ED0: F6 06 FE 00 00 00 00 00 00 00 00 36 36 36 36 36  // ...........66666
    6EE0: 36 36 FE 00 00 00 00 00 00 00 00 18 18 18 18 18  // 66..............
    6EF0: F8 18 F8 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6F00: 00 00 F8 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6F10: 18 18 1F 00 00 00 00 00 00 00 00 18 18 18 18 18  // ................
    6F20: 18 18 FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6F30: 00 00 FF 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6F40: 18 18 1F 18 18 18 18 18 18 18 18 00 00 00 00 00  // ................
    6F50: 00 00 FF 00 00 00 00 00 00 00 00 18 18 18 18 18  // ................
    6F60: 18 18 FF 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6F70: 1F 18 1F 18 18 18 18 18 18 18 18 36 36 36 36 36  // ...........66666
    6F80: 36 36 37 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6676666666666666
    6F90: 37 30 3F 00 00 00 00 00 00 00 00 00 00 00 00 00  // 70?.............
    6FA0: 3F 30 37 36 36 36 36 36 36 36 36 36 36 36 36 36  // ?076666666666666
    6FB0: F7 00 FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6FC0: FF 00 F7 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    6FD0: 37 30 37 36 36 36 36 36 36 36 36 00 00 00 00 00  // 70766666666.....
    6FE0: FF 00 FF 00 00 00 00 00 00 00 00 36 36 36 36 36  // ...........66666
    6FF0: F7 00 F7 36 36 36 36 36 36 36 36 18 18 18 18 18  // ...66666666.....
    7000: FF 00 FF 00 00 00 00 00 00 00 00 36 36 36 36 36  // ...........66666
    7010: 36 36 FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // 66..............
    7020: FF 00 FF 18 18 18 18 18 18 18 18 00 00 00 00 00  // ................
    7030: 00 00 FF 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    7040: 36 36 3F 00 00 00 00 00 00 00 00 18 18 18 18 18  // 66?.............
    7050: 1F 18 1F 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7060: 1F 18 1F 18 18 18 18 18 18 18 18 00 00 00 00 00  // ................
    7070: 00 00 3F 36 36 36 36 36 36 36 36 36 36 36 36 36  // ..?6666666666666
    7080: 36 36 FF 36 36 36 36 36 36 36 36 18 18 18 18 18  // 66.66666666.....
    7090: FF 18 FF 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    70A0: 18 18 F8 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    70B0: 00 00 1F 18 18 18 18 18 18 18 18 FF FF FF FF FF  // ................
    70C0: FF FF FF FF FF FF FF FF FF FF FF 00 00 00 00 00  // ................
    70D0: 00 00 00 FF FF FF FF FF FF FF FF F0 F0 F0 F0 F0  // ................
    70E0: F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F  // ................
    70F0: 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF FF  // ................
    7100: FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 76  // ...............v
    7110: DC D8 D8 D8 D8 DC 76 00 00 00 00 00 00 78 CC CC  // ......v......x..
    7120: D8 FC C6 C6 C6 C6 CC 00 00 00 00 00 00 FE 66 62  // ..............fb
    7130: 60 60 60 60 60 60 60 00 00 00 00 00 00 00 00 00  // ```````.........
    7140: FE 6C 6C 6C 6C 6C 6C 00 00 00 00 00 00 FE C6 62  // .llllll........b
    7150: 30 18 18 30 62 C6 FE 00 00 00 00 00 00 00 00 00  // 0..0b...........
    7160: 7E D8 CC CC CC D8 70 00 00 00 00 00 00 00 00 66  // ~.....p........f
    7170: 66 66 66 66 7C 60 C0 80 00 00 00 00 00 00 00 00  // ffff|`..........
    7180: 76 DC 18 18 18 18 18 00 00 00 00 00 00 FE 38 38  // v.............88
    7190: 6C C6 C6 6C 38 38 FE 00 00 00 00 00 00 00 38 6C  // l..l88........8l
    71A0: C6 C6 FE C6 C6 6C 38 00 00 00 00 00 00 38 6C C6  // .....l8......8l.
    71B0: C6 C6 C6 6C 6C 6C EE 00 00 00 00 00 00 3E 60 60  // ...lll.......>``
    71C0: 3C 66 C6 C6 C6 CC 78 00 00 00 00 00 00 00 00 00  // <f....x.........
    71D0: 7E DB DB DB 7E 00 00 00 00 00 00 00 00 02 06 7C  // ~...~..........|
    71E0: CE DE F6 F6 7C 60 C0 00 00 00 00 00 00 00 1C 30  // ....|`.........0
    71F0: 60 60 7C 60 60 30 1C 00 00 00 00 00 00 7C C6 C6  // ``|``0.......|..
    7200: C6 C6 C6 C6 C6 C6 C6 00 00 00 00 00 00 00 00 FE  // ................
    7210: 00 00 FE 00 00 FE 00 00 00 00 00 00 00 00 00 18  // ................
    7220: 18 7E 18 18 00 00 7E 00 00 00 00 00 00 30 18 0C  // .~....~......0..
    7230: 06 0C 18 30 00 00 7E 00 00 00 00 00 00 0C 18 30  // ...0..~........0
    7240: 60 30 18 0C 00 00 7E 00 00 00 00 00 00 00 00 0C  // `0....~.........
    7250: 1E 1A 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7260: 18 18 18 18 18 58 78 30 00 00 00 00 00 00 00 18  // .....Xx0........
    7270: 18 00 7E 00 18 18 00 00 00 00 00 00 00 00 00 00  // ..~.............
    7280: 00 76 DC 00 76 DC 00 00 00 00 00 00 00 78 CC CC  // .v..v........x..
    7290: 78 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // x...............
    72A0: 00 00 18 18 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    72B0: 00 00 00 18 00 00 00 00 00 00 00 00 00 1F 18 18  // ................
    72C0: 18 18 18 D8 D8 78 38 18 00 00 00 00 00 D8 6C 6C  // .....x8.......ll
    72D0: 6C 6C 6C 00 00 00 00 00 00 00 00 00 00 70 D8 18  // lll..........p..
    72E0: 30 60 F8 00 00 00 00 00 00 00 00 00 00 00 00 00  // 0`..............
    72F0: 7E 7E 7E 7E 7E 7E 00 00 00 00 00 00 00 00 00 00  // ~~~~~~..........
    7300: 00 00 00 00 00 00 00 00 00 00 00 1D 00 00 00 00  // ................
    7310: 00 24 66 FF 66 24 00 00 00 00 00 00 2F 00 00 00  // .$f.f$....../...
    7320: 01 03 06 0C 18 30 60 C0 80 00 00 00 00 30 00 00  // .....0`......0..
    7330: 7E C3 C3 C3 DB DB C3 C3 C3 7E 00 00 00 00 4D 00  // ~........~....M.
    7340: 00 C3 C3 E7 FF FF DB DB C3 C3 C3 00 00 00 00 54  // ...............T
    7350: 00 00 FF 99 18 18 18 18 18 18 18 3C 00 00 00 00  // ...........<....
    7360: 56 00 00 C3 C3 C3 C3 C3 C3 C3 66 3C 18 00 00 00  // V.........f<....
    7370: 00 57 00 00 C3 C3 C3 C3 DB DB DB DB FF 66 00 00  // .W...........f..
    7380: 00 00 58 00 00 C3 C3 C3 66 3C 3C 66 C3 C3 C3 00  // ..X.....f<<f....
    7390: 00 00 00 59 00 00 C3 C3 C3 C3 66 3C 18 18 18 3C  // ...Y......f<...<
    73A0: 00 00 00 00 5C 00 00 00 80 C0 60 30 18 0C 06 03  // ....\.....`0....
    73B0: 01 00 00 00 00 6D 00 00 00 00 00 66 FF DB DB DB  // .....m.....f....
    73C0: C3 C3 00 00 00 00 76 00 00 00 00 00 C3 C3 C3 C3  // ......v.........
    73D0: 66 3C 18 00 00 00 00 77 00 00 00 00 00 C3 C3 DB  // f<.....w........
    73E0: DB DB FF 66 00 00 00 00 00 00 A3 62 C3 0B DB 74  // ...f.......b...t
    73F0: 03 E9 46 01 57 32 C0 B9 40 00 F3 AA 5F BB 70 90  // ..F.W2..@..._.p.
    7400: 26 89 1D 26 8C 4D 02 2E 8E 1E 0A 03 57 BE 49 04  // &..&.M......W.I.
    7410: B9 1E 00 83 C7 04 FC 8A 04 26 88 05 46 47 E2 F7  // .........&..FG..
    7420: 5F A0 84 04 FE C0 26 88 45 22 A1 85 04 26 89 45  // _.....&.E"...&.E
    7430: 23 57 E8 D9 1B 5F 26 88 5D 25 26 88 7D 26 8A 1E  // #W..._&.]%&.}&..
    7440: 49 04 E8 FC 05 74 05 80 FB 13 7F 1D 32 FF D1 E3  // I....t......2...
    7450: 2E 8A 87 48 90 32 E4 0A C0 74 01 40 26 89 45 27  // ...H.2...t.@&.E'
    7460: 2E 8A 87 49 90 26 88 45 29 A1 85 04 8A 16 84 04  // ...I.&.E).......
    7470: FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D 5E 01  // ......=..~...=^.
    7480: 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D E0 01 7E 00  // ~...=..~...=..~.
    7490: 26 88 55 2A 8A 26 87 04 8A C4 24 01 C0 E0 04 80  // &.U*.&....$.....
    74A0: E4 02 D0 E4 0A E0 80 F4 10 A0 89 04 24 0A 0A E0  // ............$...
    74B0: E8 94 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0 02 0A  // ......0.B.$.....
    74C0: C4 0C 01 26 88 45 2D B0 03 26 88 45 31 E8 77 08  // ...&.E-..&.E1.w.
    74D0: 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE 74 34  // ..2.........;.t4
    74E0: 26 C5 77 04 8C D9 0B F1 74 03 80 CA 10 26 C5 77  // &.w.....t....&.w
    74F0: 0C 8C D9 0B F1 74 03 80 CA 08 26 C5 77 08 8C D9  // .....t....&.w...
    7500: 0B F1 74 03 80 CA 04 26 C5 77 10 8C D9 0B F1 74  // ..t....&.w.....t
    7510: 03 80 CA 01 07 1F 26 88 55 32 B0 03 BA C4 03 E8  // ......&.U2......
    7520: E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81 E2 04  // ................
    7530: 04 25 03 03 0B C2 26 89 45 2B 8B EC C6 46 1A 1B  // .%....&.E+...F..
    7540: C3 0A C0 74 0F FE C8 74 36 FE C8 74 56 8B EC C6  // ...t...t6..tV...
    7550: 46 1A 00 C3 B8 20 00 F6 C1 01 74 03 83 C0 60 F6  // F.... ....t...`.
    7560: C1 02 74 03 83 C0 3A F6 C1 04 74 03 05 03 03 83  // ..t...:...t.....
    7570: C0 3F C1 E8 06 8B EC 89 46 0E C6 46 1A 1C C3 8B  // .?......F..F....
    7580: FB 83 C7 20 F6 C1 01 74 03 E8 85 00 F6 C1 02 74  // ... ...t.......t
    7590: 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01 8B EC C6 46  // .......t.......F
    75A0: 1A 1C C3 F6 C1 01 74 06 E8 16 15 E8 25 01 F6 C1  // ......t.....%...
    75B0: 02 74 03 E8 85 01 F6 C1 04 74 03 E8 12 02 EB DC  // .t.......t......
    75C0: 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B 04 BD  // ...B....J....k..
    75D0: C0 03 B9 15 00 32 E4 EC 87 EA 8A C4 EE 42 EC AA  // .....2.......B..
    75E0: FE C4 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3 26 8A  // ..J........ ..&.
    75F0: 05 88 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE C0 E2  // ...GF...&.%.G...
    7600: F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE E2 F4  // .......&..G.....
    7610: C3 9C FA 51 57 8B C7 2B C3 26 89 07 8B F7 E8 0A  // ...QW..+.&......
    7620: 04 EC 26 88 44 01 26 89 54 41 B2 CE EC 26 88 44  // ..&.D.&.TA...&.D
    7630: 02 B2 CC EC 26 88 44 09 B2 CA EC 26 88 44 04 B2  // ....&.D....&.D..
    7640: C4 EC 26 88 04 83 C7 05 B9 04 00 B4 01 E8 70 FF  // ..&...........p.
    7650: 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54 41 32 E4 B9  // &........&.TA2..
    7660: 19 00 E8 5B FF 26 8A 44 01 EE E8 5F FF B2 CE 32  // ...[.&.D..._...2
    7670: E4 B9 09 00 E8 49 FF 26 8A 44 02 EE 5F 59 83 C7  // .....I.&.D.._Y..
    7680: 60 9D C3 9C FA 8B C7 2B C3 26 89 47 02 51 57 2E  // `......+.&.G.QW.
    7690: 8E 1E 0A 03 A0 10 04 24 30 AA BE 49 04 B9 1E 00  // .......$0..I....
    76A0: F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04 B1 04 F3 A4  // ................
    76B0: BE 14 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4 BE 7C  // ........t......|
    76C0: 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59 83 C7  // ............_Y..
    76D0: 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B FE 83  // :....&.?....Q...
    76E0: C7 05 BA C4 03 B8 00 01 EF B0 01 B9 04 00 E8 07  // ................
    76F0: FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8 00 03 EF 26  // .G..&.D........&
    7700: 8A 04 EE 26 8B 54 41 B8 11 00 EF B1 19 32 C0 E8  // ...&.TA......2..
    7710: E6 FE 26 8A 44 01 EE 80 C2 06 26 8A 44 04 EE EC  // ..&.D.....&.D...
    7720: B1 15 32 E4 E8 DB FE B0 20 EE B1 09 32 C0 B2 CE  // ..2..... ...2...
    7730: E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C FA 26 8B 7F  // ...&.D..Y....&..
    7740: 02 03 FB 06 51 2E 8E 1E 0A 03 26 8A 05 80 26 10  // ....Q.....&...&.
    7750: 04 CF 08 06 10 04 47 BE 49 04 B9 1E 00 E8 8E FE  // ......G.I.......
    7760: BE 84 04 B1 07 E8 86 FE BE A8 04 B1 04 E8 7E FE  // ..............~.
    7770: BE 14 00 B1 04 E8 76 FE BE 74 00 B1 04 E8 6E FE  // ......v..t....n.
    7780: BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8 5E FE  // .|....f.......^.
    7790: 59 07 9D C3 9C FA 8B C7 2B C3 26 89 47 04 E8 A6  // Y.......+.&.G...
    77A0: 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA C8 03 EC 26  // ....4.B.&......&
    77B0: 88 45 01 50 4A 4A EC 26 88 45 02 83 C7 03 B9 00  // .E.PJJ.&.E......
    77C0: 03 42 32 C0 EE 42 42 EC AA E2 FC 58 4A EE 9D C3  // .B2..BB....XJ...
    77D0: 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0 34 EE  // ..&.w....l....4.
    77E0: 26 8A 04 EE BA C6 03 26 8A 44 02 EE 56 42 42 83  // &......&.D..VBB.
    77F0: C6 03 32 C0 EE 42 B9 00 03 26 8A 04 EE 46 E2 F9  // ..2..B...&...F..
    7800: 5E FE CA 26 8A 44 01 EE 9D C3 BA CC 03 EC 24 FE  // ^..&.D........$.
    7810: 0A C4 B2 C2 EE C3 E8 A8 12 B2 C0 86 C4 EE EB 00  // ................
    7820: EB 00 86 C4 EE EB 00 EB 00 B0 20 EE C3 50 8A E0  // .......... ..P..
    7830: 80 E4 80 80 26 87 04 7F 08 26 87 04 24 7F 8A E0  // ....&....&..$...
    7840: 3C 07 7E 1E 26 F6 47 33 01 75 17 3C 23 74 13 3C  // <.~.&.G3.u.<#t.<
    7850: 32 74 0F 3C 33 74 0B B4 03 26 F6 47 09 01 75 02  // 2t.<3t...&.G..u.
    7860: B4 07 88 26 49 04 BA B4 03 80 0E 87 04 02 26 F6  // ...&I.........&.
    7870: 47 09 01 74 07 B2 D4 80 26 87 04 FD 89 16 63 04  // G..t....&.....c.
    7880: C7 06 4E 04 00 00 C6 06 62 04 00 B9 08 00 BF 50  // ..N.....b......P
    7890: 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A 07 32 E4 A3  // .....3....&..2..
    78A0: 4A 04 26 8A 47 01 A2 84 04 26 8A 47 02 A3 85 04  // J.&.G....&.G....
    78B0: 26 8B 47 03 A3 4C 04 26 8B 47 14 86 C4 A3 60 04  // &.G..L.&.G....`.
    78C0: 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29 75 08  // X.R2.3.......)u.
    78D0: 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E 8E 1E  // 2.3.....Z...`...
    78E0: 0A 03 2E 83 0E 14 03 00 75 6E 80 3E 00 05 01 74  // ........un.>...t
    78F0: 67 C6 06 00 05 01 8A 1E 62 04 32 FF D1 E3 8B FB  // g.......b.2.....
    7900: 8B 85 50 04 8A 3E 62 04 50 32 F6 8A 0E 84 04 32  // ..P..>b.P2.....2
    7910: ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4 29 75  // .AQ..J.2......)u
    7920: 3D 51 52 89 95 50 04 B4 08 E8 B6 D4 0A C0 75 02  // =QR..P........u.
    7930: B0 20 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A FE C2  // . 3.2.....)u.Z..
    7940: 59 E2 DE FE C6 59 E2 CA E8 77 FF 32 C0 A2 00 05  // Y....Y...w.2....
    7950: 58 89 85 50 04 E8 AF 03 61 1F 07 CF 5A 59 59 B0  // X..P....a...ZYY.
    7960: FF EB EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E 06 0C  // ...R*.8.}.2.....
    7970: 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA BA C4  // .Z..............
    7980: 03 B8 02 0F EF B4 02 E8 6D 00 8B D1 32 ED 8A E6  // ........m...2...
    7990: 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8 57 00  // ........Ku.2..W.
    79A0: C3 53 8A 1E 62 04 0B C0 75 04 0A DB 74 03 E8 35  // .S..b...u...t..5
    79B0: 03 5B 8B F8 2B D1 81 C2 01 01 8A C3 32 E4 C3 8A  // .[..+.......2...
    79C0: C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6 26 85 04 8B  // .2.+...t**..&...
    79D0: C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A 1E 06  // .R... .......Z..
    79E0: 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48 75 F5 1F E8  // ...........Hu...
    79F0: 81 FF C3 8A D8 EB F8 BA CE 03 B0 05 EE 42 EC 24  // .............B.$
    7A00: FC 0A C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A 9D C3  // ....J....B...J..
    7A10: 1E 2E 8E 1E 0A 03 8B 16 63 04 80 C2 06 1F C3 1E  // ........c.......
    7A20: 2E 8E 1E 0A 03 8B 16 63 04 1F C3 50 BA CC 03 EC  // .......c...P....
    7A30: B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE FF 80 C2 06  // ....u...X.......
    7A40: C3 1E 2E 8E 1E 0A 03 80 3E 49 04 03 74 13 80 3E  // ........>I..t..>
    7A50: 49 04 02 74 0C 80 3E 49 04 01 74 05 80 3E 49 04  // I..t..>I..t..>I.
    7A60: 00 1F C3 50 2E 8E 06 0E 03 A0 10 04 24 30 3C 30  // ...P........$0<0
    7A70: 74 05 2E 8E 06 10 03 58 0B C0 74 03 E8 E1 01 03  // t......X..t.....
    7A80: 06 4E 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A 04 8B  // .N.....+.2...J..
    7A90: F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75 02 8A  // .............u..
    7AA0: DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8 B3 FF  // .8.~............
    7AB0: 03 F0 3A 16 4A 04 74 06 06 1F E8 1B 00 C3 06 1F  // ..:.J.t.........
    7AC0: E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF F7 DD  // .@..............
    7AD0: 2B F0 06 1F E8 01 00 C3 53 8A CE 2A CB 32 ED 32  // +.......S..*.2.2
    7AE0: F6 2B EA 2B EA E3 0E 8A E1 8B CA F3 A5 03 F5 03  // .+.+............
    7AF0: FD FE CC 75 F4 58 B0 20 8A CA F3 AB 03 FD FE CB  // ...u.X. ........
    7B00: 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2 8B C8 F3 A5  // u..S..*.t.......
    7B10: 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8 2E 00  // X...... ........
    7B20: 2E 8E 1E 10 03 8A C3 22 DF D3 E3 A8 80 74 03 30  // .......".....t.0
    7B30: 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A FC E8  // .....4".........
    7B40: 0C 00 2E 8E 1E 10 03 8A 04 D2 E8 22 C7 C3 B0 28  // ..........."...(
    7B50: F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE 02 80  // .....t..........
    7B60: FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7 03 C3  // ................
    7B70: D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A D8 2E  // ................
    7B80: 8E 06 10 03 8B C1 E8 86 00 75 02 8A DE 03 F0 E8  // .........u......
    7B90: 24 00 C3 FC 8A D8 2E 8E 06 10 03 8A C1 8A E6 E8  // $...............
    7BA0: 6D 00 75 02 8A DE F7 DD 81 C6 F0 00 81 C7 F0 00  // m.u.............
    7BB0: 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C 51 8A CA 56  // +.......*..,Q..V
    7BC0: 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B F9 81  // W..........+.+..
    7BD0: C6 00 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3 A4 5F  // .. ... ........_
    7BE0: 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA 57 D1  // ^....Y........W.
    7BF0: E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00 20 D1  // .........+.... .
    7C00: E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE C3 E8  // ......._....u...
    7C10: B0 00 81 C2 01 01 2B D1 38 F3 76 02 32 DB 51 B1  // ......+.8.v.2.Q.
    7C20: 02 D2 E6 D2 E3 59 32 ED BD 50 00 80 3E 49 04 06  // .....Y2..P..>I..
    7C30: 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50 F6 E3  // t............P..
    7C40: 0A DB C3 52 53 8A DF 32 FF D1 E3 8B 87 50 04 E8  // ...RS..2.....P..
    7C50: 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B 5A C3  // ..P...L...[..[Z.
    7C60: 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 5A C3  // R...J...2.....Z.
    7C70: 8B E8 83 E5 0F 2E 8A A6 20 7C 8B E8 C1 ED 04 83  // ........ |......
    7C80: E5 0F 2E 8A 86 20 7C C3 00 03 0C 0F 30 33 3C 3F  // ..... |.....03<?
    7C90: C0 C3 CC CF F0 F3 FC FF 26 8B 04 86 E0 BA 00 80  // ........&.......
    7CA0: F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02 75 F2 88 56  // ...t........u..V
    7CB0: 00 45 C3 8B 16 63 04 8A C5 86 E0 EF 8A E1 FE C0  // .E...c..........
    7CC0: EF C3 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02 32 F6  // ..R.....&J....2.
    7CD0: 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B 87 50 04 D1  // ..Z.S..2.....P..
    7CE0: EB E8 02 00 5B C3 52 8B D0 32 F6 52 8A C4 F6 26  // ....[.R..2.R...&
    7CF0: 85 04 F7 26 4A 04 5A 03 C2 0A DB 74 08 03 06 4C  // ...&J.Z....t...L
    7D00: 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6 E4 32  // ...u.Z.R...J...2
    7D10: F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4 0E E8  // .......N........
    7D20: 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF 03 03  // ..Z....&J.......
    7D30: F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C 04 03 F8 80  // ...t...2..&L....
    7D40: E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8 FF B2  // ................
    7D50: C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3 C4 3E  // .. .......2....>
    7D60: A8 04 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E E8 95  // ..&.}......S....
    7D70: FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF B8 0F  // ................
    7D80: 55 EF B0 0E E8 7F FC 3C AA 74 0D B0 0F E8 76 FC  // U......<.t....v.
    7D90: 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE C0 8A  // <Ut.2.[.........
    7DA0: E3 EF B0 01 0A C0 5B C3 8A EE 8A 36 85 04 06 1F  // ......[....6....
    7DB0: 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8 52 32 F6 C1  // ..t%..*.....R2..
    7DC0: E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B FA 2B  // ......+.Q....+.+
    7DD0: F2 59 E2 F4 5A E8 05 00 C3 8A DD EB F8 8A C6 F6  // .Y..Z...........
    7DE0: E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA D1 E2  // .......2........
    7DF0: 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3 2E 8E  // ..+.....+.Nu....
    7E00: 1E 0A 03 89 0E 60 04 8A C5 24 60 A8 20 74 06 B9  // .....`...$`. t..
    7E10: 00 1E E9 94 00 F6 06 87 04 01 0F 85 8B 00 80 3E  // ...............>
    7E20: 49 04 07 74 06 E8 19 FC 74 01 C3 F6 06 87 04 08  // I..t....t.......
    7E30: 74 03 CD 42 C3 8A 36 85 04 8A D6 FE CA 38 CD 7E  // t..B..6......8.~
    7E40: 1F 0A C9 74 64 8A E9 8A CE FE C9 EB 5C 38 D1 74  // ...td.......\8.t
    7E50: 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED FE C9 EB 49  // X.....|........I
    7E60: 80 F9 03 7E 44 8A E1 2A E5 0A E4 75 0A 38 CA 74  // ...~D..*...u.8.t
    7E70: 38 FE CA 38 CA 74 32 8A C5 0A C1 38 F0 7E 0A 80  // 8..8.t2....8.~..
    7E80: FC 02 7E 12 80 FD 02 7F C8 80 FC 03 7D BF 8A D6  // ..~.........}...
    7E90: FE CA 38 D1 74 13 8A CE FE C9 FE C9 8A E9 2A EC  // ..8.t.........*.
    7EA0: 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE C3 2E  // ................
    7EB0: 8E 1E 0A 03 A2 62 04 32 E4 8B F0 F7 26 4C 04 A3  // .....b.2....&L..
    7EC0: 4E 04 8B C8 E8 7A FB 74 07 80 3E 49 04 07 77 02  // N....z.t..>I..w.
    7ED0: D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50 04 E8 27 FE  // ...........P..'.
    7EE0: C3 2E 8E 1E 0A 03 8A 26 49 04 E8 74 9C 74 07 C7  // .......&I..t.t..
    7EF0: 06 50 04 00 00 C3 E8 48 FB 74 0B 80 FC 07 74 06  // .P.....H.t....t.
    7F00: 77 08 E8 77 FC C3 E8 9F FB C3 80 FC 13 7C 03 74  // w..w.........|.t
    7F10: 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E 4A 04  // ...N..........J.
    7F20: 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A E8 90 FA C3  // R.&........Z....
    7F30: E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7 03 52 8B 2E  // .0......g....R..
    7F40: 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B F7 03 F0 5A  // J.....&........Z
    7F50: E8 55 FE C3 2E 8E 1E 0A 03 8A 26 49 04 E8 E1 FA  // .U........&I....
    7F60: 74 0C 80 FC 07 74 07 77 40 80 FC 03 7F 04 E8 53  // t....t.w@......S
    7F70: FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A E6 FE  // ................
    7F80: C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26 85 04  // ....+>J....R.&..
    7F90: F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E 4A 04  // .&J......+.Z..J.
    7FA0: C1 E5 03 F7 DD E8 00 FE C3 80 FC 13 7C 03 74 C6  // ............|.t.
    7FB0: C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2 F9 52  // ...............R
    7FC0: 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7 2B F0  // ..J..&....+...+.
    7FD0: 5A F7 DD E8 E9 F9 C3 2E 8E 1E 0A 03 2E 8E 06 10  // Z...............
    7FE0: 03 E8 5D FA 74 11 80 3E 49 04 07 7C 18 2E 8E 06  // ..].t..>I..|....
    7FF0: 0E 03 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B 07 8B  // ..t.....I...&...
    8000: EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB 08 00  // ..F...P.........
    8010: 2B E3 8B EC 80 3E 49 04 06 75 1F B9 04 00 26 8A  // +....>I..u....&.
    8020: 04 88 46 00 45 26 8A 84 00 20 88 46 00 45 83 C6  // ..F.E&... .F.E..
    8030: 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6 B9 04 00 E8  // P...............
    8040: 56 FC 81 C6 00 20 E8 4F FC 81 EE B0 1F E2 F0 EB  // V.... .O........
    8050: E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E 75 09 26 83  // .+..>..2....u.&.
    8060: 7D FE 10 75 02 B6 80 16 1F 8B F5 8B CB F6 C6 80  // }..u............
    8070: 74 01 47 56 57 F3 A6 5F 5E 74 23 FE C0 03 FB F6  // t.GVW.._^t#.....
    8080: C6 80 74 01 47 FE CA 75 E2 FE CC 74 0F 2E 8E 1E  // ..t.G..u...t....
    8090: 0A 03 C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0 8B E5  // ...>|.......2...
    80A0: 03 E3 8B EC 89 46 1A C3 80 3E 49 04 13 7C 05 75  // .....F...>I..|.u
    80B0: 02 EB 5A C3 2E 8E 06 0C 03 E8 18 FC 8B F0 8B 1E  // ..Z.............
    80C0: 85 04 2B E3 8B EC B8 05 08 B9 05 00 BA CE 03 80  // ..+.............
    80D0: 3E 49 04 0F 72 1A F6 06 87 04 60 75 13 B4 0A F7  // >I..r.....`u....
    80E0: C6 01 00 75 02 B4 05 B0 07 EF B8 05 18 B9 05 01  // ...u............
    80F0: EF 51 8B CB 26 8A 04 F6 D0 88 46 00 45 03 36 4A  // .Q..&.....F.E.6J
    8100: 04 E2 F1 58 EF B8 00 01 32 D2 E9 44 FF 2E 8E 06  // ...X....2..D....
    8110: 0C 03 A1 50 04 8B D0 32 F6 52 8A C4 32 E4 F7 26  // ...P...2.R..2..&
    8120: 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B 1E 85 04 2B  // J..&..Z........+
    8130: E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6 03 B9  // ...S.>J.O.......
    8140: 08 00 32 E4 26 8A 04 D0 E4 0A C0 74 03 80 CC 01  // ..2.&......t....
    8150: 46 E2 F1 88 66 00 45 03 F7 4B 75 E3 5B B8 00 01  // F...f.E..Ku.[...
    8160: 32 D2 E9 EC FE 33 ED EB 03 BD 01 00 2E 8E 1E 0A  // 2....3..........
    8170: 03 2E 8E 06 10 03 8A 26 49 04 E8 C4 F8 74 0F 2E  // .......&I....t..
    8180: 8E 06 0E 03 80 FC 07 74 05 7C 3D E9 0B 02 8A E3  // .......t.|=.....
    8190: 8B F0 8A DF 32 FF D1 E3 8B 87 50 04 8B D0 A0 4A  // ....2.....P....J
    81A0: 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74 0B D0  // ...2.........t..
    81B0: EB A1 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED 75 03  // ..L.....u.....u.
    81C0: F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06 10 03 A1 50  // ....G...P......P
    81D0: 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A 04 8B E8 58  // .......P..&J...X
    81E0: A8 80 74 08 24 7F C5 36 7C 00 EB 04 C5 36 0C 01  // ..t.$..6|....6..
    81F0: 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06 74 69 D1 E7  // ..2.........ti..
    8200: 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B C5 50  // ...U...........P
    8210: B2 04 F6 C6 80 75 27 AC E8 55 FA 23 C3 AB AC E8  // .....u'..U.#....
    8220: 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E FE CA 75 E7  // N.#.&......N..u.
    8230: 83 EE 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3 AC E8  // .....>.X.r......
    8240: 2E FA 23 C3 26 31 05 AC E8 25 FA 23 C3 26 31 85  // ..#.&1...%.#.&1.
    8250: 00 20 83 C7 50 FE CA 75 E5 83 EE 08 81 EF 3E 01  // . ..P..u......>.
    8260: 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3 80 74  // X.I......P.....t
    8270: 1F AC 26 30 05 AC 26 30 85 00 20 83 C7 50 FE CA  // ..&0..&0.. ..P..
    8280: 7F EF 83 EE 08 81 EF 3F 01 58 E8 20 00 E2 DA C3  // .......?.X. ....
    8290: AC AA AC 26 88 85 FF 1F 83 C7 4F FE CA 7F F1 83  // ...&......O.....
    82A0: EE 08 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE C0 38  // ....?.X........8
    82B0: E0 72 06 32 C0 81 C7 F0 00 C3 8A 16 85 04 F6 E2  // .r.2............
    82C0: 8B F0 32 F6 8B EA 66 0F B6 06 51 04 F6 E2 66 0F  // ..2...f...Q...f.
    82D0: B7 16 4A 04 83 FA 64 75 03 BA 68 00 83 FA 5A 75  // ..J...du..h...Zu
    82E0: 03 BA 60 00 81 FA AF 00 75 03 BA B0 00 52 F7 E2  // ..`.....u....R..
    82F0: 66 0F B7 F8 66 0F B6 06 50 04 66 03 F8 66 C1 CF  // f...f...P.f..f..
    8300: 10 03 FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7 10 5A  // ...f.......f...Z
    8310: 8A E2 4A C1 E2 03 A0 50 04 50 C5 06 0C 01 03 F0  // ..J....P.P......
    8320: 2E 8E 06 0C 03 58 57 51 50 9C FC 8B CD E8 3B 00  // .....XWQP.....;.
    8330: B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A C3 26 88 05  // .........s...&..
    8340: 66 47 FE CD 75 EF 66 03 FA E2 E2 9D 58 59 5F 83  // fG..u.f.....XY_.
    8350: C7 08 FE C0 38 E0 72 0E 51 32 C0 8B CD 49 03 FA  // ....8.r.Q2...I..
    8360: 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06 52 33 C0 8E  // .....Y+.....R3..
    8370: C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8 E3 97 74 16  // .f.....f......t.
    8380: 38 E0 74 12 0F B6 D0 E8 91 C9 8A E0 66 C1 C7 10  // 8.t.........f...
    8390: 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B 0F 84  // ..f...Z.....|...
    83A0: 18 FF 80 FC 62 0F 84 11 FF E8 01 00 C3 80 FC 11  // ....b...........
    83B0: 75 06 80 E3 80 80 CB 0F 50 53 8A DF 32 FF D1 E3  // u.......PS..2...
    83C0: 8B 97 50 04 5B 2E 8E 06 0C 03 E8 07 F9 8B F8 8B  // ..P.[...........
    83D0: 2E 85 04 58 32 F6 52 8B 36 4A 04 56 8A 26 85 04  // ...X2.R.6J.V.&..
    83E0: C5 36 0C 01 80 FC 0E 75 09 83 7C FE 10 75 03 B4  // .6.....u..|..u..
    83F0: 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2 C4 B8  // .F.........um...
    8400: 02 0F EF 5A 58 50 52 4A 8A E0 57 51 51 57 8B CD  // ...ZXPRJ..WQQW..
    8410: 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38 D4 76 0A 32  // 2......_G..8.v.2
    8420: E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F BA C4  // ...I..G..Y..Y_..
    8430: 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC 26 8A  // ......[KZQW...&.
    8440: 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B D3 76 0A 33  // %....._G+.B;.v.3
    8450: D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD BA CE 03 B8  // ...I..G..Y......
    8460: 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE B8 03 18 EF  // ................
    8470: EB BC 2E 8E 1E 0A 03 80 3E 63 04 B4 74 0B BA CC  // ........>c..t...
    8480: 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A FF 75  // ....u..B.......u
    8490: 1C 8A E3 80 E4 1F 80 26 66 04 E0 08 26 66 04 E8  // .......&f...&f..
    84A0: 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8 91 F5  // -...f... .......
    84B0: 74 19 A0 66 04 24 DF 80 E3 01 74 02 0C 20 A2 66  // t..f.$....t.. .f
    84C0: 04 24 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8 C3 53  // .$......S...~..S
    84D0: 50 80 E3 0F 8A FB D0 E3 81 E3 10 07 0A DF E8 60  // P..............`
    84E0: F5 74 0E B4 00 8A C3 E8 2C F3 0B ED 74 03 26 88  // .t......,...t.&.
    84F0: 1D 8A C3 E8 0B 00 0B ED 74 04 26 88 5D 10 58 5B  // ........t.&.].X[
    8500: C3 8A E0 1E 2E 8E 1E 0A 03 80 3E 49 04 33 1F 7F  // ..........>I.3..
    8510: 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C FA E8  // ..........0.....
    8520: 9F 05 B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3 EE 0B  // ................
    8530: ED 74 04 47 26 88 1D FE C4 80 C3 02 E2 EB B0 20  // .t.G&.......... 
    8540: EE 9D C3 2E 8E 1E 0A 03 8A 26 49 04 E8 F2 F4 74  // .........&I....t
    8550: 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3 80 FC 13 7C  // ....w.t........|
    8560: 03 74 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08 EF 2E  // .tL.............
    8570: 8E 1E 0C 03 F6 C3 80 75 1C B2 C4 B8 02 FF EF 8A  // .......u........
    8580: 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE  // %.......%...%...
    8590: B8 08 FF EF C3 B8 03 18 EF B2 C4 B0 02 8A E3 EF  // ................
    85A0: 8A 25 B4 FF 88 25 EF B2 CE B8 03 00 EF EB E1 50  // .%...%.........P
    85B0: 2E 8E 06 0C 03 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B  // ......J.........
    85C0: F8 58 26 88 05 C3 2E 8E 1E 0A 03 8A 26 49 04 E8  // .X&.........&I..
    85D0: 6F F4 74 0F 80 FC 07 77 0B 74 08 E8 5F F5 8B EC  // o.t....w.t.._...
    85E0: 89 46 1A C3 80 FC 13 7C 03 74 29 C3 E8 35 F7 8A  // .F.....|.t)..5..
    85F0: CC 2E 8E 1E 0C 03 BA CE 03 32 FF B8 04 03 EF D0  // .........2......
    8600: E7 8A 1D 22 D9 74 03 80 CF 01 FE CC 7D F0 8B EC  // ...".t......}...
    8610: 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8  // .~...J..........
    8620: 2E 8E 1E 0C 03 8A 05 8B EC 88 46 1A C3 2E 8E 1E  // ..........F.....
    8630: 0A 03 8A 3E 62 04 8A CF D0 E1 32 ED BE 50 04 03  // ...>b.....2..P..
    8640: F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06 10 03  // .....I.<.vJ.....
    8650: E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6 E3 8A  // ...u3..J........
    8660: CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA D1 E9  // .......N........
    8670: 41 FE C2 38 DA 73 59 89 14 8B 16 63 04 B0 0E 8A  // A..8.sY....c....
    8680: E5 EF 8A E1 FE C0 EF C3 2E 8E 06 0E 03 80 F9 07  // ................
    8690: 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C 0A 75 1D 3A  // t....u.2...<.u.:
    86A0: 36 84 04 75 03 E9 93 00 FE C6 89 14 E8 92 F3 75  // 6..u...........u
    86B0: 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07 75 04  // .........L..<.u.
    86C0: E8 F1 7E C3 3C 08 75 83 0A D2 74 DE FE CA EB DA  // ..~.<.u...t.....
    86D0: 32 FF 32 D2 2B CB 3A 36 84 04 74 06 FE C6 03 CB  // 2.2.+.:6..t.....
    86E0: EB 95 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE  // ......c.........
    86F0: C0 EF 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E 04 8B  // ..+.+.&.e.P.>N..
    8700: F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F F3 A5  // ................
    8710: 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8 C2 C6  // ..X. ...........
    8720: FE C2 3A 16 4A 04 74 03 89 14 C3 32 FF 32 D2 89  // ..:.J.t....2.2..
    8730: 14 3A 36 84 04 74 2E FE C6 EB ED 89 14 2E 8E 06  // .:6..t..........
    8740: 10 03 E8 FC F2 74 0E 2E 8E 06 0E 03 80 F9 07 74  // .....t.........t
    8750: 04 32 FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7 4F 8B  // .2............O.
    8760: 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A 16 4A 04 FE  // .J...3..6....J..
    8770: CA B0 01 E9 70 F7 2E 8E 1E 0A 03 F6 06 87 04 08  // ....p...........
    8780: 74 03 CD 42 C3 E8 76 F6 8B EC C6 46 1B 00 C3 2E  // t..B..v....F....
    8790: 8E 1E 0A 03 8A DF 32 FF D1 E3 89 97 50 04 D0 EB  // ......2.....P...
    87A0: 38 1E 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E 1E 0A  // 8.b.u....\......
    87B0: 03 8A DF 32 FF D1 E3 8B 97 50 04 8B 0E 60 04 8B  // ...2.....P...`..
    87C0: EC 89 4E 16 89 56 12 C3 2E 8E 1E 0A 03 A0 87 04  // ..N..V..........
    87D0: 24 80 0A 06 49 04 8A 26 4A 04 F6 06 87 04 08 75  // $...I..&J......u
    87E0: 2D E8 5D F2 74 07 80 3E 49 04 07 7F 21 51 8A CC  // -.].t..>I...!Q..
    87F0: 8A 2E 84 04 BE B9 87 81 FE C2 87 74 10 2E 3B 0C  // ...........t..;.
    8800: 74 05 83 C6 03 EB F0 24 80 2E 0A 44 02 59 8A 3E  // t......$...D.Y.>
    8810: 62 04 8B EC 89 46 1A 89 5E 0E 89 4E 16 89 56 12  // b....F..^..N..V.
    8820: C3 84 18 23 84 2B 33 84 2A 32 2E 8E 1E 0A 03 3C  // ...#.+3.*2.....<
    8830: 04 7F 1B 50 52 BA CC 03 EC A8 01 5A 58 74 08 80  // ...PR......ZXt..
    8840: 3E 63 04 D4 74 08 C3 80 3E 63 04 B4 75 F8 3C 1C  // >c..t...>c..u.<.
    8850: 73 F4 32 E4 8B E8 D1 E5 2E FF A6 F5 87 2D 88 4D  // s.2..........-.M
    8860: 88 5F 88 94 88 DE 87 DE 87 DE 87 B9 88 D1 88 D5  // ._..............
    8870: 88 DE 87 DE 87 DE 87 DE 87 DE 87 DE 87 03 89 DE  // ................
    8880: 87 07 89 22 89 DE 87 61 89 DE 87 6F 89 8A 89 91  // ..."...a...o....
    8890: 89 9D 89 C1 89 80 3E 49 04 13 74 15 E8 BF F4 8B  // ......>I..t.....
    88A0: C3 86 E0 E8 70 EF 0B ED 74 07 8A C7 32 FF 26 88  // ....p...t...2.&.
    88B0: 01 E8 93 F4 C3 E8 A6 F4 8A C7 E8 44 FC 0B ED 74  // ...........D...t
    88C0: F0 26 88 7D 11 EB EA 80 3E 49 04 13 74 E3 06 E8  // .&.}....>I..t...
    88D0: 8C F4 1F 0B ED 74 07 8B F2 B9 11 00 F3 A4 8B F2  // .....t..........
    88E0: E8 DE 01 32 E4 B9 10 00 B2 C0 9C FA 8A C4 EE AC  // ...2............
    88F0: EE 9D FE C4 E2 F4 AC E8 07 FC EB B5 80 FB 01 77  // ...............w
    8900: B0 E8 43 F4 B2 C0 B0 30 E8 FB F0 24 F7 80 26 65  // ..C....0...$..&e
    8910: 04 DF 80 FB 00 74 07 0C 08 80 0E 65 04 20 EE EB  // .....t.....e. ..
    8920: 90 E8 9D 01 8A C3 B2 C0 E8 DB F0 8B C8 EE B0 20  // ............... 
    8930: EE 8B EC 88 4E 0F E9 78 FF B3 11 EB E4 8B FA E8  // ....N..x........
    8940: 05 F4 B9 10 00 32 E4 B2 C0 8A C4 9C FA EE 42 EC  // .....2........B.
    8950: 26 88 05 FE C4 4A EE 9D 47 E2 EE 9C FA B0 11 EE  // &....J..G.......
    8960: 42 EC 9D 26 88 05 E8 E3 F3 EB 5A E8 CE 00 C3 8B  // B..&......Z.....
    8970: FA 51 8B C3 26 8A 35 26 8A 6D 01 26 8A 4D 02 E8  // .Q..&.5&.m.&.M..
    8980: CA 00 83 C7 03 43 59 E2 E8 C3 0A DB 75 1A E8 B6  // .....CY.....u...
    8990: F3 B2 C0 B0 30 E8 6E F0 24 7F F6 C7 01 74 02 0C  // ....0.n.$....t..
    89A0: 80 B4 30 E8 70 EE EB 1D FE CB 75 1C E8 98 F3 B2  // ..0.p.....u.....
    89B0: C0 B0 30 E8 50 F0 EE A8 80 75 03 C0 E7 02 B4 34  // ..0.P....u.....4
    89C0: 8A C7 E8 51 EE E8 7F F3 C3 8A C3 E8 D1 00 8B EC  // ...Q............
    89D0: 89 4E 16 88 76 13 C3 8B FA 51 8B C3 E8 C3 00 26  // .N..v....Q.....&
    89E0: 88 35 26 88 6D 01 26 88 4D 02 83 C7 03 43 59 E2  // .5&.m.&.M....CY.
    89F0: E8 C3 BA C6 03 8A C3 EE C3 BA C6 03 EC 32 E4 8B  // .............2..
    8A00: EC 89 46 0E C3 E8 3F F3 B2 C0 B0 34 E8 F7 EF 8A  // ..F...?....4....
    8A10: F8 EE B0 30 E8 EF EF B3 01 A8 80 75 05 B3 00 C0  // ...0.......u....
    8A20: EF 02 8B EC 89 5E 0E EB 9C 51 8B C3 E8 73 00 E8  // .....^...Q...s..
    8A30: 2A 00 8A C3 E8 52 00 43 59 E2 EE C3 F6 06 89 04  // *....R.CY.......
    8A40: 02 74 03 E8 16 00 8A C3 E8 39 00 C3 F6 06 89 04  // .t.......9......
    8A50: 02 74 03 E8 06 00 8A C3 E8 2E 00 C3 50 B0 1E F6  // .t..........P...
    8A60: E6 50 B0 3B F6 E5 50 B0 0B F6 E1 59 03 C1 59 03  // .P.;..P....Y..Y.
    8A70: C1 B1 64 F6 F1 80 FC 32 7C 02 FE C0 8A F0 8A E8  // ..d....2|.......
    8A80: 8A C8 58 C3 52 E8 39 00 5A 53 8B DA BA C8 03 9C  // ..X.R.9.ZS......
    8A90: FA EE 42 8A C7 EE 8A C5 EE 8A C1 EE 9D 5B C3 E8  // ..B..........[..
    8AA0: 1F 00 53 9C FA BA C7 03 EE 42 42 EC 8A F8 EB 00  // ..S......BB.....
    8AB0: EB 00 EC 8A E8 EB 00 EB 00 EC 8A C8 8A F7 9D 5B  // ...............[
    8AC0: C3 50 51 E8 81 F2 B9 FF 7F EC A8 08 75 02 E2 F9  // .PQ.........u...
    8AD0: 59 58 C3 2E 8E 1E 0A 03 8B F8 24 0F 81 E7 F0 00  // YX........$.....
    8AE0: C1 EF 03 83 FF 06 7F 18 2E FF A5 85 8A 8D 8A A2  // ................
    8AF0: 8A 40 8B 9C 8B 3C 03 74 08 3C 04 7F 03 E8 CF 01  // .@...<.t.<......
    8B00: C3 BA C4 03 B0 03 8A E3 EF C3 3C 04 77 F2 50 53  // ..........<.w.PS
    8B10: 50 52 8B 16 63 04 B0 07 E8 EB EE 8A E0 D0 EC 80  // PR..c...........
    8B20: E4 01 A8 40 74 03 80 CC 02 B0 12 E8 D8 EE 40 A3  // ...@t.........@.
    8B30: 85 04 B0 09 E8 CF EE A8 80 74 04 D1 2E 85 04 A1  // .........t......
    8B40: 85 04 8B D0 3D F4 01 73 1B BA E0 01 3D C2 01 73  // ....=..s....=..s
    8B50: 13 BA 90 01 3D 7C 01 73 0B BA 5E 01 3D 4A 01 73  // ....=|.s..^.=J.s
    8B60: 03 BA C8 00 89 16 85 04 5A 58 C6 06 84 04 FF E8  // ........ZX......
    8B70: 5D 01 5B 58 8A DF 32 FF 0A C0 74 0E B3 0E 3C 01  // ].[X..2...t...<.
    8B80: 74 08 B3 08 3C 02 74 02 B3 10 8A CB 8A E9 81 E9  // t...<.t.........
    8B90: 01 02 80 F9 08 7E 04 81 E9 01 01 87 1E 85 04 53  // .....~.........S
    8BA0: E8 5B F2 5B E8 85 02 C3 0A C0 74 11 FE C8 74 1A  // .[.[......t...t.
    8BB0: FE C8 74 38 FE C8 74 3C FE C8 74 40 C3 89 2E 7C  // ..t8..t<..t@...|
    8BC0: 00 8C 06 7E 00 C3 8C C8 8E C0 FE CA 0A DB 74 07  // ...~..........t.
    8BD0: 32 FF 2E 8A 97 80 8B 89 0E 85 04 88 16 84 04 89  // 2...............
    8BE0: 2E 0C 01 8C 06 0E 01 C3 00 0D 18 2A E8 09 03 B9  // ...........*....
    8BF0: 0E 00 EB D6 BD 90 5A B9 08 00 EB CA BD A3 62 B9  // ......Z.......b.
    8C00: 10 00 EB C2 0A C0 75 BD 8B 0E 85 04 8A 16 84 04  // ......u.........
    8C10: 80 FF 07 77 35 80 FF 01 77 10 0A FF 75 06 C4 2E  // ...w5...w...u...
    8C20: 7C 00 EB 26 C4 2E 0C 01 EB 20 80 FF 02 75 0B 8C  // |..&..... ...u..
    8C30: CD 8E C5 2E 8B 2E 82 73 EB 10 0E 07 8A DF 32 FF  // .......s......2.
    8C40: 80 EB 02 D1 E3 2E 8B AF F3 8B 8B C5 8B EC 89 4E  // ...............N
    8C50: 16 89 56 12 89 46 0A 8C 46 1E C3 A3 62 90 5A 90  // ..V..F..F...b.Z.
    8C60: 5E 90 62 A3 62 A3 72 53 06 8A 26 49 04 E8 CD C3  // ^.b.b.rS..&I....
    8C70: 26 8A 47 02 26 8A 67 33 F6 C4 01 74 22 BD A3 62  // &.G.&.g3...t"..b
    8C80: 3C 10 7D 0E E8 71 02 8C 06 0E 01 3C 0E 7D 07 BD  // <.}..q.....<.}..
    8C90: 90 5A 8C 0E 0E 01 89 2E 0C 01 E8 10 01 EB 2D B4  // .Z............-.
    8CA0: 84 3C 10 7D 13 B4 81 3C 0E 74 0D 7F 15 B4 02 3C  // .<.}...<.t.....<
    8CB0: 08 74 05 80 CC 80 EB 0A 26 F6 47 05 01 74 03 80  // .t......&.G..t..
    8CC0: E4 7F 86 C4 32 DB E8 06 00 E8 C9 01 07 5B C3 8B  // ....2........[..
    8CD0: F8 8B F2 BA CE 03 EC B8 05 00 EF B8 06 04 EF B2  // ................
    8CE0: C4 EC B8 02 04 EF B8 04 07 EF 8B D6 8B C7 50 24  // ..............P$
    8CF0: 7F 0A C0 74 22 0E 07 33 D2 B9 00 01 3C 04 75 07  // ...t"..3....<.u.
    8D00: B7 10 BD A3 62 EB 10 FE C8 75 07 B7 0E E8 E8 01  // ....b....u......
    8D10: EB 05 B7 08 BD 90 5A E8 2D 00 58 A8 80 74 00 BA  // ......Z.-.X..t..
    8D20: C4 03 B8 02 03 EF B8 04 02 EF B2 CC EC A8 01 B8  // ................
    8D30: 06 0E 75 02 B4 0A B2 CE 50 EC 58 EF B0 04 EE 32  // ..u.....P.X....2
    8D40: C0 EE B8 05 10 EF C3 FC 0B C9 75 01 C3 80 FF 0E  // ..........u.....
    8D50: 75 0A 26 83 7E FE 10 75 03 80 CD 80 1E 06 1F 2E  // u.&.~..u........
    8D60: 8E 06 0C 03 8B FA C1 E7 05 B0 40 53 80 E3 03 F6  // ..........@S....
    8D70: E3 5B F6 C3 04 74 02 04 20 86 E0 8B D0 03 FA 8B  // .[...t.. .......
    8D80: F5 E3 28 32 C0 86 FB 32 FF 51 F6 C5 80 74 01 46  // ..(2...2.Q...t.F
    8D90: 8B CB F3 A4 83 FB 20 74 07 B9 20 00 2B CB F3 AA  // ...... t.. .+...
    8DA0: 59 F6 C5 80 74 01 46 FE C9 75 DE 1F C3 8A 26 49  // Y...t.F..u....&I
    8DB0: 04 50 06 57 C4 3E A8 04 26 C4 7D 0C 8C C5 0B EF  // .P.W.>..&.}.....
    8DC0: 74 30 8B EF 83 C7 07 26 8A 05 3C FF 74 24 38 E0  // t0.....&..<.t$8.
    8DD0: 74 03 47 EB F2 8B FD 26 8A 05 FE C8 A2 84 04 26  // t.G....&.......&
    8DE0: 8B 45 01 A3 85 04 26 C4 7D 03 89 3E 0C 01 8C 06  // .E....&.}..>....
    8DF0: 0E 01 5F 07 58 C3 26 F6 47 33 01 74 01 C3 C4 1E  // .._.X.&.G3.t....
    8E00: A8 04 26 C4 5F 08 8C C0 0B C3 74 1F BF 0B 00 26  // ..&._.....t....&
    8E10: 8A 01 3C FF 74 15 47 38 06 49 04 75 F2 26 8A 07  // ..<.t.G8.I.u.&..
    8E20: 32 E4 87 06 85 04 8B D8 E8 01 00 C3 8B 16 63 04  // 2.............c.
    8E30: 8A 26 85 04 FE CC 80 E4 1F 9C FA 80 FA D4 74 0B  // .&............t.
    8E40: B0 14 EE 42 EC 24 E0 0A C4 EE 4A B0 09 EE 42 EC  // ...B.$....J...B.
    8E50: 24 E0 0A C4 EE 9D 8A C8 8B C3 8A 16 85 04 F6 F2  // $...............
    8E60: 80 3E 84 04 FF 75 07 A2 84 04 FE 0E 84 04 F6 E2  // .>...u..........
    8E70: F6 C1 80 74 02 D1 E0 48 8A E0 B0 12 8B 16 63 04  // ...t...H......c.
    8E80: EF A0 4A 04 8A 26 84 04 FE C4 F6 E4 D1 E0 05 00  // ..J..&..........
    8E90: 01 A3 4C 04 C3 8A 26 49 04 50 06 57 C4 3E A8 04  // ..L...&I.P.W.>..
    8EA0: 26 C4 7D 08 8C C5 0B EF 74 4A 8B EF 83 C7 0B 26  // &.}.....tJ.....&
    8EB0: 8A 05 3C FF 74 3E 38 E0 74 03 47 EB F2 8B FD 26  // ..<.t>8.t.G....&
    8EC0: 8A 3D 26 8A 5D 01 26 8B 4D 02 26 8B 55 04 26 8A  // .=&.].&.M.&.U.&.
    8ED0: 45 0A 3C FF 74 02 FE C8 50 A0 84 04 FE C0 F6 26  // E.<.t...P......&
    8EE0: 85 04 A3 85 04 58 A2 84 04 26 C4 7D 06 8B EF 32  // .....X...&.}...2
    8EF0: C0 E8 DB FD 5F 07 58 C3 50 53 51 52 2E A1 14 03  // ...._.X.PSQR....
    8F00: 0B C0 74 09 2E 8B 2E 82 73 0E 07 EB 08 B8 30 11  // ..t.....s.....0.
    8F10: B7 02 E8 CD BE 5A 59 5B 58 C3 3C 04 7C 01 C3 E3  // .....ZY[X.<.|...
    8F20: FD 53 2E 8E 1E 0A 03 86 FB 32 FF D1 E3 8B FB 81  // .S.......2......
    8F30: C7 50 04 8B 35 5B 89 15 56 8B F0 51 53 26 8A 46  // .P..5[..V..QS&.F
    8F40: 00 45 3C 0D 7F 1F 75 04 32 D2 EB 40 3C 0A 74 32  // .E<...u.2..@<.t2
    8F50: 3C 07 75 05 E8 5D 76 EB 62 3C 08 75 08 0A D2 74  // <.u..]v.b<.u...t
    8F60: 5A FE CA EB 27 F7 C6 02 00 74 05 26 8A 5E 00 45  // Z...'....t.&.^.E
    8F70: B9 01 00 B4 09 E8 6A BE FE C2 3A 16 4A 04 72 0C  // ......j...:.J.r.
    8F80: 32 D2 89 15 3A 36 84 04 73 06 FE C6 89 15 EB 2B  // 2...:6..s......+
    8F90: 50 E8 AD EA 75 08 B8 00 08 E8 46 BE EB 09 80 3E  // P...u.....F....>
    8FA0: 49 04 07 74 F1 32 E4 86 3E 62 04 53 8A FC 55 E8  // I..t.2..>b.S..U.
    8FB0: 25 00 5D 5B 86 3E 62 04 58 8B 15 5B 59 E2 15 5A  // %.][.>b.X..[Y..Z
    8FC0: F7 C6 01 00 75 02 89 15 8B 05 3A 3E 62 04 75 03  // ....u.....:>b.u.
    8FD0: E8 34 ED C3 E9 64 FF 33 C9 8A 36 84 04 8A 16 4A  // .4...d.3..6....J
    8FE0: 04 FE CA B8 01 06 E8 F9 BD C3 2E 8E 1E 0A 03 0A  // ................
    8FF0: C0 75 0D E8 18 00 8B EC 89 5E 0E C6 46 1A 1A C3  // .u.......^..F...
    9000: 3C 01 75 09 E8 41 00 8B EC C6 46 1A 1A C3 A0 8A  // <.u..A....F.....
    9010: 04 BF 80 90 2E 3A 05 72 04 BB FF FF C3 32 E4 D1  // .....:.r.....2..
    9020: E0 03 F8 2E 8B 5D 04 0A DB 74 05 0A FF 75 04 C3  // .....]...t...u..
    9030: 86 FB C3 A0 10 04 24 30 3C 30 74 06 F6 C3 01 75  // ......$0<0t....u
    9040: EF C3 F6 C3 01 74 E9 C3 BF 80 90 2E 8A 0D 32 C0  // .....t........2.
    9050: 83 C7 04 2E 3B 1D 74 12 86 FB 2E 3B 1D 74 0B 83  // ....;.t....;.t..
    9060: C7 02 FE C0 38 C8 7E EB B0 FF A2 8A 04 C3 BB 08  // ....8.~.........
    9070: 00 F6 06 89 04 02 74 0E BB 07 00 BA CC 03 EC A8  // ......t.........
    9080: 01 74 18 BB 08 00 BA B4 03 E8 DF EC 74 21 B7 01  // .t..........t!..
    9090: E8 8C E9 80 FA D4 74 17 86 FB C3 BA D4 03 E8 CA  // ......t.........
    90A0: EC 74 0C B7 02 E8 77 E9 80 FA B4 74 02 86 FB C3  // .t....w....t....
    90B0: 0F 08 0F 08 0F 08 0F 08 03 01 03 01 01 01 00 08  // ................
    90C0: 01 01 01 01 01 01 01 01 0F 01 0F 08 0F 04 00 02  // ................
    90D0: 0F 02 01 01 0F 01 FF 01 FF E0 0F 00 00 00 00 07  // ................
    90E0: 02 08 FF 0E 00 00 3F 00 10 01 08 00 00 00 00 01  // ......?.........
    90F0: 00 02 02 01 00 04 04 01 00 05 02 05 00 06 01 06  // ................
    9100: 05 06 00 08 01 08 00 07 02 07 06 07 CA 00 34 00  // ..............4.
    9110: 90 00 96 00 00 00 00 00 00 00 5F 57 C3 90 50 66  // .........._W..Pf
    9120: 52 E8 F4 FF FF FF 81 EF 10 00 00 00 2E 8B 07 66  // R..............f
    9130: BA F8 0C EF 66 BA FC 0C ED 32 C0 66 8B F8 66 5A  // ....f....2.f..fZ
    9140: 58 C3 66 B8 4F 03 66 52 66 56 53 57 50 0A FF 75  // X.f.O.fRfVSWP..u
    9150: 44 E8 C8 FF FF FF 66 33 F6 66 BB 53 00 E8 48 00  // D.....f3.f.S..H.
    9160: 00 00 C1 E8 10 F6 C4 40 75 2B 66 81 E2 FF 02 66  // .......@u+f....f
    9170: D1 E2 66 8B C2 66 40 C1 E0 10 66 8B C2 66 BB 13  // ..f..f@...f..f..
    9180: 00 E8 30 00 00 00 66 BB 12 00 E8 27 00 00 00 66  // ..0...f....'...f
    9190: 58 32 E4 66 50 58 5F 5B 66 5E 66 5A C3 90 66 B8  // X2.fPX_[f^fZ..f.
    91A0: 4F 03 C3 90 66 B8 4F 03 C3 90 66 52 E8 11 00 00  // O...f.O...fR....
    91B0: 00 ED 66 5A C3 90 66 52 E8 05 00 00 00 EF 66 5A  // ..fZ..fR......fZ
    91C0: C3 90 66 8B D7 50 33 C0 66 8B C3 66 03 C6 C1 E0  // ..f..P3.f..f....
    91D0: 02 EF 66 83 C2 04 58 C3 8E 39 81 39 81 39 81 39  // ..f...X..9.9.9.9
    91E0: 6C 39 6C 39 6C 39 6C 39 AE 35 25 36 4F 36 90 37  // l9l9l9l9.5%6O6.7
    91F0: 8F 37 8F 37 D5 37 3A 38 6A 38 27 39 50 39 50 39  // .7.7.7:8j8'9P9P9
    9200: C7 37 BA 37 BA 37 BA 37 BA 37 BA 37 D5 37 3A 38  // .7.7.7.7.7.7.7:8
    9210: 6A 38 27 39 55 39 9B 39 50 39 50 39 FF FF FF FF  // j8'9U9.9P9P9....
    9220: FF FF 00 00 FF FF 00 00 FF FF 00 00 FF 00 00 00  // ................
    9230: FF 00 00 00 FF 00 00 00 FF 00 00 00 00 00 08 10  // ................
    9240: 00 08 10 18 00 08 10 18 B2 33 01 B2 33 02 C0 47  // .........3..3..G
    9250: 03 A0 47 03 D7 34 03 8B 34 03 B3 33 04 CC 33 04  // ..G..4..4..3..3.
    9260: DC 33 04 B2 33 03 00 00 00 00 5F 3B 00 02 5F 3B  // .3..3....._;.._;
    9270: 01 02 5F 3B 02 02 5F 3B 03 02 5F 3B 04 02 5F 3B  // .._;.._;.._;.._;
    9280: 05 02 59 3D 00 02 59 3D 01 02 59 3D 02 02 59 3D  // ..Y=..Y=..Y=..Y=
    9290: 03 02 59 3D 04 02 59 3D 05 02 8E 3D 00 02 8E 3D  // ..Y=..Y=...=...=
    92A0: 01 02 8E 3D 02 02 8E 3D 03 02 8E 3D 04 02 8E 3D  // ...=...=...=...=
    92B0: 05 02 C9 3F 00 02 C9 3F 01 02 C9 3F 02 02 C9 3F  // ...?...?...?...?
    92C0: 03 02 C9 3F 04 02 C9 3F 05 02 C9 3F 00 02 C9 3F  // ...?...?...?...?
    92D0: 01 02 C9 3F 02 02 C9 3F 03 02 C9 3F 04 02 C9 3F  // ...?...?...?...?
    92E0: 05 02 90 3E 00 02 90 3E 01 02 90 3E 02 02 90 3E  // ...>...>...>...>
    92F0: 03 02 90 3E 04 02 90 3E 05 02 CC 3E 00 02 CC 3E  // ...>...>...>...>
    9300: 01 02 CC 3E 02 02 CC 3E 03 02 CC 3E 04 02 CC 3E  // ...>...>...>...>
    9310: 05 02 3D 3E 00 02 3D 3E 01 02 3D 3E 02 02 3D 3E  // ..=>..=>..=>..=>
    9320: 03 02 3D 3E 04 02 3D 3E 05 02 71 3E 00 02 71 3E  // ..=>..=>..q>..q>
    9330: 01 02 71 3E 02 02 71 3E 03 02 71 3E 04 02 71 3E  // ..q>..q>..q>..q>
    9340: 05 02 21 42 00 00 54 42 01 00 54 42 02 00 41 42  // ..!B..TB..TB..AB
    9350: 00 00 2F 41 00 02 28 3F 00 02 28 3F 01 02 28 3F  // ../A..(?..(?..(?
    9360: 02 02 28 3F 03 02 28 3F 04 02 28 3F 05 02 47 41  // ..(?..(?..(?..GA
    9370: 00 02 9C 43 05 00 9C 43 01 00 9C 43 00 00 9C 43  // ...C...C...C...C
    9380: 02 00 DD 43 00 00 DD 43 02 00 22 44 00 00 B2 40  // ...C...C.."D...@
    9390: 00 02 B2 40 01 02 B2 40 02 02 B2 40 03 02 B2 40  // ...@...@...@...@
    93A0: 04 02 B2 40 05 02 6E 42 00 00 96 42 00 00 17 43  // ...@..nB...B...C
    93B0: 00 00 92 43 00 00 76 3F 00 02 76 3F 01 02 76 3F  // ...C..v?..v?..v?
    93C0: 02 02 76 3F 03 02 76 3F 04 02 76 3F 05 02 91 43  // ..v?..v?..v?...C
    93D0: 00 01 91 43 00 01 95 3C 00 02 95 3C 01 02 95 3C  // ...C...<...<...<
    93E0: 02 02 95 3C 03 02 95 3C 04 02 95 3C 05 02 B6 42  // ...<...<...<...B
    93F0: 00 00 92 43 00 00 92 43 00 00 92 43 00 00 C7 41  // ...C...C...C...A
    9400: 00 00 B9 3D 00 02 B9 3D 01 02 B9 3D 02 02 B9 3D  // ...=...=...=...=
    9410: 03 02 B9 3D 04 02 B9 3D 05 02 E8 3D 00 02 E8 3D  // ...=...=...=...=
    9420: 01 02 E8 3D 02 02 E8 3D 03 02 E8 3D 04 02 E8 3D  // ...=...=...=...=
    9430: 05 02 1E 3E 00 02 1E 3E 01 02 1E 3E 02 02 1E 3E  // ...>...>...>...>
    9440: 03 02 1E 3E 04 02 1E 3E 05 02 D9 42 00 00 FC 42  // ...>...>...B...B
    9450: 00 00 BA 3E 01 02 BA 3E 02 02 16 3F 01 02 16 3F  // ...>...>...?...?
    9460: 02 02 A6 00 02 01 EA 94 00 00 00 00 00 00 06 AE  // ................
    9470: 00 00 B6 96 00 00 00 00 24 98 00 00 00 00 EE 98  // ........$.......
    9480: CA 9C 00 00 00 00 00 00 00 00 00 00 02 97 90 A1  // ................
    9490: 56 97 00 00 A8 97 00 00 00 00 00 00 00 00 00 00  // V...............
    94A0: 00 00 00 00 00 00 00 00 3C A2 AE A2 22 A3 00 00  // ........<..."...
    94B0: 66 A3 00 00 B4 A6 00 00 36 A4 F4 A5 80 A7 DE A8  // f.......6.......
    94C0: 20 A9 80 C5 00 00 00 00 34 A9 FA AA 80 C3 00 00  //  .......4.......
    94D0: E2 C4 04 AB 00 00 D0 AC 00 00 00 00 00 00 16 AD  // ................
    94E0: FE AD 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    94F0: 00 00 00 00 00 00 00 00 00 00 00 00 52 C7 1A B1  // ............R...
    9500: 26 B2 0A C1 26 C3 00 00 4A 00 02 01 00 00 00 00  // &...&...J.......
    9510: 00 00 38 C8 8C C9 D4 C9 D8 CC 72 D3 58 D5 00 00  // ..8.......r.X...
    9520: 00 00 34 CD 40 D1 94 D1 74 D5 30 D2 00 00 34 D2  // ..4.@...t.0...4.
    9530: 00 00 00 00 00 00 00 00 48 D2 34 D3 00 00 00 00  // ........H.4.....
    9540: 00 00 3A D3 00 00 00 00 40 CD 00 00 00 00 00 00  // ..:.....@.......
    9550: 00 00 CC 01 02 01 00 08 37 00 00 02 00 00 E3 0D  // ........7.......
    9560: 01 05 80 29 00 F4 00 00 01 05 53 39 00 F4 00 00  // ...)......S9....
    9570: 01 05 00 00 2C A8 01 00 01 05 01 00 00 F4 00 00  // ....,...........
    9580: 1A 05 00 04 2C 05 00 FF F3 00 00 01 01 81 29 00  // ....,.........).
    9590: 01 01 54 39 00 01 05 00 00 2D A8 01 00 01 01 01  // ..T9.....-......
    95A0: 00 00 01 05 85 29 00 00 3D 00 01 05 F7 3A 00 00  // .....)..=....:..
    95B0: 3D 00 01 05 00 00 31 A8 01 00 01 05 01 00 00 00  // =.....1.........
    95C0: 3D 00 14 05 00 06 0E 0D 00 3F 00 2C 05 00 01 00  // =........?.,....
    95D0: 00 00 01 01 86 29 00 01 01 F8 3A 00 01 05 00 00  // .....)....:.....
    95E0: 32 A8 01 00 01 01 01 00 00 01 05 50 28 EB 0F E4  // 2..........P(...
    95F0: 60 01 05 00 00 90 A6 01 00 01 05 01 00 EB 0F E4  // `...............
    9600: 60 01 05 6E 29 00 00 00 00 01 05 00 00 1A A8 01  // `..n)...........
    9610: 00 01 05 01 00 00 00 00 00 01 05 72 29 FF FF 0F  // ...........r)...
    9620: 00 01 05 00 00 1E A8 01 00 01 05 01 00 FF FF 0F  // ................
    9630: 00 01 05 00 00 10 A8 01 00 01 00 64 29 01 00 01  // ...........d)...
    9640: 05 00 00 11 A8 01 00 01 00 65 29 01 00 01 05 00  // .........e).....
    9650: 00 12 A8 01 00 01 00 66 29 01 00 01 05 00 00 13  // .......f).......
    9660: A8 01 00 01 00 67 29 01 00 01 05 00 00 14 A8 01  // .....g).........
    9670: 00 01 00 68 29 01 00 01 05 00 00 15 A8 01 00 01  // ...h)...........
    9680: 00 69 29 01 00 01 05 00 00 16 A8 01 00 01 00 6A  // .i)............j
    9690: 29 01 00 01 05 00 00 17 A8 01 00 01 00 6B 29 01  // )............k).
    96A0: 00 01 00 55 39 01 00 03 00 40 01 00 01 02 74 29  // ...U9....@....t)
    96B0: 40 01 02 59 39 40 01 05 00 00 20 A8 01 00 01 02  // @..Y9@.... .....
    96C0: 01 00 40 03 00 41 81 29 33 00 41 80 29 2D 02 40  // ..@..A.)3.A.)-.@
    96D0: 41 01 02 75 29 40 01 02 5A 39 40 01 05 00 00 21  // A..u)@..Z9@....!
    96E0: A8 01 00 01 02 01 00 40 01 05 00 00 1F A8 01 00  // .......@........
    96F0: 01 00 73 29 01 00 03 00 41 E3 0D 33 05 41 01 00  // ..s)....A..3.A..
    9700: 00 00 1B 05 41 0B 01 02 06 00 41 0D 25 1F 0E 03  // ....A.....A.%...
    9710: 0D 25 22 0C 02 0D 05 53 00 00 02 00 00 5B 4B 00  // .%"....S.....[K.
    9720: 01 01 00 00 37 00 00 42 21 00 63 00 1F 00 63 01  // ....7..B!.c...c.
    9730: 39 00 63 03 3F 00 63 02 45 00 5A 5A 5B 03 05 40  // 9.c.?.c.E.ZZ[..@
    9740: 00 00 05 04 2D 19 40 00 15 05 40 02 01 02 0C 00  // ....-.@...@.....
    9750: 40 02 00 00 0D 00 5B 02 00 00 E3 0D 5B 02 00 00  // @.....[.....[...
    9760: E7 0D 5B 02 00 00 E8 0D 5B 00 54 00 01 02 00 00  // ..[.....[.T.....
    9770: 37 00 00 01 05 00 00 9B 62 01 00 54 00 01 00 01  // 7.......b..T....
    9780: 05 00 00 93 62 01 00 01 01 01 00 01 56 00 41 03  // ....b.......V.A.
    9790: 09 41 00 01 05 00 00 83 62 01 00 01 02 01 00 41  // .A......b......A
    97A0: 01 05 00 00 9B 62 01 00 3C 25 01 00 00 44 36 00  // .....b..<%...D6.
    97B0: 01 05 00 00 93 62 01 00 02 00 01 01 00 5B 52 00  // .....b.......[R.
    97C0: 02 01 08 08 37 00 00 3D 25 00 00 44 14 00 55 38  // ....7..=%..D..U8
    97D0: 00 5B 01 05 00 00 61 60 01 00 3C E5 01 00 FF 44  // .[....a`..<....D
    97E0: 10 00 4A E5 01 00 80 44 24 00 01 05 00 00 62 60  // ..J....D$.....b`
    97F0: 01 00 01 01 01 00 01 56 00 40 03 A9 40 00 01 05  // .......V.@..@...
    9800: 00 00 61 60 01 00 01 02 01 00 40 02 E5 00 01 5B  // ..a`......@....[
    9810: 7B 00 02 01 00 00 37 00 00 3D 65 00 01 44 7A 00  // {.....7..=e..Dz.
    9820: 56 00 40 03 21 40 00 21 25 40 DC 03 0A 48 40 01  // V.@.!@.!%@...H@.
    9830: 05 B6 3A 00 01 00 00 5C 05 2D 3B CF FF CF FF 20  // ..:....\.-;.... 
    9840: 00 10 00 5C 05 40 3B CF FF FF FF 20 00 00 00 01  // ...\.@;.... ....
    9850: 05 B7 3A 00 00 00 04 56 00 40 03 21 40 00 21 25  // ..:....V.@.!@.!%
    9860: 40 80 03 0A 48 40 5C 05 01 50 FF FC FF FF 00 03  // @...H@\..P......
    9870: 00 00 56 00 40 03 21 40 00 15 05 40 19 5C 02 50  // ..V.@.!@...@.\.P
    9880: 50 FF FF FF F1 40 3A 00 00 5B 5B 00 CA 00 02 01  // P....@:..[[.....
    9890: 04 04 37 00 00 66 0C 03 0C 41 00 00 2D 0A 41 42  // ..7..f...A..-.AB
    98A0: 2D 0D 42 04 00 3D 24 00 06 00 44 31 00 2D 0D 42  // -.B..=$...D1.-.B
    98B0: 08 00 3E 0A 42 41 45 19 00 55 20 00 5B 56 00 43  // ..>.BAE..U .[V.C
    98C0: 03 24 43 05 00 03 04 46 00 00 33 05 46 01 00 00  // .$C....F..3.F...
    98D0: 00 01 02 00 00 46 03 00 00 01 00 0D 02 01 00 44  // .....F.........D
    98E0: 2D 05 46 02 00 00 00 01 02 00 00 46 03 24 43 04  // -.F........F.$C.
    98F0: 00 4B E5 00 01 49 AA 00 07 02 01 00 45 2D 05 46  // .K...I......E-.F
    9900: 01 00 00 00 01 02 00 00 46 4A 02 01 00 44 44 90  // ........FJ...DD.
    9910: 00 03 29 43 00 0E A2 00 44 43 98 00 03 29 43 00  // ..)C....DC...)C.
    9920: 08 A2 00 45 33 05 46 03 00 00 00 01 02 00 00 46  // ...E3.F........F
    9930: 01 02 01 00 00 5B 0D 02 01 00 44 01 04 00 00 00  // .....[....D.....
    9940: 00 3D A5 00 01 44 C4 00 07 02 01 00 45 43 C9 00  // .=...D......EC..
    9950: 0D 02 01 00 44 5B DB 03 01 07 10 08 37 00 00 3D  // ....D[......7..=
    9960: 25 01 FF 44 BD 03 3D 25 01 18 46 B9 03 3D 25 01  // %..D..=%..F..=%.
    9970: 02 47 B9 03 3D 25 01 14 45 BD 03 3D 05 00 00 00  // .G..=%..E..=....
    9980: 00 00 44 0B 02 66 1B 56 00 02 3D A5 01 02 49 41  // ..D..f.V..=...IA
    9990: 00 56 08 40 43 53 00 3D A5 01 03 49 4E 00 56 08  // .V.@CS.=...IN.V.
    99A0: 40 43 53 00 03 0C 40 18 00 3E 0D 40 00 00 44 62  // @CS...@..>.@..Db
    99B0: 00 03 0A 02 40 43 66 00 0E E5 01 80 4B E5 01 02  // ....@Cf.....K...
    99C0: 49 74 00 02 A9 02 02 55 28 02 03 01 00 00 03 05  // It.....U(.......
    99D0: 46 C0 5D 00 00 3D A5 01 00 44 9B 00 03 05 46 80  // F.]..=...D....F.
    99E0: BB 00 00 3D 25 01 17 45 9B 00 03 05 46 C0 5D 00  // ...=%..E....F.].
    99F0: 00 5C A5 0F 5E F3 08 55 28 01 3E 05 00 40 4B 4C  // .\..^..U(.>..@KL
    9A00: 00 47 B5 00 1B 05 00 01 43 CA 00 2C 65 01 01 3E  // .G......C..,e..>
    9A10: 05 00 A0 25 26 00 48 CA 00 15 05 00 01 43 B5 00  // ...%&.H......C..
    9A20: 14 2D 01 04 4B E5 01 80 49 F9 00 21 05 02 80 00  // .-..K...I..!....
    9A30: 00 00 7C 02 40 00 7E 02 40 46 7C 05 40 10 00 00  // ..|.@.~.@F|.@...
    9A40: 00 7E 05 40 35 0C 00 00 03 02 02 40 43 FC 00 56  // .~.@5......@C..V
    9A50: 00 02 27 02 00 46 21 05 41 00 00 01 00 27 02 40  // ..'..F!.A....'.@
    9A60: 46 03 0A 42 40 3E 05 41 00 00 00 00 49 24 01 03  // F..B@>.A....I$..
    9A70: 0D 40 01 00 56 08 01 43 4E 01 03 02 40 46 03 02  // .@..V..CN...@F..
    9A80: 01 41 03 02 03 41 27 02 40 41 03 02 40 03 3E 05  // .A...A'.@A..@.>.
    9A90: 41 00 00 00 00 49 2C 01 27 02 01 03 03 0A 01 40  // A....I,.'......@
    9AA0: 27 02 46 03 03 0A 03 01 03 0A 01 40 03 8A 01 42  // '.F........@...B
    9AB0: 27 02 00 46 33 05 40 10 00 00 00 15 05 40 05 03  // '..F3.@......@..
    9AC0: 8A 03 40 66 FF 2D 0D 42 C7 03 56 00 40 03 21 40  // ..@f.-.B..V.@.!@
    9AD0: 01 33 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48  // .3%@..%@.-.B@..H
    9AE0: 00 00 4A 25 06 5E 04 44 31 02 56 00 40 4B E5 01  // ..J%.^.D1.V.@K..
    9AF0: 30 44 A9 01 4A 25 F1 5D 01 44 EA 01 43 B1 01 4A  // 0D..J%.].D..C..J
    9B00: 25 F1 5D 01 49 EA 01 03 00 40 0B 5E 09 0D 40 F0  // %.].I....@.^..@.
    9B10: FF 3E 1A 40 03 49 EA 01 3C 02 07 5E 01 49 EA 01  // .>.@.I..<..^.I..
    9B20: 3C 0A 0A 5E 03 49 EA 01 03 00 40 0C 5E 09 25 40  // <..^.I....@.^.%@
    9B30: 70 3E 29 40 01 49 EA 01 3C 02 08 5E 02 44 EE 01  // p>)@.I..<..^.D..
    9B40: 0E E5 01 01 3A 00 00 4B E5 01 01 44 91 03 4B E5  // ....:..K...D..K.
    9B50: 01 02 49 0B 02 3D 25 02 03 46 0B 02 55 28 02 52  // ..I..=%..F..U(.R
    9B60: 23 3A 00 00 02 01 03 02 02 05 02 00 00 03 04 02  // #:..............
    9B70: 21 02 01 32 25 02 14 52 4D 02 01 02 03 3D 05 00  // !..2%..RM....=..
    9B80: 00 00 00 00 44 B9 03 3D A5 01 00 44 5C 02 02 01  // ....D..=...D\...
    9B90: 03 02 02 05 02 00 0F 03 00 02 21 02 01 32 25 02  // ..........!..2%.
    9BA0: 14 4B E5 01 30 44 56 02 0E E5 02 01 52 4D 02 01  // .K..0DV.....RM..
    9BB0: 02 03 66 FF 2D 0D 42 C7 03 56 00 40 03 21 40 01  // ..f.-.B..V.@.!@.
    9BC0: 33 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48 00  // 3%@..%@.-.B@..H.
    9BD0: 00 03 05 40 00 00 38 00 3E 05 00 C0 C6 2D 00 47  // ...@..8.>....-.G
    9BE0: AE 02 5E A5 40 CF 20 3E 05 00 E0 67 35 00 47 AE  // ..^.@. >...g5.G.
    9BF0: 02 5E A5 40 CF 10 3E 05 00 00 09 3D 00 47 AE 02  // .^.@..>....=.G..
    9C00: 09 A5 40 CF 5C B2 0F 5E C3 40 03 05 40 00 00 0C  // ..@.\..^.@..@...
    9C10: 12 3D A5 01 00 49 D7 02 03 05 40 10 00 1C 24 3D  // .=...I....@...$=
    9C20: 25 01 17 45 D7 02 03 05 40 00 00 1C 24 5C 9A 10  // %..E....@...$\..
    9C30: 5E 03 00 40 5C 1A 0B 5E 0F 00 03 5C A2 0B 5E 8F  // ^..@\..^...\..^.
    9C40: 40 56 00 40 03 29 40 01 0F 25 40 01 4B E5 01 80  // @V.@.)@..%@.K...
    9C50: 49 01 03 0F 65 40 01 5C 0A 0C 5E 8B FE 40 07 8D  // I...e@.\..^..@..
    9C60: 0D 5E 0F E0 3E 8D 01 00 00 49 26 03 3E 0D 03 00  // .^..>....I&.>...
    9C70: 00 49 26 03 07 E5 0E 5E FE 43 2B 03 0D E5 0E 5E  // .I&....^.C+....^
    9C80: 01 4A E5 0E 5E 01 49 43 03 4A 65 0C 5E 01 49 43  // .J..^.IC.Je.^.IC
    9C90: 03 07 E5 0E 5E EF 43 48 03 0D E5 0E 5E 10 01 02  // ....^.CH....^...
    9CA0: 07 5E 01 01 02 08 5E 02 7C 05 02 00 EC 04 00 7E  // .^....^.|......~
    9CB0: 02 40 46 27 05 40 0A 00 00 00 01 02 09 5E 40 01  // .@F'.@.......^@.
    9CC0: 0A 0A 5E 03 3A 00 00 3D A5 01 00 44 B9 03 03 01  // ..^.:..=...D....
    9CD0: 00 02 02 05 02 00 01 03 04 02 21 02 01 32 25 02  // ..........!..2%.
    9CE0: 14 52 4D 02 02 02 00 3A 00 00 3D 25 02 03 46 B9  // .RM....:..=%..F.
    9CF0: 03 02 25 03 02 02 E1 03 02 02 61 03 01 02 B9 03  // ..%.......a.....
    9D00: 01 08 A5 03 04 0E B1 03 02 02 01 02 00 52 2E 3A  // .............R.:
    9D10: 00 00 5B 02 25 01 0B 43 91 03 7A 14 00 00 00 D8  // ..[.%..C..z.....
    9D20: 00 B0 01 88 02 60 03 00 00 00 01 00 02 00 03 00  // .....`..........
    9D30: 04 00 C6 04 02 01 04 04 37 00 00 42 29 00 63 07  // ........7..B).c.
    9D40: 1D 00 63 08 17 00 5A 5A 5B 0D 25 C8 39 02 5B 01  // ..c...ZZ[.%.9.[.
    9D50: 05 1F 35 FF FF FF FF 01 05 20 35 3F 00 00 00 01  // ..5...... 5?....
    9D60: 05 3B 01 30 02 12 00 01 05 30 01 80 BB 10 00 01  // .;.0.....0......
    9D70: 05 31 01 3C 00 01 08 01 05 34 01 00 00 00 00 01  // .1.<.....4......
    9D80: 05 3C 01 00 00 00 00 01 8D 83 38 30 00 01 25 82  // .<........80..%.
    9D90: 38 01 01 25 32 01 00 01 05 42 35 00 00 00 00 01  // 8..%2....B5.....
    9DA0: 05 40 35 00 00 00 00 01 05 46 35 00 00 00 00 01  // .@5......F5.....
    9DB0: 05 44 35 00 00 00 00 01 05 4A 35 00 00 00 00 01  // .D5......J5.....
    9DC0: 05 48 35 00 00 00 00 01 05 4E 35 00 00 00 00 01  // .H5......N5.....
    9DD0: 05 4C 35 00 00 00 00 01 05 61 35 00 00 00 00 01  // .L5......a5.....
    9DE0: 05 63 35 00 00 00 00 01 05 65 35 00 00 00 00 01  // .c5......e5.....
    9DF0: 05 72 35 01 00 00 00 01 05 DF 39 01 10 00 00 01  // .r5.......9.....
    9E00: 05 F4 39 01 00 02 00 07 05 F0 39 FF FF FF 7F 07  // ..9.......9.....
    9E10: 05 EF 39 9F FF FF FF 54 20 6D 91 01 05 B3 3A 01  // ..9....T m....:.
    9E20: 00 00 00 01 05 8F 3B 11 00 00 00 01 05 6B 3C 21  // ......;......k<!
    9E30: 00 00 00 01 05 47 3D 31 00 00 00 55 00 01 20 0D  // .....G=1...U.. .
    9E40: 01 DC 00 03 0A 48 40 01 05 B1 3A 00 1B 5D 05 01  // .....H@...:..]..
    9E50: 05 06 3B 35 00 13 00 01 05 07 3B 36 11 00 00 01  // ..;5......;6....
    9E60: 05 08 3B 41 E6 01 00 01 05 09 3B 00 00 00 00 01  // ..;A......;.....
    9E70: 05 0A 3B 00 00 08 2C 01 05 0C 3B 02 04 00 00 01  // ..;...,...;.....
    9E80: 05 1F 3B 5E 4E 01 00 01 05 0A 3B 00 00 08 2C 01  // ..;^N.....;...,.
    9E90: 05 0D 3B A4 01 00 00 01 05 0F 3B A4 01 00 00 01  // ..;.......;.....
    9EA0: 05 14 3B 00 02 00 00 01 05 15 3B 49 D2 00 00 01  // ..;.......;I....
    9EB0: 05 18 3B 20 00 00 00 01 05 19 3B 24 0D 00 00 01  // ..; ......;$....
    9EC0: 05 1C 3B 00 00 00 00 01 05 1D 3B 00 00 00 00 01  // ..;.......;.....
    9ED0: 05 ED 3A 00 00 92 06 01 05 EE 3A AA 08 00 E0 2C  // ..:.......:....,
    9EE0: 05 01 01 00 00 00 3D 0D 01 04 00 45 0C 01 56 08  // ......=....E..V.
    9EF0: 48 01 05 C9 39 FE 01 00 00 01 05 CB 39 BA 04 00  // H...9.......9...
    9F00: 00 01 05 CC 39 24 04 00 00 01 05 CD 39 A2 08 00  // ....9$......9...
    9F10: 00 01 05 CE 39 FE 01 00 00 01 05 D0 39 BA 04 00  // ....9.......9...
    9F20: 00 01 05 D1 39 24 04 00 00 01 05 D2 39 A2 08 00  // ....9$......9...
    9F30: 00 01 05 D3 39 FE 01 00 00 01 05 D5 39 BA 04 00  // ....9.......9...
    9F40: 00 01 05 D6 39 24 04 00 00 01 05 D7 39 A2 08 00  // ....9$......9...
    9F50: 00 01 05 D8 39 FE 01 00 00 01 05 DA 39 BA 04 00  // ....9.......9...
    9F60: 00 01 05 DB 39 24 04 00 00 01 05 DC 39 A2 08 00  // ....9$......9...
    9F70: 00 0D 25 C8 39 02 55 00 01 66 FF 2D 0D 42 BE 04  // ..%.9.U..f.-.B..
    9F80: 03 0C 48 00 00 0D 25 DA 41 01 20 0D 01 1B 00 03  // ..H...%.A. .....
    9F90: 0A 48 40 01 21 33 47 01 01 21 31 47 01 01 21 32  // .H@.!3G..!1G..!2
    9FA0: 47 01 20 0D 01 04 00 03 0A 48 40 01 21 45 48 01  // G. ......H@.!EH.
    9FB0: 20 0D 01 10 00 03 0A 48 40 03 0D 40 00 F0 0F 61  //  ......H@..@...a
    9FC0: 40 01 01 6A 8B 4F 40 2C 0D 01 01 00 2D 0D 42 02  // @..j.O@,....-.B.
    9FD0: 00 3D 25 01 04 45 4E 02 56 08 48 55 00 01 52 17  // .=%..EN.V.HU..R.
    9FE0: 2C 25 01 01 3D 25 01 04 45 AC 02 02 05 01 01 02  // ,%..=%..E.......
    9FF0: 00 00 52 29 56 00 46 66 08 03 0C 46 0C 00 26 05  // ..R)V.Ff...F..&.
    A000: 01 40 0D 03 00 21 02 40 46 32 02 01 40 01 01 42  // .@...!.@F2..@..B
    A010: 01 01 01 01 46 01 01 01 01 4A 01 01 01 01 4E 01  // ....F....J....N.
    A020: 01 55 00 01 52 4E 5C 05 63 53 FF FF FF 00 00 00  // .U..RN\.cS......
    A030: 00 30 5C 05 65 53 FF FF FF 00 00 00 00 30 5C 05  // .0\.eS.......0\.
    A040: 67 53 FF FF FF 00 00 00 00 30 5C 05 69 53 FF FF  // gS.......0\.iS..
    A050: FF 00 00 00 00 30 5C 05 6B 53 FF FF FF 00 00 00  // .....0\.kS......
    A060: 00 30 01 05 DD 5D AA F2 01 00 01 05 31 55 11 00  // .0...]......1U..
    A070: 01 00 01 05 31 56 11 00 01 00 01 05 31 57 11 00  // ....1V......1W..
    A080: 01 00 01 05 31 58 11 00 01 00 01 05 31 59 11 00  // ....1X......1Y..
    A090: 01 00 01 05 9A 55 01 00 00 00 01 05 9A 56 01 00  // .....U.......V..
    A0A0: 00 00 01 05 9A 57 01 00 00 00 01 05 9A 58 01 00  // .....W.......X..
    A0B0: 00 00 01 05 9A 59 01 00 00 00 02 25 01 07 52 33  // .....Y.....%..R3
    A0C0: 02 05 01 00 07 00 00 55 00 02 52 4D 2C 25 01 01  // .......U..RM,%..
    A0D0: 3D 25 01 05 45 98 03 66 16 03 A4 00 06 00 2D 0D  // =%..E..f......-.
    A0E0: 42 08 00 03 0A 00 42 3E A5 00 00 44 23 04 03 0A  // B.....B>...D#...
    A0F0: 42 00 03 0C 40 04 00 3E 0D 40 20 22 44 D5 03 3E  // B...@..>.@ "D..>
    A100: 0D 40 21 21 49 17 04 03 0C 40 08 00 66 16 2D 0A  // .@!!I....@..f.-.
    A110: 42 40 03 24 40 00 00 3E 25 40 FF 44 17 04 3E 25  // B@.$@..>%@.D..>%
    A120: 40 14 49 0F 04 03 04 40 02 00 4C 05 40 00 01 00  // @.I....@..L.@...
    A130: 00 44 17 04 01 A5 7F 60 01 01 A5 57 61 01 43 23  // .D.....`...Wa.C#
    A140: 04 2D 0C 42 01 00 43 E0 03 2D 0D 00 10 00 33 A5  // .-.B..C..-....3.
    A150: 00 01 43 B5 03 66 16 03 0C 41 04 00 4C 0D 41 02  // ..C..f...A..L.A.
    A160: 00 44 37 04 0D A5 4C 00 02 01 05 00 00 2C A8 01  // .D7...L......,..
    A170: 00 01 00 53 39 01 00 01 05 00 00 2D A8 01 00 01  // ...S9......-....
    A180: 00 54 39 01 00 01 05 00 00 17 A8 01 00 01 00 55  // .T9............U
    A190: 39 01 00 01 05 00 00 31 A8 01 00 01 00 F7 3A 01  // 9......1......:.
    A1A0: 00 01 05 00 00 32 A8 01 00 01 00 F8 3A 01 00 01  // .....2......:...
    A1B0: 05 00 00 20 A8 01 00 01 00 59 39 01 00 01 05 00  // ... .....Y9.....
    A1C0: 00 21 A8 01 00 01 00 5A 39 01 00 02 00 01 53 39  // .!.....Z9.....S9
    A1D0: 03 01 41 01 15 05 41 18 01 02 C4 00 41 03 01 41  // ..A...A.....A..A
    A1E0: 01 1B 05 41 08 01 02 C9 00 41 52 4B 5B 7A 08 00  // ...A.....ARK[z..
    A1F0: 00 00 6B 01 D6 02 41 04 AC 00 02 01 00 04 66 FF  // ..k...A.......f.
    A200: 56 08 47 2D 0D 42 74 00 03 21 47 00 09 25 47 F0  // V.G-.Bt..!G..%G.
    A210: 42 22 47 63 00 5B 00 63 60 56 00 63 20 36 00 63  // B"Gc.[.c`V.c 6.c
    A220: 90 4E 00 63 A0 3E 00 63 B0 46 00 5A 5A 5B 2D 0D  // .N.c.>.c.F.ZZ[-.
    A230: 42 26 00 43 5B 00 2D 0D 42 1E 00 43 5B 00 2D 0D  // B&.C[.-.B..C[.-.
    A240: 42 30 00 43 5B 00 2D 0D 42 16 00 43 5B 00 2D 0D  // B0.C[.-.B..C[.-.
    A250: 42 0C 00 03 21 47 00 09 25 47 07 2D 0A 42 47 2D  // B...!G..%G.-.BG-
    A260: 0A 42 47 03 0C 48 00 00 5B 7A AC 00 00 00 80 00  // .BG..H..[z......
    A270: 00 01 80 01 00 02 80 02 00 00 00 01 00 02 00 03  // ................
    A280: 00 04 00 00 DC 00 B8 01 94 02 00 00 6B 01 D6 02  // ............k...
    A290: 41 04 00 00 D8 00 B0 01 88 02 60 03 00 00 5A 00  // A.........`...Z.
    A2A0: B4 00 0E 01 72 00 01 01 00 00 37 00 00 56 00 40  // ....r.....7..V.@
    A2B0: 03 21 40 00 21 0D 40 6B 01 03 02 48 40 01 25 AC  // .!@.!.@k...H@.%.
    A2C0: 41 01 3D 65 00 02 49 4C 00 01 0D BD 41 01 00 54  // A.=e..IL....A..T
    A2D0: 00 BB 41 0D 25 AE 41 01 01 05 AD 41 11 00 00 00  // ..A.%.A....A....
    A2E0: 07 A5 AC 41 FE 01 05 AF 41 11 01 11 01 43 6E 00  // ...A....A....Cn.
    A2F0: 01 05 B1 41 00 00 00 01 01 05 B5 41 00 00 00 01  // ...A.......A....
    A300: 01 05 AF 41 11 01 11 01 54 00 AD 41 01 0D BD 41  // ...A....T..A...A
    A310: 00 01 3A 00 00 5B 73 00 01 01 00 00 37 00 00 52  // ..:..[s.....7..R
    A320: 14 03 00 41 C0 41 33 1A 41 41 03 8A 40 41 03 00  // ...A.A3.AA..@A..
    A330: 41 C1 41 33 1A 41 41 03 0A 40 41 3E 05 40 00 00  // A.A3.AA..@A>.@..
    A340: 00 00 49 36 00 03 05 40 70 08 00 0F 0E 25 00 B0  // ..I6...@p....%..
    A350: 52 14 3D 65 00 00 44 6D 00 01 02 16 4D 40 01 05  // R.=e..Dm....M@..
    A360: 17 4D 00 00 00 00 01 05 18 4D 00 00 00 00 01 05  // .M.......M......
    A370: 19 4D 00 00 00 00 5C 05 14 4D 8F FF 0F FF 31 00  // .M....\..M....1.
    A380: 00 00 5B 07 25 14 4D FE 5B 00 43 00 01 01 00 00  // ..[.%.M.[.C.....
    A390: 37 00 00 52 14 3D 65 00 01 44 3A 00 0D 65 01 50  // 7..R.=e..D:..e.P
    A3A0: 03 54 20 01 50 4A A5 01 50 01 49 1B 00 54 20 0F  // .T .PJ..P.I..T .
    A3B0: 50 56 00 40 20 25 00 01 03 0A 48 40 07 E5 E8 39  // PV.@ %....H@...9
    A3C0: 7F 43 3F 00 0D 25 01 50 01 3A 00 00 5B 00 CF 00  // .C?..%.P.:..[...
    A3D0: 02 01 00 00 37 00 00 42 29 00 63 00 1B 00 63 01  // ....7..B).c...c.
    A3E0: 1B 00 63 02 AA 00 5A 5A 5B 66 FF 56 08 40 2D 0D  // ..c...ZZ[f.V.@-.
    A3F0: 42 C3 00 03 21 40 00 15 25 40 01 2D 0A 42 40 03  // B...!@..%@.-.B@.
    A400: 0C 48 00 00 3D 65 00 00 44 72 00 0D 25 CC 00 01  // .H..=e..Dr..%...
    A410: 3A 00 00 01 8D C0 00 00 02 51 02 01 05 C6 00 00  // :........Q......
    A420: 00 10 00 01 05 C8 00 00 00 50 00 01 0D C3 00 02  // .........P......
    A430: 00 54 20 CA 00 01 05 C2 00 00 01 00 00 43 1A 00  // .T ..........C..
    A440: 07 25 CC 00 FE 3A 00 00 0D 25 CA 00 01 01 25 C2  // .%...:...%....%.
    A450: 00 01 07 A5 C1 00 FE 0D 25 D5 00 01 0D 65 D5 00  // ........%....e..
    A460: 01 4A 65 D5 00 01 44 93 00 54 08 D5 00 54 00 C6  // .Je...D..T...T..
    A470: 00 54 00 C8 00 43 1A 00 5C 65 D4 00 FC 02 01 A1  // .T...C..\e......
    A480: C0 00 00 2B A5 C0 00 01 0D A5 C1 00 01 5B 7A 0C  // ...+.........[z.
    A490: 00 00 00 02 00 2C 00 2D 00 2E 00 2F 00 00 BD 01  // .....,.-.../....
    A4A0: 03 01 04 00 37 00 00 66 08 03 05 46 C0 12 00 00  // ....7..f...F....
    A4B0: 3D A5 00 02 49 1E 00 02 02 00 46 5B 03 05 40 0C  // =...I.....F[..@.
    A4C0: 00 00 00 21 21 40 00 66 FF 2D 0D 42 81 01 2D 0A  // ...!!@.f.-.B..-.
    A4D0: 42 40 03 04 40 00 00 03 04 41 04 00 03 04 00 08  // B@..@....A......
    A4E0: 00 01 02 00 00 40 03 88 40 01 00 03 18 40 01 00  // .....@..@....@..
    A4F0: 09 8D 40 FF 01 3E 8D 40 00 00 49 99 00 01 02 00  // ..@..>.@..I.....
    A500: 00 41 03 00 40 01 00 09 05 40 FF 01 00 00 3E 0D  // .A..@....@....>.
    A510: 40 00 00 49 82 00 03 05 46 00 71 02 00 43 BC 00  // @..I....F.q..C..
    A520: 21 02 40 46 03 00 41 01 00 09 05 41 00 1E 00 00  // !.@F..A....A....
    A530: 1B 05 41 09 43 B4 00 7C 02 40 46 7E 05 40 00 00  // ..A.C..|.@F~.@..
    A540: 01 00 03 00 41 01 00 09 05 41 00 F0 00 00 1B 05  // ....A....A......
    A550: 41 0C 75 02 40 41 03 02 46 40 3D A5 00 01 49 C8  // A.u.@A..F@=...I.
    A560: 00 02 02 00 46 5B 3D E5 00 00 49 0B 01 56 00 40  // ....F[=...I..V.@
    A570: 03 29 40 00 21 0D 40 0A 00 03 02 41 00 2D 02 40  // .)@.!.@....A.-.@
    A580: 41 01 02 00 00 40 03 00 41 01 00 09 05 41 00 00  // A....@..A....A..
    A590: F0 07 1B 05 41 14 02 E2 00 41 3D E5 00 00 49 0B  // ....A....A=...I.
    A5A0: 01 02 05 00 00 46 C3 23 5B 56 00 40 03 39 40 00  // .....F.#[V.@.9@.
    A5B0: 55 38 00 66 FF 2D 0D 42 59 01 3E 0C 40 02 00 47  // U8.f.-.BY.>.@..G
    A5C0: 2C 01 2D 0D 42 08 00 43 1C 01 33 0C 40 04 00 21  // ,.-.B..C..3.@..!
    A5D0: 0C 40 06 00 2D 0C 40 00 00 03 09 42 00 55 00 00  // .@..-.@....B.U..
    A5E0: 02 0A 00 40 7C 05 46 40 42 0F 00 7E 01 40 00 02  // ...@|.F@B..~.@..
    A5F0: 02 00 40 5B 7A 64 00 FF FF 07 00 00 00 00 00 C8  // ..@[zd..........
    A600: 00 3F 00 08 00 19 00 40 06 5F 00 40 00 32 00 80  // .?.....@._.@.2..
    A610: 0C 7E 00 60 00 64 00 00 32 7F 00 7F 00 64 00 16  // .~.`.d..2....d..
    A620: 6C 01 00 00 6C 01 00 51 6C 01 00 0F 6E 01 00 00  // l...l..Ql...n...
    A630: 6E 01 00 4A 6E 01 00 0C 7E 01 00 00 7E 01 00 47  // n..Jn...~...~..G
    A640: 7E 01 00 0C 70 01 00 00 70 01 00 47 70 01 00 0C  // ~...p...p..Gp...
    A650: 72 01 00 00 72 01 00 47 72 01 00 00 BF 00 02 03  // r...r..Gr.......
    A660: 04 00 37 00 00 56 00 46 56 00 00 03 21 00 00 55  // ..7..V.FV...!..U
    A670: 20 00 3D 65 00 03 44 2C 00 3D 65 00 0B 46 B4 00  //  .=e..D,.=e..F..
    A680: 02 29 00 00 32 25 00 08 0E 25 00 60 52 14 5C 22  // .)..2%...%.`R.\"
    A690: 28 55 F8 00 02 22 00 00 03 0D 41 01 00 66 FF 2D  // (U..."....A..f.-
    A6A0: 0D 42 BB 00 2D 0A 42 41 03 24 00 00 00 3D E2 00  // .B..-.BA.$...=..
    A6B0: 00 48 A0 00 3E 25 00 04 44 6F 00 03 22 46 00 33  // .H..>%..Do.."F.3
    A6C0: 25 46 01 15 25 46 04 0F 25 46 01 33 39 00 00 3E  // %F..%F..%F.39..>
    A6D0: 25 00 01 44 8C 00 3E 25 00 02 44 85 00 03 25 46  // %..D..>%..D...%F
    A6E0: 21 03 65 00 2F 43 90 00 03 65 00 13 03 79 46 00  // !.e./C...e...yF.
    A6F0: 33 65 46 01 15 2D 46 03 0F 65 46 01 52 14 01 02  // 3eF..-F..eF.R...
    A700: 01 4D 46 01 52 00 4D 00 54 00 05 4D 54 00 FF 4C  // .MF.R.M.T..MT..L
    A710: 3A 00 00 5B 7A 04 00 03 02 01 04 00 CB 00 01 01  // :..[z...........
    A720: 00 00 37 00 00 3D 65 00 01 44 61 00 56 00 40 20  // ..7..=e..Da.V.@ 
    A730: 25 00 10 03 0A 48 40 07 25 8F 4F FD 4A 25 8F 4F  // %....H@.%.O.J%.O
    A740: 04 49 20 00 52 14 07 25 46 50 FE 4A 65 46 50 01  // .I .R..%FP.JeFP.
    A750: 49 2F 00 03 21 40 00 21 0D 40 DC 00 03 0A 48 40  // I/..!@.!.@....H@
    A760: 07 25 B4 3A FE 56 00 40 03 21 40 00 21 0D 40 6B  // .%.:.V.@.!@.!.@k
    A770: 01 03 0A 48 40 07 25 85 41 EF 43 C7 00 56 00 40  // ...H@.%.A.C..V.@
    A780: 20 25 00 10 03 0A 48 40 0D 25 8F 4F 02 4A 25 8F  //  %....H@.%.O.J%.
    A790: 4F 04 44 71 00 52 14 0D 25 46 50 01 4A 65 46 50  // O.Dq.R..%FP.JeFP
    A7A0: 01 44 80 00 56 00 40 03 21 40 00 21 0D 40 DC 00  // .D..V.@.!@.!.@..
    A7B0: 03 0A 48 40 0D 25 B4 3A 01 56 00 40 03 21 40 00  // ..H@.%.:.V.@.!@.
    A7C0: 21 0D 40 6B 01 03 0A 48 40 0D 25 85 41 10 56 00  // !.@k...H@.%.A.V.
    A7D0: 40 03 21 40 00 21 0D 40 5A 00 03 0A 48 40 0D 25  // @.!@.!.@Z...H@.%
    A7E0: 4C 4D 01 3A 00 00 5B 00 5E 01 01 04 04 08 37 00  // LM.:..[.^.....7.
    A7F0: 00 3D 65 02 01 49 27 01 4B A5 02 03 49 2A 00 52  // .=e..I'.K...I*.R
    A800: 25 02 05 00 00 00 00 00 02 05 01 00 05 02 00 43  // %..............C
    A810: 2F 00 55 28 02 52 25 03 38 00 C4 00 03 48 00 C9  // /.U(.R%.8....H..
    A820: 00 0E 25 02 90 52 14 08 25 02 07 0D 05 B4 3A 11  // ..%..R..%.....:.
    A830: 11 01 00 5C 25 B3 3A 0B 01 03 21 41 02 15 25 41  // ...\%.:...!A..%A
    A840: 04 0D 22 B3 3A 41 0D 65 B6 3A 01 5C 25 DB 3A FD  // ..".:A.e.:.\%.:.
    A850: 01 03 02 41 00 1B 05 41 08 01 0A CB 3A 41 01 0A  // ...A...A....:A..
    A860: CF 3A 41 15 05 00 18 01 02 CA 3A 00 01 02 CE 3A  // .:A.......:....:
    A870: 00 4B A5 02 03 49 A0 00 2B 05 CA 3A 00 00 10 00  // .K...I..+..:....
    A880: 2B 05 CE 3A 00 00 50 00 01 0D A7 3A 80 00 01 0D  // +..:..P....:....
    A890: B1 3A 00 03 01 0D 0C 3B 01 03 01 05 0A 3B 00 00  // .:.....;.....;..
    A8A0: 08 28 01 05 0B 3B 00 00 08 00 01 E5 EF 3A 08 01  // .(...;.......:..
    A8B0: E5 EE 3A E0 54 00 A9 3A 01 19 AA 3A 00 01 89 AA  // ..:.T..:...:....
    A8C0: 3A 00 01 19 AE 3A 00 01 89 AE 3A 00 07 0D A5 3A  // :....:....:....:
    A8D0: FF F8 66 FF 2D 0D 42 4F 01 03 0C 40 00 00 3E 0D  // ..f.-.BO...@..>.
    A8E0: 40 FF FF 44 0E 01 3D 8C 01 00 00 44 0E 01 2D 0D  // @..D..=....D..-.
    A8F0: 42 03 00 43 F1 00 01 24 A5 3A 02 00 01 09 C7 3A  // B..C...$.:.....:
    A900: 01 07 25 B3 3A FE 07 25 DB 3A FE 3A 00 00 5B 0E  // ..%.:..%.:.:..[.
    A910: 25 02 90 52 14 3D 65 02 00 49 3C 01 0D 25 B3 3A  // %..R.=e..I<..%.:
    A920: 01 43 48 01 3D 65 02 10 44 48 01 01 09 C7 3A 01  // .CH.=e..DH....:.
    A930: 3A 00 00 5B 7A 0F 00 01 00 01 01 01 03 01 05 02  // :..[z...........
    A940: 02 00 08 FF FF 08 42 00 01 01 00 00 37 00 00 52  // ......B.....7..R
    A950: 14 3D 65 00 01 44 21 00 54 20 4B 50 4A 65 4B 50  // .=e..D!.T KPJeKP
    A960: 01 49 16 00 43 3E 00 5C 4D 1B 50 FE FF 00 01 4A  // .I..C>.\M.P....J
    A970: A5 01 50 01 44 3E 00 0D 25 4B 50 01 4A 65 4B 50  // ..P.D>..%KP.JeKP
    A980: 01 44 36 00 3A 00 00 5B 13 00 01 03 00 00 37 00  // .D6.:..[......7.
    A990: 00 0E 25 00 A0 52 14 3A 00 00 5B 00 C6 01 01 01  // ..%..R.:..[.....
    A9A0: 00 18 56 00 40 03 21 40 05 21 0D 40 80 00 03 0A  // ..V.@.!@.!.@....
    A9B0: 48 40 37 00 00 01 0D 47 50 0D 00 3D 8D 01 0D 00  // H@7....GP..=....
    A9C0: 46 2C 00 01 19 47 50 01 01 8D 48 50 40 01 01 0D  // F,...GP...HP@...
    A9D0: 49 50 2C 01 03 09 41 00 2D 19 41 00 03 8A 41 41  // IP,...A.-.A...AA
    A9E0: 2D 8D 41 01 00 1B 1D 41 02 01 1A 48 50 41 33 0D  // -.A....A...HPA3.
    A9F0: 41 01 00 01 0A EA 4F 41 54 08 EC 4F 01 99 EC 4F  // A.....OAT..O...O
    AA00: 02 03 19 41 00 33 09 41 02 56 18 41 03 B1 41 04  // ...A.3.A.V.A..A.
    AA10: 33 1A 41 41 01 8A EB 4F 41 03 19 41 00 33 09 41  // 3.AA...OA..A.3.A
    AA20: 02 2D 1A 41 41 2D 09 41 00 4B 25 04 10 44 98 00  // .-.AA-.A.K%..D..
    AA30: 2D 09 41 00 01 0A EB 4F 41 03 21 41 04 09 25 41  // -.A....OA.!A..%A
    AA40: 02 1B 25 41 01 01 22 ED 4F 41 03 09 41 01 2D 19  // ..%A..".OA..A.-.
    AA50: 41 01 33 0D 41 01 00 01 0A EF 4F 41 54 08 F7 4F  // A.3.A.....OAT..O
    AA60: 01 99 F7 4F 03 03 19 41 01 33 09 41 03 56 18 41  // ...O...A.3.A.V.A
    AA70: 03 B9 41 04 33 1A 41 41 01 8A F6 4F 41 03 19 41  // ..A.3.AA...OA..A
    AA80: 01 33 09 41 03 2D 1A 41 41 2D 09 41 01 4B 25 04  // .3.A.-.AA-.A.K%.
    AA90: 20 44 FC 00 2D 09 41 01 01 0A F6 4F 41 03 21 41  //  D..-.A....OA.!A
    AAA0: 04 09 25 41 04 1B 25 41 02 01 22 F8 4F 41 3D 65  // ..%A..%A..".OA=e
    AAB0: 05 00 44 21 01 07 65 01 50 EF 43 26 01 0D 65 01  // ..D!..e.P.C&..e.
    AAC0: 50 10 03 00 46 EB 4F 02 00 02 F6 4F 56 00 40 03  // P...F.O....OV.@.
    AAD0: 21 40 05 21 0D 40 01 00 03 0A 48 40 56 00 40 03  // !@.!.@....H@V.@.
    AAE0: 09 40 02 3D 65 05 00 49 53 01 33 0D 40 02 00 15  // .@.=e..IS.3.@...
    AAF0: 05 40 10 56 00 41 3D 8D 02 0D 00 48 6B 01 03 0D  // .@.V.A=....Hk...
    AB00: 41 0D 00 33 19 41 02 0F 02 40 41 0F E5 40 80 01  // A..3.A...@A..@..
    AB10: 02 E8 39 40 56 00 40 03 21 40 05 21 0D 40 6B 01  // ..9@V.@.!@.!.@k.
    AB20: 03 0A 48 40 01 09 C3 41 00 01 89 C3 41 01 01 09  // ..H@...A....A...
    AB30: C4 41 00 01 89 C4 41 01 01 02 C0 41 46 01 01 C1  // .A....A....AF...
    AB40: 41 02 54 00 BE 41 01 31 BE 41 04 01 B1 BE 41 04  // A.T..A.1.A....A.
    AB50: 54 00 BF 41 01 39 BF 41 04 01 B9 BF 41 04 3A 00  // T..A.9.A....A.:.
    AB60: 00 5B 0A 00 02 03 08 00 37 00 00 5B CC 01 01 01  // .[......7..[....
    AB70: 00 00 37 00 00 56 00 41 03 39 41 01 09 25 41 0F  // ..7..V.A.9A..%A.
    AB80: 56 00 40 03 62 40 41 01 02 58 53 40 03 0A 46 42  // V.@.b@A..XS@..FB
    AB90: 66 FF 2D 0D 42 B8 01 15 25 41 02 2D 0A 42 41 03  // f.-.B...%A.-.BA.
    ABA0: 0C 48 00 00 07 05 90 5D 00 00 01 00 03 0C 48 02  // .H.....]......H.
    ABB0: 00 03 05 40 C0 5D 00 00 56 00 41 03 21 41 00 27  // ...@.]..V.A.!A.'
    ABC0: 02 40 41 15 05 40 10 03 25 40 02 01 02 62 53 40  // .@A..@..%@...bS@
    ABD0: 01 05 63 53 40 00 00 30 03 0A 42 46 56 08 48 0D  // ..cS@..0..BFV.H.
    ABE0: 25 5A 53 01 54 00 59 53 56 00 41 03 71 41 01 0F  // %ZS.T.YSV.A.qA..
    ABF0: E5 41 80 01 02 72 53 41 03 69 41 00 03 A5 41 01  // .A...rSA.iA...A.
    AC00: 01 02 72 53 41 4B 25 01 01 44 CD 00 03 71 41 00  // ..rSAK%..D...qA.
    AC10: 03 A5 41 02 01 02 72 53 41 03 79 41 00 03 A5 41  // ..A...rSA.yA...A
    AC20: 03 01 02 72 53 41 03 05 40 00 31 01 00 2D A9 40  // ...rSA..@.1..-.@
    AC30: 01 01 02 6E 53 40 43 00 01 03 71 41 01 0F 65 41  // ...nS@C...qA..eA
    AC40: 01 03 A5 41 02 01 02 72 53 41 03 05 40 00 11 01  // ...A...rSA..@...
    AC50: 00 01 02 6E 53 40 03 05 40 01 30 00 00 03 A9 40  // ...nS@..@.0....@
    AC60: 01 01 02 6F 53 40 5C A5 58 53 CF 10 0D 25 58 53  // ...oS@\.XS...%XS
    AC70: 01 02 65 00 02 56 00 40 03 29 40 01 2D 25 40 04  // ..e..V.@.)@.-%@.
    AC80: 21 05 40 C8 00 00 00 56 00 41 03 21 41 00 27 02  // !.@....V.A.!A.'.
    AC90: 40 41 03 0A 41 40 33 0D 41 01 00 3E 0D 41 00 00  // @A..A@3.A..>.A..
    ACA0: 44 A4 01 51 64 4A 25 5B 53 04 44 2A 01 4A 65 5B  // D..QdJ%[S.D*.Je[
    ACB0: 53 31 49 A4 01 02 65 00 01 4B 25 01 01 49 A4 01  // S1I...e..K%..I..
    ACC0: 01 05 72 53 01 00 03 80 3D 65 01 01 49 6B 01 02  // ..rS....=e..Ik..
    ACD0: A8 00 72 53 43 A4 01 56 00 41 03 19 41 00 56 00  // ..rSC..V.A..A.V.
    ACE0: 40 03 0A 40 41 3B 02 40 03 28 40 72 53 03 68 40  // @..@A;.@.(@rS.h@
    ACF0: 72 53 03 A8 40 72 53 03 E8 40 72 53 04 02 00 40  // rS..@rS..@rS...@
    AD00: 2D A5 41 04 2D 0D 41 04 00 3E A9 41 01 45 72 01  // -.A.-.A..>.A.Er.
    AD10: 0D 25 5A 53 02 01 25 58 53 02 51 01 54 00 58 53  // .%ZS..%XS.Q.T.XS
    AD20: 5B 7A 14 00 00 00 00 00 04 00 02 00 08 00 04 00  // [z..............
    AD30: 0C 00 06 00 10 00 08 00 46 00 02 02 00 04 37 00  // ........F.....7.
    AD40: 00 55 30 00 32 25 00 01 20 25 00 08 56 08 48 03  // .U0.2%.. %..V.H.
    AD50: 22 48 40 0D A5 D5 53 01 02 A0 00 D4 53 08 A5 00  // "H@...S.....S...
    AD60: 03 4A 25 D4 53 02 44 3C 00 5C 0D D5 53 FF FE 01  // .J%.S.D<.\..S...
    AD70: 00 43 42 00 0D 0D D5 53 01 01 3A 00 00 5B E7 00  // .CB....S..:..[..
    AD80: 01 08 08 00 03 01 00 00 02 05 00 01 00 01 00 52  // ...............R
    AD90: 29 20 05 00 64 00 00 00 03 02 46 40 02 02 00 00  // ) ..d.....F@....
    ADA0: 03 01 00 00 55 38 00 03 05 40 00 32 00 00 3D 05  // ....U8...@.2..=.
    ADB0: 00 00 00 00 00 44 64 00 03 02 40 46 27 01 40 00  // .....Dd...@F'.@.
    ADC0: 3E 05 40 9C 18 00 00 47 53 00 03 05 40 00 32 00  // >.@....GS...@.2.
    ADD0: 00 3E 05 40 C8 00 00 00 46 64 00 03 05 40 C8 00  // .>.@....Fd...@..
    ADE0: 00 00 66 FF 2D 0D 42 C7 00 3E 0C 40 02 00 47 7B  // ..f.-.B..>.@..G{
    ADF0: 00 2D 0D 42 08 00 43 6B 00 33 0C 40 00 00 03 0C  // .-.B..Ck.3.@....
    AE00: 01 06 00 3E 0D 01 19 00 49 9A 00 27 0D 40 32 00  // ...>....I..'.@2.
    AE10: 21 0D 40 02 00 43 9F 00 27 0C 40 06 00 2D 0C 40  // !.@..C..'.@..-.@
    AE20: 04 00 02 E2 00 40 33 0C 40 04 00 21 0C 40 06 00  // .....@3.@..!.@..
    AE30: 2D 0C 40 00 00 27 02 46 40 02 0A 00 40 02 B2 00  // -.@..'.F@...@...
    AE40: 40 5B 7A 20 00 C8 00 40 06 08 00 19 00 40 06 80  // @[z ...@.....@..
    AE50: 0C 40 00 32 00 80 0C 38 18 60 00 64 00 00 32 00  // .@.2...8.`.d..2.
    AE60: 32 7F 00 64 00 00 07 00 02 01 00 00 5B 00 14 03  // 2..d........[...
    AE70: 01 05 00 00 37 00 00 0E 25 00 60 52 14 08 25 00  // ....7...%.`R..%.
    AE80: 0F 42 29 00 63 0F 53 00 63 11 09 02 63 12 66 02  // .B).c.S.c...c.f.
    AE90: 63 01 CC 02 63 00 F5 02 63 08 D8 01 63 09 B9 01  // c...c...c...c...
    AEA0: 63 0A C0 01 63 13 C8 01 63 14 D0 01 63 0B E0 01  // c...c...c...c...
    AEB0: 63 0C BC 02 63 0D E8 01 63 10 01 02 5A 5A 43 B5  // c...c...c...ZZC.
    AEC0: 01 54 00 9A 55 01 0D 2B 55 1F 00 3D A5 00 00 44  // .T..U..+U..=...D
    AED0: 72 00 3D A5 00 02 44 A2 01 3D A5 00 05 49 A2 01  // r.=...D..=...I..
    AEE0: 54 00 C9 55 3D 25 02 00 49 81 00 02 25 02 02 32  // T..U=%..I...%..2
    AEF0: 25 02 01 01 E1 C9 55 02 4A 25 CC 55 01 49 B5 01  // %.....U.J%.U.I..
    AF00: 7B 05 01 00 80 00 00 7E 05 40 8C 0A 00 00 56 00  // {......~.@....V.
    AF10: 46 03 29 46 02 27 02 40 46 07 65 D0 55 FE 01 05  // F.)F.'.@F.e.U...
    AF20: D1 55 00 80 00 00 01 02 D2 55 40 0D E5 D3 55 10  // .U.......U@...U.
    AF30: 0D 65 28 55 04 51 01 07 65 28 55 FB 51 01 03 21  // .e(U.Q..e(U.Q..!
    AF40: 40 02 15 25 40 05 01 E2 CA 55 40 54 20 CE 55 02  // @..%@....U@T .U.
    AF50: A0 02 28 55 03 0A 46 48 08 A5 02 07 56 00 40 03  // ..(U..FH....V.@.
    AF60: 31 40 02 21 0D 40 80 00 03 8A 46 40 03 0A 48 40  // 1@.!.@....F@..H@
    AF70: 03 88 40 EA 4F 03 08 40 EF 4F 2D 05 40 01 00 01  // ..@.O..@.O-.@...
    AF80: 00 03 98 41 EB 4F 03 18 41 F6 4F 03 0A 48 46 01  // ...A.O..A.O..HF.
    AF90: 02 0C 56 40 01 02 0D 56 41 03 1A 48 46 03 00 40  // ..V@...VA..HF..@
    AFA0: EB 4F 33 1A 40 40 33 08 40 BE 41 33 08 40 BE 41  // .O3.@@3.@.A3.@.A
    AFB0: 03 00 41 F6 4F 33 1A 41 41 33 08 41 BF 41 33 08  // ..A.O3.AA3.A.A3.
    AFC0: 41 BF 41 03 0A 48 46 01 0A 0F 56 41 01 8A 0F 56  // A.A..HF...VA...V
    AFD0: 40 03 1A 48 46 03 00 40 EC 4F 33 8A 40 40 03 00  // @..HF..@.O3.@@..
    AFE0: 41 F7 4F 33 8A 41 41 4A 25 ED 4F 01 44 85 01 0F  // A.O3.AAJ%.O.D...
    AFF0: E5 40 80 4A 25 F8 4F 01 44 91 01 0F E5 41 80 03  // .@.J%.O.D....A..
    B000: 0A 48 46 01 1A 0E 56 41 01 9A 0E 56 40 43 B5 01  // .HF...VA...V@C..
    B010: 07 E5 28 55 2F 0D 65 28 55 04 51 01 07 65 28 55  // ..(U/.e(U.Q..e(U
    B020: FB 51 01 3A 00 00 5B 54 20 D8 55 43 B5 01 01 25  // .Q.:..[T .UC...%
    B030: D8 55 01 43 B5 01 01 25 D8 55 02 43 B5 01 01 25  // .U.C...%.U.C...%
    B040: D8 55 03 43 B5 01 07 25 C8 55 EF 43 B5 01 0D 25  // .U.C...%.U.C...%
    B050: C8 55 10 43 B5 01 0D 65 D0 55 01 51 0A 07 25 CD  // .U.C...e.U.Q..%.
    B060: 55 FE 51 0A 01 0D CC 55 01 02 51 C8 43 B5 01 0D  // U.Q....U..Q.C...
    B070: 25 DE 55 10 43 B5 01 01 69 6F 55 02 3D A5 00 03  // %.U.C...ioU.=...
    B080: 49 25 02 4A 25 35 55 10 49 25 02 01 A5 6F 55 02  // I%.J%5U.I%...oU.
    B090: 43 2A 02 01 B1 6F 55 00 3D 25 02 00 44 3F 02 32  // C*...oU.=%..D?.2
    B0A0: 25 02 01 14 25 02 04 5C E1 6F 55 8F 02 3D A5 00  // %...%..\.oU..=..
    B0B0: 05 44 4D 02 3D A5 00 00 49 5E 02 02 A5 00 00 03  // .DM.=...I^......
    B0C0: 39 40 00 33 25 40 01 01 22 CB 55 40 02 E0 02 70  // 9@.3%@..".U@...p
    B0D0: 55 43 B5 01 02 E0 02 70 55 4B E5 02 01 44 B5 01  // UC.....pUK...D..
    B0E0: 02 B0 00 6F 55 3D A5 00 00 44 8C 02 3D A5 00 05  // ...oU=...D..=...
    B0F0: 44 8C 02 02 E5 00 04 43 95 02 02 E0 00 CB 55 2C  // D......C......U,
    B100: E5 00 01 3D A5 00 02 44 A3 02 3D A5 00 03 49 AC  // ...=...D..=...I.
    B110: 02 54 00 70 55 50 02 43 B5 01 02 A5 00 00 03 31  // .T.pUP.C.......1
    B120: 43 00 4A 62 6F 55 44 44 B5 01 54 08 CC 55 51 C8  // C.JboUDD..T..UQ.
    B130: 0D 25 CD 55 01 51 32 43 B5 01 0D 25 70 55 01 3D  // .%.U.Q2C...%pU.=
    B140: A5 00 00 44 E1 02 01 0D A1 55 0F 01 43 B5 01 03  // ...D.....U..C...
    B150: 39 43 00 03 02 40 44 33 25 40 01 01 0A A1 55 40  // 9C...@D3%@....U@
    B160: 43 B5 01 54 00 A1 55 07 25 70 55 FE 07 0D 6F 55  // C..T..U.%pU...oU
    B170: FF 80 07 25 35 55 EF 54 20 C8 55 54 20 D8 55 43  // ...%5U.T .UT .UC
    B180: B5 01 0C 01 01 06 04 00 37 00 00 42 29 00 63 07  // ........7..B).c.
    B190: EA 00 63 01 25 00 63 00 C0 00 63 0B ED 00 63 04  // ..c.%.c...c...c.
    B1A0: F2 00 5A 5A 43 05 01 02 65 00 10 52 4D 3D 65 00  // ..ZZC...e..RM=e.
    B1B0: 00 44 E6 00 02 65 00 11 52 04 4B E5 02 01 49 E6  // .D...e..R.K...I.
    B1C0: 00 3D A5 00 00 49 57 00 03 01 00 00 02 65 00 0F  // .=...IW......e..
    B1D0: 55 38 00 52 4D 02 02 00 00 02 65 00 0A 55 08 02  // U8.RM.....e..U..
    B1E0: 52 4D 3D A5 00 00 49 70 00 02 65 00 0B 52 4D 43  // RM=...Ip..e..RMC
    B1F0: 79 00 02 65 00 0E 52 4D 43 AD 00 20 05 01 64 00  // y..e..RMC.. ..d.
    B200: 00 00 02 05 01 14 1E 00 02 2C 21 01 00 03 01 00  // .........,!.....
    B210: 00 02 02 00 40 52 0C 26 05 00 64 00 00 00 02 02  // ....@R.&..d.....
    B220: 01 40 02 02 00 00 02 65 00 01 55 08 02 52 4D 51  // .@.....e..U..RMQ
    B230: 05 02 65 00 01 52 04 51 0A 02 65 00 09 52 4D 43  // ..e..R.Q..e..RMC
    B240: E6 00 02 65 00 12 52 04 4B E5 02 01 44 E6 00 02  // ...e..R.K...D...
    B250: 65 00 08 52 4D 02 65 00 00 52 04 3D A5 00 00 49  // e..RM.e..R.=...I
    B260: E6 00 02 65 00 00 52 4D 3A 00 00 5B 43 E6 00 52  // ...e..RM:..[C..R
    B270: 4D 43 E6 00 66 06 02 29 00 00 02 68 00 4E 00 02  // MC..f..)...h.N..
    B280: 8C 00 20 00 52 33 5B 02 29 00 00 52 33 5B E3 0E  // .. .R3[.)..R3[..
    B290: 02 02 08 00 37 00 00 66 FF 2D 0D 42 D9 0E 56 00  // ....7..f.-.B..V.
    B2A0: 40 03 21 40 00 15 25 40 01 2D 0A 42 40 03 0C 48  // @.!@..%@.-.B@..H
    B2B0: 00 00 3D 65 00 10 49 6D 00 02 65 00 01 3D 25 00  // ..=e..Im..e..=%.
    B2C0: 03 45 D2 0E 4A A5 F7 5D 01 44 D2 0E 02 65 00 00  // .E..J..].D...e..
    B2D0: 4A A5 15 5E 02 49 D2 0E 0D 25 16 5E 01 07 05 15  // J..^.I...%.^....
    B2E0: 5E FF FF FB FF 3D E5 00 04 45 66 00 4A A5 15 5E  // ^....=...Ef.J..^
    B2F0: 01 44 D2 0E 02 65 00 01 43 D2 0E 3D 25 00 03 48  // .D...e..C..=%..H
    B300: 7E 00 03 05 00 01 01 01 01 43 BE 00 4A A5 F7 5D  // ~........C..J..]
    B310: 01 44 74 00 4A A5 15 5E 02 49 D2 0E 0D 25 16 5E  // .Dt.J..^.I...%.^
    B320: 01 07 05 15 5E FF FF FB FF 03 05 00 01 00 00 00  // ....^...........
    B330: 3D E5 00 01 44 BE 00 03 05 00 01 01 00 00 3D E5  // =...D.........=.
    B340: 00 02 44 BE 00 03 05 00 01 01 01 01 42 29 00 63  // ..D.........B).c
    B350: 07 E8 00 63 0A CB 06 63 01 A5 07 63 00 32 09 63  // ...c...c...c.2.c
    B360: 09 D4 0A 63 08 44 0C 63 0B 89 0D 63 0E A5 0C 63  // ...c.D.c...c...c
    B370: 0F 07 01 5A 5A 5B 01 05 FD 5D 00 00 00 00 01 05  // ...ZZ[...]......
    B380: EE 5D 00 40 00 00 5C 05 F0 5D FF FF 0F FE 00 00  // .].@..\..]......
    B390: D0 00 43 D2 0E 4A A5 F7 5D 01 49 D2 0E 4A 25 00  // ..C..J..].I..J%.
    B3A0: 5E 01 49 3B 01 3C 25 F7 5D 00 49 3B 01 3C 71 F7  // ^.I;.<%.].I;.<q.
    B3B0: 5D 00 49 3B 01 08 E5 00 01 03 00 40 F1 5D 09 25  // ].I;.......@.].%
    B3C0: 40 01 3E 39 40 00 44 D2 0E 54 20 F7 5D 07 4D F1  // @.>9@.D..T .].M.
    B3D0: 5D DF FE 4A 65 F1 5D 40 49 45 01 0D 05 03 5E 01  // ]..Je.]@IE....^.
    B3E0: 01 01 01 0D 25 00 5E 01 0D A5 00 5E 20 0D 25 00  // ....%.^....^ .%.
    B3F0: 5E 01 0D 05 03 5E 01 01 01 01 03 39 40 00 09 25  // ^....^.....9@..%
    B400: 40 01 5C 22 F1 5D FE 40 3D 25 00 03 48 8A 01 5C  // @.\".].@=%..H..\
    B410: 65 00 5E C1 02 43 90 01 5C 65 00 5E C1 00 0D 25  // e.^..C..\e.^...%
    B420: 02 5E 08 3D 65 00 07 49 A4 01 07 E5 00 5E 5F 43  // .^.=e..I.....^_C
    B430: A9 01 0D E5 00 5E A0 5C 05 06 5E BB BB FF FF 33  // .....^.\..^....3
    B440: 33 00 00 5C 05 03 5E F7 F7 F7 F7 02 02 02 02 66  // 3..\..^........f
    B450: 1E 2D 0D 42 0C 03 03 21 43 00 03 A2 46 44 4C A4  // .-.B...!C...FDL.
    B460: 46 00 00 44 F8 01 56 00 40 2D 0D 42 01 00 03 21  // F..D..V.@-.B...!
    B470: 40 00 2D 0A 42 40 03 24 40 00 00 03 62 40 40 03  // @.-.B@.$@...b@@.
    B480: 8A 40 40 43 17 02 66 07 2D 0C 42 0A 00 56 00 40  // .@@C..f.-.B..V.@
    B490: 20 25 00 0C 2D 0A 42 40 03 24 40 09 00 03 62 40  //  %..-.B@.$@...b@
    B4A0: 40 03 8A 40 40 5C 02 04 5E F8 F8 F8 F8 40 03 21  // @..@@\..^....@.!
    B4B0: 43 00 03 A2 46 44 3D A5 00 00 44 BB 02 03 05 40  // C...FD=...D....@
    B4C0: 04 00 00 00 66 1E 2D 0D 42 C4 00 3D A5 00 02 44  // ....f.-.B..=...D
    B4D0: 6A 02 2D 0D 42 0C 00 3D 05 01 30 75 00 00 47 6A  // j.-.B..=..0u..Gj
    B4E0: 02 3D 05 01 40 9C 00 00 46 65 02 2D 0D 42 28 02  // .=..@...Fe.-.B(.
    B4F0: 43 6A 02 2D 0D 42 0C 00 4C A4 46 05 00 44 8D 02  // Cj.-.B..L.F..D..
    B500: 03 04 40 00 00 3E 05 40 00 00 00 00 44 8D 02 03  // ..@..>.@....D...
    B510: 24 40 0A 00 09 25 40 1C 43 7C 03 66 07 2D 0C 42  // $@...%@.C|.f.-.B
    B520: 04 00 03 04 41 00 00 3E 05 41 00 00 00 00 44 7C  // ....A..>.A....D|
    B530: 03 4C A4 46 06 00 49 B3 02 2D 0D 42 0C 00 43 94  // .L.F..I..-.B..C.
    B540: 02 03 24 40 07 00 43 7C 03 03 05 40 05 00 00 00  // ..$@..C|...@....
    B550: 66 1E 2D 0D 42 C0 02 03 0C 46 02 00 4C A4 46 00  // f.-.B....F..L.F.
    B560: 00 49 1D 03 66 1E 2D 0D 42 E8 00 3D 05 01 48 3F  // .I..f.-.B..=..H?
    B570: 00 00 47 10 03 66 1E 2D 0D 42 50 02 3D 05 01 78  // ..G..f.-.BP.=..x
    B580: 69 00 00 47 10 03 66 1E 2D 0D 42 88 02 3D 05 01  // i..G..f.-.B..=..
    B590: F0 D2 00 00 47 10 03 66 1E 2D 0D 42 20 01 03 0C  // ....G..f.-.B ...
    B5A0: 46 02 00 4C A4 46 00 00 44 4C 03 2D 0D 42 06 00  // F..L.F..DL.-.B..
    B5B0: 56 20 41 3D A4 00 00 00 44 40 03 2D 25 41 01 3E  // V A=....D@.-%A.>
    B5C0: 25 41 0A 44 4C 03 2D 0D 42 05 00 43 25 03 03 24  // %A.DL.-.B..C%..$
    B5D0: 40 04 00 09 25 40 1C 43 7C 03 66 07 2D 0C 42 08  // @...%@.C|.f.-.B.
    B5E0: 00 03 04 41 00 00 3E 05 41 00 00 00 00 44 7C 03  // ...A..>.A....D|.
    B5F0: 4C A4 46 04 00 49 72 03 2D 0D 42 44 00 43 53 03  // L.F..Ir.-.BD.CS.
    B600: 2D 0D 42 08 00 03 24 40 05 00 15 05 40 1A 5C 02  // -.B...$@....@.\.
    B610: 12 5E FF FF FF E3 40 07 65 00 5E FE 3D A5 00 00  // .^....@.e.^.=...
    B620: 49 4A 04 3D 25 00 03 45 AB 03 5C 05 0B 5E FF FF  // IJ.=%..E..\..^..
    B630: 8F FF 00 00 00 00 43 B7 03 5C 05 0B 5E FF FF 8F  // ......C..\..^...
    B640: FF 00 00 10 00 0D 05 0C 5E 01 01 00 00 5C 05 0B  // ........^....\..
    B650: 5E 0F 00 FF FF 40 17 00 00 0D 05 0E 5E 00 00 00  // ^....@......^...
    B660: 01 01 05 07 5E 01 00 00 80 01 05 0A 5E 00 00 00  // ....^.......^...
    B670: 00 01 05 09 5E 87 39 01 00 01 05 08 5E 48 E9 00  // ....^.9.....^H..
    B680: 00 01 05 0D 5E 00 00 00 00 5C 05 0B 5E FF FF F8  // ....^....\..^...
    B690: FF 00 00 00 00 5C 05 0C 5E 8F FF FF FF 20 00 00  // .....\..^.... ..
    B6A0: 00 0D 05 0E 5E 00 00 00 10 07 05 0C 5E FB FF FF  // ....^.......^...
    B6B0: FF 01 05 0F 5E 3E 00 08 B0 01 05 10 5E 3E 00 18  // ....^>......^>..
    B6C0: 26 01 05 11 5E 3E 00 80 3F 5C 05 12 5E 00 00 00  // &...^>..?\..^...
    B6D0: 1C 3E 00 44 00 43 84 05 3D 25 00 03 48 EC 04 5C  // .>.D.C..=%..H..\
    B6E0: 05 0B 5E FF FF 8F FF 00 00 00 00 0D 05 0C 5E 01  // ..^...........^.
    B6F0: 01 00 00 5C 05 0B 5E 0F 00 FF FF 00 0B 00 00 0D  // ...\..^.........
    B700: 05 0E 5E 00 00 00 01 01 05 07 5E 03 00 AA 22 01  // ..^.......^...".
    B710: 05 0A 5E 02 00 00 00 01 05 09 5E C1 0A 00 00 01  // ..^.......^.....
    B720: 05 08 5E 00 10 00 00 01 05 0D 5E 00 00 00 00 5C  // ..^.......^....\
    B730: 05 0B 5E FF FF F8 FF 00 00 04 00 07 05 0C 5E 8F  // ..^...........^.
    B740: FF FF FF 0D 05 0E 5E 00 00 00 10 0D 05 0C 5E 04  // ......^.......^.
    B750: 00 00 00 01 05 0F 5E 3E 00 08 B0 01 05 10 5E 3E  // ......^>......^>
    B760: 00 10 1E 01 05 11 5E 3E 00 80 3F 5C 05 12 5E 00  // ......^>..?\..^.
    B770: 00 00 1C 3E 00 44 00 43 84 05 5C 05 0B 5E FF FF  // ...>.D.C..\..^..
    B780: 8F FF 00 00 00 00 0D 05 0C 5E 01 01 00 00 5C 05  // .........^....\.
    B790: 0B 5E 0F 00 FF FF 00 18 00 00 0D 05 0E 5E 00 00  // .^...........^..
    B7A0: 00 01 01 05 07 5E 03 00 55 45 01 05 0A 5E 01 00  // .....^..UE...^..
    B7B0: 00 00 01 05 09 5E 02 2B 00 00 01 05 08 5E 00 20  // .....^.+.....^. 
    B7C0: 00 00 01 05 0D 5E 00 00 00 00 5C 05 0B 5E FF FF  // .....^....\..^..
    B7D0: F8 FF 00 00 04 00 07 05 0C 5E 8F FF FF FF 0D 05  // .........^......
    B7E0: 0E 5E 00 00 00 10 0D 05 0C 5E 04 00 00 00 01 05  // .^.......^......
    B7F0: 0F 5E 3E 00 08 B0 01 05 10 5E 3E 00 24 3E 01 05  // .^>......^>.$>..
    B800: 11 5E 3E 00 80 3F 5C 05 12 5E 00 00 00 1C 3E 00  // .^>..?\..^....>.
    B810: 44 00 0D A5 06 5E 08 0D 25 F3 5D 01 0D 65 F1 5D  // D....^..%.]..e.]
    B820: 20 4A 65 F1 5D 40 49 93 05 0D A5 F1 5D 01 07 25  //  Je.]@I.....]..%
    B830: 00 5E FE 07 05 03 5E FE FE FE FE 4A E5 00 5E 10  // .^....^....J..^.
    B840: 44 AD 05 66 07 2D 0C 42 0C 00 03 04 40 00 00 3E  // D..f.-.B....@..>
    B850: 05 40 FF FF FF FF 44 DF 05 01 04 F4 5D 00 00 01  // .@....D.....]...
    B860: 04 F5 5D 04 00 2D 0D 42 08 00 43 BC 05 01 05 F4  // ..]..-.B..C.....
    B870: 5D 38 20 00 00 01 05 F5 5D 0C 00 00 00 56 00 01  // ]8 .....]....V..
    B880: 4A 05 03 5E 20 20 20 20 44 18 06 51 02 2D 05 01  // J..^    D..Q.-..
    B890: 01 00 00 00 3E 05 01 A0 86 01 00 49 F2 05 01 25  // ....>......I...%
    B8A0: F7 5D 03 43 D2 0E 03 00 40 04 5E 09 05 40 07 00  // .].C....@.^..@..
    B8B0: 00 00 21 05 40 03 00 00 00 03 05 41 21 20 00 00  // ..!.@......A! ..
    B8C0: 2D 02 41 40 01 02 F4 5D 41 03 00 41 F5 5D 01 05  // -.A@...]A..A.]..
    B8D0: F4 5D 84 00 00 00 01 02 F5 5D 41 03 05 41 22 20  // .].......]A..A" 
    B8E0: 00 00 2D 02 41 40 01 02 F4 5D 41 03 00 41 F5 5D  // ..-.A@...]A..A.]
    B8F0: 01 05 F4 5D 85 00 00 00 01 02 F5 5D 41 03 00 40  // ...].......]A..@
    B900: 12 5E 09 05 40 00 00 00 1C 1B 05 40 16 01 05 F4  // .^..@......@....
    B910: 5D 22 00 00 00 03 00 41 F5 5D 09 25 41 0F 0F 22  // ]".....A.].%A.."
    B920: 41 40 0F 25 41 80 01 05 F4 5D 22 00 00 00 01 02  // A@.%A....]".....
    B930: F5 5D 41 56 00 41 3D A5 00 00 49 BD 06 5C A5 0B  // .]AV.A=...I..\..
    B940: 5E F8 00 07 65 00 5E FE 43 D2 0E 5C A5 0B 5E F8  // ^...e.^.C..\..^.
    B950: 01 0D 65 00 5E 01 43 D2 0E 03 0A 46 48 66 07 2D  // ..e.^.C....FHf.-
    B960: 0C 42 0A 00 56 00 40 20 25 00 0C 2D 0A 42 40 20  // .B..V.@ %..-.B@ 
    B970: 25 00 02 03 0A 48 40 01 04 2E 5D 00 00 07 E5 2D  // %....H@...]....-
    B980: 5D FC 03 0A 48 46 66 1E 2D 0D 42 04 03 03 21 43  // ]...HFf.-.B...!C
    B990: 00 03 A2 46 44 4C A4 46 00 00 44 69 07 56 00 40  // ...FDL.F..Di.V.@
    B9A0: 56 00 41 2D 0D 42 01 00 03 21 40 00 2D 0A 42 40  // V.A-.B...!@.-.B@
    B9B0: 3D 25 00 03 45 36 07 4A A5 F7 5D 01 44 36 07 0D  // =%..E6.J..].D6..
    B9C0: A5 00 5E 20 03 24 41 00 00 03 05 40 EB 10 00 00  // ..^ .$A....@....
    B9D0: 01 02 F4 5D 40 01 02 F5 5D 41 2D 05 40 00 01 00  // ...]@...]A-.@...
    B9E0: 00 3E 05 40 EB 13 00 00 47 42 07 3D 25 00 03 45  // .>.@....GB.=%..E
    B9F0: 69 07 07 A5 00 5E DF 03 05 40 01 01 01 01 4A A5  // i....^...@....J.
    BA00: F7 5D 01 44 87 07 4A A5 06 5E 01 49 87 07 09 05  // .].D..J..^.I....
    BA10: 40 FF FF FE FE 0D 02 03 5E 40 51 05 03 02 40 00  // @.......^@Q...@.
    BA20: 69 05 40 FF FF FF FF 07 02 03 5E 40 51 C8 51 C8  // i.@.......^@Q.Q.
    BA30: 43 D2 0E 4A 25 FC 5D 01 49 D2 0E 3C 25 F7 5D 00  // C..J%.].I..<%.].
    BA40: 49 D2 0E 4C 25 00 01 44 C4 07 0D 05 06 5E 04 00  // I..L%..D.....^..
    BA50: 00 00 4C 65 00 01 44 D3 07 0D 05 06 5E 40 00 00  // ..Le..D.....^@..
    BA60: 00 4C A5 00 01 44 E2 07 0D 05 06 5E 00 04 00 00  // .L...D.....^....
    BA70: 4C E5 00 01 44 F1 07 0D 05 06 5E 00 40 00 00 03  // L...D.....^.@...
    BA80: 02 40 00 15 05 40 04 0D 02 03 5E 40 56 00 01 4A  // .@...@....^@V..J
    BA90: 25 FC 5D 01 49 D2 0E 03 02 40 00 15 05 40 05 03  // %.].I....@...@..
    BAA0: 00 41 03 5E 09 02 41 40 09 05 40 20 20 20 20 3E  // .A.^..A@..@    >
    BAB0: 02 41 40 44 43 08 51 02 2D 05 01 01 00 00 00 3E  // .A@DC.Q.-......>
    BAC0: 05 01 A0 86 01 00 49 01 08 01 25 F7 5D 04 43 D2  // ......I...%.].C.
    BAD0: 0E 03 02 40 00 15 05 40 04 69 05 40 FF FF FF FF  // ...@...@.i.@....
    BAE0: 07 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49 D2 0E  // ...^@V..J%.].I..
    BAF0: 03 02 40 00 15 05 40 05 03 00 41 03 5E 09 02 41  // ..@...@...A.^..A
    BB00: 40 3E 05 41 00 00 00 00 44 98 08 51 02 2D 05 01  // @>.A....D..Q.-..
    BB10: 01 00 00 00 3E 05 01 A0 86 01 00 49 5A 08 01 25  // ....>......IZ..%
    BB20: F7 5D 05 43 D2 0E 56 00 01 4A 25 FC 5D 01 49 D2  // .].C..V..J%.].I.
    BB30: 0E 4A 25 0C 5E 80 49 C6 08 51 02 2D 05 01 01 00  // .J%.^.I..Q.-....
    BB40: 00 00 3E 05 01 A0 86 01 00 49 9B 08 01 25 F7 5D  // ..>......I...%.]
    BB50: 06 43 D2 0E 03 0A 41 48 56 00 40 03 21 40 00 03  // .C....AHV.@.!@..
    BB60: 0A 48 40 0D 25 60 01 01 51 0A 03 0A 48 41 0D 25  // .H@.%`..Q...HA.%
    BB70: E8 5D 03 4A 25 E8 5D 04 44 E5 08 0D 65 F1 5D 12  // .].J%.].D...e.].
    BB80: 4A 65 F1 5D 04 44 F2 08 4C 25 00 01 44 06 09 0D  // Je.].D..L%..D...
    BB90: 65 F0 5D 10 4C 65 00 01 44 12 09 0D 65 F0 5D 20  // e.].Le..D...e.] 
    BBA0: 4C A5 00 01 44 1E 09 0D 65 F0 5D 40 4C E5 00 01  // L...D...e.]@L...
    BBB0: 44 2A 09 0D 65 F0 5D 80 01 71 F7 5D 00 43 D2 0E  // D*..e.]..q.].C..
    BBC0: 4A 05 06 5E 44 44 00 00 44 D2 0E 07 65 F1 5D FD  // J..^DD..D...e.].
    BBD0: 07 25 E8 5D FD 03 0A 41 48 56 00 40 03 21 40 00  // .%.]...AHV.@.!@.
    BBE0: 03 0A 48 40 07 25 60 01 FE 03 0A 48 41 4C 25 00  // ..H@.%`....HAL%.
    BBF0: 01 44 6E 09 07 05 06 5E FB FF FF FF 4C 65 00 01  // .Dn....^....Le..
    BC00: 44 7D 09 07 05 06 5E BF FF FF FF 4C A5 00 01 44  // D}....^....L...D
    BC10: 8C 09 07 05 06 5E FF FB FF FF 4C E5 00 01 44 9B  // .....^....L...D.
    BC20: 09 07 05 06 5E FF BF FF FF 07 65 0C 5E FE 54 00  // ....^.....e.^.T.
    BC30: 08 5E 54 00 09 5E 03 00 40 06 5E 4C 25 00 01 44  // .^T..^..@.^L%..D
    BC40: BF 09 5E 05 40 FC FF FF FF 03 00 00 00 4C 65 00  // ..^.@........Le.
    BC50: 01 44 D1 09 5E 05 40 CF FF FF FF 30 00 00 00 4C  // .D..^.@....0...L
    BC60: A5 00 01 44 E3 09 5E 05 40 FF FC FF FF 00 03 00  // ...D..^.@.......
    BC70: 00 4C E5 00 01 44 F5 09 5E 05 40 FF CF FF FF 00  // .L...D..^.@.....
    BC80: 30 00 00 3C 02 06 5E 40 44 A9 0A 01 02 06 5E 40  // 0..<..^@D.....^@
    BC90: 03 02 40 00 15 05 40 04 0D 02 03 5E 40 56 00 01  // ..@...@....^@V..
    BCA0: 4A 25 FC 5D 01 49 54 0A 03 02 40 00 15 05 40 05  // J%.].IT...@...@.
    BCB0: 03 00 41 03 5E 09 02 41 40 09 05 40 20 20 20 20  // ..A.^..A@..@    
    BCC0: 3E 02 41 40 44 54 0A 51 02 2D 05 01 01 00 00 00  // >.A@DT.Q.-......
    BCD0: 3E 05 01 A0 86 01 00 49 12 0A 01 25 F7 5D 07 43  // >......I...%.].C
    BCE0: D2 0E 03 02 40 00 15 05 40 04 69 05 40 FF FF FF  // ....@...@.i.@...
    BCF0: FF 07 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49 A9  // ....^@V..J%.].I.
    BD00: 0A 03 02 40 00 15 05 40 05 03 00 41 03 5E 09 02  // ...@...@...A.^..
    BD10: 41 40 3E 05 41 00 00 00 00 44 A9 0A 51 02 2D 05  // A@>.A....D..Q.-.
    BD20: 01 01 00 00 00 3E 05 01 A0 86 01 00 49 6B 0A 01  // .....>......Ik..
    BD30: 25 F7 5D 08 43 D2 0E 03 02 40 00 15 05 40 02 69  // %.].C....@...@.i
    BD40: 05 40 FF FF FF FF 07 02 03 5E 40 03 02 40 00 15  // .@.......^@..@..
    BD50: 05 40 01 09 05 40 02 02 02 02 0D 02 03 5E 40 43  // .@...@.......^@C
    BD60: D2 0E 4A 25 FC 5D 01 49 D2 0E 56 00 40 20 25 00  // ..J%.].I..V.@ %.
    BD70: 02 03 0A 41 48 03 02 48 40 0D E5 2E 5D 10 03 0A  // ...AH..H@...]...
    BD80: 48 41 3D A5 00 00 44 00 0B 0D 65 F0 5D F0 0D A5  // HA=...D...e.]...
    BD90: F0 5D 01 0D A5 E9 5D 01 3D A5 00 00 44 1C 0B 4A  // .]....].=...D..J
    BDA0: 05 06 5E 33 33 00 00 44 2D 0C 03 02 40 00 15 05  // ..^33..D-...@...
    BDB0: 40 01 69 05 40 FF FF FF FF 07 02 03 5E 40 03 02  // @.i.@.......^@..
    BDC0: 40 00 15 05 40 02 09 05 40 04 04 04 04 0D 02 03  // @...@...@.......
    BDD0: 5E 40 03 00 40 06 5E 4C 25 00 01 44 57 0B 09 05  // ^@..@.^L%..DW...
    BDE0: 40 FC FF FF FF 4C 65 00 01 44 65 0B 09 05 40 CF  // @....Le..De...@.
    BDF0: FF FF FF 4C A5 00 01 44 73 0B 09 05 40 FF FC FF  // ...L...Ds...@...
    BE00: FF 4C E5 00 01 44 81 0B 09 05 40 FF CF FF FF 01  // .L...D....@.....
    BE10: 02 06 5E 40 03 02 40 00 15 05 40 04 0D 02 03 5E  // ..^@..@...@....^
    BE20: 40 56 00 01 4A 25 FC 5D 01 49 D2 0E 03 02 40 00  // @V..J%.].I....@.
    BE30: 15 05 40 05 03 00 41 03 5E 09 02 41 40 09 05 40  // ..@...A.^..A@..@
    BE40: 20 20 20 20 3E 02 41 40 44 D8 0B 51 02 2D 05 01  //     >.A@D..Q.-..
    BE50: 01 00 00 00 3E 05 01 A0 86 01 00 49 96 0B 01 25  // ....>......I...%
    BE60: F7 5D 09 43 D2 0E 03 02 40 00 15 05 40 04 69 05  // .].C....@...@.i.
    BE70: 40 FF FF FF FF 07 02 03 5E 40 56 00 01 4A 25 FC  // @.......^@V..J%.
    BE80: 5D 01 49 D2 0E 03 02 40 00 15 05 40 05 03 00 41  // ].I....@...@...A
    BE90: 03 5E 09 02 41 40 3E 05 41 00 00 00 00 44 2D 0C  // .^..A@>.A....D-.
    BEA0: 51 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00  // Q.-......>......
    BEB0: 49 EF 0B 01 25 F7 5D 0A 43 D2 0E 03 02 40 00 15  // I...%.].C....@..
    BEC0: 05 40 03 09 05 40 08 08 08 08 0D 02 03 5E 40 43  // .@...@.......^@C
    BED0: D2 0E 03 02 40 00 15 05 40 03 69 05 40 FF FF FF  // ....@...@.i.@...
    BEE0: FF 07 02 03 5E 40 07 A5 F0 5D FE 4C 25 00 01 44  // ....^@...].L%..D
    BEF0: 69 0C 07 65 F0 5D EF 4C 65 00 01 44 75 0C 07 65  // i..e.].Le..Du..e
    BF00: F0 5D DF 4C A5 00 01 44 81 0C 07 65 F0 5D BF 4C  // .].L...D...e.].L
    BF10: E5 00 01 44 8D 0C 07 65 F0 5D 7F 07 A5 E9 5D FE  // ...D...e.]....].
    BF20: 56 00 40 20 25 00 02 03 0A 48 40 07 E5 2E 5D EF  // V.@ %....H@...].
    BF30: 43 D2 0E 66 1E 2D 0D 42 C4 00 3D A5 00 02 44 E0  // C..f.-.B..=...D.
    BF40: 0C 2D 0D 42 0C 00 3D A5 00 03 49 D2 0E 3D 05 01  // .-.B..=...I..=..
    BF50: 30 75 00 00 47 E0 0C 3D 05 01 40 9C 00 00 46 DB  // 0u..G..=..@...F.
    BF60: 0C 2D 0D 42 28 02 43 E0 0C 2D 0D 42 0C 00 03 21  // .-.B(.C..-.B...!
    BF70: 43 00 03 A2 46 44 4C A4 46 05 00 44 37 0D 03 04  // C...FDL.F..D7...
    BF80: 40 00 00 3E 05 40 00 00 00 00 44 37 0D 56 00 41  // @..>.@....D7.V.A
    BF90: 56 00 40 03 24 40 06 00 09 25 40 3F 03 22 41 40  // V.@.$@...%@?."A@
    BFA0: 03 24 40 07 00 09 25 40 3F 15 0D 40 06 0F 0A 41  // .$@...%@?..@...A
    BFB0: 40 03 64 40 08 00 09 65 40 3F 15 15 40 04 0F 52  // @.d@...e@?..@..R
    BFC0: 41 40 43 AE 0E 03 21 43 00 03 A2 46 44 66 07 2D  // A@C...!C...FDf.-
    BFD0: 0C 42 04 00 3D A5 00 03 44 5B 0D 66 07 2D 0C 42  // .B..=...D[.f.-.B
    BFE0: 06 00 3D A5 00 02 49 D2 0E 03 04 41 00 00 3E 05  // ..=...I....A..>.
    BFF0: 41 00 00 00 00 44 D2 0E 3D 02 01 41 46 79 0D 4C  // A....D..=..AFy.L
    C000: A4 46 06 00 49 81 0D 2D 0D 42 0C 00 43 5B 0D 03  // .F..I..-.B..C[..
    C010: 04 41 08 00 43 AE 0E 08 A5 00 1B 66 1E 2D 0D 42  // .A..C......f.-.B
    C020: C0 02 03 21 43 00 03 A2 46 44 03 0C 46 02 00 4C  // ...!C...FD..F..L
    C030: A4 46 00 00 49 F8 0D 66 1E 2D 0D 42 E8 00 3D 05  // .F..I..f.-.B..=.
    C040: 01 48 3F 00 00 47 E3 0D 66 1E 2D 0D 42 50 02 3D  // .H?..G..f.-.BP.=
    C050: 05 01 78 69 00 00 47 E3 0D 66 1E 2D 0D 42 88 02  // ..xi..G..f.-.B..
    C060: 3D 05 01 F0 D2 00 00 47 E3 0D 66 1E 2D 0D 42 20  // =......G..f.-.B 
    C070: 01 03 21 43 00 03 A2 46 44 03 0C 46 02 00 4C A4  // ..!C...FD..F..L.
    C080: 46 00 00 44 53 0E 2D 0D 42 06 00 56 20 41 3D A4  // F..DS.-.B..V A=.
    C090: 00 00 00 44 1B 0E 2D 25 41 01 3E 25 41 0A 44 53  // ...D..-%A.>%A.DS
    C0A0: 0E 2D 0D 42 05 00 43 00 0E 56 00 41 56 00 40 03  // .-.B..C..V.AV.@.
    C0B0: 24 40 01 00 09 25 40 3F 03 22 41 40 03 24 40 02  // $@...%@?."A@.$@.
    C0C0: 00 09 25 40 3F 15 0D 40 06 0F 0A 41 40 03 64 40  // ..%@?..@...A@.d@
    C0D0: 03 00 09 65 40 3F 15 15 40 04 0F 52 41 40 43 AE  // ...e@?..@..RA@C.
    C0E0: 0E 66 07 2D 0C 42 08 00 03 21 43 00 03 A2 46 44  // .f.-.B...!C...FD
    C0F0: 03 04 41 00 00 3E 05 41 00 00 00 00 44 D2 0E 3D  // ..A..>.A....D..=
    C100: 02 01 41 46 80 0E 4C A4 46 04 00 49 88 0E 2D 0D  // ..AF..L.F..I..-.
    C110: 42 44 00 43 62 0E 2D 0D 42 08 00 3D A4 00 00 00  // BD.Cb.-.B..=....
    C120: 44 A9 0E 03 24 41 00 00 3E 25 41 18 44 A9 0E 2D  // D...$A..>%A.D..-
    C130: 0D 42 06 00 43 8D 0E 03 04 41 01 00 5C 02 0F 5E  // .B..C....A..\..^
    C140: 00 00 FC FF 41 5C 02 10 5E 00 00 FC FF 41 5C 02  // ....A\..^....A\.
    C150: 11 5E 00 00 FC FF 41 5C 02 12 5E 00 00 FC FF 41  // .^....A\..^....A
    C160: 3A 00 00 5B 7A 0A 00 00 00 D8 00 B0 01 88 02 60  // :..[z..........`
    C170: 03 00 1B 02 01 02 00 00 37 00 00 3D 0D 00 00 00  // ........7..=....
    C180: 44 CE 01 56 00 41 03 21 41 01 09 25 41 0F 15 0D  // D..V.A.!A..%A...
    C190: 41 02 03 0A 40 42 66 FF 2D 0D 42 07 02 2D 0A 42  // A...@Bf.-.B..-.B
    C1A0: 41 03 0C 48 02 00 0D A5 90 5D 01 54 08 90 5D 03  // A..H.....].T..].
    C1B0: 0C 48 00 00 03 F9 41 01 15 3D 41 04 5C BA 10 54  // .H....A..=A.\..T
    C1C0: 8F 41 03 0A 42 40 4A 25 10 54 01 49 81 00 0D 0D  // .A..B@J%.T.I....
    C1D0: 10 54 01 01 0D 25 10 54 10 4A 25 10 54 20 44 67  // .T...%.T.J%.T Dg
    C1E0: 00 07 25 10 54 EF 4A 25 10 54 20 49 74 00 0D 25  // ..%.T.J%.T It..%
    C1F0: 13 54 40 56 00 41 03 09 41 00 3B 02 41 03 3B 41  // .T@V.A..A.;.A.;A
    C200: 00 1B 25 41 04 01 A2 11 54 41 03 69 41 01 15 2D  // ..%A....TA.iA..-
    C210: 41 04 01 2A 11 54 41 56 00 40 0F E5 40 80 03 73  // A..*.TAV.@..@..s
    C220: 40 00 01 02 16 54 40 56 00 40 03 6B 40 00 01 02  // @....T@V.@.k@...
    C230: 16 54 40 03 63 40 00 01 02 16 54 40 03 7B 40 00  // .T@.c@....T@.{@.
    C240: 09 65 40 0F 01 02 16 54 40 3E 25 41 04 47 10 01  // .e@....T@>%A.G..
    C250: 33 25 41 04 2D 05 46 04 00 00 00 03 63 40 00 01  // 3%A.-.F.....c@..
    C260: 02 16 54 40 03 6B 40 00 01 02 16 54 40 03 73 40  // ..T@.k@....T@.s@
    C270: 00 01 02 16 54 40 03 7B 40 00 01 02 16 54 40 43  // ....T@.{@....T@C
    C280: D7 00 0D 25 13 54 02 0D 25 11 54 01 03 29 40 01  // ...%.T..%.T..)@.
    C290: 21 25 40 0A 2D 25 40 96 4A 25 14 54 01 49 42 01  // !%@.-%@.J%.T.IB.
    C2A0: 51 14 33 25 40 01 3E 25 40 00 49 26 01 02 65 01  // Q.3%@.>%@.I&..e.
    C2B0: 01 43 CA 01 4A 05 14 54 F0 8F FF 00 44 54 01 02  // .C..J..T....DT..
    C2C0: 65 01 02 43 CA 01 01 05 16 54 01 00 00 80 03 00  // e..C.....T......
    C2D0: 40 16 54 02 6A 01 40 02 B8 01 14 54 08 A5 01 1F  // @.T.j.@....T....
    C2E0: 3D A5 01 00 46 7C 01 02 65 01 03 43 CA 01 32 A5  // =...F|..e..C..2.
    C2F0: 01 01 3D 8D 00 00 00 44 CA 01 3D A5 01 00 44 CA  // ..=....D..=...D.
    C300: 01 03 31 41 01 03 19 40 00 56 18 40 3B 02 40 03  // ..1A...@.V.@;.@.
    C310: 28 40 16 54 03 68 40 16 54 03 A8 40 16 54 03 E8  // (@.T.h@.T..@.T..
    C320: 40 16 54 04 02 00 40 3E 25 41 04 47 CA 01 33 25  // @.T...@>%A.G..3%
    C330: 41 04 2D 05 46 04 00 00 00 43 9D 01 3A 00 00 5B  // A.-.F....C..:..[
    C340: 66 FF 2D 0D 42 07 02 03 0C 48 00 00 01 8D 18 54  // f.-.B....H.....T
    C350: 18 00 01 05 19 54 7A 1C 02 00 01 05 1A 54 10 11  // .....Tz......T..
    C360: 3D 10 2D 0D 42 04 00 2C 25 00 01 3D 25 00 05 49  // =.-.B..,%..=%..I
    C370: D5 01 56 08 48 5B 7A 14 00 00 00 00 00 1C 00 04  // ..V.H[z.........
    C380: 00 38 00 08 00 54 00 0C 00 70 00 10 00 00 5A 00  // .8...T...p....Z.
    C390: 01 02 00 04 02 25 01 04 03 31 41 00 09 0D 41 0F  // .....%...1A...A.
    C3A0: 00 15 0D 41 01 66 FF 2D 0D 42 50 00 2D 0A 42 41  // ...A.f.-.BP.-.BA
    C3B0: 03 0C 48 00 00 07 A5 90 5D FE 01 0D 90 5D 11 11  // ..H.....]....]..
    C3C0: 50 02 4A 0D 93 5D 01 00 49 41 00 02 25 01 13 54  // P.J..]..IA..%..T
    C3D0: 08 90 5D 54 00 92 5D 3A 00 00 5B 7A 0A 00 00 00  // ..]T..]:..[z....
    C3E0: 04 00 08 00 0C 00 10 00 62 01 02 01 04 04 37 00  // ........b.....7.
    C3F0: 00 42 21 00 63 07 29 00 63 03 4E 00 63 02 60 00  // .B!.c.).c.N.c.`.
    C400: 63 04 84 00 63 0C 19 01 63 0D 22 01 5A 5A 43 61  // c...c...c.".ZZCa
    C410: 01 01 0D 45 5D 9F 0F 66 06 01 24 47 5D 30 00 01  // ...E]..f..$G]0..
    C420: 4C 47 5D 31 00 03 24 46 3B 00 3E 25 46 00 44 61  // LG]1..$F;.>%F.Da
    C430: 01 54 20 47 5D 5B 0D E5 47 5D 01 5C 05 43 5D FF  // .T G][..G].\.C].
    C440: FF FF FD 11 00 03 00 5B 0D E5 47 5D 01 4A 25 44  // .......[..G].J%D
    C450: 5D 02 44 72 00 0D A5 43 5D 01 0D A5 43 5D 02 5C  // ].Dr...C]...C].\
    C460: 05 43 5D EF FF FF FD 01 00 00 00 5B 4A 05 53 00  // .C]........[J.S.
    C470: 00 02 00 00 44 94 00 0D 25 4B 5D 01 3D 8D 00 00  // ....D...%K].=...
    C480: 00 44 18 01 03 05 46 00 36 6E 01 56 00 41 03 19  // .D....F.6n.V.A..
    C490: 41 00 21 05 41 FF 0F 00 00 27 02 46 40 3E 05 41  // A.!.A....'.F@>.A
    C4A0: 00 00 00 00 44 C4 00 2D 0D 40 01 00 01 8A 45 5D  // ....D..-.@....E]
    C4B0: 40 56 00 41 03 19 41 00 21 02 40 41 27 02 46 40  // @V.A..A.!.@A'.F@
    C4C0: 01 A5 4A 5D 0C 01 0A 4A 5D 40 15 05 40 04 56 00  // ..J]...J]@..@.V.
    C4D0: 41 03 29 41 00 3E 25 41 FF 49 F9 00 2D 0D 41 01  // A.)A.>%A.I..-.A.
    C4E0: 00 21 02 40 41 1B 05 40 08 01 0A 48 5D 40 0D E5  // .!.@A..@...H]@..
    C4F0: 48 5D C0 07 25 4B 5D FE 4A 65 4B 5D 01 49 10 01  // H]..%K].JeK].I..
    C500: 5B 01 05 43 5D 00 00 03 00 5B 0D E5 47 5D 01 4A  // [..C]....[..G].J
    C510: 05 43 5D 01 00 00 00 44 48 01 4A 05 43 5D 10 00  // .C]....DH.J.C]..
    C520: 00 00 49 55 01 4A 05 44 5D 01 00 00 00 49 3D 01  // ..IU.J.D]....I=.
    C530: 5C 05 43 5D FF FF FE FF 00 00 02 00 5B 5C 05 43  // \.C]........[\.C
    C540: 5D EF FF FD FD 01 00 00 00 5B 9E 00 03 02 00 10  // ]........[......
    C550: 37 00 00 01 05 00 00 2C A8 01 00 03 00 46 01 00  // 7......,.....F..
    C560: 1B 05 46 08 3D 65 02 00 49 25 00 2C 22 02 46 3D  // ..F.=e..I%.,".F=
    C570: E5 02 00 49 30 00 2C A2 02 46 3D 65 02 02 49 37  // ...I0.,..F=e..I7
    C580: 00 03 01 40 03 09 05 40 00 00 00 FC 3E 05 40 00  // ...@...@....>.@.
    C590: 00 00 D0 49 5D 00 01 05 63 C0 00 00 00 40 55 00  // ...I]...c....@U.
    C5A0: 00 55 20 02 43 61 00 54 00 63 C0 01 01 64 C0 00  // .U .Ca.T.c...d..
    C5B0: 56 00 40 03 21 40 02 01 02 65 C0 40 01 01 66 C0  // V.@.!@...e.@..f.
    C5C0: 01 03 31 40 02 01 02 67 C0 40 01 01 E8 C0 03 3D  // ..1@...g.@.....=
    C5D0: 65 02 01 44 95 00 3D E5 02 01 44 95 00 51 02 4A  // e..D..=...D..Q.J
    C5E0: E5 A0 21 80 49 95 00 5B D2 01 02 02 00 00 37 00  // ..!.I..[......7.
    C5F0: 00 3D 25 01 01 44 C1 00 3D 25 01 02 44 C2 00 3D  // .=%..D..=%..D..=
    C600: 25 01 03 44 33 00 3D 25 01 00 49 BB 01 3D 05 00  // %..D3.=%..I..=..
    C610: 00 00 00 00 49 78 00 3A 00 00 5B 3C 05 4A 00 00  // ....Ix.:..[<.J..
    C620: 00 00 00 49 48 00 02 05 00 70 11 01 00 43 53 00  // ...IH....p...CS.
    C630: 3D 05 00 70 11 01 00 46 53 00 5B 01 01 4A 00 00  // =..p...FS.[..J..
    C640: 26 05 00 64 00 00 00 02 02 01 40 02 05 00 07 00  // &..d......@.....
    C650: 00 00 52 13 20 05 01 64 00 00 00 02 02 00 40 5B  // ..R. ..d......@[
    C660: 3C 05 4B 00 00 00 00 00 49 8D 00 02 05 00 70 11  // <.K.....I.....p.
    C670: 01 00 43 98 00 3D 05 00 70 11 01 00 46 98 00 5B  // ..C..=..p...F..[
    C680: 01 01 4B 00 00 54 20 A4 53 26 05 00 64 00 00 00  // ..K..T .S&..d...
    C690: 02 02 01 40 02 05 00 04 00 00 00 52 13 20 05 01  // ...@.......R. ..
    C6A0: 64 00 00 00 02 02 00 40 5B 5B 66 FF 2D 0D 42 C2  // d......@[[f.-.B.
    C6B0: 01 56 00 41 03 39 41 01 15 25 41 02 2D 0A 42 41  // .V.A.9A..%A.-.BA
    C6C0: 3D 65 01 0B 49 35 01 20 05 00 64 00 00 00 03 0C  // =e..I5. ..d.....
    C6D0: 48 02 00 03 00 41 40 01 0F 25 41 10 09 0D 41 DF  // H....A@..%A...A.
    C6E0: FF 03 0C 48 00 00 4A 05 01 50 01 00 00 00 44 1E  // ...H..J..P....D.
    C6F0: 01 03 0C 48 02 00 3C 02 41 01 40 49 1E 01 3C 02  // ...H..<.A.@I..<.
    C700: 40 01 41 44 BB 01 03 0C 48 02 00 07 25 40 01 EF  // @.AD....H...%@..
    C710: 01 02 41 01 40 01 0A 40 01 41 43 BB 01 56 00 40  // ..A.@..@.AC..V.@
    C720: 03 8D 40 0C 00 3D 65 01 18 44 4C 01 03 A9 40 01  // ..@..=e..DL...@.
    C730: 33 A5 40 14 03 31 40 01 09 25 40 03 15 25 40 04  // 3.@..1@..%@..%@.
    C740: 0F 0D 40 01 01 56 00 41 03 29 41 01 33 25 41 14  // ..@..V.A.)A.3%A.
    C750: 03 0C 48 00 00 4A 05 01 50 01 00 00 00 44 99 01  // ..H..J..P....D..
    C760: 03 0C 48 02 00 4A 25 40 01 10 49 99 01 3C 22 43  // ..H..J%@..I..<"C
    C770: 01 41 49 99 01 03 1A 48 40 3C 0A 00 01 40 44 BB  // .AI....H@<...@D.
    C780: 01 03 1A 48 40 07 25 00 01 FE 03 0C 48 02 00 01  // ...H@.%.....H...
    C790: 22 43 01 41 07 0D 40 01 EF FF 03 1A 48 40 01 0A  // "C.A..@.....H@..
    C7A0: 00 01 40 3A 00 00 5B 7A 10 00 00 00 00 00 80 00  // ..@:..[z........
    C7B0: 04 00 00 01 08 00 80 01 0C 00 E6 00 01 01 04 00  // ................
    C7C0: 37 00 00 56 00 00 66 1E 2D 0D 42 4C 00 56 00 40  // 7..V..f.-.BL.V.@
    C7D0: 21 25 00 10 2D 0A 42 40 03 24 41 0C 00 4C 25 41  // !%..-.B@.$A..L%A
    C7E0: 08 44 DA 00 02 25 00 64 02 0D 01 01 01 02 E4 01  // .D...%.d........
    C7F0: 06 00 0E E5 01 90 66 1E 43 58 00 2D 0D 42 35 02  // ......f.CX.-.B5.
    C800: 02 A4 01 00 00 03 64 00 01 00 2D 0D 42 03 00 43  // ......d...-.B..C
    C810: C0 00 3E 0D 00 00 00 44 7B 00 3E 0D 00 01 00 44  // ..>....D{.>....D
    C820: 92 00 3E 0D 00 02 00 44 A9 00 3E 0D 00 03 00 44  // ..>....D..>....D
    C830: 41 00 43 DA 00 2D 0D 42 E4 01 02 A4 01 00 00 03  // A.C..-.B........
    C840: 64 00 01 00 2D 0D 42 03 00 43 C0 00 2D 0D 42 FF  // d...-.B..C..-.B.
    C850: 01 02 A4 01 00 00 03 64 00 01 00 2D 0D 42 03 00  // .......d...-.B..
    C860: 43 C0 00 2D 0D 42 1A 02 02 A4 01 00 00 03 64 00  // C..-.B........d.
    C870: 01 00 2D 0D 42 03 00 43 C0 00 3E 65 00 00 44 DA  // ..-.B..C..>e..D.
    C880: 00 33 65 00 01 02 4C 00 00 00 52 36 2D 0D 42 02  // .3e...L...R6-.B.
    C890: 00 43 C0 00 2D 25 00 01 3E 25 00 04 45 0C 00 5B  // .C..-%..>%..E..[
    C8A0: 54 01 02 01 D6 09 80 02 A0 00 E0 01 2D 00 10 00  // T...........-...
    C8B0: 60 00 0A 00 02 00 00 00 00 00 08 08 06 00 12 3C  // `..............<
    C8C0: A0 0F 20 03 00 01 58 02 1C 00 28 00 80 00 01 00  // .. ...X...(.....
    C8D0: 04 00 00 00 00 00 00 00 00 00 6A 3C 64 19 00 04  // ..........j<d...
    C8E0: 40 01 00 03 26 00 18 00 88 00 03 00 06 00 00 00  // @...&...........
    C8F0: 00 00 00 00 06 00 55 3C 01 1D 00 05 72 01 D0 02  // ......U<....r...
    C900: 1E 00 6E 00 28 00 05 00 05 00 00 00 00 00 00 00  // ..n.(...........
    C910: 00 00 E8 3C 30 2A 00 05 08 02 C0 03 28 00 60 00  // ...<0*......(.`.
    C920: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 E9 3C  // p..............<
    C930: 30 2A 00 05 98 01 00 04 2A 00 30 00 70 00 01 00  // 0*......*.0.p...
    C940: 03 00 00 00 00 00 00 00 00 00 EA 3C 66 21 56 05  // ...........<f!V.
    C950: AA 01 00 03 1E 00 46 00 8F 00 03 00 03 00 00 00  // ......F.........
    C960: 00 00 00 00 02 00 ED 3C 8F 2F 78 05 D0 01 1A 04  // .......<./x.....
    C970: 27 00 58 00 90 00 03 00 04 00 00 00 00 00 00 00  // '.X.............
    C980: 02 00 EB 3C 48 3F 40 06 30 02 B0 04 32 00 40 00  // ...<H?@.0...2.@.
    C990: C0 00 01 00 03 00 00 00 00 00 00 00 00 00 EC 3C  // ...............<
    C9A0: 02 3A 80 07 18 01 38 04 2D 00 58 00 2C 00 04 00  // .:....8.-.X.,...
    C9B0: 05 00 00 00 00 00 00 00 02 00 F3 3C 7D 4B 80 07  // ...........<}K..
    C9C0: A0 02 B0 04 2D 00 88 00 C8 00 03 00 06 00 00 00  // ....-...........
    C9D0: 00 00 00 00 02 00 F0 3C 68 5B 80 07 A8 02 A0 05  // .......<h[......
    C9E0: 3C 00 80 00 D0 00 01 00 03 00 00 00 00 00 00 00  // <...............
    C9F0: 02 00 F1 3C 48 00 03 02 1F 00 0A 11 20 4E 00 00  // ...<H....... N..
    CA00: 20 4E 00 00 01 00 00 00 58 2D 00 00 4C 00 00 00  //  N......X-..L...
    CA10: 00 00 00 00 00 00 00 00 00 00 00 00 F4 00 00 00  // ................
    CA20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CA30: 00 00 00 00 00 00 00 00 00 00 00 00 04 03 02 01  // ................
    CA40: 00 00 00 00 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A  // .....*.*..***..*
    CA50: 00 2A 2A 15 00 2A 2A 2A 15 15 15 15 15 3F 15 3F  // .**..***.....?.?
    CA60: 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F  // ..???..?.???.???
    CA70: 00 00 00 05 05 05 08 08 08 0B 0B 0B 0E 0E 0E 11  // ................
    CA80: 11 11 14 14 14 18 18 18 1C 1C 1C 20 20 20 24 24  // ...........   $$
    CA90: 24 28 28 28 2D 2D 2D 32 32 32 38 38 38 3F 3F 3F  // $(((---222888???
    CAA0: 00 00 3F 10 00 3F 1F 00 3F 2F 00 3F 3F 00 3F 3F  // ..?..?..?/.??.??
    CAB0: 00 2F 3F 00 1F 3F 00 10 3F 00 00 3F 10 00 3F 1F  // ./?..?..?..?..?.
    CAC0: 00 3F 2F 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 00  // .?/.??./?..?..?.
    CAD0: 00 3F 00 00 3F 10 00 3F 1F 00 3F 2F 00 3F 3F 00  // .?..?..?..?/.??.
    CAE0: 2F 3F 00 1F 3F 00 10 3F 1F 1F 3F 27 1F 3F 2F 1F  // /?..?..?..?'.?/.
    CAF0: 3F 37 1F 3F 3F 1F 3F 3F 1F 37 3F 1F 2F 3F 1F 27  // ?7.??.??.7?./?.'
    CB00: 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 37  // ?..?'.?/.?7.??.7
    CB10: 3F 1F 2F 3F 1F 27 3F 1F 1F 3F 1F 1F 3F 27 1F 3F  // ?./?.'?..?..?'.?
    CB20: 2F 1F 3F 37 1F 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F  // /.?7.??.7?./?.'?
    CB30: 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3F 3F  // --?1-?6-?:-??-??
    CB40: 2D 3A 3F 2D 36 3F 2D 31 3F 2D 2D 3F 31 2D 3F 36  // -:?-6?-1?--?1-?6
    CB50: 2D 3F 3A 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 2D  // -?:-??-:?-6?-1?-
    CB60: 2D 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D  // -?--?1-?6-?:-??-
    CB70: 3A 3F 2D 36 3F 2D 31 3F 00 00 1C 07 00 1C 0E 00  // :?-6?-1?........
    CB80: 1C 15 00 1C 1C 00 1C 1C 00 15 1C 00 0E 1C 00 07  // ................
    CB90: 1C 00 00 1C 07 00 1C 0E 00 1C 15 00 1C 1C 00 15  // ................
    CBA0: 1C 00 0E 1C 00 07 1C 00 00 1C 00 00 1C 07 00 1C  // ................
    CBB0: 0E 00 1C 15 00 1C 1C 00 15 1C 00 0E 1C 00 07 1C  // ................
    CBC0: 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E 1C 1C  // ................
    CBD0: 0E 18 1C 0E 15 1C 0E 11 1C 0E 0E 1C 11 0E 1C 15  // ................
    CBE0: 0E 1C 18 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 0E  // ................
    CBF0: 0E 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E  // ................
    CC00: 18 1C 0E 15 1C 0E 11 1C 14 14 1C 16 14 1C 18 14  // ................
    CC10: 1C 1A 14 1C 1C 14 1C 1C 14 1A 1C 14 18 1C 14 16  // ................
    CC20: 1C 14 14 1C 16 14 1C 18 14 1C 1A 14 1C 1C 14 1A  // ................
    CC30: 1C 14 18 1C 14 16 1C 14 14 1C 14 14 1C 16 14 1C  // ................
    CC40: 18 14 1C 1A 14 1C 1C 14 1A 1C 14 18 1C 14 16 1C  // ................
    CC50: 00 00 10 04 00 10 08 00 10 0C 00 10 10 00 10 10  // ................
    CC60: 00 0C 10 00 08 10 00 04 10 00 00 10 04 00 10 08  // ................
    CC70: 00 10 0C 00 10 10 00 0C 10 00 08 10 00 04 10 00  // ................
    CC80: 00 10 00 00 10 04 00 10 08 00 10 0C 00 10 10 00  // ................
    CC90: 0C 10 00 08 10 00 04 10 08 08 10 0A 08 10 0C 08  // ................
    CCA0: 10 0E 08 10 10 08 10 10 08 0E 10 08 0C 10 08 0A  // ................
    CCB0: 10 08 08 10 0A 08 10 0C 08 10 0E 08 10 10 08 0E  // ................
    CCC0: 10 08 0C 10 08 0A 10 08 08 10 08 08 10 0A 08 10  // ................
    CCD0: 0C 08 10 0E 08 10 10 08 0E 10 08 0C 10 08 0A 10  // ................
    CCE0: 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B 10 10 0B 10 10  // ................
    CCF0: 0B 0F 10 0B 0D 10 0B 0C 10 0B 0B 10 0C 0B 10 0D  // ................
    CD00: 0B 10 0F 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 0B  // ................
    CD10: 0B 10 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B 10 10 0B  // ................
    CD20: 0F 10 0B 0D 10 0B 0C 10 00 00 00 00 00 00 00 00  // ................
    CD30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CD40: 5C 00 02 01 24 36 80 07 A0 00 38 04 1F 00 30 00  // \...$6....8...0.
    CD50: 20 00 03 00 05 00 58 01 C2 00 00 00 06 00 00 3B  //  .....X........;
    CD60: E8 03 00 00 00 00 34 21 00 00 B8 0B 00 00 00 00  // ......4!........
    CD70: 7D 3F 00 01 0B 0A C2 41 00 FF FF 00 00 00 00 00  // }?.....A........
    CD80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CD90: 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 02 01  // ................
    CDA0: 00 00 00 00 00 00 00 00 00 04 01 0C 00 00 00 00  // ................
    CDB0: 00 00 00 00 00 00 00 00 00 00 00 00 77 01 00 00  // ............w...
    CDC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDD0: E8 03 1A 02 00 00 00 00 00 3F 00 00 00 00 00 00  // .........?......
    CDE0: 8C 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDF0: 00 00 00 00 02 00 10 01 14 31 00 00 00 00 E4 00  // .........1......
    CE00: 00 00 00 00 00 02 30 02 0C 33 01 01 00 00 E4 00  // ......0..3......
    CE10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE20: 00 00 00 00 08 00 10 02 13 31 02 02 00 00 E4 00  // .........1......
    CE30: 00 01 00 00 80 00 20 02 13 32 03 03 00 00 E4 00  // ...... ..2......
    CE40: 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE90: 00 00 00 00 00 00 FF FF FF FF FF FF FF FF FF FF  // ................
    CEA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CEB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CEC0: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 FF FF  // ................
    CED0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CEE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CEF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CF00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF FF  // ................
    D000: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D010: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D020: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D030: 00 00 00 00 00 00 FF FF FF FF FF FF FF FF FF FF  // ................
    D040: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D050: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D060: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 FF FF  // ................
    D070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D090: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D0A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1A0: 00 00 00 00 00 00 00 00 54 00 02 01 B5 5D 00 00  // ........T....]..
    D1B0: 00 00 01 00 B5 5D 00 00 08 08 02 00 B5 5D 00 00  // .....].......]..
    D1C0: 10 10 03 00 B5 5D 00 00 18 14 04 00 B5 5D 00 00  // .....].......]..
    D1D0: 1A 18 05 00 91 5D 00 00 08 08 90 00 95 5D 00 00  // .....].......]..
    D1E0: 08 08 91 00 99 5D 00 00 08 08 92 00 9D 5D 00 00  // .....].......]..
    D1F0: 08 08 93 00 A1 5D 00 00 08 08 94 00 9C 00 01 01  // .....]..........
    D200: 10 01 06 12 11 01 16 12 21 01 0A 12 13 01 06 6A  // ........!......j
    D210: 14 01 16 6A 22 01 0A 6A 16 01 06 55 17 01 16 55  // ...j"..j...U...U
    D220: 23 01 0A 55 63 01 16 E8 64 01 0A E8 65 01 16 E9  // #..Uc...d...e...
    D230: 66 01 0A E9 19 01 06 EA 1A 01 16 EA 24 01 0A EA  // f...........$...
    D240: 47 01 16 ED 48 01 0A ED 45 01 16 EB 46 01 0A EB  // G...H...E...F...
    D250: 75 01 16 EC 76 01 0A EC A5 01 16 F3 A6 01 0A F3  // u...v...........
    D260: A0 01 16 F0 A1 01 0A F0 A2 01 16 F1 A3 01 0A F1  // ................
    D270: D2 01 16 70 D4 01 0A 70 D8 01 16 71 D9 01 0A 71  // ...p...p...q...q
    D280: E2 01 16 72 E4 01 0A 72 E8 01 16 73 E9 01 0A 73  // ...r...r...s...s
    D290: F5 01 16 74 F6 01 0A 74 00 04 09 01 14 00 02 01  // ...t...t........
    D2A0: 02 00 08 00 80 00 00 02 00 04 00 08 40 00 FF FF  // ............@...
    D2B0: EB 00 01 04 8A 02 06 00 14 31 68 00 1E 21 00 00  // .........1h..!..
    D2C0: B3 00 00 00 02 00 00 00 0C 33 77 00 1E 22 00 00  // .........3w.."..
    D2D0: BA 00 00 00 00 02 00 00 00 00 86 00 20 21 00 00  // ............ !..
    D2E0: C1 00 00 00 00 00 00 00 13 31 95 00 20 22 00 00  // .........1.. "..
    D2F0: C8 00 00 00 08 00 00 00 13 32 A4 00 21 21 00 00  // .........2..!!..
    D300: CF 00 00 00 80 00 00 00 03 71 D6 00 00 00 00 00  // .........q......
    D310: 00 00 00 00 00 00 00 00 01 04 90 00 02 04 01 00  // ................
    D320: 17 06 00 00 00 00 FF 01 04 91 00 02 04 02 00 17  // ................
    D330: 06 00 00 00 00 FF 01 04 90 00 02 04 00 00 17 06  // ................
    D340: 00 00 00 00 FF 01 04 92 00 02 04 03 00 17 06 00  // ................
    D350: 00 00 00 FF 01 04 93 00 02 04 04 00 17 06 00 00  // ................
    D360: 00 00 FF 14 06 0F 00 00 00 FF 14 06 0F 00 00 00  // ................
    D370: FF 14 06 0F 00 00 00 FF 14 06 0F 01 00 00 FF 14  // ................
    D380: 06 0F 01 00 00 FF 10 0A 01 02 03 04 05 00 00 00  // ................
    D390: 11 0A 90 91 92 93 94 00 00 00 FF 00 05 00 01 01  // ................
    D3A0: 00 00 38 00 04 03 04 00 00 00 70 11 01 00 C0 12  // ..8.......p.....
    D3B0: 60 09 00 00 00 00 00 00 00 00 7C 01 4E 0C 01 01  // `.........|.N...
    D3C0: 00 00 55 00 00 00 C0 12 00 00 01 02 04 01 00 05  // ..U.............
    D3D0: 05 00 00 00 00 00 00 00 00 00 E6 01 05 03 0E 00  // ................
    D3E0: 36 00 46 00 5A 01 96 01 30 75 00 00 0C 00 3F 05  // 6.F.Z...0u....?.
    D3F0: 3A 40 00 00 40 9C 00 00 0C 00 3F 05 3E 00 00 00  // :@..@.....?.>...
    D400: FF FF FF 00 0C 00 3F 05 77 21 00 00 00 00 00 00  // ......?.w!......
    D410: FF FF FF 00 0C 00 3F 05 34 A0 00 00 00 00 00 00  // ......?.4.......
    D420: 48 3F 00 00 3F 00 44 00 00 16 00 00 00 05 01 1F  // H?..?.D.........
    D430: 00 00 00 05 02 2C 00 00 00 05 03 3E 00 00 00 05  // .....,.....>....
    D440: 08 1B 50 00 00 05 09 25 60 00 00 05 0A 35 90 00  // ..P....%`....5..
    D450: 00 05 10 21 B0 00 00 05 11 2F F0 00 00 05 18 2A  // ...!...../.....*
    D460: 40 01 00 05 78 69 00 00 3F 00 44 00 00 16 00 00  // @...xi..?.D.....
    D470: 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05 03 3E  // .........,.....>
    D480: 00 00 00 05 08 1B 50 00 00 05 09 25 60 00 00 05  // ......P....%`...
    D490: 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F F0 00  // .5.....!...../..
    D4A0: 00 05 18 2A 40 01 00 05 F0 D2 00 00 3F 00 44 00  // ...*@.......?.D.
    D4B0: 00 1E 00 00 00 05 01 26 00 00 00 05 02 30 00 00  // .......&.....0..
    D4C0: 00 05 03 3E 00 00 00 05 08 22 40 00 00 05 09 2C  // ...>....."@....,
    D4D0: 60 00 00 05 0A 37 70 00 00 05 10 27 90 00 00 05  // `....7p....'....
    D4E0: 11 32 C0 00 00 05 18 2E 00 01 00 05 68 3C 01 00  // .2..........h<..
    D4F0: 3F 00 44 00 00 1E 00 00 00 05 01 26 00 00 00 05  // ?.D........&....
    D500: 02 30 00 00 00 05 03 3E 00 00 00 05 08 22 40 00  // .0.....>....."@.
    D510: 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05 10 27  // ...,`....7p....'
    D520: 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01 00 05  // .....2..........
    D530: 00 00 00 00 02 03 00 01 00 01 02 03 00 07 03 00  // ................
    D540: 02 03 00 01 00 01 02 03 00 07 03 00 02 03 00 01  // ................
    D550: 00 01 02 03 00 07 03 00 00 01 02 03 00 01 02 03  // ................
    D560: 00 07 03 00 00 01 02 03 00 01 02 03 00 07 03 00  // ................
    D570: 08 30 00 00 8D 00 00 00 07 30 00 00 4A 25 00 00  // .0.......0..J%..
    D580: 08 31 00 00 8D 00 00 00 07 31 00 00 4A 25 00 00  // .1.......1..J%..
    D590: 08 32 00 00 8D 00 00 00 07 32 00 00 4A 25 00 00  // .2.......2..J%..
    D5A0: 08 33 00 00 8D 00 00 00 07 33 00 00 4A 25 00 00  // .3.......3..J%..
    D5B0: 56 00 00 00 05 00 00 00 FF FF FF FF 00 00 00 00  // V...............
    D5C0: 1C 00 03 01 00 0C 00 00 00 00 00 00 77 01 35 0C  // ............w.5.
    D5D0: C0 12 00 00 FF 00 FF 00 FF 00 00 00 34 00 02 03  // ............4...
    D5E0: 00 09 01 02 08 01 02 02 64 C0 00 00 65 C0 00 00  // ........d...e...
    D5F0: 66 C0 00 00 67 C0 00 00 E8 C0 00 00 A0 21 00 00  // f...g........!..
    D600: 42 EC 00 00 10 27 00 00 08 02 00 00 25 00 00 00  // B....'......%...
    D610: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D620: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D630: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D640: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D650: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D660: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    D670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D680: 00 00 00 00                                      // ....


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 8C
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "8760    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 8C 48 50 51 4F 45 4D  // WSMT(.....HPQOEM
    0010: 38 37 36 30 20 20 20 20 01 00 00 00 48 50 20 20  // 8760    ....HP  
    0020: 01 00 00 00 07 00 00 00                          // ........


