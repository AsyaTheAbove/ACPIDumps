
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20141107-32 [Apr  6 2015]
Copyright (c) 2000 - 2014 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   RSDP                          "HP    "
   RSDT   0x00000044     0x01    "HP    "  "3045    "   0x00000003    "    "     0x01000013
   XSDT   0x00000064     0x01    "HPQOEM"  "SLIC-MPC"   0x00000003    "    "     0x01000013
   DSDT   0x00008BC6     0x01    "HP    "  "3045    "   0xF0000000    "INTL"     0x20051117
   FACS   0x00000040
   FACP   0x000000F4     0x04    "HP    "  "3045    "   0x00000003    "MSFT"     0x0100000D
   HPET   0x00000038     0x01    "HP    "  "3045    "   0x00000001    "MSFT"     0x000F4240
   APIC   0x00000084     0x02    "HP    "  "3045    "   0x00000001    "TFSM"     0x000F4240
   MCFG   0x0000003C     0x01    "HP    "  "3045    "   0x00000001    "TFSM"     0x000F4240
   BOOT   0x00000028     0x01    "HP    "  "3045    "   0x00000001    "    "     0x00000001
   SLIC   0x00000176     0x01    "HPQOEM"  "SLIC-MPC"   0x06040000    " LTP"     0x00000001
   SSDT   0x00000386     0x01    "AMD   "  "PowerNow"   0x00000001    "AMD "     0x00000001
   SRAT   0x00000078     0x03    "AMD   "  "AMD CRB "   0x00000001    "AMD "     0x00000001

Found 13 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000084
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : D5
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "3045    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "TFSM"
[020h 0032   4]        Asl Compiler Revision : 000F4240

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 00
[040h 0064   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 00
[048h 0072   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 04
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[06Ch 0108   1]                Subtable Type : 04 [Local APIC NMI]
[06Dh 0109   1]                       Length : 06
[06Eh 0110   1]                 Processor ID : 00
[06Fh 0111   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[071h 0113   1]         Interrupt Input LINT : 01

[072h 0114   1]                Subtable Type : 04 [Local APIC NMI]
[073h 0115   1]                       Length : 06
[074h 0116   1]                 Processor ID : 01
[075h 0117   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[077h 0119   1]         Interrupt Input LINT : 01

[078h 0120   1]                Subtable Type : 04 [Local APIC NMI]
[079h 0121   1]                       Length : 06
[07Ah 0122   1]                 Processor ID : 02
[07Bh 0123   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[07Dh 0125   1]         Interrupt Input LINT : 01

[07Eh 0126   1]                Subtable Type : 04 [Local APIC NMI]
[07Fh 0127   1]                       Length : 06
[080h 0128   1]                 Processor ID : 03
[081h 0129   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[083h 0131   1]         Interrupt Input LINT : 01

Raw Table Data: Length 132 (0x84)

  0000: 41 50 49 43 84 00 00 00 02 D5 48 50 20 20 20 20  APIC......HP    
  0010: 33 30 34 35 20 20 20 20 01 00 00 00 54 46 53 4D  3045    ....TFSM
  0020: 40 42 0F 00 00 00 E0 FE 01 00 00 00 00 08 00 00  @B..............
  0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 00  ................
  0040: 00 00 00 00 00 08 03 00 00 00 00 00 01 0C 04 00  ................
  0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  ................
  0060: 00 00 02 0A 00 09 09 00 00 00 0F 00 04 06 00 05  ................
  0070: 00 01 04 06 01 05 00 01 04 06 02 05 00 01 04 06  ................
  0080: 03 05 00 01                                      ....


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F8
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "3045    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : " "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]          Boot Register Index : 44
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

  0000: 42 4F 4F 54 28 00 00 00 01 F8 48 50 20 20 20 20  BOOT(.....HP    
  0010: 33 30 34 35 20 20 20 20 01 00 00 00 01 00 00 00  3045    ........
  0020: 01 00 00 00 44 00 00 00                          ....D...


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 1, "HP    ", "3045    ", 0xF0000000)
{

    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU1._PPC, UnknownObj)

    OperationRegion (SSMI, SystemIO, 0x0F80, One)
    Field (SSMI, ByteAcc, NoLock, Preserve)
    {
        TRP0,   8
    }

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xC0), 
        BTWL,   2, 
        BTLS,   1, 
        WWLS,   1, 
        BWLS,   1, 
        Offset (0xC2), 
        IVIM,   8, 
        Offset (0xC5), 
        BRAC,   8, 
        BRDC,   8, 
        VRAM,   8, 
        WPES,   8, 
        WAKS,   8, 
        Offset (0xE0), 
        OFEA,   8, 
        Offset (0xEE), 
            ,   3, 
        S3RW,   1, 
        Offset (0xF0), 
        FAWA,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        TM1E,   1, 
        TM2E,   1, 
        Offset (0x01), 
            ,   1, 
        TM1S,   1, 
        TM2S,   1, 
        Offset (0x04), 
            ,   7, 
        SLPS,   1, 
        Offset (0x07), 
            ,   7, 
        CLPS,   1, 
        Offset (0x10), 
            ,   6, 
        PWDE,   1, 
        Offset (0x1C), 
            ,   3, 
        MKME,   1, 
        PI3E,   1, 
        PI2E,   1, 
        PI1E,   1, 
        PI0E,   1, 
            ,   3, 
        MKMS,   1, 
        PI3S,   1, 
        PI2S,   1, 
        PI1S,   1, 
        PI0S,   1, 
        Offset (0x20), 
        P1EB,   16, 
        Offset (0x36), 
            ,   6, 
        GV6P,   1, 
        GV7P,   1, 
            ,   3, 
        GM0P,   1, 
        GM1P,   1, 
        GM2P,   1, 
        GM3P,   1, 
        GM8P,   1, 
            ,   1, 
        GM4P,   1, 
        GM5P,   1, 
            ,   1, 
        GM6P,   1, 
        GM7P,   1, 
        Offset (0x3B), 
        GPX0,   1, 
        GPX4,   1, 
        GPX5,   1, 
        GPX1,   1, 
        GPX6,   1, 
        GPX7,   1, 
        GPX2,   1, 
        GPX3,   1, 
        Offset (0x55), 
        SPRE,   1, 
            ,   1, 
            ,   1, 
        EPNM,   1, 
        DPPF,   1, 
        FNGS,   1, 
        Offset (0x61), 
            ,   7, 
        R617,   1, 
        Offset (0x65), 
            ,   4, 
        RSTU,   1, 
        Offset (0x68), 
            ,   3, 
        TPDE,   1, 
            ,   1, 
        Offset (0x84), 
        WPNE,   1, 
        WPAG,   1, 
        Offset (0x92), 
            ,   7, 
        GV7S,   1, 
        Offset (0x9A), 
            ,   7, 
        HECO,   1, 
        Offset (0xA8), 
        TPE0,   1, 
        TPE1,   1, 
        TPE2,   1, 
        TPE3,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, 0x0400, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Name (PCM1, Zero)
    Name (IW1S, Zero)
    Name (IW2S, Zero)
    Method (OT80, 1, NotSerialized)
    {
        APMD = Arg0
        APMC = 0xE5
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
    }

    Name (PS48, Zero)
    Name (PS49, Zero)
    Name (PS4A, Zero)
    Name (PS4B, Zero)
    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        Index (PRWP, Zero) = Arg0
        Index (PRWP, One) = Arg1
        If (((DAS3 == Zero) && (DAS1 == Zero)))
        {
            If ((Arg1 <= 0x03))
            {
                Index (PRWP, One) = Zero
            }
        }
        Else
        {
            If (((DAS3 == Zero) && (Arg1 == 0x03)))
            {
                Index (PRWP, One) = One
            }

            If (((DAS1 == Zero) && (Arg1 == One)))
            {
                Index (PRWP, One) = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    OperationRegion (PCFG, SystemMemory, 0xE0000000, 0x10000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x88024), 
        STB5,   32, 
        Offset (0x90042), 
        PT0D,   1, 
        PT1D,   1, 
        PT2D,   1, 
        PT3D,   1, 
        PT4D,   1, 
        PT5D,   1, 
        PT6D,   1, 
        PT7D,   1, 
        PT8D,   1, 
        PT9D,   1
    }

    OperationRegion (BAR, SystemMemory, STB5, 0x1000)
    Field (BAR, AnyAcc, NoLock, Preserve)
    {
        Offset (0x120), 
            ,   7, 
        PMBY,   1, 
        Offset (0x128), 
        PMS0,   4, 
        Offset (0x129), 
        PMS1,   4, 
        Offset (0x12C), 
        DET0,   4, 
        Offset (0x130), 
        Offset (0x132), 
        PRC0,   1, 
        Offset (0x1A0), 
            ,   7, 
        SMBY,   1, 
        Offset (0x1A8), 
        SMS0,   4, 
        Offset (0x1A9), 
        SMS1,   4, 
        Offset (0x1AC), 
        DET1,   4, 
        Offset (0x1B0), 
        Offset (0x1B2), 
        PRC1,   1, 
        Offset (0x220), 
            ,   7, 
        PSBY,   1, 
        Offset (0x228), 
        PSS0,   4, 
        Offset (0x229), 
        PSS1,   4, 
        Offset (0x22C), 
        DET2,   4, 
        Offset (0x230), 
        Offset (0x232), 
        PRC2,   1, 
        Offset (0x2A0), 
            ,   7, 
        SSBY,   1, 
        Offset (0x2A8), 
        SSS0,   4, 
        Offset (0x2A9), 
        SSS1,   4, 
        Offset (0x2AC), 
        DET3,   4, 
        Offset (0x2B0), 
        Offset (0x2B2), 
        PRC3,   1
    }

    OperationRegion (EBDA, SystemMemory, 0xFFF10000, 0xFF)
    Field (EBDA, AnyAcc, NoLock, Preserve)
    {
        Offset (0x87), 
        PIDV,   16
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PWDE = Zero
    }

    Method (SWAK, 1, NotSerialized)
    {
        HECO = One
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PWDE = One
        PEWD = Zero
    }

    Method (TRMD, 1, NotSerialized)
    {
        SPRE = Arg0
        TPDE = Arg0
    }

    Method (CHKH, 0, NotSerialized)
    {
        Local0 = \_SB.PCI0.SMBS.GEVS
        If ((Local0 & 0x10))
        {
            \_SB.PCI0.SMBS.GE4T = Zero
        }
        Else
        {
            \_SB.PCI0.SMBS.GE4T = One
        }
    }

    Method (TRAP, 1, Serialized)
    {
        SMIF = Arg0
        TRP0 = Zero
        Return (SMIF) /* \SMIF */
    }

    OperationRegion (MBOX, SystemMemory, 0x2FEBEA18, 0x000002BC)
    Field (MBOX, AnyAcc, NoLock, Preserve)
    {
        PCI1,   8, 
        PCI2,   8, 
        PCI3,   8, 
        PCI4,   8, 
        PCI5,   8, 
        PCI6,   8, 
        PCI7,   8, 
        PCI8,   8, 
        NLCK,   8, 
        ZIPE,   8, 
        COMA,   8, 
        CAIO,   8, 
        CAIP,   8, 
        CAMD,   8, 
        CADA,   8, 
        COMB,   8, 
        CBIO,   8, 
        CBIP,   8, 
        CBMD,   8, 
        CBDA,   8, 
        FHSD,   8, 
        COMC,   8, 
        CCIO,   8, 
        CCIP,   8, 
        CCMD,   8, 
        CCDA,   8, 
        COMD,   8, 
        CDIO,   8, 
        CDIP,   8, 
        CDMD,   8, 
        CDDA,   8, 
        LPT1,   8, 
        L1IO,   8, 
        L1IP,   8, 
        L1MD,   8, 
        L1DA,   8, 
        LPT2,   8, 
        L2IO,   8, 
        L2IP,   8, 
        L2MD,   8, 
        L2DA,   8, 
        LPT3,   8, 
        L3IO,   8, 
        L3IP,   8, 
        L3MD,   8, 
        L3DA,   8, 
        FDDC,   8, 
        FDWP,   8, 
        HGMP,   8, 
        LGMP,   8, 
        MIDI,   8, 
        AZLA,   8, 
        AUDO,   8, 
        MODM,   8, 
        IDEC,   8, 
        SSED,   8, 
        PACT,   8, 
        SCFG,   8, 
        AMOD,   8, 
        IMOD,   8, 
        LCFG,   8, 
        IDLY,   8, 
        PMTP,   8, 
        PMIO,   8, 
        PMBM,   8, 
        PMTM,   8, 
        PSTP,   8, 
        PSIO,   8, 
        PSBM,   8, 
        PSTM,   8, 
        IDE0,   8, 
        IDE1,   8, 
        IDE2,   8, 
        IDE3,   8, 
        IDE4,   8, 
        IDE5,   8, 
        IDE6,   8, 
        IDE7,   8, 
        HIUB,   8, 
        LUBS,   8, 
        PLYT,   8, 
        EDCG,   8, 
        SDFY,   8, 
        SDTC,   8, 
        SDRP,   8, 
        SDCL,   8, 
        SDRC,   8, 
        SDRE,   8, 
        FC2L,   8, 
        FC3L,   8, 
        FCS4,   8, 
        APIM,   8, 
        HPTS,   8, 
        HPTA,   8, 
        EMAS,   8, 
        VGAO,   8, 
        SOFF,   8, 
        KBPO,   8, 
        MSPO,   8, 
        USBB,   8, 
        EVTL,   8, 
        SYBE,   8, 
        ETLC,   8, 
        AC30,   8, 
        TPMD,   8, 
        TPMO,   8, 
        TPMC,   8, 
        TPMM,   8, 
        TPCC,   8, 
        TPLC,   8, 
        TPLR,   32, 
        QBOT,   8, 
        QTBT,   8, 
        PBOT,   8, 
        M256,   8, 
        PEGF,   8, 
        ORTS,   16, 
        BMTP,   8, 
        BNPT,   8, 
        LNMT,   8, 
        NBTO,   8, 
        NABD,   8, 
        NEBD,   8, 
        NLBD,   8, 
        DFBT,   16, 
        NPSP,   16, 
        LANG,   8, 
        UACL,   8, 
        SUPS,   8, 
        DVET,   8, 
        S3RS,   8, 
        DAS1,   8, 
        DAS3,   8, 
        WKPM,   8, 
        WKMD,   8, 
        WKS5,   8, 
        HOUR,   8, 
        MINS,   8, 
        SECS,   8, 
        DOFM,   8, 
        NBTV,   64, 
        BTOD,   64, 
        SPVP,   16, 
        POPD,   16, 
        USPW,   16, 
        HDPW,   8, 
        KRSV,   488, 
        LIMF,   8, 
        LIMS,   8, 
        IGMT,   8, 
        PWST,   8, 
        PNOW,   8, 
        FNON,   8, 
        TRON,   8, 
        PCRR,   8, 
        C4EN,   8, 
        C43D,   8, 
        MPST,   8, 
        VTSP,   8, 
        VTFT,   8, 
        PFMP,   8, 
        PVAT,   8, 
        OHC0,   8, 
        OHC1,   8, 
        OHC2,   8, 
        OHC3,   8, 
        OHC4,   8, 
        EHC0,   8, 
        EHC1,   8, 
        SATE,   8, 
        EC1E,   8, 
        ESVM,   8, 
        MCLC,   8, 
        MCLV,   8, 
        HTFR,   8, 
        HTWD,   8, 
        GSPL,   8, 
        P2G2,   8, 
        P2LA,   8, 
        P2LW,   8, 
        P2SP,   8, 
        P2LI,   8, 
        P2CM,   8, 
        P4G2,   8, 
        P4LA,   8, 
        P4LI,   8, 
        P4CM,   8, 
        P5G2,   8, 
        P5LA,   8, 
        P5LI,   8, 
        P5CM,   8, 
        P6G2,   8, 
        P6LA,   8, 
        P6LI,   8, 
        P6CM,   8, 
        P7G2,   8, 
        P7LA,   8, 
        P7LI,   8, 
        P7CM,   8, 
        P8LA,   8, 
        P8VT,   8, 
        P8CM,   8, 
        P9G2,   8, 
        P9LA,   8, 
        P9LI,   8, 
        P9CM,   8, 
        PAG2,   8, 
        PALA,   8, 
        PALI,   8, 
        PACM,   8, 
        UMAR,   8, 
        CPST,   8, 
        OSCS,   8, 
        SSSW,   8, 
        OBLS,   8, 
        CRSV,   1856, 
        FDLY,   8, 
        CDBT,   8, 
        FPBT,   8, 
        FF11,   8, 
        CPBT,   8, 
        CPTR,   8, 
        DSME,   8, 
        FANO,   8, 
        OSFG,   8, 
        SSVM,   8, 
        ORSV,   480, 
        DRSV,   800
    }

    Name (ECON, Zero)
    Name (KBWU, Zero)
    Name (TPWU, Zero)
    OperationRegion (NVST, SystemMemory, 0x2FEBECD4, 0x000001AA)
    Field (NVST, AnyAcc, Lock, Preserve)
    {
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        DID,    32, 
        INFO,   2048, 
        RESD,   792, 
        VGAF,   8, 
        WDI0,   8, 
        WDI1,   8, 
        WDI2,   8, 
        WDI3,   8, 
        WSI0,   8, 
        WSI1,   8, 
        WSI2,   8, 
        WSI3,   8, 
        DCKS,   8, 
        SID0,   8, 
        SID1,   8, 
        SID2,   8, 
        SID3,   8, 
        SID4,   8, 
        SID5,   8, 
        SID6,   8, 
        SID7,   8, 
        PPCM,   8, 
        PPCN,   8, 
        NCPU,   8, 
        MCPU,   8, 
        ECPU,   8, 
        EXTM,   8, 
        CMTF,   8, 
        CMTI,   32, 
        CMTO,   8, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        PFCY,   8
    }

    Method (SCMP, 2, NotSerialized)
    {
        Name (STG1, Buffer (0x50) {})
        Name (STG2, Buffer (0x50) {})
        STG1 = Arg0
        STG2 = Arg1
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = Zero
        While ((Local0 < SizeOf (Arg0)))
        {
            If ((DerefOf (Index (STG1, Local0)) != DerefOf (Index (STG2, Local0
                ))))
            {
                Return (Zero)
            }

            Local0++
        }

        Return (One)
    }

    Name (WNOS, Zero)
    Method (CKOS, 0, NotSerialized)
    {
        If ((WNOS == Zero))
        {
            If (SCMP (_OS, "Microsoft Windows"))
            {
                WNOS = One
            }

            If (SCMP (_OS, "Microsoft Windows NT"))
            {
                WNOS = 0x02
            }

            If (SCMP (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                WNOS = 0x03
            }

            If (CondRefOf (_OSI, Local0))
            {
                If (SCMP (_OS, "Windows 2006"))
                {
                    WNOS = 0x05
                }
                Else
                {
                    WNOS = 0x04
                }
            }
        }

        Return (WNOS) /* \WNOS */
    }

    Name (MYOS, Zero)
    Name (HTTS, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0) {})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0) {})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (Index (BUF0, Local2))
            Local4 = DerefOf (Index (BUF1, Local2))
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2009"))
                {
                    OSTB = 0x42
                    TPOS = 0x40
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            Else
            {
                If (CondRefOf (_OS, Local0))
                {
                    If (SEQL (_OS, "Microsoft Windows"))
                    {
                        OSTB = One
                        TPOS = One
                    }
                    Else
                    {
                        If (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                        {
                            OSTB = 0x02
                            TPOS = 0x02
                        }
                        Else
                        {
                            If (SEQL (_OS, "Microsoft Windows NT"))
                            {
                                OSTB = 0x04
                                TPOS = 0x04
                            }
                            Else
                            {
                                OSTB = Zero
                                TPOS = Zero
                            }
                        }
                    }
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x00, 0x00000410, 0x06) {}
        Processor (CPU1, 0x01, 0x00000000, 0x00) {}
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((DAS3 == One))
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Scope (_GPE)
    {
        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.LPC0.PS2K, 0x02) // Device Wake
            Notify (\_SB.PCI0.LPC0.PS2M, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Name (HP4F, Zero)
            If (\_SB.PCI0.SMBS.GE4T)
            {
                Sleep (0x14)
                Local0 = \_SB.PCI0.SMBS.GEVS
                If ((Local0 & 0x10))
                {
                    \_SB.PCI0.SMBS.GE4T = Zero
                    Debug = "HotPlug:04: Removal Event"
                    \_SB.PCI0.PB4.SLST = 0x08
                    Local7 = \_SB.PCI0.PB4.NCRD.DVID
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local6 = \_SB.PCI0.PB4.XPRD (0xA5)
                        Local6 &= 0x3F
                        If ((Local6 <= 0x04))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local7 = \_SB.PCI0.PB4.NCRD.DVID
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    \_SB.PCI0.XPTR (0x04, Zero)
                    \_SB.PCI0.PB4.XPLP (Zero)
                    HP4F = One
                }
            }
            Else
            {
                Sleep (0x14)
                Local0 = \_SB.PCI0.SMBS.GEVS
                If (!(Local0 & 0x10))
                {
                    \_SB.PCI0.SMBS.GE4T = One
                    Debug = "HotPlug:04: Insertion Event"
                    HP4F = Zero
                    \_SB.PCI0.PB4.XPLP (One)
                    Sleep (0xC8)
                    \_SB.PCI0.XPTR (0x04, One)
                    Sleep (0x14)
                    Local2 = Zero
                    While ((Local2 < 0x0F))
                    {
                        \_SB.PCI0.PB4.SLST = 0x08
                        Local4 = One
                        Local5 = 0xC8
                        While ((Local4 && Local5))
                        {
                            Local6 = \_SB.PCI0.PB4.XPRD (0xA5)
                            Local6 &= 0x3F
                            If ((Local6 == 0x10))
                            {
                                Debug = "HotPlug:04: TrainingState=0x10"
                                Local4 = Zero
                            }
                            Else
                            {
                                Sleep (0x05)
                                Local5--
                            }
                        }

                        If (!Local4)
                        {
                            Debug = "HotPlug:04: Check VC Negotiation Pending"
                            Local5 = \_SB.PCI0.PB4.XPDL ()
                            If (Local5)
                            {
                                Debug = "HotPlug:04: Retraining Link"
                                \_SB.PCI0.PB4.XPRT ()
                                Sleep (0x05)
                                Local2++
                            }
                            Else
                            {
                                Debug = "HotPlug:04: Device OK"
                                If ((\_SB.PCI0.PB4.XPR2 () == Ones))
                                {
                                    HP4F = One
                                    Local2 = 0x10
                                }
                                Else
                                {
                                    Debug = "HotPlug:04: Common Clock Retraining Failed"
                                    HP4F = Zero
                                    Local2 = 0x10
                                }
                            }
                        }
                        Else
                        {
                            Debug = "HotPlug:04: TrainingState Timeout"
                            Local2 = 0x10
                        }
                    }

                    If (!HP4F)
                    {
                        Debug = "HotPlug:04: Insertion Failed: Disable Training & PowerDown"
                        Local7 = \_SB.PCI0.PB4.NCRD.DVID
                        Sleep (0x0A)
                        Local4 = One
                        Local5 = 0x05
                        While ((Local4 && Local5))
                        {
                            Local6 = \_SB.PCI0.PB4.XPRD (0xA5)
                            Local6 &= 0x3F
                            If ((Local6 <= 0x04))
                            {
                                Local4 = Zero
                            }
                            Else
                            {
                                Local7 = \_SB.PCI0.PB4.NCRD.DVID
                                Sleep (0x05)
                                Local5--
                            }
                        }

                        \_SB.PCI0.XPTR (0x04, Zero)
                        \_SB.PCI0.PB4.XPLP (Zero)
                    }
                }
            }

            If (HP4F)
            {
                Notify (\_SB.PCI0.PB4, Zero) // Bus Check
            }
        }

        Method (_L12, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.PB4, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB5, 0x02) // Device Wake
            Notify (\_SB.PCI0.PB6, 0x02) // Device Wake
        }
    }

    Name (GPIC, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        If (GPIC)
        {
            \_SB.DSPI ()
        }
    }

    Name (SAV0, Zero)
    Name (SAV1, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        IO80 = 0x50
        \_SB.S80H (0x50)
        SAV0 = \_SB.PCI0.SMBS.GP13
        SAV1 = \_SB.PCI0.SMBS.GP70
        \_SB.PCI0.SMBS.GP63 = Zero
        \_SB.PCI0.LPC0.EC0.KTWU ()
        SPTS (Arg0)
        \_SB.PCI0.SMBS.SLPS = One
        If ((Arg0 == One))
        {
            IO80 = 0x51
            \_SB.S80H (0x51)
        }
        Else
        {
            If ((Arg0 == 0x02)) {}
            Else
            {
                If ((Arg0 == 0x03))
                {
                    IO80 = 0x53
                    \_SB.S80H (0x53)
                    \_SB.PCI0.SMBS.GP13 = Zero
                    \_SB.PCI0.SMBS.GP70 = Zero
                }
                Else
                {
                    If ((Arg0 == 0x04))
                    {
                        IO80 = 0x54
                        \_SB.S80H (0x54)
                        Local0 = (\_TZ.TPC - 0x0A)
                        If (((\_TZ.HOTF == One) & (\_SB.PCI0.LPC0.EC0.RTMP >= Local0)))
                        {
                            Local1 = OFEA /* \OFEA */
                            Local1 |= 0x08
                            OFEA = Local1
                        }

                        \_SB.PCI0.SMBS.RSTU = One
                    }
                    Else
                    {
                        If ((Arg0 == 0x05))
                        {
                            IO80 = 0x55
                            \_SB.S80H (0x55)
                            \_SB.GSMI (0x03)
                        }
                    }
                }
            }
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        IO80 = 0x60
        \_SB.S80H (0x60)
        SWAK (Arg0)
        If ((Arg0 == One))
        {
            IO80 = 0x61
            \_SB.S80H (0x61)
            \_SB.PCI0.P2P.PR4B = 0xF1
        }
        Else
        {
            S34W ()
            If ((Arg0 == 0x03))
            {
                IO80 = 0x63
                \_SB.S80H (0x63)
                CHKH ()
                \_SB.PCI0.SMBS.GP13 = SAV0 /* \SAV0 */
                \_SB.PCI0.SMBS.GP70 = SAV1 /* \SAV1 */
            }
            Else
            {
                If ((Arg0 == 0x04))
                {
                    IO80 = 0x64
                    If ((GPIC == Zero)) {}
                    Else
                    {
                        \_SB.DSPI ()
                    }

                    \_SB.S80H (0x64)
                    CHKH ()
                    If (ECON)
                    {
                        If ((OSTB == 0x42))
                        {
                            \_SB.PCI0.LPC0.EC0.WIN7 = One
                        }
                    }
                }
            }
        }

        \_SB.PCI0.LPC0.EC0.DLY1 = 0x78
        \_SB.PCI0.LPC0.EC0.ACPU = One
        Return (Zero)
    }

    Method (S34W, 0, NotSerialized)
    {
        If ((OSTB <= 0x42))
        {
            Local0 = WAKS /* \WAKS */
            Local0 &= One
            If (Local0)
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
            Else
            {
                Local0 = FAWA /* \FAWA */
                Local0 &= One
                If (Local0)
                {
                    Notify (\_SB.PWRB, 0x02) // Device Wake
                }
            }
        }

        If (ECON)
        {
            If ((\_SB.PCI0.LPC0.EC0.WIN7 == One))
            {
                If (((\_SB.PCI0.LPC0.EC0.LLBW == One) && !\_SB.PCI0.LPC0.EC0.SW2S))
                {
                    Notify (\_SB.BAT0, 0x80) // Status Change
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            OperationRegion (SCTH, PCI_Config, 0x7A, One)
            Field (SCTH, ByteAcc, NoLock, Preserve)
            {
                RSMF,   1
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((GPIC == Zero)) {}
                Else
                {
                    DSPI ()
                }

                OSTP ()
                CHKH ()
                If (CondRefOf (_OSI, Local0))
                {
                    MYOS = Zero
                }
                Else
                {
                    If ((SizeOf (_OS) == 0x14))
                    {
                        MYOS = One
                    }
                    Else
                    {
                        If ((SizeOf (_OS) == 0x27))
                        {
                            MYOS = 0x02
                        }
                        Else
                        {
                            MYOS = 0x03
                        }
                    }
                }
            }

            OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
            Field (NBMS, DWordAcc, NoLock, Preserve)
            {
                MIDX,   32, 
                MIDR,   32
            }

            Mutex (NBMM, 0x00)
            Method (NBMR, 1, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                MIDX = Local0
                Local0 = MIDR /* \_SB_.PCI0.MIDR */
                MIDX = 0x7F
                Release (NBMM)
                Return (Local0)
            }

            Method (NBMW, 2, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                Local0 |= 0x80
                MIDX = Local0
                MIDR = Arg1
                MIDX = Local0 &= 0x7F
                Release (NBMM)
            }

            OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
            Field (NBXP, DWordAcc, NoLock, Preserve)
            {
                NBXI,   32, 
                NBXD,   32
            }

            Mutex (NBXM, 0x00)
            Method (NBXR, 1, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                Local0 = NBXD /* \_SB_.PCI0.NBXD */
                NBXI = Zero
                Release (NBXM)
                Return (Local0)
            }

            Method (NBXW, 2, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                NBXD = Arg1
                NBXI = Zero
                Release (NBXM)
            }

            Method (GFXM, 0, NotSerialized)
            {
                Local0 = NBMR (0x08)
                Local0 &= 0x0F
                Return (Local0)
            }

            Method (GPPM, 0, NotSerialized)
            {
                Local0 = NBMR (0x31)
                Local0 &= 0x0F
                Return (Local0)
            }

            Method (XPTR, 2, NotSerialized)
            {
                If (((Arg0 < 0x02) && (Arg0 > 0x07)))
                {
                    Return (Zero)
                }
                Else
                {
                    Local0 = One
                    If ((Arg0 < 0x04))
                    {
                        Local1 = (Arg0 + 0x02)
                    }
                    Else
                    {
                        Local1 = (Arg0 + 0x11)
                    }

                    Local0 <<= Local1
                    Local2 = NBMR (0x08)
                    If (Arg1)
                    {
                        Local2 &= ~Local0
                    }
                    Else
                    {
                        Local2 |= Local0
                    }

                    NBMW (0x08, Local2)
                    Return (Ones)
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((OSTB != 0x41))
                {
                    CDW1 |= 0x02
                    Return (Arg3)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x19
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)) {}
                        If ((CTRL & 0x04))
                        {
                            EPNM = One
                            DPPF = One
                            FNGS = One
                        }
                        Else
                        {
                            EPNM = Zero
                            DPPF = Zero
                            FNGS = Zero
                        }

                        If ((CTRL & 0x10)) {}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (TOM, 0, NotSerialized)
            {
                Local0 = (TOML * 0x00010000)
                Local1 = (TOMH * 0x01000000)
                Local0 += Local1
                Return (Local0)
            }

            OperationRegion (NBBR, PCI_Config, 0x1C, 0x08)
            Field (NBBR, DWordAcc, NoLock, Preserve)
            {
                BR3L,   32, 
                BR3H,   32
            }

            OperationRegion (NBBI, PCI_Config, 0x84, 0x04)
            Field (NBBI, DWordAcc, NoLock, Preserve)
            {
                PARB,   32
            }

            Name (PX3L, 0x80000000)
            Name (PX3H, 0x80000000)
            Name (PX3S, 0x10000000)
            Name (PX3K, 0xF0000000)
            Mutex (BR3X, 0x00)
            Method (BR3M, 0, NotSerialized)
            {
                Local0 = PARB /* \_SB_.PCI0.PARB */
                Local0 >>= 0x10
                Local0 &= 0x07
                If (Local0)
                {
                    Local1 = (One << Local0)
                    Local1 -= 0x1000
                    Local1 <<= 0x14
                    PX3K = Local1
                    Local1 = (One << Local0)
                    Local1 *= 0x00100000
                    PX3S = Local1
                }

                Acquire (BR3X, 0xFFFF)
                Local0 = NBMR (Zero)
                Local0 &= 0xFFFFFFF7
                NBMW (Zero, Local0)
                Local0 = BR3L /* \_SB_.PCI0.BR3L */
                Local0 &= PX3K /* \_SB_.PCI0.PX3K */
                PX3L = Local0
                Local0 = BR3H /* \_SB_.PCI0.BR3H */
                Local0 &= 0xFF
                PX3H = Local0
                Local0 = NBMR (Zero)
                Local0 |= 0x08
                NBMW (Zero, Local0)
                Release (BR3X)
                Return (PX3L) /* \_SB_.PCI0.PX3L */
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFFFDFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xF0000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x10000000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, BTN1)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, BTX1)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, BTL1)  // _LEN: Length
                BTMN = TOM ()
                BTLN = (BR3M () - BTMN) /* \_SB_.PCI0._CRS.BTMN */
                BTMX = ((BTMN + BTLN) - One)
                Local0 = PX3S /* \_SB_.PCI0.PX3S */
                Local0 += BR3M ()
                BTN1 = Local0
                Local1 = BTX1 /* \_SB_.PCI0._CRS.BTX1 */
                Local2 = (Local1 - Local0)
                BTL1 = Local2
                Return (CRES) /* \_SB_.PCI0.CRES */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y02)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y03)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y02._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y02._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._LEN, ML02)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        ML02 = 0x1000
                    }

                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((GPIC == Zero))
                {
                    Return (PICM) /* \_SB_.PCI0.PICM */
                }
                Else
                {
                    Return (APIC) /* \_SB_.PCI0.APIC */
                }
            }

            Name (PICM, Package (0x34)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    One, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    One, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x02, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    One, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    One, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    Zero, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    One, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x02, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x03, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (APIC, Package (0x34)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    Zero, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    One, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x02, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    0x03, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Device (AGP)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((GPIC == Zero))
                    {
                        Return (PIC) /* \_SB_.PCI0.AGP_.PIC_ */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.AGP_.APIC */
                    }
                }

                Name (PIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (APIC, Package (0x04)
                {
                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Device (VGA)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                    Name (SWIT, One)
                    Name (CRTA, One)
                    Name (LCDA, One)
                    Name (TV0A, One)
                    Name (HDTV, One)
                    Name (CV0A, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_PSC, Zero)  // _PSC: Power State Current
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        _PSC = Zero
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        _PSC = 0x03
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        SWIT = (Arg0 & 0x03)
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x00010200, 
                            0x00010210, 
                            0x000101F0
                        })
                    }

                    Device (CRT)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "CRT -- _DCS"
                            If (CRTA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "CRT -- _DGS"
                            If (CRTA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "CRT -- _DSS"
                        }
                    }

                    Device (TV0)
                    {
                        Name (_ADR, 0x0200)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "TV -- _DCS"
                            If (TV0A)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "TV -- _DCS"
                            If (TV0A)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "TV -- _DSS"
                        }
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "LCD -- _DCS"
                            If (LCDA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "LCD -- _DCS"
                            If (LCDA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "LCD -- _DSS"
                        }

                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            If ((TPOS == 0x40))
                            {
                                Return (BCLT) /* \_SB_.PCI0.BCLT */
                            }
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((TPOS == 0x40))
                            {
                                SBCM (Arg0)
                            }
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            If ((TPOS == 0x40))
                            {
                                Return (GBQC ())
                            }
                        }
                    }

                    Device (HDMI)
                    {
                        Name (_ADR, 0x0210)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "HDMI TV -- _DCS"
                            If (HDTV)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "HDMI TV -- _DCS"
                            If (HDTV)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "HDMI TV -- _DSS"
                        }
                    }

                    Device (CVTV)
                    {
                        Name (_ADR, 0x01F0)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "Composite Video -- _DCS"
                            If (CV0A)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "Composite Video -- _DCS"
                            If (CV0A)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "Composite Video -- _DSS"
                        }
                    }
                }
            }

            Device (PB2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x11
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LNKB, 
                                Zero
                            }
                        })
                    }
                }

                Device (DVGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SWIT, One)
                    Name (CRTA, One)
                    Name (LCDA, One)
                    Name (TV0A, One)
                    Name (HDTV, One)
                    Name (CV0A, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_PSC, Zero)  // _PSC: Power State Current
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        _PSC = Zero
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        _PSC = 0x03
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        SWIT = (Arg0 & 0x03)
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x00010200, 
                            0x00010210, 
                            0x000101F0
                        })
                    }

                    Device (CRT)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "CRT -- _DCS"
                            If (CRTA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "CRT -- _DGS"
                            If (CRTA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "CRT -- _DSS"
                        }
                    }

                    Device (TV0)
                    {
                        Name (_ADR, 0x0200)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "TV -- _DCS"
                            If (TV0A)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "TV -- _DCS"
                            If (TV0A)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "TV -- _DSS"
                        }
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "LCD -- _DCS"
                            If (LCDA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "LCD -- _DCS"
                            If (LCDA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "LCD -- _DSS"
                        }

                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            If ((TPOS == 0x40))
                            {
                                Return (BCLT) /* \_SB_.PCI0.BCLT */
                            }
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((TPOS == 0x40))
                            {
                                SBCM (Arg0)
                            }
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            If ((TPOS == 0x40))
                            {
                                Return (GBQC ())
                            }
                        }
                    }

                    Device (HDMI)
                    {
                        Name (_ADR, 0x0210)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "HDMI TV -- _DCS"
                            If (HDTV)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "HDMI TV -- _DCS"
                            If (HDTV)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "HDMI TV -- _DSS"
                        }
                    }

                    Device (CVTV)
                    {
                        Name (_ADR, 0x01F0)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "Composite Video -- _DCS"
                            If (CV0A)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "Composite Video -- _DCS"
                            If (CV0A)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "Composite Video -- _DSS"
                        }
                    }
                }
            }

            Device (PB4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LNKD, 
                                Zero
                            }
                        })
                    }
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                    SLST,   16
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (XPEX, SystemMemory, 0xE0020100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    Local0 = Zero
                    If ((VC0S & 0x00020000))
                    {
                        Local0 = Ones
                    }

                    Return (Local0)
                }

                Method (XPRD, 1, NotSerialized)
                {
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB4_.XPID */
                    XPIR = Zero
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Local1 = 0x0101
                    Local2 = NBXR (0x00020065)
                    If (Arg0)
                    {
                        Local2 &= ~Local1
                    }
                    Else
                    {
                        Local2 |= Local1
                    }

                    NBXW (0x00020065, Local2)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB4_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB4_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Device (NCRD)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (One)
                    }
                }
            }

            Device (PB5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x10
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LNKA, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (PB6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x18, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    ^^LPC0.EC0.LANP = Arg0
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x11
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LNKB, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((^^SMBS.HPAD && Ones))
                    {
                        If ((TPOS == 0x40))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y04)
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y04._BAS, HPEB)  // _BAS: Base Address
                    Local0 = ^^SMBS.HPAD /* \_SB_.PCI0.SMBS.HPAD */
                    HPEB = (Local0 & 0xFFFFFFC0)
                    Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
                }
            }

            Device (USB0)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((PIDV == 0x3130))
                    {
                        Return (GPRW (0x0B, Zero))
                    }
                    Else
                    {
                        Return (GPRW (0x0B, 0x03))
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (ECON)
                    {
                        If (^^LPC0.EC0.SW2S)
                        {
                            ^^SMBS.UPME = One
                        }
                        Else
                        {
                            ^^SMBS.UPME = Zero
                        }
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x00120001)  // _ADR: Address
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((PIDV == 0x3130))
                    {
                        Return (GPRW (0x0B, Zero))
                    }
                    Else
                    {
                        Return (GPRW (0x0B, 0x03))
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (ECON)
                    {
                        If (^^LPC0.EC0.SW2S)
                        {
                            ^^SMBS.UPME = One
                        }
                        Else
                        {
                            ^^SMBS.UPME = Zero
                        }
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x00130001)  // _ADR: Address
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT0)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, ToPLD (
                            PLD_Revision       = 0x1,
                            PLD_IgnoreColor    = 0x1,
                            PLD_Red            = 0x0,
                            PLD_Green          = 0x0,
                            PLD_Blue           = 0x0,
                            PLD_Width          = 0x0,
                            PLD_Height         = 0x0,
                            PLD_UserVisible    = 0x0,
                            PLD_Dock           = 0x0,
                            PLD_Lid            = 0x0,
                            PLD_Panel          = "TOP",
                            PLD_VerticalPosition = "UPPER",
                            PLD_HorizontalPosition = "LEFT",
                            PLD_Shape          = "HORIZONTALRECTANGLE",
                            PLD_GroupOrientation = 0x0,
                            PLD_GroupToken     = 0x0,
                            PLD_GroupPosition  = 0x0,
                            PLD_Bay            = 0x0,
                            PLD_Ejectable      = 0x0,
                            PLD_EjectRequired  = 0x0,
                            PLD_CabinetNumber  = 0x0,
                            PLD_CardCageNumber = 0x0,
                            PLD_Reference      = 0x0,
                            PLD_Rotation       = 0x0,
                            PLD_Order          = 0x0,
                            PLD_VerticalOffset = 0x0,
                            PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT0)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, ToPLD (
                            PLD_Revision       = 0x1,
                            PLD_IgnoreColor    = 0x1,
                            PLD_Red            = 0x0,
                            PLD_Green          = 0x0,
                            PLD_Blue           = 0x0,
                            PLD_Width          = 0x0,
                            PLD_Height         = 0x0,
                            PLD_UserVisible    = 0x0,
                            PLD_Dock           = 0x0,
                            PLD_Lid            = 0x1,
                            PLD_Panel          = "FRONT",
                            PLD_VerticalPosition = "UPPER",
                            PLD_HorizontalPosition = "RIGHT",
                            PLD_Shape          = "VERTICALRECTANGLE",
                            PLD_GroupOrientation = 0x0,
                            PLD_GroupToken     = 0x0,
                            PLD_GroupPosition  = 0x0,
                            PLD_Bay            = 0x0,
                            PLD_Ejectable      = 0x0,
                            PLD_EjectRequired  = 0x0,
                            PLD_CabinetNumber  = 0x0,
                            PLD_CardCageNumber = 0x0,
                            PLD_Reference      = 0x0,
                            PLD_Rotation       = 0x0,
                            PLD_Order          = 0x0,
                            PLD_VerticalOffset = 0x0,
                            PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
                    }

                    Device (PRT1)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, ToPLD (
                            PLD_Revision       = 0x1,
                            PLD_IgnoreColor    = 0x1,
                            PLD_Red            = 0x0,
                            PLD_Green          = 0x0,
                            PLD_Blue           = 0x0,
                            PLD_Width          = 0x0,
                            PLD_Height         = 0x0,
                            PLD_UserVisible    = 0x0,
                            PLD_Dock           = 0x0,
                            PLD_Lid            = 0x1,
                            PLD_Panel          = "FRONT",
                            PLD_VerticalPosition = "CENTER",
                            PLD_HorizontalPosition = "CENTER",
                            PLD_Shape          = "HORIZONTALRECTANGLE",
                            PLD_GroupOrientation = 0x0,
                            PLD_GroupToken     = 0x0,
                            PLD_GroupPosition  = 0x0,
                            PLD_Bay            = 0x0,
                            PLD_Ejectable      = 0x0,
                            PLD_EjectRequired  = 0x0,
                            PLD_CabinetNumber  = 0x0,
                            PLD_CardCageNumber = 0x0,
                            PLD_Reference      = 0x0,
                            PLD_Rotation       = 0x0,
                            PLD_Order          = 0x0,
                            PLD_VerticalOffset = 0x0,
                            PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT3)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, ToPLD (
                            PLD_Revision       = 0x1,
                            PLD_IgnoreColor    = 0x1,
                            PLD_Red            = 0x0,
                            PLD_Green          = 0x0,
                            PLD_Blue           = 0x0,
                            PLD_Width          = 0x0,
                            PLD_Height         = 0x0,
                            PLD_UserVisible    = 0x0,
                            PLD_Dock           = 0x0,
                            PLD_Lid            = 0x0,
                            PLD_Panel          = "TOP",
                            PLD_VerticalPosition = "UPPER",
                            PLD_HorizontalPosition = "LEFT",
                            PLD_Shape          = "HORIZONTALRECTANGLE",
                            PLD_GroupOrientation = 0x0,
                            PLD_GroupToken     = 0x0,
                            PLD_GroupPosition  = 0x0,
                            PLD_Bay            = 0x0,
                            PLD_Ejectable      = 0x0,
                            PLD_EjectRequired  = 0x0,
                            PLD_CabinetNumber  = 0x0,
                            PLD_CardCageNumber = 0x0,
                            PLD_Reference      = 0x0,
                            PLD_Rotation       = 0x0,
                            PLD_Order          = 0x0,
                            PLD_VerticalOffset = 0x0,
                            PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x03))
                }
            }

            Device (USB6)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, ToPLD (
                            PLD_Revision       = 0x1,
                            PLD_IgnoreColor    = 0x1,
                            PLD_Red            = 0x0,
                            PLD_Green          = 0x0,
                            PLD_Blue           = 0x0,
                            PLD_Width          = 0x0,
                            PLD_Height         = 0x0,
                            PLD_UserVisible    = 0x0,
                            PLD_Dock           = 0x0,
                            PLD_Lid            = 0x1,
                            PLD_Panel          = "FRONT",
                            PLD_VerticalPosition = "UPPER",
                            PLD_HorizontalPosition = "CENTER",
                            PLD_Shape          = "HORIZONTALRECTANGLE",
                            PLD_GroupOrientation = 0x0,
                            PLD_GroupToken     = 0x0,
                            PLD_GroupPosition  = 0x0,
                            PLD_Bay            = 0x0,
                            PLD_Ejectable      = 0x0,
                            PLD_EjectRequired  = 0x0,
                            PLD_CabinetNumber  = 0x0,
                            PLD_CardCageNumber = 0x0,
                            PLD_Reference      = 0x0,
                            PLD_Rotation       = 0x0,
                            PLD_Order          = 0x0,
                            PLD_VerticalOffset = 0x0,
                            PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x03))
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (IRQF, PCI_Config, Zero, 0xFF)
                Field (IRQF, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    RVID,   8, 
                    Offset (0x52), 
                    GP53,   1, 
                    GP54,   1, 
                    GP55,   1, 
                    Offset (0x54), 
                    GP57,   1, 
                    GP58,   1, 
                    GP59,   1, 
                    Offset (0x56), 
                    GP61,   1, 
                    GP62,   1, 
                    GP63,   1, 
                    Offset (0x5A), 
                    GP70,   1, 
                    GP71,   1, 
                    Offset (0x62), 
                    IRQK,   1, 
                    IRQM,   1, 
                    Offset (0x63), 
                    Offset (0x82), 
                    GP13,   1, 
                    Offset (0xAD), 
                    SA1E,   1, 
                        ,   3, 
                    SA2E,   1, 
                    Offset (0xB4), 
                    HPAD,   32
                }

                OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
                Field (PMIO, ByteAcc, NoLock, Preserve)
                {
                    INPM,   8, 
                    DAPM,   8
                }

                IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
                {
                        ,   1, 
                    TM1E,   1, 
                    TM2E,   1, 
                    Offset (0x01), 
                        ,   1, 
                    TM1S,   1, 
                    TM2S,   1, 
                    Offset (0x04), 
                        ,   7, 
                    SLPS,   1, 
                    Offset (0x1C), 
                        ,   3, 
                    MKME,   1, 
                    PI3E,   1, 
                    PI2E,   1, 
                    PI1E,   1, 
                    PI0E,   1, 
                        ,   3, 
                    MKMS,   1, 
                    PI3S,   1, 
                    PI2S,   1, 
                    PI1S,   1, 
                    PI0S,   1, 
                    Offset (0x36), 
                    GE0T,   1, 
                    GE1T,   1, 
                    GE2T,   1, 
                    GE3T,   1, 
                    GE4T,   1, 
                    GE5T,   1, 
                    GE6T,   1, 
                    GE7T,   1, 
                    Offset (0x38), 
                        ,   1, 
                    GM4C,   1, 
                    GM5C,   1, 
                        ,   1, 
                    GM6C,   1, 
                    Offset (0x55), 
                    SPRE,   1, 
                    Offset (0x61), 
                        ,   6, 
                    UPME,   1, 
                    Offset (0x65), 
                        ,   4, 
                    RS3U,   1, 
                    RSTU,   1, 
                    Offset (0x68), 
                        ,   3, 
                    TPDE,   1, 
                        ,   1, 
                    Offset (0x92), 
                    GEVS,   8
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Mutex (PSMX, 0x00)
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((^^^SMBS.HPAD && Ones))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((^^^SMBS.HPAD && Ones))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TMR_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TMR_.BUF1 */
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x19, 
                        0x03
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If (ECON)
                        {
                            KBWU = Arg0
                        }
                    }
                }

                Device (PS2M)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return ("*SYN014C")
                    }

                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN0100"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x19, 
                        0x03
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If (ECON)
                        {
                            TPWU = Arg0
                        }
                    }
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x077A,             // Range Minimum
                            0x077A,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                    })
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFF00000,         // Address Base
                            0x00100000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BFFR, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                        })
                        Return (BFFR) /* \_SB_.PCI0.LPC0.EC0_._CRS.BFFR */
                    }

                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        SMPR,   8, 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCM,   8, 
                        SMD0,   256, 
                        BCNT,   8, 
                        SMAA,   8, 
                        BATD,   16, 
                        Offset (0x40), 
                        SW2S,   1, 
                            ,   3, 
                        TAPM,   1, 
                        Offset (0x41), 
                        WIN7,   1, 
                            ,   3, 
                        CFAN,   1, 
                        PFN2,   1, 
                        WOLF,   1, 
                        PFLG,   1, 
                            ,   4, 
                        LBST,   1, 
                        Offset (0x43), 
                        BBDA,   1, 
                            ,   4, 
                        TFAN,   1, 
                        Offset (0x44), 
                            ,   1, 
                        DSMP,   1, 
                        Offset (0x45), 
                        LANE,   1, 
                        Offset (0x4E), 
                        LIDE,   1, 
                            ,   2, 
                        TLDP,   1, 
                        Offset (0x52), 
                        LIDS,   1, 
                        WBSS,   1, 
                            ,   1, 
                        TLID,   1, 
                        Offset (0x58), 
                        RTMP,   8, 
                        ECT1,   8, 
                        ECT2,   8, 
                        RG5B,   8, 
                        FSPD,   16, 
                        Offset (0x5F), 
                        CFN2,   1, 
                        SFN2,   1, 
                        Offset (0x67), 
                        PWPE,   8, 
                        Offset (0x70), 
                        BADC,   16, 
                        BFCC,   16, 
                        BADV,   16, 
                        Offset (0x7E), 
                        BATP,   8, 
                        Offset (0x82), 
                        MBST,   8, 
                        MCUR,   16, 
                        MBRM,   16, 
                        MBCV,   16, 
                        Offset (0xA0), 
                        QBHK,   8, 
                            ,   5, 
                        Offset (0xA2), 
                        QBBB,   8, 
                        SARS,   8, 
                        MBTS,   1, 
                        MBTF,   1, 
                            ,   5, 
                        LLBW,   1, 
                        MBTC,   1, 
                            ,   2, 
                        MBNH,   1, 
                        Offset (0xA6), 
                        BA1C,   8, 
                        Offset (0xAA), 
                            ,   7, 
                        RCDS,   1, 
                        Offset (0xAF), 
                        MCER,   8, 
                        Offset (0xB4), 
                        Q8EF,   8, 
                        Offset (0xBC), 
                        MCEA,   8, 
                        Offset (0xC3), 
                        RPM1,   8, 
                        RPM2,   8, 
                        Offset (0xCF), 
                        DLYC,   8, 
                        EBPL,   1, 
                        Offset (0xD2), 
                            ,   6, 
                        APWR,   1, 
                        DLYE,   1, 
                        Offset (0xD6), 
                        DBPL,   8, 
                        Offset (0xDA), 
                        EPRW,   8, 
                        PSKB,   1, 
                        PSTP,   1, 
                        PSBA,   1, 
                        LANP,   1, 
                        Offset (0xDF), 
                        ECBW,   1, 
                        Offset (0xE0), 
                        DLYT,   8, 
                        DLY1,   8, 
                        BRTL,   8, 
                        Offset (0xE6), 
                        SFHK,   8, 
                        GQKS,   7
                    }

                    Name (FNF4, Zero)
                    Name (HTCD, Zero)
                    Name (ACPU, Zero)
                    Name (BATO, Zero)
                    Name (BATN, Zero)
                    Name (BATF, 0xC0)
                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x03) && (Arg1 == One)))
                        {
                            ECON = One
                            W7OS ()
                        }

                        DLY1 = 0x78
                        ACPU = One
                    }

                    Method (BPOL, 1, NotSerialized)
                    {
                        DBPL = Arg0
                        EBPL = One
                    }

                    Method (BPOM, 0, NotSerialized)
                    {
                        DBPL = Zero
                        EBPL = Zero
                    }

                    Name (_GPE, 0x03)  // _GPE: General Purpose Events
                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If ((FNF4 == Zero))
                        {
                            Notify (BAT0, 0x80) // Status Change
                            Notify (ACAD, 0x80) // Status Change
                        }
                        Else
                        {
                            FNF4 = Zero
                        }

                        If ((^^^^WMID.WMI5 == 0x05))
                        {
                            ^^^^WMID.WEID = 0x05
                            ^^^^WMID.WEDT = Zero
                            Notify (WMID, 0x80) // Status Change
                            ^^^^WMID.WMI5 = Zero
                        }

                        If ((HTCD == One))
                        {
                            HTCD = Zero
                            TRAP (0x07)
                        }
                        Else
                        {
                            If ((ACPU == One))
                            {
                                ACPU = Zero
                                CPUS ()
                            }
                        }
                    }

                    Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        CPUS ()
                        GBAS ()
                        If ((0x40 & BATF))
                        {
                            Notify (BAT0, 0x81) // Information Change
                        }

                        If ((0x02 & BATF))
                        {
                            Notify (ACAD, 0x80) // Status Change
                        }

                        Notify (BAT0, 0x80) // Status Change
                        BPOL (0x05)
                    }

                    Method (GBAS, 0, NotSerialized)
                    {
                        BATF = Zero
                        Local0 = MBTS /* \_SB_.PCI0.LPC0.EC0_.MBTS */
                        Local1 = SW2S /* \_SB_.PCI0.LPC0.EC0_.SW2S */
                        Local0 <<= 0x06
                        Local1 <<= One
                        If (((BATO & 0x40) != Local0))
                        {
                            BATF |= 0x40
                        }

                        If (((BATO & 0x02) != Local1))
                        {
                            BATF |= 0x02
                        }

                        BATO = BATF /* \_SB_.PCI0.LPC0.EC0_.BATF */
                    }

                    Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Notify (ACAD, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                        CPUS ()
                    }

                    Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If ((WIN7 == One))
                        {
                            LLBW = Zero
                            Notify (BAT0, 0x80) // Status Change
                        }
                    }

                    Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "_Q80 : Temperature Up/Down"
                        Notify (\_TZ.THRM, 0x80) // Thermal Status Change
                    }

                    Method (_Q8A, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If (LIDE)
                        {
                            Debug = "_Q8A : LID Switch Event"
                            LIDE = Zero
                            Notify (LID, 0x80) // Status Change
                        }

                        If (TLDP)
                        {
                            Debug = "_Q8A : Tablet LID Switch Event"
                            ^^^^WMID.WEID = One
                            ^^^^WMID.WEDT = Zero
                            Notify (WMID, 0x80) // Status Change
                            Sleep (0xC8)
                            TLDP = Zero
                        }
                    }

                    Mutex (VGMX, 0x00)
                    Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "_Q0D : Switch Display (Fn+F4)"
                        If ((FNF4 == Zero))
                        {
                            BCMD = 0x70
                            BSMI (Zero)
                            GNSD ()
                            If (VGAF)
                            {
                                ^^^PB2.DVGA.LCDA = (NSTE & One)
                                ^^^PB2.DVGA.CRTA = ((NSTE & 0x02) >> One)
                                ^^^PB2.DVGA.TV0A = ((NSTE & 0x04) >> 0x02)
                                ^^^PB2.DVGA.HDTV = ((NSTE & 0x10) >> 0x04)
                                ^^^PB2.DVGA.CV0A = ((NSTE & 0x20) >> 0x05)
                                Notify (^^^PB2.DVGA, 0x80) // Status Change
                            }
                            Else
                            {
                                ^^^AGP.VGA.LCDA = (NSTE & One)
                                ^^^AGP.VGA.CRTA = ((NSTE & 0x02) >> One)
                                ^^^AGP.VGA.TV0A = ((NSTE & 0x04) >> 0x02)
                                ^^^AGP.VGA.HDTV = ((NSTE & 0x10) >> 0x04)
                                ^^^AGP.VGA.CV0A = ((NSTE & 0x20) >> 0x05)
                                Notify (^^^AGP.VGA, 0x80) // Status Change
                            }

                            FNF4 = One
                            DLYT = 0x03
                        }
                    }

                    Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Notify (SLPB, 0x80) // Status Change
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If ((TPOS == 0x40))
                        {
                            If (VGAF)
                            {
                                Notify (^^^PB2.DVGA.LCD, 0x86) // Device-Specific
                            }
                            Else
                            {
                                Notify (^^^AGP.VGA.LCD, 0x86) // Device-Specific
                            }
                        }
                        Else
                        {
                            BRXP (One)
                        }

                        Sleep (0x32)
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If ((TPOS == 0x40))
                        {
                            If (VGAF)
                            {
                                Notify (^^^PB2.DVGA.LCD, 0x87) // Device-Specific
                            }
                            Else
                            {
                                Notify (^^^AGP.VGA.LCD, 0x87) // Device-Specific
                            }
                        }
                        Else
                        {
                            BRXP (0x02)
                        }

                        Sleep (0x32)
                    }

                    Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "!!! Wireless Button pressed !!!"
                        If (BTLS)
                        {
                            BTLS = Zero
                            ^^^SMBS.GP13 = Zero
                            ^^^SMBS.GP70 = Zero
                        }
                        Else
                        {
                            BTLS = One
                            If (^^^^WMID.WMIF)
                            {
                                If (BWLS)
                                {
                                    ^^^SMBS.GP13 = One
                                }
                            }
                            Else
                            {
                                ^^^SMBS.GP13 = One
                            }

                            If (^^^^WMID.WMIF)
                            {
                                If (WWLS)
                                {
                                    ^^^SMBS.GP70 = One
                                }
                            }
                            Else
                            {
                                ^^^SMBS.GP70 = One
                            }
                        }

                        ^^^^WMID.WEID = 0x05
                        ^^^^WMID.WEDT = Zero
                        Notify (WMID, 0x80) // Status Change
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "!!! DVD/Music Button pressed !!!"
                        ^^^^WMID.WEID = 0x04
                        ^^^^WMID.WEDT = Zero
                        Notify (WMID, 0x80) // Status Change
                    }

                    Method (_Q8E, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "!!! Increase CPU P State. !!!"
                        If ((PPCM > One))
                        {
                            If ((PPCM > 0x03))
                            {
                                Local1 = (PPCM - 0x02)
                            }
                            Else
                            {
                                Local1 = PPCM /* \PPCM */
                            }

                            Local0 = \_PR.CPU0._PPC /* External reference */
                            If ((Local0 < Local1))
                            {
                                Local0 += One
                            }

                            \_PR.CPU0._PPC = Local0
                            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                            If ((ECPU > One))
                            {
                                \_PR.CPU1._PPC = Local0
                                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                            }

                            If ((Local0 == Local1))
                            {
                                Q8EF = One
                            }
                            Else
                            {
                                Q8EF = 0xFF
                            }
                        }
                    }

                    Method (_Q8F, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "!!! Decrease CPU P State !!!"
                        If ((PPCM > One))
                        {
                            Local0 = \_PR.CPU0._PPC /* External reference */
                            If (Local0)
                            {
                                Local0 -= One
                                \_PR.CPU0._PPC = Local0
                                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                                If ((ECPU > One))
                                {
                                    \_PR.CPU1._PPC = Local0
                                    Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                                }
                            }

                            If ((Local0 == Zero))
                            {
                                Q8EF = Zero
                            }
                            Else
                            {
                                Q8EF = 0xFF
                            }
                        }
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        SMW0,   16
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        SMB0,   8
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        FLD0,   64
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        FLD1,   128
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        FLD2,   192
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        FLD3,   256
                    }

                    Mutex (MUT0, 0x00)
                    Method (SMRD, 4, NotSerialized)
                    {
                        If (!ECON)
                        {
                            Return (0xFF)
                        }

                        If ((Arg0 != 0x07))
                        {
                            If ((Arg0 != 0x09))
                            {
                                If ((Arg0 != 0x0B))
                                {
                                    Return (0x19)
                                }
                            }
                        }

                        Acquire (MUT0, 0xFFFF)
                        Local0 = 0x04
                        While ((Local0 > One))
                        {
                            SMST &= 0x40
                            SMCM = Arg2
                            SMAD = Arg1
                            SMPR = Arg0
                            Local3 = Zero
                            While (!Local1 = (SMST & 0xBF))
                            {
                                Sleep (0x02)
                                Local3++
                                If ((Local3 == 0x32))
                                {
                                    SMST &= 0x40
                                    SMCM = Arg2
                                    SMAD = Arg1
                                    SMPR = Arg0
                                    Local3 = Zero
                                }
                            }

                            If ((Local1 == 0x80))
                            {
                                Local0 = Zero
                            }
                            Else
                            {
                                Local0--
                            }
                        }

                        If (Local0)
                        {
                            Local0 = (Local1 & 0x1F)
                        }
                        Else
                        {
                            If ((Arg0 == 0x07))
                            {
                                Arg3 = SMB0 /* \_SB_.PCI0.LPC0.EC0_.SMB0 */
                            }

                            If ((Arg0 == 0x09))
                            {
                                Arg3 = SMW0 /* \_SB_.PCI0.LPC0.EC0_.SMW0 */
                            }

                            If ((Arg0 == 0x0B))
                            {
                                Local3 = BCNT /* \_SB_.PCI0.LPC0.EC0_.BCNT */
                                Local2 = (0x0100 >> 0x03)
                                If ((Local3 > Local2))
                                {
                                    Local3 = Local2
                                }

                                If ((Local3 < 0x09))
                                {
                                    Local2 = FLD0 /* \_SB_.PCI0.LPC0.EC0_.FLD0 */
                                }
                                Else
                                {
                                    If ((Local3 < 0x11))
                                    {
                                        Local2 = FLD1 /* \_SB_.PCI0.LPC0.EC0_.FLD1 */
                                    }
                                    Else
                                    {
                                        If ((Local3 < 0x19))
                                        {
                                            Local2 = FLD2 /* \_SB_.PCI0.LPC0.EC0_.FLD2 */
                                        }
                                        Else
                                        {
                                            Local2 = FLD3 /* \_SB_.PCI0.LPC0.EC0_.FLD3 */
                                        }
                                    }
                                }

                                Local3++
                                Local4 = Buffer (Local3) {}
                                Local3--
                                Local5 = Zero
                                While ((Local3 > Local5))
                                {
                                    GBFE (Local2, Local5, RefOf (Local6))
                                    PBFE (Local4, Local5, Local6)
                                    Local5++
                                }

                                PBFE (Local4, Local5, Zero)
                                Arg3 = Local4
                            }
                        }

                        Release (MUT0)
                        Return (Local0)
                    }

                    Method (SMWR, 4, NotSerialized)
                    {
                        If (!ECON)
                        {
                            Return (0xFF)
                        }

                        If ((Arg0 != 0x06))
                        {
                            If ((Arg0 != 0x08))
                            {
                                If ((Arg0 != 0x0A))
                                {
                                    Return (0x19)
                                }
                            }
                        }

                        Acquire (MUT0, 0xFFFF)
                        Local0 = 0x04
                        While ((Local0 > One))
                        {
                            If ((Arg0 == 0x06))
                            {
                                SMB0 = Arg3
                            }

                            If ((Arg0 == 0x08))
                            {
                                SMW0 = Arg3
                            }

                            If ((Arg0 == 0x0A))
                            {
                                SMD0 = Arg3
                            }

                            SMST &= 0x40
                            SMCM = Arg2
                            SMAD = Arg1
                            SMPR = Arg0
                            Local3 = Zero
                            While (!Local1 = (SMST & 0xBF))
                            {
                                Sleep (0x02)
                                Local3++
                                If ((Local3 == 0x32))
                                {
                                    SMST &= 0x40
                                    SMCM = Arg2
                                    SMAD = Arg1
                                    SMPR = Arg0
                                    Local3 = Zero
                                }
                            }

                            If ((Local1 == 0x80))
                            {
                                Local0 = Zero
                            }
                            Else
                            {
                                Local0--
                            }
                        }

                        If (Local0)
                        {
                            Local0 = (Local1 & 0x1F)
                        }

                        Release (MUT0)
                        Return (Local0)
                    }

                    Method (GSHK, 0, Serialized)
                    {
                        If (ECON)
                        {
                            Local0 = SFHK /* \_SB_.PCI0.LPC0.EC0_.SFHK */
                        }

                        Return (Local0)
                    }

                    Method (SSHK, 1, Serialized)
                    {
                        If (ECON)
                        {
                            SFHK = Arg0
                        }
                    }

                    Name (DISS, Buffer (0x0A)
                    {
                        /* 0000 */  0x01, 0x02, 0x04, 0x10, 0x20, 0x03, 0x05, 0x11,  /* .... ... */
                        /* 0008 */  0x21, 0x01                                       /* !. */
                    })
                    Name (SWII, 0x0A)
                    Method (GNSD, 0, Serialized)
                    {
                        Local0 = Zero
                        Local1 = CSTE /* \CSTE */
                        Local2 = ADDL /* \ADDL */
                        While ((Local0 < SWII))
                        {
                            Local3 = DerefOf (Index (DISS, Local0))
                            If ((Local3 == Local1))
                            {
                                While ((Local0 < SWII))
                                {
                                    Local4 = Local0
                                    Local4++
                                    Local5 = DerefOf (Index (DISS, Local4))
                                    If (((Local2 & Local5) == Local5))
                                    {
                                        NSTE = Local5
                                        Local0 = SWII /* \_SB_.PCI0.LPC0.EC0_.SWII */
                                    }
                                    Else
                                    {
                                        Local0++
                                    }
                                }
                            }
                            Else
                            {
                                Local0++
                            }
                        }
                    }

                    Method (CPUS, 0, NotSerialized)
                    {
                        Q8EF = 0xFF
                        If ((SW2S == One))
                        {
                            HTCD = Zero
                            TRAP (0x06)
                            Local0 = Zero
                        }
                        Else
                        {
                            DLYT = 0x1E
                            HTCD = One
                            If ((PPCM > 0x03))
                            {
                                Local0 = (PPCM - 0x02)
                            }
                            Else
                            {
                                Local0 = One
                            }
                        }

                        \_PR.CPU0._PPC = Local0
                        Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                        If ((ECPU > One))
                        {
                            \_PR.CPU1._PPC = Local0
                            Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                        }
                    }

                    Method (KTWU, 0, NotSerialized)
                    {
                        If (ECON)
                        {
                            PSKB = KBWU /* \KBWU */
                            PSTP = TPWU /* \TPWU */
                        }
                        Else
                        {
                            PSKB = Zero
                            PSTP = Zero
                        }
                    }

                    Method (W7OS, 0, NotSerialized)
                    {
                        If (ECON)
                        {
                            WIN7 = Zero
                            If ((OSTB == 0x42))
                            {
                                WIN7 = One
                                LBST = Zero
                            }
                        }
                        Else
                        {
                            WIN7 = Zero
                        }
                    }
                }

                Device (CIR)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return ("*ENE0100")
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUFA, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0380,             // Range Minimum
                                0x0380,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                        })
                        Return (BUFA) /* \_SB_.PCI0.LPC0.CIR_._CRS.BUFA */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IO (Decode16,
                            0x0380,             // Range Minimum
                            0x0380,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {4}
                    })
                }

                OperationRegion (LCLM, SystemIO, 0x0C50, 0x03)
                Field (LCLM, ByteAcc, NoLock, Preserve)
                {
                    CLMI,   8, 
                    CLMD,   8, 
                    CLGP,   8
                }

                IndexField (CLMI, CLMD, ByteAcc, NoLock, Preserve)
                {
                    IDRG,   8, 
                    Offset (0x02), 
                    TSTS,   8, 
                    TINT,   8, 
                    Offset (0x12), 
                    I2CC,   8, 
                    GPIO,   8
                }

                Method (RGPM, 0, NotSerialized)
                {
                    Local0 = GPIO /* \_SB_.PCI0.LPC0.GPIO */
                    Local0 &= 0xFFFFFF3F
                    GPIO = Local0
                    Local1 = CLGP /* \_SB_.PCI0.LPC0.CLGP */
                    Return (Local1)
                }
            }

            Device (P2P)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                OperationRegion (PCPC, PCI_Config, Zero, 0xFF)
                Field (PCPC, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    PCMD,   8, 
                    Offset (0x1C), 
                    IOW1,   8, 
                    IOW2,   8, 
                    Offset (0x48), 
                    PR48,   8, 
                    PR49,   8, 
                    PR4A,   8, 
                    PR4B,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((GPIC == Zero))
                    {
                        Return (PIC) /* \_SB_.PCI0.P2P_.PIC_ */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.P2P_.APIC */
                    }
                }

                Name (PIC, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0004FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        Zero, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        One, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x02, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x03, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (APIC, Package (0x0E)
                {
                    Package (0x04)
                    {
                        0x0004FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        Zero, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        One, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x02, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x03, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0007FFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PLD, ToPLD (
                            PLD_Revision       = 0x1,
                            PLD_IgnoreColor    = 0x1,
                            PLD_Red            = 0x0,
                            PLD_Green          = 0x0,
                            PLD_Blue           = 0x0,
                            PLD_Width          = 0x0,
                            PLD_Height         = 0x0,
                            PLD_UserVisible    = 0x0,
                            PLD_Dock           = 0x0,
                            PLD_Lid            = 0x0,
                            PLD_Panel          = "TOP",
                            PLD_VerticalPosition = "UPPER",
                            PLD_HorizontalPosition = "LEFT",
                            PLD_Shape          = "ROUND",
                            PLD_GroupOrientation = 0x0,
                            PLD_GroupToken     = 0x0,
                            PLD_GroupPosition  = 0x0,
                            PLD_Bay            = 0x1,
                            PLD_Ejectable      = 0x0,
                            PLD_EjectRequired  = 0x0,
                            PLD_CabinetNumber  = 0x0,
                            PLD_CardCageNumber = 0x0,
                            PLD_Reference      = 0x0,
                            PLD_Rotation       = 0x0,
                            PLD_Order          = 0x0,
                            PLD_VerticalOffset = 0x0,
                            PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
                    }
                }
            }

            Device (IDE)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x5A, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    Zero, 
                    Zero
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    Zero
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    Zero
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, WordAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F)
                    Local1 = (Arg0 >> 0x04)
                    Return ((0x1E * ((Local0 + One) + (Local1 + One)
                        )))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, PIT1)
                    CreateByteField (Arg0, One, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           /* .... */
                    })
                    CreateDWordField (BUF, Zero, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If ((PICX & One))
                    {
                        Return (BUF) /* \_SB_.PCI0.IDE_.GTM_.BUF_ */
                    }

                    PIO0 = GETT (PIT0)
                    PIO1 = GETT (PIT1)
                    If ((UDCX & One))
                    {
                        FLAG |= One
                        DMA0 = DerefOf (Index (UDMT, (UDMX & 0x0F)))
                    }
                    Else
                    {
                        If ((MDT0 != 0xFF))
                        {
                            DMA0 = GETT (MDT0)
                        }
                    }

                    If ((UDCX & 0x02))
                    {
                        FLAG |= 0x04
                        DMA1 = DerefOf (Index (UDMT, (UDMX >> 0x04)))
                    }
                    Else
                    {
                        If ((MDT1 != 0xFF))
                        {
                            DMA1 = GETT (MDT1)
                        }
                    }

                    FLAG |= 0x1A
                    Return (BUF) /* \_SB_.PCI0.IDE_.GTM_.BUF_ */
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, Zero, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                    })
                    CreateByteField (BUF, Zero, PIT1)
                    CreateByteField (BUF, One, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Local0 = Match (PIOT, MLE, PIO0, MTR, Zero, Zero)
                    Divide (Local0, 0x05, Local0)
                    Local1 = Match (PIOT, MLE, PIO1, MTR, Zero, Zero)
                    Divide (Local1, 0x05, Local1)
                    PIMX = ((Local1 << 0x04) | Local0)
                    PIT0 = DerefOf (Index (PITR, Local0))
                    PIT1 = DerefOf (Index (PITR, Local1))
                    If ((FLAG & One))
                    {
                        Local0 = Match (UDMT, MLE, DMA0, MTR, Zero, Zero)
                        Divide (Local0, 0x06, Local0)
                        UDMX |= Local0
                        UDCX |= One
                    }
                    Else
                    {
                        If ((DMA0 != Ones))
                        {
                            Local0 = Match (MDMT, MLE, DMA0, MTR, Zero, Zero)
                            MDT0 = DerefOf (Index (MDTR, Local0))
                        }
                    }

                    If ((FLAG & 0x04))
                    {
                        Local0 = Match (UDMT, MLE, DMA1, MTR, Zero, Zero)
                        Divide (Local0, 0x06, Local0)
                        UDMX |= (Local0 << 0x04)
                        UDCX |= 0x02
                    }
                    Else
                    {
                        If ((DMA1 != Ones))
                        {
                            Local0 = Match (MDMT, MLE, DMA1, MTR, Zero, Zero)
                            MDT1 = DerefOf (Index (MDTR, Local0))
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDE_.STM_.BUF_ */
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, Zero, MDT1)
                    CreateByteField (Arg1, One, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If ((Arg0 == 0xA0))
                    {
                        Local0 = (PIMX & 0x0F)
                        Local1 = MDT0 /* \_SB_.PCI0.IDE_.GTF_.MDT0 */
                        Local2 = (UDCX & One)
                        Local3 = (UDMX & 0x0F)
                    }
                    Else
                    {
                        Local0 = (PIMX >> 0x04)
                        Local1 = MDT1 /* \_SB_.PCI0.IDE_.GTF_.MDT1 */
                        Local2 = (UDCX & 0x02)
                        Local3 = (UDMX >> 0x04)
                    }

                    Name (BUF, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,  /* ........ */
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF               /* ...... */
                    })
                    CreateByteField (BUF, One, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    CMDA = Arg0
                    CMDB = Arg0
                    PMOD = (Local0 | 0x08)
                    If (Local2)
                    {
                        DMOD = (Local3 | 0x40)
                    }
                    Else
                    {
                        If ((Local1 != 0xFF))
                        {
                            Local4 = Match (MDMT, MLE, GETT (Local1), MTR, Zero, Zero)
                            If ((Local4 < 0x03))
                            {
                                DMOD = (0x20 | Local4)
                            }
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDE_.GTF_.BUF_ */
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = PPIT /* \_SB_.PCI0.IDE_.PPIT */
                        VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                        VPIC = PPIC /* \_SB_.PCI0.IDE_.PPIC */
                        VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                        VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        PPIT = VPIT /* \_SB_.PCI0.IDE_.PRID._STM.VPIT */
                        PMDT = VMDT /* \_SB_.PCI0.IDE_.PRID._STM.VMDT */
                        PPIM = VPIM /* \_SB_.PCI0.IDE_.PRID._STM.VPIM */
                        PUDC = VUDC /* \_SB_.PCI0.IDE_.PRID._STM.VUDC */
                        PUDM = VUDM /* \_SB_.PCI0.IDE_.PRID._STM.VUDM */
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                            VPIM = PPIM /* \_SB_.PCI0.IDE_.PPIM */
                            VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                            VPIM = PPIM /* \_SB_.PCI0.IDE_.PPIM */
                            VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = SPIT /* \_SB_.PCI0.IDE_.SPIT */
                        VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                        VPIC = SPIC /* \_SB_.PCI0.IDE_.SPIC */
                        VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                        VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        SPIT = VPIT /* \_SB_.PCI0.IDE_.SECD._STM.VPIT */
                        SMDT = VMDT /* \_SB_.PCI0.IDE_.SECD._STM.VMDT */
                        SPIM = VPIM /* \_SB_.PCI0.IDE_.SECD._STM.VPIM */
                        SUDC = VUDC /* \_SB_.PCI0.IDE_.SECD._STM.VUDC */
                        SUDM = VUDM /* \_SB_.PCI0.IDE_.SECD._STM.VUDM */
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                            VPIM = SPIM /* \_SB_.PCI0.IDE_.SPIM */
                            VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                            VPIM = SPIM /* \_SB_.PCI0.IDE_.SPIM */
                            VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }

            Name (BCLT, Package (0x0D)
            {
                0x64, 
                0x32, 
                Zero, 
                0x0A, 
                0x14, 
                0x1E, 
                0x28, 
                0x32, 
                0x3C, 
                0x46, 
                0x50, 
                0x5A, 
                0x64
            })
            Name (ECBR, Package (0x0B)
            {
                0x05, 
                0x07, 
                0x09, 
                0x0D, 
                0x12, 
                0x17, 
                0x22, 
                0x2E, 
                0x3A, 
                0x48, 
                0x60
            })
            Method (SBCM, 1, NotSerialized)
            {
                Local0 = Zero
                While ((Local0 < 0x0B))
                {
                    Local1 = (Local0 + 0x02)
                    Local2 = DerefOf (Index (BCLT, Local1))
                    If ((Arg0 == Local2))
                    {
                        If (^LPC0.EC0.SW2S)
                        {
                            BRAC = Local0
                        }
                        Else
                        {
                            BRDC = Local0
                        }

                        ^LPC0.EC0.BRTL = DerefOf (Index (ECBR, Local0))
                        Local0 = 0x0B
                    }

                    Local0++
                }
            }

            Method (GBQC, 0, NotSerialized)
            {
                Local0 = Zero
                Local1 = ^LPC0.EC0.BRTL /* \_SB_.PCI0.LPC0.EC0_.BRTL */
                While ((Local0 < 0x0B))
                {
                    Local2 = DerefOf (Index (ECBR, Local0))
                    If ((Local1 == Local2))
                    {
                        Local2 = (Local0 + 0x02)
                        Local3 = DerefOf (Index (BCLT, Local2))
                        Local0 = 0x0B
                    }

                    Local0++
                }

                Return (Local3)
            }

            Method (BRXP, 1, NotSerialized)
            {
                Local0 = ^LPC0.EC0.BRTL /* \_SB_.PCI0.LPC0.EC0_.BRTL */
                Local1 = Zero
                While ((Local1 <= 0x0A))
                {
                    Local2 = DerefOf (Index (ECBR, Local1))
                    If ((Local0 == Local2))
                    {
                        If ((Arg0 == One))
                        {
                            Local1++
                        }

                        If ((Arg0 == 0x02))
                        {
                            Local1--
                        }

                        If (((Local1 <= 0x0A) && (Local1 >= Zero)))
                        {
                            ^LPC0.EC0.BRTL = DerefOf (Index (ECBR, Local1))
                            If (^LPC0.EC0.SW2S)
                            {
                                BRAC = Local1
                            }
                            Else
                            {
                                BRDC = Local1
                            }

                            Local1 = 0x0A
                        }
                        Else
                        {
                            Local1 = 0x0A
                        }
                    }

                    Local1++
                }
            }
        }

        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRS,   8, 
            Offset (0x09), 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            PIRA = Zero
            PIRB = Zero
            PIRC = Zero
            PIRD = Zero
            PIRE = Zero
            PIRF = Zero
            PIRG = Zero
            PIRH = Zero
            PIRS = Zero
        }

        Name (PRS1, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,7,10,11,12,14,15}
        })
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }

        Method (GSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE4
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
        }

        Method (S80H, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE5
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
        }

        Method (BSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xBE
            Stall (0xFF)
        }

        Name (FBAS, Zero)
        Method (VTOB, 1, NotSerialized)
        {
            Local0 = One
            Local0 <<= Arg0
            Return (Local0)
        }

        Method (BTOV, 1, NotSerialized)
        {
            Local0 = (Arg0 >> One)
            Local1 = Zero
            While (Local0)
            {
                Local1++
                Local0 >>= One
            }

            Return (Local1)
        }

        Method (MKWD, 2, NotSerialized)
        {
            If ((Arg1 & 0x80))
            {
                Local0 = 0xFFFF0000
            }
            Else
            {
                Local0 = Zero
            }

            Local0 |= Arg0
            Local0 |= (Arg1 << 0x08)
            Return (Local0)
        }

        Method (POSW, 1, NotSerialized)
        {
            If ((Arg0 & 0x8000))
            {
                If ((Arg0 == 0xFFFF))
                {
                    Return (Ones)
                }
                Else
                {
                    Local0 = ~Arg0
                    Local0++
                    Local0 &= 0xFFFF
                    Return (Local0)
                }
            }
            Else
            {
                Return (Arg0)
            }
        }

        Method (GBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            Arg2 = TIDX /* \_SB_.GBFE.TIDX */
        }

        Method (PBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            TIDX = Arg2
        }

        Method (ITOS, 1, NotSerialized)
        {
            Local0 = Buffer (0x05)
                {
                     0x20, 0x20, 0x20, 0x20, 0x20                     /*       */
                }
            Local7 = Buffer (0x11)
                {
                    "0123456789ABCDEF"
                }
            Local1 = 0x05
            Local2 = Zero
            Local3 = Zero
            While (Local1)
            {
                Local1--
                Local4 = ((Arg0 >> (Local1 << 0x02)) & 0x0F)
                GBFE (Local7, Local4, RefOf (Local5))
                PBFE (Local0, Local2, Local5)
                Local2++
            }

            Return (Local0)
        }

        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (PBIF, Package (0x0D)
            {
                One, 
                Ones, 
                Ones, 
                One, 
                Ones, 
                0xFA, 
                0x96, 
                0x0A, 
                0x19, 
                "BAT1", 
                " ", 
                " ", 
                " "
            })
            Name (PBST, Package (0x04)
            {
                Zero, 
                Ones, 
                Ones, 
                0x2710
            })
            Name (BAST, Zero)
            Name (B1ST, 0x0F)
            Name (B1WT, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (ECON)
                {
                    If (^^PCI0.LPC0.EC0.MBTS)
                    {
                        B1ST = 0x1F
                    }
                    Else
                    {
                        B1ST = 0x0F
                    }
                }
                Else
                {
                    B1ST = 0x0F
                }

                Return (B1ST) /* \_SB_.BAT0.B1ST */
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                If (ECON)
                {
                    If (^^PCI0.LPC0.EC0.MBTS)
                    {
                        UPBI ()
                    }
                    Else
                    {
                        IVBI ()
                    }
                }
                Else
                {
                    IVBI ()
                }

                Return (PBIF) /* \_SB_.BAT0.PBIF */
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                If (ECON)
                {
                    If (^^PCI0.LPC0.EC0.MBTS)
                    {
                        UPBS ()
                    }
                    Else
                    {
                        IVBS ()
                    }
                }
                Else
                {
                    IVBS ()
                }

                Return (PBST) /* \_SB_.BAT0.PBST */
            }

            Method (UPBI, 0, NotSerialized)
            {
                If (!^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x10, RefOf (Local5)))
                {
                    If ((Local5 && !(Local5 & 0x8000)))
                    {
                        Local5 >>= 0x05
                        Local5 <<= 0x05
                        Index (PBIF, 0x02) = Local5
                        Local2 = (Local5 / 0x64)
                        Local2 += One
                        Local4 = (Local2 * 0x0C)
                        Index (PBIF, 0x05) = (Local4 + 0x02)
                        Local4 = (Local2 * 0x07)
                        Index (PBIF, 0x06) = (Local4 + 0x02)
                        If ((^^PCI0.LPC0.EC0.WIN7 == One))
                        {
                            Local4 = (Local2 * 0x09)
                            FBAS = (Local4 + 0x02)
                        }
                    }
                }

                If (^^PCI0.LPC0.EC0.MBNH)
                {
                    Index (PBIF, 0x09) = "OANI$"
                    Index (PBIF, 0x0B) = "NiMH"
                }
                Else
                {
                    Index (PBIF, 0x0B) = "LION"
                }

                Index (PBIF, One) = ^^PCI0.LPC0.EC0.BADC /* \_SB_.PCI0.LPC0.EC0_.BADC */
                Index (PBIF, 0x04) = ^^PCI0.LPC0.EC0.BADV /* \_SB_.PCI0.LPC0.EC0_.BADV */
                Index (PBIF, 0x09) = "Primary"
                UPUM ()
                Index (PBIF, Zero) = One
            }

            Method (UPUM, 0, NotSerialized)
            {
                Local0 = Buffer (0x0A)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                        /* 0008 */  0x00, 0x00                                       /* .. */
                    }
                Local6 = Buffer (0x05)
                    {
                         0x36, 0x35, 0x35, 0x33, 0x35                     /* 65535 */
                    }
                Local7 = Buffer (0x05)
                    {
                         0x31, 0x32, 0x33, 0x32, 0x31                     /* 12321 */
                    }
                Index (PBIF, 0x0C) = "Hewlett-Packard"
            }

            Method (UPBS, 0, NotSerialized)
            {
                Local5 = ^^PCI0.LPC0.EC0.MBRM /* \_SB_.PCI0.LPC0.EC0_.MBRM */
                If (!(Local5 & 0x8000))
                {
                    Local5 >>= 0x05
                    Local5 <<= 0x05
                    If ((Local5 != DerefOf (Index (PBST, 0x02))))
                    {
                        Index (PBST, 0x02) = Local5
                    }
                }

                If ((^^PCI0.LPC0.EC0.WIN7 == One))
                {
                    If (((^^PCI0.LPC0.EC0.LLBW == One) && !^^PCI0.LPC0.EC0.SW2S))
                    {
                        Index (PBST, 0x02) = FBAS /* \_SB_.FBAS */
                    }
                }

                Index (PBST, 0x03) = ^^PCI0.LPC0.EC0.MBCV /* \_SB_.PCI0.LPC0.EC0_.MBCV */
                Index (PBST, Zero) = ^^PCI0.LPC0.EC0.MBST /* \_SB_.PCI0.LPC0.EC0_.MBST */
            }

            Method (IVBI, 0, NotSerialized)
            {
                Index (PBIF, One) = Ones
                Index (PBIF, 0x02) = Ones
                Index (PBIF, 0x04) = Ones
                Index (PBIF, 0x09) = "Bad"
                Index (PBIF, 0x0A) = "      "
                Index (PBIF, 0x0B) = "Bad"
                Index (PBIF, 0x0C) = "Bad"
            }

            Method (IVBS, 0, NotSerialized)
            {
                Index (PBST, Zero) = Zero
                Index (PBST, One) = Ones
                Index (PBST, 0x02) = Ones
                Index (PBST, 0x03) = 0x2710
            }
        }

        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (ACWT, Zero)
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                If (ECON)
                {
                    Local0 = ^^PCI0.LPC0.EC0.SW2S /* \_SB_.PCI0.LPC0.EC0_.SW2S */
                    If ((TPOS != 0x40))
                    {
                        If (Local0)
                        {
                            Local1 = BRAC /* \BRAC */
                        }
                        Else
                        {
                            Local1 = BRDC /* \BRDC */
                        }

                        ^^PCI0.LPC0.EC0.BRTL = DerefOf (Index (^^PCI0.ECBR, Local1))
                    }
                }
                Else
                {
                    Local0 = One
                }

                Return (Local0)
            }
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (ECON)
                {
                    If (^^PCI0.LPC0.EC0.LIDS)
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Local0 = One
                    }
                }
                Else
                {
                    Local0 = One
                }

                Return (Local0)
            }
        }

        Device (QLB0)
        {
            Name (_HID, "HPQ0007")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }
        }

        Device (WMID)
        {
            Name (WCDS, Package (0x13)
            {
                0x04, 
                0x04, 
                0x04, 
                Zero, 
                0x04, 
                0x04, 
                Zero, 
                Zero, 
                0x04, 
                0x04, 
                0x0C, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x06, 
                Zero, 
                Zero, 
                0x04
            })
            Method (CSMI, 2, Serialized)
            {
                CMTF = Arg0
                CMTI = Arg1
                APMC = 0xC1
                Return (CMTO) /* \CMTO */
            }

            Method (HWMC, 2, NotSerialized)
            {
                CreateDWordField (Arg1, Zero, SGIN)
                CreateDWordField (Arg1, 0x04, COMD)
                CreateDWordField (Arg1, 0x08, CMDT)
                CreateDWordField (Arg1, 0x0C, DSZI)
                If ((Arg0 == One))
                {
                    Local0 = Zero
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x04
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x80
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x0400
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x1000
                }

                Local1 = Buffer ((0x08 + Local0)) {}
                CreateDWordField (Local1, Zero, SIOU)
                CreateDWordField (Local1, 0x04, RETC)
                Local5 = DSZI /* \_SB_.WMID.HWMC.DSZI */
                If ((DSZI > 0x02F0))
                {
                    Local5 = 0x02F0
                }

                CreateField (Arg1, Zero, ((Local5 + 0x10) * 0x08), DAIN)
                SIOU = 0x4C494146
                RETC = 0x02
                If ((SGIN == 0x55434553))
                {
                    RETC = 0x03
                    If ((COMD == One))
                    {
                        RETC = 0x04
                        If ((CMDT == 0x05))
                        {
                            Local2 = GWLS ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x0E))
                        {
                            Local2 = GWDD ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x10))
                        {
                            Local2 = GWSD ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x07))
                        {
                            If (DSZI)
                            {
                                Local3 = DerefOf (Index (Arg1, 0x10))
                                Local2 = GBIF (Local3)
                                RETC = Zero
                            }
                            Else
                            {
                                RETC = 0x05
                            }
                        }

                        If ((CMDT == One))
                        {
                            Local2 = GDST ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x08))
                        {
                            Local2 = GBBT ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x09))
                        {
                            Local2 = GHKS ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x0A))
                        {
                            Local2 = GHKF ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x0C))
                        {
                            Local2 = GBBV ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x04))
                        {
                            Local2 = GDKS ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x13))
                        {
                            Local2 = GBBS ()
                            RETC = Zero
                        }
                    }

                    If ((COMD == 0x02))
                    {
                        RETC = 0x04
                        If (((CMDT > Zero) && (CMDT <= 0x13)))
                        {
                            If ((DSZI < DerefOf (Index (WCDS, (CMDT - One)))))
                            {
                                RETC = 0x05
                            }
                            Else
                            {
                                CreateDWordField (Arg1, 0x10, DDWD)
                                If ((CMDT == 0x05))
                                {
                                    Local2 = SWLS (DDWD)
                                    RETC = Zero
                                }

                                If ((CMDT == One))
                                {
                                    Local2 = SDST (DDWD)
                                    RETC = Zero
                                }

                                If ((CMDT == 0x09))
                                {
                                    Local2 = SHKS (DDWD)
                                    RETC = Zero
                                }

                                If ((CMDT == 0x0A))
                                {
                                    Local2 = SHKF (DDWD)
                                    RETC = Zero
                                }

                                If ((CMDT == 0x10))
                                {
                                    If ((DSZI != DerefOf (Index (WCDS, (CMDT - One)))))
                                    {
                                        RETC = 0x05
                                    }
                                    Else
                                    {
                                        CreateByteField (Arg1, 0x10, DB00)
                                        CreateByteField (Arg1, 0x11, DB01)
                                        CreateByteField (Arg1, 0x12, DB02)
                                        CreateByteField (Arg1, 0x13, DB03)
                                        CreateByteField (Arg1, 0x14, DB04)
                                        CreateByteField (Arg1, 0x15, DB05)
                                        Local2 = SWSD (DB00, DB01, DB02, DB03, DB04, DB05)
                                        RETC = Zero
                                    }
                                }

                                If ((CMDT == 0x13))
                                {
                                    Local2 = SBBS (DDWD)
                                    RETC = Zero
                                }
                            }
                        }
                    }

                    If ((COMD == 0x00020002))
                    {
                        RETC = 0x21
                        If ((CMDT == One))
                        {
                            Local2 = Package (0x03)
                                {
                                    Zero, 
                                    Zero, 
                                    Buffer (0x04)
                                    {
                                         0x00, 0x00, 0x00, 0x00                           /* .... */
                                    }
                                }
                            Index (Local2, Zero) = Zero
                            Index (Local2, One) = 0x04
                            CSMI (One, Zero)
                            Index (DerefOf (Index (Local2, 0x02)), Zero) = CMTO /* \CMTO */
                            RETC = Zero
                        }

                        If ((CMDT == 0x02))
                        {
                            Local2 = Package (0x02)
                                {
                                    Zero, 
                                    Zero
                                }
                            CSMI (0x02, DAIN)
                            RETC = CMTO /* \CMTO */
                        }

                        If ((CMDT == 0x03))
                        {
                            Local2 = Package (0x02)
                                {
                                    Zero, 
                                    Zero
                                }
                            CSMI (0x03, DAIN)
                            RETC = CMTO /* \CMTO */
                        }
                    }
                }

                If ((RETC == Zero))
                {
                    RETC = DerefOf (Index (Local2, Zero))
                    If ((RETC == Zero))
                    {
                        If ((DerefOf (Index (Local2, One)) <= Local0))
                        {
                            Local0 = Zero
                            While ((Local0 < DerefOf (Index (Local2, One))))
                            {
                                Index (Local1, (Local0 + 0x08)) = DerefOf (Index (DerefOf (Index (
                                    Local2, 0x02)), Local0))
                                Local0++
                            }

                            SIOU = 0x53534150
                        }
                        Else
                        {
                            RETC = 0x05
                        }
                    }
                }

                Return (Local1)
            }

            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (WMIF, Zero)
            Name (WEID, Zero)
            Name (WEDT, Zero)
            Name (BUFF, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Name (WMI5, Zero)
            CreateByteField (BUFF, Zero, OB0)
            CreateByteField (BUFF, One, OB1)
            CreateByteField (BUFF, 0x02, OB2)
            CreateByteField (BUFF, 0x03, OB3)
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  /* 4.._c,.E */
                /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  /* ..=D.... */
                /* 0010 */  0x41, 0x44, 0x01, 0x02, 0x79, 0x42, 0xF2, 0x95,  /* AD..yB.. */
                /* 0018 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  /* {M4C.... */
                /* 0020 */  0xC6, 0x7E, 0xF6, 0x1C, 0x80, 0x00, 0x01, 0x08,  /* .~...... */
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  /* !...f... */
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  /* ......). */
                /* 0038 */  0x41, 0x45, 0x01, 0x00, 0xD4, 0x2B, 0x99, 0xD0,  /* AE...+.. */
                /* 0040 */  0x7C, 0xA4, 0xFE, 0x4E, 0xB0, 0x72, 0x32, 0x4A,  /* |..N.r2J */
                /* 0048 */  0xEC, 0x92, 0x29, 0x6C, 0x42, 0x43, 0x01, 0x00   /* ..)lBC.. */
            })
            Method (WMAD, 3, Serialized)
            {
                Return (HWMC (Arg1, Arg2))
            }

            Method (GDST, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x1 (BIOS Read)"
                BCMD = 0x70
                BSMI (Zero)
                OB0 = ADDL /* \ADDL */
                OB1 = Zero
                OB2 = Zero
                OB3 = Zero
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x01, 0x02, 0x03, 0x04                           /* .... */
                        }
                    }
                Index (DerefOf (Index (Local0, 0x02)), Zero) = OB0 /* \_SB_.WMID.OB0_ */
                Index (DerefOf (Index (Local0, 0x02)), One) = OB1 /* \_SB_.WMID.OB1_ */
                Index (DerefOf (Index (Local0, 0x02)), 0x02) = OB2 /* \_SB_.WMID.OB2_ */
                Index (DerefOf (Index (Local0, 0x02)), 0x03) = OB3 /* \_SB_.WMID.OB3_ */
                Return (Local0)
            }

            Method (SDST, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x1 (BIOS Write)"
                Local0 = (Arg0 & 0x1F)
                BCMD = 0x70
                BSMI (Zero)
                If ((Local0 == CSTE))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
                Else
                {
                    If (VGAF)
                    {
                        If ((Local0 == One))
                        {
                            Debug = "LCD"
                            ^^PCI0.PB2.DVGA.LCDA = One
                            ^^PCI0.PB2.DVGA.CRTA = Zero
                            ^^PCI0.PB2.DVGA.TV0A = Zero
                            ^^PCI0.PB2.DVGA.HDTV = Zero
                        }

                        If ((Local0 == 0x02))
                        {
                            Debug = "CRT"
                            ^^PCI0.PB2.DVGA.LCDA = Zero
                            ^^PCI0.PB2.DVGA.CRTA = One
                            ^^PCI0.PB2.DVGA.TV0A = Zero
                            ^^PCI0.PB2.DVGA.HDTV = Zero
                        }

                        If ((Local0 == 0x03))
                        {
                            Debug = "LCD+CRT"
                            ^^PCI0.PB2.DVGA.LCDA = One
                            ^^PCI0.PB2.DVGA.CRTA = One
                            ^^PCI0.PB2.DVGA.TV0A = Zero
                            ^^PCI0.PB2.DVGA.HDTV = Zero
                        }

                        If ((Local0 == 0x04))
                        {
                            Debug = "TV"
                            ^^PCI0.PB2.DVGA.LCDA = Zero
                            ^^PCI0.PB2.DVGA.CRTA = Zero
                            ^^PCI0.PB2.DVGA.TV0A = One
                            ^^PCI0.PB2.DVGA.HDTV = Zero
                        }

                        If ((Local0 == 0x05))
                        {
                            Debug = "LCD+TV"
                            ^^PCI0.PB2.DVGA.LCDA = One
                            ^^PCI0.PB2.DVGA.CRTA = Zero
                            ^^PCI0.PB2.DVGA.TV0A = One
                            ^^PCI0.PB2.DVGA.HDTV = Zero
                        }

                        If ((Local0 == 0x06))
                        {
                            Debug = "CRT+TV"
                            ^^PCI0.PB2.DVGA.LCDA = Zero
                            ^^PCI0.PB2.DVGA.CRTA = One
                            ^^PCI0.PB2.DVGA.TV0A = One
                            ^^PCI0.PB2.DVGA.HDTV = Zero
                        }

                        If ((Local0 == 0x07))
                        {
                            Debug = "LCD+CRT+TV"
                            ^^PCI0.PB2.DVGA.LCDA = One
                            ^^PCI0.PB2.DVGA.CRTA = One
                            ^^PCI0.PB2.DVGA.TV0A = One
                            ^^PCI0.PB2.DVGA.HDTV = Zero
                        }

                        If ((Local0 == 0x10))
                        {
                            Debug = "HDMI"
                            ^^PCI0.PB2.DVGA.LCDA = Zero
                            ^^PCI0.PB2.DVGA.CRTA = Zero
                            ^^PCI0.PB2.DVGA.TV0A = Zero
                            ^^PCI0.PB2.DVGA.HDTV = One
                        }

                        If ((TPOS != 0x40))
                        {
                            Notify (PCI0, Zero) // Bus Check
                        }
                        Else
                        {
                            Notify (^^PCI0.PB2.DVGA, Zero) // Bus Check
                        }

                        Sleep (0x02EE)
                        Notify (^^PCI0.PB2.DVGA, 0x80) // Status Change
                    }
                    Else
                    {
                        If ((Local0 == One))
                        {
                            Debug = "LCD"
                            ^^PCI0.AGP.VGA.LCDA = One
                            ^^PCI0.AGP.VGA.CRTA = Zero
                            ^^PCI0.AGP.VGA.TV0A = Zero
                            ^^PCI0.AGP.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x02))
                        {
                            Debug = "CRT"
                            ^^PCI0.AGP.VGA.LCDA = Zero
                            ^^PCI0.AGP.VGA.CRTA = One
                            ^^PCI0.AGP.VGA.TV0A = Zero
                            ^^PCI0.AGP.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x03))
                        {
                            Debug = "LCD+CRT"
                            ^^PCI0.AGP.VGA.LCDA = One
                            ^^PCI0.AGP.VGA.CRTA = One
                            ^^PCI0.AGP.VGA.TV0A = Zero
                            ^^PCI0.AGP.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x04))
                        {
                            Debug = "TV"
                            ^^PCI0.AGP.VGA.LCDA = Zero
                            ^^PCI0.AGP.VGA.CRTA = Zero
                            ^^PCI0.AGP.VGA.TV0A = One
                            ^^PCI0.AGP.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x05))
                        {
                            Debug = "LCD+TV"
                            ^^PCI0.AGP.VGA.LCDA = One
                            ^^PCI0.AGP.VGA.CRTA = Zero
                            ^^PCI0.AGP.VGA.TV0A = One
                            ^^PCI0.AGP.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x06))
                        {
                            Debug = "CRT+TV"
                            ^^PCI0.AGP.VGA.LCDA = Zero
                            ^^PCI0.AGP.VGA.CRTA = One
                            ^^PCI0.AGP.VGA.TV0A = One
                            ^^PCI0.AGP.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x07))
                        {
                            Debug = "LCD+CRT+TV"
                            ^^PCI0.AGP.VGA.LCDA = One
                            ^^PCI0.AGP.VGA.CRTA = One
                            ^^PCI0.AGP.VGA.TV0A = One
                            ^^PCI0.AGP.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x10))
                        {
                            Debug = "HDMI"
                            ^^PCI0.AGP.VGA.LCDA = Zero
                            ^^PCI0.AGP.VGA.CRTA = Zero
                            ^^PCI0.AGP.VGA.TV0A = Zero
                            ^^PCI0.AGP.VGA.HDTV = One
                        }

                        If ((TPOS != 0x40))
                        {
                            Notify (PCI0, Zero) // Bus Check
                        }
                        Else
                        {
                            Notify (^^PCI0.AGP.VGA, Zero) // Bus Check
                        }

                        Sleep (0x02EE)
                        Notify (^^PCI0.AGP.VGA, 0x80) // Status Change
                    }

                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
            }

            Method (GDKS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x04 (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        One, 
                        Buffer (One)
                        {
                             0x00                                             /* . */
                        }
                    }
                If ((^^PCI0.LPC0.EC0.TLID == One))
                {
                    Local0 = Package (0x03)
                        {
                            Zero, 
                            One, 
                            Buffer (One)
                            {
                                 0x04                                             /* . */
                            }
                        }
                }

                Return (Local0)
            }

            Method (GWLS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x5 (BIOS Read)"
                WMIF = One
                Local0 = (BTWL & 0x03)
                OB0 = (Local0 | 0x20)
                Local1 = WWLS /* \WWLS */
                Local1 <<= One
                Local2 = BWLS /* \BWLS */
                Local2 <<= One
                Local3 = BTLS /* \BTLS */
                Local3 <<= 0x03
                Local1 |= Local3
                Local2 |= Local3
                If (^^PCI0.SMBS.GP70)
                {
                    If (!WWLS)
                    {
                        ^^PCI0.SMBS.GP70 = Zero
                    }

                    If (!BTLS)
                    {
                        ^^PCI0.SMBS.GP70 = Zero
                    }
                }

                If (^^PCI0.SMBS.GP13)
                {
                    If (!BWLS)
                    {
                        ^^PCI0.SMBS.GP13 = Zero
                    }

                    If (!BTLS)
                    {
                        ^^PCI0.SMBS.GP13 = Zero
                    }
                }

                Local1 |= ^^PCI0.SMBS.GP70
                Local2 |= ^^PCI0.SMBS.GP13
                OB2 = Zero
                OB1 = Zero
                Local1 |= 0x04
                Local2 |= 0x04
                If (^^PCI0.SMBS.GP70)
                {
                    Local1 |= 0x10
                }
                Else
                {
                    Local1 &= 0xEF
                }

                If ((BTWL & One))
                {
                    OB1 = Local1
                }

                If ((BTWL & 0x02))
                {
                    OB2 = Local2
                }

                OB3 = Zero
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x01, 0x02, 0x03, 0x04                           /* .... */
                        }
                    }
                Index (DerefOf (Index (Local0, 0x02)), Zero) = OB0 /* \_SB_.WMID.OB0_ */
                Index (DerefOf (Index (Local0, 0x02)), One) = OB1 /* \_SB_.WMID.OB1_ */
                Index (DerefOf (Index (Local0, 0x02)), 0x02) = OB2 /* \_SB_.WMID.OB2_ */
                Index (DerefOf (Index (Local0, 0x02)), 0x03) = OB3 /* \_SB_.WMID.OB3_ */
                Return (Local0)
            }

            Method (SWLS, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x5 (BIOS Write)"
                If ((BTWL & 0x03))
                {
                    If ((Arg0 & 0x0800))
                    {
                        If ((Arg0 & 0x08))
                        {
                            WWLS = One
                            BWLS = One
                            If (BTLS)
                            {
                                ^^PCI0.SMBS.GP70 = One
                            }

                            If (BTLS)
                            {
                                ^^PCI0.SMBS.GP13 = One
                            }
                        }
                        Else
                        {
                            WWLS = Zero
                            BWLS = Zero
                            ^^PCI0.SMBS.GP70 = Zero
                            ^^PCI0.SMBS.GP13 = Zero
                        }
                    }

                    If ((Arg0 & 0x0100))
                    {
                        If ((Arg0 & One))
                        {
                            WWLS = One
                            If (BTLS)
                            {
                                ^^PCI0.SMBS.GP70 = One
                            }
                        }
                        Else
                        {
                            WWLS = Zero
                            ^^PCI0.SMBS.GP70 = Zero
                        }
                    }

                    If ((Arg0 & 0x0200))
                    {
                        If ((Arg0 & 0x02))
                        {
                            BWLS = One
                            If (BTLS)
                            {
                                ^^PCI0.SMBS.GP13 = One
                            }
                        }
                        Else
                        {
                            BWLS = Zero
                            ^^PCI0.SMBS.GP13 = Zero
                        }
                    }

                    If (((Arg0 & 0x0700) == 0x0700))
                    {
                        If (((Arg0 & 0x07) == 0x07))
                        {
                            If (((BTWL & One) == One))
                            {
                                WWLS = One
                                ^^PCI0.SMBS.GP70 = One
                            }

                            If (((BTWL & 0x02) == 0x02))
                            {
                                BWLS = One
                                ^^PCI0.SMBS.GP13 = One
                            }

                            BTLS = One
                        }
                    }

                    W05W (One)
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x0D, 
                        Zero
                    })
                }
            }

            Method (GBIF, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x7 (BIOS Read)"
                Acquire (^^PCI0.LPC0.EC0.MUT0, 0xFFFF)
                If (!ECON)
                {
                    Local0 = Package (0x02)
                        {
                            0x0D, 
                            Zero
                        }
                    Sleep (0x96)
                    Release (^^PCI0.LPC0.EC0.MUT0)
                    Return (Local0)
                }

                If (Arg0)
                {
                    Local0 = Package (0x02)
                        {
                            0x06, 
                            Zero
                        }
                    Sleep (0x96)
                    Release (^^PCI0.LPC0.EC0.MUT0)
                    Return (Local0)
                }

                If (!^^PCI0.LPC0.EC0.MBTS)
                {
                    Local0 = Package (0x02)
                        {
                            0x06, 
                            Zero
                        }
                    Sleep (0x96)
                    Release (^^PCI0.LPC0.EC0.MUT0)
                    Return (Local0)
                }

                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80) {}
                    }
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x18, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), One))
                Index (DerefOf (Index (Local0, 0x02)), Zero) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x10, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x03))
                Index (DerefOf (Index (Local0, 0x02)), 0x02) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x0F, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x05))
                Index (DerefOf (Index (Local0, 0x02)), 0x04) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x0C, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x07))
                Index (DerefOf (Index (Local0, 0x02)), 0x06) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x17, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x09))
                Index (DerefOf (Index (Local0, 0x02)), 0x08) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x08, RefOf (Local1))
                Local1 -= 0x0AAA
                Divide (Local1, 0x0A, Local2, Local1)
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0B))
                Index (DerefOf (Index (Local0, 0x02)), 0x0A) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x09, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0D))
                Index (DerefOf (Index (Local0, 0x02)), 0x0C) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x0A, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0F))
                Index (DerefOf (Index (Local0, 0x02)), 0x0E) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x19, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x11))
                Index (DerefOf (Index (Local0, 0x02)), 0x10) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x16, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x13))
                Index (DerefOf (Index (Local0, 0x02)), 0x12) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x3F, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x15))
                Index (DerefOf (Index (Local0, 0x02)), 0x14) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x3E, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x17))
                Index (DerefOf (Index (Local0, 0x02)), 0x16) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x3D, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x19))
                Index (DerefOf (Index (Local0, 0x02)), 0x18) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x3C, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x1B))
                Index (DerefOf (Index (Local0, 0x02)), 0x1A) = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x1C, RefOf (Local1))
                Local3 = ITOS (ToBCD (Local1))
                Local2 = 0x1C
                Local4 = Zero
                Local1 = SizeOf (Local3)
                While (Local1)
                {
                    GBFE (Local3, Local4, RefOf (Local5))
                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local5)
                    Local1--
                    Local2++
                    Local4++
                }

                Index (DerefOf (Index (Local0, 0x02)), Local2) = 0x20
                Local2++
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x1B, RefOf (Local1))
                Local7 = (Local1 & 0x1F)
                Local6 = ITOS (ToBCD (Local7))
                Local7 = (Local1 & 0x01E0)
                Local7 >>= 0x05
                Local5 = ITOS (ToBCD (Local7))
                Local7 = (Local1 >> 0x09)
                Local7 += 0x07BC
                Local4 = ITOS (ToBCD (Local7))
                Local1 = 0x02
                Local7 = 0x03
                While (Local1)
                {
                    GBFE (Local5, Local7, RefOf (Local3))
                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local3)
                    Local1--
                    Local2++
                    Local7++
                }

                Index (DerefOf (Index (Local0, 0x02)), Local2) = "/"
                Local2++
                Local1 = 0x02
                Local7 = 0x03
                While (Local1)
                {
                    GBFE (Local6, Local7, RefOf (Local3))
                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local3)
                    Local1--
                    Local2++
                    Local7++
                }

                Index (DerefOf (Index (Local0, 0x02)), Local2) = "/"
                Local2++
                Local1 = 0x04
                Local7 = One
                While (Local1)
                {
                    GBFE (Local4, Local7, RefOf (Local3))
                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local3)
                    Local1--
                    Local2++
                    Local7++
                }

                Index (DerefOf (Index (Local0, 0x02)), Local2) = Zero
                ^^PCI0.LPC0.EC0.SMRD (0x0B, 0x16, 0x20, RefOf (Local1))
                Local3 = SizeOf (Local1)
                Local2 = 0x2C
                Local4 = Zero
                While (Local3)
                {
                    GBFE (Local1, Local4, RefOf (Local5))
                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local5)
                    Local3--
                    Local2++
                    Local4++
                }

                Index (DerefOf (Index (Local0, 0x02)), Local2) = Zero
                Sleep (0x96)
                Release (^^PCI0.LPC0.EC0.MUT0)
                Return (Local0)
            }

            Method (GBBT, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x8 (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80)
                        {
                            /* 0000 */  0x31, 0x01, 0x9B, 0x01, 0xAE, 0x01, 0x9D, 0x01,  /* 1....... */
                            /* 0008 */  0xB6, 0x01, 0xB7, 0x01, 0xFF, 0xFF, 0x69, 0x21,  /* ......i! */
                            /* 0010 */  0x6A, 0x21, 0x00, 0x00                           /* j!.. */
                        }
                    }
                Return (Local0)
            }

            Method (GHKS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x9 (BIOS Read)"
                Acquire (^^PCI0.LPC0.EC0.MUT0, 0xFFFF)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04) {}
                    }
                Index (DerefOf (Index (Local0, 0x02)), Zero) = ^^PCI0.LPC0.EC0.GSHK ()
                Release (^^PCI0.LPC0.EC0.MUT0)
                Return (Local0)
            }

            Method (SHKS, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x9 (BIOS Write)"
                Acquire (^^PCI0.LPC0.EC0.MUT0, 0xFFFF)
                ^^PCI0.LPC0.EC0.SSHK (Arg0)
                Release (^^PCI0.LPC0.EC0.MUT0)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GHKF, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0xA (BIOS Read)"
                Return (HKFR ())
            }

            Method (SHKF, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0xA (BIOS Write)"
                Local1 = (Arg0 & 0xFF)
                Local3 = (Arg0 & 0xFF00)
                Local2 = (Local3 >> 0x08)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04) {}
                    }
                Index (DerefOf (Index (Local0, 0x02)), Zero) = Local1
                Index (DerefOf (Index (Local0, 0x02)), One) = Local2
                If ((Arg0 == 0x01AE))
                {
                    If ((OSTB == 0x42))
                    {
                        ^^PCI0.LPC0.EC0.RCDS = One
                    }
                    Else
                    {
                        BCMD = 0x70
                        BSMI (Zero)
                        ^^PCI0.LPC0.EC0.GNSD ()
                        If (VGAF)
                        {
                            ^^PCI0.PB2.DVGA.LCDA = (NSTE & One)
                            ^^PCI0.PB2.DVGA.CRTA = ((NSTE & 0x02) >> One)
                            ^^PCI0.PB2.DVGA.TV0A = ((NSTE & 0x04) >> 0x02)
                            ^^PCI0.PB2.DVGA.HDTV = ((NSTE & 0x10) >> 0x04)
                            Notify (^^PCI0.PB2.DVGA, 0x80) // Status Change
                        }
                        Else
                        {
                            ^^PCI0.AGP.VGA.LCDA = (NSTE & One)
                            ^^PCI0.AGP.VGA.CRTA = ((NSTE & 0x02) >> One)
                            ^^PCI0.AGP.VGA.TV0A = ((NSTE & 0x04) >> 0x02)
                            ^^PCI0.AGP.VGA.HDTV = ((NSTE & 0x10) >> 0x04)
                            Notify (^^PCI0.AGP.VGA, 0x80) // Status Change
                        }

                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = NSTE /* \NSTE */
                        Index (DerefOf (Index (Local0, 0x02)), 0x03) = CSTE /* \CSTE */
                    }
                }

                Return (Local0)
            }

            Method (HKFR, 0, NotSerialized)
            {
                Acquire (^^PCI0.LPC0.EC0.MUT0, 0xFFFF)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04) {}
                    }
                If (ECON)
                {
                    Local1 = ^^PCI0.LPC0.EC0.QBHK /* \_SB_.PCI0.LPC0.EC0_.QBHK */
                }

                Release (^^PCI0.LPC0.EC0.MUT0)
                If ((Local1 == 0x0D))
                {
                    Debug = "Fn+ESC Pressed"
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x31
                    Index (DerefOf (Index (Local0, 0x02)), One) = One
                }

                If ((Local1 == One))
                {
                    Debug = "Fn+F1 Pressed"
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x9B
                    Index (DerefOf (Index (Local0, 0x02)), One) = One
                }

                If ((Local1 == 0x04))
                {
                    Debug = "Fn+F4 Pressed"
                    If ((^^PCI0.LPC0.EC0.FNF4 == Zero))
                    {
                        BCMD = 0x70
                        BSMI (Zero)
                        ^^PCI0.LPC0.EC0.GNSD ()
                        If (VGAF)
                        {
                            ^^PCI0.PB2.DVGA.LCDA = (NSTE & One)
                            ^^PCI0.PB2.DVGA.CRTA = ((NSTE & 0x02) >> One)
                            ^^PCI0.PB2.DVGA.TV0A = ((NSTE & 0x04) >> 0x02)
                            ^^PCI0.PB2.DVGA.HDTV = ((NSTE & 0x10) >> 0x04)
                            ^^PCI0.PB2.DVGA.CV0A = ((NSTE & 0x20) >> 0x05)
                            Notify (^^PCI0.PB2.DVGA, 0x80) // Status Change
                        }
                        Else
                        {
                            ^^PCI0.AGP.VGA.LCDA = (NSTE & One)
                            ^^PCI0.AGP.VGA.CRTA = ((NSTE & 0x02) >> One)
                            ^^PCI0.AGP.VGA.TV0A = ((NSTE & 0x04) >> 0x02)
                            ^^PCI0.AGP.VGA.HDTV = ((NSTE & 0x10) >> 0x04)
                            ^^PCI0.AGP.VGA.CV0A = ((NSTE & 0x20) >> 0x05)
                            Notify (^^PCI0.AGP.VGA, 0x80) // Status Change
                        }

                        Index (DerefOf (Index (Local0, 0x02)), Zero) = 0xAE
                        Index (DerefOf (Index (Local0, 0x02)), One) = One
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = NSTE /* \NSTE */
                        Index (DerefOf (Index (Local0, 0x02)), 0x03) = CSTE /* \CSTE */
                        ^^PCI0.LPC0.EC0.FNF4 = One
                        ^^PCI0.LPC0.EC0.DLYT = 0x03
                    }
                }

                If ((Local1 == 0x06))
                {
                    Debug = "Fn+F6 Pressed"
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x9D
                    Index (DerefOf (Index (Local0, 0x02)), One) = One
                }

                If ((Local1 == 0x07))
                {
                    Debug = "Fn+F7 Pressed"
                    If ((TPOS == 0x40))
                    {
                        If (VGAF)
                        {
                            Notify (^^PCI0.PB2.DVGA.LCD, 0x87) // Device-Specific
                        }
                        Else
                        {
                            Notify (^^PCI0.AGP.VGA.LCD, 0x87) // Device-Specific
                        }
                    }
                    Else
                    {
                        ^^PCI0.BRXP (0x02)
                    }

                    Sleep (0x32)
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0xB6
                    Index (DerefOf (Index (Local0, 0x02)), One) = One
                }

                If ((Local1 == 0x08))
                {
                    Debug = "Fn+F8 Pressed"
                    If ((TPOS == 0x40))
                    {
                        If (VGAF)
                        {
                            Notify (^^PCI0.PB2.DVGA.LCD, 0x86) // Device-Specific
                        }
                        Else
                        {
                            Notify (^^PCI0.AGP.VGA.LCD, 0x86) // Device-Specific
                        }
                    }
                    Else
                    {
                        ^^PCI0.BRXP (One)
                    }

                    Sleep (0x32)
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0xB7
                    Index (DerefOf (Index (Local0, 0x02)), One) = One
                }

                Return (Local0)
            }

            Method (GBBV, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0xC (BIOS Read)"
                Acquire (^^PCI0.LPC0.EC0.MUT0, 0xFFFF)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04) {}
                    }
                If (ECON)
                {
                    Local1 = ^^PCI0.LPC0.EC0.QBBB /* \_SB_.PCI0.LPC0.EC0_.QBBB */
                    ^^PCI0.LPC0.EC0.QBBB = Zero
                }

                If ((Local1 == One))
                {
                    If ((PFCY == 0x03))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x9D
                        Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                    }
                }

                If ((Local1 == 0x08))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x69
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                }

                If ((Local1 == 0x07))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x6A
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                }

                Release (^^PCI0.LPC0.EC0.MUT0)
                Return (Local0)
            }

            Method (GWDD, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0xE (BIOS Read)"
                Local0 = Zero
                Local2 = Buffer (0x0A)
                    {
                        /* 0000 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                        /* 0008 */  0x00, 0x00                                       /* .. */
                    }
                If ((WDI0 != 0xFF))
                {
                    Index (Local2, 0x02) = WDI0 /* \WDI0 */
                    Index (Local2, 0x03) = WDI1 /* \WDI1 */
                    Index (Local2, 0x04) = WDI2 /* \WDI2 */
                    Index (Local2, 0x05) = WDI3 /* \WDI3 */
                    Index (Local2, 0x06) = WSI0 /* \WSI0 */
                    Index (Local2, 0x07) = WSI1 /* \WSI1 */
                    Index (Local2, 0x08) = WSI2 /* \WSI2 */
                    Index (Local2, 0x09) = WSI3 /* \WSI3 */
                    Local1 = Local2
                    Local0 += 0x0A
                }

                Local2 = Package (0x03) {}
                Index (Local2, Zero) = Zero
                Index (Local2, One) = Local0
                Index (Local2, 0x02) = Local1
                Return (Local2)
            }

            Method (GWSD, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x10 (BIOS Read)"
                Local0 = Buffer (0x06)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00               /* ...... */
                    }
                TRAP (0x03)
                Index (Local0, Zero) = SID0 /* \SID0 */
                Index (Local0, One) = SID1 /* \SID1 */
                Index (Local0, 0x02) = SID2 /* \SID2 */
                Index (Local0, 0x03) = SID3 /* \SID3 */
                Index (Local0, 0x04) = SID4 /* \SID4 */
                Index (Local0, 0x05) = SID5 /* \SID5 */
                Local1 = Package (0x03)
                    {
                        Zero, 
                        0x06, 
                        Zero
                    }
                Index (Local1, 0x02) = Local0
                Return (Local1)
            }

            Method (SWSD, 6, NotSerialized)
            {
                Debug = "HP WMI Command 0x10 (BIOS Write)"
                SID0 = Arg0
                SID1 = Arg1
                SID2 = Arg2
                SID3 = Arg3
                SID4 = Arg4
                SID5 = Arg5
                TRAP (0x04)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GBBS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x13 (BIOS Read)"
                Local0 = Zero
                If (ECON)
                {
                    Local0 = ^^PCI0.LPC0.EC0.BBDA /* \_SB_.PCI0.LPC0.EC0_.BBDA */
                }

                If (Local0)
                {
                    Local1 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           /* .... */
                            }
                        }
                }
                Else
                {
                    Local1 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Unicode ("\x01")
                        }
                }

                Return (Local1)
            }

            Method (SBBS, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x13 (BIOS Write)"
                Local0 = Arg0
                If (Local0)
                {
                    ^^PCI0.LPC0.EC0.BBDA = Zero
                }
                Else
                {
                    ^^PCI0.LPC0.EC0.BBDA = One
                }

                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Mutex (CTMX, 0x00)
            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
                Concatenate (WEID, WEDT, Local0)
                Return (Local0)
            }

            Method (W05W, 1, NotSerialized)
            {
                WMI5 = 0x05
                Local0 = (Arg0 * 0x0A)
                ^^PCI0.LPC0.EC0.DLYT = Local0
            }

            Name (WQAE, Buffer (0x08A9)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  /* FOMB.... */
                /* 0008 */  0x99, 0x08, 0x00, 0x00, 0x8A, 0x3A, 0x00, 0x00,  /* .....:.. */
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  /* DS...}.T */
                /* 0018 */  0x98, 0x4B, 0x9C, 0x00, 0x01, 0x06, 0x18, 0x42,  /* .K.....B */
                /* 0020 */  0x10, 0x13, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  /* ..."!... */
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  /* ..,...8. */
                /* 0030 */  0x84, 0x1C, 0x40, 0x88, 0x59, 0x50, 0x08, 0x21,  /* ..@.YP.! */
                /* 0038 */  0x10, 0xEA, 0x4F, 0x20, 0xBF, 0x02, 0x10, 0x3A,  /* ..O ...: */
                /* 0040 */  0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E, 0x11,  /* . S.A.N. */
                /* 0048 */  0x44, 0xD0, 0xAB, 0x00, 0x9B, 0x02, 0x4C, 0x0A,  /* D.....L. */
                /* 0050 */  0xB0, 0x28, 0x40, 0xBB, 0x00, 0xCB, 0x02, 0x74,  /* .(@....t */
                /* 0058 */  0x0B, 0x90, 0x0E, 0x4B, 0x44, 0x82, 0xA3, 0xC4,  /* ...KD... */
                /* 0060 */  0x80, 0xA3, 0x74, 0x62, 0x0B, 0x37, 0x6C, 0xF0,  /* ..tb.7l. */
                /* 0068 */  0x42, 0x51, 0x34, 0x83, 0x28, 0x09, 0x2A, 0x17,  /* BQ4.(.*. */
                /* 0070 */  0xE0, 0x1B, 0x41, 0xE0, 0xE5, 0x0A, 0x90, 0x3C,  /* ..A....< */
                /* 0078 */  0x01, 0x69, 0x16, 0x60, 0x58, 0x80, 0x75, 0x01,  /* .i.`X.u. */
                /* 0080 */  0xB2, 0x87, 0x40, 0xA5, 0x0E, 0x01, 0x25, 0x67,  /* ..@...%g */
                /* 0088 */  0x08, 0xA8, 0x01, 0xB4, 0x3A, 0x01, 0xE1, 0x57,  /* ....:..W */
                /* 0090 */  0x3A, 0x25, 0x24, 0x41, 0x38, 0x63, 0x15, 0x8F,  /* :%$A8c.. */
                /* 0098 */  0xAF, 0x59, 0x34, 0x3D, 0x27, 0x39, 0xC7, 0x90,  /* .Y4='9.. */
                /* 00A0 */  0xE3, 0x71, 0xA1, 0x07, 0xC1, 0x05, 0x78, 0x18,  /* .q....x. */
                /* 00A8 */  0x06, 0x1D, 0xB2, 0x22, 0x6B, 0x80, 0xC1, 0x58,  /* ..."k..X */
                /* 00B0 */  0x18, 0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9,  /* ..u1j.H. */
                /* 00B8 */  0x80, 0x0C, 0x51, 0x12, 0x1C, 0x6A, 0xD4, 0x96,  /* ..Q..j.. */
                /* 00C0 */  0x28, 0xC0, 0xFC, 0x38, 0x34, 0xBB, 0xB6, 0xC7,  /* (..84... */
                /* 00C8 */  0x42, 0x20, 0x99, 0xB4, 0xA1, 0xA0, 0xA4, 0x40,  /* B .....@ */
                /* 00D0 */  0x68, 0x6C, 0x67, 0xEA, 0x19, 0x45, 0x3C, 0x52,  /* hlg..E<R */
                /* 00D8 */  0xC3, 0x24, 0xF0, 0x28, 0x22, 0x1B, 0x8D, 0x43,  /* .$.("..C */
                /* 00E0 */  0x63, 0x87, 0xE1, 0x61, 0x06, 0x3B, 0x88, 0xC3,  /* c..a.;.. */
                /* 00E8 */  0x38, 0xE6, 0xC8, 0x09, 0x3C, 0xA1, 0x23, 0x3D,  /* 8...<.#= */
                /* 00F0 */  0xF2, 0xC2, 0xE6, 0x29, 0xD4, 0x18, 0xCD, 0x41,  /* ...)...A */
                /* 00F8 */  0x11, 0xB8, 0xD0, 0x18, 0x19, 0x10, 0xF2, 0x3C,  /* .......< */
                /* 0100 */  0x7E, 0x8D, 0xC4, 0x04, 0x76, 0x2F, 0xC0, 0x1A,  /* ~...v/.. */
                /* 0108 */  0xA6, 0x60, 0x1B, 0x9B, 0x98, 0xFE, 0xFF, 0x10,  /* .`...... */
                /* 0110 */  0x47, 0x1E, 0xA3, 0xAD, 0xB9, 0x0B, 0x29, 0x4C,  /* G.....)L */
                /* 0118 */  0x8C, 0x28, 0xC1, 0xE2, 0x55, 0x3C, 0x0D, 0xA1,  /* .(..U<.. */
                /* 0120 */  0x3C, 0x29, 0x84, 0x8A, 0x54, 0x19, 0x8A, 0x86,  /* <)..T... */
                /* 0128 */  0x1E, 0xA5, 0x42, 0x01, 0xCE, 0xE6, 0x21, 0xDC,  /* ..B...!. */
                /* 0130 */  0x1A, 0x41, 0x85, 0x10, 0x2B, 0x52, 0xAC, 0xF6,  /* .A..+R.. */
                /* 0138 */  0x07, 0x41, 0x42, 0x2E, 0x5B, 0xC7, 0x07, 0x47,  /* .AB.[..G */
                /* 0140 */  0x1A, 0x0D, 0xEA, 0x50, 0xE0, 0xB1, 0x7B, 0xDC,  /* ...P..{. */
                /* 0148 */  0xCF, 0x02, 0x3E, 0x08, 0x9C, 0x5B, 0x90, 0xA3,  /* ..>..[.. */
                /* 0150 */  0x3B, 0x8B, 0x47, 0x85, 0x83, 0xF6, 0xF0, 0xD8,  /* ;.G..... */
                /* 0158 */  0x6D, 0xC0, 0x67, 0x08, 0x9F, 0x02, 0xF0, 0xAE,  /* m.g..... */
                /* 0160 */  0x01, 0x35, 0xFD, 0x83, 0x67, 0x82, 0xE0, 0x50,  /* .5..g..P */
                /* 0168 */  0x43, 0xF4, 0xA8, 0xC3, 0x9D, 0xC0, 0x21, 0x32,  /* C.....!2 */
                /* 0170 */  0x40, 0x4F, 0xEA, 0xB8, 0xB1, 0x83, 0x3B, 0x99,  /* @O....;. */
                /* 0178 */  0x83, 0x7E, 0x6F, 0x68, 0xF6, 0xC6, 0x40, 0x08,  /* .~oh..@. */
                /* 0180 */  0x8E, 0xC7, 0x97, 0x05, 0x36, 0xE1, 0x04, 0x96,  /* ....6... */
                /* 0188 */  0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x51, 0x9E,  /* ?.....Q. */
                /* 0190 */  0x56, 0xCC, 0x90, 0xCF, 0x0C, 0x26, 0xB0, 0x58,  /* V....&.X */
                /* 0198 */  0x08, 0x29, 0x80, 0xD0, 0x78, 0xC0, 0x7F, 0x03,  /* .)..x... */
                /* 01A0 */  0x78, 0xC0, 0xF0, 0xCD, 0xC0, 0xF3, 0x35, 0xC1,  /* x.....5. */
                /* 01A8 */  0xB0, 0x10, 0x32, 0xB2, 0x0A, 0x8F, 0x87, 0x8E,  /* ..2..... */
                /* 01B0 */  0xC2, 0xD7, 0x83, 0xC3, 0x39, 0xAD, 0x78, 0x26,  /* ....9.x& */
                /* 01B8 */  0x18, 0x0E, 0x42, 0x27, 0x09, 0x8B, 0x1A, 0x36,  /* ..B'...6 */
                /* 01C0 */  0x3D, 0x39, 0xF0, 0x43, 0x03, 0xBB, 0x19, 0x9C,  /* =9.C.... */
                /* 01C8 */  0xC1, 0x23, 0x80, 0x47, 0x72, 0x42, 0xFE, 0x98,  /* .#.GrB.. */
                /* 01D0 */  0x78, 0x60, 0xF0, 0x01, 0xF1, 0xDE, 0xA7, 0x4C,  /* x`.....L */
                /* 01D8 */  0x46, 0x70, 0xA6, 0x06, 0xF4, 0x71, 0xC0, 0xFF,  /* Fp...q.. */
                /* 01E0 */  0xFF, 0xA1, 0xF0, 0x21, 0x7A, 0x7C, 0xA7, 0x7C,  /* ...!z|.| */
                /* 01E8 */  0xBC, 0x96, 0x00, 0x21, 0x59, 0xE3, 0x84, 0x7E,  /* ...!Y..~ */
                /* 01F0 */  0x87, 0xF0, 0xF1, 0xC3, 0x47, 0x16, 0x47, 0x84,  /* ....G.G. */
                /* 01F8 */  0x90, 0x93, 0x53, 0x00, 0x1A, 0xF8, 0x74, 0xCF,  /* ..S...t. */
                /* 0200 */  0x2E, 0xC2, 0xE9, 0x7A, 0x52, 0x0E, 0x34, 0x0C,  /* ...zR.4. */
                /* 0208 */  0x3A, 0x4E, 0x70, 0x9C, 0x07, 0xC0, 0x31, 0x4E,  /* :Np...1N */
                /* 0210 */  0xF8, 0xE7, 0x02, 0xF8, 0x03, 0xE4, 0xA7, 0x8C,  /* ........ */
                /* 0218 */  0x57, 0x8C, 0x04, 0x8E, 0x39, 0x42, 0xF4, 0xB9,  /* W...9B.. */
                /* 0220 */  0xC6, 0x23, 0xC4, 0xC2, 0x3F, 0x55, 0x14, 0x3E,  /* .#..?U.> */
                /* 0228 */  0x10, 0x32, 0x46, 0x70, 0x01, 0x7A, 0x8C, 0xC0,  /* .2Fp.z.. */
                /* 0230 */  0x37, 0xE0, 0x18, 0xD1, 0x47, 0x09, 0xAE, 0xFE,  /* 7...G... */
                /* 0238 */  0xA0, 0x41, 0x07, 0x88, 0xFB, 0xFF, 0x0F, 0x10,  /* .A...... */
                /* 0240 */  0x3E, 0xA8, 0x07, 0x08, 0x7C, 0xA3, 0x1F, 0x3D,  /* >...|..= */
                /* 0248 */  0xD0, 0xE3, 0xB2, 0xE8, 0xF3, 0x80, 0x8C, 0x9F,  /* ........ */
                /* 0250 */  0x68, 0x34, 0x2F, 0x7E, 0x3A, 0xE0, 0x87, 0x0F,  /* h4/~:... */
                /* 0258 */  0xF0, 0x80, 0x7A, 0x48, 0x38, 0x50, 0xCC, 0xB4,  /* ..zH8P.. */
                /* 0260 */  0x39, 0xE8, 0xB3, 0xCB, 0xA1, 0x63, 0x87, 0x0B,  /* 9....c.. */
                /* 0268 */  0xFE, 0x13, 0x08, 0xB8, 0xE4, 0x1D, 0xC2, 0x40,  /* .......@ */
                /* 0270 */  0x31, 0x62, 0xFC, 0x39, 0xC8, 0xA7, 0x30, 0xF0,  /* 1b.9..0. */
                /* 0278 */  0xFF, 0xFF, 0x4F, 0x61, 0xB8, 0x11, 0xF0, 0x20,  /* ..Oa...  */
                /* 0280 */  0xAF, 0x05, 0x9F, 0xB6, 0xA8, 0x74, 0x18, 0xD4,  /* .....t.. */
                /* 0288 */  0x81, 0x0B, 0x30, 0x09, 0x1A, 0xE1, 0x59, 0xA2,  /* ..0...Y. */
                /* 0290 */  0x36, 0x08, 0x01, 0xBF, 0x4D, 0xBC, 0x6D, 0xF9,  /* 6...M.m. */
                /* 0298 */  0x16, 0x10, 0xE7, 0xC8, 0x7B, 0x3B, 0x70, 0x11,  /* ....{;p. */
                /* 02A0 */  0x8C, 0x08, 0xA7, 0x1D, 0xCA, 0x63, 0x88, 0x18,  /* .....c.. */
                /* 02A8 */  0x23, 0xCA, 0xE3, 0x96, 0x51, 0xDE, 0xB6, 0x5E,  /* #...Q..^ */
                /* 02B0 */  0x00, 0xE2, 0x9D, 0xE5, 0xF3, 0x96, 0x31, 0x82,  /* ......1. */
                /* 02B8 */  0x47, 0x7E, 0xE0, 0x62, 0x62, 0xDF, 0x13, 0xFA,  /* G~.bb... */
                /* 02C0 */  0xB9, 0xF9, 0xC0, 0x05, 0x38, 0xFB, 0xFF, 0x1F,  /* ....8... */
                /* 02C8 */  0xB8, 0x00, 0x0E, 0x05, 0x3D, 0x0C, 0xA1, 0x87,  /* ....=... */
                /* 02D0 */  0xE1, 0xA9, 0x9C, 0xCB, 0x13, 0xE5, 0xA9, 0x44,  /* .......D */
                /* 02D8 */  0x8C, 0x1A, 0x26, 0xEA, 0x33, 0x94, 0x2F, 0x1A,  /* ..&.3./. */
                /* 02E0 */  0x3E, 0x10, 0x81, 0xEF, 0xCC, 0x05, 0xFC, 0xFE,  /* >....... */
                /* 02E8 */  0xFF, 0x07, 0x22, 0x38, 0x02, 0xCF, 0x34, 0xA0,  /* .."8..4. */
                /* 02F0 */  0xF4, 0x39, 0x03, 0x81, 0x9C, 0x8A, 0x0F, 0x35,  /* .9.....5 */
                /* 02F8 */  0xC0, 0x48, 0xF4, 0xAB, 0xC1, 0x27, 0x1A, 0x2A,  /* .H...'.* */
                /* 0300 */  0x13, 0x06, 0x75, 0xA8, 0x01, 0x4C, 0x5E, 0x61,  /* ..u..L^a */
                /* 0308 */  0x9E, 0x46, 0xCF, 0xF9, 0x59, 0xC6, 0xA7, 0x1A,  /* .F..Y... */
                /* 0310 */  0x1F, 0x4A, 0x8D, 0x63, 0x88, 0x97, 0x99, 0x87,  /* .J.c.... */
                /* 0318 */  0x1A, 0x1F, 0x0B, 0x5E, 0x49, 0x7D, 0xA8, 0x31,  /* ...^I}.1 */
                /* 0320 */  0x54, 0x9C, 0x87, 0x1A, 0x9F, 0x48, 0x03, 0x45,  /* T....H.E */
                /* 0328 */  0x7D, 0xB3, 0x79, 0xB6, 0x31, 0x7A, 0x7C, 0xDF,  /* }.y.1z|. */
                /* 0330 */  0x50, 0x0D, 0xF1, 0x50, 0xC3, 0x84, 0xBD, 0x23,  /* P..P...# */
                /* 0338 */  0xF4, 0xC1, 0xF5, 0xA1, 0x06, 0x1C, 0xFF, 0xFF,  /* ........ */
                /* 0340 */  0x43, 0x0D, 0xC0, 0xFF, 0xFF, 0xFF, 0xA1, 0x06,  /* C....... */
                /* 0348 */  0x70, 0x74, 0x34, 0x80, 0x73, 0x64, 0xC4, 0x1D,  /* pt4.sd.. */
                /* 0350 */  0x0D, 0xC0, 0x75, 0x28, 0x05, 0x0E, 0x47, 0x03,  /* ..u(..G. */
                /* 0358 */  0xE0, 0x71, 0x14, 0x02, 0xF3, 0x85, 0xC6, 0x47,  /* .q.....G */
                /* 0360 */  0x21, 0x60, 0xF1, 0xFF, 0x3F, 0x0A, 0xE1, 0x64,  /* !`..?..d */
                /* 0368 */  0x9F, 0x83, 0x50, 0x42, 0x8F, 0x42, 0x80, 0x54,  /* ..PB.B.T */
                /* 0370 */  0xC8, 0xA7, 0x88, 0x67, 0x1F, 0x5F, 0x7E, 0x1E,  /* ...g._~. */
                /* 0378 */  0x08, 0x22, 0xBC, 0xE6, 0xFB, 0x14, 0xE4, 0x43,  /* .".....C */
                /* 0380 */  0xBE, 0x8F, 0x42, 0x0C, 0xC6, 0x50, 0xBE, 0x06,  /* ..B..P.. */
                /* 0388 */  0xF9, 0x28, 0xC4, 0xA0, 0x5E, 0x83, 0x7C, 0xDF,  /* .(..^.|. */
                /* 0390 */  0x37, 0xC8, 0x91, 0x18, 0xFB, 0x99, 0xC0, 0x47,  /* 7......G */
                /* 0398 */  0x21, 0x26, 0xED, 0x28, 0x04, 0x28, 0xFC, 0xFF,  /* !&.(.(.. */
                /* 03A0 */  0x1F, 0x85, 0x00, 0xFE, 0xFF, 0xFF, 0x8F, 0x42,  /* .......B */
                /* 03A8 */  0x80, 0xB3, 0x00, 0x47, 0x03, 0xD0, 0x4D, 0xEB,  /* ...G..M. */
                /* 03B0 */  0x51, 0x08, 0xBC, 0x77, 0x96, 0xD3, 0x3E, 0x01,  /* Q..w..>. */
                /* 03B8 */  0x9F, 0x85, 0x00, 0xB3, 0xFF, 0xFF, 0xB3, 0x10,  /* ........ */
                /* 03C0 */  0x30, 0x3B, 0x0A, 0x45, 0x3D, 0xE8, 0x57, 0xA1,  /* 0;.E=.W. */
                /* 03C8 */  0x27, 0x80, 0x17, 0x80, 0x18, 0x61, 0xDE, 0x81,  /* '....a.. */
                /* 03D0 */  0x5E, 0x32, 0xD9, 0x5D, 0xDC, 0x38, 0x4F, 0x2E,  /* ^2.].8O. */
                /* 03D8 */  0xA7, 0x6D, 0x94, 0x97, 0x20, 0x1F, 0x28, 0x9E,  /* .m.. .(. */
                /* 03E0 */  0x85, 0x0C, 0xF5, 0x2E, 0x14, 0xF4, 0x8D, 0xDC,  /* ........ */
                /* 03E8 */  0xA3, 0x8C, 0x19, 0x3F, 0xC4, 0xF3, 0x90, 0x21,  /* ...?...! */
                /* 03F0 */  0x9E, 0x85, 0x00, 0x76, 0xFD, 0xFF, 0xCF, 0x42,  /* ...v...B */
                /* 03F8 */  0x00, 0xFF, 0xFF, 0xFF, 0x47, 0x03, 0xF8, 0x2F,  /* ....G../ */
                /* 0400 */  0x00, 0x9F, 0x85, 0x80, 0xE7, 0x09, 0xE0, 0x41,  /* .......A */
                /* 0408 */  0xDB, 0x67, 0x21, 0x80, 0x33, 0x87, 0xCB, 0xF3,  /* .g!.3... */
                /* 0410 */  0x0F, 0x7A, 0x60, 0xEF, 0x11, 0x9E, 0xF5, 0x71,  /* .z`....q */
                /* 0418 */  0xBF, 0x5E, 0x7A, 0xE0, 0x0F, 0x05, 0xCF, 0x42,  /* .^z....B */
                /* 0420 */  0x0C, 0xEB, 0x98, 0x7C, 0x16, 0x62, 0x10, 0x2F,  /* ...|.b./ */
                /* 0428 */  0x9A, 0x86, 0x78, 0xE1, 0xF4, 0x61, 0xC0, 0xFF,  /* ..x..a.. */
                /* 0430 */  0x7F, 0xBC, 0xC0, 0xAF, 0x9C, 0x06, 0x0A, 0x12,  /* ........ */
                /* 0438 */  0xE8, 0x59, 0x08, 0x60, 0xFC, 0xFF, 0xFF, 0x2C,  /* .Y.`..., */
                /* 0440 */  0x04, 0x90, 0x71, 0x8D, 0x3A, 0x0B, 0x01, 0xCB,  /* ..q.:... */
                /* 0448 */  0x63, 0x0C, 0x3B, 0xAD, 0x24, 0xF8, 0xFF, 0x3F,  /* c.;.$..? */
                /* 0450 */  0x0B, 0x01, 0x9F, 0x5C, 0x46, 0x0E, 0x42, 0x98,  /* ...\F.B. */
                /* 0458 */  0x88, 0x6F, 0x05, 0x1F, 0x33, 0x01, 0xA5, 0xE7,  /* .o..3... */
                /* 0460 */  0xA0, 0x17, 0x77, 0x63, 0x04, 0x7E, 0x91, 0x78,  /* ..wc.~.x */
                /* 0468 */  0xCC, 0x64, 0x47, 0x4D, 0xC3, 0x3C, 0x0B, 0x19,  /* .dGM.<.. */
                /* 0470 */  0xEF, 0x30, 0xCE, 0xE0, 0x09, 0xDE, 0x93, 0x7F,  /* .0...... */
                /* 0478 */  0x16, 0x62, 0x60, 0xC7, 0x18, 0xEC, 0x51, 0xC8,  /* .b`...Q. */
                /* 0480 */  0xA0, 0x06, 0x8F, 0x1D, 0x22, 0x4C, 0xA0, 0x67,  /* ...."L.g */
                /* 0488 */  0x21, 0x16, 0x6A, 0xDC, 0x3A, 0x7F, 0xF8, 0x2C,  /* !.j.:.., */
                /* 0490 */  0x04, 0xBC, 0xFF, 0xFF, 0x67, 0x21, 0xC0, 0xD3,  /* ....g!.. */
                /* 0498 */  0x61, 0xC3, 0x67, 0x0D, 0xF0, 0x0C, 0xDF, 0xA3,  /* a.g..... */
                /* 04A0 */  0x3A, 0x87, 0xC7, 0x63, 0xE0, 0x92, 0x55, 0xC7,  /* :..c..U. */
                /* 04A8 */  0x09, 0x83, 0xE5, 0x5E, 0xA7, 0x6C, 0x9C, 0x61,  /* ...^.l.a */
                /* 04B0 */  0xE8, 0x20, 0xAC, 0x0E, 0x48, 0xC3, 0xC1, 0xDC,  /* . ..H... */
                /* 04B8 */  0x43, 0x0E, 0xE2, 0x7C, 0xD8, 0x40, 0xAD, 0x08,  /* C..|.@.. */
                /* 04C0 */  0x4E, 0xC7, 0x24, 0x0F, 0xDA, 0x5A, 0x28, 0xA4,  /* N.$..Z(. */
                /* 04C8 */  0x80, 0x46, 0x03, 0x32, 0xBC, 0x33, 0x9F, 0x96,  /* .F.2.3.. */
                /* 04D0 */  0x28, 0x88, 0x01, 0x7D, 0x02, 0xB2, 0x8D, 0x73,  /* (..}...s */
                /* 04D8 */  0x00, 0x6A, 0x2F, 0x9A, 0x02, 0x39, 0xDA, 0x60,  /* .j/..9.` */
                /* 04E0 */  0xF4, 0x5F, 0x16, 0xE8, 0x6C, 0x7C, 0x0D, 0xE0,  /* ._..l|.. */
                /* 04E8 */  0x1A, 0x20, 0x74, 0x30, 0x30, 0xB4, 0xD5, 0xDC,  /* . t00... */
                /* 04F0 */  0x62, 0x50, 0x60, 0xC6, 0x7F, 0x70, 0x31, 0x81,  /* bP`..p1. */
                /* 04F8 */  0x8F, 0x2E, 0xF8, 0xB3, 0x00, 0xEE, 0xFF, 0x3F,  /* .......? */
                /* 0500 */  0x5C, 0x8F, 0xF6, 0x5D, 0xA0, 0xEA, 0xC9, 0xEA,  /* \..].... */
                /* 0508 */  0x8A, 0x60, 0x75, 0x97, 0x17, 0x08, 0x33, 0x32,  /* .`u...32 */
                /* 0510 */  0x41, 0x7D, 0x07, 0x02, 0x50, 0x00, 0xF9, 0x0E,  /* A}..P... */
                /* 0518 */  0xE0, 0xA3, 0xD3, 0x73, 0x00, 0x9B, 0x48, 0x88,  /* ...s..H. */
                /* 0520 */  0x30, 0xD1, 0x8C, 0x8E, 0x98, 0x30, 0x2A, 0xFA,  /* 0....0*. */
                /* 0528 */  0x84, 0x29, 0x88, 0x27, 0xEC, 0x58, 0x13, 0x46,  /* .).'.X.F */
                /* 0530 */  0xCF, 0xC4, 0x77, 0x1B, 0x36, 0x62, 0x4C, 0x88,  /* ..w.6bL. */
                /* 0538 */  0xDB, 0x06, 0xB4, 0x09, 0x06, 0xF5, 0x3D, 0x08,  /* ......=. */
                /* 0540 */  0xD6, 0x90, 0xF9, 0x58, 0x7C, 0x67, 0xC0, 0x4D,  /* ...X|g.M */
                /* 0548 */  0x19, 0x8C, 0x73, 0x62, 0xD7, 0x04, 0x0B, 0x9C,  /* ..sb.... */
                /* 0550 */  0x33, 0xC8, 0xE1, 0x31, 0xD7, 0x2F, 0x7E, 0x5B,  /* 3..1./~[ */
                /* 0558 */  0xF2, 0xE8, 0xF8, 0x41, 0xC1, 0x37, 0x1C, 0x86,  /* ...A.7.. */
                /* 0560 */  0xFD, 0x30, 0xE6, 0x19, 0xBD, 0x8A, 0xF9, 0xE6,  /* .0...... */
                /* 0568 */  0x86, 0x81, 0xF5, 0x78, 0x39, 0xAC, 0xD1, 0xC2,  /* ...x9... */
                /* 0570 */  0x1E, 0xDA, 0xAB, 0x87, 0xCF, 0x2D, 0x3E, 0x4F,  /* .....->O */
                /* 0578 */  0x18, 0x23, 0xAC, 0x2F, 0x2C, 0xE0, 0x00, 0xFC,  /* .#./,... */
                /* 0580 */  0xFF, 0xBF, 0x5A, 0xC1, 0xBE, 0x6B, 0x80, 0xE7,  /* ..Z..k.. */
                /* 0588 */  0x26, 0xE4, 0xBB, 0x06, 0xC0, 0xDA, 0xFF, 0xFF,  /* &....... */
                /* 0590 */  0x5D, 0x03, 0xFE, 0x35, 0xC1, 0x77, 0x0D, 0xE0,  /* ]..5.w.. */
                /* 0598 */  0x3D, 0x74, 0xDF, 0x35, 0x80, 0x6B, 0xF6, 0xBB,  /* =t.5.k.. */
                /* 05A0 */  0x06, 0xEA, 0x18, 0x60, 0x85, 0x77, 0x0D, 0x68,  /* ...`.w.h */
                /* 05A8 */  0xB7, 0xB4, 0x57, 0xB4, 0x87, 0x2A, 0x6B, 0xBA,  /* ..W..*k. */
                /* 05B0 */  0x6C, 0xA0, 0xD4, 0x5C, 0x36, 0x00, 0x6D, 0xFF,  /* l..\6.m. */
                /* 05B8 */  0xFF, 0xCB, 0x06, 0xB0, 0x91, 0x32, 0x61, 0x54,  /* .....2aT */
                /* 05C0 */  0xF8, 0x09, 0x53, 0x10, 0x4F, 0xD8, 0xC1, 0x2E,  /* ..S.O... */
                /* 05C8 */  0x1B, 0xA0, 0x88, 0x71, 0xD9, 0x00, 0xFD, 0xD8,  /* ...q.... */
                /* 05D0 */  0x5E, 0x36, 0x80, 0xC1, 0x3D, 0x81, 0xDF, 0x36,  /* ^6..=..6 */
                /* 05D8 */  0x80, 0x37, 0xA4, 0x6F, 0x1B, 0xC0, 0xF4, 0xFF,  /* .7.o.... */
                /* 05E0 */  0x0F, 0x31, 0xFF, 0x6D, 0x03, 0xC5, 0x61, 0x95,  /* .1.m..a. */
                /* 05E8 */  0xB7, 0x0D, 0x88, 0x87, 0x77, 0x46, 0x60, 0x55,  /* ....wF`U */
                /* 05F0 */  0xD7, 0x0D, 0x94, 0x9E, 0xEB, 0x06, 0x40, 0x02,  /* ......@. */
                /* 05F8 */  0x31, 0x13, 0x46, 0xC5, 0x9F, 0x30, 0x05, 0xF1,  /* 1.F..0.. */
                /* 0600 */  0x84, 0x1D, 0xED, 0xBA, 0x01, 0x8A, 0x20, 0xD7,  /* ...... . */
                /* 0608 */  0x0D, 0xD0, 0xCF, 0xEB, 0x94, 0xC1, 0xFA, 0xFF,  /* ........ */
                /* 0610 */  0xBF, 0x6E, 0x60, 0x2F, 0x0A, 0x98, 0xFB, 0x06,  /* .n`/.... */
                /* 0618 */  0xF0, 0x86, 0xE5, 0xF7, 0x0D, 0xC0, 0xC7, 0xE5,  /* ........ */
                /* 0620 */  0x1B, 0x73, 0xDF, 0x00, 0x6C, 0xFE, 0xFF, 0xEF,  /* .s..l... */
                /* 0628 */  0x1B, 0x00, 0x13, 0x2E, 0x0A, 0xB8, 0xFB, 0x06,  /* ........ */
                /* 0630 */  0xF0, 0xBE, 0x48, 0xFB, 0xBE, 0x01, 0x5C, 0x83,  /* ..H...\. */
                /* 0638 */  0x49, 0xF8, 0xFF, 0xDF, 0xF5, 0xE8, 0x0B, 0x40,  /* I......@ */
                /* 0640 */  0x51, 0x60, 0x50, 0x43, 0xF2, 0x99, 0x00, 0x3F,  /* Q`PC...? */
                /* 0648 */  0xBA, 0x83, 0x3B, 0xA6, 0xE0, 0x4C, 0x12, 0x1C,  /* ..;..L.. */
                /* 0650 */  0x6A, 0xE0, 0xBE, 0x02, 0x3C, 0xCD, 0x9F, 0xD6,  /* j...<... */
                /* 0658 */  0x7B, 0xBD, 0xE7, 0xF1, 0x24, 0x10, 0x92, 0x1D,  /* {...$... */
                /* 0660 */  0x61, 0x7C, 0x6C, 0x43, 0x9C, 0x0C, 0xC8, 0x41,  /* a|lC...A */
                /* 0668 */  0xDC, 0x47, 0xF7, 0x88, 0xEF, 0xE1, 0x86, 0x49,  /* .G.....I */
                /* 0670 */  0xE0, 0x21, 0x33, 0x34, 0x0E, 0x8D, 0x1D, 0x86,  /* .!34.... */
                /* 0678 */  0xEF, 0x02, 0xC1, 0x0E, 0xE2, 0x30, 0xCE, 0xD7,  /* .....0.. */
                /* 0680 */  0x04, 0x9E, 0xD0, 0x83, 0xC0, 0x7B, 0xF9, 0xA3,  /* .....{.. */
                /* 0688 */  0x41, 0xF1, 0x77, 0x03, 0x4A, 0x60, 0xB8, 0xD0,  /* A.w.J`.. */
                /* 0690 */  0x98, 0x91, 0xFA, 0x6C, 0xFF, 0x8E, 0x70, 0x24,  /* ...l..p$ */
                /* 0698 */  0x26, 0xB0, 0x7B, 0x48, 0x59, 0x13, 0xA0, 0xF1,  /* &.{HY... */
                /* 06A0 */  0x96, 0x43, 0x20, 0x7A, 0xC3, 0x91, 0x2D, 0x14,  /* .C z..-. */
                /* 06A8 */  0xCD, 0x2D, 0xCA, 0xFB, 0x42, 0x14, 0x3B, 0x43,  /* .-..B.;C */
                /* 06B0 */  0x10, 0x46, 0x94, 0x60, 0x41, 0x9E, 0xD6, 0x62,  /* .F.`A..b */
                /* 06B8 */  0x45, 0x79, 0x66, 0x37, 0x42, 0xC4, 0x10, 0xAF,  /* Eyf7B... */
                /* 06C0 */  0x0C, 0x81, 0x5E, 0x12, 0xC2, 0x07, 0x79, 0xEC,  /* ..^...y. */
                /* 06C8 */  0x89, 0xD3, 0xFE, 0x20, 0x88, 0xF8, 0x17, 0x82,  /* ... .... */
                /* 06D0 */  0x3C, 0x80, 0x28, 0xD2, 0x68, 0x50, 0xE7, 0x06,  /* <.(.hP.. */
                /* 06D8 */  0x8F, 0xDD, 0x87, 0x10, 0x5F, 0xFE, 0x7D, 0xB8,  /* ...._.}. */
                /* 06E0 */  0xF7, 0xE8, 0x0E, 0xEE, 0x45, 0xFE, 0xA0, 0x3D,  /* ....E..= */
                /* 06E8 */  0x3C, 0x76, 0xC2, 0xF0, 0x41, 0x03, 0x8E, 0x6B,  /* <v..A..k */
                /* 06F0 */  0x40, 0x4D, 0xFF, 0x19, 0x01, 0x2C, 0x97, 0x7F,  /* @M...,.. */
                /* 06F8 */  0xF8, 0xE3, 0xF1, 0x3D, 0xC1, 0xF3, 0x39, 0xE1,  /* ...=..9. */
                /* 0700 */  0x04, 0x96, 0x3F, 0x08, 0xD4, 0x71, 0x84, 0xCF,  /* ..?..q.. */
                /* 0708 */  0xF3, 0x85, 0xC3, 0x90, 0xCF, 0x02, 0x87, 0xC5,  /* ........ */
                /* 0710 */  0xC4, 0x0A, 0xF8, 0xFF, 0x9F, 0x4C, 0xD8, 0x78,  /* .....L.x */
                /* 0718 */  0xC0, 0x7F, 0x0F, 0x79, 0xFD, 0xF7, 0xCD, 0xC0,  /* ...y.... */
                /* 0720 */  0xF3, 0x35, 0xC1, 0x88, 0x10, 0x72, 0x32, 0x1E,  /* .5...r2. */
                /* 0728 */  0x34, 0xE8, 0xD9, 0xF8, 0x80, 0xE1, 0xEB, 0x09,  /* 4....... */
                /* 0730 */  0x3B, 0x77, 0x70, 0x51, 0xE7, 0x0E, 0xD4, 0xD1,  /* ;wpQ.... */
                /* 0738 */  0xC1, 0xA7, 0x06, 0x76, 0xB3, 0xC1, 0x1C, 0xB7,  /* ...v.... */
                /* 0740 */  0xF9, 0x59, 0x03, 0xFC, 0x23, 0x84, 0x7F, 0x7B,  /* .Y..#..{ */
                /* 0748 */  0xF0, 0xBC, 0x7C, 0x65, 0x78, 0x75, 0x48, 0xE0,  /* ..|exuH. */
                /* 0750 */  0x90, 0x23, 0x44, 0x8F, 0xCB, 0x23, 0xC4, 0x9C,  /* .#D..#.. */
                /* 0758 */  0x6F, 0x30, 0x43, 0x04, 0xD7, 0x59, 0x00, 0x1C,  /* o0C..Y.. */
                /* 0760 */  0x43, 0x04, 0x3E, 0x67, 0x4C, 0x9F, 0x71, 0x60,  /* C.>gL.q` */
                /* 0768 */  0xFE, 0xFF, 0xCF, 0x38, 0xEC, 0xD2, 0xC3, 0x07,  /* ...8.... */
                /* 0770 */  0x6A, 0x78, 0x13, 0xF8, 0xFE, 0x8C, 0x3B, 0xD2,  /* jx....;. */
                /* 0778 */  0x18, 0x9C, 0x1F, 0x33, 0x1E, 0x76, 0x18, 0xF8,  /* ...3.v.. */
                /* 0780 */  0xFB, 0x8E, 0x67, 0x70, 0x34, 0x3E, 0xA0, 0x18,  /* ..gp4>.. */
                /* 0788 */  0x21, 0xF8, 0x73, 0xC9, 0x73, 0x8A, 0x35, 0x0F,  /* !.s.s.5. */
                /* 0790 */  0x52, 0x33, 0x7A, 0x67, 0x38, 0x04, 0x76, 0xB3,  /* R3zg8.v. */
                /* 0798 */  0xC2, 0x1D, 0x38, 0x3C, 0x04, 0x3E, 0x80, 0x56,  /* ..8<.>.V */
                /* 07A0 */  0x27, 0x47, 0x4E, 0x3F, 0xA7, 0x84, 0x1B, 0x3E,  /* 'GN?...> */
                /* 07A8 */  0xBF, 0x0A, 0x60, 0x0E, 0x41, 0x38, 0x85, 0x36,  /* ..`.A8.6 */
                /* 07B0 */  0x7D, 0x6A, 0x34, 0x6A, 0xD5, 0xA0, 0x4C, 0x8D,  /* }j4j..L. */
                /* 07B8 */  0x32, 0x0D, 0x6A, 0xF5, 0xA9, 0xD4, 0x98, 0xB1,  /* 2.j..... */
                /* 07C0 */  0x0B, 0x8B, 0x03, 0xBE, 0x02, 0x74, 0x1C, 0xB0,  /* .....t.. */
                /* 07C8 */  0x3C, 0x0A, 0x1D, 0xC1, 0xC8, 0x9B, 0x40, 0x20,  /* <.....@  */
                /* 07D0 */  0x0E, 0x0B, 0x42, 0x23, 0xBD, 0x71, 0x04, 0x62,  /* ..B#.q.b */
                /* 07D8 */  0xC9, 0xEF, 0x2F, 0x81, 0x58, 0xEE, 0x03, 0x45,  /* ../.X..E */
                /* 07E0 */  0x20, 0x0E, 0x68, 0x02, 0x9C, 0xAA, 0x00, 0xA7,  /*  .h..... */
                /* 07E8 */  0xAF, 0x01, 0x81, 0x38, 0x32, 0x08, 0x15, 0xFA,  /* ...82... */
                /* 07F0 */  0x35, 0x13, 0x88, 0x63, 0x82, 0xD0, 0x50, 0x3E,  /* 5..c..P> */
                /* 07F8 */  0x40, 0x98, 0xF4, 0x17, 0x80, 0x00, 0x89, 0x11,  /* @....... */
                /* 0800 */  0x10, 0x16, 0xEE, 0xE5, 0x20, 0x10, 0x4B, 0x7B,  /* .... .K{ */
                /* 0808 */  0x2D, 0x08, 0xC4, 0x42, 0xAC, 0x80, 0xB0, 0xB8,  /* -..B.... */
                /* 0810 */  0x20, 0x34, 0x9C, 0x16, 0x10, 0x26, 0xC9, 0x0C,  /*  4...&.. */
                /* 0818 */  0x08, 0x0B, 0x04, 0x42, 0xE5, 0x3F, 0xD3, 0x04,  /* ...B.?.. */
                /* 0820 */  0x62, 0x91, 0x6E, 0x00, 0xE9, 0xBA, 0x05, 0xE2,  /* b.n..... */
                /* 0828 */  0x20, 0x7A, 0x40, 0x98, 0x0C, 0x3F, 0x20, 0x2C,  /*  z@..? , */
                /* 0830 */  0x34, 0x08, 0x8D, 0xF6, 0x6C, 0x10, 0x20, 0x31,  /* 4...l. 1 */
                /* 0838 */  0x04, 0xC2, 0xE2, 0x3B, 0x02, 0x61, 0xE2, 0xDF,  /* ...;.a.. */
                /* 0840 */  0x44, 0x02, 0x71, 0x4A, 0x4B, 0x10, 0x37, 0xA5,  /* D.qJK.7. */
                /* 0848 */  0x01, 0x06, 0x11, 0x90, 0x93, 0x6A, 0x02, 0x62,  /* .....j.b */
                /* 0850 */  0xB9, 0x41, 0x34, 0x24, 0xF2, 0xB0, 0x10, 0x90,  /* .A4$.... */
                /* 0858 */  0x93, 0x82, 0x68, 0xC0, 0xC4, 0x14, 0x90, 0xFF,  /* ..h..... */
                /* 0860 */  0xFF, 0x43, 0x13, 0x88, 0x80, 0x9C, 0xCA, 0x15,  /* .C...... */
                /* 0868 */  0x10, 0x8B, 0x08, 0x22, 0x20, 0x27, 0x7B, 0x52,  /* ..." '{R */
                /* 0870 */  0x09, 0xC8, 0x39, 0x41, 0x74, 0x04, 0x20, 0xBA,  /* ..9At. . */
                /* 0878 */  0x80, 0x58, 0x3E, 0x10, 0x01, 0x39, 0x96, 0x2F,  /* .X>..9./ */
                /* 0880 */  0x20, 0x16, 0x12, 0x44, 0x40, 0x4E, 0xF4, 0xF3,  /*  ..D@N.. */
                /* 0888 */  0x09, 0x44, 0xE2, 0x81, 0x68, 0x10, 0xE4, 0x3F,  /* .D..h..? */
                /* 0890 */  0x21, 0x20, 0x67, 0x04, 0x11, 0x10, 0x79, 0x12,  /* ! g...y. */
                /* 0898 */  0x05, 0x21, 0x9A, 0x3E, 0x62, 0x02, 0x71, 0x6A,  /* .!.>b.qj */
                /* 08A0 */  0x10, 0x9A, 0xEC, 0x27, 0x14, 0x84, 0xFC, 0xFF,  /* ...'.... */
                /* 08A8 */  0x01                                             /* . */
            })
        }
    }

    Scope (_TZ)
    {
        Name (TPC, 0x69)
        Name (TPTM, 0x4B)
        Name (TPAS, 0x5F)
        Name (PSVT, 0x46)
        Name (PSVM, Zero)
        Name (DHOT, 0x5A)
        Name (HOTF, Zero)
        ThermalZone (THRM)
        {
            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                If (ECON)
                {
                    Local0 = \_SB.PCI0.LPC0.EC0.RTMP
                    If ((Local0 >= TPC))
                    {
                        HOTF = One
                    }
                    Else
                    {
                        If ((Local0 < DHOT))
                        {
                            HOTF = Zero
                        }
                    }

                    Return ((0x0AAC + (Local0 * 0x0A)))
                }
                Else
                {
                    Return ((0x0AAC + (TPTM * 0x0A)))
                }
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((TPOS == 0x40))
                {
                    Return ((0x0AAC + (TPC * 0x0A)))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((TPOS != 0x40))
                {
                    Return ((0x0AAC + (TPC * 0x0A)))
                }
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                If (MPST)
                {
                    Return (Package (0x02)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1
                    })
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        \_PR.CPU0
                    })
                }
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                If ((((PSVM == One) && (OSTB == 0x42)) && (PFCY == 0x03)))
                {
                    Return ((0x0AAC + (PSVT * 0x0A)))
                }
                Else
                {
                    Return ((0x0AAC + (TPAS * 0x0A)))
                }
            }

            Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
            {
                If (((ECON == One) && (OSTB == 0x42)))
                {
                    If ((PFCY == 0x03))
                    {
                        PSVM = Arg0
                        \_SB.PCI0.LPC0.EC0.TAPM = PSVM /* \_TZ_.PSVM */
                    }
                }
            }

            Method (_TC1, 0, NotSerialized)  // _TC1: Thermal Constant 1
            {
                Return (0x02)
            }

            Method (_TC2, 0, NotSerialized)  // _TC2: Thermal Constant 2
            {
                Return (0x03)
            }

            Method (_TSP, 0, NotSerialized)  // _TSP: Thermal Sampling Period
            {
                Return (0x1E)
            }

            Name (REGN, "Processor Thermal Zone")
            Name (FMAX, 0x1900)
            Name (FMIN, 0x0B54)
            Method (FRSP, 0, NotSerialized)
            {
                Local2 = Zero
                Local0 = \_SB.PCI0.LPC0.EC0.RPM1
                Local1 = \_SB.PCI0.LPC0.EC0.RPM2
                Local1 <<= 0x08
                Local0 |= Local1
                Local2 = (0x00075300 / Local0)
                Return (Local2)
            }

            Method (FSSP, 1, NotSerialized)
            {
                \_SB.PCI0.LPC0.EC0.TFAN = Arg0
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 5D
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "3045    "
[018h 0024   4]                 Oem Revision : 00000003
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0100000D

[024h 0036   4]                 FACS Address : 2FE60000
[028h 0040   4]                 DSDT Address : 2FEF1000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000800
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 00
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000001A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 00
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 000000002FE60000
[08Ch 0140   8]                 DSDT Address : 000000002FEF1000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 00
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000000

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 00 [SystemMemory]
[0ADh 0173   1]                    Bit Width : 00
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000000

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 00 [SystemMemory]
[0D1h 0209   1]                    Bit Width : 00
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000000

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 00 [SystemMemory]
[0DDh 0221   1]                    Bit Width : 00
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000000

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

  0000: 46 41 43 50 F4 00 00 00 04 5D 48 50 20 20 20 20  FACP.....]HP    
  0010: 33 30 34 35 20 20 20 20 03 00 00 00 4D 53 46 54  3045    ....MSFT
  0020: 0D 00 00 01 00 00 E6 2F 00 10 EF 2F 00 02 09 00  ......./.../....
  0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  ................
  0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  ................
  0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00   ...............
  0060: 65 00 E9 03 00 00 00 00 01 03 00 00 00 03 00 00  e...............
  0070: A5 01 00 00 00 00 00 00 F9 0C 00 00 00 00 00 00  ................
  0080: 06 00 00 00 00 00 E6 2F 00 00 00 00 00 10 EF 2F  ......./......./
  0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00F0: 00 00 00 00                                      ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 63
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "3045    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 000F4240

[024h 0036   4]            Hardware Block ID : 1002A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 63 48 50 20 20 20 20  HPET8....cHP    
  0010: 33 30 34 35 20 20 20 20 01 00 00 00 4D 53 46 54  3045    ....MSFT
  0020: 40 42 0F 00 01 A2 02 10 00 00 00 00 00 00 D0 FE  @B..............
  0030: 00 00 00 00 00 80 00 00                          ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 57
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "3045    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "TFSM"
[020h 0032   4]        Asl Compiler Revision : 000F4240

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 57 48 50 20 20 20 20  MCFG<....WHP    
  0010: 33 30 34 35 20 20 20 20 01 00 00 00 54 46 53 4D  3045    ....TFSM
  0020: 40 42 0F 00 00 00 00 00 00 00 00 00 00 00 00 E0  @B..............
  0030: 00 00 00 00 00 00 00 3F 00 00 00 00              .......?....


RSDP
----
[000h 0000   8]                    Signature : "RSD PTR "
[008h 0008   1]                     Checksum : 1D
[009h 0009   6]                       Oem ID : "HP    "
[00Fh 0015   1]                     Revision : 02
[010h 0016   4]                 RSDT Address : 2FEFE0AC
[014h 0020   4]                       Length : 00000024
[018h 0024   8]                 XSDT Address : 000000002FEFE120
[020h 0032   1]            Extended Checksum : BD
[021h 0033   3]                     Reserved : 000000

Raw Table Data: Length 36 (0x24)

  0000: 52 53 44 20 50 54 52 20 1D 48 50 20 20 20 20 02  RSD PTR .HP    .
  0010: AC E0 EF 2F 24 00 00 00 20 E1 EF 2F 00 00 00 00  .../$... ../....
  0020: BD 00 00 00                                      ....


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 16
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "3045    "
[018h 0024   4]                 Oem Revision : 00000003
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]       ACPI Table Address   0 : 2FEFD000
[028h 0040   4]       ACPI Table Address   1 : 2FEFC000
[02Ch 0044   4]       ACPI Table Address   2 : 2FEFB000
[030h 0048   4]       ACPI Table Address   3 : 2FEFA000
[034h 0052   4]       ACPI Table Address   4 : 2FEF0000
[038h 0056   4]       ACPI Table Address   5 : 2FEEF000
[03Ch 0060   4]       ACPI Table Address   6 : 2FEEE000
[040h 0064   4]       ACPI Table Address   7 : 2FEED000

Raw Table Data: Length 68 (0x44)

  0000: 52 53 44 54 44 00 00 00 01 16 48 50 20 20 20 20  RSDTD.....HP    
  0010: 33 30 34 35 20 20 20 20 03 00 00 00 20 20 20 20  3045    ....    
  0020: 13 00 00 01 00 D0 EF 2F 00 C0 EF 2F 00 B0 EF 2F  ......./.../.../
  0030: 00 A0 EF 2F 00 00 EF 2F 00 F0 EE 2F 00 E0 EE 2F  .../.../.../.../
  0040: 00 D0 EE 2F                                      .../


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9B
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000001


[024h 0036   4]                Subtable Type : 00000000 [Public Key Structure]
[028h 0040   4]                       Length : 0000009C

[02Ch 0044   1]                     Key Type : 06
[02Dh 0045   1]                      Version : 02
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]                    Algorithm : 00002400
[034h 0052   4]                        Magic : "RSA1"
[038h 0056   4]                    BitLength : 00000400
[03Ch 0060   4]                     Exponent : 00010001
[040h 0064 128]                      Modulus : 5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD \
                                               1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87 \
                                               31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D \
                                               7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21 \
                                               96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38 \
                                               57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3 \
                                               02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0 \
                                               93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6

[0C0h 0192   4]                Subtable Type : 00000001 [Windows Marker Structure]
[0C4h 0196   4]                       Length : 000000B6

[0C8h 0200   4]                      Version : 00020000
[0CCh 0204   6]                       Oem ID : "HPQOEM"
[0D2h 0210   8]                 Oem Table ID : "SLIC-MPC"
[0DAh 0218   8]                 Windows Flag : "WINDOWS "
[0E2h 0226   4]                 SLIC Version : 00020001
[0E6h 0230  16]                     Reserved : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[0F6h 0246 128]                    Signature : 30 90 1F B4 A4 BE 80 1E E9 33 EC 7F FC B1 28 0E \
                                               A6 CE 43 72 8C 79 30 B4 F4 59 EA 7D CF B7 11 8B \
                                               DA 70 C5 C8 3F 79 20 08 6F 64 CA 07 88 B3 B1 16 \
                                               B4 BA 1A F1 85 52 B1 F5 07 55 B5 70 61 EF 44 8C \
                                               AA 5F 78 14 66 98 9C F3 58 D8 AA 48 E0 37 F8 F6 \
                                               AB 64 FA DA 17 2A 62 E3 04 1D 32 2D D5 EA 33 66 \
                                               5C 5B 3B 0E F7 09 66 42 32 AA 14 99 C3 EE 1A 62 \
                                               3B 07 5F F0 48 44 C4 E6 32 59 1F 14 3E F1 B2 38

Raw Table Data: Length 374 (0x176)

  0000: 53 4C 49 43 76 01 00 00 01 9B 48 50 51 4F 45 4D  SLICv.....HPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 00 00 04 06 20 4C 54 50  SLIC-MPC.... LTP
  0020: 01 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  ................
  0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  .$..RSA1........
  0040: 5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD  [.`V.X.....\.O..
  0050: 1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87  ..........Y...>.
  0060: 31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D  1..t..;.[...|9..
  0070: 7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21  |"..*....m.....!
  0080: 96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38  ...h..DE><....78
  0090: 57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3  W........~.@.Q:.
  00A0: 02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0  .H...r.Bx.G.T...
  00B0: 93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6  ...........2..T.
  00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F  ............HPQO
  00D0: 45 4D 53 4C 49 43 2D 4D 50 43 57 49 4E 44 4F 57  EMSLIC-MPCWINDOW
  00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  S ..............
  00F0: 00 00 00 00 00 00 30 90 1F B4 A4 BE 80 1E E9 33  ......0........3
  0100: EC 7F FC B1 28 0E A6 CE 43 72 8C 79 30 B4 F4 59  ....(...Cr.y0..Y
  0110: EA 7D CF B7 11 8B DA 70 C5 C8 3F 79 20 08 6F 64  .}.....p..?y .od
  0120: CA 07 88 B3 B1 16 B4 BA 1A F1 85 52 B1 F5 07 55  ...........R...U
  0130: B5 70 61 EF 44 8C AA 5F 78 14 66 98 9C F3 58 D8  .pa.D.._x.f...X.
  0140: AA 48 E0 37 F8 F6 AB 64 FA DA 17 2A 62 E3 04 1D  .H.7...d...*b...
  0150: 32 2D D5 EA 33 66 5C 5B 3B 0E F7 09 66 42 32 AA  2-..3f\[;...fB2.
  0160: 14 99 C3 EE 1A 62 3B 07 5F F0 48 44 C4 E6 32 59  .....b;._.HD..2Y
  0170: 1F 14 3E F1 B2 38                                ..>..8


SRAT
----
[000h 0000   4]                    Signature : "SRAT"    [System Resource Affinity Table]
[004h 0004   4]                 Table Length : 00000078
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : AE
[00Ah 0010   6]                       Oem ID : "AMD   "
[010h 0016   8]                 Oem Table ID : "AMD CRB "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]               Table Revision : 00000000
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 01 [Memory Affinity]
[031h 0049   1]                       Length : 28

[032h 0050   4]             Proximity Domain : 00000000
[036h 0054   2]                    Reserved1 : 0000
[038h 0056   8]                 Base Address : 0000000000000000
[040h 0064   8]               Address Length : 0000000040000000
[048h 0072   4]                    Reserved2 : 00000000
[04Ch 0076   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[050h 0080   8]                    Reserved3 : 0000000000000000

[058h 0088   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[059h 0089   1]                       Length : 10

[05Ah 0090   1]      Proximity Domain Low(8) : 00
[05Bh 0091   1]                      Apic ID : 00
[05Ch 0092   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[060h 0096   1]              Local Sapic EID : 00
[061h 0097   3]    Proximity Domain High(24) : 000000
[064h 0100   4]                 Clock Domain : 00000000

[068h 0104   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[069h 0105   1]                       Length : 10

[06Ah 0106   1]      Proximity Domain Low(8) : 00
[06Bh 0107   1]                      Apic ID : 01
[06Ch 0108   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[070h 0112   1]              Local Sapic EID : 00
[071h 0113   3]    Proximity Domain High(24) : 000000
[074h 0116   4]                 Clock Domain : 00000001

Raw Table Data: Length 120 (0x78)

  0000: 53 52 41 54 78 00 00 00 03 AE 41 4D 44 20 20 20  SRATx.....AMD   
  0010: 41 4D 44 20 43 52 42 20 01 00 00 00 41 4D 44 20  AMD CRB ....AMD 
  0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0030: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  .(..............
  0040: 00 00 00 40 00 00 00 00 00 00 00 00 01 00 00 00  ...@............
  0050: 00 00 00 00 00 00 00 00 00 10 00 00 01 00 00 00  ................
  0060: 00 00 00 00 00 00 00 00 00 10 00 01 01 00 00 00  ................
  0070: 00 00 00 00 01 00 00 00                          ........


SSDT
----
DefinitionBlock ("ssdt.aml", "SSDT", 1, "AMD   ", "PowerNow", 0x00000001)
{

    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)

    Scope (\_PR.CPU0)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00003D15, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001761, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x00000910, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00003D15, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001761, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000258, 
                0x00000910, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilites
    }

    Scope (\_PR.CPU1)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000960, 
                0x00003D15, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001761, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x00000910, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000960, 
                0x00003D15, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x00001761, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000258, 
                0x00000910, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FD, 
                0x00000001
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilites
    }
}



XSDT
----
[000h 0000   4]                    Signature : "XSDT"    [Extended System Description Table]
[004h 0004   4]                 Table Length : 00000064
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 52
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000003
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   8]       ACPI Table Address   0 : 000000002FEFD000
[02Ch 0044   8]       ACPI Table Address   1 : 000000002FEFC000
[034h 0052   8]       ACPI Table Address   2 : 000000002FEFB000
[03Ch 0060   8]       ACPI Table Address   3 : 000000002FEFA000
[044h 0068   8]       ACPI Table Address   4 : 000000002FEF0000
[04Ch 0076   8]       ACPI Table Address   5 : 000000002FEEF000
[054h 0084   8]       ACPI Table Address   6 : 000000002FEEE000
[05Ch 0092   8]       ACPI Table Address   7 : 000000002FEED000

Raw Table Data: Length 100 (0x64)

  0000: 58 53 44 54 64 00 00 00 01 52 48 50 51 4F 45 4D  XSDTd....RHPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 03 00 00 00 20 20 20 20  SLIC-MPC....    
  0020: 13 00 00 01 00 D0 EF 2F 00 00 00 00 00 C0 EF 2F  ......./......./
  0030: 00 00 00 00 00 B0 EF 2F 00 00 00 00 00 A0 EF 2F  ......./......./
  0040: 00 00 00 00 00 00 EF 2F 00 00 00 00 00 F0 EE 2F  ......./......./
  0050: 00 00 00 00 00 E0 EE 2F 00 00 00 00 00 D0 EE 2F  ......./......./
  0060: 00 00 00 00                                      ....


