
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20181213
Copyright (c) 2000 - 2018 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "HP    "  "30AA    "  0x00000001  "HP  "   0x00000001
 02)  FACS  0x00000040  0x02
 03)  SSDT  0x000000A6  0x01  "HP    "  "Cpu1Tst "  0x00003000  "INTL"   0x20050624
 04)  APIC  0x00000068  0x01  "HP    "  "30AA    "  0x00000001  "HP  "   0x00000001
 05)  SLIC  0x00000176  0x01  "HPQOEM"  "SLIC-MPC"  0x00000001  "HP  "   0x00000001
 06)  SSDT  0x00000326  0x01  "HP    "  "HPQSAT  "  0x00000001  "MSFT"   0x0100000E
 07)  DSDT  0x0000F4DB  0x01  "HP    "  "nc6340  "  0x00010000  "MSFT"   0x0100000E
 08)  FACS  0x00000040  0x02
 09)  SSDT  0x000004E7  0x01  "HP    "  "CpuPm   "  0x00003000  "INTL"   0x20050624
 10)  FACP  0x000000F4  0x04  "HP    "  "30AA    "  0x00000003  "HP  "   0x00000001
 11)  SSDT  0x0000025F  0x01  "HP    "  "Cpu0Tst "  0x00003000  "INTL"   0x20050624
 12)  SSDT  0x00000068  0x01  "HP    "  "HPQNLP  "  0x00000001  "MSFT"   0x0100000E
 13)  TCPA  0x00000032  0x02  "HP    "  "30AA    "  0x00000001  "HP  "   0x00000001
 14)  HPET  0x00000038  0x01  "HP    "  "30AA    "  0x00000001  "HP  "   0x00000001
 15)  SSDT  0x00000208  0x01  "HP    "  "Cpu0Ist "  0x00003000  "INTL"   0x20050624
 16)  SSDT  0x00000085  0x01  "HP    "  "Cpu1Cst "  0x00003000  "INTL"   0x20050624
 17)  SSDT  0x00000663  0x01  "HP    "  "Cpu0Cst "  0x00003001  "INTL"   0x20050624
 18)  SSDT  0x000000D4  0x01  "HP    "  "Cpu1Ist "  0x00003000  "INTL"   0x20050624

Found 18 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000068
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 06
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "30AA    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 01 [I/O APIC]
[03Dh 0061   1]                       Length : 0C
[03Eh 0062   1]                  I/O Apic ID : 01
[03Fh 0063   1]                     Reserved : 00
[040h 0064   4]                      Address : FEC00000
[044h 0068   4]                    Interrupt : 00000000

[048h 0072   1]                Subtable Type : 02 [Interrupt Source Override]
[049h 0073   1]                       Length : 0A
[04Ah 0074   1]                          Bus : 00
[04Bh 0075   1]                       Source : 00
[04Ch 0076   4]                    Interrupt : 00000002
[050h 0080   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[052h 0082   1]                Subtable Type : 02 [Interrupt Source Override]
[053h 0083   1]                       Length : 0A
[054h 0084   1]                          Bus : 00
[055h 0085   1]                       Source : 09
[056h 0086   4]                    Interrupt : 00000009
[05Ah 0090   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[05Ch 0092   1]                Subtable Type : 04 [Local APIC NMI]
[05Dh 0093   1]                       Length : 06
[05Eh 0094   1]                 Processor ID : 01
[05Fh 0095   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[061h 0097   1]         Interrupt Input LINT : 01

[062h 0098   1]                Subtable Type : 04 [Local APIC NMI]
[063h 0099   1]                       Length : 06
[064h 0100   1]                 Processor ID : 02
[065h 0101   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[067h 0103   1]         Interrupt Input LINT : 01

Raw Table Data: Length 104 (0x68)

    0000: 41 50 49 43 68 00 00 00 01 06 48 50 20 20 20 20  // APICh.....HP    
    0010: 33 30 41 41 20 20 20 20 01 00 00 00 48 50 20 20  // 30AA    ....HP  
    0020: 01 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 01 01 00 00 00 01 0C 01 00  // ................
    0040: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0050: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 01 05  // ................
    0060: 00 01 04 06 02 05 00 01                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 1, "HP    ", "nc6340", 0x00010000)
{
    Name (C000, 0x00)
    Processor (\_PR.CPU0, 0x01, 0x00001010, 0x06)
    {
        Name (C001, 0x00)
        Method (CSTH, 0, NotSerialized)
        {
            If ((C001 == 0x00))
            {
                C001 = 0x01
                \_SB.C002.C003.C004 = 0x00
            }

            Local0 = \_SB.C002.C003.C005.C006 ()
            Return (Local0)
        }

        Method (INI, 0, NotSerialized)
        {
            If (((\_SB.C007 & 0x01000000) && (C008 () == 0x04)))
            {
                \_SB.ISMI (0x3D, 0x00, 0x00, 0x00)
            }
        }

        Method (PPC, 0, NotSerialized)
        {
            Return (0x00)
        }
    }

    Processor (\_PR.CPU1, 0x02, 0x00001010, 0x06)
    {
        Method (PPC, 0, NotSerialized)
        {
            Return (0x00)
        }
    }

    Method (C009, 0, Serialized)
    {
        If ((\_SB.C00A > 0x00))
        {
            Local1 = (\_SB.C00A - 0x01)
        }
        Else
        {
            Local1 = 0x00
        }

        Local3 = 0x00
        If ((C000 < Local1))
        {
            Local3 |= 0x01
        }

        If ((C000 > 0x00))
        {
            Local3 |= 0x02
        }

        Return (C000) /* \C000 */
    }

    Name (\C00B, Package (0x10)
    {
        "0", 
        "1", 
        "2", 
        "3", 
        "4", 
        "5", 
        "6", 
        "7", 
        "8", 
        "9", 
        "A", 
        "B", 
        "C", 
        "D", 
        "E", 
        "F"
    })
    Method (\C00C, 2, NotSerialized)
    {
        Local0 = Arg0
        Local7 = ""
        Local4 = Arg1
        While ((Local4 > 0x00))
        {
            Local1 = (Local0 & 0x0F)
            Local2 = DerefOf (\C00B [Local1])
            Concatenate (Local2, Local7, Local3)
            Local7 = Local3
            Local0 >>= 0x04
            Local4--
        }

        Return (Local7)
    }

    Method (\C00D, 2, NotSerialized)
    {
        Local7 = SizeOf (Arg0)
        If ((Local7 != SizeOf (Arg1)))
        {
            Return (0x00)
        }

        Name (C00E, Buffer (Local7){})
        Name (C00F, Buffer (Local7){})
        C00E = Arg0
        C00F = Arg1
        Local6 = 0x00
        Local0 = 0x01
        While (((Local6 != Local7) && Local0))
        {
            Local2 = DerefOf (C00E [Local6])
            Local3 = DerefOf (C00F [Local6])
            Local6++
            If ((Local2 != Local3))
            {
                Local0 = 0x00
            }
        }

        Return (Local0)
    }

    Name (C010, 0xFFFFFFFD)
    Name (C011, Package (0x03)
    {
        "Microsoft Windows", 
        "Microsoft WindowsME: Millennium Edition", 
        "Microsoft Windows NT"
    })
    Method (\C015, 3, NotSerialized)
    {
        Name (C00E, Buffer (0x8C){})
        Name (C00F, Buffer (0x8C){})
        C00E = Arg0
        C00F = Arg1
        Local6 = 0x00
        Local0 = 0x01
        While (((Local6 != Arg2) && Local0))
        {
            Local2 = DerefOf (C00E [Local6])
            Local3 = DerefOf (C00F [Local6])
            Local6++
            If ((Local2 != Local3))
            {
                Local0 = 0x00
            }
        }

        Return (Local0)
    }

    Method (C008, 0, Serialized)
    {
        If ((C010 == 0xFFFFFFFD))
        {
            Local0 = \_OS
            Local7 = SizeOf (C011)
            Local1 = 0x00
            While (((Local1 < Local7) && (C010 == 0xFFFFFFFD)))
            {
                Local2 = \C00D (Local0, DerefOf (C011 [Local1]))
                If (Local2)
                {
                    C010 = (Local1 + 0x01)
                }
                Else
                {
                    Local1++
                }
            }

            If ((C010 == 0xFFFFFFFD))
            {
                C010 = 0x00
            }

            If (((C010 == 0x00) || (C010 == 0x03)))
            {
                If (CondRefOf (\_OSI, Local0))
                {
                    If (\_OSI ("Windows 2001"))
                    {
                        C010 = 0x04
                    }

                    If (\_OSI ("Windows 2001 SP1"))
                    {
                        C010 = 0x04
                    }

                    If (\_OSI ("Windows 2001 SP2"))
                    {
                        C010 = 0x05
                    }

                    If (\_OSI ("Windows 2006"))
                    {
                        C010 = 0x06
                    }

                    If (\_OSI ("Windows 2009"))
                    {
                        C010 = 0x07
                    }
                }
            }

            \_SB.C008 = C010 /* \C010 */
        }

        Return (C010) /* \C010 */
    }

    Method (\_SB._INI, 0, NotSerialized)  // _INI: Initialize
    {
        \C008 ()
        C017 ()
    }

    Method (C018, 2, Serialized)
    {
        Local6 = SizeOf (Arg0)
        Local7 = SizeOf (Arg1)
        If ((Local6 == 0x00))
        {
            Local0 = Arg1
            Return (Local0)
        }

        If ((Local7 == 0x00))
        {
            Local0 = Arg0
            Return (Local0)
        }

        Local1 = (Local7 + Local6)
        Local1 -= 0x02
        Local0 = Buffer (Local1){}
        Local1 = 0x00
        While ((Local1 < SizeOf (Arg0)))
        {
            Local0 [Local1] = DerefOf (Arg0 [Local1])
            Local1++
        }

        Local1 -= 0x02
        Local2 = 0x00
        While ((Local2 < SizeOf (Arg1)))
        {
            Local0 [Local1] = DerefOf (Arg1 [Local2])
            Local1++
            Local2++
        }

        Return (Local0)
    }

    Scope (\_SB)
    {
        Method (C017, 0, Serialized)
        {
            If (C019)
            {
                ISMI (0x47, 0x00, 0x00, 0x00)
            }
        }

        Device (C01A)
        {
            Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (C01B, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x000A0000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0x000F0000,         // Address Base
                        0x00100000,         // Address Length
                        _Y01)
                    Memory32Fixed (ReadWrite,
                        0x00100000,         // Address Base
                        0x00F00000,         // Address Length
                        _Y00)
                })
                CreateDWordField (C01B, \_SB.C01A._CRS._Y00._LEN, C01E)  // _LEN: Length
                CreateDWordField (C01B, \_SB.C01A._CRS._Y00._BAS, C01F)  // _BAS: Base Address
                C01E = (\_SB.C020 () - C01F) /* \_SB_.C01A._CRS.C01F */
                CreateDWordField (C01B, \_SB.C01A._CRS._Y01._LEN, C021)  // _LEN: Length
                CreateDWordField (C01B, \_SB.C01A._CRS._Y01._BAS, C022)  // _BAS: Base Address
                C022 = (\_SB.C023 << 0x04)
                C021 = (C01F - C022) /* \_SB_.C01A._CRS.C022 */
                Return (C01B) /* \_SB_.C01A._CRS.C01B */
            }
        }

        Method (C020, 0, NotSerialized)
        {
            Local0 = C024 /* \_SB_.C024 */
            Return (Local0)
        }

        Method (C025, 0, NotSerialized)
        {
            Local0 = C026 /* \_SB_.C026 */
            Return (Local0)
        }

        Method (C027, 0, NotSerialized)
        {
            Local0 = (C026 + 0x1040)
            Return (Local0)
        }

        Method (C029, 0, NotSerialized)
        {
            Local0 = (C026 + 0x00014F14)
        }

        Method (C02A, 0, NotSerialized)
        {
            Local0 = (C025 () + 0x00027EC0)
            Return (Local0)
        }

        OperationRegion (C02B, SystemMemory, 0x000F8000, 0x2C)
        Field (C02B, WordAcc, NoLock, Preserve)
        {
            C026,   32, 
            C02C,   16
        }

        OperationRegion (C02D, SystemMemory, C025 (), 0x1040)
        Field (C02D, AnyAcc, NoLock, Preserve)
        {
            C02E,   33280
        }

        OperationRegion (C02F, SystemMemory, C027 (), 0xD2)
        Field (C02F, AnyAcc, NoLock, Preserve)
        {
            C00A,   16, 
            C030,   16, 
            C031,   16, 
            C032,   16, 
            C033,   16, 
            C034,   8, 
            C035,   8, 
            Offset (0x10), 
            C036,   1544
        }

        OperationRegion (C037, SystemMemory, C027 (), 0x41)
        Field (C037, AnyAcc, NoLock, Preserve)
        {
            Offset (0x18), 
            C038,   8, 
            C039,   160, 
            C03A,   160
        }

        OperationRegion (C03B, SystemMemory, C02A (), 0x0140)
        Field (C03B, AnyAcc, NoLock, Preserve)
        {
            C03C,   32, 
            C03D,   4, 
            C03E,   1, 
            C008,   4, 
            C03F,   5, 
            C040,   1, 
            C041,   1, 
            C042,   3, 
            C043,   1, 
            C044,   1, 
            C045,   1, 
            C046,   1, 
            C047,   1, 
            C048,   1, 
            C049,   1, 
            C04A,   6, 
            C04B,   32, 
            C023,   16, 
            C007,   32, 
            C019,   8, 
            C04C,   8, 
            C04D,   8, 
            C04E,   8, 
            C04F,   8, 
            C050,   8, 
            Offset (0x1A), 
            C024,   32, 
            C051,   8, 
            C052,   8, 
            C053,   8, 
            C054,   8, 
            C055,   8, 
            C056,   8, 
            C057,   48, 
            C058,   8, 
            C059,   8, 
            C05A,   160, 
            C05B,   32, 
            C05C,   32, 
            C05D,   32, 
            C05E,   32, 
            C05F,   32, 
            C060,   88, 
            C061,   48, 
            C062,   48, 
            C063,   8, 
            C064,   8, 
            C065,   8, 
            C066,   216, 
            C067,   200
        }

        OperationRegion (C069, SystemMemory, C029 (), 0x05DA)
        Field (C069, AnyAcc, NoLock, Preserve)
        {
            C06A,   8, 
            C06B,   360, 
            C06C,   8, 
            C06D,   136, 
            C06E,   640, 
            C06F,   640, 
            C070,   640, 
            C071,   640, 
            C072,   640, 
            C073,   640, 
            C074,   640, 
            C075,   640, 
            C076,   640, 
            C077,   640, 
            C078,   640, 
            C079,   640, 
            C07A,   640, 
            C07B,   8, 
            C07C,   128, 
            C07D,   8, 
            C07E,   504, 
            C07F,   504, 
            C080,   8, 
            C081,   504, 
            C082,   504, 
            C083,   32, 
            C084,   16
        }

        Method (C085, 2, Serialized)
        {
            Local0 = Arg0
            If ((Local0 == 0x01))
            {
                Local1 = \_SB.C04B
                Local1 |= Arg1
                \_SB.C04B = Local1
            }
            Else
            {
                Local1 = \_SB.C04B
                Local2 = ~Arg1
                Local1 &= Local2
                \_SB.C04B = Local1
            }
        }

        Device (C002)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Device (C086)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = 0x00
                    If (C087)
                    {
                        Local0 = 0x0F
                    }

                    Return (Local0)
                }
            }

            Device (C088)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = 0x00
                    If (C089)
                    {
                        Local0 = 0x0F
                    }

                    Return (Local0)
                }
            }

            OperationRegion (C08A, PCI_Config, 0x54, 0x43)
            Field (C08A, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                C087,   1, 
                    ,   1, 
                C089,   1, 
                Offset (0x3D), 
                C08B,   48
            }

            Alias (C08B, \_SB.C08B)
            Scope (\_SB)
            {
                Name (C08C, Package (0x0C)
                {
                    0x4000, 
                    0x4000, 
                    0x4000, 
                    0x4000, 
                    0x4000, 
                    0x4000, 
                    0x4000, 
                    0x4000, 
                    0x4000, 
                    0x4000, 
                    0x4000, 
                    0x4000
                })
                Method (C08D, 0, NotSerialized)
                {
                    Acquire (C08E, 0xFFFF)
                    If ((C08F == 0xFFFFFFFD))
                    {
                        Local0 = 0x00
                        C08F = Local0
                        Local2 = Local0
                        Local5 = C08B /* \_SB_.C08B */
                        Local1 = DerefOf (Local5 [Local0])
                        Local4 = 0x000C0000
                        Local3 = (C023 << 0x04)
                        While (((Local4 <= Local3) && (C08F < 0x06)))
                        {
                            If (((Local1 & 0x03) == 0x00))
                            {
                                If ((Local2 == 0x00))
                                {
                                    C090 [C08F] = Local4
                                }

                                Local2 = 0x01
                            }
                            Else
                            {
                                If (Local2)
                                {
                                    C091 [C08F] = (Local4 - 0x01)
                                    C08F++
                                }

                                Local2 = 0x00
                            }

                            If ((Local4 < Local3))
                            {
                                Local4 += DerefOf (C08C [Local0])
                                Local1 >>= 0x04
                                If ((Local0 & 0x01))
                                {
                                    Local1 = 0x01
                                    If ((Local4 < Local3))
                                    {
                                        Local6 = (Local0 >> 0x01)
                                        Local6++
                                        Local1 = DerefOf (Local5 [Local6])
                                    }
                                }
                            }
                            Else
                            {
                                Local4++
                            }

                            Local0++
                        }
                    }

                    Release (C08E)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                C08D ()
            }

            Name (C092, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFEE01000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x011FEFFF,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Scope (\_SB)
            {
                Name (C090, Package (0x07){})
                Name (C091, Package (0x07){})
                Name (C08F, 0xFFFFFFFD)
                Mutex (C08E, 0x00)
            }

            Method (C094, 4, NotSerialized)
            {
                Local2 = Arg1
                Local4 = Arg3
                Local5 = (Local4 + 0x1A)
                While ((Local4 < Local5))
                {
                    Arg0 [Local2] = DerefOf (C092 [Local4])
                    Local4++
                    Local2++
                }

                Local2 = Arg1
                Local2 += 0x0A
                CreateDWordField (Arg0, Local2, C095)
                Local2 += 0x04
                CreateDWordField (Arg0, Local2, C096)
                Local2 += 0x08
                CreateDWordField (Arg0, Local2, C097)
                C095 = DerefOf (C090 [Arg2])
                C096 = DerefOf (C091 [Arg2])
                Local3 = (C096 - C095) /* \_SB_.C002.C094.C095 */
                C097 = (Local3 + 0x01)
                Local2 += 0x04
                Return (Local2)
            }

            Method (C098, 0, NotSerialized)
            {
                Acquire (C08E, 0xFFFF)
                Local1 = (C08F * 0x1A)
                Local2 = (SizeOf (C092) + Local1)
                Local0 = Buffer (Local2){}
                Local1 = 0x00
                Local2 = 0x00
                While ((Local1 < SizeOf (C092)))
                {
                    Local0 [Local2] = DerefOf (C092 [Local1])
                    Local2++
                    Local1++
                }

                Local1 = 0x00
                Local2 -= 0x02
                Local3 = (Local2 - 0x1A)
                While ((Local1 < C08F))
                {
                    Local2 = C094 (Local0, Local2, Local1, Local3)
                    Local1++
                }

                CreateWordField (Local0, Local2, C099)
                C099 = 0x79
                Release (C08E)
                Return (Local0)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (C092, \_SB.C002._Y02._MIN, C095)  // _MIN: Minimum Base Address
                CreateDWordField (C092, \_SB.C002._Y02._LEN, C097)  // _LEN: Length
                CreateDWordField (C092, \_SB.C002._Y02._MAX, C096)  // _MAX: Maximum Base Address
                Local1 = C09A ()
                C095 = Local1
                Local1 = (C096 - Local1)
                C097 = (Local1 + 0x01)
                Local2 = C098 ()
                Return (Local2)
            }

            Method (C09A, 0, Serialized)
            {
                Local0 = \_SB.C020 ()
                Return (Local0)
            }

            Name (_S3D, 0x02)  // _S3D: S3 Device State
            Name (_S4D, 0x03)  // _S4D: S4 Device State
            Device (C09B)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x05
                })
                OperationRegion (C09C, SystemMemory, 0xFED90000, 0x4000)
                Field (C09C, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x3404), 
                    C09D,   2, 
                        ,   5, 
                    C09E,   1, 
                    Offset (0x3418), 
                    C09F,   32
                }

                Method (C0A0, 0, Serialized)
                {
                    Local0 = 0x00
                    If (C09E)
                    {
                        Local2 = (C09D << 0x0C)
                        Local0 = (Local2 | 0xFED00000)
                    }

                    Return (Local0)
                }

                Alias (C0A0, \_SB.C0A0)
                Device (C0A1)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (C0A2 (0x80))
                    }
                }
            }

            Method (C0A2, 1, NotSerialized)
            {
                Local0 = 0x0F
                If ((^C09B.C09F & Arg0))
                {
                    Local0 = 0x00
                }

                Return (Local0)
            }

            Device (C0A3)
            {
                Name (_ADR, 0x001E0002)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x20))
                }
            }

            Device (C0A4)
            {
                Name (_ADR, 0x001E0003)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x40))
                }
            }

            Device (C003)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (C0A5, PCI_Config, 0x60, 0xA0)
                Field (C0A5, AnyAcc, NoLock, Preserve)
                {
                    C0A6,   8, 
                    C0A7,   8, 
                    C0A8,   8, 
                    C0A9,   8, 
                    Offset (0x08), 
                    C0AA,   8, 
                    C0AB,   8, 
                    C0AC,   8, 
                    C0AD,   8, 
                    Offset (0x20), 
                    C0AE,   3, 
                        ,   1, 
                    C0AF,   3, 
                    Offset (0x21), 
                    C0B0,   2, 
                        ,   2, 
                    C0B1,   1, 
                    Offset (0x22), 
                    C0B2,   1, 
                    C0B3,   1, 
                    C0B4,   1, 
                    C0B5,   1, 
                    Offset (0x24), 
                    C0B6,   16, 
                    C0B7,   8, 
                    Offset (0x28), 
                    C0B8,   16, 
                    C0B9,   8, 
                    Offset (0x40), 
                        ,   7, 
                    C004,   1, 
                    Offset (0x58), 
                    C0BA,   32
                }

                OperationRegion (C0BB, SystemIO, 0xB2, 0x01)
                Field (C0BB, AnyAcc, NoLock, Preserve)
                {
                    C0BC,   8
                }

                OperationRegion (C0BD, SystemIO, 0x0800, 0x10)
                Field (C0BD, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    C0BE,   8
                }

                OperationRegion (C0BF, SystemIO, 0x1000, 0x43)
                Field (C0BF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x2A), 
                    C0C0,   16, 
                        ,   2, 
                    C0C1,   1, 
                    Offset (0x30), 
                    C0C2,   1, 
                    C0C3,   1, 
                        ,   2, 
                    C0C4,   1, 
                    Offset (0x34), 
                        ,   5, 
                    C0C5,   1, 
                    Offset (0x38), 
                    C0C6,   16, 
                    C0C7,   16, 
                    Offset (0x42), 
                        ,   1, 
                    C0C8,   1
                }

                OperationRegion (C0C9, SystemIO, 0x1060, 0x14)
                Field (C0C9, ByteAcc, NoLock, Preserve)
                {
                    C0CA,   9, 
                    Offset (0x04), 
                        ,   3, 
                    C0CB,   1, 
                    Offset (0x06), 
                        ,   1, 
                    C0CC,   1, 
                    Offset (0x08), 
                        ,   11, 
                    C0CD,   1, 
                    Offset (0x12), 
                    C0CE,   10
                }

                OperationRegion (C0CF, SystemMemory, 0xFFBC0100, 0x01)
                Field (C0CF, ByteAcc, NoLock, Preserve)
                {
                    C0D0,   5
                }

                OperationRegion (C0D1, SystemIO, 0x1100, 0x3C)
                Field (C0D1, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    C0D2,   32, 
                    Offset (0x2C), 
                    C0D3,   32, 
                    Offset (0x38), 
                    C0D4,   16
                }

                OperationRegion (C0D5, SystemIO, 0x1100, 0x3C)
                Field (C0D5, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    C0D6,   16, 
                    C0D7,   16
                }

                OperationRegion (C0D8, SystemIO, 0x1200, 0x06)
                Field (C0D8, ByteAcc, NoLock, Preserve)
                {
                    C0D9,   8, 
                    Offset (0x02), 
                    C0DA,   8, 
                    C0DB,   8, 
                    C0DC,   8, 
                    C0DD,   8
                }

                Method (C0DE, 3, Serialized)
                {
                    Acquire (\_GL, 0xFFFF)
                    Local2 = 0x00
                    Local0 = 0xFA
                    While (((C0D9 & 0x01) && (Local0 > 0x00)))
                    {
                        Stall (0x64)
                        Local0--
                    }

                    If (Local0)
                    {
                        C0DB = Arg1
                        C0DC = Arg0
                        If (((Arg0 & 0x01) == 0x00))
                        {
                            C0DD = Arg2
                        }

                        C0D9 = 0xFF
                        C0DA = 0x48
                        Local0 = 0xFA
                        While ((((C0D9 & 0x1E) == 0x00) && (Local0 > 0x00)))
                        {
                            Stall (0x64)
                            Local0--
                        }

                        Local1 = (C0D9 & 0x1C)
                        C0D9 = 0xFF
                        If (((Local1 == 0x00) && (Arg0 & 0x01)))
                        {
                            Local2 = C0DD /* \_SB_.C002.C003.C0DD */
                        }
                    }
                    Else
                    {
                        Local1 = 0x01
                    }

                    Release (\_GL)
                    If ((Arg0 & 0x01))
                    {
                        Local3 = (Local1 << 0x08)
                        Local1 = (Local3 | Local2)
                    }

                    Return (Local1)
                }

                Name (C0DF, Package (0x08)
                {
                    0x03F8, 
                    0x02F8, 
                    0x0220, 
                    0x0228, 
                    0x0238, 
                    0x02E8, 
                    0x0338, 
                    0x03E8
                })
                Name (C0E0, Package (0x03)
                {
                    0x0378, 
                    0x0278, 
                    0x03BC
                })
                Method (C0E1, 3, NotSerialized)
                {
                    Local1 = 0x00
                    Local0 = Match (Arg0, MEQ, Arg1, MTR, 0x00, 0x00)
                    If ((Local0 != Ones))
                    {
                        Local1 = (Local0 << Arg2)
                    }

                    Return (Local1)
                }

                Method (C0E2, 2, Serialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        C0B5 = 0x00
                    }
                    ElseIf ((Arg0 == 0x01))
                    {
                        C0B4 = 0x00
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        C0B2 = 0x00
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        C0B3 = 0x00
                        C0B8 &= 0xFFFFFFFE
                    }
                }

                Method (C0E3, 3, Serialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = 0x00
                        If ((Arg1 == 0x0370))
                        {
                            Local0 = 0x01
                        }

                        C0B1 = Local0
                        C0B5 = 0x01
                    }
                    ElseIf ((Arg0 == 0x01))
                    {
                        C0B0 = C0E1 (C0E0, Arg1, 0x00)
                        C0B4 = 0x01
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        C0AE = C0E1 (C0DF, Arg1, 0x00)
                        C0B2 = 0x01
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        C0AF = C0E1 (C0DF, Arg1, 0x00)
                        C0B3 = 0x01
                        C0B9 = 0x0C
                        C0B8 = (Arg2 | 0x01)
                    }
                }
            }

            Device (C0E4)
            {
                OperationRegion (C0E5, PCI_Config, 0x40, 0x18)
                Field (C0E5, AnyAcc, NoLock, Preserve)
                {
                    C0E6,   16, 
                    C0E7,   16, 
                    C0E8,   8, 
                    Offset (0x08), 
                    C0E9,   8, 
                    Offset (0x0A), 
                    C0EA,   16, 
                    Offset (0x14), 
                    C0EB,   32
                }

                Method (C0EC, 2, Serialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = C0E6 /* \_SB_.C002.C0E4.C0E6 */
                    }
                    Else
                    {
                        Local0 = C0E7 /* \_SB_.C002.C0E4.C0E7 */
                    }

                    If ((Arg1 == 0x00))
                    {
                        If (((Local0 & 0x09) == 0x00))
                        {
                            Return (0x0384)
                        }

                        If (((Local0 & 0x09) == 0x08))
                        {
                            Return (0x0384)
                        }

                        Local1 = ((Local0 & 0x0300) >> 0x08)
                        Local2 = ((Local0 & 0x3000) >> 0x0C)
                        Return ((0x1E * (0x09 - (Local1 + Local2))))
                    }
                    Else
                    {
                        If (((Local0 & 0x90) == 0x00))
                        {
                            Return (0x0384)
                        }

                        If (((Local0 & 0x90) == 0x80))
                        {
                            Return (0x0384)
                        }

                        If ((Local0 & 0x4000))
                        {
                            Local0 = C0E8 /* \_SB_.C002.C0E4.C0E8 */
                            If ((Arg0 == 0x01))
                            {
                                Local0 >>= 0x04
                            }

                            Return ((0x1E * (0x09 - (((Local0 >> 0x02) & 0x03
                                ) + (Local0 & 0x03)))))
                        }
                        Else
                        {
                            Local1 = ((Local0 & 0x0300) >> 0x08)
                            Local2 = ((Local0 & 0x3000) >> 0x0C)
                            Return ((0x1E * (0x09 - (Local1 + Local2))))
                        }
                    }
                }

                Name (C0ED, Buffer (0x05)
                {
                     0x70, 0x49, 0x36, 0x27, 0x19                     // pI6'.
                })
                Method (C0EE, 2, Serialized)
                {
                    Local0 = (0x01 << ((Arg0 * 0x02) + Arg1))
                    If ((C0E9 & Local0))
                    {
                        Local1 = C0EB /* \_SB_.C002.C0E4.C0EB */
                        If (((Local1 >> 0x0C) & Local0))
                        {
                            Return (0x11)
                        }

                        Local2 = ((C0EA >> ((Arg0 * 0x08) + (Arg1 * 
                            0x04))) & 0x03)
                        If ((Local1 & Local0))
                        {
                            Local2 += 0x02
                        }

                        Return (DerefOf (C0ED [Local2]))
                    }

                    Return (0xFFFFFFFF)
                }

                Method (C0EF, 1, Serialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = C0E6 /* \_SB_.C002.C0E4.C0E6 */
                    }
                    Else
                    {
                        Local0 = C0E7 /* \_SB_.C002.C0E4.C0E7 */
                    }

                    Local1 = (C0E9 >> (0x02 * Arg0))
                    Local3 = 0x00
                    If ((Local1 & 0x01))
                    {
                        Local3 |= 0x01
                    }

                    If ((Local1 & 0x02))
                    {
                        Local3 |= 0x04
                    }

                    If ((Local0 & 0x02))
                    {
                        Local3 |= 0x02
                    }

                    If ((Local0 & 0x20))
                    {
                        Local3 |= 0x08
                    }

                    Local3 |= 0x10
                    Return (Local3)
                }

                Method (C0F0, 5, Serialized)
                {
                    CreateWordField (Arg4, 0x02, C0F1)
                    CreateWordField (Arg4, 0x04, C0F2)
                    CreateWordField (Arg4, 0x08, C0F3)
                    Local0 = 0x0C
                    Local1 = 0x00
                    Local2 = 0x00
                    Local5 = 0x01
                    If (((Arg3 & (0x02 << (Arg1 * 0x02))) && 
                        (C0F1 & 0x0800)))
                    {
                        Local0 |= 0x02
                        Local5 = 0x08
                    }

                    If (((Arg2 <= 0xF0) && (C0F2 & 0x02)))
                    {
                        Local0 = ((Local0 & 0xFFFFFFF7) | 0x01)
                        If (((Arg2 <= 0x78) && (C0F3 & 0x02)))
                        {
                            Local1 = 0x2300
                            Local2 = 0x0B
                            Local5 |= 0x04
                        }
                        ElseIf (((Arg2 <= 0xB4) && (C0F3 & 0x01)))
                        {
                            Local1 = 0x2100
                            Local2 = 0x09
                            Local5 |= 0x03
                        }
                        Else
                        {
                            Local1 = 0x0100
                            Local2 = 0x04
                            Local5 |= 0x02
                        }
                    }

                    If ((Arg1 == 0x00))
                    {
                        Local0 |= Local1
                        Local4 = 0x40F0
                    }
                    Else
                    {
                        Local0 <<= 0x04
                        If ((Arg3 & 0x10))
                        {
                            Local0 |= 0x4000
                            If ((Arg0 == 0x00))
                            {
                                C0E8 = ((C0E8 & 0xF0) | Local2)
                            }
                            Else
                            {
                                C0E8 = ((C0E8 & 0x0F) | (Local2 << 0x04))
                            }
                        }

                        Local4 = 0x3F0F
                    }

                    Local0 |= 0x8000
                    If ((Arg0 == 0x00))
                    {
                        C0E6 = ((C0E6 & Local4) | Local0)
                    }
                    Else
                    {
                        C0E7 = ((C0E7 & Local4) | Local0)
                    }

                    Return (Local5)
                }

                Method (C0F4, 5, Serialized)
                {
                    CreateWordField (Arg4, 0x0C, C0F5)
                    Local0 = 0x00
                    Local1 = 0x00
                    Local2 = 0x00
                    Local3 = ((Arg0 * 0x02) + Arg1)
                    Local4 = 0x00
                    Local5 = (0x1011 << Local3)
                    If ((Arg3 & (0x01 << (Arg1 * 0x02))))
                    {
                        Local1 = 0x01
                        Local6 = C0F6 (Arg0, Arg1)
                        If (((Local6 >= 0x05) && ((Arg2 < 0x19) && (C0F5 & 
                            0x20))))
                        {
                            Local0 = 0x01
                            Local2 = 0x45
                            Local4 = (0x1011 << Local3)
                        }
                        ElseIf (((Local6 >= 0x04) && ((Arg2 < 0x27) && (
                            C0F5 & 0x10))))
                        {
                            Local0 = 0x02
                            Local2 = 0x44
                            Local4 = (0x11 << Local3)
                        }
                        ElseIf (((Local6 >= 0x03) && ((Arg2 < 0x36) && (
                            C0F5 & 0x08))))
                        {
                            Local0 = 0x01
                            Local2 = 0x43
                            Local4 = (0x11 << Local3)
                        }
                        ElseIf (((Local6 >= 0x02) && ((Arg2 < 0x49) && (
                            C0F5 & 0x04))))
                        {
                            Local0 = 0x02
                            Local2 = 0x42
                        }
                        ElseIf (((Local6 >= 0x01) && ((Arg2 < 0x70) && (
                            C0F5 & 0x02))))
                        {
                            Local0 = 0x01
                            Local2 = 0x41
                        }
                        Else
                        {
                            Local0 = 0x00
                            Local2 = 0x40
                        }
                    }

                    C0E9 = ((C0E9 & ~(0x01 << Local3)) | (
                        Local1 << Local3))
                    Local3 *= 0x04
                    C0EA = ((C0EA & ~(0x03 << Local3)) | (
                        Local0 << Local3))
                    C0EB = ((C0EB & ~Local5) | Local4)
                    Return (Local2)
                }

                Method (C0F6, 2, NotSerialized)
                {
                    Local0 = 0x02
                    If (((Arg0 == 0x00) && (Arg1 == 0x00)))
                    {
                        Local0 = 0x05
                    }

                    Return (Local0)
                }
            }

            Method (C0F7, 1, Serialized)
            {
                Local0 = 0x01
                Return (Local0)
            }

            Device (C0F9)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x0100))
                }

                OperationRegion (C0FA, PCI_Config, 0xC4, 0x04)
                Field (C0FA, AnyAcc, NoLock, Preserve)
                {
                    C0FB,   1, 
                    C0FC,   1
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    Local0 = Arg0
                    If ((Local0 == 0x01))
                    {
                        C0FB = C0F7 (0x00)
                        C0FC = C0F7 (0x01)
                    }
                    Else
                    {
                        C0FB = 0x00
                        C0FC = 0x00
                    }
                }

                Device (C0FD)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (C0FE)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (C0FF)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }
                }
            }

            Device (C100)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x0200))
                }

                OperationRegion (C0FA, PCI_Config, 0xC4, 0x04)
                Field (C0FA, AnyAcc, NoLock, Preserve)
                {
                    C0FB,   1, 
                    C0FC,   1
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    Local0 = Arg0
                    If ((Local0 == 0x01))
                    {
                        C0FB = C0F7 (0x02)
                        C0FC = C0F7 (0x03)
                    }
                    Else
                    {
                        C0FB = 0x00
                        C0FC = 0x00
                    }
                }

                Device (C0FD)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (C0FE)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (C0FF)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }
                }
            }

            Device (C101)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x0400))
                }

                OperationRegion (C0FA, PCI_Config, 0xC4, 0x01)
                Field (C0FA, AnyAcc, NoLock, Preserve)
                {
                    C0FB,   1, 
                    C0FC,   1
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    Local0 = Arg0
                    If ((Local0 == 0x01))
                    {
                        C0FB = C0F7 (0x04)
                        C0FC = C0F7 (0x05)
                    }
                    Else
                    {
                        C0FB = 0x00
                        C0FC = 0x00
                    }
                }

                Device (C0FD)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (C0FE)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (C0FF)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }
                }
            }

            Device (C102)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x0800))
                }

                OperationRegion (C0FA, PCI_Config, 0xC4, 0x01)
                Field (C0FA, AnyAcc, NoLock, Preserve)
                {
                    C0FB,   1, 
                    C0FC,   1
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    Local0 = Arg0
                    If ((Local0 == 0x01))
                    {
                        C0FB = C0F7 (0x06)
                        C0FC = C0F7 (0x07)
                    }
                    Else
                    {
                        C0FB = 0x00
                        C0FC = 0x00
                    }
                }

                Device (C0FD)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (C0FE)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (C0FF)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }
                }
            }

            Device (C103)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x8000))
                }

                Device (C0FD)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (C0FE)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (C0FF)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (C104)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (C105)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }

                    Device (C106)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                    }

                    Device (C107)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                    }

                    Device (C108)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                    }

                    Device (C109)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                    }
                }
            }

            Device (C10A)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x00010000))
                }

                OperationRegion (C10B, PCI_Config, 0x50, 0x90)
                Field (C10B, AnyAcc, NoLock, Preserve)
                {
                        ,   4, 
                    C10C,   1, 
                    Offset (0x0A), 
                    C10D,   16, 
                    Offset (0x10), 
                    C10E,   16, 
                    C10F,   1, 
                    Offset (0x88), 
                    C110,   32, 
                        ,   30, 
                    C111,   1, 
                    C112,   1
                }

                OperationRegion (C113, SystemMemory, 0xF80E0304, 0x02)
                Field (C113, AnyAcc, NoLock, Preserve)
                {
                        ,   15, 
                    C114,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (C115)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                C116, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                C117, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                C118, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                C119, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (C11A)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x00020000))
                }

                OperationRegion (C11B, PCI_Config, 0x50, 0x90)
                Field (C11B, AnyAcc, NoLock, Preserve)
                {
                        ,   4, 
                    C10C,   1, 
                    Offset (0x0A), 
                    C10D,   16, 
                    Offset (0x10), 
                    C10E,   16, 
                    C10F,   1, 
                    Offset (0x88), 
                    C110,   32, 
                        ,   30, 
                    C111,   1, 
                    C112,   1
                }

                OperationRegion (C11C, SystemMemory, 0xF80E1304, 0x02)
                Field (C11C, AnyAcc, NoLock, Preserve)
                {
                        ,   15, 
                    C114,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (C115)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                C117, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                C118, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                C119, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                C116, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (C11D)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x00040000))
                }

                OperationRegion (C11E, PCI_Config, 0x50, 0x90)
                Field (C11E, AnyAcc, NoLock, Preserve)
                {
                        ,   4, 
                    C10C,   1, 
                    Offset (0x0A), 
                    C10D,   16, 
                    Offset (0x10), 
                    C10E,   16, 
                    C10F,   1, 
                    Offset (0x88), 
                    C110,   32, 
                        ,   30, 
                    C111,   1, 
                    C112,   1
                }

                OperationRegion (C11F, SystemMemory, 0xF80E2304, 0x02)
                Field (C11F, AnyAcc, NoLock, Preserve)
                {
                        ,   15, 
                    C114,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (C115)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x11
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                C118, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                C119, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                C116, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                C117, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (C120)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x00080000))
                }

                OperationRegion (C121, PCI_Config, 0x50, 0x90)
                Field (C121, AnyAcc, NoLock, Preserve)
                {
                        ,   4, 
                    C10C,   1, 
                    Offset (0x0A), 
                    C10D,   16, 
                    Offset (0x10), 
                    C10E,   16, 
                    C10F,   1, 
                    Offset (0x88), 
                    C110,   32, 
                        ,   30, 
                    C111,   1, 
                    C112,   1
                }

                OperationRegion (C122, SystemMemory, 0xF80E3304, 0x02)
                Field (C122, AnyAcc, NoLock, Preserve)
                {
                        ,   15, 
                    C114,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (C115)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x12
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                C119, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                C116, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                C117, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                C118, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (C123)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x00100000))
                }

                OperationRegion (C124, PCI_Config, 0x50, 0x90)
                Field (C124, AnyAcc, NoLock, Preserve)
                {
                        ,   4, 
                    C10C,   1, 
                    Offset (0x0A), 
                    C10D,   16, 
                    Offset (0x10), 
                    C10E,   16, 
                    C10F,   1, 
                    Offset (0x88), 
                    C110,   32, 
                        ,   30, 
                    C111,   1, 
                    C112,   1
                }

                OperationRegion (C125, SystemMemory, 0xF80E4304, 0x02)
                Field (C125, AnyAcc, NoLock, Preserve)
                {
                        ,   15, 
                    C114,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (C115)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                C116, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                C117, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                C118, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                C119, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (C126)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x00200000))
                }

                OperationRegion (C127, PCI_Config, 0x50, 0x90)
                Field (C127, AnyAcc, NoLock, Preserve)
                {
                        ,   4, 
                    C10C,   1, 
                    Offset (0x0A), 
                    C10D,   16, 
                    Offset (0x10), 
                    C10E,   16, 
                    C10F,   1, 
                    Offset (0x88), 
                    C110,   32, 
                        ,   30, 
                    C111,   1, 
                    C112,   1
                }

                OperationRegion (C128, SystemMemory, 0xF80E5304, 0x02)
                Field (C128, AnyAcc, NoLock, Preserve)
                {
                        ,   15, 
                    C114,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (C115)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                C117, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                C118, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                C119, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                C116, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (C129)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C0A2 (0x10))
                }
            }

            Method (C12A, 1, Serialized)
            {
                Name (C12B, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, _Y03)
                        {}
                })
                CreateWordField (C12B, \_SB.C002.C12A._Y03._INT, C12D)  // _INT: Interrupts
                Local1 = 0x00
                Local0 = Arg0
                Local0 &= 0x8F
                If ((Local0 < 0x80))
                {
                    Local0 &= 0x0F
                    Local1 = (0x01 << Local0)
                }

                C12D = Local1
                Return (C12B) /* \_SB_.C002.C12A.C12B */
            }

            Method (C12E, 1, Serialized)
            {
                Local0 = Arg0
                Local0 &= 0x80
                If ((Local0 == 0x00))
                {
                    Local0 = 0x0B
                }
                Else
                {
                    Local0 = 0x09
                }

                Return (Local0)
            }

            Method (C12F, 1, Serialized)
            {
                Local0 = Arg0
                Local0 &= 0xF0
                Local0 |= 0x80
                Return (Local0)
            }

            Method (C130, 1, Serialized)
            {
                CreateWordField (Arg0, 0x01, C131)
                If ((C131 == 0x00))
                {
                    Local0 = 0x00
                }
                Else
                {
                    FindSetRightBit (C131, Local0)
                    Local0--
                }

                Return (Local0)
            }

            Device (C116)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x60)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C12E (^^C003.C0A6))
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ^^C003.C0A6 = C12F (^^C003.C0A6)
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    ^^C003.C0A6 = C130 (Arg0)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (C12A (^^C003.C0A6))
                }
            }

            Device (C117)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x61)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C12E (^^C003.C0A7))
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ^^C003.C0A7 = C12F (^^C003.C0A7)
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    ^^C003.C0A7 = C130 (Arg0)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (C12A (^^C003.C0A7))
                }
            }

            Device (C118)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x62)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C12E (^^C003.C0A8))
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ^^C003.C0A8 = C12F (^^C003.C0A8)
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    ^^C003.C0A8 = C130 (Arg0)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (C12A (^^C003.C0A8))
                }
            }

            Device (C119)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x63)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C12E (^^C003.C0A9))
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ^^C003.C0A9 = C12F (^^C003.C0A9)
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    ^^C003.C0A9 = C130 (Arg0)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (C12A (^^C003.C0A9))
                }
            }

            Device (C132)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x68)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C12E (^^C003.C0AA))
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ^^C003.C0AA = C12F (^^C003.C0AA)
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    ^^C003.C0AA = C130 (Arg0)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (C12A (^^C003.C0AA))
                }
            }

            Device (C133)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x69)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C12E (^^C003.C0AB))
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ^^C003.C0AB = C12F (^^C003.C0AB)
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    ^^C003.C0AB = C130 (Arg0)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (C12A (^^C003.C0AB))
                }
            }

            Device (C134)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x6A)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C12E (^^C003.C0AC))
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ^^C003.C0AC = C12F (^^C003.C0AC)
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    ^^C003.C0AC = C130 (Arg0)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (C12A (^^C003.C0AC))
                }
            }

            Device (C135)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x6B)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (C12E (^^C003.C0AD))
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ^^C003.C0AD = C12F (^^C003.C0AD)
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    ^^C003.C0AD = C130 (Arg0)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (C12A (^^C003.C0AD))
                }
            }

            Method (C136, 1, NotSerialized)
            {
                While (^C003.C0C5)
                {
                    Stall (0x01)
                }

                ^C003.C0BC = 0xF3
                Stall (0x32)
                While (^C003.C0C5)
                {
                    Stall (0x01)
                }
            }

            Mutex (C137, 0x00)
            Name (C138, 0x00)
            Name (C139, 0x00)
            Method (C13A, 0, NotSerialized)
            {
                Acquire (C137, 0xFFFF)
                If ((C139 == 0x00))
                {
                    ^C003.C0C2 = 0x00
                    ^C003.C0C3 = 0x00
                }

                C139++
                Release (C137)
            }

            Method (C13B, 0, NotSerialized)
            {
                Acquire (C137, 0xFFFF)
                C139--
                If ((C139 == 0x00))
                {
                    ^C003.C0C3 = 0x01
                    ^C003.C0C2 = 0x01
                }

                Release (C137)
            }

            Method (\_SB.ISMI, 4, NotSerialized)
            {
                Acquire (C13C, 0xFFFF)
                If (Arg3)
                {
                    Acquire (\_GL, 0xFFFF)
                }

                C05B = Arg0
                C05C = Arg1
                C05D = Arg2
                ^C002.C003.C0BE = 0x00
                If (Arg3)
                {
                    Release (\_GL)
                }

                Release (C13C)
                Return (C05B) /* \_SB_.C05B */
            }

            Scope (C088)
            {
                Name (C13D, 0x00)
                OperationRegion (C13E, PCI_Config, 0x2C, 0x04)
                Field (C13E, DWordAcc, NoLock, Preserve)
                {
                    C13F,   32
                }

                OperationRegion (C140, PCI_Config, 0x4C, 0x04)
                Field (C140, DWordAcc, NoLock, Preserve)
                {
                    C141,   32
                }

                Name (_S3D, 0x03)  // _S3D: S3 Device State
                Name (_S4D, 0x03)  // _S4D: S4 Device State
                Method (C142, 1, Serialized)
                {
                    Local0 = 0x00
                    If ((C143 (0x00) & Arg0))
                    {
                        Local0 = 0x01
                        If ((C053 & Arg0))
                        {
                            Local0 = 0x1D
                            If ((C052 & Arg0))
                            {
                                Local0 = 0x1F
                            }
                        }
                    }

                    Return (Local0)
                }

                Method (C145, 1, Serialized)
                {
                    Local0 = 0x00
                    If ((C054 & Arg0))
                    {
                        Local0 = 0x01
                    }

                    Return (Local0)
                }

                Method (C146, 2, Serialized)
                {
                    Local0 = C055 /* \_SB_.C055 */
                    If ((Arg1 & 0x01))
                    {
                        Local0 |= Arg0
                    }
                    Else
                    {
                        Local0 &= ~Arg0
                    }

                    C055 = Local0
                    If ((Arg1 & 0x40000000))
                    {
                        C052 = Local0
                    }

                    If (((Arg1 & 0xC0000000) == 0x80000000))
                    {
                        \_SB.C147 (0xEA74, 0x01, 0x00, 0x00, 0x00)
                    }
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    Local0 = (C051 & 0xF8)
                    Local1 = (C051 & 0x83)
                    C051 = (Local0 | Arg0)
                    If (CondRefOf (^C148, Local2))
                    {
                        ^C148 (Arg0, Local1)
                    }
                }

                Device (C149)
                {
                    Name (_ADR, 0x0100)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (C142 (0x02))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (C145 (0x02))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        C146 (0x02, Arg0)
                    }
                }

                Device (C14A)
                {
                    Name (_ADR, 0x0400)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (C142 (0x01))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (C145 (0x01))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        C146 (0x01, Arg0)
                    }

                    Name (C14B, 0x00)
                    Name (C14C, Package (0x02)
                    {
                        Package (0x0D){}, 
                        Package (0x1B){}
                    })
                    Name (C14D, 0x00)
                    Method (_BCL, 0, Serialized)  // _BCL: Brightness Control Levels
                    {
                        If ((C14D == 0x00))
                        {
                            If ((\C008 () > 0x06))
                            {
                                C064 = C065 /* \_SB_.C065 */
                            }

                            Local7 = 0x00
                            If ((C064 == 0x19))
                            {
                                C14B = 0x01
                                Local7 = 0x01
                            }

                            Local1 = 0x00
                            Local4 = C066 /* \_SB_.C066 */
                            Local0 = C060 /* \_SB_.C060 */
                            While ((Local1 < (C064 + 0x02)))
                            {
                                If ((Local7 || (Local1 < 0x02)))
                                {
                                    Local3 = Local1
                                }
                                Else
                                {
                                    Local3 = DerefOf (Local0 [(Local1 - 0x02)])
                                    Local3 += 0x02
                                }

                                Local2 = DerefOf (Local4 [Local3])
                                DerefOf (C14C [C14B]) [Local1] = Local2
                                Local1++
                            }

                            C14D = 0x01
                        }

                        Return (DerefOf (C14C [C14B]))
                    }

                    Name (C14E, 0x64)
                    Method (_BCM, 1, Serialized)  // _BCM: Brightness Control Method
                    {
                        Local0 = 0x00
                        If ((\C008 () > 0x05))
                        {
                            C051 |= 0x40
                            Local0 = 0x01
                        }

                        C14E = Arg0
                        Local1 = Match (DerefOf (C14C [C14B]), MGE, Arg0, MTR, 0x00, 
                            0x02)
                        If ((Local1 == Ones))
                        {
                            Local2 = DerefOf (C14C [C14B])
                            Local1 = (SizeOf (Local2) - 0x01)
                        }

                        Local1 -= 0x02
                        If (Local0)
                        {
                            C063 = Local1
                            \_SB.C147 (0xEA74, 0x04, Local1, 0x00, 0x00)
                        }
                    }

                    Method (_BQC, 0, Serialized)  // _BQC: Brightness Query Current
                    {
                        Local0 = C14E /* \_SB_.C002.C088.C14A.C14E */
                        Return (Local0)
                    }
                }

                Device (C14F)
                {
                    Name (_ADR, 0x0200)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (C142 (0x04))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (C145 (0x04))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        C146 (0x04, Arg0)
                    }
                }

                Device (C150)
                {
                    Name (_ADR, 0x0300)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (C142 (0x08))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (C145 (0x08))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        C146 (0x08, Arg0)
                    }
                }

                Name (C151, 0xFFFFFFFD)
                Method (C143, 1, Serialized)
                {
                    If ((Arg0 && (C151 == 0xFFFFFFFD)))
                    {
                        Local0 = 0x07
                        C151 = Local0
                    }

                    Return (C151) /* \_SB_.C002.C088.C151 */
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Return (Package (0x04)
                    {
                        0x00010100, 
                        0x00010400, 
                        0x00010200, 
                        0x00010300
                    })
                }

                Method (C148, 2, NotSerialized)
                {
                    If ((Arg0 != Arg1))
                    {
                        Local0 = (\_SB.C002.C003.C0BA & 0xF3FFFFFF)
                        If ((Arg0 == 0x00))
                        {
                            Local0 |= 0x04000000
                        }

                        \_SB.C002.C003.C0BA = Local0
                    }
                }
            }

            Method (\C136, 1, NotSerialized)
            {
                \_SB.C002.C136 (Arg0)
            }

            Method (\C13A, 0, NotSerialized)
            {
                \_SB.C002.C13A ()
            }

            Method (\C13B, 0, NotSerialized)
            {
                \_SB.C002.C13B ()
            }

            Method (C003.C152, 5, Serialized)
            {
                If ((Arg1 == 0x00))
                {
                    ^C0E2 (Arg0, Arg2)
                }
                Else
                {
                    ^C0E3 (Arg0, Arg1, Arg2)
                }
            }

            Method (\_SB.C153, 5, Serialized)
            {
                ^C002.C003.C152 (Arg0, Arg1, Arg2, Arg3, Arg4)
            }

            Method (\_SB.C154, 0, NotSerialized)
            {
                Local1 = 0x01
                Return (Local1)
            }

            Scope (C003)
            {
                Device (C005)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_GPE, 0x16)  // _GPE: General Purpose Events
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Mutex (C155, 0x00)
                    Name (C156, 0x00)
                    Name (C157, 0x00)
                    Method (C158, 0, Serialized)
                    {
                        C159 (0x07, 0xFF)
                        Local0 = C15A ()
                        C15B ()
                        C15C (Local0, 0x81)
                        C15D ()
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            C157 = Arg1
                            Local1 = ((\C008 () == 0x01) || (\C008 () == 0x02))
                            If ((Arg1 && !Local1))
                            {
                                C158 ()
                            }
                        }
                    }

                    OperationRegion (C15E, EmbeddedControl, 0x00, 0xFF)
                    Field (C15E, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x80), 
                        Offset (0x81), 
                            ,   4, 
                        C15F,   4, 
                            ,   1, 
                            ,   1, 
                        C160,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        C161,   1, 
                        C162,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        C163,   1, 
                        C164,   1, 
                        C165,   1, 
                        C166,   1, 
                        C167,   2, 
                        C168,   1, 
                        C169,   4, 
                        C16A,   1, 
                        Offset (0x86), 
                        C16B,   4, 
                        Offset (0x87), 
                        C16C,   8, 
                        C16D,   8, 
                        C16E,   16, 
                        Offset (0x8D), 
                        C16F,   16, 
                        Offset (0x91), 
                        C170,   1, 
                        Offset (0x92), 
                        C171,   16, 
                        Offset (0x95), 
                        C172,   16, 
                        C173,   16, 
                        C174,   4, 
                        Offset (0x9D), 
                        C175,   16, 
                        C176,   16, 
                        C177,   16, 
                        C178,   16, 
                        C179,   16, 
                        C17A,   16, 
                        C17B,   16, 
                        C17C,   16, 
                        C17D,   16, 
                        Offset (0xB1), 
                        C17E,   16, 
                        Offset (0xB5), 
                        C17F,   8, 
                        Offset (0xB7), 
                        C180,   16, 
                        C181,   8, 
                        Offset (0xBD), 
                        C182,   8, 
                        Offset (0xC1), 
                        C183,   64, 
                        C184,   16, 
                        C185,   16, 
                        C186,   8, 
                        Offset (0xD1), 
                        C187,   32, 
                        C188,   8, 
                        C189,   8, 
                        C18A,   8, 
                        C18B,   8, 
                        C18C,   8, 
                        C18D,   8, 
                        C18E,   8, 
                        C18F,   8, 
                        C190,   4, 
                        C191,   4, 
                        C192,   16, 
                        C193,   16, 
                        Offset (0xE3), 
                        C194,   4, 
                        Offset (0xE4), 
                        Offset (0xE5), 
                        C195,   1, 
                        C196,   1, 
                            ,   3, 
                        C197,   1, 
                        Offset (0xE6), 
                        C198,   8, 
                        C199,   1
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If (((\C008 () == 0x01) || (\C008 () == 0x02)))
                        {
                            C158 ()
                        }
                    }

                    OperationRegion (C19A, SystemIO, 0x0500, 0x02)
                    Field (C19A, ByteAcc, NoLock, Preserve)
                    {
                        C19B,   8, 
                        C19C,   8
                    }

                    IndexField (C19B, C19C, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x92), 
                        C19D,   8, 
                        Offset (0x9D), 
                        C19E,   8
                    }

                    Method (C19F, 2, NotSerialized)
                    {
                        Acquire (C155, 0xFFFF)
                        If (C157)
                        {
                            C188 = Arg1
                            C189 = Arg0
                        }

                        Release (C155)
                    }

                    Method (C1A0, 1, NotSerialized)
                    {
                        Acquire (C155, 0xFFFF)
                        If (C157)
                        {
                            C189 = Arg0
                        }

                        Release (C155)
                    }

                    Method (C1A1, 1, NotSerialized)
                    {
                        Local0 = 0x14
                        Acquire (C155, 0xFFFF)
                        If (C157)
                        {
                            Local0 = C189 /* \_SB_.C002.C003.C005.C189 */
                        }

                        Release (C155)
                        Return (Local0)
                    }

                    Method (C1A2, 1, Serialized)
                    {
                        Local1 = (Arg0 * 0x40)
                        Divide (Local1, 0x64, Local2, Local0)
                        Local0 = (0x40 - Local0)
                        Local1 = (C19D & 0x80)
                        If ((Local0 == 0x40))
                        {
                            Local1 |= 0x01
                        }
                        Else
                        {
                            Local0 <<= 0x01
                            Local1 |= Local0
                        }

                        C19D = Local1
                    }

                    Method (C1A3, 0, Serialized)
                    {
                        Local0 = (C19D & 0x7F)
                        If ((Local0 & 0x01))
                        {
                            Local1 = 0x00
                        }
                        Else
                        {
                            Local0 >>= 0x01
                            Local0 = (0x40 - Local0)
                            Local0 *= 0x64
                            Divide ((Local0 + 0x20), 0x40, Local2, Local1)
                            Local1++
                        }

                        Return (Local1)
                    }

                    Method (C1A4, 0, Serialized)
                    {
                        Acquire (C155, 0xFFFF)
                        If (C157)
                        {
                            Local0 = C198 /* \_SB_.C002.C003.C005.C198 */
                        }

                        Release (C155)
                        Return (Local0)
                    }

                    Method (C1A5, 1, Serialized)
                    {
                        Acquire (C155, 0xFFFF)
                        If (C157)
                        {
                            C198 = Arg0
                        }

                        Release (C155)
                    }

                    Method (C1A6, 1, Serialized)
                    {
                        Local0 = 0x00
                        Acquire (C155, 0xFFFF)
                        If (C157)
                        {
                            C199 = Arg0
                            Local0 = 0x01
                        }

                        Release (C155)
                        \_SB.C144 ((0xA100 | ((Local0 << 0x04) | Arg0)))
                        Return (Local0)
                    }

                    Name (C1A7, 0xFF)
                    Name (C1A8, 0xFF)
                    Name (C1A9, 0x07)
                    Name (C1AA, 0x01)
                    Name (C1AB, 0x00)
                    Name (C1AC, 0x00)
                    Name (C1AD, 0x01)
                    Name (C1AE, 0x00)
                    Name (C1AF, 0x05)
                    Name (C1B0, 0x01)
                    Mutex (C1B1, 0x00)
                    Name (C1B2, Package (0x08)
                    {
                        "Unknown", 
                        "NiMH", 
                        "LiIon"
                    })
                    Method (C1B3, 0, Serialized)
                    {
                        Acquire (C1B1, 0xFFFF)
                        If ((C1A9 & 0x01))
                        {
                            C1A9 &= 0x06
                            Release (C1B1)
                            Local0 = 0x01
                            Local1 = 0x00
                            Acquire (C155, 0xFFFF)
                            If (C157)
                            {
                                Local0 = C166 /* \_SB_.C002.C003.C005.C166 */
                                Local1 = C167 /* \_SB_.C002.C003.C005.C167 */
                            }

                            Release (C155)
                            C1AA = Local0
                            C1AB = Local1
                        }
                        Else
                        {
                            Release (C1B1)
                        }
                    }

                    Method (C006, 0, Serialized)
                    {
                        C1B3 ()
                        Return (C1AA) /* \_SB_.C002.C003.C005.C1AA */
                    }

                    Method (C1B4, 0, Serialized)
                    {
                        C1B3 ()
                        Return (C1AB) /* \_SB_.C002.C003.C005.C1AB */
                    }

                    Method (C15A, 0, Serialized)
                    {
                        Acquire (C1B1, 0xFFFF)
                        If ((C1A9 & 0x02))
                        {
                            C1A9 &= 0x05
                            Release (C1B1)
                            Acquire (C155, 0xFFFF)
                            If (C157)
                            {
                                C1AC = C169 /* \_SB_.C002.C003.C005.C169 */
                            }

                            Release (C155)
                        }
                        Else
                        {
                            Release (C1B1)
                        }

                        Return (C1AC) /* \_SB_.C002.C003.C005.C1AC */
                    }

                    Method (C159, 2, Serialized)
                    {
                        Local0 = 0x00
                        Acquire (C1B1, 0xFFFF)
                        Local1 = (Arg0 | C1A9) /* \_SB_.C002.C003.C005.C1A9 */
                        C1A9 = (Local1 & 0x07)
                        If ((C1A9 & 0x02))
                        {
                            C1A7 |= Arg1
                        }

                        If ((C1A9 & 0x04))
                        {
                            If ((C1A8 != 0xFF))
                            {
                                Local0 = 0x01
                            }

                            C1A8 |= Arg1
                        }

                        Release (C1B1)
                        Return (Local0)
                    }

                    Method (C1B5, 1, Serialized)
                    {
                        If ((Arg0 == 0x01))
                        {
                            C1AD = 0x01
                        }
                        ElseIf ((Arg0 == 0x00))
                        {
                            C1AD = 0x00
                        }

                        Return (C1AD) /* \_SB_.C002.C003.C005.C1AD */
                    }

                    Method (C1B6, 1, Serialized)
                    {
                        C1B5 (0x01)
                        Local0 = C15A ()
                        Local1 = 0x0F
                        If ((Local0 & Arg0))
                        {
                            Local1 = 0x1F
                        }

                        Return (Local1)
                    }

                    Method (C1B7, 2, Serialized)
                    {
                        ToBCD (Arg0, Local0)
                        Local3 = \C00C (Local0, 0x05)
                        Concatenate (Local3, " ", Local4)
                        Local0 = (Arg1 >> 0x09)
                        Local1 = (Local0 + 0x07BC)
                        ToBCD (Local1, Local0)
                        Local2 = \C00C (Local0, 0x04)
                        Concatenate (Local4, Local2, Local3)
                        Concatenate (Local3, "/", Local4)
                        Local0 = (Arg1 >> 0x05)
                        Local1 = (Local0 & 0x0F)
                        ToBCD (Local1, Local0)
                        Local2 = \C00C (Local0, 0x02)
                        Concatenate (Local4, Local2, Local3)
                        Concatenate (Local3, "/", Local4)
                        Local1 = (Arg1 & 0x1F)
                        ToBCD (Local1, Local0)
                        Local2 = \C00C (Local0, 0x02)
                        Concatenate (Local4, Local2, Local3)
                        Return (Local3)
                    }

                    Method (C1B8, 1, Serialized)
                    {
                        Local7 = (0x01 << Arg0)
                        C1B5 (0x01)
                        If ((C1B6 (Local7) == 0x0F))
                        {
                            Return (0xFFFFFFFD)
                        }

                        Acquire (C1B1, 0xFFFF)
                        Local0 = C1A7 /* \_SB_.C002.C003.C005.C1A7 */
                        Release (C1B1)
                        If (((Local0 & Local7) == 0x00))
                        {
                            Return (0x00)
                        }

                        C1BA [Arg0] = C1B9 /* \_SB_.C1B9 */
                        Acquire (C1B1, 0xFFFF)
                        C1A8 |= Local7
                        Release (C1B1)
                        Acquire (C155, 0xFFFF)
                        If (C157)
                        {
                            C16B = Arg0
                            Local0 = C16F /* \_SB_.C002.C003.C005.C16F */
                            DerefOf (C1BB [Arg0]) [0x02] = Local0
                            If ((\C008 () > 0x06))
                            {
                                Local0 = C16E /* \_SB_.C002.C003.C005.C16E */
                            }

                            DerefOf (C1BB [Arg0]) [0x01] = Local0
                            DerefOf (C1BB [Arg0]) [0x04] = C172 /* \_SB_.C002.C003.C005.C172 */
                            Local1 = (Local0 * C1AF) /* \_SB_.C002.C003.C005.C1AF */
                            Divide ((Local1 + 0x63), 0x64, Local3, Local2)
                            DerefOf (C1BB [Arg0]) [0x05] = Local2
                            Local2 = 0x00
                            If (C1B0)
                            {
                                Local1 = (Local0 * C1B0) /* \_SB_.C002.C003.C005.C1B0 */
                                Divide ((Local1 + 0x63), 0x64, Local3, Local2)
                            }

                            DerefOf (C1BB [Arg0]) [0x06] = Local2
                            Local0 = C184 /* \_SB_.C002.C003.C005.C184 */
                            Local1 = C185 /* \_SB_.C002.C003.C005.C185 */
                        }

                        Release (C155)
                        Local2 = C1B7 (Local0, Local1)
                        DerefOf (C1BB [Arg0]) [0x0A] = Local2
                        Acquire (C1B1, 0xFFFF)
                        C1A7 &= ~Local7
                        Release (C1B1)
                        Return (0x00)
                    }

                    Method (C1BC, 2, Serialized)
                    {
                        Local7 = (0x01 << Arg0)
                        C1B5 (0x01)
                        If ((C1B6 (Local7) == 0x0F))
                        {
                            C1BA [Arg0] = Package (0x04)
                                {
                                    0x00, 
                                    0xFFFFFFFF, 
                                    0xFFFFFFFF, 
                                    0xFFFFFFFF
                                }
                            Return (0xFFFFFFFD)
                        }

                        Acquire (C1B1, 0xFFFF)
                        If (Arg1)
                        {
                            C1A8 = 0xFF
                        }

                        Local0 = C1A8 /* \_SB_.C002.C003.C005.C1A8 */
                        Release (C1B1)
                        If (((Local0 & Local7) == 0x00))
                        {
                            Return (0x00)
                        }

                        Acquire (C155, 0xFFFF)
                        If (C157)
                        {
                            C16B = Arg0
                            Local0 = C174 /* \_SB_.C002.C003.C005.C174 */
                            Local3 = C175 /* \_SB_.C002.C003.C005.C175 */
                            DerefOf (C1BA [Arg0]) [0x02] = C177 /* \_SB_.C002.C003.C005.C177 */
                            DerefOf (C1BA [Arg0]) [0x03] = C179 /* \_SB_.C002.C003.C005.C179 */
                        }

                        Release (C155)
                        If ((C006 () == 0x01))
                        {
                            Local0 &= 0xFFFFFFFE
                        }
                        Else
                        {
                            Local0 &= 0xFFFFFFFD
                        }

                        If ((Local0 & 0x01))
                        {
                            Acquire (C1B1, 0xFFFF)
                            C1AE = Local7
                            Release (C1B1)
                        }

                        DerefOf (C1BA [Arg0]) [0x00] = Local0
                        If ((Local0 & 0x01))
                        {
                            If (((Local3 < 0x0190) || (Local3 > 0x1964)))
                            {
                                Local5 = DerefOf (DerefOf (C1BA [Arg0]) [0x01])
                                If (((Local5 < 0x0190) || (Local5 > 0x1964)))
                                {
                                    Local3 = 0x0D7A
                                }
                                Else
                                {
                                    Local3 = Local5
                                }
                            }
                        }

                        DerefOf (C1BA [Arg0]) [0x01] = Local3
                        Acquire (C1B1, 0xFFFF)
                        C1A8 &= ~Local7
                        Release (C1B1)
                        Return (0x00)
                    }

                    Method (C15B, 0, NotSerialized)
                    {
                        If ((\C008 () == 0x01))
                        {
                            C1AF = 0x10
                            C1B0 = 0x0C
                            Local0 = C1B0 /* \_SB_.C002.C003.C005.C1B0 */
                        }
                        Else
                        {
                            Local0 = 0x03
                        }

                        If (C157)
                        {
                            C16C = C1AF /* \_SB_.C002.C003.C005.C1AF */
                            C16D = Local0
                        }
                    }

                    Method (C1BE, 1, NotSerialized)
                    {
                        Acquire (C155, 0xFFFF)
                        If (C157)
                        {
                            If ((C169 & (0x01 << Arg0)))
                            {
                                C16B = Arg0
                                Local0 = Package (0x03)
                                    {
                                        0x00, 
                                        0x3E, 
                                        Buffer (0x3E){}
                                    }
                                DerefOf (Local0 [0x02]) [0x00] = C16E /* \_SB_.C002.C003.C005.C16E */
                                DerefOf (Local0 [0x02]) [0x01] = (C16E >> 0x08
                                    )
                                DerefOf (Local0 [0x02]) [0x02] = C16F /* \_SB_.C002.C003.C005.C16F */
                                DerefOf (Local0 [0x02]) [0x03] = (C16F >> 0x08
                                    )
                                DerefOf (Local0 [0x02]) [0x04] = C177 /* \_SB_.C002.C003.C005.C177 */
                                DerefOf (Local0 [0x02]) [0x05] = (C177 >> 0x08
                                    )
                                DerefOf (Local0 [0x02]) [0x06] = C171 /* \_SB_.C002.C003.C005.C171 */
                                DerefOf (Local0 [0x02]) [0x07] = (C171 >> 0x08
                                    )
                                DerefOf (Local0 [0x02]) [0x08] = C178 /* \_SB_.C002.C003.C005.C178 */
                                DerefOf (Local0 [0x02]) [0x09] = (C178 >> 0x08
                                    )
                                Local1 = C193 /* \_SB_.C002.C003.C005.C193 */
                                Local1 -= 0x0AAC
                                Divide (Local1, 0x0A, Local2, Local3)
                                DerefOf (Local0 [0x02]) [0x0A] = Local3
                                DerefOf (Local0 [0x02]) [0x0B] = (Local3 >> 0x08
                                    )
                                DerefOf (Local0 [0x02]) [0x0C] = C179 /* \_SB_.C002.C003.C005.C179 */
                                DerefOf (Local0 [0x02]) [0x0D] = (C179 >> 0x08
                                    )
                                Local1 = C176 /* \_SB_.C002.C003.C005.C176 */
                                If (Local1)
                                {
                                    If ((C180 & 0x40))
                                    {
                                        Local1 = (~Local1 + 0x01)
                                        Local1 &= 0xFFFF
                                    }
                                }

                                DerefOf (Local0 [0x02]) [0x0E] = Local1
                                DerefOf (Local0 [0x02]) [0x0F] = (Local1 >> 0x08
                                    )
                                DerefOf (Local0 [0x02]) [0x10] = C172 /* \_SB_.C002.C003.C005.C172 */
                                DerefOf (Local0 [0x02]) [0x11] = (C172 >> 0x08
                                    )
                                DerefOf (Local0 [0x02]) [0x12] = C180 /* \_SB_.C002.C003.C005.C180 */
                                DerefOf (Local0 [0x02]) [0x13] = (C180 >> 0x08
                                    )
                                DerefOf (Local0 [0x02]) [0x14] = C173 /* \_SB_.C002.C003.C005.C173 */
                                DerefOf (Local0 [0x02]) [0x15] = (C173 >> 0x08
                                    )
                                DerefOf (Local0 [0x02]) [0x16] = C17A /* \_SB_.C002.C003.C005.C17A */
                                DerefOf (Local0 [0x02]) [0x17] = (C17A >> 0x08
                                    )
                                DerefOf (Local0 [0x02]) [0x18] = C17B /* \_SB_.C002.C003.C005.C17B */
                                DerefOf (Local0 [0x02]) [0x19] = (C17B >> 0x08
                                    )
                                DerefOf (Local0 [0x02]) [0x1A] = C17C /* \_SB_.C002.C003.C005.C17C */
                                DerefOf (Local0 [0x02]) [0x1B] = (C17C >> 0x08
                                    )
                                CreateField (DerefOf (Local0 [0x02]), 0xE0, 0x80, C1BF)
                                C1BF = C1B7 (C184, C185)
                                Local1 = "HP                "
                                If ((C186 == 0x53))
                                {
                                    Local1 = "SIMPLO"
                                }
                                ElseIf ((C186 == 0x4D))
                                {
                                    Local1 = "MOTOROLA"
                                }

                                CreateField (DerefOf (Local0 [0x02]), 0x0160, (SizeOf (Local1) * 0x08), 
                                    C1C0)
                                C1C0 = Local1
                            }
                            Else
                            {
                                Local0 = Package (0x02)
                                    {
                                        0x06, 
                                        0x00
                                    }
                            }
                        }
                        Else
                        {
                            Local0 = Package (0x02)
                                {
                                    0x0D, 
                                    0x00
                                }
                        }

                        Release (C155)
                        Return (Local0)
                    }

                    Mutex (C1C1, 0x00)
                    Name (C1C2, 0x00)
                    Name (C1C3, 0x01)
                    Name (C1C4, 0x00)
                    Name (C1C5, 0x00)
                    Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (C1B1, 0xFFFF)
                        Local0 = C1AE /* \_SB_.C002.C003.C005.C1AE */
                        Release (C1B1)
                        C159 (0x04, Local0)
                        C15C (Local0, 0x80)
                    }

                    Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (C1C1, 0xFFFF)
                        C1C2 = C1C6 ()
                        C1C3 = 0x01
                        Release (C1C1)
                        Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                        Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                    }

                    Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (\_TZ.C1C7, 0xFFFF)
                        \_TZ.C1C8 |= 0x04
                        Release (\_TZ.C1C7)
                        Notify (\_TZ.TZ3, 0x80) // Thermal Status Change
                    }

                    Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        C159 (0x05, 0x03)
                        If (C1B5 (0x02))
                        {
                            Notify (\_SB.C1C9, 0x80) // Status Change
                            If (\_PR.CPU0.C001)
                            {
                                Notify (\_PR.CPU0, 0x81) // C-State Change
                                Notify (\_PR.CPU1, 0x81) // C-State Change
                            }

                            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                            Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                            Notify (\_TZ.TZ1, 0x81) // Thermal Trip Point Change
                            Notify (\_TZ.TZ2, 0x81) // Thermal Trip Point Change
                        }
                    }

                    Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        C159 (0x06, 0x01)
                        Local0 = C15A ()
                        If ((Local0 != 0x02))
                        {
                            C159 (0x04, 0x02)
                            If (C1B5 (0x02))
                            {
                                Notify (\_SB.C1CA, 0x80) // Status Change
                            }
                        }

                        If (C1B5 (0x02))
                        {
                            Notify (\_SB.C1CB, 0x81) // Information Change
                        }
                    }

                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        C159 (0x04, 0x01)
                        If (C1B5 (0x02))
                        {
                            Notify (\_SB.C1CB, 0x80) // Status Change
                        }
                    }

                    Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        C159 (0x06, 0x02)
                        Local0 = C15A ()
                        If ((Local0 != 0x01))
                        {
                            C159 (0x04, 0x01)
                            If (C1B5 (0x02))
                            {
                                Notify (\_SB.C1CB, 0x80) // Status Change
                            }
                        }

                        If (C1B5 (0x02))
                        {
                            Notify (\_SB.C1CA, 0x81) // Information Change
                        }
                    }

                    Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        C159 (0x04, 0x02)
                        If (C1B5 (0x02))
                        {
                            Notify (\_SB.C1CA, 0x80) // Status Change
                        }
                    }

                    Method (C15C, 2, Serialized)
                    {
                        If ((Arg0 & 0x01))
                        {
                            Notify (\_SB.C1CB, Arg1)
                        }

                        If ((Arg0 & 0x02))
                        {
                            Notify (\_SB.C1CA, Arg1)
                        }
                    }

                    Method (C15D, 0, NotSerialized)
                    {
                        C19F (0x00, \_TZ.C1CC)
                        If ((\_SB.C002.C129.C1CD == 0x00))
                        {
                            C1A6 (\_SB.C002.C129.C1CE)
                        }

                        If ((C15A () & 0x01))
                        {
                            C1CF = 0x1F
                        }

                        \_SB.C002.C003.C005.C162 = (\_SB.C1D0._LID () ^ 0x01)
                    }

                    Method (C1C6, 0, Serialized)
                    {
                        Local0 = 0x02
                        Acquire (C155, 0xFFFF)
                        If (C157)
                        {
                            Local0 = C18B /* \_SB_.C002.C003.C005.C18B */
                        }

                        Release (C155)
                        Return (Local0)
                    }

                    Method (C1D1, 2, Serialized)
                    {
                        If (((Arg1 != C1C4) || (Arg0 != C1C5)))
                        {
                            Acquire (C155, 0xFFFF)
                            If (C157)
                            {
                                If ((Arg1 != C1C4))
                                {
                                    C18C = Arg1
                                    C1C4 = Arg1
                                }

                                C18D = Arg0
                                C1C5 = Arg0
                            }

                            Release (C155)
                        }
                    }
                }

                Device (C1D2)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (C1D3)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (C1D4)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer16, )
                            {4}
                    })
                }

                Device (C1D5)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (C1D6)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (C1D7)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (C1D8, 0xFFFFFFFD)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((C1D8 == 0xFFFFFFFD))
                        {
                            Local0 = 0x00
                            Local1 = \_SB.C0A0 ()
                            If ((\C008 () >= 0x04))
                            {
                                If (Local1)
                                {
                                    Local0 = 0x0F
                                }
                            }
                            ElseIf (Local1)
                            {
                                Local0 = 0x0B
                            }

                            C1D8 = Local0
                        }

                        Return (C1D8) /* \_SB_.C002.C003.C1D7.C1D8 */
                    }

                    Name (C01B, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y04)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Local1 = \_SB.C0A0 ()
                        If (Local1)
                        {
                            CreateDWordField (C01B, \_SB.C002.C003.C1D7._Y04._BAS, C1DA)  // _BAS: Base Address
                            C1DA = Local1
                        }

                        Return (C01B) /* \_SB_.C002.C003.C1D7.C01B */
                    }
                }

                Device (C1DB)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (C1DC)
                {
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (C1DD, 0x01)
                    PowerResource (C1DE, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (C1DD) /* \_SB_.C002.C003.C1DC.C1DD */
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            C1DD = 0x01
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            C1DD = 0x00
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        C1DE
                    })
                }

                Device (\_SB.C1DF)
                {
                    Name (_HID, EisaId ("HPQ0006"))  // _HID: Hardware ID
                    Name (_STA, 0x0F)  // _STA: Status
                }

                Scope (C1DC)
                {
                    Name (_HID, EisaId ("SYN0163"))  // _HID: Hardware ID
                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN0100"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                }

                Device (C1E0)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }
            }

            Scope (C09B)
            {
                Scope (C129)
                {
                    Name (C1CE, 0x00)
                    Name (C1CD, 0x00)
                    PowerResource (C1E1, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (C1CE) /* \_SB_.C002.C09B.C129.C1CE */
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            C1CE = 0x01
                            C1CD = \_SB.C002.C003.C005.C1A6 (0x01)
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            C1CE = 0x00
                            C1CD = \_SB.C002.C003.C005.C1A6 (0x00)
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        C1E1
                    })
                }
            }

            Scope (C10A)
            {
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x05
                })
                OperationRegion (C1E2, PCI_Config, 0x3E, 0xA6)
                Field (C1E2, AnyAcc, NoLock, Preserve)
                {
                        ,   6, 
                    C1E3,   1, 
                    Offset (0x14), 
                        ,   13, 
                    C1E4,   1, 
                    Offset (0xA4), 
                    Offset (0xA5), 
                    C1E5,   2
                }

                OperationRegion (C1E6, SystemMemory, 0xF8800300, 0x30)
                Field (C1E6, DWordAcc, NoLock, Preserve)
                {
                    C1E7,   32, 
                    Offset (0x2C), 
                        ,   26, 
                    C1E8,   1
                }

                Method (C1E9, 0, NotSerialized)
                {
                    Local0 = 0x00
                    If (C111)
                    {
                        If (C1E5)
                        {
                            If ((C10D & 0x0100))
                            {
                                While (C1E3)
                                {
                                    Sleep (0x0A)
                                }

                                Sleep (0x64)
                                If ((C1E4 == 0x00))
                                {
                                    C1E5 = 0x00
                                    Local1 = C1E5 /* \_SB_.C002.C10A.C1E5 */
                                    C1E5 |= 0x02
                                    Local1 = C1E5 /* \_SB_.C002.C10A.C1E5 */
                                    C1E7 = 0x64007C27
                                    Local1 = C1E7 /* \_SB_.C002.C10A.C1E7 */
                                    Sleep (0x37)
                                    C1E8 = 0x01
                                    Local1 = C1E8 /* \_SB_.C002.C10A.C1E8 */
                                    C1E5 |= 0x01
                                    Local1 = C1E5 /* \_SB_.C002.C10A.C1E5 */
                                    Sleep (0x2E)
                                    C1E7 = 0x60007C27
                                    Local1 = C1E7 /* \_SB_.C002.C10A.C1E7 */
                                    C1E8 = 0x00
                                    Local1 = C1E8 /* \_SB_.C002.C10A.C1E8 */
                                    Sleep (0x64)
                                }

                                If ((C10D & 0x40))
                                {
                                    Local0 = 0x01
                                }
                            }
                        }

                        C10D = 0x0109
                        C111 = 0x01
                    }

                    Return (Local0)
                }

                Device (C1EA)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x05
                    })
                }
            }

            Scope (C11D)
            {
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x05
                })
                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x10, 
                    0x40, 
                    0x00, 
                    0x00
                })
                Device (C1EB)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x05
                    })
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x01)
                    }

                    Method (_EJD, 0, NotSerialized)  // _EJD: Ejection Dependent Device
                    {
                        Return ("_SB.C002.C103.C0FD.C0FF")
                    }
                }

                Device (C1EC)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                }

                Device (C1ED)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (C1EE)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (C1EF)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (C1F0)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (C1F1)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (C1F2)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            Scope (C120)
            {
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Local0 = Package (0x02)
                        {
                            0x09, 
                            0x05
                        }
                    If (\_SB.C047)
                    {
                        Local0 [0x01] = 0x00
                    }

                    Return (Local0)
                }

                Device (C1F3)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
                    {
                        Return (^^_PRW ())
                    }

                    Method (C1F4, 0, NotSerialized)
                    {
                        \_SB.C002.C120.C10C = 0x01
                        Sleep (0x0A)
                        Local0 = \_SB.C002.C003.C0D6
                        \_SB.C002.C003.C0D6 = (Local0 & 0xFFFFFEFF)
                    }

                    Method (C1F5, 0, NotSerialized)
                    {
                        Local1 = CondRefOf (\_GPE._L1A, Local0)
                        Return (Local1)
                    }
                }
            }

            Device (ACEL)
            {
                Name (_HID, EisaId ("HPQ0004"))  // _HID: Hardware ID
                Name (C1D8, 0xFFFFFFFD)
                Name (C1F6, 0xFFFFFFFD)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    C1F7 ()
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, )
                    {
                        0x00000017,
                    }
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((C1D8 == 0xFFFFFFFD))
                    {
                        Local0 = 0x0F
                        Local1 = \_SB.C002.C003.C0DE (0x3B, 0x20, 0x00)
                        If ((Local1 & 0xFF00))
                        {
                            Local0 = 0x00
                        }

                        C1D8 = Local0
                    }

                    Return (C1D8) /* \_SB_.C002.ACEL.C1D8 */
                }

                Method (C1F7, 0, Serialized)
                {
                    If (_STA ())
                    {
                        \_SB.C002.C003.C0DE (0x3A, 0x20, 0x47)
                        \_SB.C002.C003.C0DE (0x3A, 0x21, 0x0A)
                        \_SB.C002.C003.C0DE (0x3A, 0x32, 0x14)
                        \_SB.C002.C003.C0DE (0x3A, 0x33, 0x02)
                        \_SB.C002.C003.C0DE (0x3A, 0x30, 0x95)
                        Local0 = \_SB.C002.C003.C0DE (0x3B, 0x23, 0x00)
                        \_SB.C002.C003.C0DE (0x3A, 0x36, 0x11)
                        \_SB.C002.C003.C0DE (0x3A, 0x37, 0x01)
                        \_SB.C002.C003.C0DE (0x3A, 0x34, 0x2A)
                        C1F6 = 0xFFFFFFFD
                        C1F8 ()
                    }
                }

                Method (C1F8, 0, Serialized)
                {
                    If (_STA ())
                    {
                        Local0 = \_SB.C002.C003.C005.C006 ()
                        If (((\_SB.C1D0._LID () == 0x00) && (Local0 == 0x00)))
                        {
                            If ((C1F6 != 0x01))
                            {
                                C1F6 = 0x01
                                \_SB.C002.C003.C0DE (0x3A, 0x22, 0x02)
                            }
                        }
                        ElseIf ((C1F6 != 0x00))
                        {
                            C1F6 = 0x00
                            \_SB.C002.C003.C0DE (0x3A, 0x22, 0x01)
                        }
                    }
                }

                Method (CLRI, 0, Serialized)
                {
                    Local2 = 0x00
                    If ((\_SB.C002.C003.C005.C006 () == 0x00))
                    {
                        Local0 = 0x04
                        Local1 = 0x04
                        If ((\_SB.C1CB._STA () == 0x1F))
                        {
                            Local0 = DerefOf (DerefOf (C1BA [0x00]) [0x00])
                        }

                        If ((\_SB.C1CA._STA () == 0x1F))
                        {
                            Local1 = DerefOf (DerefOf (C1BA [0x01]) [0x00])
                        }

                        Local0 &= Local1
                        If ((Local0 & 0x04))
                        {
                            Local2 = 0x01
                        }
                    }

                    Return (Local2)
                }

                Method (ALRD, 1, Serialized)
                {
                    Local0 = \_SB.C002.C003.C0DE (0x3B, Arg0, 0x00)
                    Return (Local0)
                }

                Method (ALWR, 2, Serialized)
                {
                    Local0 = \_SB.C002.C003.C0DE (0x3A, Arg0, Arg1)
                    Return (Local0)
                }

                Method (ALED, 1, Serialized)
                {
                    If (Arg0)
                    {
                        \_SB.C002.C003.C0D2 &= 0xFFF7FFFF
                    }
                    Else
                    {
                        \_SB.C002.C003.C0D2 |= 0x00080000
                    }
                }

                Method (ALID, 1, Serialized)
                {
                    Return (\_SB.C1D0._LID ())
                }

                Method (ADSN, 0, Serialized)
                {
                    Local0 = C05A /* \_SB_.C05A */
                    Return (Local0)
                }
            }

            Scope (C0F9)
            {
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x03, 
                    0x03
                })
                Name (_S3D, 0x03)  // _S3D: S3 Device State
                Name (_S4D, 0x03)  // _S4D: S4 Device State
            }

            Scope (C100)
            {
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x04, 
                    0x03
                })
                Name (_S3D, 0x03)  // _S3D: S3 Device State
                Name (_S4D, 0x03)  // _S4D: S4 Device State
            }

            Scope (C101)
            {
                Name (_S3D, 0x03)  // _S3D: S3 Device State
                Name (_S4D, 0x03)  // _S4D: S4 Device State
            }

            Scope (C102)
            {
                Name (_S3D, 0x03)  // _S3D: S3 Device State
                Name (_S4D, 0x03)  // _S4D: S4 Device State
            }

            Scope (C103)
            {
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
                Name (_S3D, 0x03)  // _S3D: S3 Device State
                Name (_S4D, 0x03)  // _S4D: S4 Device State
                Scope (C0FD.C0FF)
                {
                    Method (_EJD, 0, NotSerialized)  // _EJD: Ejection Dependent Device
                    {
                        Return ("_SB.C002.C11D.C1EB")
                    }
                }

                Scope (C0FD.C109)
                {
                    Device (C1F9)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (C1FA)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (C1FB)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (C1FC)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }
                }
            }

            Name (C116._PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {10,11}
            })
            Name (C117._PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {10,11}
            })
            Name (C118._PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {10,11}
            })
            Name (C119._PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {10,11}
            })
            Name (C132._PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {10,11}
            })
            Name (C133._PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {10,11}
            })
            Name (C134._PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {10,11}
            })
            Name (C115, 0x00)
            Method (\_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
            {
                If ((Arg0 == 0x01))
                {
                    \_SB.C002.C115 = 0x01
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (C115)
                {
                    Return (Package (0x11)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            0x00, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x04, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x05, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            0x00, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            0x00, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }
                    })
                }
                Else
                {
                    Return (Package (0x11)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            C116, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            C116, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            C133, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            C116, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            C117, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            C118, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            C119, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x04, 
                            C116, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x05, 
                            C117, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            C132, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            C133, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            C118, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            C119, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            C116, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            C117, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            C118, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            C119, 
                            0x00
                        }
                    })
                }
            }

            Method (C086._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (C115)
                {
                    Return (Package (0x01)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }
                    })
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            C116, 
                            0x00
                        }
                    })
                }
            }

            Method (C09B._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (C115)
                {
                    Return (Package (0x03)
                    {
                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x00, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x01, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x02, 
                            0x00, 
                            0x16
                        }
                    })
                }
                Else
                {
                    Return (Package (0x03)
                    {
                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x00, 
                            C118, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x01, 
                            C119, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0006FFFF, 
                            0x02, 
                            C134, 
                            0x00
                        }
                    })
                }
            }
        }

        Name (C1BB, Package (0x02)
        {
            Package (0x0D)
            {
                0x01, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x01, 
                0xFFFFFFFF, 
                0x00, 
                0x00, 
                0x64, 
                0x64, 
                "Primary", 
                "100000", 
                "LIon", 
                "Hewlett-Packard"
            }, 

            Package (0x0D)
            {
                0x01, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x01, 
                0xFFFFFFFF, 
                0x00, 
                0x00, 
                0x64, 
                0x64, 
                "Travel", 
                "100000", 
                "LIon", 
                "Hewlett-Packard"
            }
        })
        Name (C1BA, Package (0x02)
        {
            Package (0x04)
            {
                0x00, 
                0x00, 
                0xB010, 
                0x40F2
            }, 

            Package (0x04)
            {
                0x00, 
                0x00, 
                0xB010, 
                0x40F2
            }
        })
        Name (C1B9, Package (0x04)
        {
            0x00, 
            0x00, 
            0xB010, 
            0x40F2
        })
        Name (C1AA, 0x01)
        Name (C1AB, 0x00)
        Name (C1CF, 0x0F)
        Method (C1B8, 1, Serialized)
        {
            Local0 = \_SB.C002.C003.C005.C1B8 (Arg0)
            If ((Local0 == 0xFFFFFFFD))
            {
                Return (Package (0x0D)
                {
                    0x00, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0x01, 
                    0xFFFFFFFF, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    "", 
                    "", 
                    "", 
                    0x00
                })
            }
            Else
            {
                Return (DerefOf (C1BB [Arg0]))
            }
        }

        Name (C1FD, 0x01)
        Method (C1BC, 1, Serialized)
        {
            Local1 = C1FD /* \_SB_.C1FD */
            If (C1FD)
            {
                C1FD = 0x00
            }

            Local0 = \_SB.C002.C003.C005.C1BC (Arg0, Local1)
            Return (DerefOf (C1BA [Arg0]))
        }

        Device (C1CB)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = \_SB.C002.C003.C005.C1B6 (0x01)
                If ((C1CF ^ Local0))
                {
                    C1CF = Local0
                    Local1 = Local0
                    If ((Local1 != 0x1F))
                    {
                        Local1 = 0x00
                    }

                    \_SB.C147 (0xEA3A, 0x00, Local1, 0x00, 0x00)
                    \_SB.C1FE.C1FF (0x05, 0x00)
                }

                Return (Local0)
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Return (C1B8 (0x00))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (C1BC (0x00))
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                \_SB
            })
        }

        Device (C1CA)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x00)
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Return (C1B8 (0x01))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (C1BC (0x01))
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                \_SB
            })
        }

        Device (C1C9)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                \_SB
            })
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Local0 = \_SB.C002.C003.C005.C006 ()
                Local1 = \_SB.C002.C003.C005.C1B4 ()
                If ((Local0 ^ C1AA))
                {
                    If (\_SB.C002.C120.C1F3.C1F5 ())
                    {
                        \_GPE.C200 (0x00)
                    }

                    \_SB.C002.ACEL.C1F8 ()
                    If ((\_PR.CPU0.C001 == 0x00))
                    {
                        Local2 = 0x00
                        If ((C007 & 0x80))
                        {
                            If ((!Local0 || (C007 & 0x40)))
                            {
                                Local2 = 0x01
                            }
                        }

                        \_SB.C002.C003.C004 = Local2
                    }
                }

                If (((Local0 && !C1AA) || (Local1 && !C1AB)))
                {
                    \_SB.C1FE.C1FF (0x03, 0x00)
                }

                If ((\_SB.C058 == 0x01))
                {
                    If (\_SB.C002.C120.C1F3.C1F5 ())
                    {
                        If ((Local0 == 0x01))
                        {
                            If (!(\_SB.C002.C003.C0D6 & 0x0100))
                            {
                                \_GPE.C200 (0x00)
                            }

                            If ((\_SB.C002.C120.C10D & 0x08))
                            {
                                \_SB.C002.C120.C10D = (0x08 | 0x01)
                                \_SB.C002.C120.C111 = 0x01
                                Sleep (0x01F4)
                                Notify (\_SB.C002.C120, 0x00) // Bus Check
                            }
                        }
                        ElseIf ((\_SB.C002.C003.C0D6 & 0x0400))
                        {
                            If ((\_SB.C002.C003.C0D6 & 0x0100))
                            {
                                If ((\_SB.C059 == 0x01))
                                {
                                    Notify (\_SB.C002.C120.C1F3, 0x03) // Eject Request
                                }
                                Else
                                {
                                    \_SB.C002.C120.C1F3.C1F4 ()
                                    Sleep (0x64)
                                    Notify (\_SB.C002.C120, 0x00) // Bus Check
                                }
                            }
                        }
                        ElseIf (!(\_SB.C002.C003.C0D2 & 0x0100))
                        {
                            \_SB.C002.C003.C0D6 |= 0x0100
                            Sleep (0x012C)
                            \_SB.C002.C120.C10C = 0x00
                            Sleep (0xC8)
                        }
                    }
                }

                C1AA = Local0
                C1AB = Local1
                Return (Local0)
            }
        }

        Device (C201)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
        }

        Device (C1D0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = 0x00
                If ((\_SB.C002.C003.C0D2 & 0x2000))
                {
                    Local0 = 0x01
                }

                Return (Local0)
            }
        }

        Name (C202, Buffer (0x0A)
        {
            /* 0000 */  0x2F, 0x31, 0x35, 0x3F, 0x40, 0x53, 0x58, 0x80,  // /15?@SX.
            /* 0008 */  0x00, 0x4E                                       // .N
        })
        Method (C203, 4, NotSerialized)
        {
            CreateWordField (Arg2, 0x00, C204)
            CreateWordField (Arg2, 0x06, C205)
            CreateWordField (Arg2, 0x0A, C206)
            CreateWordField (Arg2, 0x0E, C207)
            CreateWordField (Arg2, 0x12, C208)
            Local0 = 0x00
            While ((Local0 < SizeOf (Arg3)))
            {
                Arg3 [Local0] = 0x00
                Local0++
            }

            Local0 = Arg0
            Local1 = Arg1
            If ((Local0 & 0x00010000))
            {
                Arg3 [0x00] = 0x00
                Arg3 [0x01] = 0x00
                If ((C208 & 0x08))
                {
                    Local2 = 0x10
                }
                Else
                {
                    Local2 = 0x90
                }

                Arg3 [0x05] = Local2
            }
            Else
            {
                If ((Local1 == 0x00))
                {
                    If ((C205 & 0x01))
                    {
                        Local1 = 0x20
                        If ((((Local0 & 0x07) == 0x03) && (C205 & 0x02)))
                        {
                            Local1 |= 0x01
                        }
                        ElseIf ((((Local0 & 0x07) == 0x04) && (C205 & 0x04
                            )))
                        {
                            Local1 |= 0x02
                        }
                    }
                }

                Arg3 [0x00] = Local0
                Arg3 [0x01] = Local1
                Arg3 [0x05] = 0x00
            }

            If ((C207 & 0x01))
            {
                Arg3 [0x02] = 0x01
            }

            If ((C206 & 0x0800))
            {
                Arg3 [0x03] = 0x01
            }

            If ((C204 != 0x00))
            {
                Arg3 [0x04] = C204 /* \_SB_.C203.C204 */
            }
        }

        Method (C209, 3, NotSerialized)
        {
            If (((Arg0 == 0x00) || (Arg0 == 0x01)))
            {
                Local0 = Buffer (0x07)
                    {
                         0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF         // .......
                    }
                Local0 [0x01] = Arg1
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         // .......
                    }
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x07)
                    {
                         0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1         // .......
                    }
            }

            If ((Arg0 == 0x04))
            {
                Local0 = Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6         // .......
                    }
                Local0 [0x01] = Arg1
            }

            If ((Arg0 == 0x05))
            {
                Local0 = Buffer (0x07)
                    {
                         0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xEF         // .......
                    }
                Local0 [0x00] = Arg1
            }

            Local0 [0x05] = (0xA0 | (Arg2 << 0x04))
            Return (Local0)
        }

        Method (C20A, 2, NotSerialized)
        {
            Local0 = 0x00
            Local4 = 0x00
            While ((Local0 < SizeOf (Arg0)))
            {
                If ((DerefOf (Arg0 [Local0]) != 0x00))
                {
                    Local2 = C209 (Local0, DerefOf (Arg0 [Local0]), Arg1)
                    If ((Local4 == 0x00))
                    {
                        Local1 = Local2
                        Local4 = 0x01
                    }
                    Else
                    {
                        Concatenate (Local1, Local2, Local3)
                        Local1 = Local3
                    }
                }

                Local0++
            }

            Return (Local1)
        }

        Name (C20B, Buffer (0x01)
        {
             0x05                                             // .
        })
        Name (C20C, Buffer (0x01)
        {
             0x00                                             // .
        })
        Name (C20D, Buffer (0x01){})
        Device (C1FE)
        {
            Name (C20E, Package (0x10)
            {
                0x04, 
                0x04, 
                0x04, 
                0x00, 
                0x04, 
                0x04, 
                0x00, 
                0x00, 
                0x04, 
                0x04, 
                0x0C, 
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x04
            })
            Name (C20F, Buffer (0x1010){})
            Method (C210, 2, NotSerialized)
            {
                CreateDWordField (Arg1, 0x00, C211)
                CreateDWordField (Arg1, 0x04, C212)
                CreateDWordField (Arg1, 0x08, C213)
                CreateDWordField (Arg1, 0x0C, C214)
                If ((Arg0 == 0x01))
                {
                    Local0 = 0x00
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x04
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x80
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x0400
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x1000
                }

                Local1 = Buffer ((0x08 + Local0)){}
                CreateDWordField (Local1, 0x00, C215)
                CreateDWordField (Local1, 0x04, C216)
                Local5 = C214 /* \_SB_.C1FE.C210.C214 */
                If ((C214 > 0x1030))
                {
                    Local5 = 0x1030
                }

                CreateField (Arg1, 0x00, ((Local5 + 0x10) * 0x08), C217)
                \_SB.C02E = C217 /* \_SB_.C1FE.C210.C217 */
                C215 = 0x4C494146
                C216 = 0x02
                If ((C211 == 0x55434553))
                {
                    C216 = 0x03
                    If ((C212 == 0x01))
                    {
                        C216 = 0x04
                        If ((C213 == 0x01))
                        {
                            Local2 = ^C218 ()
                            C216 = 0x00
                        }

                        If ((C213 == 0x02))
                        {
                            Local2 = ^C219 ()
                            C216 = 0x00
                        }

                        If ((C213 == 0x03))
                        {
                            Local2 = ^C21A ()
                            C216 = 0x00
                        }

                        If ((C213 == 0x04))
                        {
                            Local2 = ^C21B ()
                            C216 = 0x00
                        }

                        If ((C213 == 0x05))
                        {
                            Local2 = ^C21C ()
                            C216 = 0x00
                        }

                        If ((C213 == 0x07))
                        {
                            If (C214)
                            {
                                Local3 = DerefOf (Arg1 [0x10])
                                Local2 = C21D (Local3)
                                C216 = 0x00
                            }
                            Else
                            {
                                C216 = 0x05
                            }
                        }

                        If ((C213 == 0x08))
                        {
                            Local2 = ^C21E ()
                            C216 = 0x00
                        }

                        If ((C213 == 0x09))
                        {
                            Local2 = ^C21F ()
                            C216 = 0x00
                        }

                        If ((C213 == 0x0A))
                        {
                            Local2 = ^C220 ()
                            C216 = 0x00
                        }

                        If ((C213 == 0x0C))
                        {
                            Local2 = ^C221 ()
                            C216 = 0x00
                        }

                        If ((C213 == 0x0E))
                        {
                            Local2 = ^C222 ()
                            C216 = 0x00
                        }

                        If ((C213 == 0x0F))
                        {
                            Local2 = ^C223 ()
                            C216 = 0x00
                        }

                        If ((C213 == 0x10))
                        {
                            Local2 = ^C224 ()
                            C216 = 0x00
                        }
                    }

                    If ((C212 == 0x02))
                    {
                        C216 = 0x04
                        If (((C213 > 0x00) && (C213 <= 0x10)))
                        {
                            If ((C214 < DerefOf (C20E [(C213 - 0x01)])))
                            {
                                C216 = 0x05
                            }
                            Else
                            {
                                CreateDWordField (Arg1, 0x10, C225)
                                If ((C213 == 0x01))
                                {
                                    Local2 = ^C226 (C225)
                                    C216 = 0x00
                                }

                                If ((C213 == 0x02))
                                {
                                    Local2 = ^C227 (C225)
                                    C216 = 0x00
                                }

                                If ((C213 == 0x03))
                                {
                                    Local2 = ^C228 (C225)
                                    C216 = 0x00
                                }

                                If ((C213 == 0x05))
                                {
                                    Local2 = ^C229 (C225)
                                    C216 = 0x00
                                    C1FF (0x05, 0x00)
                                }

                                If ((C213 == 0x06))
                                {
                                    Local2 = ^C22A (C225)
                                    C216 = 0x00
                                }

                                If ((C213 == 0x09))
                                {
                                    Local2 = ^C22B (C225)
                                    C216 = 0x00
                                }

                                If ((C213 == 0x0A))
                                {
                                    Local2 = ^C22C (C225)
                                    C216 = 0x00
                                }

                                If ((C213 == 0x10))
                                {
                                    Local2 = ^C22D (C225)
                                    C216 = 0x00
                                }
                            }
                        }
                    }

                    If ((C212 == 0x00020000))
                    {
                        \_SB.C147 (0xEA75, C212, C213, 0x574D4953, 0x00)
                        Local2 = C22E ()
                        C216 = 0x00
                    }

                    If ((C212 == 0x00020001))
                    {
                        \_SB.C147 (0xEA75, C212, C213, 0x574D4953, 0x00)
                        Local2 = C22E ()
                        C216 = 0x00
                    }

                    If ((C212 == 0x00020002))
                    {
                        \_SB.C147 (0xEA75, C212, C213, 0x574D4953, 0x00)
                        Local2 = C22E ()
                        C216 = 0x00
                    }
                }

                If ((C216 == 0x00))
                {
                    C216 = DerefOf (Local2 [0x00])
                    If ((C216 == 0x00))
                    {
                        If ((DerefOf (Local2 [0x01]) <= Local0))
                        {
                            Local0 = 0x00
                            While ((Local0 < DerefOf (Local2 [0x01])))
                            {
                                Local1 [(Local0 + 0x08)] = DerefOf (DerefOf (
                                    Local2 [0x02]) [Local0])
                                Local0++
                            }

                            C215 = 0x53534150
                        }
                        Else
                        {
                            C216 = 0x05
                        }
                    }
                }

                \_SB.C02E = C20F /* \_SB_.C1FE.C20F */
                Return (Local1)
            }

            Method (C22E, 0, NotSerialized)
            {
                If ((C05D == 0x00))
                {
                    Local0 = Package (0x02)
                        {
                            0x00, 
                            0x00
                        }
                }
                Else
                {
                    Local1 = C05D /* \_SB_.C05D */
                    Local0 = Package (0x03)
                        {
                            0x00, 
                            0x00, 
                            Buffer (Local1){}
                        }
                }

                Local0 [0x00] = C05C /* \_SB_.C05C */
                Local0 [0x01] = C05D /* \_SB_.C05D */
                If ((C05C == 0x00))
                {
                    If ((C05D != 0x00))
                    {
                        Local1 = \_SB.C02E
                        Local2 = 0x00
                        While ((Local2 < C05D))
                        {
                            DerefOf (Local0 [0x02]) [Local2] = DerefOf (Local1 [
                                Local2])
                            Local2++
                        }
                    }
                }

                Return (Local0)
            }

            Method (C1FF, 2, NotSerialized)
            {
                If ((\_SB.C1FE.C22F == 0x00))
                {
                    \_SB.C1FE.C22F = Arg0
                    \_SB.C1FE.C230 = Arg1
                }
                Else
                {
                    \_SB.C1FE.C231 = Arg0
                    \_SB.C1FE.C232 = Arg1
                }

                Notify (\_SB.C1FE, 0x80) // Status Change
            }

            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (C22F, 0x00)
            Name (C230, 0x00)
            Name (C231, 0x00)
            Name (C232, 0x00)
            Name (_WDG, Buffer (0xF0)
            {
                /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  // 4.._c,.E
                /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  // ..=D....
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x79, 0x42, 0xF2, 0x95,  // AA..yB..
                /* 0018 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  // {M4C....
                /* 0020 */  0xC6, 0x7E, 0xF6, 0x1C, 0x80, 0x00, 0x01, 0x08,  // .~......
                /* 0028 */  0x18, 0x43, 0x81, 0x2B, 0xE8, 0x4B, 0x07, 0x47,  // .C.+.K.G
                /* 0030 */  0x9D, 0x84, 0xA1, 0x90, 0xA8, 0x59, 0xB5, 0xD0,  // .....Y..
                /* 0038 */  0xA0, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
                /* 0040 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0048 */  0xC9, 0x06, 0x29, 0x10, 0x41, 0x42, 0x01, 0x00,  // ..).AB..
                /* 0050 */  0xEB, 0x91, 0x4C, 0x1F, 0x5C, 0xDC, 0x0B, 0x46,  // ..L.\..F
                /* 0058 */  0x95, 0x1D, 0xC7, 0xCB, 0x9B, 0x4B, 0x8D, 0x5E,  // .....K.^
                /* 0060 */  0x42, 0x41, 0x01, 0x02, 0x49, 0x4B, 0x11, 0x2D,  // BA..IK.-
                /* 0068 */  0xFB, 0x2D, 0x30, 0x41, 0xB8, 0xFE, 0x4A, 0x3C,  // .-0A..J<
                /* 0070 */  0x09, 0xE7, 0x51, 0x33, 0x42, 0x43, 0x2D, 0x00,  // ..Q3BC-.
                /* 0078 */  0xE3, 0x08, 0x8D, 0x98, 0xF4, 0x68, 0x35, 0x4C,  // .....h5L
                /* 0080 */  0xAF, 0x3E, 0x6A, 0x1B, 0x81, 0x06, 0xF8, 0x3C,  // .>j....<
                /* 0088 */  0x42, 0x44, 0x0E, 0x00, 0x46, 0x97, 0xEA, 0x14,  // BD..F...
                /* 0090 */  0x1F, 0xCE, 0x98, 0x40, 0xA0, 0xE0, 0x70, 0x45,  // ...@..pE
                /* 0098 */  0xCB, 0x4D, 0xA7, 0x45, 0x42, 0x45, 0x01, 0x00,  // .M.EBE..
                /* 00A0 */  0x28, 0x20, 0x2F, 0x32, 0x84, 0x0F, 0x01, 0x49,  // ( /2...I
                /* 00A8 */  0x98, 0x8E, 0x01, 0x51, 0x76, 0x04, 0x9E, 0x2D,  // ...Qv..-
                /* 00B0 */  0x42, 0x46, 0x02, 0x00, 0x3D, 0xDE, 0x32, 0x82,  // BF..=.2.
                /* 00B8 */  0x3D, 0x66, 0x27, 0x43, 0xA8, 0xF4, 0xE2, 0x93,  // =f'C....
                /* 00C0 */  0xAD, 0xB9, 0xBF, 0x05, 0x42, 0x47, 0x00, 0x00,  // ....BG..
                /* 00C8 */  0x36, 0x64, 0x1F, 0x8F, 0x42, 0x9F, 0xC8, 0x42,  // 6d..B..B
                /* 00D0 */  0xBA, 0xDC, 0x0E, 0x94, 0x24, 0xF2, 0x0C, 0x9A,  // ....$...
                /* 00D8 */  0x42, 0x48, 0x00, 0x00, 0x35, 0x64, 0x1F, 0x8F,  // BH..5d..
                /* 00E0 */  0x42, 0x9F, 0xC8, 0x42, 0xBA, 0xDC, 0x0E, 0x94,  // B..B....
                /* 00E8 */  0x24, 0xF2, 0x0C, 0x9A, 0x42, 0x49, 0x00, 0x00   // $...BI..
            })
            Method (WMAA, 3, Serialized)
            {
                Return (C210 (Arg1, Arg2))
            }

            Method (C218, 0, NotSerialized)
            {
                \_SB.C147 (0xEA74, 0x02, 0x00, 0x00, 0x00)
                Local0 = Package (0x03)
                    {
                        0x00, 
                        0x04, 
                        Buffer (0x04){}
                    }
                DerefOf (Local0 [0x02]) [0x00] = (C053 & 0x0F
                    )
                DerefOf (Local0 [0x02]) [0x01] = 0x01
                DerefOf (Local0 [0x02]) [0x02] = 0x01
                Return (Local0)
            }

            Method (C226, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0x0F)
                If (((\_SB.C051 & 0x03) == 0x00))
                {
                    If ((Local0 != C052))
                    {
                        C054 = Local0
                        \_GPE.C233 (0x00)
                        Notify (\_SB.C002.C088, 0x80) // Status Change
                    }
                }

                Return (Package (0x02)
                {
                    0x00, 
                    0x00
                })
            }

            Method (C219, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    0x04, 
                    0x00
                })
            }

            Method (C227, 1, NotSerialized)
            {
                Return (Package (0x02)
                {
                    0x04, 
                    0x00
                })
            }

            Method (C21A, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        0x00, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x01, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                If ((\_SB.C002.C003.C0D2 & 0x00020000))
                {
                    Local0 = Package (0x03)
                        {
                            0x00, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           // ....
                            }
                        }
                }

                Return (Local0)
            }

            Method (C228, 1, NotSerialized)
            {
                \_SB.C147 (0xEA75, 0x02, 0x03, 0x574D4953, 0x00)
                Return (C22E ())
            }

            Method (C21B, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        0x00, 
                        0x01, 
                        Buffer (0x01)
                        {
                             0x00                                             // .
                        }
                    }
                Return (Local0)
            }

            Method (C21C, 0, NotSerialized)
            {
                \_SB.C147 (0xEA75, 0x01, 0x05, 0x574D4953, 0x00)
                Return (C22E ())
            }

            Method (C229, 1, NotSerialized)
            {
                \_SB.C147 (0xEA75, 0x02, 0x05, 0x574D4953, 0x00)
                Return (C22E ())
            }

            Method (C22A, 1, NotSerialized)
            {
                Return (Package (0x02)
                {
                    0x04, 
                    0x00
                })
            }

            Method (C21D, 1, NotSerialized)
            {
                If ((Arg0 < SizeOf (C1BB)))
                {
                    Return (\_SB.C002.C003.C005.C1BE (Arg0))
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x06, 
                        0x00
                    })
                }
            }

            Method (C21E, 0, NotSerialized)
            {
                Local0 = 0x10
                Local1 = Buffer (0x0A)
                    {
                        /* 0000 */  0x31, 0x01, 0xAE, 0x01, 0xB6, 0x01, 0xB7, 0x01,  // 1.......
                        /* 0008 */  0x00, 0x00                                       // ..
                    }
                Concatenate (Local1, Buffer (0x06)
                    {
                         0xFF, 0xFF, 0xA9, 0x21, 0x00, 0x00               // ...!..
                    }, Local2)
                Local3 = Package (0x03){}
                Local3 [0x00] = 0x00
                Local3 [0x01] = Local0
                Local3 [0x02] = Local2
                Return (Local3)
            }

            Method (C21F, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        0x00, 
                        0x04, 
                        Buffer (0x04){}
                    }
                DerefOf (Local0 [0x02]) [0x00] = \_SB.C002.C003.C005.C1A4 ()
                Return (Local0)
            }

            Method (C22B, 1, NotSerialized)
            {
                \_SB.C002.C003.C005.C1A5 (Arg0)
                Return (Package (0x02)
                {
                    0x00, 
                    0x00
                })
            }

            Method (C234, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        0x00, 
                        0x04, 
                        Buffer (0x04){}
                    }
                Local2 = \_SB.C02E
                Local1 = DerefOf (Local2 [0x00])
                If ((Local1 == 0x0D))
                {
                    DerefOf (Local0 [0x02]) [0x00] = 0x31
                    DerefOf (Local0 [0x02]) [0x01] = 0x01
                }

                If ((Local1 == 0x02))
                {
                    DerefOf (Local0 [0x02]) [0x00] = 0xAE
                    DerefOf (Local0 [0x02]) [0x01] = 0x01
                    DerefOf (Local0 [0x02]) [0x02] = C054 /* \_SB_.C054 */
                    DerefOf (Local0 [0x02]) [0x03] = C052 /* \_SB_.C052 */
                }

                If (((Local1 == 0x03) || (Local1 == 0x04)))
                {
                    DerefOf (Local0 [0x02]) [0x00] = (0xB3 + Local1)
                    DerefOf (Local0 [0x02]) [0x01] = 0x01
                    DerefOf (Local0 [0x02]) [0x02] = \_SB.C063
                    DerefOf (Local0 [0x02]) [0x03] = DerefOf (Local2 [
                        0x03])
                }

                If ((Local1 == 0x06))
                {
                    DerefOf (Local0 [0x02]) [0x00] = 0x9D
                    DerefOf (Local0 [0x02]) [0x01] = 0x01
                }

                Return (Local0)
            }

            Method (C220, 0, NotSerialized)
            {
                \_SB.C147 (0xEA75, 0x01, 0x0A, 0x574D4953, 0x00)
                Return (C234 ())
            }

            Method (C22C, 1, NotSerialized)
            {
                \_SB.C147 (0xEA75, 0x02, 0x0A, 0x574D4953, 0x00)
                Return (C234 ())
            }

            Method (C221, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        0x00, 
                        0x04, 
                        Buffer (0x04){}
                    }
                Local1 = \_SB.C050
                \_SB.C050 = 0x00
                \_SB.C147 (0xEA7B, 0x00, 0x00, 0x00, 0x00)
                C235 = \_SB.C06A
                CreateByteField (C235, 0x00, C236)
                If ((C236 == 0x00))
                {
                    If ((Local1 == 0x01))
                    {
                        DerefOf (Local0 [0x02]) [0x00] = 0x6D
                        DerefOf (Local0 [0x02]) [0x01] = 0x20
                    }

                    If ((Local1 == 0x02))
                    {
                        DerefOf (Local0 [0x02]) [0x00] = 0x3B
                        DerefOf (Local0 [0x02]) [0x01] = 0x21
                    }
                }

                If ((Local1 == 0x05))
                {
                    Local2 = \_SB.C002.C003.C005.C197
                    DerefOf (Local0 [0x02]) [0x00] = 0xA9
                    DerefOf (Local0 [0x02]) [0x01] = 0x21
                    DerefOf (Local0 [0x02]) [0x02] = Local2
                    DerefOf (Local0 [0x02]) [0x03] = 0x00
                }

                Return (Local0)
            }

            Method (C222, 0, NotSerialized)
            {
                Local0 = 0x00
                \_SB.C147 (0xEA79, 0x00, 0x00, 0x00, 0x00)
                If ((C05C != 0x00))
                {
                    Local1 = Buffer (0x06)
                        {
                             0x02, 0x02, 0x00, 0x00, 0x00, 0x00               // ......
                        }
                    Local1 [0x02] = (C05C & 0xFF)
                    Local1 [0x03] = ((C05C >> 0x08) & 0xFF)
                    Local1 [0x04] = ((C05C >> 0x10) & 0xFF)
                    Local1 [0x05] = ((C05C >> 0x18) & 0xFF)
                    Local0 += 0x06
                }

                \_SB.C147 (0xEA79, 0x01, 0x00, 0x00, 0x00)
                If ((C05C != 0x00))
                {
                    Local2 = Buffer (0x06)
                        {
                             0x02, 0x03, 0x00, 0x00, 0x00, 0x00               // ......
                        }
                    Local2 [0x02] = (C05C & 0xFF)
                    Local2 [0x03] = ((C05C >> 0x08) & 0xFF)
                    Local2 [0x04] = ((C05C >> 0x10) & 0xFF)
                    Local2 [0x05] = ((C05C >> 0x18) & 0xFF)
                    If ((Local0 == 0x00))
                    {
                        Local1 = Local2
                    }
                    Else
                    {
                        Concatenate (Local1, Local2, Local3)
                        Local1 = Local3
                    }

                    Local0 += 0x06
                }

                OperationRegion (C237, SystemMemory, 0xF8800000, 0x40)
                Field (C237, AnyAcc, NoLock, Preserve)
                {
                    C238,   8, 
                    C239,   8, 
                    C23A,   8, 
                    C23B,   8, 
                    Offset (0x2C), 
                    C23C,   8, 
                    C23D,   8, 
                    C23E,   8, 
                    C23F,   8
                }

                If ((C238 != 0xFF))
                {
                    Local2 = Buffer (0x0A)
                        {
                            /* 0000 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00                                       // ..
                        }
                    Local2 [0x02] = C238 /* \_SB_.C1FE.C222.C238 */
                    Local2 [0x03] = C239 /* \_SB_.C1FE.C222.C239 */
                    Local2 [0x04] = C23A /* \_SB_.C1FE.C222.C23A */
                    Local2 [0x05] = C23B /* \_SB_.C1FE.C222.C23B */
                    Local2 [0x06] = C23C /* \_SB_.C1FE.C222.C23C */
                    Local2 [0x07] = C23D /* \_SB_.C1FE.C222.C23D */
                    Local2 [0x08] = C23E /* \_SB_.C1FE.C222.C23E */
                    Local2 [0x09] = C23F /* \_SB_.C1FE.C222.C23F */
                    If ((Local0 == 0x00))
                    {
                        Local1 = Local2
                    }
                    Else
                    {
                        Concatenate (Local1, Local2, Local3)
                        Local1 = Local3
                    }

                    Local0 += 0x0A
                }

                Local2 = Package (0x03){}
                Local2 [0x00] = 0x00
                Local2 [0x01] = Local0
                Local2 [0x02] = Local1
                Return (Local2)
            }

            Method (C223, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        0x00, 
                        0x04, 
                        Buffer (0x04){}
                    }
                Local1 = \_SB.C002.C003.C005.C1B4 ()
                Local1 += 0x01
                DerefOf (Local0 [0x02]) [0x00] = Local1
                Return (Local0)
            }

            Method (C224, 0, NotSerialized)
            {
                \_SB.C147 (0xEA75, 0x01, 0x10, 0x574D4953, 0x00)
                Return (C22E ())
            }

            Method (C22D, 1, NotSerialized)
            {
                \_SB.C147 (0xEA75, 0x02, 0x10, 0x574D4953, 0x00)
                Return (C22E ())
            }

            Name (C240, Package (0x03)
            {
                Package (0x05)
                {
                    "BIOS Configuration Change", 
                    " ", 
                    0x04, 
                    0x05, 
                    0x02
                }, 

                Package (0x05)
                {
                    "BIOS Configuration Security", 
                    "An attempt has been made to Access BIOS features unsuccessfully", 
                    0x04, 
                    0x0A, 
                    0x06
                }, 

                Package (0x05)
                {
                    "Unknown Event", 
                    "Unknown event type", 
                    0x00, 
                    0x00, 
                    0x00
                }
            })
            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xA0))
                {
                    If ((DerefOf (C20D [0x00]) == 0x00))
                    {
                        Return (DerefOf (C240 [0x00]))
                    }

                    If ((DerefOf (C20D [0x00]) == 0x01))
                    {
                        Return (DerefOf (C240 [0x01]))
                    }
                    Else
                    {
                        Return (DerefOf (C240 [0x02]))
                    }
                }
                Else
                {
                    Concatenate (C22F, C230, Local0)
                    If ((C231 != 0x00))
                    {
                        C22F = C231 /* \_SB_.C1FE.C231 */
                        C230 = C232 /* \_SB_.C1FE.C232 */
                        C231 = 0x00
                        C232 = 0x00
                    }
                    Else
                    {
                        C22F = 0x00
                        C230 = 0x00
                    }

                    Return (Local0)
                }
            }

            Name (C241, Buffer (0x2D){})
            Name (C235, Buffer (0x01){})
            Name (C242, Buffer (0x3F){})
            Name (C243, Buffer (0x3F){})
            Name (C244, Buffer (0x3F){})
            Name (C245, Buffer (0x3F){})
            Name (C246, Buffer (0x50){})
            Name (C247, Buffer (0x12){})
            Name (C07C, Buffer (0x10){})
            Name (C248, Buffer (0x64)
            {
                /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0050 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0058 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0060 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
            })
            Name (C249, Buffer (0x10)
            {
                /* 0000 */  0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x05,  // ........
                /* 0008 */  0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x97   // ........
            })
            Name (C24A, Buffer (0x32){})
            Name (C24B, Buffer (0x1E){})
            Name (C24C, Buffer (0x1E){})
            Name (C24D, Buffer (0x8C){})
            Name (C24E, Buffer (0x82){})
            Name (C24F, Buffer (0x11){})
            Name (C06E, Buffer (0x50){})
            Name (C250, Buffer (0x8C){})
            Name (C251, Buffer (0x32){})
            Name (C252, Buffer (0x32){})
            Name (C253, Buffer (0x32){})
            Name (C254, Buffer (0x0190){})
            Name (C255, Buffer (0x96){})
            Name (C256, Buffer (0x78){})
            Name (C257, Buffer (0x32){})
            Name (C258, Buffer (0x1E){})
            Name (C259, Buffer (0x1E){})
            Name (C25A, "serial port")
            Name (C25B, "Parallel Port")
            Name (C25C, "My asset tag")
            Name (C25D, "Enable")
            Name (C25E, "Disable")
            Name (C25F, " Disable, *Enable")
            Name (C260, "*Disable,  Enable")
            Name (C261, " *PXE, RPL")
            Name (C262, " PXE, *RPL")
            Name (C263, "PXE")
            Name (C264, "RPL")
            Name (C265, "*PXE")
            Name (C266, "*Available,  Hidden")
            Name (C267, " Available, *Hidden")
            Name (C268, "Hidden")
            Name (C269, "Available")
            Name (C26A, "*F1 to Boot, Allow user to reject, No prompts")
            Name (C26B, " F1 to Boot, *Allow user to reject, No prompts")
            Name (C26C, " F1 to Boot, Allow user to reject, *No prompts")
            Name (C26D, "F1 to Boot")
            Name (C26E, "Allow user to reject")
            Name (C26F, "No prompts")
            Name (C270, "Bit-shift")
            Name (C271, "LBA-assisted")
            Name (C272, " *Bit-shift,  LBA-assisted")
            Name (C273, " Bit-shift, *LBA-assisted")
            Name (C274, Buffer (0x1F){})
            Name (C275, " 0, 5, 10, 15, 20, 25, 30, 35")
            Name (C276, "   ")
            Name (C277, "                                                                                             ")
            Name (C278, "                                                                                             ")
            Name (C279, "                                                                                                                                                        ")
            Name (C27A, Buffer (0x1000){})
            Name (C27B, Package (0x2D)
            {
                Package (0x18)
                {
                    "Serial Port", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Port Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x64, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Infrared Port", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Port Options", 
                    0x01, 
                    0x00, 
                    0x00, 
                    0x6E, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Parallel Port", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Port Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x78, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "CD-ROM Boot", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Boot Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0xDC, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Floppy Boot", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Boot Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0xE6, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Internal Network Adapter Boot", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Boot Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0xF0, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Internal Network Adapter Boot Mode", 
                    " *PXE, RPL", 
                    "\\System Configuration\\Boot Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0xFA, 
                    0x02, 
                    "SELECT * FROM HP_BIOSEnumeration WHERE Name=\'Internal Network Adapter Boot\' AND CurrentValue=\'Enable\'", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "PXE", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Swap Fn/Ctrl Key", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x012C, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "USB Legacy Support", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0140, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Fan Always on while on AC Power", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0168, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Multiboot", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Boot Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0xD2, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Flash Media Reader", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Port Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x82, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "F9, F10 and F12 Delay(Sec)", 
                    " *0, 5, 10, 15, 20, 25, 30, 35", 
                    "\\System Configuration\\Boot Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0xC8, 
                    0x02, 
                    " ", 
                    " ", 
                    "0", 
                    0x0C, 
                    "0", 
                    "5", 
                    "10", 
                    "15", 
                    "20", 
                    "25", 
                    "30", 
                    "35", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Parallel Port Mode", 
                    " *Standard , Bidirectional, EPP , ECP ", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x014A, 
                    0x02, 
                    " ", 
                    " ", 
                    "Standard", 
                    0x0C, 
                    "Standard", 
                    "Bidirectional", 
                    "EPP", 
                    "ECP", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Express Boot Popup Delay(Sec)", 
                    " *0, 5, 10, 15, 20, 25, 30, 35", 
                    "\\System Configuration\\Boot Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0xD7, 
                    0x02, 
                    "SELECT * FROM HP_BIOSEnumeration WHERE Name=\'Multiboot\' AND CurrentValue=\'Enable\'", 
                    " ", 
                    "0", 
                    0x0C, 
                    "0", 
                    "5", 
                    "10", 
                    "15", 
                    "20", 
                    "25", 
                    "30", 
                    "35", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Smart Card Power-On Support", 
                    " Disable, *Enable", 
                    "\\Security\\Smart Card Security", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0280, 
                    0x02, 
                    "SELECT * FROM HP_BIOSPassword WHERE Name=\'Setup Password\' AND IsSet=1", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "LAN/WLAN Switching", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Built-In Device Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0208, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Embedded Bluetooth Device Radio", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Built-In Device Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x01FE, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Embedded WLAN Device Radio", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Built-In Device Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x01F4, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Embedded WWAN Device Radio", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Built-In Device Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x01F5, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "LAN Power Saving", 
                    " *Disable, Enable", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x017C, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Power-On Authentication Support", 
                    " *Disable, Enable", 
                    "\\Security\\Embedded Security", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x028A, 
                    0x02, 
                    "SELECT * FROM HP_BIOSPassword WHERE Name=\'Setup Password\' AND IsSet=1", 
                    "SELECT * FROM HP_BIOSEnumeration WHERE Name=\'Embedded Security Device Availability\' AND CurrentValue=\'Available\'", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Automatic Drivelock Support", 
                    " *Disable, Enable", 
                    "\\Security\\Embedded Security", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0294, 
                    0x02, 
                    "SELECT * FROM HP_BIOSEnumeration WHERE Name=\'Power-On Authentication Support\' AND CurrentValue=\'Enable\'", 
                    "SELECT * FROM HP_BIOSEnumeration WHERE Name=\'Embedded Security Device Availability\' AND CurrentValue=\'Available\'", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Stringent Security", 
                    " Disable, *Enable", 
                    "\\Security\\Password Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x026C, 
                    0x02, 
                    "SELECT * FROM HP_BIOSPassword WHERE Name=\'Setup Password\' AND IsSet=1", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Require Password On Restart", 
                    " Disable, *Enable", 
                    "\\Security\\Password Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0276, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Data Execution Prevention", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0172, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "BIOS DMA Data Transfers", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x015E, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "SATA Native Mode", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0186, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "USB Ports", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Port Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x8C, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "1394 Port", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Port Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x96, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Cardbus Slot", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Port Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0xA0, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Express Card Slot", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Port Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0xAA, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Dual Core CPU", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0135, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Wake on LAN", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Built-In Device Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x021C, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Ambient Light Sensor", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Built-In Device Options", 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x01F9, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Secondary Battery Fast Charge", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0195, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Embedded Security Device Availability", 
                    "*Available, Hidden", 
                    "\\Security\\Embedded Security", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0285, 
                    0x02, 
                    "SELECT * FROM HP_BIOSPassword WHERE Name=\'Setup Password\' AND IsSet=1", 
                    " ", 
                    "Available", 
                    0x0C, 
                    "Available", 
                    "Hidden", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Activate Embedded Security On Next Boot", 
                    " *Disable, Enable", 
                    "\\Security\\Embedded Security", 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x0286, 
                    0x02, 
                    "SELECT * FROM HP_BIOSPassword WHERE Name=\'Setup Password\' AND IsSet=1", 
                    "SELECT * FROM HP_BIOSEnumeration WHERE Name=\'Embedded Security Device Availability\' AND CurrentValue=\'Available\'", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Embedded Security Activation Policy", 
                    " *F1 to Boot, Allow user to reject, No prompts", 
                    "\\Security\\Embedded Security", 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x0287, 
                    0x02, 
                    "SELECT * FROM HP_BIOSPassword WHERE Name=\'Setup Password\' AND IsSet=1", 
                    "SELECT * FROM HP_BIOSEnumeration WHERE Name=\'Embedded Security Device Availability\' AND CurrentValue=\'Available\'", 
                    "F1 to Boot", 
                    0x0C, 
                    "F1 to Boot", 
                    "Allow user to reject", 
                    "No prompts", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Virtualization Technology", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x013D, 
                    0x02, 
                    " ", 
                    " ", 
                    "Enable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "HDD Translation Mode", 
                    " Bit-shift, *LBA-assisted", 
                    "\\System Configuration\\Device Configurations", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x013C, 
                    0x02, 
                    " ", 
                    " ", 
                    "Bit-shift", 
                    0x0C, 
                    "Bit-shift", 
                    "LBA-assisted", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Network Interface Controller (LAN)", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Built-In Device Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x01F8, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Integrated Camera", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Built-In Device Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x01FA, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Wireless Button State", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Built-In Device Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x01F6, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }, 

                Package (0x18)
                {
                    "Touchpad", 
                    " Disable, *Enable", 
                    "\\System Configuration\\Built-In Device Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x01FC, 
                    0x02, 
                    " ", 
                    " ", 
                    "Disable", 
                    0x0C, 
                    "Disable", 
                    "Enable", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }
            })
            Name (C27C, Package (0x01)
            {
                Package (0x1B)
                {
                    "Boot Order", 
                    " Optical Disk Drive, Hard Drive(C:), USB Floppy, USB SuperDisk, USB CD-ROM, USB Hard Disk, Network Controller, , , , , , , , , ,", 
                    "\\System Configuration\\Boot Options", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x0104, 
                    0x02, 
                    "SELECT * FROM HP_BIOSEnumeration WHERE Name=\'Multiboot\' AND CurrentValue=\'Enable\'", 
                    " ", 
                    0x07, 
                    " Optical Disk Drive ", 
                    " Hard Drive(C:) ", 
                    " USB Floppy ", 
                    " USB SuperDisk ", 
                    " USB CD-ROM ", 
                    " USB Hard Disk ", 
                    " Network Controller ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " ", 
                    " "
                }
            })
            Name (C27D, Package (0x02)
            {
                Package (0x0F)
                {
                    "Setup Password", 
                    " ", 
                    "\\Security", 
                    0x00, 
                    0x01, 
                    0x01, 
                    0x0258, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x20, 
                    "kbd", 
                    " ", 
                    0x00
                }, 

                Package (0x0F)
                {
                    "Power-On Password", 
                    " ", 
                    "\\Security", 
                    0x00, 
                    0x01, 
                    0x01, 
                    0x0262, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x20, 
                    "kbd", 
                    " ", 
                    0x00
                }
            })
            Name (C27E, Package (0x07)
            {
                Package (0x02)
                {
                    0x01, 
                    " Optical Disk Drive "
                }, 

                Package (0x02)
                {
                    0x00, 
                    " Hard Drive(C:) "
                }, 

                Package (0x02)
                {
                    0x06, 
                    " USB Floppy "
                }, 

                Package (0x02)
                {
                    0x09, 
                    " USB SuperDisk "
                }, 

                Package (0x02)
                {
                    0x07, 
                    " USB CD-ROM "
                }, 

                Package (0x02)
                {
                    0x08, 
                    " USB Hard Disk "
                }, 

                Package (0x02)
                {
                    0x0A, 
                    " Network Controller "
                }
            })
            Name (C27F, Package (0x07)
            {
                Package (0x02)
                {
                    0x05, 
                    " Device 1 "
                }, 

                Package (0x02)
                {
                    0x00, 
                    " Device 2 "
                }, 

                Package (0x02)
                {
                    0x06, 
                    " Device 3 "
                }, 

                Package (0x02)
                {
                    0x09, 
                    " Device 4 "
                }, 

                Package (0x02)
                {
                    0x07, 
                    " Device 5 "
                }, 

                Package (0x02)
                {
                    0x08, 
                    " Device 6 "
                }, 

                Package (0x02)
                {
                    0x0A, 
                    " Device 7 "
                }
            })
            Name (C280, Package (0x07)
            {
                " Boot Device 1", 
                " Boot Device 2", 
                " Boot Device 3", 
                " Boot Device 4", 
                " Boot Device 5", 
                " Boot Device 6", 
                " Boot Device 7"
            })
            Name (C281, Package (0x0E)
            {
                Package (0x0C)
                {
                    "Asset Tracking Number", 
                    "Asset Tag Place Holder", 
                    "\\Security\\System IDs", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x62, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x10
                }, 

                Package (0x0C)
                {
                    "Ownership Tag", 
                    "Ownershiptag place holder", 
                    "\\Security\\System IDs", 
                    0x00, 
                    0x01, 
                    0x00, 
                    0x61, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x50
                }, 

                Package (0x0C)
                {
                    "Manufacturer", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x14, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }, 

                Package (0x0C)
                {
                    "Product Name", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x1E, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }, 

                Package (0x0C)
                {
                    "Processor Type", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x28, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }, 

                Package (0x0C)
                {
                    "Processor Speed", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x32, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }, 

                Package (0x0C)
                {
                    "Processor Stepping", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x3C, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }, 

                Package (0x0C)
                {
                    "Cache size(L1/L2)", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x46, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }, 

                Package (0x0C)
                {
                    "Memory Size", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x50, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }, 

                Package (0x0C)
                {
                    "ROM Date", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x5A, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }, 

                Package (0x0C)
                {
                    "ROM BIOS Version", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x5C, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }, 

                Package (0x0C)
                {
                    "Serial Number", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x5E, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }, 

                Package (0x0C)
                {
                    "Video BIOS Revision", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x5F, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }, 

                Package (0x0C)
                {
                    "Keyboard Controller Version", 
                    "Asset Tag Place Holder", 
                    "\\File\\System Information", 
                    0x01, 
                    0x01, 
                    0x00, 
                    0x60, 
                    0x02, 
                    " ", 
                    " ", 
                    0x00, 
                    0x12
                }
            })
            Name (C282, Package (0x08)
            {
                "0", 
                "5", 
                "10", 
                "15", 
                "20", 
                "25", 
                "30", 
                "35"
            })
            Name (C283, Package (0x08)
            {
                "0", 
                "5", 
                "10", 
                "15", 
                "20", 
                "25", 
                "30", 
                "35"
            })
            Name (C284, Package (0x04)
            {
                "Standard", 
                "Bidirectional", 
                "EPP", 
                "ECP"
            })
            Method (WMBH, 1, NotSerialized)
            {
                Return (0x00)
            }

            Method (WMBA, 3, NotSerialized)
            {
                If ((Arg1 == 0x01))
                {
                    Local0 = Arg2
                    Local1 = SizeOf (Local0)
                    Local2 = 0x00
                    Local4 = DerefOf (Local0 [Local2])
                    Local2++
                    Local2++
                    Local5 = 0x00
                    Local6 = 0x00
                    Local3 = 0x00
                    \_SB.C147 (0xEA7B, 0x00, 0x00, 0x00, 0x00)
                    C235 = \_SB.C06A
                    CreateByteField (C235, 0x00, C285)
                    While ((Local3 != SizeOf (C24A)))
                    {
                        C24A [Local3] = 0x00
                        Local3++
                    }

                    Local3 = 0x00
                    While ((Local3 != SizeOf (C24D)))
                    {
                        C24D [Local3] = 0x00
                        Local3++
                    }

                    Local3 = 0x00
                    While ((Local3 != SizeOf (C250)))
                    {
                        C250 [Local3] = 0x00
                        Local3++
                    }

                    Local3 = 0x00
                    While ((Local3 != SizeOf (C27A)))
                    {
                        C27A [Local3] = 0x00
                        Local3++
                    }

                    Local3 = 0x00
                    While ((Local3 != SizeOf (C248)))
                    {
                        C27A [Local3] = 0xFF
                        Local3++
                    }

                    Local3 = 0x00
                    While ((Local3 != SizeOf (C242)))
                    {
                        C242 [Local3] = 0x00
                        C243 [Local3] = 0x00
                        C244 [Local3] = 0x00
                        C245 [Local3] = 0x00
                        Local3++
                    }

                    \_SB.C07D = 0x00
                    \_SB.C07E = C242 /* \_SB_.C1FE.C242 */
                    \_SB.C07F = C243 /* \_SB_.C1FE.C243 */
                    \_SB.C081 = C244 /* \_SB_.C1FE.C244 */
                    \_SB.C082 = C245 /* \_SB_.C1FE.C245 */
                    While ((Local5 != Local4))
                    {
                        C24A [Local6] = DerefOf (Local0 [Local2])
                        Local2++
                        Local5++
                        Local6++
                        Local2++
                        Local5++
                    }

                    Local4 = DerefOf (Local0 [Local2])
                    Local2++
                    Local2++
                    Local5 = 0x00
                    Local6 = 0x00
                    If (\C015 (C24A, "Boot Order", 0x0A))
                    {
                        While ((Local5 != Local4))
                        {
                            C27A [Local6] = DerefOf (Local0 [Local2])
                            Local2++
                            Local5++
                            Local6++
                            Local2++
                            Local5++
                        }
                    }
                    Else
                    {
                        While ((Local5 != Local4))
                        {
                            C24D [Local6] = DerefOf (Local0 [Local2])
                            Local2++
                            Local5++
                            Local6++
                            Local2++
                            Local5++
                        }
                    }

                    Local4 = DerefOf (Local0 [Local2])
                    Local2++
                    Local2++
                    If (C015 (C24A, "Power-On Password", 0x11))
                    {
                        Local5 = 0x00
                        Local6 = 0x00
                        While ((Local5 != Local4))
                        {
                            C250 [Local6] = DerefOf (Local0 [Local2])
                            Local2++
                            Local5++
                            Local6++
                            Local2++
                            Local5++
                        }
                    }
                    ElseIf (((C286 () == 0x01) || (C287 () == 0x01)))
                    {
                        Local5 = 0x00
                        Local6 = 0x00
                        While ((Local5 != Local4))
                        {
                            C250 [Local6] = DerefOf (Local0 [Local2])
                            Local2++
                            Local5++
                            Local6++
                            Local2++
                            Local5++
                        }

                        Local0 = 0x00
                        Local5 = 0x00
                        If ((DerefOf (C250 [Local0]) != 0x00))
                        {
                            While ((DerefOf (C250 [Local0]) != 0x3E))
                            {
                                Local0++
                                If ((Local0 >= 0x20))
                                {
                                    \_SB.C06A = 0x05
                                    Return (\_SB.C06A)
                                }
                            }

                            Local0++
                            Local3 = Local0
                            While ((Local3 != 0x20))
                            {
                                If ((DerefOf (C250 [Local3]) == 0x20))
                                {
                                    Local0++
                                }
                                Else
                                {
                                    Local3 = 0x1F
                                }

                                Local3++
                            }

                            Local3 = (Local0 + 0x01)
                            While ((DerefOf (C250 [Local0]) != 0x00))
                            {
                                Local1 = DerefOf (C250 [Local0])
                                If ((Local1 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local1 >= 0x30) && (Local1 <= 0x39)))
                                {
                                    Local1 -= 0x30
                                }
                                Else
                                {
                                    Local1 -= 0x41
                                    Local1 += 0x0A
                                    If ((Local1 > 0x0F))
                                    {
                                        Local1 -= 0x20
                                    }
                                }

                                Local4 = DerefOf (C250 [Local3])
                                If ((Local4 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local4 >= 0x30) && (Local4 <= 0x39)))
                                {
                                    Local4 -= 0x30
                                }
                                Else
                                {
                                    Local4 -= 0x41
                                    Local4 += 0x0A
                                    If ((Local4 > 0x0F))
                                    {
                                        Local4 -= 0x20
                                    }
                                }

                                Local4 |= (Local1 << 0x04)
                                Local4 &= 0x7F
                                C242 [Local5] = Local4
                                Local0++
                                Local0++
                                Local3++
                                Local3++
                                Local5++
                            }

                            \_SB.C07E = C242 /* \_SB_.C1FE.C242 */
                        }
                        ElseIf ((C286 () == 0x01))
                        {
                            Return (0x06)
                        }
                    }

                    Local7 = 0x00
                    Local4 = 0x00
                    Local7 = 0x00
                    Local4 = 0x00
                    Local2 = 0x00
                    Local5 = 0x2D
                    While ((Local5 != Local4))
                    {
                        C251 = DerefOf (DerefOf (C27B [Local4]) [0x00])
                        If (\C015 (C24A, C251, SizeOf (C251)))
                        {
                            Local4 = 0x2D
                            Local4--
                            Local2 = 0x01
                        }

                        Local7++
                        Local4++
                    }

                    Local7--
                    If (\C015 (C24A, "Boot Order", 0x09))
                    {
                        Local2 = 0x03
                    }

                    If (\C015 (C24A, "Setup Password", 0x0E))
                    {
                        Local2 = 0x04
                        Local0 = 0x00
                        Local5 = 0x00
                        If ((DerefOf (C24D [Local0]) != 0x00))
                        {
                            While ((DerefOf (C24D [Local0]) != 0x3E))
                            {
                                Local0++
                                If ((Local0 >= 0x20))
                                {
                                    \_SB.C06A = 0x05
                                    Return (\_SB.C06A)
                                }
                            }

                            Local0++
                            Local3 = Local0
                            While ((Local3 != 0x20))
                            {
                                If ((DerefOf (C24D [Local3]) == 0x20))
                                {
                                    Local0++
                                }
                                Else
                                {
                                    Local3 = 0x1F
                                }

                                Local3++
                            }

                            Local3 = (Local0 + 0x01)
                            While ((DerefOf (C24D [Local0]) != 0x00))
                            {
                                Local1 = DerefOf (C24D [Local0])
                                If ((Local1 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local1 >= 0x30) && (Local1 <= 0x39)))
                                {
                                    Local1 -= 0x30
                                }
                                Else
                                {
                                    Local1 -= 0x41
                                    Local1 += 0x0A
                                    If ((Local1 > 0x0F))
                                    {
                                        Local1 -= 0x20
                                    }
                                }

                                Local4 = DerefOf (C24D [Local3])
                                If ((Local4 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local4 >= 0x30) && (Local4 <= 0x39)))
                                {
                                    Local4 -= 0x30
                                }
                                Else
                                {
                                    Local4 -= 0x41
                                    Local4 += 0x0A
                                    If ((Local4 > 0x0F))
                                    {
                                        Local4 -= 0x20
                                    }
                                }

                                Local4 |= (Local1 << 0x04)
                                Local4 &= 0x7F
                                C243 [Local5] = Local4
                                Local0++
                                Local0++
                                Local3++
                                Local3++
                                Local5++
                            }
                        }

                        Local0 = 0x00
                        Local3 = 0x07
                        Local5 = 0x00
                        Local5 = C286 ()
                        If (((DerefOf (C250 [Local0]) != 0x00) && (
                            Local5 != 0x00)))
                        {
                            Local5 = 0x00
                            While ((DerefOf (C250 [Local0]) != 0x3E))
                            {
                                Local0++
                                If ((Local0 >= 0x20))
                                {
                                    \_SB.C06A = 0x05
                                    Return (\_SB.C06A)
                                }
                            }

                            Local0++
                            Local3 = Local0
                            While ((Local3 != 0x20))
                            {
                                If ((DerefOf (C250 [Local3]) == 0x20))
                                {
                                    Local0++
                                }
                                Else
                                {
                                    Local3 = 0x1F
                                }

                                Local3++
                            }

                            Local3 = (Local0 + 0x01)
                            While ((DerefOf (C250 [Local0]) != 0x00))
                            {
                                Local1 = DerefOf (C250 [Local0])
                                If ((Local1 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local1 >= 0x30) && (Local1 <= 0x39)))
                                {
                                    Local1 -= 0x30
                                }
                                Else
                                {
                                    Local1 -= 0x41
                                    Local1 += 0x0A
                                    If ((Local1 > 0x0F))
                                    {
                                        Local1 -= 0x20
                                    }
                                }

                                Local4 = DerefOf (C250 [Local3])
                                If ((Local4 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local4 >= 0x30) && (Local4 <= 0x39)))
                                {
                                    Local4 -= 0x30
                                }
                                Else
                                {
                                    Local4 -= 0x41
                                    Local4 += 0x0A
                                    If ((Local4 > 0x0F))
                                    {
                                        Local4 -= 0x20
                                    }
                                }

                                Local4 |= (Local1 << 0x04)
                                Local4 &= 0x7F
                                C242 [Local5] = Local4
                                Local0++
                                Local0++
                                Local3++
                                Local3++
                                Local5++
                            }
                        }
                    }

                    If (\C015 (C24A, "Power-On Password", 0x11))
                    {
                        Local2 = 0x05
                        Local0 = 0x00
                        Local5 = 0x00
                        If ((DerefOf (C24D [Local0]) != 0x00))
                        {
                            While ((DerefOf (C24D [Local0]) != 0x3E))
                            {
                                Local0++
                                If ((Local0 >= 0x20))
                                {
                                    \_SB.C06A = 0x05
                                    Return (\_SB.C06A)
                                }
                            }

                            Local0++
                            Local3 = Local0
                            While ((Local3 != 0x20))
                            {
                                If ((DerefOf (C24D [Local3]) == 0x20))
                                {
                                    Local0++
                                }
                                Else
                                {
                                    Local3 = 0x1F
                                }

                                Local3++
                            }

                            Local3 = (Local0 + 0x01)
                            While ((DerefOf (C24D [Local0]) != 0x00))
                            {
                                Local1 = DerefOf (C24D [Local0])
                                If ((Local1 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local1 >= 0x30) && (Local1 <= 0x39)))
                                {
                                    Local1 -= 0x30
                                }
                                Else
                                {
                                    Local1 -= 0x41
                                    Local1 += 0x0A
                                    If ((Local1 > 0x0F))
                                    {
                                        Local1 -= 0x20
                                    }
                                }

                                Local4 = DerefOf (C24D [Local3])
                                If ((Local4 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local4 >= 0x30) && (Local4 <= 0x39)))
                                {
                                    Local4 -= 0x30
                                }
                                Else
                                {
                                    Local4 -= 0x41
                                    Local4 += 0x0A
                                    If ((Local4 > 0x0F))
                                    {
                                        Local4 -= 0x20
                                    }
                                }

                                Local4 |= (Local1 << 0x04)
                                Local4 &= 0x7F
                                C245 [Local5] = Local4
                                Local0++
                                Local0++
                                Local3++
                                Local3++
                                Local5++
                            }
                        }

                        Local0 = 0x00
                        Local3 = 0x07
                        Local5 = 0x00
                        Local5 = C287 ()
                        If (((DerefOf (C250 [Local0]) != 0x00) && (
                            Local5 != 0x00)))
                        {
                            Local5 = 0x00
                            While ((DerefOf (C250 [Local0]) != 0x3E))
                            {
                                Local0++
                                If ((Local0 >= 0x20))
                                {
                                    \_SB.C06A = 0x05
                                    Return (\_SB.C06A)
                                }
                            }

                            Local0++
                            Local3 = Local0
                            While ((Local3 != 0x20))
                            {
                                If ((DerefOf (C250 [Local3]) == 0x20))
                                {
                                    Local0++
                                }
                                Else
                                {
                                    Local3 = 0x1F
                                }

                                Local3++
                            }

                            Local3 = (Local0 + 0x01)
                            While ((DerefOf (C250 [Local0]) != 0x00))
                            {
                                Local1 = DerefOf (C250 [Local0])
                                If ((Local1 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local1 >= 0x30) && (Local1 <= 0x39)))
                                {
                                    Local1 -= 0x30
                                }
                                Else
                                {
                                    Local1 -= 0x41
                                    Local1 += 0x0A
                                    If ((Local1 > 0x0F))
                                    {
                                        Local1 -= 0x20
                                    }
                                }

                                Local4 = DerefOf (C250 [Local3])
                                If ((Local4 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local4 >= 0x30) && (Local4 <= 0x39)))
                                {
                                    Local4 -= 0x30
                                }
                                Else
                                {
                                    Local4 -= 0x41
                                    Local4 += 0x0A
                                    If ((Local4 > 0x0F))
                                    {
                                        Local4 -= 0x20
                                    }
                                }

                                Local4 |= (Local1 << 0x04)
                                Local4 &= 0x7F
                                C244 [Local5] = Local4
                                Local0++
                                Local0++
                                Local3++
                                Local3++
                                Local5++
                            }
                        }
                    }

                    If ((Local2 == 0x00))
                    {
                        Local7 = 0x00
                        Local4 = 0x00
                        Local5 = 0x02
                        While ((Local5 != Local4))
                        {
                            C251 = DerefOf (DerefOf (C281 [Local4]) [0x00])
                            If (\C015 (C24A, C251, SizeOf (C251)))
                            {
                                Local4 = 0x01
                                Local2 = 0x02
                            }

                            Local7++
                            Local4++
                        }

                        Local7--
                    }

                    If ((Local2 == 0x01))
                    {
                        If (\C015 (C24D, C25D, SizeOf (C25D)))
                        {
                            Local6 = 0x01
                            C20B [0x00] = 0x00
                        }
                        ElseIf (\C015 (C24D, C25E, SizeOf (C25E)))
                        {
                            Local6 = 0x00
                            C20B [0x00] = 0x00
                        }
                        Else
                        {
                            If (\C015 (C24A, "Parallel Port Mode", 0x12))
                            {
                                If (\C015 (C24D, "Standard", 0x08))
                                {
                                    Local6 = 0x00
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "Bidirectional", 0x0D))
                                {
                                    Local6 = 0x01
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "EPP", 0x03))
                                {
                                    Local6 = 0x02
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "ECP", 0x03))
                                {
                                    Local6 = 0x03
                                    C20B [0x00] = 0x00
                                }
                            }

                            If (\C015 (C24A, "F9, F10 and F12 Delay(Sec)", 0x19))
                            {
                                If (\C015 (C24D, "0", 0x01))
                                {
                                    Local6 = 0x00
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "5", 0x01))
                                {
                                    Local6 = 0x01
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "10", 0x02))
                                {
                                    Local6 = 0x02
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "15", 0x02))
                                {
                                    Local6 = 0x03
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "20", 0x02))
                                {
                                    Local6 = 0x04
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "25", 0x02))
                                {
                                    Local6 = 0x05
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "30", 0x02))
                                {
                                    Local6 = 0x06
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "35", 0x02))
                                {
                                    Local6 = 0x07
                                    C20B [0x00] = 0x00
                                }
                            }

                            If (\C015 (C24A, "Express Boot Popup Delay(Sec)", 0x1D))
                            {
                                If (\C015 (C24D, "0", 0x01))
                                {
                                    Local6 = 0x00
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "5", 0x01))
                                {
                                    Local6 = 0x01
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "10", 0x02))
                                {
                                    Local6 = 0x02
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "15", 0x02))
                                {
                                    Local6 = 0x03
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "20", 0x02))
                                {
                                    Local6 = 0x04
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "25", 0x02))
                                {
                                    Local6 = 0x05
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "30", 0x02))
                                {
                                    Local6 = 0x06
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "35", 0x02))
                                {
                                    Local6 = 0x07
                                    C20B [0x00] = 0x00
                                }
                            }

                            If (\C015 (C24A, "Internal Network Adapter Boot Mode", 0x22))
                            {
                                If (\C015 (C24D, "PXE", 0x03))
                                {
                                    Local6 = 0x00
                                    C20B [0x00] = 0x00
                                }

                                If ((C285 == 0x00))
                                {
                                    If (\C015 (C24D, "RPL", 0x03))
                                    {
                                        Local6 = 0x01
                                        C20B [0x00] = 0x00
                                    }
                                }
                            }

                            If (\C015 (C24A, "HDD Translation Mode", 0x14))
                            {
                                If (\C015 (C24D, "Bit-shift", 0x09))
                                {
                                    Local6 = 0x00
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "LBA-assisted", 0x0C))
                                {
                                    Local6 = 0x01
                                    C20B [0x00] = 0x00
                                }
                            }

                            If (\C015 (C24A, "Embedded Security Device Availability", 0x25))
                            {
                                If (\C015 (C24D, "Available", 0x09))
                                {
                                    Local6 = 0x00
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "Hidden", 0x06))
                                {
                                    Local6 = 0x01
                                    C20B [0x00] = 0x00
                                }
                            }

                            If (\C015 (C24A, "Embedded Security Activation Policy", 0x23))
                            {
                                If (\C015 (C24D, "F1 to Boot", 0x0A))
                                {
                                    Local6 = 0x00
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "Allow user to reject", 0x14))
                                {
                                    Local6 = 0x01
                                    C20B [0x00] = 0x00
                                }

                                If (\C015 (C24D, "No prompts", 0x0A))
                                {
                                    Local6 = 0x02
                                    C20B [0x00] = 0x00
                                }
                            }
                        }
                    }

                    If ((Local2 == 0x02))
                    {
                        Local4 = 0x00
                        Local5 = 0x02
                        Local7 = (Arg0 + 0x2D)
                        If (\C015 (C24A, "Asset Tracking Number", SizeOf (C24A)))
                        {
                            C277 = C24D /* \_SB_.C1FE.C24D */
                            Local4 = 0x00
                            Local5 = 0x00
                            Local1 = 0x00
                            Local1 = SizeOf (C24D)
                            While ((Local5 != Local1))
                            {
                                If ((DerefOf (C24D [Local4]) == 0x00))
                                {
                                    Local5 = SizeOf (C24D)
                                    Local5--
                                }

                                Local4++
                                Local5++
                            }

                            Local4--
                            If ((Local4 > 0x10))
                            {
                                C20B [0x00] = 0x05
                            }
                            Else
                            {
                                C20B [0x00] = 0x00
                            }

                            \_SB.C06C = Local4
                            C24F = C24D /* \_SB_.C1FE.C24D */
                            \_SB.C06D = C24F /* \_SB_.C1FE.C24F */
                            C247 = \_SB.C06D
                        }

                        If (\C015 (C24A, "Ownership Tag", SizeOf (C24A)))
                        {
                            Local1 = 0x00
                            While ((Local1 != 0x50))
                            {
                                C06E [Local1] = DerefOf (C24D [Local1])
                                Local1++
                            }

                            \_SB.C06E = C06E /* \_SB_.C1FE.C06E */
                            C20B [0x00] = 0x00
                            Local7++
                        }
                    }

                    If ((Local2 == 0x03))
                    {
                        Local1 = 0x00
                        Local2 = 0x00
                        Local3 = 0x00
                        Local4 = 0x00
                        Local5 = 0x00
                        Local6 = 0x00
                        Local7 = 0x00
                        Local2 = (0x2D + 0x0E)
                        \_SB.C147 (0xEA7B, 0x00, Local2, 0x00, 0x00)
                        Local2 = 0x00
                        C249 = \_SB.C07C
                        While ((Local6 < 0x07))
                        {
                            If ((DerefOf (C249 [Local6]) == 0x05))
                            {
                                Local5 = Local6
                                Local4 = Local5
                                Local4++
                                While ((Local5 < 0x08))
                                {
                                    C249 [Local5] = DerefOf (C249 [Local4])
                                    Local5++
                                    Local4++
                                }

                                Local6 = 0x06
                            }

                            Local6++
                        }

                        Local1 = C288 ()
                        C20C [0x00] = 0x00
                        While ((Local2 < 0x64))
                        {
                            Local5 = 0x00
                            Local6 = 0x00
                            While ((Local6 < 0x07))
                            {
                                If ((DerefOf (C248 [Local2]) == DerefOf (C249 [Local5])))
                                {
                                    C20C [0x00] = 0x01
                                    Local6 = 0x06
                                }

                                Local5++
                                Local6++
                            }

                            Local5--
                            If ((DerefOf (C20C [0x00]) == 0x01))
                            {
                                Local4 = Local5
                                Local4--
                                While ((Local5 > Local3))
                                {
                                    C249 [Local5] = DerefOf (C249 [Local4])
                                    Local5--
                                    Local4--
                                }

                                C249 [Local3] = DerefOf (C248 [Local2])
                                Local3++
                            }

                            Local2++
                            C20C [0x00] = 0x00
                        }

                        \_SB.C07C = C249 /* \_SB_.C1FE.C249 */
                        Local7 = 0x00
                        C20B [0x00] = 0x00
                        Local7 = (0x2D + 0x0E)
                    }

                    If ((Local2 == 0x04))
                    {
                        If ((C289 (0x00) == 0x01))
                        {
                            \_SB.C07E = C242 /* \_SB_.C1FE.C242 */
                            \_SB.C07F = C243 /* \_SB_.C1FE.C243 */
                            Local7 = (0x2D + 0x0E)
                            Local7++
                            Local6 = 0x00
                            If ((DerefOf (C20B [0x00]) != 0x10))
                            {
                                C20B [0x00] = 0x00
                            }
                            Else
                            {
                                C20B [0x00] = 0x05
                            }
                        }
                        Else
                        {
                            Return (0x05)
                        }
                    }

                    If ((Local2 == 0x05))
                    {
                        If ((C289 (0x01) == 0x01))
                        {
                            \_SB.C081 = C244 /* \_SB_.C1FE.C244 */
                            \_SB.C082 = C245 /* \_SB_.C1FE.C245 */
                            If ((DerefOf (C20B [0x00]) != 0x10))
                            {
                                C20B [0x00] = 0x00
                            }
                            Else
                            {
                                C20B [0x00] = 0x05
                            }

                            \_SB.C07D = 0x01
                            Local7 = (0x2D + 0x0E)
                            Local7++
                            Local6 = 0x01
                        }
                        Else
                        {
                            Return (0x05)
                        }
                    }

                    If ((Local2 == 0x00))
                    {
                        \_SB.C06A = 0x01
                        Return (\_SB.C06A)
                    }

                    If ((DerefOf (C20B [0x00]) == 0x05))
                    {
                        \_SB.C06A = 0x05
                        Return (\_SB.C06A)
                    }

                    If ((Local2 != 0x00))
                    {
                        \_SB.C147 (0xEA7B, 0x01, Local7, Local6, 0x00)
                        If ((\_SB.C06A == 0x00))
                        {
                            C20D [0x00] = 0x00
                            Notify (\_SB.C1FE, 0xA0) // Device-Specific
                        }

                        If ((\_SB.C06A == 0x06))
                        {
                            C20D [0x00] = 0x01
                            Notify (\_SB.C1FE, 0xA0) // Device-Specific
                        }
                    }

                    Return (\_SB.C06A)
                }

                If ((Arg1 == 0x02))
                {
                    Name (C28A, Buffer (0x21){})
                    Name (C28B, Buffer (0x21){})
                    Name (C28C, Buffer (0x10)
                    {
                        /* 0000 */  0x01, 0x05, 0x00, 0x06, 0x09, 0x07, 0x08, 0x0A,  // ........
                        /* 0008 */  0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x97   // ........
                    })
                    Local0 = Arg2
                    Local1 = SizeOf (Local0)
                    Local2 = 0x00
                    Local4 = DerefOf (Local0 [Local2])
                    Local2++
                    Local2++
                    Local5 = 0x00
                    Local6 = 0x00
                    Local3 = 0x00
                    While ((Local3 != SizeOf (C28A)))
                    {
                        C28A [Local3] = 0x00
                        Local3++
                    }

                    Local3 = 0x00
                    While ((Local3 != SizeOf (C28B)))
                    {
                        C28B [Local3] = 0x00
                        Local3++
                    }

                    \_SB.C07E = C28B /* \_SB_.C1FE.WMBA.C28B */
                    Local5 = 0x00
                    Local6 = 0x00
                    While ((Local5 != Local4))
                    {
                        C28A [Local6] = DerefOf (Local0 [Local2])
                        Local2++
                        Local5++
                        Local6++
                        Local2++
                        Local5++
                    }

                    Local1 = 0x00
                    Local5 = 0x00
                    Local5 = C286 ()
                    If ((Local5 == 0x01))
                    {
                        Local5 = 0x00
                        If ((DerefOf (C250 [Local1]) != 0x00))
                        {
                            While ((DerefOf (C28A [Local1]) != 0x3E))
                            {
                                Local1++
                                If ((Local1 >= 0x20))
                                {
                                    \_SB.C06A = 0x05
                                    Return (\_SB.C06A)
                                }
                            }

                            Local1++
                            Local3 = Local1
                            While ((Local3 != 0x20))
                            {
                                If ((DerefOf (C28A [Local3]) == 0x20))
                                {
                                    Local1++
                                }
                                Else
                                {
                                    Local3 = 0x1F
                                }

                                Local3++
                            }

                            Local3 = (Local1 + 0x01)
                            While ((DerefOf (C28A [Local1]) != 0x00))
                            {
                                Local2 = DerefOf (C28A [Local1])
                                If ((Local2 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local2 >= 0x30) && (Local2 <= 0x39)))
                                {
                                    Local2 -= 0x30
                                }
                                Else
                                {
                                    Local2 -= 0x41
                                    Local2 += 0x0A
                                    If ((Local2 > 0x0F))
                                    {
                                        Local2 -= 0x20
                                    }
                                }

                                Local4 = DerefOf (C28A [Local3])
                                If ((Local4 == 0x20))
                                {
                                    C20B [0x00] = 0x10
                                }

                                If (((Local4 >= 0x30) && (Local4 <= 0x39)))
                                {
                                    Local4 -= 0x30
                                }
                                Else
                                {
                                    Local4 -= 0x41
                                    Local4 += 0x0A
                                    If ((Local4 > 0x0F))
                                    {
                                        Local4 -= 0x20
                                    }
                                }

                                Local4 |= (Local2 << 0x04)
                                Local4 &= 0x7F
                                C28B [Local5] = Local4
                                Local1++
                                Local1++
                                Local3++
                                Local3++
                                Local5++
                            }
                        }
                    }

                    If ((DerefOf (C20B [0x00]) == 0x10))
                    {
                        Return (0x06)
                    }

                    \_SB.C07E = C28B /* \_SB_.C1FE.WMBA.C28B */
                    \_SB.C07C = C28C /* \_SB_.C1FE.WMBA.C28C */
                    \_SB.C147 (0xEA7C, 0x00, 0x00, 0x00, 0x00)
                    If ((\_SB.C06A == 0x00))
                    {
                        C20D [0x00] = 0x00
                        Notify (\_SB.C1FE, 0xA0) // Device-Specific
                    }

                    If ((\_SB.C06A == 0x06))
                    {
                        C20D [0x00] = 0x01
                        Notify (\_SB.C1FE, 0xA0) // Device-Specific
                    }

                    Return (\_SB.C06A)
                }
                Else
                {
                    \_SB.C06A = 0x05
                    Return (\_SB.C06A)
                }
            }

            Method (WQBC, 1, NotSerialized)
            {
                Local2 = 0x00
                Local4 = 0x00
                Local1 = 0x00
                Local5 = 0x00
                Local7 = 0x00
                Local6 = 0x00
                Local0 = 0x00
                Local2 = Arg0
                \_SB.C147 (0xEA7B, 0x00, Local2, 0x00, 0x00)
                C241 = \_SB.C06B
                CreateByteField (C241, Local2, C28D)
                C246 = \_SB.C06A
                CreateByteField (C246, 0x00, C216)
                If ((C216 == 0x80))
                {
                    DerefOf (C27B [Arg0]) [0x04] = 0x00
                    Return (DerefOf (C27B [Arg0]))
                }

                C251 = DerefOf (DerefOf (C27B [Arg0]) [0x01])
                Local6 = SizeOf (C251)
                Local3 = 0x00
                While ((Local3 != SizeOf (C24A)))
                {
                    C24A [Local3] = 0x00
                    Local3++
                }

                Local3 = 0x01
                C24A = DerefOf (DerefOf (C27B [Arg0]) [0x00])
                While ((Local4 != Local6))
                {
                    Local5 = DerefOf (C251 [Local4])
                    If ((DerefOf (C251 [Local4]) == 0x2C))
                    {
                        Local1++
                    }

                    If ((DerefOf (C251 [Local4]) == 0x2A))
                    {
                        C251 [Local4] = 0x20
                    }

                    Local4++
                }

                Local6 = C28D /* \_SB_.C1FE.WQBC.C28D */
                If ((Local1 == 0x01))
                {
                    If (C015 (C24A, "LAN/WLAN Switching", 0x12))
                    {
                        Local3 = 0x00
                        If ((Local6 & 0x01))
                        {
                            DerefOf (C27B [0x12]) [0x04] = 0x01
                            DerefOf (C27B [0x10]) [0x04] = 0x01
                            If (((Local6 & 0x10) >> 0x04))
                            {
                                DerefOf (C27B [0x10]) [0x01] = C25F /* \_SB_.C1FE.C25F */
                                DerefOf (C27B [0x10]) [0x0A] = C25D /* \_SB_.C1FE.C25D */
                            }
                            Else
                            {
                                DerefOf (C27B [0x10]) [0x01] = C260 /* \_SB_.C1FE.C260 */
                                DerefOf (C27B [0x10]) [0x0A] = C25E /* \_SB_.C1FE.C25E */
                            }
                        }
                        Else
                        {
                            DerefOf (C27B [0x10]) [0x04] = 0x00
                            DerefOf (C27B [0x12]) [0x04] = 0x00
                        }

                        If ((Local6 & 0x02))
                        {
                            DerefOf (C27B [0x11]) [0x04] = 0x01
                        }
                        Else
                        {
                            DerefOf (C27B [0x11]) [0x04] = 0x00
                        }

                        If ((Local6 & 0x04))
                        {
                            DerefOf (C27B [0x13]) [0x04] = 0x01
                        }
                        Else
                        {
                            DerefOf (C27B [0x13]) [0x04] = 0x00
                        }
                    }

                    If (C015 (C24A, "Embedded Bluetooth Device Radio", 0x1F))
                    {
                        Local3 = 0x00
                        If (DerefOf (DerefOf (C27B [0x11]) [0x04]))
                        {
                            If (Local6)
                            {
                                DerefOf (C27B [0x11]) [0x01] = C25F /* \_SB_.C1FE.C25F */
                                DerefOf (C27B [0x11]) [0x0A] = C25D /* \_SB_.C1FE.C25D */
                            }
                            Else
                            {
                                DerefOf (C27B [0x11]) [0x01] = C260 /* \_SB_.C1FE.C260 */
                                DerefOf (C27B [0x11]) [0x0A] = C25E /* \_SB_.C1FE.C25E */
                            }
                        }
                    }

                    If (C015 (C24A, "Embedded WLAN Device Radio", 0x15))
                    {
                        Local3 = 0x00
                        If (DerefOf (DerefOf (C27B [0x12]) [0x04]))
                        {
                            If (Local6)
                            {
                                DerefOf (C27B [0x12]) [0x01] = C25F /* \_SB_.C1FE.C25F */
                                DerefOf (C27B [0x12]) [0x0A] = C25D /* \_SB_.C1FE.C25D */
                            }
                            Else
                            {
                                DerefOf (C27B [0x12]) [0x01] = C260 /* \_SB_.C1FE.C260 */
                                DerefOf (C27B [0x12]) [0x0A] = C25E /* \_SB_.C1FE.C25E */
                            }
                        }
                    }

                    If (C015 (C24A, "Embedded WWAN Device Radio", 0x15))
                    {
                        Local3 = 0x00
                        If (DerefOf (DerefOf (C27B [0x13]) [0x04]))
                        {
                            If (Local6)
                            {
                                DerefOf (C27B [0x13]) [0x01] = C25F /* \_SB_.C1FE.C25F */
                                DerefOf (C27B [0x13]) [0x0A] = C25D /* \_SB_.C1FE.C25D */
                            }
                            Else
                            {
                                DerefOf (C27B [0x13]) [0x01] = C260 /* \_SB_.C1FE.C260 */
                                DerefOf (C27B [0x13]) [0x0A] = C25E /* \_SB_.C1FE.C25E */
                            }
                        }
                    }

                    If (\C015 (C24A, "Internal Network Adapter Boot Mode", 0x22))
                    {
                        Local3 = 0x00
                        \_SB.C147 (0xEA7B, 0x00, 0x00, 0x00, 0x00)
                        C235 = \_SB.C06A
                        CreateByteField (C235, 0x00, C28F)
                        If ((C28F == 0x00))
                        {
                            C276 = C264 /* \_SB_.C1FE.C264 */
                            DerefOf (C27B [Arg0]) [0x0D] = C276 /* \_SB_.C1FE.C276 */
                            If (Local6)
                            {
                                DerefOf (C27B [Arg0]) [0x01] = C262 /* \_SB_.C1FE.C262 */
                                DerefOf (C27B [Arg0]) [0x0A] = C264 /* \_SB_.C1FE.C264 */
                            }
                            Else
                            {
                                DerefOf (C27B [Arg0]) [0x01] = C261 /* \_SB_.C1FE.C261 */
                                DerefOf (C27B [Arg0]) [0x0A] = C263 /* \_SB_.C1FE.C263 */
                            }
                        }
                        Else
                        {
                            DerefOf (C27B [Arg0]) [0x01] = C265 /* \_SB_.C1FE.C265 */
                            DerefOf (C27B [Arg0]) [0x0A] = C263 /* \_SB_.C1FE.C263 */
                        }
                    }

                    If (\C015 (C24A, "Embedded Security Device Availability", 0x25))
                    {
                        Local3 = 0x00
                        If (Local6)
                        {
                            DerefOf (C27B [Arg0]) [0x01] = C267 /* \_SB_.C1FE.C267 */
                            DerefOf (C27B [Arg0]) [0x0A] = C268 /* \_SB_.C1FE.C268 */
                        }
                        Else
                        {
                            DerefOf (C27B [Arg0]) [0x01] = C266 /* \_SB_.C1FE.C266 */
                            DerefOf (C27B [Arg0]) [0x0A] = C269 /* \_SB_.C1FE.C269 */
                        }
                    }

                    If (\C015 (C24A, "HDD Translation Mode", 0x14))
                    {
                        Local3 = 0x00
                        If (Local6)
                        {
                            DerefOf (C27B [Arg0]) [0x01] = C273 /* \_SB_.C1FE.C273 */
                            DerefOf (C27B [Arg0]) [0x0A] = C271 /* \_SB_.C1FE.C271 */
                        }
                        Else
                        {
                            DerefOf (C27B [Arg0]) [0x01] = C272 /* \_SB_.C1FE.C272 */
                            DerefOf (C27B [Arg0]) [0x0A] = C270 /* \_SB_.C1FE.C270 */
                        }
                    }

                    If (Local3)
                    {
                        If (Local6)
                        {
                            DerefOf (C27B [Arg0]) [0x01] = C25F /* \_SB_.C1FE.C25F */
                            DerefOf (C27B [Arg0]) [0x0A] = C25D /* \_SB_.C1FE.C25D */
                        }
                        Else
                        {
                            DerefOf (C27B [Arg0]) [0x01] = C260 /* \_SB_.C1FE.C260 */
                            DerefOf (C27B [Arg0]) [0x0A] = C25E /* \_SB_.C1FE.C25E */
                        }
                    }
                }
                Else
                {
                    C257 = DerefOf (DerefOf (C27B [Arg0]) [0x00])
                    If (\C015 (C257, "Parallel Port Mode", SizeOf (C257)))
                    {
                        If ((Local6 != 0xFF))
                        {
                            C250 = DerefOf (C284 [Local6])
                            C277 = C250 /* \_SB_.C1FE.C250 */
                        }
                        Else
                        {
                            C250 = DerefOf (C284 [0x00])
                            C277 = C250 /* \_SB_.C1FE.C250 */
                        }

                        DerefOf (C27B [Arg0]) [0x0A] = C277 /* \_SB_.C1FE.C277 */
                    }

                    If (\C015 (C257, "F9, F10 and F12 Delay(Sec)", 0x19))
                    {
                        If ((Local6 != 0xFF))
                        {
                            If ((Local6 > 0x07))
                            {
                                Local6 >>= 0x05
                            }

                            C250 = DerefOf (C282 [Local6])
                            C277 = C250 /* \_SB_.C1FE.C250 */
                        }
                        Else
                        {
                            C250 = DerefOf (C282 [0x00])
                            C277 = C250 /* \_SB_.C1FE.C250 */
                        }

                        DerefOf (C27B [Arg0]) [0x0A] = C277 /* \_SB_.C1FE.C277 */
                    }

                    If (\C015 (C257, "Express Boot Popup Delay(Sec)", SizeOf (C257)))
                    {
                        If ((Local6 != 0xFF))
                        {
                            If ((Local6 > 0x07))
                            {
                                Local6 >>= 0x05
                            }

                            C250 = DerefOf (C283 [Local6])
                            C277 = C250 /* \_SB_.C1FE.C250 */
                        }
                        Else
                        {
                            C250 = DerefOf (C283 [0x00])
                            C277 = C250 /* \_SB_.C1FE.C250 */
                        }

                        DerefOf (C27B [Arg0]) [0x0A] = C277 /* \_SB_.C1FE.C277 */
                    }

                    If (\C015 (C24A, "Embedded Security Activation Policy", 0x23))
                    {
                        Local3 = 0x00
                        If ((Local6 == 0x00))
                        {
                            DerefOf (C27B [Arg0]) [0x01] = C26A /* \_SB_.C1FE.C26A */
                            DerefOf (C27B [Arg0]) [0x0A] = C26D /* \_SB_.C1FE.C26D */
                        }

                        If ((Local6 == 0x01))
                        {
                            DerefOf (C27B [Arg0]) [0x01] = C26B /* \_SB_.C1FE.C26B */
                            DerefOf (C27B [Arg0]) [0x0A] = C26E /* \_SB_.C1FE.C26E */
                        }

                        If ((Local6 == 0x02))
                        {
                            DerefOf (C27B [Arg0]) [0x01] = C26C /* \_SB_.C1FE.C26C */
                            DerefOf (C27B [Arg0]) [0x0A] = C26F /* \_SB_.C1FE.C26F */
                        }
                    }

                    Local1--
                    Local4 = 0x00
                    If ((Local6 == 0x00))
                    {
                        C251 [0x00] = 0x2A
                        Local0 = C251 /* \_SB_.C1FE.C251 */
                    }
                    Else
                    {
                        While ((Local4 != SizeOf (C251)))
                        {
                            If ((DerefOf (C251 [Local4]) == 0x2C))
                            {
                                Local7++
                                If ((Local7 == Local6))
                                {
                                    Local4++
                                    C251 [Local4] = 0x2A
                                }
                            }

                            Local4++
                        }
                    }

                    C277 = C251 /* \_SB_.C1FE.C251 */
                    DerefOf (C27B [Arg0]) [0x01] = C277 /* \_SB_.C1FE.C277 */
                }

                Local4 = 0x00
                Return (DerefOf (C27B [Arg0]))
            }

            Method (WQBD, 1, NotSerialized)
            {
                Local2 = 0x00
                Local4 = 0x00
                Local1 = 0x00
                Local5 = 0x00
                Local7 = 0x00
                Local6 = 0x00
                Local0 = 0x00
                Local2 = (Arg0 + 0x2D)
                \_SB.C147 (0xEA7B, 0x00, Local2, 0x00, 0x00)
                If ((Arg0 == 0x00))
                {
                    C246 = \_SB.C06D
                    CreateField (C246, 0x00, 0x88, C290)
                }

                If ((Arg0 == 0x01))
                {
                    C246 = \_SB.C06E
                    CreateField (C246, 0x00, 0x0280, C291)
                }

                If ((Arg0 == 0x02))
                {
                    C246 = \_SB.C06F
                    CreateField (C246, 0x00, 0x0280, C292)
                }

                If ((Arg0 == 0x03))
                {
                    C246 = \_SB.C070
                    CreateField (C246, 0x00, 0x0280, C293)
                }

                If ((Arg0 == 0x04))
                {
                    C246 = \_SB.C071
                    CreateField (C246, 0x00, 0x0280, C294)
                }

                If ((Arg0 == 0x05))
                {
                    C246 = \_SB.C072
                    CreateWordField (C246, 0x00, C295)
                }

                If ((Arg0 == 0x06))
                {
                    C246 = \_SB.C073
                }

                If ((Arg0 == 0x07))
                {
                    C246 = \_SB.C074
                }

                If ((Arg0 == 0x08))
                {
                    C246 = \_SB.C075
                }

                If ((Arg0 == 0x09))
                {
                    C246 = \_SB.C076
                    CreateField (C246, 0x00, 0x0280, C296)
                }

                If ((Arg0 == 0x0A))
                {
                    C246 = \_SB.C077
                    CreateField (C246, 0x00, 0x0280, C297)
                }

                If ((Arg0 == 0x0B))
                {
                    C246 = \_SB.C078
                    CreateField (C246, 0x00, 0x0280, C298)
                }

                If ((Arg0 == 0x0C))
                {
                    C246 = \_SB.C079
                    CreateField (C246, 0x00, 0x0280, C299)
                }

                If ((Arg0 == 0x0D))
                {
                    C246 = \_SB.C07A
                    CreateField (C246, 0x00, 0x0280, C29A)
                }

                If ((Arg0 == 0x00))
                {
                    C277 = C290 /* \_SB_.C1FE.WQBD.C290 */
                }

                If ((Arg0 == 0x01))
                {
                    Local3 = DerefOf (C246 [0x04])
                    If ((Local3 == 0x00))
                    {
                        C246 [0x04] = 0x20
                    }

                    C277 = C246 /* \_SB_.C1FE.C246 */
                    Local5 = 0x00
                    C277 = C291 /* \_SB_.C1FE.WQBD.C291 */
                }

                If ((Arg0 == 0x02))
                {
                    C277 = C292 /* \_SB_.C1FE.WQBD.C292 */
                }

                If ((Arg0 == 0x03))
                {
                    C277 = C293 /* \_SB_.C1FE.WQBD.C293 */
                }

                If ((Arg0 == 0x04))
                {
                    C277 = C294 /* \_SB_.C1FE.WQBD.C294 */
                }

                If ((Arg0 == 0x05))
                {
                    ToBCD (C295, Local0)
                    Local1 = \C00C (Local0, 0x04)
                    Concatenate (Local1, " MHz", Local2)
                    C277 = Local2
                }

                If ((Arg0 == 0x06))
                {
                    CreateWordField (C246, 0x00, C29B)
                    ToBCD (C29B, Local1)
                    If ((Local1 >= 0x0A))
                    {
                        Local2 = \C00C (Local1, 0x02)
                    }
                    Else
                    {
                        Local2 = \C00C (Local1, 0x01)
                    }

                    C277 = Local2
                }

                If ((Arg0 == 0x07))
                {
                    CreateWordField (C246, 0x00, C29C)
                    CreateWordField (C246, 0x02, C29D)
                    ToBCD (C29C, Local1)
                    ToBCD (C29D, Local2)
                    Local4 = \C00C (Local1, 0x02)
                    Local5 = \C00C (Local2, 0x04)
                    Concatenate (Local4, "/", Local6)
                    Concatenate (Local6, Local5, Local7)
                    Concatenate (Local7, " KB", Local3)
                    C277 = Local3
                }

                If ((Arg0 == 0x08))
                {
                    CreateWordField (C246, 0x00, C29E)
                    ToBCD (C29E, Local1)
                    Local2 = \C00C (Local1, 0x04)
                    If ((C29E >= 0x0400))
                    {
                        Local2 = \C00C (Local1, 0x04)
                    }
                    Else
                    {
                        Local2 = \C00C (Local1, 0x03)
                    }

                    Concatenate (Local2, " MB", Local3)
                    C277 = Local3
                }

                If ((Arg0 == 0x09))
                {
                    C277 = C296 /* \_SB_.C1FE.WQBD.C296 */
                }

                If ((Arg0 == 0x0A))
                {
                    C277 = C297 /* \_SB_.C1FE.WQBD.C297 */
                }

                If ((Arg0 == 0x0B))
                {
                    C277 = C298 /* \_SB_.C1FE.WQBD.C298 */
                }

                If ((Arg0 == 0x0C))
                {
                    C277 = C299 /* \_SB_.C1FE.WQBD.C299 */
                }

                If ((Arg0 == 0x0D))
                {
                    C277 = C29A /* \_SB_.C1FE.WQBD.C29A */
                }

                DerefOf (C281 [Arg0]) [0x01] = C277 /* \_SB_.C1FE.C277 */
                Return (DerefOf (C281 [Arg0]))
            }

            Method (WQBE, 1, NotSerialized)
            {
                Local1 = 0x00
                Local2 = 0x00
                Local4 = 0x00
                Local5 = 0x00
                Local6 = 0x00
                Local7 = 0x00
                Local2 = (0x2D + 0x0E)
                \_SB.C147 (0xEA7B, 0x00, Local2, 0x00, 0x00)
                C07C = \_SB.C07C
                CreateField (C07C, 0x00, 0x80, C29F)
                While ((Local1 != 0x0F))
                {
                    Local4 = DerefOf (C07C [Local1])
                    If ((Local4 != 0x0F))
                    {
                        If ((Local4 != 0x05))
                        {
                            Local5 = 0x00
                            While ((Local5 != 0x07))
                            {
                                Local7 = DerefOf (DerefOf (C27E [Local5]) [0x00])
                                If ((Local4 == Local7))
                                {
                                    C252 = DerefOf (DerefOf (C27E [Local5]) [0x01])
                                    C277 = C252 /* \_SB_.C1FE.C252 */
                                    C280 [Local6] = C277 /* \_SB_.C1FE.C277 */
                                    Local6++
                                    Local5 = 0x06
                                }

                                Local5++
                            }
                        }
                    }

                    Local1++
                }

                Local0 = 0x00
                Local5 = 0x00
                Local4 = 0x00
                Local0 = 0x0B
                While ((Local5 != 0x07))
                {
                    C252 = DerefOf (C280 [Local5])
                    C277 = C252 /* \_SB_.C1FE.C252 */
                    DerefOf (C27C [0x00]) [Local0] = C277 /* \_SB_.C1FE.C277 */
                    Local5++
                    Local0++
                }

                Local1 = 0x00
                Local2 = 0x00
                While ((Local2 != 0x07))
                {
                    C252 = DerefOf (C280 [Local2])
                    Local5 = 0x00
                    While ((DerefOf (C252 [Local5]) != 0x00))
                    {
                        Local3 = DerefOf (C252 [Local5])
                        C254 [Local1] = Local3
                        Local5++
                        Local1++
                    }

                    C254 [Local1] = 0x2C
                    Local1++
                    Local2++
                }

                Local2 = 0x00
                While ((Local2 != 0x09))
                {
                    C254 [Local1] = 0x20
                    Local1++
                    C254 [Local1] = 0x2C
                    Local1++
                    Local2++
                }

                C279 = C254 /* \_SB_.C1FE.C254 */
                DerefOf (C27C [0x00]) [0x01] = C279 /* \_SB_.C1FE.C279 */
                Return (DerefOf (C27C [Arg0]))
            }

            Method (C286, 0, NotSerialized)
            {
                Local6 = 0x00
                Local1 = 0x00
                Local2 = 0x00
                Local1 = (0x2D + 0x0E)
                Local1++
                \_SB.C147 (0xEA7B, 0x00, Local1, Local6, 0x00)
                C246 = \_SB.C083
                CreateWordField (C246, 0x00, C2A0)
                C247 = \_SB.C084
                CreateWordField (C247, 0x00, C2A1)
                If ((C2A0 != 0xFFFF))
                {
                    If ((C2A0 & 0x20))
                    {
                        Local2 = 0x01
                    }
                    Else
                    {
                        Local2 = 0x00
                    }
                }

                Return (Local2)
            }

            Method (C287, 0, NotSerialized)
            {
                Local6 = 0x00
                Local1 = 0x00
                Local2 = 0x00
                Local1 = (0x2D + 0x0E)
                Local1++
                \_SB.C147 (0xEA7B, 0x00, Local1, Local6, 0x00)
                C246 = \_SB.C083
                CreateWordField (C246, 0x00, C2A0)
                C247 = \_SB.C084
                CreateWordField (C247, 0x00, C2A1)
                If ((C2A0 != 0xFFFF))
                {
                    If ((C2A0 & 0x10))
                    {
                        Local2 = 0x01
                    }
                    Else
                    {
                        Local2 = 0x00
                    }
                }

                Return (Local2)
            }

            Method (C289, 1, NotSerialized)
            {
                Local1 = 0x00
                Local2 = 0x00
                If ((Arg0 == 0x00))
                {
                    While ((DerefOf (C242 [Local1]) != 0x00))
                    {
                        Local1++
                    }

                    While ((DerefOf (C243 [Local2]) != 0x00))
                    {
                        Local2++
                    }

                    If (((Local1 > 0x20) || (Local2 > 0x20)))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x01)
                    }
                }

                If ((Arg0 == 0x01))
                {
                    While ((DerefOf (C244 [Local1]) != 0x00))
                    {
                        Local1++
                    }

                    While ((DerefOf (C245 [Local2]) != 0x00))
                    {
                        Local2++
                    }

                    If (((Local1 > 0x20) || (Local2 > 0x20)))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x01)
                    }
                }

                Return (0x00)
            }

            Method (C288, 0, NotSerialized)
            {
                Local1 = 0x00
                Local4 = 0x00
                Local5 = 0x00
                Local6 = 0x00
                Local7 = 0x64
                Local2 = SizeOf (C27A)
                Local2--
                While ((Local4 != Local2))
                {
                    Local1 = 0x00
                    While ((Local1 != SizeOf (C257)))
                    {
                        C257 [Local1] = 0x00
                        Local1++
                    }

                    Local1 = 0x00
                    While ((Local1 != 0x14))
                    {
                        C257 [Local1] = DerefOf (C27A [Local4])
                        If (((DerefOf (C27A [Local4]) == 0x2C) || (DerefOf (
                            C27A [Local4]) == 0x00)))
                        {
                            Local1 = 0x13
                        }

                        Local1++
                        Local4++
                    }

                    If ((DerefOf (C27A [Local4]) != 0x00))
                    {
                        Local3 = C2A2 ()
                        If ((Local3 != 0xFF))
                        {
                            C248 [Local6] = Local3
                        }

                        Local6++
                    }
                    Else
                    {
                        Local4 = Local2
                    }
                }

                Return (Local7)
            }

            Method (C2A2, 0, NotSerialized)
            {
                Local3 = 0xFF
                If ((\C015 (C257, "Optical Disk Drive", 0x11) || \C015 (C257, " Optical Disk Drive", SizeOf (C24B))))
                {
                    Local3 = 0x01
                }

                If ((\C015 (C257, "Hard Drive(C:)", 0x0E) || \C015 (C257, " Hard Drive(C:)", 0x0E)))
                {
                    Local3 = 0x00
                }

                If ((\C015 (C257, "USB Floppy", 0x0A) || \C015 (C257, " USB Floppy", SizeOf (C24B))))
                {
                    Local3 = 0x06
                }

                If ((\C015 (C257, "USB SuperDisk", 0x0D) || \C015 (C257, " USB SuperDisk", SizeOf (C24B))))
                {
                    Local3 = 0x09
                }

                If ((\C015 (C257, "USB CD-ROM", 0x0A) || \C015 (C257, " USB CD-ROM", SizeOf (C24B))))
                {
                    Local3 = 0x07
                    C20C [0x00] = 0x01
                }

                If ((\C015 (C257, "USB Hard Disk", 0x0D) || \C015 (C257, " USB Hard Disk", SizeOf (C24B))))
                {
                    Local3 = 0x08
                }

                If ((\C015 (C257, "Network Controller", 0x12) || \C015 (C257, " Network Controller ", SizeOf (C24B))))
                {
                    Local3 = 0x0A
                }

                Return (Local3)
            }

            Method (WQBF, 1, NotSerialized)
            {
                Local6 = 0x00
                Local1 = 0x00
                Local1 = (0x2D + 0x0E)
                Local1++
                \_SB.C147 (0xEA7B, 0x00, Local1, Local6, 0x00)
                C246 = \_SB.C083
                CreateWordField (C246, 0x00, C2A0)
                C247 = \_SB.C084
                CreateWordField (C247, 0x00, C2A1)
                If ((C2A0 != 0xFFFF))
                {
                    If ((C2A0 & 0x20))
                    {
                        DerefOf (C27D [0x00]) [0x0E] = 0x01
                    }
                    Else
                    {
                        DerefOf (C27D [0x00]) [0x0E] = 0x00
                    }

                    If ((C2A0 & 0x10))
                    {
                        DerefOf (C27D [0x01]) [0x0E] = 0x01
                    }
                    Else
                    {
                        DerefOf (C27D [0x01]) [0x0E] = 0x00
                    }
                }

                Return (DerefOf (C27D [Arg0]))
            }

            Method (C2A3, 0, NotSerialized)
            {
            }

            Method (WQBH, 0, NotSerialized)
            {
            }

            Method (WQBI, 0, NotSerialized)
            {
            }

            Name (WQAB, Buffer (0x1BA1)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x91, 0x1B, 0x00, 0x00, 0x0A, 0xB2, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x25, 0x95, 0x00, 0x01, 0x06, 0x18, 0x42,  // .%.....B
                /* 0020 */  0x10, 0x47, 0x10, 0x92, 0x46, 0x62, 0x02, 0x89,  // .G..Fb..
                /* 0028 */  0x80, 0x90, 0x18, 0x18, 0x14, 0x81, 0x85, 0x00,  // ........
                /* 0030 */  0x49, 0x02, 0x88, 0xC4, 0x41, 0xE1, 0x20, 0xD4,  // I...A. .
                /* 0038 */  0x9F, 0x40, 0x7E, 0x05, 0x20, 0x74, 0x28, 0x40,  // .@~. t(@
                /* 0040 */  0xA6, 0x00, 0x83, 0x02, 0x9C, 0x22, 0x88, 0xA0,  // ....."..
                /* 0048 */  0x57, 0x01, 0x36, 0x05, 0x98, 0x14, 0x60, 0x51,  // W.6...`Q
                /* 0050 */  0x80, 0x76, 0x01, 0x96, 0x05, 0xE8, 0x16, 0x20,  // .v..... 
                /* 0058 */  0x1D, 0x96, 0x88, 0x04, 0x47, 0x89, 0x01, 0x47,  // ....G..G
                /* 0060 */  0xE9, 0xC4, 0x16, 0x6E, 0xD8, 0xE0, 0x85, 0xA2,  // ...n....
                /* 0068 */  0x68, 0x06, 0x51, 0x12, 0x94, 0x8B, 0x20, 0x5D,  // h.Q... ]
                /* 0070 */  0x10, 0x52, 0x2E, 0xC0, 0x37, 0x82, 0x06, 0x10,  // .R..7...
                /* 0078 */  0xA5, 0x77, 0x01, 0xB6, 0x05, 0x98, 0x86, 0x27,  // .w.....'
                /* 0080 */  0xD2, 0x20, 0xE4, 0x60, 0x08, 0x54, 0xCE, 0x80,  // . .`.T..
                /* 0088 */  0x20, 0x69, 0x44, 0x21, 0x1E, 0xA7, 0x44, 0x08,  //  iD!..D.
                /* 0090 */  0x0A, 0x84, 0x90, 0xD4, 0xF1, 0xA0, 0xA0, 0x71,  // .......q
                /* 0098 */  0x88, 0xAD, 0xCE, 0x46, 0x93, 0xA9, 0x74, 0x7E,  // ...F..t~
                /* 00A0 */  0x48, 0x82, 0x70, 0xC6, 0x2A, 0x7E, 0x3A, 0x9A,  // H.p.*~:.
                /* 00A8 */  0xD0, 0xD9, 0x9C, 0x60, 0xE7, 0x18, 0x72, 0x3C,  // ...`..r<
                /* 00B0 */  0x48, 0xF4, 0x20, 0xB8, 0x00, 0x0F, 0x1C, 0x2C,  // H. ....,
                /* 00B8 */  0x34, 0x84, 0x22, 0x6B, 0x80, 0xC1, 0x8C, 0xDD,  // 4."k....
                /* 00C0 */  0x63, 0xB1, 0x0B, 0x4E, 0x0A, 0xEC, 0x61, 0xB3,  // c..N..a.
                /* 00C8 */  0x01, 0x19, 0xA2, 0x24, 0x38, 0xD4, 0x11, 0xC0,  // ...$8...
                /* 00D0 */  0x12, 0x05, 0x98, 0x1F, 0x87, 0x0C, 0x0F, 0x95,  // ........
                /* 00D8 */  0x8C, 0x25, 0x24, 0x1B, 0xAB, 0x87, 0xC2, 0xA5,  // .%$.....
                /* 00E0 */  0x40, 0x68, 0x6C, 0x27, 0xED, 0x19, 0x45, 0x2C,  // @hl'..E,
                /* 00E8 */  0x79, 0x4A, 0x82, 0x49, 0xE0, 0x51, 0x44, 0x36,  // yJ.I.QD6
                /* 00F0 */  0x1A, 0x27, 0x28, 0x1B, 0x1A, 0x25, 0x03, 0x42,  // .'(..%.B
                /* 00F8 */  0x9E, 0x05, 0x58, 0x07, 0x26, 0x04, 0x76, 0x2F,  // ..X.&.v/
                /* 0100 */  0xC0, 0x9A, 0x00, 0x73, 0xB3, 0x90, 0xB1, 0xB9,  // ...s....
                /* 0108 */  0xE8, 0xFF, 0x0F, 0x71, 0xB0, 0x31, 0xDA, 0x9A,  // ...q.1..
                /* 0110 */  0xAE, 0x90, 0xC2, 0xC4, 0x88, 0x12, 0x2C, 0x5E,  // ......,^
                /* 0118 */  0xC5, 0xC3, 0x10, 0xCA, 0x93, 0x42, 0xA8, 0x48,  // .....B.H
                /* 0120 */  0x95, 0xA1, 0x68, 0xB4, 0x51, 0x2A, 0x14, 0xE0,  // ..h.Q*..
                /* 0128 */  0x4C, 0x80, 0x30, 0x5C, 0x1D, 0x03, 0x82, 0x46,  // L.0\...F
                /* 0130 */  0x88, 0x15, 0x29, 0x56, 0xFB, 0x83, 0x20, 0xF1,  // ..)V.. .
                /* 0138 */  0x2D, 0x40, 0x54, 0x01, 0xA2, 0x48, 0xA3, 0x41,  // -@T..H.A
                /* 0140 */  0x9D, 0x03, 0x3C, 0x5C, 0x0F, 0xF5, 0xF0, 0x3D,  // ..<\...=
                /* 0148 */  0xF6, 0x93, 0x0C, 0x72, 0x90, 0x67, 0xF1, 0xA8,  // ...r.g..
                /* 0150 */  0x70, 0x9C, 0x06, 0x49, 0xE0, 0x0B, 0x80, 0x4F,  // p..I...O
                /* 0158 */  0x08, 0x1E, 0x38, 0xDE, 0x35, 0xA0, 0x66, 0x7C,  // ..8.5.f|
                /* 0160 */  0xBC, 0x4C, 0x10, 0x1C, 0x6A, 0x88, 0x1E, 0x68,  // .L..j..h
                /* 0168 */  0xB8, 0x13, 0x38, 0x44, 0x06, 0xE8, 0x49, 0x3D,  // ..8D..I=
                /* 0170 */  0x52, 0x60, 0x07, 0x77, 0x32, 0xEF, 0x01, 0xAF,  // R`.w2...
                /* 0178 */  0x0A, 0xCD, 0x5E, 0x12, 0x08, 0xC1, 0xF1, 0xF8,  // ..^.....
                /* 0180 */  0x7E, 0xC0, 0x26, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  // ~.&.....
                /* 0188 */  0x1A, 0x99, 0xA1, 0x3D, 0xCA, 0xD3, 0x8A, 0x19,  // ...=....
                /* 0190 */  0xF2, 0x31, 0xC1, 0x04, 0x16, 0x0B, 0x21, 0x05,  // .1....!.
                /* 0198 */  0x10, 0x1A, 0x0F, 0xF8, 0x6F, 0x00, 0x8F, 0x17,  // ....o...
                /* 01A0 */  0xBE, 0x12, 0xC4, 0xF6, 0x80, 0x12, 0x0C, 0x0B,  // ........
                /* 01A8 */  0x21, 0x23, 0xAB, 0xF0, 0x78, 0xE8, 0x28, 0x7C,  // !#..x.(|
                /* 01B0 */  0x95, 0x38, 0x9C, 0xD3, 0x8A, 0x67, 0x82, 0xE1,  // .8...g..
                /* 01B8 */  0x20, 0xF4, 0x05, 0x90, 0x00, 0x51, 0xE7, 0x0C,  //  ....Q..
                /* 01C0 */  0xD4, 0x61, 0xC1, 0xE7, 0x04, 0x76, 0x33, 0x38,  // .a...v38
                /* 01C8 */  0x83, 0x47, 0x00, 0x8F, 0xE4, 0x84, 0xFC, 0x2B,  // .G.....+
                /* 01D0 */  0xF1, 0xC0, 0xE0, 0x03, 0xE2, 0xEF, 0x1F, 0xA7,  // ........
                /* 01D8 */  0xEC, 0x11, 0x9C, 0xA9, 0x01, 0x7D, 0x1C, 0xF0,  // .....}..
                /* 01E0 */  0xFF, 0x7F, 0x28, 0x7C, 0x88, 0x1E, 0xDF, 0x29,  // ..(|...)
                /* 01E8 */  0x1F, 0xAF, 0x4F, 0x17, 0x96, 0x35, 0x4E, 0xE8,  // ..O..5N.
                /* 01F0 */  0x77, 0x08, 0x9F, 0x38, 0x7C, 0x64, 0x71, 0x44,  // w..8|dqD
                /* 01F8 */  0x08, 0x39, 0x39, 0x05, 0xA0, 0x81, 0x4F, 0xF7,  // .99...O.
                /* 0200 */  0xEC, 0x22, 0x9C, 0xAE, 0x27, 0xE5, 0x40, 0xC3,  // ."..'.@.
                /* 0208 */  0xA0, 0xE3, 0x04, 0xC7, 0x79, 0x00, 0x1C, 0xE3,  // ....y...
                /* 0210 */  0x84, 0x7F, 0x2E, 0x80, 0x3F, 0x40, 0x7E, 0xCA,  // ....?@~.
                /* 0218 */  0x78, 0xC5, 0x48, 0xE0, 0x98, 0x23, 0x44, 0x9F,  // x.H..#D.
                /* 0220 */  0x6B, 0x3C, 0x42, 0x2C, 0xFC, 0x53, 0x45, 0xE1,  // k<B,.SE.
                /* 0228 */  0x03, 0x21, 0x63, 0x04, 0x17, 0xA0, 0xC7, 0x08,  // .!c.....
                /* 0230 */  0x7C, 0x03, 0x8E, 0x11, 0x7D, 0x94, 0xE0, 0xEA,  // |...}...
                /* 0238 */  0x0F, 0x1A, 0x74, 0x80, 0xB8, 0xFF, 0xFF, 0x00,  // ..t.....
                /* 0240 */  0xE1, 0x83, 0x7A, 0x80, 0xC0, 0x37, 0xFA, 0xD1,  // ..z..7..
                /* 0248 */  0x03, 0x3D, 0x2E, 0x8B, 0x3E, 0x0F, 0xC8, 0xF8,  // .=..>...
                /* 0250 */  0x89, 0x46, 0xF3, 0xE2, 0xA7, 0x03, 0x7E, 0xF8,  // .F....~.
                /* 0258 */  0x00, 0x0F, 0xA8, 0x87, 0x84, 0x03, 0xC5, 0x4C,  // .......L
                /* 0260 */  0x9B, 0x83, 0x3E, 0xBB, 0x1C, 0x3A, 0x76, 0xB8,  // ..>..:v.
                /* 0268 */  0xE0, 0x3F, 0x81, 0x80, 0x4B, 0xDE, 0x21, 0x0C,  // .?..K.!.
                /* 0270 */  0x14, 0x23, 0xC6, 0x9F, 0x83, 0x7C, 0x0A, 0x03,  // .#...|..
                /* 0278 */  0xFF, 0xFF, 0xFF, 0x14, 0x06, 0xFE, 0xE1, 0xF0,  // ........
                /* 0280 */  0x20, 0x4F, 0x07, 0x9F, 0xB6, 0xA8, 0x74, 0x18,  //  O....t.
                /* 0288 */  0xD4, 0x81, 0x0B, 0xB0, 0x32, 0x89, 0x08, 0xCF,  // ....2...
                /* 0290 */  0x12, 0xB5, 0x41, 0xE8, 0xD4, 0xF0, 0x36, 0xF1,  // ..A...6.
                /* 0298 */  0xB6, 0xE5, 0x5B, 0x40, 0x9C, 0xD3, 0xEC, 0xED,  // ..[@....
                /* 02A0 */  0xC0, 0x45, 0x30, 0x22, 0xD4, 0x0C, 0x45, 0x4E,  // .E0"..EN
                /* 02A8 */  0x5A, 0x11, 0x63, 0x44, 0x79, 0xDC, 0x32, 0xCA,  // Z.cDy.2.
                /* 02B0 */  0xDB, 0xD6, 0x0B, 0x40, 0xBC, 0x13, 0x7B, 0xDE,  // ...@..{.
                /* 02B8 */  0x32, 0x46, 0xF0, 0xC8, 0x0F, 0x5C, 0x2C, 0xC6,  // 2F...\,.
                /* 02C0 */  0xEA, 0xF5, 0x5F, 0xF3, 0x81, 0x0B, 0x70, 0xF6,  // .._...p.
                /* 02C8 */  0xFF, 0x3F, 0x70, 0x01, 0x1C, 0x0A, 0x7A, 0x18,  // .?p...z.
                /* 02D0 */  0x42, 0x0F, 0xC3, 0x53, 0x39, 0x97, 0x87, 0xC8,  // B..S9...
                /* 02D8 */  0x53, 0x89, 0x18, 0x35, 0x4C, 0xD4, 0x67, 0x28,  // S..5L.g(
                /* 02E0 */  0xDF, 0x2D, 0x7C, 0x20, 0x02, 0xDF, 0x99, 0x0B,  // .-| ....
                /* 02E8 */  0xF8, 0xFD, 0xFF, 0x0F, 0x44, 0x70, 0x8E, 0x29,  // ....Dp.)
                /* 02F0 */  0xB8, 0x33, 0x0D, 0x78, 0x7C, 0xCE, 0x40, 0x20,  // .3.x|.@ 
                /* 02F8 */  0xA7, 0xE2, 0x43, 0x0D, 0x60, 0x41, 0xF4, 0x13,  // ..C.`A..
                /* 0300 */  0xC2, 0x27, 0x1A, 0x2A, 0x13, 0x06, 0x75, 0xA8,  // .'.*..u.
                /* 0308 */  0x01, 0xAC, 0x5C, 0x61, 0x9E, 0x46, 0xCF, 0xF9,  // ..\a.F..
                /* 0310 */  0x59, 0xC6, 0xA7, 0x1A, 0x1F, 0x4A, 0x8D, 0x63,  // Y....J.c
                /* 0318 */  0x88, 0x97, 0x99, 0x87, 0x1A, 0x1F, 0x0B, 0x5E,  // .......^
                /* 0320 */  0x49, 0x7D, 0xA8, 0x31, 0x54, 0x9C, 0x87, 0x1A,  // I}.1T...
                /* 0328 */  0x0F, 0x37, 0x50, 0xD4, 0x37, 0x9B, 0x67, 0x1B,  // .7P.7.g.
                /* 0330 */  0xA3, 0xC7, 0xF7, 0x0D, 0xD5, 0x10, 0x0F, 0x35,  // .......5
                /* 0338 */  0x4C, 0xF2, 0x4A, 0x35, 0x16, 0x1F, 0x6A, 0xC0,  // L.J5..j.
                /* 0340 */  0xF1, 0xFF, 0x3F, 0xD4, 0x00, 0xFC, 0xFF, 0xFF,  // ..?.....
                /* 0348 */  0x1F, 0x6A, 0x00, 0x47, 0x47, 0x03, 0x38, 0x47,  // .j.GG.8G
                /* 0350 */  0x46, 0xDC, 0xD1, 0x00, 0x5C, 0x87, 0x52, 0xE0,  // F...\.R.
                /* 0358 */  0x70, 0x34, 0x00, 0x1E, 0x47, 0x21, 0x30, 0x5F,  // p4..G!0_
                /* 0360 */  0x68, 0x7C, 0x14, 0x02, 0x16, 0xFF, 0xFF, 0xA3,  // h|......
                /* 0368 */  0x10, 0xF8, 0x65, 0x9F, 0x83, 0x50, 0x42, 0x8F,  // ..e..PB.
                /* 0370 */  0x42, 0x80, 0xA0, 0xDB, 0xCF, 0x53, 0xC4, 0xB3,  // B....S..
                /* 0378 */  0x8F, 0x2F, 0x3F, 0x0F, 0x04, 0x11, 0x5E, 0xF3,  // ./?...^.
                /* 0380 */  0x7D, 0x0A, 0xF2, 0x21, 0xDF, 0x47, 0x21, 0x06,  // }..!.G!.
                /* 0388 */  0x63, 0x28, 0x5F, 0x83, 0x7C, 0x14, 0x62, 0x50,  // c(_.|.bP
                /* 0390 */  0xAF, 0x41, 0xBE, 0xEF, 0x1B, 0xE4, 0xF1, 0x22,  // .A....."
                /* 0398 */  0x48, 0xEC, 0x67, 0x02, 0x1F, 0x85, 0x98, 0xE8,  // H.g.....
                /* 03A0 */  0xA3, 0x10, 0xA0, 0xF0, 0xFF, 0x7F, 0x14, 0x02,  // ........
                /* 03A8 */  0xF8, 0xFF, 0xFF, 0x3F, 0x0A, 0x01, 0xCE, 0x02,  // ...?....
                /* 03B0 */  0x1C, 0x0D, 0x40, 0x37, 0xAD, 0x47, 0x21, 0xF0,  // ..@7.G!.
                /* 03B8 */  0xDE, 0x59, 0x4E, 0xFB, 0x04, 0x7C, 0x16, 0x02,  // .YN..|..
                /* 03C0 */  0xCC, 0xFE, 0xFF, 0xCF, 0x42, 0xC0, 0xEC, 0x28,  // ....B..(
                /* 03C8 */  0x74, 0x14, 0x67, 0xF9, 0x2A, 0xF4, 0x04, 0xF0,  // t.g.*...
                /* 03D0 */  0x02, 0x10, 0x23, 0xCC, 0x3B, 0xD0, 0x4B, 0x26,  // ..#.;.K&
                /* 03D8 */  0xBB, 0x8B, 0x1B, 0xE7, 0xC9, 0xE5, 0x2C, 0x9E,  // ......,.
                /* 03E0 */  0xC4, 0x7D, 0x09, 0xF2, 0x81, 0xE2, 0x59, 0xC8,  // .}....Y.
                /* 03E8 */  0x50, 0xA7, 0x1B, 0xF4, 0x8D, 0xDC, 0x03, 0x8B,  // P.......
                /* 03F0 */  0x19, 0x3F, 0xC4, 0xF3, 0x90, 0x21, 0x9E, 0x85,  // .?...!..
                /* 03F8 */  0x00, 0x76, 0xFD, 0xFF, 0xCF, 0x42, 0x00, 0xFF,  // .v...B..
                /* 0400 */  0xFF, 0xFF, 0x47, 0x03, 0xF8, 0x2F, 0x00, 0x9F,  // ..G../..
                /* 0408 */  0x85, 0x80, 0xE7, 0x09, 0xE0, 0x41, 0xDB, 0x67,  // .....A.g
                /* 0410 */  0x21, 0x80, 0x33, 0x87, 0xCB, 0xF3, 0x7F, 0x05,  // !.3.....
                /* 0418 */  0x3A, 0x96, 0xF7, 0x08, 0xCF, 0xFA, 0x24, 0x5F,  // :.....$_
                /* 0420 */  0x2F, 0x3D, 0xD3, 0x87, 0x82, 0x67, 0x21, 0x86,  // /=...g!.
                /* 0428 */  0x75, 0x18, 0x3E, 0x0B, 0x31, 0x88, 0x17, 0x4D,  // u.>.1..M
                /* 0430 */  0x43, 0xBC, 0x70, 0xFA, 0x30, 0xE0, 0xFF, 0x3F,  // C.p.0..?
                /* 0438 */  0x5E, 0xE0, 0x57, 0x4E, 0x03, 0x05, 0x09, 0xF4,  // ^.WN....
                /* 0440 */  0x2C, 0x04, 0x30, 0xFE, 0xFF, 0x7F, 0x16, 0x02,  // ,.0.....
                /* 0448 */  0xC8, 0xB8, 0x46, 0x9D, 0x85, 0x80, 0xE5, 0x6D,  // ..F....m
                /* 0450 */  0xE5, 0x19, 0xDB, 0xA7, 0x95, 0x04, 0xFF, 0xFF,  // ........
                /* 0458 */  0x67, 0x21, 0xC0, 0x41, 0x2E, 0x23, 0x07, 0x21,  // g!.A.#.!
                /* 0460 */  0x4C, 0xC4, 0x87, 0x83, 0x8F, 0x99, 0x80, 0x9E,  // L.......
                /* 0468 */  0x29, 0xBE, 0xB8, 0x1B, 0xE3, 0x09, 0xE0, 0x45,  // )......E
                /* 0470 */  0xE2, 0x31, 0x93, 0x1D, 0x35, 0x0D, 0xF3, 0x2C,  // .1..5..,
                /* 0478 */  0x64, 0xBC, 0xB3, 0x78, 0x0D, 0x78, 0x82, 0xF7,  // d..x.x..
                /* 0480 */  0xE4, 0x9F, 0x85, 0x18, 0xD8, 0x61, 0x05, 0x7B,  // .....a.{
                /* 0488 */  0x14, 0x32, 0xA8, 0xC1, 0x63, 0x87, 0x08, 0x13,  // .2..c...
                /* 0490 */  0xE8, 0x59, 0x88, 0xC5, 0x7D, 0xAE, 0xE8, 0x3C,  // .Y..}..<
                /* 0498 */  0xE1, 0xB3, 0x10, 0xF0, 0xFE, 0xFF, 0x9F, 0x25,  // .......%
                /* 04A0 */  0xE0, 0x5E, 0x0D, 0x9E, 0x85, 0x00, 0x13, 0x87,  // .^......
                /* 04A8 */  0x0D, 0x9F, 0x35, 0xC0, 0x33, 0x7C, 0x8F, 0xEA,  // ..5.3|..
                /* 04B0 */  0x1C, 0x1E, 0x8F, 0x81, 0x7F, 0x56, 0x1D, 0xE7,  // .....V..
                /* 04B8 */  0x04, 0x96, 0x7B, 0xD1, 0xB2, 0x71, 0xA0, 0xA1,  // ..{..q..
                /* 04C0 */  0x23, 0xB2, 0x3A, 0x20, 0x8D, 0x0D, 0x73, 0x29,  // #.: ..s)
                /* 04C8 */  0x89, 0x7C, 0x72, 0x6C, 0xD4, 0x56, 0x04, 0xA7,  // .|rl.V..
                /* 04D0 */  0x33, 0x93, 0x4F, 0x00, 0xD6, 0x42, 0x21, 0x05,  // 3.O..B!.
                /* 04D8 */  0x34, 0x1A, 0x8B, 0xE1, 0x9D, 0xF9, 0xE8, 0x44,  // 4......D
                /* 04E0 */  0x41, 0x0C, 0xE8, 0xE3, 0x90, 0x6D, 0x1C, 0x0A,  // A....m..
                /* 04E8 */  0x50, 0x7B, 0xD1, 0x14, 0xC8, 0x39, 0x07, 0xA3,  // P{...9..
                /* 04F0 */  0x7F, 0x76, 0x74, 0x36, 0xBE, 0x13, 0x70, 0x0D,  // .vt6..p.
                /* 04F8 */  0x10, 0x3A, 0x25, 0x18, 0xDA, 0x6A, 0x04, 0xFC,  // .:%..j..
                /* 0500 */  0xFF, 0x67, 0x89, 0x01, 0x33, 0xFE, 0x53, 0x8C,  // .g..3.S.
                /* 0508 */  0x09, 0x7C, 0x8E, 0xC1, 0x1F, 0x0C, 0xF0, 0x03,  // .|......
                /* 0510 */  0x7F, 0x31, 0xA8, 0xFA, 0x5E, 0xA0, 0xFB, 0x82,  // .1..^...
                /* 0518 */  0xD5, 0xDD, 0x64, 0x20, 0xCC, 0xC8, 0x04, 0xF5,  // ..d ....
                /* 0520 */  0x9D, 0x0E, 0x40, 0x01, 0xE4, 0x0B, 0x81, 0xCF,  // ..@.....
                /* 0528 */  0x51, 0x0F, 0x05, 0x6C, 0x22, 0x21, 0xC2, 0x44,  // Q..l"!.D
                /* 0530 */  0x33, 0x3A, 0x62, 0xC2, 0xA8, 0xE8, 0x13, 0xA6,  // 3:b.....
                /* 0538 */  0x20, 0x9E, 0xB0, 0x63, 0x4D, 0x18, 0x3D, 0x13,  //  ..cM.=.
                /* 0540 */  0x5F, 0x74, 0xD8, 0x88, 0x31, 0x21, 0xAE, 0x1E,  // _t..1!..
                /* 0548 */  0xD0, 0x26, 0x18, 0xD4, 0x97, 0x22, 0x58, 0x43,  // .&..."XC
                /* 0550 */  0xE6, 0x63, 0xF1, 0x05, 0x02, 0x37, 0x65, 0x30,  // .c...7e0
                /* 0558 */  0xCE, 0x89, 0x5D, 0x13, 0x7C, 0xD9, 0xC1, 0xCD,  // ..].|...
                /* 0560 */  0x19, 0x8C, 0xF0, 0x98, 0xBB, 0x18, 0xBF, 0x3A,  // .......:
                /* 0568 */  0x79, 0x74, 0xFC, 0xA0, 0xE0, 0x1B, 0x0E, 0xC3,  // yt......
                /* 0570 */  0x7E, 0x32, 0xF3, 0x8C, 0xDE, 0xCB, 0x7C, 0x8D,  // ~2....|.
                /* 0578 */  0xC3, 0xC0, 0x7A, 0xBC, 0x1C, 0xD6, 0x68, 0x61,  // ..z...ha
                /* 0580 */  0x0F, 0xED, 0x3D, 0xC4, 0xFF, 0xFF, 0x43, 0x8C,  // ..=...C.
                /* 0588 */  0xCF, 0x13, 0xC6, 0x08, 0xEB, 0xDB, 0x0B, 0x38,  // .......8
                /* 0590 */  0xEE, 0x59, 0xF0, 0xEF, 0x1A, 0xE0, 0xB9, 0x84,  // .Y......
                /* 0598 */  0xF8, 0xAE, 0x01, 0x30, 0xF0, 0xFF, 0x7F, 0xD7,  // ...0....
                /* 05A0 */  0x00, 0x4E, 0xD7, 0x04, 0xDF, 0x35, 0x80, 0xF7,  // .N...5..
                /* 05A8 */  0xD0, 0x7D, 0xD7, 0x00, 0xAE, 0xD9, 0xEF, 0x1A,  // .}......
                /* 05B0 */  0xA8, 0x63, 0x80, 0x15, 0xDE, 0x35, 0xA0, 0x5D,  // .c...5.]
                /* 05B8 */  0xD9, 0xDE, 0xD7, 0x9E, 0xB0, 0xAC, 0xE9, 0xB2,  // ........
                /* 05C0 */  0x81, 0x52, 0x73, 0xD9, 0x00, 0x14, 0xFC, 0xFF,  // .Rs.....
                /* 05C8 */  0x2F, 0x1B, 0x80, 0x01, 0x29, 0x13, 0x46, 0x85,  // /...).F.
                /* 05D0 */  0x9F, 0x30, 0x05, 0xF1, 0x84, 0x1D, 0xEC, 0xB2,  // .0......
                /* 05D8 */  0x01, 0x8A, 0x18, 0x97, 0x0D, 0xD0, 0x8F, 0xED,  // ........
                /* 05E0 */  0x65, 0x03, 0x18, 0xDC, 0x13, 0xF8, 0x6D, 0x03,  // e.....m.
                /* 05E8 */  0x78, 0x43, 0xFA, 0xB6, 0x01, 0xD6, 0xFF, 0xFF,  // xC......
                /* 05F0 */  0x6D, 0x03, 0xAC, 0xF9, 0x6F, 0x1B, 0x28, 0x0E,  // m...o.(.
                /* 05F8 */  0xAB, 0xBC, 0x6D, 0x40, 0x3C, 0xC9, 0x33, 0x02,  // ..m@<.3.
                /* 0600 */  0xAB, 0xBA, 0x6E, 0xA0, 0xF4, 0x5C, 0x37, 0x00,  // ..n..\7.
                /* 0608 */  0x12, 0x88, 0x99, 0x30, 0x2A, 0xFE, 0x84, 0x29,  // ...0*..)
                /* 0610 */  0x88, 0x27, 0xEC, 0x68, 0xD7, 0x0D, 0x50, 0x04,  // .'.h..P.
                /* 0618 */  0xB9, 0x6E, 0x80, 0x7E, 0x5E, 0x09, 0xFE, 0xFF,  // .n.~^...
                /* 0620 */  0xAF, 0x1B, 0xC0, 0xE0, 0xA2, 0x80, 0xB9, 0x6F,  // .......o
                /* 0628 */  0x00, 0x6F, 0x58, 0x7E, 0xDF, 0x00, 0x7C, 0xDC,  // .oX~..|.
                /* 0630 */  0xC4, 0x31, 0xF7, 0x0D, 0xC0, 0xCC, 0xFF, 0xFF,  // .1......
                /* 0638 */  0xBE, 0x01, 0xB0, 0xE7, 0xA2, 0x80, 0xBB, 0x6F,  // .......o
                /* 0640 */  0x00, 0xEF, 0x8B, 0xB4, 0xEF, 0x1B, 0x60, 0xFE,  // ......`.
                /* 0648 */  0xFF, 0xDF, 0x37, 0xC0, 0x28, 0x6D, 0xFD, 0x1E,  // ..7.(m..
                /* 0650 */  0x1C, 0x3D, 0x21, 0x78, 0x7C, 0xB8, 0xFB, 0xA5,  // .=!x|...
                /* 0658 */  0xC7, 0xE7, 0xBB, 0x39, 0x38, 0x06, 0x79, 0x8C,  // ...98.y.
                /* 0660 */  0x87, 0x76, 0xC0, 0xAF, 0xEF, 0x9E, 0x98, 0xEF,  // .v......
                /* 0668 */  0xE6, 0xC0, 0xFF, 0x4C, 0x70, 0x3C, 0x18, 0x68,  // ...Lp<.h
                /* 0670 */  0x1C, 0x62, 0xAB, 0x97, 0x06, 0x72, 0x34, 0x38,  // .b...r48
                /* 0678 */  0x3F, 0xDC, 0x19, 0x81, 0x61, 0x15, 0x7F, 0xF2,  // ?...a...
                /* 0680 */  0x47, 0x38, 0xC7, 0xD0, 0xD9, 0xE1, 0x20, 0xB1,  // G8.... .
                /* 0688 */  0x83, 0xE0, 0xC1, 0x56, 0x6D, 0x02, 0x85, 0x86,  // ...Vm...
                /* 0690 */  0x50, 0x14, 0x18, 0x14, 0x8B, 0x0F, 0x18, 0xF8,  // P.......
                /* 0698 */  0x61, 0xB3, 0xB3, 0x00, 0x93, 0x04, 0x87, 0x3A,  // a......:
                /* 06A0 */  0x02, 0xF8, 0x3E, 0xD1, 0xFC, 0x38, 0x74, 0x37,  // ..>..8t7
                /* 06A8 */  0x38, 0x54, 0x8F, 0xE5, 0xA1, 0x80, 0x9E, 0x01,  // 8T......
                /* 06B0 */  0x71, 0xC7, 0x0C, 0x32, 0x69, 0xCF, 0x28, 0xE2,  // q..2i.(.
                /* 06B8 */  0x53, 0xC2, 0x29, 0x85, 0x49, 0xE0, 0xF3, 0x03,  // S.).I...
                /* 06C0 */  0x43, 0xE3, 0x04, 0xAF, 0x0D, 0xA1, 0xF9, 0xFF,  // C.......
                /* 06C8 */  0xFF, 0xA4, 0xC0, 0x3C, 0xDF, 0x31, 0x04, 0x6C,  // ...<.1.l
                /* 06D0 */  0x02, 0xBB, 0xBF, 0x64, 0xC8, 0xDA, 0xC0, 0x75,  // ...d...u
                /* 06D8 */  0x4B, 0x32, 0x44, 0x6F, 0x38, 0xB2, 0x85, 0xA2,  // K2Do8...
                /* 06E0 */  0xE9, 0x44, 0x79, 0xDF, 0x88, 0x62, 0x67, 0x08,  // .Dy..bg.
                /* 06E8 */  0xC2, 0x88, 0x12, 0x2C, 0xC8, 0xA3, 0x42, 0xAC,  // ...,..B.
                /* 06F0 */  0x28, 0x2F, 0x05, 0x46, 0x88, 0x18, 0xE2, 0x95,  // (/.F....
                /* 06F8 */  0x23, 0xD0, 0x09, 0x87, 0x0F, 0xF2, 0xD8, 0x14,  // #.......
                /* 0700 */  0xA7, 0xFD, 0x41, 0x90, 0x58, 0x4F, 0x02, 0x8D,  // ..A.XO..
                /* 0708 */  0xC5, 0x91, 0x46, 0x83, 0x3A, 0x07, 0x78, 0xB8,  // ..F.:.x.
                /* 0710 */  0x3E, 0xC4, 0x78, 0xF8, 0x0F, 0x21, 0x06, 0x39,  // >.x..!.9
                /* 0718 */  0xC8, 0x73, 0x7B, 0x54, 0x38, 0x4E, 0x5F, 0x25,  // .s{T8N_%
                /* 0720 */  0x4C, 0xF0, 0x02, 0xE0, 0x83, 0x0A, 0x1C, 0xD7,  // L.......
                /* 0728 */  0x80, 0x9A, 0xF1, 0x33, 0x06, 0x58, 0x8E, 0xE3,  // ...3.X..
                /* 0730 */  0x3E, 0xA9, 0xC0, 0x1D, 0x8F, 0xEF, 0x07, 0x6C,  // >......l
                /* 0738 */  0xC2, 0x09, 0x2C, 0x7F, 0x10, 0xA8, 0xE3, 0x0C,  // ..,.....
                /* 0740 */  0x9F, 0xE7, 0x0B, 0x8B, 0x21, 0x1F, 0x13, 0x4C,  // ....!..L
                /* 0748 */  0x60, 0xB1, 0x27, 0x1B, 0x3A, 0x1E, 0xF0, 0xDF,  // `.'.:...
                /* 0750 */  0x63, 0x1E, 0x2F, 0x7C, 0x32, 0xF1, 0x7C, 0x4D,  // c./|2.|M
                /* 0758 */  0x30, 0x22, 0x84, 0x9C, 0x8C, 0x07, 0x7D, 0x87,  // 0"....}.
                /* 0760 */  0xC0, 0x5C, 0x6F, 0xD8, 0xB9, 0x85, 0x8B, 0x3A,  // .\o....:
                /* 0768 */  0x68, 0xA0, 0x4E, 0x0B, 0x3E, 0x28, 0xB0, 0x9B,  // h.N.>(..
                /* 0770 */  0x11, 0xE6, 0xB8, 0xCE, 0xCF, 0x2A, 0x60, 0xF8,  // .....*`.
                /* 0778 */  0xFF, 0x9F, 0x55, 0x60, 0x8F, 0x10, 0xFE, 0xED,  // ..U`....
                /* 0780 */  0xC1, 0xF3, 0xF2, 0x95, 0xE1, 0xD5, 0x21, 0x81,  // ......!.
                /* 0788 */  0x43, 0x8E, 0x10, 0x3D, 0x2E, 0x8F, 0x10, 0x73,  // C..=...s
                /* 0790 */  0x3E, 0xC2, 0x0C, 0x11, 0x5C, 0x67, 0x01, 0x70,  // >...\g.p
                /* 0798 */  0x0C, 0x11, 0xF8, 0x1C, 0x70, 0xC0, 0x71, 0x69,  // ....p.qi
                /* 07A0 */  0xE2, 0x03, 0xF5, 0x01, 0x07, 0x70, 0x70, 0x4D,  // .....ppM
                /* 07A8 */  0xC3, 0x1D, 0x70, 0xC0, 0x71, 0x16, 0x60, 0xFF,  // ..p.q.`.
                /* 07B0 */  0xFF, 0xC3, 0x0D, 0x2C, 0x49, 0x26, 0x0E, 0x23,  // ...,I&.#
                /* 07B8 */  0x18, 0x11, 0x30, 0x28, 0x02, 0x02, 0xA4, 0xB3,  // ..0(....
                /* 07C0 */  0x80, 0x0F, 0x29, 0x00, 0x1F, 0xAE, 0x0C, 0x0F,  // ..).....
                /* 07C8 */  0x29, 0xD8, 0x93, 0x86, 0x07, 0x8E, 0x1B, 0x85,  // ).......
                /* 07D0 */  0x07, 0x8D, 0x0B, 0x30, 0x68, 0x7A, 0xE2, 0x80,  // ...0hz..
                /* 07D8 */  0x7F, 0x4C, 0xF0, 0x19, 0x05, 0x1C, 0xE3, 0x06,  // .L......
                /* 07E0 */  0xDF, 0x2A, 0x0C, 0xFC, 0xFF, 0x3F, 0x30, 0xCC,  // .*...?0.
                /* 07E8 */  0xE1, 0xC2, 0x63, 0x39, 0x8A, 0xA0, 0x07, 0x1E,  // ..c9....
                /* 07F0 */  0xD4, 0xF7, 0x8C, 0x33, 0xF7, 0x24, 0x8F, 0xD1,  // ...3.$..
                /* 07F8 */  0x51, 0x0F, 0x27, 0xF4, 0xE4, 0x85, 0x3B, 0x57,  // Q.'...;W
                /* 0800 */  0xF9, 0x0A, 0x71, 0x14, 0x18, 0xB8, 0x77, 0x29,  // ..q...w)
                /* 0808 */  0x8F, 0xCF, 0x17, 0x2B, 0xC3, 0x63, 0x46, 0xFB,  // ...+.cF.
                /* 0810 */  0x1E, 0x72, 0xD6, 0x11, 0x02, 0xE2, 0x2F, 0x75,  // .r..../u
                /* 0818 */  0x6C, 0xC0, 0x60, 0x39, 0x18, 0x00, 0x87, 0x01,  // l.`9....
                /* 0820 */  0xE3, 0x13, 0x0D, 0x58, 0x67, 0x1B, 0x3C, 0xF4,  // ...Xg.<.
                /* 0828 */  0x69, 0x31, 0xC4, 0xE3, 0x0B, 0xFB, 0x56, 0x61,  // i1....Va
                /* 0830 */  0x82, 0xEA, 0x41, 0x75, 0x12, 0xF4, 0xD0, 0xC0,  // ..Au....
                /* 0838 */  0x01, 0xE8, 0xA1, 0xC1, 0x3F, 0xB9, 0x90, 0xFB,  // ....?...
                /* 0840 */  0x2B, 0x1D, 0x82, 0xB5, 0xE2, 0x69, 0xDE, 0x47,  // +....i.G
                /* 0848 */  0x1E, 0xF3, 0xDC, 0xA2, 0xBC, 0x0D, 0x3C, 0x07,  // ......<.
                /* 0850 */  0xF0, 0xD3, 0x82, 0x87, 0xE3, 0x63, 0x81, 0xC7,  // .....c..
                /* 0858 */  0xE9, 0x4B, 0x58, 0x82, 0xF7, 0x1A, 0x9F, 0x6C,  // .KX....l
                /* 0860 */  0x1E, 0x5C, 0x58, 0xB2, 0x21, 0xA0, 0x06, 0xEB,  // .\X.!...
                /* 0868 */  0x21, 0x60, 0xA6, 0x9A, 0xC0, 0x49, 0x46, 0x80,  // !`...IF.
                /* 0870 */  0xCA, 0x00, 0xA1, 0x1B, 0xCB, 0xE9, 0x3E, 0x8B,  // ......>.
                /* 0878 */  0x84, 0x38, 0xCD, 0x47, 0x99, 0xC7, 0x02, 0x8F,  // .8.G....
                /* 0880 */  0xF5, 0xC1, 0xC0, 0xFF, 0x7F, 0xCD, 0x23, 0xD4,  // ......#.
                /* 0888 */  0x7D, 0xCD, 0x33, 0x7B, 0x3A, 0xC0, 0xAC, 0x22,  // }.3{:.."
                /* 0890 */  0xDC, 0x7B, 0xCE, 0x1B, 0x86, 0xD1, 0x9E, 0x2D,  // .{.....-
                /* 0898 */  0x7C, 0xCD, 0x78, 0xD6, 0x34, 0x42, 0x38, 0x76,  // |.x.4B8v
                /* 08A0 */  0x83, 0xF3, 0x48, 0x8C, 0xF0, 0x82, 0xC0, 0x4E,  // ..H....N
                /* 08A8 */  0x0C, 0x0F, 0x30, 0xC6, 0x39, 0x79, 0xC3, 0xFA,  // ..0.9y..
                /* 08B0 */  0xC2, 0xCB, 0x40, 0x83, 0x19, 0xDB, 0x97, 0x01,  // ..@.....
                /* 08B8 */  0x36, 0x2A, 0xDF, 0x88, 0xC0, 0x97, 0xFC, 0x62,  // 6*.....b
                /* 08C0 */  0x00, 0x65, 0x16, 0xBE, 0x9E, 0xF8, 0xA0, 0xC4,  // .e......
                /* 08C8 */  0x2E, 0x06, 0x2C, 0xE5, 0xC5, 0x00, 0x54, 0x37,  // ..,...T7
                /* 08D0 */  0x0C, 0x5F, 0x0C, 0xE0, 0x5F, 0x89, 0x5E, 0x0C,  // ._.._.^.
                /* 08D8 */  0xC0, 0x70, 0x71, 0xF2, 0x3D, 0xC0, 0x1E, 0xEE,  // .pq.=...
                /* 08E0 */  0xA3, 0x74, 0x9C, 0xBE, 0xFD, 0xBD, 0x19, 0xF8,  // .t......
                /* 08E8 */  0x6C, 0xC0, 0x60, 0x3C, 0xC3, 0x30, 0xC6, 0x08,  // l.`<.0..
                /* 08F0 */  0xE3, 0x51, 0x86, 0x31, 0xC1, 0xDC, 0xB7, 0x03,  // .Q.1....
                /* 08F8 */  0xE8, 0x39, 0x87, 0x81, 0x4A, 0x78, 0x3B, 0x80,  // .9..Jx;.
                /* 0900 */  0x72, 0x0E, 0xE8, 0xF2, 0x68, 0x42, 0x4F, 0x01,  // r...hBO.
                /* 0908 */  0x4F, 0x07, 0x3E, 0x29, 0x1A, 0xA2, 0xAF, 0xB1,  // O.>)....
                /* 0910 */  0x0A, 0x26, 0x50, 0xC4, 0x07, 0x0D, 0x3E, 0xB5,  // .&P...>.
                /* 0918 */  0x28, 0x3E, 0x15, 0x78, 0x2D, 0xCF, 0x4E, 0xE1,  // (>.x-.N.
                /* 0920 */  0xE2, 0x9C, 0x89, 0xA7, 0x6A, 0x38, 0x03, 0xBD,  // ....j8..
                /* 0928 */  0xE6, 0x86, 0x63, 0xFF, 0x7F, 0x38, 0xFC, 0xA9,  // ..c..8..
                /* 0930 */  0xE0, 0x35, 0x80, 0x1D, 0x24, 0x3D, 0x2D, 0x23,  // .5..$=-#
                /* 0938 */  0xC2, 0x38, 0xA4, 0x3C, 0x32, 0xF8, 0xB6, 0x18,  // .8.<2...
                /* 0940 */  0xC7, 0x90, 0x0F, 0x91, 0xBE, 0x13, 0x18, 0xF2,  // ........
                /* 0948 */  0x21, 0xEF, 0x79, 0xC7, 0xC0, 0xAF, 0x08, 0x71,  // !.y....q
                /* 0950 */  0x9E, 0xB2, 0x7C, 0x67, 0xF0, 0x65, 0x01, 0x7C,  // ..|g.e.|
                /* 0958 */  0x91, 0x2E, 0x0B, 0x68, 0x68, 0x9F, 0x64, 0x7C,  // ...hh.d|
                /* 0960 */  0x41, 0x30, 0xEC, 0x89, 0xB3, 0x00, 0x77, 0x05,  // A0....w.
                /* 0968 */  0x50, 0x81, 0xFA, 0xAE, 0x00, 0xFF, 0x42, 0xF0,  // P.....B.
                /* 0970 */  0xAE, 0x00, 0x86, 0x79, 0xF9, 0x56, 0xC0, 0x35,  // ...y.V.5
                /* 0978 */  0x1D, 0x4A, 0xD0, 0x67, 0x12, 0x5F, 0x17, 0x70,  // .J.g._.p
                /* 0980 */  0x53, 0x64, 0xA9, 0x8E, 0x0A, 0xD0, 0x53, 0x4C,  // Sd....SL
                /* 0988 */  0x02, 0x75, 0x47, 0xF7, 0x51, 0x01, 0xC6, 0x4D,  // .uG.Q..M
                /* 0990 */  0xD9, 0x07, 0x54, 0x76, 0x5A, 0x60, 0x67, 0x21,  // ..TvZ`g!
                /* 0998 */  0x76, 0x1D, 0xC1, 0x5D, 0x49, 0x18, 0xCA, 0xB3,  // v..]I...
                /* 09A0 */  0x81, 0x2F, 0x59, 0xFC, 0x70, 0x00, 0x03, 0xDC,  // ./Y.p...
                /* 09A8 */  0xB3, 0x38, 0xC4, 0x08, 0xB1, 0xD9, 0x81, 0xEB,  // .8......
                /* 09B0 */  0x75, 0xD2, 0x70, 0x2F, 0x44, 0xEC, 0xFF, 0x7F,  // u.p/D...
                /* 09B8 */  0x32, 0x00, 0xE3, 0x51, 0x1B, 0x1C, 0x27, 0x9D,  // 2..Q..'.
                /* 09C0 */  0xF0, 0x91, 0x9E, 0x59, 0xF8, 0x49, 0x19, 0x30,  // ...Y.I.0
                /* 09C8 */  0x71, 0xF2, 0x03, 0xE3, 0xC9, 0x1A, 0xC6, 0x00,  // q.......
                /* 09D0 */  0xB8, 0xBC, 0x57, 0x95, 0x81, 0xFC, 0x43, 0x90,  // ..W...C.
                /* 09D8 */  0x20, 0x18, 0xD4, 0x29, 0x19, 0x38, 0x1C, 0xC5,  //  ..).8..
                /* 09E0 */  0x70, 0xA7, 0x64, 0x78, 0x50, 0xF8, 0xC3, 0x00,  // p.dxP...
                /* 09E8 */  0xE6, 0x46, 0xE8, 0x7B, 0x82, 0xA1, 0xDE, 0x93,  // .F.{....
                /* 09F0 */  0x0E, 0xE3, 0x91, 0xD0, 0x04, 0x3E, 0x2D, 0xC3,  // .....>-.
                /* 09F8 */  0xFA, 0xFF, 0x9F, 0x96, 0xF9, 0x39, 0x21, 0xFE,  // .....9!.
                /* 0A00 */  0x53, 0xCE, 0xFB, 0xC5, 0x83, 0xB2, 0x31, 0xA2,  // S.....1.
                /* 0A08 */  0xBC, 0x2A, 0xFB, 0x9C, 0x69, 0x14, 0x76, 0x4B,  // .*..i.vK
                /* 0A10 */  0x7E, 0x73, 0x78, 0x55, 0xF6, 0x69, 0xF9, 0xDC,  // ~sxU.i..
                /* 0A18 */  0x22, 0xBD, 0x2F, 0x7B, 0xE4, 0x31, 0xE3, 0xC4,  // "./{.1..
                /* 0A20 */  0x0A, 0x12, 0xE8, 0x7D, 0x23, 0x4A, 0xD8, 0x18,  // ...}#J..
                /* 0A28 */  0xE1, 0x02, 0x3D, 0x2D, 0xB3, 0x63, 0xBB, 0x87,  // ..=-.c..
                /* 0A30 */  0xEC, 0xB3, 0x02, 0xEE, 0xEC, 0x00, 0x77, 0x7A,  // ......wz
                /* 0A38 */  0xFC, 0xF4, 0x00, 0x38, 0x01, 0x7A, 0x7A, 0x00,  // ...8.zz.
                /* 0A40 */  0xDB, 0x79, 0x03, 0xEE, 0x81, 0x00, 0x71, 0xFC,  // .y....q.
                /* 0A48 */  0x47, 0x05, 0xBF, 0xB2, 0x50, 0x38, 0x7E, 0x6C,  // G...P8~l
                /* 0A50 */  0xE7, 0xC7, 0x12, 0xDC, 0xE1, 0xC0, 0x47, 0x06,  // ......G.
                /* 0A58 */  0x1F, 0x20, 0x71, 0x43, 0xF1, 0xA1, 0x02, 0x79,  // . qC...y
                /* 0A60 */  0x16, 0x00, 0xC5, 0xE8, 0xD9, 0x08, 0xD8, 0x0D,  // ........
                /* 0A68 */  0xE6, 0xA5, 0x25, 0xCA, 0xFF, 0xFF, 0xBD, 0x81,  // ..%.....
                /* 0A70 */  0x9D, 0x52, 0x70, 0x07, 0x01, 0xF0, 0x1D, 0x03,  // .Rp.....
                /* 0A78 */  0xC0, 0x3B, 0x18, 0x2E, 0x6B, 0xCC, 0x28, 0x21,  // .;..k.(!
                /* 0A80 */  0x30, 0x1A, 0x33, 0xEE, 0x10, 0xC2, 0x4F, 0x04,  // 0.3...O.
                /* 0A88 */  0xB8, 0x31, 0x7B, 0xDC, 0x1E, 0x33, 0xEE, 0x38,  // .1{..3.8
                /* 0A90 */  0xCB, 0x47, 0xF5, 0x94, 0x11, 0xCA, 0x07, 0x0E,  // .G......
                /* 0A98 */  0x76, 0xCE, 0x78, 0x23, 0xE0, 0x43, 0x07, 0x1E,  // v.x#.C..
                /* 0AA0 */  0x07, 0x18, 0xDC, 0x91, 0x02, 0x8C, 0x97, 0x03,  // ........
                /* 0AA8 */  0x36, 0x76, 0x70, 0x07, 0x21, 0xA7, 0x40, 0x96,  // 6vp.!.@.
                /* 0AB0 */  0x0E, 0xA3, 0xB1, 0xE3, 0x64, 0x03, 0xE9, 0x18,  // ....d...
                /* 0AB8 */  0xE3, 0x43, 0xAE, 0xC7, 0x8E, 0x1B, 0xAC, 0xC7,  // .C......
                /* 0AC0 */  0x8E, 0x3B, 0xBE, 0x60, 0xFF, 0xFF, 0xC7, 0x17,  // .;.`....
                /* 0AC8 */  0x30, 0x8C, 0x81, 0x8B, 0x1F, 0x06, 0xFA, 0xE6,  // 0.......
                /* 0AD0 */  0xE7, 0xD1, 0x19, 0xDC, 0xC3, 0xF6, 0x09, 0x26,  // .......&
                /* 0AD8 */  0xC6, 0x1B, 0x4C, 0x88, 0x47, 0x96, 0x97, 0x96,  // ..L.G...
                /* 0AE0 */  0x08, 0x0F, 0x2D, 0xBE, 0xB9, 0xBC, 0xB4, 0xF8,  // ..-.....
                /* 0AE8 */  0x16, 0x63, 0x94, 0x10, 0x11, 0x0E, 0x26, 0xCE,  // .c....&.
                /* 0AF0 */  0x13, 0x8C, 0x11, 0x0E, 0x3C, 0x8A, 0x21, 0x22,  // ....<.!"
                /* 0AF8 */  0x9C, 0x40, 0x88, 0x93, 0x3E, 0xD9, 0x20, 0xE1,  // .@..>. .
                /* 0B00 */  0x63, 0x84, 0x8D, 0x16, 0xE5, 0x09, 0x86, 0x8D,  // c.......
                /* 0B08 */  0x85, 0x9F, 0x57, 0x3C, 0x78, 0x7E, 0x5A, 0xF3,  // ..W<x~Z.
                /* 0B10 */  0x5D, 0xD0, 0x93, 0x39, 0xC7, 0x87, 0x2C, 0x4F,  // ]..9..,O
                /* 0B18 */  0xED, 0x71, 0xD2, 0x87, 0x59, 0xDC, 0xA0, 0x1E,  // .q..Y...
                /* 0B20 */  0x1C, 0xD9, 0x5D, 0xC7, 0xC7, 0x6B, 0xEC, 0x29,  // ..]..k.)
                /* 0B28 */  0xC8, 0x43, 0xE0, 0x27, 0x02, 0x5F, 0x10, 0x3D,  // .C.'._.=
                /* 0B30 */  0x59, 0xDF, 0xF5, 0xD8, 0xBD, 0xCC, 0x18, 0xD5,  // Y.......
                /* 0B38 */  0x4F, 0x01, 0x75, 0x4C, 0x39, 0x83, 0x57, 0x08,  // O.uL9.W.
                /* 0B40 */  0x76, 0xCF, 0xF3, 0x21, 0xDB, 0x77, 0x49, 0x36,  // v..!.wI6
                /* 0B48 */  0x0A, 0xDC, 0x21, 0xC1, 0x67, 0x24, 0x7E, 0xAA,  // ..!.g$~.
                /* 0B50 */  0xF0, 0x30, 0x3C, 0x0A, 0x18, 0x33, 0x78, 0x47,  // .0<..3xG
                /* 0B58 */  0x38, 0xB4, 0x10, 0x07, 0xFC, 0xBE, 0xCB, 0x86,  // 8.......
                /* 0B60 */  0x1A, 0xE3, 0xF4, 0x7C, 0xFE, 0x60, 0x83, 0x80,  // ...|.`..
                /* 0B68 */  0x0F, 0x75, 0xA8, 0x1E, 0xE6, 0x51, 0xBD, 0x14,  // .u...Q..
                /* 0B70 */  0x32, 0x9C, 0xB3, 0x83, 0x3B, 0x08, 0xEC, 0xF1,  // 2...;...
                /* 0B78 */  0xC3, 0x83, 0xE0, 0x37, 0x4B, 0x3E, 0x08, 0x76,  // ...7K>.v
                /* 0B80 */  0xBE, 0x79, 0x83, 0x33, 0xC8, 0xFF, 0xFF, 0x18,  // .y.3....
                /* 0B88 */  0x60, 0x9F, 0xA9, 0x7C, 0x34, 0x41, 0x1C, 0x01,  // `..|4A..
                /* 0B90 */  0xD1, 0xE7, 0x0F, 0x8F, 0xE1, 0x4D, 0x8E, 0x0F,  // .....M..
                /* 0B98 */  0x07, 0x7B, 0xF4, 0xC0, 0x9D, 0x44, 0xE0, 0x1E,  // .{...D..
                /* 0BA0 */  0xBB, 0x0E, 0xDA, 0xD7, 0x38, 0x5F, 0xB4, 0x60,  // ....8_.`
                /* 0BA8 */  0xDC, 0xF7, 0x9E, 0x45, 0xC0, 0x8F, 0xF1, 0xD8,  // ...E....
                /* 0BB0 */  0x02, 0x8E, 0x43, 0x09, 0xB8, 0x83, 0x1D, 0xD7,  // ..C.....
                /* 0BB8 */  0x38, 0x84, 0xA2, 0xC0, 0xE8, 0x50, 0x82, 0x8B,  // 8....P..
                /* 0BC0 */  0x01, 0x24, 0x18, 0xC7, 0x38, 0xA3, 0xA1, 0x2F,  // .$..8../
                /* 0BC8 */  0x91, 0x3E, 0xA4, 0xC1, 0x19, 0x34, 0xEC, 0x79,  // .>...4.y
                /* 0BD0 */  0x3E, 0xA1, 0x70, 0x7B, 0x02, 0x14, 0x9D, 0x50,  // >.p{...P
                /* 0BD8 */  0x40, 0x86, 0xFB, 0x0C, 0x82, 0x3D, 0x21, 0xF0,  // @....=!.
                /* 0BE0 */  0x33, 0x08, 0xFB, 0xFF, 0x1F, 0x1C, 0x3D, 0xEE,  // 3.....=.
                /* 0BE8 */  0xF7, 0x46, 0x9F, 0x1A, 0xD9, 0xDC, 0x1F, 0x02,  // .F......
                /* 0BF0 */  0x4E, 0xE0, 0xDC, 0xD9, 0xA9, 0x19, 0x77, 0x66,  // N.....wf
                /* 0BF8 */  0xC0, 0x9E, 0x3F, 0x3C, 0x04, 0x7E, 0x2E, 0xF0,  // ..?<.~..
                /* 0C00 */  0xF0, 0x3D, 0x04, 0xFC, 0xE0, 0x1F, 0x98, 0x0D,  // .=......
                /* 0C08 */  0x0E, 0xC6, 0x53, 0x84, 0xAF, 0x1D, 0x1C, 0x9C,  // ..S.....
                /* 0C10 */  0x9F, 0x06, 0x0C, 0xCE, 0x5F, 0xA1, 0x3E, 0xCF,  // ...._.>.
                /* 0C18 */  0x33, 0x70, 0xEC, 0xA9, 0xD7, 0xF7, 0x0E, 0xCF,  // 3p......
                /* 0C20 */  0xD7, 0x87, 0x0A, 0xFC, 0x4D, 0xCF, 0x87, 0x0A,  // ....M...
                /* 0C28 */  0x70, 0x1C, 0x1E, 0xF8, 0x61, 0x85, 0x0D, 0xE1,  // p...a...
                /* 0C30 */  0x51, 0x00, 0x7F, 0x6A, 0xF1, 0xF1, 0x2F, 0xCE,  // Q..j../.
                /* 0C38 */  0x53, 0x04, 0xBB, 0x8D, 0x60, 0x0F, 0x17, 0x80,  // S...`...
                /* 0C40 */  0xA3, 0x68, 0x67, 0x31, 0x54, 0x98, 0xB3, 0x18,  // .hg1T...
                /* 0C48 */  0xF9, 0xFF, 0x9F, 0xA3, 0x50, 0x67, 0x31, 0x7A,  // ....Pg1z
                /* 0C50 */  0xB8, 0x00, 0x5C, 0x08, 0x3E, 0x1E, 0x80, 0xE6,  // ..\.>...
                /* 0C58 */  0x20, 0xF0, 0xB8, 0xE0, 0x0B, 0xC1, 0x91, 0x1C,  //  .......
                /* 0C60 */  0xC8, 0xD3, 0x01, 0xE0, 0x33, 0xC6, 0xC7, 0xD9,  // ....3...
                /* 0C68 */  0xE7, 0x23, 0x2A, 0x1C, 0x06, 0x75, 0x3E, 0xF0,  // .#*..u>.
                /* 0C70 */  0x09, 0xC5, 0xC7, 0x0E, 0x7E, 0x36, 0xF0, 0x8D,  // ....~6..
                /* 0C78 */  0xDC, 0x43, 0xE5, 0xA7, 0x66, 0x9F, 0xB4, 0xB9,  // .C..f...
                /* 0C80 */  0x40, 0x70, 0x9D, 0x8E, 0x1C, 0x68, 0x18, 0xA8,  // @p...h..
                /* 0C88 */  0x11, 0x19, 0xEA, 0xFF, 0xFF, 0xDC, 0x86, 0x0D,  // ........
                /* 0C90 */  0x30, 0x34, 0x7A, 0x0E, 0x87, 0x71, 0xC0, 0xF5,  // 04z..q..
                /* 0C98 */  0x39, 0x1C, 0x3B, 0x20, 0x9F, 0xC3, 0xE1, 0x9F,  // 9.; ....
                /* 0CA0 */  0xA3, 0xE1, 0x8F, 0x8D, 0x9D, 0xEE, 0xF9, 0xC0,  // ........
                /* 0CA8 */  0x60, 0x5D, 0xBF, 0x31, 0x03, 0x03, 0xDB, 0xB7,  // `].1....
                /* 0CB0 */  0xC8, 0x03, 0x03, 0x8E, 0xA8, 0x67, 0xE3, 0x2B,  // .....g.+
                /* 0CB8 */  0x84, 0x07, 0x06, 0x36, 0x40, 0x0F, 0x0C, 0xF8,  // ...6@...
                /* 0CC0 */  0xC4, 0x82, 0x90, 0x93, 0x81, 0xA1, 0x4E, 0x19,  // ......N.
                /* 0CC8 */  0x46, 0x8E, 0xF9, 0xC4, 0xE1, 0x61, 0xF8, 0x50,  // F....a.P
                /* 0CD0 */  0x11, 0xF5, 0x19, 0xE0, 0x11, 0x8F, 0x8D, 0x8D,  // ........
                /* 0CD8 */  0xFD, 0xFF, 0xC7, 0x06, 0x96, 0x63, 0x8B, 0xC7,  // .....c..
                /* 0CE0 */  0x06, 0xFE, 0x23, 0x3C, 0x7E, 0x6C, 0x70, 0xC6,  // ..#<~lp.
                /* 0CE8 */  0xF2, 0x68, 0xE2, 0xCB, 0xCC, 0x91, 0x9D, 0xC6,  // .h......
                /* 0CF0 */  0x99, 0xBD, 0x86, 0xF8, 0x68, 0xF7, 0xF8, 0xED,  // ....h...
                /* 0CF8 */  0xB1, 0x81, 0xCB, 0xC2, 0xD8, 0x80, 0x52, 0xC8,  // ......R.
                /* 0D00 */  0xB1, 0xA1, 0x0F, 0x29, 0x3E, 0x05, 0xD8, 0x38,  // ...)>..8
                /* 0D08 */  0x2A, 0x99, 0x87, 0x8F, 0x57, 0x3E, 0x31, 0x1C,  // *...W>1.
                /* 0D10 */  0x5D, 0x90, 0x37, 0x74, 0x5F, 0x2E, 0x7C, 0xA4,  // ].7t_.|.
                /* 0D18 */  0x31, 0x98, 0x2F, 0x2D, 0x3E, 0x83, 0xF2, 0x21,  // 1./->..!
                /* 0D20 */  0x82, 0x4B, 0xC3, 0x10, 0x81, 0x52, 0xA8, 0x21,  // .K...R.!
                /* 0D28 */  0xA2, 0xC7, 0xF3, 0xFF, 0x7F, 0x04, 0xF3, 0x10,  // ........
                /* 0D30 */  0xD9, 0xD0, 0xC0, 0xFB, 0xA9, 0xF1, 0xD0, 0x80,  // ........
                /* 0D38 */  0x4F, 0xB8, 0xA1, 0xA1, 0x0F, 0x6B, 0x3E, 0x04,  // O....k>.
                /* 0D40 */  0x30, 0x08, 0xDF, 0x06, 0xD8, 0x55, 0xC0, 0x57,  // 0....U.W
                /* 0D48 */  0x21, 0x0F, 0xF0, 0x49, 0x94, 0x0D, 0x0F, 0x7C,  // !..I...|
                /* 0D50 */  0x83, 0xF2, 0xF0, 0x80, 0x4F, 0x78, 0x60, 0xAF,  // ....Ox`.
                /* 0D58 */  0xC2, 0xC3, 0xA3, 0x67, 0x25, 0x0F, 0x0F, 0x1E,  // ...g%...
                /* 0D60 */  0xC8, 0x63, 0x04, 0x3B, 0x87, 0x78, 0x70, 0xE0,  // .c.;.xp.
                /* 0D68 */  0x30, 0x31, 0x38, 0x50, 0x1C, 0xFD, 0x71, 0x43,  // 018P..qC
                /* 0D70 */  0x60, 0x97, 0x59, 0x4F, 0x9C, 0x5F, 0x59, 0x3C,  // `.YO._Y<
                /* 0D78 */  0x28, 0xFC, 0xFF, 0xFF, 0x08, 0x00, 0xEB, 0x38,  // (......8
                /* 0D80 */  0x03, 0xBE, 0xC3, 0x2A, 0x38, 0x8E, 0xFD, 0xD8,  // ...*8...
                /* 0D88 */  0xDB, 0x84, 0x47, 0xF0, 0x4C, 0xE6, 0x11, 0xF0,  // ..G.L...
                /* 0D90 */  0x33, 0x19, 0xE0, 0x28, 0xE8, 0x61, 0x95, 0x0E,  // 3..(.a..
                /* 0D98 */  0xDC, 0xD1, 0x60, 0x50, 0x67, 0x32, 0x70, 0x45,  // ..`Pg2pE
                /* 0DA0 */  0x00, 0xD7, 0x39, 0xC5, 0x67, 0x12, 0x38, 0x43,  // ..9.g.8C
                /* 0DA8 */  0x3D, 0x68, 0x9F, 0xB0, 0x3D, 0x6B, 0xDF, 0xA2,  // =h..=k..
                /* 0DB0 */  0xD8, 0x29, 0x03, 0x5C, 0x2A, 0x4E, 0x19, 0x20,  // .).\*N. 
                /* 0DB8 */  0xFC, 0xFF, 0x9F, 0x5E, 0xC0, 0x0A, 0x7C, 0x12,  // ...^..|.
                /* 0DC0 */  0x0F, 0xED, 0x87, 0x06, 0xE6, 0x81, 0x79, 0x68,  // ......yh
                /* 0DC8 */  0xC0, 0xE7, 0x68, 0x80, 0x3B, 0x51, 0x80, 0xE7,  // ..h.;Q..
                /* 0DD0 */  0x86, 0x81, 0x3B, 0x50, 0x00, 0x6E, 0x8E, 0xED,  // ..;P.n..
                /* 0DD8 */  0x1E, 0x17, 0x87, 0xC6, 0x21, 0x3E, 0x78, 0x9D,  // ....!>x.
                /* 0DE0 */  0xB3, 0xCF, 0x54, 0x67, 0x8A, 0x3B, 0x8B, 0x80,  // ..Tg.;..
                /* 0DE8 */  0xE1, 0x94, 0x8E, 0xB0, 0xF0, 0xFF, 0x3F, 0xB4,  // ......?.
                /* 0DF0 */  0xD2, 0x07, 0x86, 0x84, 0xC0, 0xA0, 0x4E, 0x35,  // ......N5
                /* 0DF8 */  0x1E, 0x8A, 0x0F, 0x06, 0x1C, 0xD8, 0x47, 0x04,  // ......G.
                /* 0E00 */  0x76, 0x2E, 0x60, 0x87, 0x22, 0xC3, 0xF1, 0xB3,  // v.`."...
                /* 0E08 */  0x80, 0x4F, 0x09, 0xAF, 0x5B, 0xC7, 0xF1, 0x08,  // .O..[...
                /* 0E10 */  0xE9, 0xFB, 0x96, 0x21, 0xD9, 0xD5, 0xE0, 0x99,  // ...!....
                /* 0E18 */  0x06, 0x7B, 0x82, 0x85, 0x73, 0x6C, 0x05, 0x17,  // .{..sl..
                /* 0E20 */  0x81, 0x6F, 0x61, 0x47, 0x81, 0x39, 0x3D, 0x78,  // .oaG.9=x
                /* 0E28 */  0x8E, 0x6F, 0x0C, 0x3E, 0x3D, 0x30, 0xF7, 0x02,  // .o.>=0..
                /* 0E30 */  0xCC, 0x1D, 0xA4, 0x85, 0x70, 0x4C, 0xAF, 0x0F,  // ....pL..
                /* 0E38 */  0x31, 0x8E, 0xFA, 0xB1, 0xA1, 0x2D, 0x01, 0xDA,  // 1....-..
                /* 0E40 */  0x50, 0x74, 0x07, 0x78, 0x19, 0x88, 0x12, 0xE2,  // Pt.x....
                /* 0E48 */  0x08, 0x22, 0xB5, 0x86, 0xA2, 0x99, 0x47, 0x8A,  // ."....G.
                /* 0E50 */  0x12, 0x30, 0x9E, 0x61, 0x1A, 0x9B, 0x8C, 0x20,  // .0.a... 
                /* 0E58 */  0x63, 0x84, 0x8E, 0x13, 0x2C, 0x4A, 0xB4, 0x57,  // c...,J.W
                /* 0E60 */  0x80, 0xF6, 0x47, 0xCB, 0x56, 0xAC, 0xB1, 0x38,  // ..G.V..8
                /* 0E68 */  0xD2, 0x69, 0x11, 0x3D, 0x6C, 0x1F, 0x9D, 0xF1,  // .i.=l...
                /* 0E70 */  0x27, 0x50, 0xDC, 0x55, 0xC5, 0x07, 0x05, 0x1F,  // 'P.U....
                /* 0E78 */  0x00, 0xF0, 0x2E, 0x01, 0x75, 0x1D, 0xF4, 0xB8,  // ....u...
                /* 0E80 */  0x7D, 0xDE, 0x00, 0xFF, 0xF5, 0x02, 0x4B, 0x50,  // }.....KP
                /* 0E88 */  0xFE, 0x20, 0x50, 0x23, 0x33, 0xB4, 0xC7, 0xF9,  // . P#3...
                /* 0E90 */  0x36, 0x63, 0xC8, 0xF7, 0x80, 0xC3, 0x62, 0x62,  // 6c....bb
                /* 0E98 */  0x4F, 0x9D, 0x90, 0xFE, 0xFF, 0xE3, 0x01, 0xE3,  // O.......
                /* 0EA0 */  0xE0, 0x9F, 0x36, 0x7C, 0x15, 0xF7, 0x7C, 0x7D,  // ..6|..|}
                /* 0EA8 */  0x36, 0x03, 0x18, 0x3B, 0x1C, 0x1C, 0xF0, 0xFF,  // 6..;....
                /* 0EB0 */  0xFF, 0xD1, 0x07, 0xE6, 0x95, 0x84, 0x1F, 0x7E,  // .......~
                /* 0EB8 */  0x00, 0x67, 0x40, 0x0F, 0x3F, 0x60, 0x1F, 0x2A,  // .g@.?`.*
                /* 0EC0 */  0x6E, 0x08, 0x5C, 0xEE, 0x8A, 0x28, 0x90, 0x05,  // n.\..(..
                /* 0EC8 */  0xC2, 0xA0, 0x08, 0x2C, 0x0E, 0x48, 0x47, 0x4E,  // ...,.HGN
                /* 0ED0 */  0x9F, 0x72, 0xE1, 0x0C, 0xE5, 0x64, 0x7B, 0xBF,  // .r...d{.
                /* 0ED8 */  0x21, 0x90, 0xEB, 0x87, 0x87, 0x7A, 0x16, 0x4F,  // !....z.O
                /* 0EE0 */  0x0C, 0xEC, 0x98, 0x06, 0xFC, 0xC7, 0xC6, 0xFE,  // ........
                /* 0EE8 */  0xFF, 0x63, 0xC3, 0xCE, 0xFB, 0x79, 0x38, 0xC2,  // .c...y8.
                /* 0EF0 */  0xB1, 0x81, 0xFD, 0x9C, 0x06, 0x9C, 0x4E, 0x74,  // ......Nt
                /* 0EF8 */  0x70, 0x2E, 0x4E, 0xEC, 0xDE, 0x8E, 0x1B, 0x1A,  // p.N.....
                /* 0F00 */  0xD8, 0x86, 0xE5, 0xA1, 0x01, 0x9F, 0x23, 0x27,  // ......#'
                /* 0F08 */  0x18, 0x8F, 0x5A, 0xFC, 0x2A, 0xF1, 0xD4, 0xC5,  // ..Z.*...
                /* 0F10 */  0x8F, 0x21, 0xC0, 0xF6, 0xFF, 0x7F, 0xA4, 0x03,  // .!......
                /* 0F18 */  0x2C, 0x48, 0x7B, 0x06, 0xF9, 0x3C, 0x47, 0xC5,  // ,H{..<G.
                /* 0F20 */  0xC0, 0xA0, 0x8E, 0x74, 0x80, 0xB5, 0x1B, 0xDC,  // ...t....
                /* 0F28 */  0x3B, 0xC3, 0x4B, 0x83, 0xE7, 0xF4, 0x46, 0x67,  // ;.K...Fg
                /* 0F30 */  0x8C, 0x57, 0x39, 0x23, 0x44, 0x61, 0xB7, 0x81,  // .W9#Da..
                /* 0F38 */  0x68, 0xF6, 0x76, 0xA4, 0x23, 0xE7, 0x3A, 0x8E,  // h.v.#.:.
                /* 0F40 */  0x19, 0xE9, 0xF9, 0x2E, 0x58, 0xA4, 0x88, 0x87,  // ....X...
                /* 0F48 */  0x13, 0x25, 0x44, 0xB0, 0xD7, 0x89, 0x67, 0xBB,  // .%D...g.
                /* 0F50 */  0x47, 0x3A, 0x26, 0xE4, 0x1C, 0x43, 0x8F, 0x74,  // G:&..C.t
                /* 0F58 */  0xC0, 0xC3, 0xF5, 0x91, 0x0E, 0xF9, 0xFF, 0x3F,  // .......?
                /* 0F60 */  0x70, 0x80, 0xFD, 0x1C, 0x85, 0x3F, 0xD2, 0x01,  // p....?..
                /* 0F68 */  0xF7, 0x60, 0x87, 0x34, 0xD0, 0x9D, 0x5D, 0xC0,  // .`.4..].
                /* 0F70 */  0x75, 0x48, 0x03, 0xC7, 0xD8, 0xC1, 0x77, 0xB2,  // uH....w.
                /* 0F78 */  0xC2, 0x1D, 0xC9, 0xC0, 0x76, 0x7A, 0x01, 0x2E,  // ....vz..
                /* 0F80 */  0xFF, 0xFF, 0xD3, 0x0B, 0xE0, 0x67, 0xAC, 0x30,  // .....g.0
                /* 0F88 */  0xC6, 0xC0, 0xA3, 0x9D, 0xC8, 0x50, 0x61, 0x0E,  // .....Pa.
                /* 0F90 */  0x65, 0xE8, 0x20, 0xA7, 0x0F, 0x7A, 0x6A, 0x20,  // e. ..zj 
                /* 0F98 */  0xA7, 0x0F, 0xF4, 0x5C, 0x0E, 0xF4, 0x14, 0xDE,  // ...\....
                /* 0FA0 */  0x0F, 0x7C, 0x80, 0x02, 0xFB, 0xA9, 0x0C, 0x38,  // .|.....8
                /* 0FA8 */  0x9C, 0x1A, 0xF0, 0x81, 0x8E, 0x5A, 0xE8, 0x51,  // .....Z.Q
                /* 0FB0 */  0xF8, 0xF4, 0x09, 0xDE, 0x23, 0x19, 0x58, 0xFE,  // ....#.X.
                /* 0FB8 */  0xFF, 0x07, 0x2D, 0xB0, 0x3D, 0xF5, 0x7D, 0x12,  // ..-.=.}.
                /* 0FC0 */  0xC1, 0xB1, 0x18, 0xF5, 0x0D, 0xE2, 0x10, 0x5F,  // ......._
                /* 0FC8 */  0x43, 0x7C, 0xD8, 0x7F, 0x27, 0xF1, 0x25, 0x00,  // C|..'.%.
                /* 0FD0 */  0x73, 0x13, 0x31, 0xC1, 0x98, 0x10, 0xFA, 0x46,  // s.1....F
                /* 0FD8 */  0xFB, 0x54, 0x06, 0x9C, 0x8E, 0x9F, 0xF0, 0x46,  // .T.....F
                /* 0FE0 */  0x8F, 0x3B, 0x2D, 0x78, 0x38, 0x1C, 0xDC, 0xB3,  // .;-x8...
                /* 0FE8 */  0x79, 0x96, 0x78, 0xA2, 0xF1, 0x38, 0x7C, 0x3A,  // y.x..8|:
                /* 0FF0 */  0x01, 0x5E, 0x07, 0x0C, 0xCC, 0x0C, 0xC2, 0x3F,  // .^.....?
                /* 0FF8 */  0x84, 0xB0, 0x21, 0x9C, 0xAA, 0xC7, 0x70, 0xEE,  // ..!...p.
                /* 1000 */  0xEF, 0x36, 0x3E, 0x9D, 0x00, 0x1E, 0xFE, 0xFF,  // .6>.....
                /* 1008 */  0x47, 0x35, 0x60, 0x2B, 0x51, 0xC3, 0x39, 0x0D,  // G5`+Q.9.
                /* 1010 */  0x23, 0x0A, 0x06, 0x75, 0x54, 0x03, 0xAC, 0x5D,  // #..uT..]
                /* 1018 */  0xD4, 0x7C, 0x7D, 0x8F, 0xF0, 0x22, 0x70, 0x06,  // .|}.."p.
                /* 1020 */  0x21, 0x1E, 0xCF, 0x5E, 0xD1, 0x22, 0xF9, 0x0E,  // !..^."..
                /* 1028 */  0x10, 0xE7, 0x51, 0xCD, 0x60, 0x6F, 0x1F, 0x0F,  // ..Q.`o..
                /* 1030 */  0x12, 0x51, 0x1E, 0xE4, 0x0D, 0xF5, 0x30, 0x6F,  // .Q....0o
                /* 1038 */  0xA8, 0x93, 0x7F, 0x90, 0x37, 0x56, 0xD8, 0x40,  // ....7V.@
                /* 1040 */  0x4F, 0x6C, 0x2F, 0x6A, 0x21, 0x8D, 0xF0, 0xA8,  // Ol/j!...
                /* 1048 */  0xC6, 0x04, 0xBD, 0x3C, 0x74, 0x94, 0xF2, 0x51,  // ...<t..Q
                /* 1050 */  0x0D, 0xD8, 0xFE, 0xFF, 0x8F, 0x6A, 0x80, 0xB1,  // .....j..
                /* 1058 */  0xC3, 0x3C, 0xC0, 0xA6, 0xFF, 0xFF, 0x61, 0x1E,  // .<....a.
                /* 1060 */  0x18, 0x9E, 0x9E, 0x00, 0xFF, 0xC7, 0x1A, 0xDC,  // ........
                /* 1068 */  0x51, 0x11, 0x6C, 0xE7, 0x27, 0xE0, 0xF8, 0xFF,  // Q.l.'...
                /* 1070 */  0x3F, 0x3F, 0x01, 0xA3, 0xA1, 0xFB, 0xFC, 0x04,  // ??......
                /* 1078 */  0xE6, 0xD1, 0xC2, 0x3C, 0x20, 0x20, 0xCE, 0x8A,  // ...<  ..
                /* 1080 */  0xA8, 0xF0, 0x0F, 0x19, 0xC3, 0xA1, 0x82, 0x03,  // ........
                /* 1088 */  0xE9, 0x17, 0xE5, 0x23, 0x20, 0x70, 0x39, 0x2A,  // ...# p9*
                /* 1090 */  0x02, 0x87, 0x33, 0x0B, 0x5E, 0xC8, 0xA9, 0x03,  // ..3.^...
                /* 1098 */  0x3D, 0x1E, 0x83, 0xBE, 0x72, 0xF8, 0x4A, 0xC0,  // =...r.J.
                /* 10A0 */  0x8F, 0x1C, 0x2C, 0xF4, 0x91, 0x03, 0x54, 0x87,  // ..,...T.
                /* 10A8 */  0x45, 0xF0, 0x0D, 0x81, 0xFD, 0xFF, 0x8F, 0x1C,  // E.......
                /* 10B0 */  0xB0, 0xAF, 0x57, 0x81, 0xB1, 0xB7, 0x83, 0xD7,  // ..W.....
                /* 10B8 */  0x4F, 0x4F, 0xE2, 0x31, 0xEA, 0x38, 0x43, 0x14,  // OO.1.8C.
                /* 10C0 */  0x8E, 0x49, 0x0E, 0x06, 0x91, 0xDE, 0xC1, 0xD8,  // .I......
                /* 10C8 */  0x00, 0x5F, 0x5E, 0x7C, 0xA8, 0xF2, 0x31, 0x10,  // ._^|..1.
                /* 10D0 */  0x18, 0x42, 0x9C, 0x0D, 0x3F, 0x5D, 0x18, 0xF3,  // .B..?]..
                /* 10D8 */  0x74, 0xF8, 0x31, 0x10, 0xB0, 0x2E, 0xF5, 0x0C,  // t.1.....
                /* 10E0 */  0x88, 0x12, 0x77, 0x0C, 0x04, 0xD9, 0xFF, 0xFF,  // ..w.....
                /* 10E8 */  0x18, 0x08, 0x38, 0xB9, 0x04, 0x7A, 0xCC, 0x67,  // ..8..z.g
                /* 10F0 */  0xFC, 0xE6, 0xF7, 0xE4, 0x17, 0xE5, 0xF5, 0xFF,  // ........
                /* 10F8 */  0xF5, 0xEF, 0xDD, 0xC0, 0x58, 0x0F, 0x01, 0x4F,  // ....X..O
                /* 1100 */  0x80, 0xBE, 0xFF, 0xF9, 0x58, 0x11, 0x25, 0x60,  // ....X.%`
                /* 1108 */  0x94, 0x58, 0x2F, 0x82, 0xC6, 0x8C, 0x11, 0xEC,  // .X/.....
                /* 1110 */  0x1D, 0x30, 0xE6, 0x23, 0xA1, 0x47, 0x18, 0x2D,  // .0.#.G.-
                /* 1118 */  0xB8, 0x81, 0x1E, 0x03, 0x99, 0xB0, 0x63, 0x20,  // ......c 
                /* 1120 */  0x40, 0x8E, 0xFF, 0xFF, 0x31, 0x10, 0x60, 0xEE,  // @...1.`.
                /* 1128 */  0x09, 0x0A, 0x58, 0xFC, 0xFF, 0x4F, 0x50, 0x80,  // ..X..OP.
                /* 1130 */  0xC9, 0xA3, 0x20, 0x98, 0xCF, 0x50, 0x80, 0xB5,  // .. ..P..
                /* 1138 */  0xA3, 0x20, 0xD8, 0x47, 0xCB, 0xFF, 0xFF, 0xA3,  // . .G....
                /* 1140 */  0x85, 0x31, 0x0A, 0x2E, 0xE8, 0xE5, 0x61, 0x20,  // .1....a 
                /* 1148 */  0x2A, 0x01, 0x06, 0x45, 0xE0, 0xF8, 0x6B, 0x13,  // *..E..k.
                /* 1150 */  0x8C, 0x43, 0x9D, 0x5E, 0xD0, 0x07, 0x05, 0x0F,  // .C.^....
                /* 1158 */  0xFB, 0xA9, 0xC0, 0x93, 0x38, 0x55, 0x5F, 0x0B,  // ....8U_.
                /* 1160 */  0x8E, 0xE2, 0x09, 0xC0, 0x87, 0x41, 0xE0, 0x3F,  // .....A.?
                /* 1168 */  0x34, 0x58, 0x93, 0x28, 0x7E, 0x68, 0xA0, 0x3E,  // 4X.(~h.>
                /* 1170 */  0x7B, 0x80, 0x6F, 0x68, 0xE0, 0x88, 0x7A, 0xC6,  // {.oh..z.
                /* 1178 */  0x41, 0x9F, 0x88, 0x7C, 0x36, 0x88, 0xF9, 0xE6,  // A..|6...
                /* 1180 */  0x11, 0xE1, 0xC9, 0xC3, 0xD7, 0x07, 0x76, 0xF2,  // ......v.
                /* 1188 */  0xF4, 0xA9, 0x29, 0x50, 0x94, 0xF7, 0x0D, 0x1E,  // ..)P....
                /* 1190 */  0xE7, 0x94, 0x03, 0xAA, 0xC3, 0x2F, 0xF6, 0xFF,  // ...../..
                /* 1198 */  0x3F, 0x3C, 0x58, 0x07, 0x5E, 0x78, 0xC7, 0x29,  // ?<X.^x.)
                /* 11A0 */  0x1F, 0x4B, 0xC0, 0x77, 0x26, 0x85, 0x73, 0x73,  // .K.w&.ss
                /* 11A8 */  0xF1, 0x1D, 0x8F, 0x9D, 0x06, 0xC0, 0x66, 0xE3,  // ......f.
                /* 11B0 */  0x34, 0x00, 0x94, 0x8E, 0x55, 0xFC, 0x3C, 0x09,  // 4...U.<.
                /* 11B8 */  0x26, 0x98, 0x83, 0x79, 0xBF, 0xB6, 0xF7, 0xE3,  // &..y....
                /* 11C0 */  0x0D, 0x3D, 0x4D, 0x02, 0xEE, 0xFE, 0xFF, 0xA7,  // .=M.....
                /* 11C8 */  0x49, 0x30, 0x8B, 0x38, 0x4A, 0xA2, 0x62, 0x3F,  // I0.8J.b?
                /* 11D0 */  0xA4, 0x7C, 0x9A, 0x04, 0xE4, 0xDD, 0x19, 0x8C,  // .|......
                /* 11D8 */  0x70, 0xFE, 0x21, 0x1E, 0x20, 0x42, 0x3C, 0x48,  // p.!. B<H
                /* 11E0 */  0x1A, 0x24, 0x4E, 0x90, 0x97, 0x81, 0xA7, 0x49,  // .$N....I
                /* 11E8 */  0x5F, 0x26, 0xE3, 0x3C, 0x50, 0x46, 0x79, 0x9D,  // _&.<PFy.
                /* 11F0 */  0x34, 0xC2, 0xD1, 0xC7, 0x33, 0xD0, 0x8B, 0x64,  // 4...3..d
                /* 11F8 */  0x88, 0x57, 0xC9, 0x07, 0xCB, 0xF7, 0x49, 0xA3,  // .W....I.
                /* 1200 */  0xC5, 0x0A, 0x7E, 0x8C, 0x4F, 0x93, 0x2C, 0xF2,  // ..~.O.,.
                /* 1208 */  0x8A, 0x75, 0x9A, 0x04, 0x2C, 0xFD, 0xFF, 0x4F,  // .u..,..O
                /* 1210 */  0x93, 0x00, 0xFF, 0xFF, 0xFF, 0x67, 0x07, 0xB0,  // .....g..
                /* 1218 */  0x1D, 0xAC, 0x00, 0xA7, 0xE7, 0x79, 0xF0, 0x1C,  // .....y..
                /* 1220 */  0x1F, 0x61, 0x1C, 0x99, 0x00, 0x87, 0xFF, 0xFF,  // .a......
                /* 1228 */  0x23, 0x13, 0x78, 0xC6, 0x0A, 0x63, 0x0C, 0x3C,  // #.x..c.<
                /* 1230 */  0xF5, 0xE3, 0xD0, 0xC7, 0x01, 0x2A, 0xEA, 0xC0,  // .....*..
                /* 1238 */  0x24, 0x18, 0xCE, 0xE2, 0xC3, 0x82, 0x8F, 0x08,  // $.......
                /* 1240 */  0xFC, 0xB0, 0xE0, 0x11, 0x54, 0x3C, 0x4E, 0x7A,  // ....T<Nz
                /* 1248 */  0x2C, 0xF2, 0x61, 0x92, 0x1D, 0x12, 0x7C, 0x08,  // ,.a...|.
                /* 1250 */  0xF1, 0x20, 0x7D, 0x42, 0x05, 0xCF, 0xC1, 0x0A,  // . }B....
                /* 1258 */  0xDE, 0x75, 0x09, 0xCE, 0xA9, 0x00, 0x70, 0x93,  // .u....p.
                /* 1260 */  0xEB, 0xAD, 0xA2, 0xD3, 0x85, 0x03, 0x1C, 0xC0,  // ........
                /* 1268 */  0x64, 0xE3, 0x18, 0x42, 0x39, 0x1C, 0xF3, 0xED,  // d..B9...
                /* 1270 */  0xA1, 0x69, 0xB2, 0x23, 0x19, 0xCC, 0x58, 0x90,  // .i.#..X.
                /* 1278 */  0x3A, 0x09, 0x78, 0x00, 0x0E, 0x04, 0x23, 0xED,  // :.x...#.
                /* 1280 */  0x24, 0x1A, 0x8D, 0xE1, 0xAC, 0x16, 0x46, 0x70,  // $.....Fp
                /* 1288 */  0x06, 0xF1, 0x71, 0xC4, 0xB9, 0x8E, 0x54, 0xE8,  // ..q...T.
                /* 1290 */  0xCF, 0x81, 0x8F, 0x53, 0xEC, 0xFF, 0x3F, 0x71,  // ...S..?q
                /* 1298 */  0x07, 0xB9, 0x97, 0xD0, 0x79, 0xFB, 0x6E, 0xC0,  // ....y.n.
                /* 12A0 */  0xDF, 0x69, 0x1E, 0x8B, 0x81, 0x7D, 0x3B, 0x01,  // .i...};.
                /* 12A8 */  0xC7, 0x5C, 0xAC, 0x06, 0x14, 0x35, 0x00, 0xA3,  // .\...5..
                /* 12B0 */  0x61, 0x4E, 0x01, 0x4F, 0x25, 0xE0, 0x0A, 0x36,  // aN.O%..6
                /* 12B8 */  0x37, 0xF4, 0x85, 0xC5, 0x5A, 0xA7, 0xA2, 0xE3,  // 7...Z...
                /* 12C0 */  0xD3, 0xFB, 0xC0, 0xC1, 0x01, 0x8F, 0xD9, 0x7B,  // .......{
                /* 12C8 */  0x70, 0xB0, 0xD0, 0x3C, 0x38, 0xB0, 0x65, 0x1B,  // p..<8.e.
                /* 12D0 */  0x1C, 0x5A, 0xC9, 0x5D, 0x84, 0x1C, 0x3E, 0xF0,  // .Z.]..>.
                /* 12D8 */  0xB3, 0x03, 0x0E, 0x80, 0x9E, 0x1D, 0x2C, 0x24,  // ......,$
                /* 12E0 */  0xCF, 0x0E, 0x6C, 0xFA, 0x70, 0xC9, 0xFF, 0xFF,  // ..l.p...
                /* 12E8 */  0x2C, 0x02, 0x1B, 0xC8, 0xF7, 0x0E, 0x9F, 0x5B,  // ,......[
                /* 12F0 */  0x9E, 0x3D, 0xD8, 0x18, 0x1E, 0x5D, 0x8C, 0x66,  // .=...].f
                /* 12F8 */  0x74, 0xAE, 0xE9, 0x36, 0x81, 0x52, 0x71, 0x9B,  // t..6.Rq.
                /* 1300 */  0xA0, 0x20, 0xBE, 0x01, 0x38, 0x21, 0x8D, 0xEE,  // . ..8!..
                /* 1308 */  0x69, 0xB8, 0x99, 0x18, 0xFF, 0x11, 0xC3, 0x47,  // i......G
                /* 1310 */  0x84, 0x43, 0x3A, 0x5B, 0x13, 0xCC, 0x03, 0xA9,  // .C:[....
                /* 1318 */  0xF7, 0xA3, 0x2F, 0x7B, 0xF8, 0xD9, 0x87, 0x7C,  // ../{...|
                /* 1320 */  0x70, 0xF1, 0x34, 0x7C, 0xBD, 0x21, 0xF7, 0x0E,  // p.4|.!..
                /* 1328 */  0x3A, 0x6D, 0x9F, 0x19, 0x30, 0x27, 0x64, 0x5F,  // :m..0'd_
                /* 1330 */  0xA7, 0x12, 0x58, 0xD6, 0x55, 0x82, 0x7A, 0xB8,  // ..X.U.z.
                /* 1338 */  0x80, 0xD0, 0x0B, 0x8D, 0xEF, 0x85, 0x09, 0x1E,  // ........
                /* 1340 */  0xCE, 0x7C, 0x3B, 0x7B, 0x2F, 0x61, 0x87, 0xC3,  // .|;{/a..
                /* 1348 */  0x04, 0xEF, 0x86, 0x09, 0xE6, 0x1D, 0x04, 0x6A,  // .......j
                /* 1350 */  0x54, 0x1E, 0x04, 0xE6, 0xF2, 0xCF, 0xF2, 0x8D,  // T.......
                /* 1358 */  0x01, 0x95, 0xEC, 0xA2, 0x45, 0xCF, 0x30, 0xEF,  // ....E.0.
                /* 1360 */  0x30, 0xBE, 0x24, 0xF8, 0xFA, 0xE1, 0x73, 0x8B,  // 0.$...s.
                /* 1368 */  0x17, 0xF0, 0xBA, 0x05, 0x83, 0xE0, 0x19, 0xE8,  // ........
                /* 1370 */  0xD5, 0xC5, 0xB7, 0x7C, 0x03, 0xBF, 0x0A, 0xBC,  // ...|....
                /* 1378 */  0xD1, 0x84, 0x08, 0x66, 0xD8, 0xC3, 0x7F, 0xDB,  // ...f....
                /* 1380 */  0x37, 0xAA, 0x6F, 0x3A, 0xC6, 0x7A, 0x1D, 0xF1,  // 7.o:.z..
                /* 1388 */  0x48, 0xF9, 0xB1, 0xE5, 0x80, 0x22, 0xBD, 0xF5,  // H...."..
                /* 1390 */  0x79, 0x02, 0x3E, 0xCB, 0xF8, 0x38, 0x78, 0x52,  // y.>..8xR
                /* 1398 */  0xBE, 0x57, 0x1A, 0xFD, 0x15, 0xC2, 0x87, 0x1F,  // .W......
                /* 13A0 */  0x23, 0xFB, 0x9C, 0xC3, 0x0E, 0x86, 0x6C, 0x50,  // #.....lP
                /* 13A8 */  0x1C, 0xF1, 0x81, 0xE1, 0xA5, 0xC6, 0x53, 0x61,  // ......Sa
                /* 13B0 */  0xE7, 0x2E, 0x18, 0x07, 0x07, 0x76, 0x2C, 0xC2,  // .....v,.
                /* 13B8 */  0x5C, 0x1C, 0xB0, 0xFF, 0xFF, 0xA3, 0x1E, 0xEC,  // \.......
                /* 13C0 */  0x93, 0x8D, 0x4F, 0x0E, 0x60, 0x86, 0xC7, 0x9C,  // ..O.`...
                /* 13C8 */  0x98, 0x7D, 0xDE, 0xF0, 0xCD, 0xC0, 0xE3, 0xE2,  // .}......
                /* 13D0 */  0x47, 0x0E, 0x1F, 0xEF, 0x18, 0xF6, 0x69, 0xFA,  // G.....i.
                /* 13D8 */  0x68, 0xF4, 0xF2, 0xE6, 0xD3, 0x0B, 0x06, 0xD6,  // h.......
                /* 13E0 */  0x97, 0x06, 0x0E, 0x6B, 0xB4, 0xB0, 0x8F, 0x01,  // ...k....
                /* 13E8 */  0x67, 0xEE, 0x0B, 0x11, 0xEE, 0xD4, 0x09, 0x16,  // g.......
                /* 13F0 */  0x40, 0xFC, 0xAD, 0xE4, 0x91, 0xC3, 0x13, 0x30,  // @......0
                /* 13F8 */  0x20, 0xD3, 0xB4, 0x2E, 0x1D, 0x88, 0xF8, 0x29,  //  ......)
                /* 1400 */  0xCF, 0xCA, 0x57, 0xA6, 0xCB, 0x10, 0xC3, 0x78,  // ..W....x
                /* 1408 */  0x1C, 0x7D, 0xFC, 0xF0, 0x6C, 0x7C, 0x14, 0xF0,  // .}..l|..
                /* 1410 */  0x31, 0xCA, 0x33, 0x3F, 0xA3, 0x48, 0xAF, 0x0C,  // 1.3?.H..
                /* 1418 */  0x04, 0x54, 0x27, 0x22, 0xAE, 0x10, 0x46, 0x62,  // .T'"..Fb
                /* 1420 */  0x68, 0x74, 0xE7, 0xE0, 0xF1, 0x87, 0x48, 0x41,  // ht....HA
                /* 1428 */  0x0C, 0xE8, 0x9B, 0x0B, 0x30, 0x3D, 0x13, 0x81,  // ....0=..
                /* 1430 */  0xEB, 0xFF, 0x7F, 0x73, 0x01, 0xF8, 0xFF, 0xFF,  // ...s....
                /* 1438 */  0xBF, 0xB9, 0x00, 0xEE, 0xEE, 0x0F, 0xBE, 0xB9,  // ........
                /* 1440 */  0x00, 0xD7, 0x48, 0xAB, 0xA2, 0x37, 0x7D, 0x87,  // ..H..7}.
                /* 1448 */  0x80, 0x41, 0x5D, 0xF6, 0x01, 0x6B, 0xC7, 0x8D,  // .A]..k..
                /* 1450 */  0x97, 0x88, 0x87, 0x8D, 0xFF, 0xFF, 0x93, 0xC1,  // ........
                /* 1458 */  0xEB, 0x7D, 0x94, 0x67, 0x82, 0x53, 0x78, 0xCA,  // .}.g.Sx.
                /* 1460 */  0x3F, 0xAC, 0x38, 0xEF, 0x1B, 0x21, 0x5E, 0xF6,  // ?.8..!^.
                /* 1468 */  0x7D, 0xCB, 0xF7, 0xD9, 0xF4, 0x65, 0xDF, 0x37,  // }....e.7
                /* 1470 */  0x7D, 0xA3, 0x45, 0x09, 0xF6, 0xAC, 0x1F, 0x22,  // }.E...."
                /* 1478 */  0x68, 0xA4, 0x10, 0x01, 0x43, 0x3C, 0xF2, 0xC7,  // h...C<..
                /* 1480 */  0x0A, 0x17, 0xFD, 0x65, 0x9F, 0x05, 0x78, 0x13,  // ...e..x.
                /* 1488 */  0xE8, 0x28, 0xE3, 0xCB, 0x3E, 0xC0, 0x8F, 0x33,  // .(..>..3
                /* 1490 */  0xEC, 0xBB, 0x34, 0x78, 0xAF, 0xBA, 0xC0, 0xEA,  // ..4x....
                /* 1498 */  0xFF, 0x7F, 0xD5, 0x05, 0x9E, 0x82, 0xEF, 0xD3,  // ........
                /* 14A0 */  0x20, 0x1F, 0x2F, 0x18, 0xC6, 0xC1, 0x95, 0x93,  //  ./.....
                /* 14A8 */  0xD0, 0x63, 0x81, 0xB5, 0xC2, 0xA0, 0xEE, 0xD4,  // .c......
                /* 14B0 */  0xE0, 0xD2, 0x04, 0xAE, 0x8B, 0xAF, 0x0F, 0x35,  // .......5
                /* 14B8 */  0x3E, 0xD2, 0xE2, 0xCF, 0x17, 0xB8, 0x00, 0x43,  // >......C
                /* 14C0 */  0xA6, 0xA7, 0x32, 0x18, 0xD7, 0x14, 0x9F, 0xCA,  // ..2.....
                /* 14C8 */  0x30, 0x77, 0x07, 0x0F, 0xC8, 0x47, 0x0C, 0xE0,  // 0w...G..
                /* 14D0 */  0xB3, 0x0A, 0x0F, 0x0C, 0x77, 0x5A, 0xF0, 0x4D,  // ....wZ.M
                /* 14D8 */  0xC9, 0xA0, 0xE7, 0x18, 0xD4, 0x47, 0x9E, 0x93,  // .....G..
                /* 14E0 */  0xF7, 0x3D, 0xE1, 0x71, 0xC2, 0x51, 0xCF, 0x41,  // .=.q.Q.A
                /* 14E8 */  0x74, 0x6C, 0xF8, 0xFF, 0xFF, 0xD8, 0xE0, 0x1C,  // tl......
                /* 14F0 */  0x37, 0xC0, 0x71, 0xB8, 0xC1, 0x1D, 0x74, 0x7C,  // 7.q...t|
                /* 14F8 */  0x31, 0x38, 0x2E, 0x0C, 0xDC, 0x73, 0x81, 0x87,  // 18...s..
                /* 1500 */  0xE1, 0x9B, 0x8E, 0x47, 0x84, 0x19, 0xFF, 0xEB,  // ...G....
                /* 1508 */  0x9F, 0x11, 0x02, 0xE2, 0x2F, 0x46, 0x6C, 0xC0,  // ..../Fl.
                /* 1510 */  0x60, 0xBC, 0xB5, 0xF9, 0xFA, 0x86, 0x1B, 0xB0,  // `.......
                /* 1518 */  0xAF, 0x0E, 0xBE, 0x60, 0xF8, 0x04, 0x66, 0xF4,  // ...`..f.
                /* 1520 */  0x17, 0x98, 0x27, 0x31, 0x1F, 0x1B, 0xC8, 0x05,  // ..'1....
                /* 1528 */  0x8E, 0x0E, 0x18, 0x1C, 0x80, 0x1E, 0x30, 0xFC,  // ......0.
                /* 1530 */  0xC3, 0xC5, 0xBB, 0x1C, 0x18, 0xAE, 0x82, 0x3E,  // .......>
                /* 1538 */  0x2E, 0xF8, 0xD8, 0x63, 0x45, 0x77, 0x39, 0xF4,  // ...cEw9.
                /* 1540 */  0x4D, 0xCE, 0x30, 0x71, 0x0C, 0xF1, 0x06, 0xC6,  // M.0q....
                /* 1548 */  0xEE, 0x12, 0xE4, 0x30, 0x07, 0xF5, 0x2E, 0xE1,  // ...0....
                /* 1550 */  0x39, 0xF0, 0xB3, 0x85, 0x4F, 0x70, 0xBE, 0xF9,  // 9...Op..
                /* 1558 */  0x84, 0x38, 0xD5, 0x47, 0xAB, 0xF7, 0x00, 0x1F,  // .8.G....
                /* 1560 */  0x3D, 0xDE, 0xBB, 0x7C, 0x76, 0x62, 0x17, 0x01,  // =..|vb..
                /* 1568 */  0x1F, 0xB9, 0x8C, 0xE3, 0x69, 0xFA, 0x0A, 0xE8,  // ....i...
                /* 1570 */  0x21, 0x1B, 0xEC, 0x55, 0xC3, 0x27, 0x30, 0x1F,  // !..U.'0.
                /* 1578 */  0xDD, 0xF8, 0xFF, 0x1F, 0xD7, 0xC7, 0x28, 0xCF,  // ......(.
                /* 1580 */  0xC4, 0xD3, 0xF7, 0x1D, 0x84, 0x1D, 0x49, 0x8E,  // ......I.
                /* 1588 */  0x3A, 0xD4, 0x35, 0x3D, 0xA2, 0x9C, 0xD0, 0x81,  // :.5=....
                /* 1590 */  0xF8, 0xD6, 0x06, 0xCE, 0x68, 0xF7, 0x0F, 0xF4,  // ....h...
                /* 1598 */  0x36, 0x3D, 0x32, 0xCC, 0xD1, 0x00, 0xD6, 0x25,  // 6=2....%
                /* 15A0 */  0x04, 0x5C, 0x77, 0x0C, 0x5F, 0x42, 0x80, 0x4F,  // .\w._B.O
                /* 15A8 */  0xD0, 0x4B, 0x04, 0xFA, 0x9A, 0xE1, 0xD1, 0x3D,  // .K.....=
                /* 15B0 */  0x02, 0x60, 0xAE, 0x18, 0xEC, 0x58, 0xE0, 0xC3,  // .`...X..
                /* 15B8 */  0x86, 0xAF, 0x01, 0xEC, 0x5E, 0xE0, 0x30, 0xF7,  // ....^.0.
                /* 15C0 */  0x08, 0x50, 0x81, 0x7A, 0x78, 0xF0, 0xD5, 0xDE,  // .P.zx...
                /* 15C8 */  0x23, 0x40, 0x71, 0xB2, 0xF4, 0xA1, 0xC1, 0x03,  // #@q.....
                /* 15D0 */  0xB5, 0xAA, 0x33, 0x26, 0x94, 0x23, 0x26, 0x87,  // ..3&.#&.
                /* 15D8 */  0x8A, 0xC6, 0x6E, 0x05, 0xEC, 0x76, 0xE9, 0x9B,  // ..n..v..
                /* 15E0 */  0x04, 0xEE, 0xFF, 0x7F, 0x93, 0xC0, 0xE7, 0x99,  // ........
                /* 15E8 */  0x05, 0x2A, 0xC9, 0x4D, 0x02, 0x3A, 0x4C, 0x97,  // .*.M.:L.
                /* 15F0 */  0x97, 0x19, 0x3A, 0xFF, 0x03, 0xF7, 0xAD, 0xCE,  // ..:.....
                /* 15F8 */  0x23, 0xF4, 0x21, 0x82, 0xA1, 0xBC, 0xE7, 0xF9,  // #.!.....
                /* 1600 */  0x14, 0xC6, 0xCF, 0x10, 0x3E, 0x60, 0xB2, 0x33,  // ....>`.3
                /* 1608 */  0x05, 0x3F, 0x6B, 0xE2, 0xEE, 0x00, 0x46, 0x79,  // .?k...Fy
                /* 1610 */  0xF3, 0xF4, 0x04, 0xD8, 0xF9, 0xD3, 0xC8, 0xEF,  // ........
                /* 1618 */  0x06, 0xEF, 0x02, 0x9E, 0xBE, 0xEF, 0x45, 0xFC,  // ......E.
                /* 1620 */  0x44, 0x01, 0xBE, 0x60, 0x77, 0x3A, 0x28, 0xD0,  // D..`w:(.
                /* 1628 */  0x27, 0xE4, 0x11, 0x19, 0xD5, 0x47, 0x04, 0x7E,  // '....G.~
                /* 1630 */  0x49, 0x02, 0xE3, 0x91, 0xC4, 0x07, 0x0A, 0x20,  // I...... 
                /* 1638 */  0x74, 0x2F, 0x40, 0x9D, 0x3E, 0x38, 0xEA, 0x19,  // t/@.>8..
                /* 1640 */  0xBF, 0xA0, 0x1A, 0xF3, 0xDD, 0xEA, 0x11, 0xCE,  // ........
                /* 1648 */  0x93, 0xC3, 0x5C, 0x0E, 0x58, 0x9C, 0x6B, 0x12,  // ..\.X.k.
                /* 1650 */  0xA8, 0x8E, 0xBB, 0x7C, 0x74, 0x98, 0xFF, 0xFF,  // ...|t...
                /* 1658 */  0xE8, 0x60, 0x5C, 0x5B, 0xF1, 0x83, 0x7B, 0x67,  // .`\[..{g
                /* 1660 */  0x79, 0xE7, 0x33, 0x94, 0x07, 0x09, 0xBE, 0x6B,  // y.3....k
                /* 1668 */  0x2B, 0x38, 0xAE, 0x6A, 0x30, 0x8E, 0x2D, 0xFC,  // +8.j0.-.
                /* 1670 */  0x92, 0x07, 0xD8, 0x19, 0x16, 0x17, 0xFC, 0xF7,  // ........
                /* 1678 */  0x30, 0x10, 0x95, 0x08, 0x83, 0x22, 0xB0, 0xBC,  // 0...."..
                /* 1680 */  0x7B, 0x2B, 0x85, 0x3F, 0x64, 0x30, 0xDE, 0x14,  // {+.?d0..
                /* 1688 */  0xF8, 0xA4, 0xB1, 0xA3, 0x06, 0x3E, 0xFF, 0xFF,  // .....>..
                /* 1690 */  0x51, 0x03, 0x9B, 0xA1, 0xE2, 0x6E, 0x8A, 0x60,  // Q....n.`
                /* 1698 */  0x9D, 0x2A, 0x66, 0x08, 0x3C, 0xD8, 0x03, 0xC0,  // .*f.<...
                /* 16A0 */  0xE7, 0x2B, 0x9F, 0x01, 0x14, 0x05, 0x06, 0x75,  // .+.....u
                /* 16A8 */  0x68, 0x87, 0x73, 0x1B, 0x06, 0x1C, 0x8C, 0x18,  // h.s.....
                /* 16B0 */  0x77, 0x29, 0x84, 0x3B, 0xE5, 0x77, 0x94, 0xD8,  // w).;.w..
                /* 16B8 */  0xCF, 0xE5, 0x6C, 0xBA, 0xB8, 0xAB, 0xB9, 0x4F,  // ..l....O
                /* 16C0 */  0x27, 0xEC, 0x82, 0x0C, 0xE3, 0x2C, 0xF0, 0x08,  // '....,..
                /* 16C8 */  0xF0, 0x6A, 0xCE, 0x2F, 0xC8, 0x2F, 0xC4, 0x2F,  // .j./././
                /* 16D0 */  0x04, 0x6F, 0xC8, 0xBE, 0x29, 0x3D, 0x1B, 0xBC,  // .o..)=..
                /* 16D8 */  0xEC, 0xC4, 0x78, 0x37, 0xF6, 0x29, 0xD9, 0xE7,  // ..x7.)..
                /* 16E0 */  0x9D, 0x17, 0x64, 0x63, 0x1C, 0x4D, 0xC4, 0x28,  // ..dc.M.(
                /* 16E8 */  0xE7, 0xF6, 0x30, 0xF0, 0x9A, 0x6C, 0x94, 0xF7,  // ..0..l..
                /* 16F0 */  0x93, 0x17, 0x82, 0x88, 0xD1, 0x0C, 0x11, 0x34,  // .......4
                /* 16F8 */  0x46, 0xA0, 0x58, 0xFF, 0xFF, 0x40, 0xF1, 0x5E,  // F.X..@.^
                /* 1700 */  0x90, 0x99, 0xC0, 0xB7, 0x82, 0x0E, 0x2E, 0xBE,  // ........
                /* 1708 */  0x20, 0x03, 0xFC, 0x38, 0x19, 0x01, 0x36, 0xFF,  //  ..8..6.
                /* 1710 */  0xFF, 0x27, 0x0E, 0xEC, 0xA5, 0x1A, 0x7C, 0x27,  // .'....|'
                /* 1718 */  0x1B, 0xC0, 0xD9, 0xD0, 0x7D, 0xB2, 0x01, 0xF7,  // ....}...
                /* 1720 */  0x68, 0xE1, 0x1D, 0x4D, 0x10, 0x27, 0x1B, 0x0A,  // h..M.'..
                /* 1728 */  0xE4, 0xE0, 0xEB, 0xA2, 0x70, 0x3C, 0xF4, 0x49,  // ....p<.I
                /* 1730 */  0x84, 0x1E, 0x9D, 0x7C, 0x94, 0xC4, 0x9D, 0x19,  // ...|....
                /* 1738 */  0x3C, 0x91, 0x77, 0x16, 0x8F, 0xE2, 0x65, 0xD0,  // <.w...e.
                /* 1740 */  0xF7, 0x82, 0x13, 0x79, 0x7D, 0xB0, 0x9C, 0x63,  // ...y}..c
                /* 1748 */  0x24, 0xA8, 0x46, 0xE2, 0xE3, 0x03, 0xFC, 0xEB,  // $.F.....
                /* 1750 */  0x8B, 0x8F, 0x91, 0xD8, 0xFF, 0xFF, 0x31, 0x12,  // ......1.
                /* 1758 */  0x06, 0x9F, 0x7F, 0x58, 0x1E, 0x8C, 0x21, 0x7D,  // ...X..!}
                /* 1760 */  0x8A, 0xE4, 0x20, 0xCF, 0x2E, 0x8F, 0x21, 0xFC,  // .. ...!.
                /* 1768 */  0x02, 0x09, 0xF7, 0x34, 0x73, 0x00, 0x18, 0x59,  // ...4s..Y
                /* 1770 */  0x97, 0x47, 0xF4, 0xD9, 0x91, 0x63, 0xC4, 0xF5,  // .G...c..
                /* 1778 */  0x45, 0xD1, 0x57, 0x60, 0x1F, 0x04, 0xCE, 0xE7,  // E.W`....
                /* 1780 */  0x39, 0x11, 0xAC, 0xA3, 0xE6, 0x47, 0x1B, 0x3E,  // 9....G.>
                /* 1788 */  0x7E, 0x0E, 0xFE, 0x56, 0xF0, 0x40, 0xE9, 0x63,  // ~..V.@.c
                /* 1790 */  0x51, 0x88, 0x47, 0x24, 0x7E, 0x4E, 0x04, 0x97,  // Q.G$~N..
                /* 1798 */  0x89, 0x73, 0x22, 0x90, 0x38, 0xF4, 0xC2, 0x38,  // .s".8..8
                /* 17A0 */  0x2D, 0xE0, 0x06, 0xE2, 0x33, 0x25, 0x76, 0xCA,  // -...3%v.
                /* 17A8 */  0x27, 0xC2, 0xCE, 0x25, 0x98, 0xD1, 0x81, 0xEB,  // '..%....
                /* 17B0 */  0x72, 0xEF, 0xD1, 0x81, 0xF1, 0xFF, 0x7F, 0x12,  // r.......
                /* 17B8 */  0x80, 0x8D, 0xF5, 0x78, 0x07, 0xBE, 0x93, 0xBA,  // ...x....
                /* 17C0 */  0xEF, 0x26, 0xBE, 0xC8, 0xF8, 0x50, 0xF4, 0x7C,  // .&...P.|
                /* 17C8 */  0x07, 0xF8, 0x0F, 0x77, 0xB8, 0x43, 0xC5, 0x39,  // ...w.C.9
                /* 17D0 */  0xDF, 0x01, 0x52, 0xFE, 0xFF, 0xE7, 0x3B, 0xC0,  // ..R...;.
                /* 17D8 */  0xC2, 0xD9, 0xFA, 0xF9, 0x0E, 0xEC, 0x22, 0xCF,  // ......".
                /* 17E0 */  0x77, 0x00, 0x71, 0xFE, 0xFF, 0xE7, 0x3B, 0xC0,  // w.q...;.
                /* 17E8 */  0xDE, 0x19, 0x0D, 0x77, 0xBE, 0x03, 0xDB, 0xD1,  // ...w....
                /* 17F0 */  0x06, 0x30, 0x37, 0x8D, 0x47, 0x1B, 0x70, 0x0F,  // .07.G.p.
                /* 17F8 */  0x17, 0xFF, 0xFF, 0x3F, 0xE1, 0xC1, 0x52, 0x68,  // ...?..Rh
                /* 1800 */  0xD3, 0xA7, 0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4,  // ..F.V...
                /* 1808 */  0x28, 0xD3, 0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19,  // (..V.J..
                /* 1810 */  0x8B, 0x0F, 0xA5, 0x80, 0x8F, 0x0A, 0x8D, 0xCD,  // ........
                /* 1818 */  0xF2, 0x28, 0x04, 0x62, 0x31, 0xAF, 0x06, 0x81,  // .(.b1...
                /* 1820 */  0x38, 0x2C, 0x08, 0x8D, 0xF4, 0xCA, 0x11, 0x88,  // 8,......
                /* 1828 */  0x25, 0x3F, 0xFB, 0x05, 0x62, 0xB9, 0x6F, 0x06,  // %?..b.o.
                /* 1830 */  0x81, 0x38, 0xE0, 0x1B, 0x4C, 0xE0, 0xE4, 0x61,  // .8..L..a
                /* 1838 */  0x25, 0x70, 0xF2, 0x6E, 0x10, 0x88, 0x23, 0x83,  // %p.n..#.
                /* 1840 */  0x50, 0xA1, 0x3A, 0x40, 0x58, 0x4C, 0x10, 0x1A,  // P.:@XL..
                /* 1848 */  0xCA, 0x07, 0x08, 0x93, 0xFE, 0x48, 0x10, 0x20,  // .....H. 
                /* 1850 */  0x31, 0x02, 0xC2, 0xC2, 0xBD, 0xBF, 0x04, 0x62,  // 1......b
                /* 1858 */  0x69, 0xEF, 0x09, 0x81, 0x58, 0x88, 0x15, 0x10,  // i...X...
                /* 1860 */  0x16, 0x17, 0x84, 0x86, 0xD3, 0x02, 0xC2, 0x24,  // .......$
                /* 1868 */  0x99, 0x01, 0x61, 0x81, 0x40, 0xA8, 0x7C, 0x35,  // ..a.@.|5
                /* 1870 */  0x20, 0x4C, 0xA4, 0x1B, 0x40, 0xBA, 0x7A, 0x81,  //  L..@.z.
                /* 1878 */  0x38, 0x88, 0x1E, 0x10, 0x26, 0xC3, 0x0F, 0x08,  // 8...&...
                /* 1880 */  0x0B, 0x0D, 0x42, 0xA3, 0x3D, 0x30, 0x04, 0x48,  // ..B.=0.H
                /* 1888 */  0x0C, 0x81, 0xB0, 0xF8, 0x8E, 0x40, 0x98, 0xF8,  // .....@..
                /* 1890 */  0x57, 0x91, 0x40, 0x9C, 0xDF, 0x12, 0xC4, 0x4D,  // W.@....M
                /* 1898 */  0x69, 0x88, 0x35, 0x01, 0x31, 0x0D, 0x9E, 0x80,  // i.5.1...
                /* 18A0 */  0x98, 0x22, 0x10, 0x01, 0x39, 0xF6, 0xD3, 0x43,  // ."..9..C
                /* 18A8 */  0x40, 0xD6, 0x60, 0x0A, 0x88, 0x45, 0x07, 0x11,  // @.`..E..
                /* 18B0 */  0x90, 0x85, 0xA8, 0x02, 0x62, 0x79, 0x5D, 0x01,  // ....by].
                /* 18B8 */  0xB1, 0xF0, 0x20, 0x02, 0x72, 0xE6, 0x97, 0x9F,  // .. .r...
                /* 18C0 */  0x80, 0xAC, 0xE0, 0xA5, 0xF3, 0x10, 0xC0, 0xDE,  // ........
                /* 18C8 */  0x10, 0x81, 0x48, 0x72, 0x10, 0x01, 0x39, 0xB0,  // ..Hr..9.
                /* 18D0 */  0x2F, 0x20, 0x16, 0x1F, 0x44, 0x40, 0xCE, 0xFA,  // / ..D@..
                /* 18D8 */  0x28, 0x14, 0x90, 0x83, 0x83, 0x68, 0x10, 0xE4,  // (....h..
                /* 18E0 */  0x6B, 0x26, 0x20, 0xA7, 0x07, 0x11, 0x10, 0xF9,  // k& .....
                /* 18E8 */  0x04, 0x05, 0x21, 0x6A, 0xBD, 0x81, 0x30, 0x3D,  // ..!j..0=
                /* 18F0 */  0x8F, 0x42, 0x0D, 0x85, 0x80, 0x50, 0xE5, 0xEA,  // .B...P..
                /* 18F8 */  0xCE, 0x31, 0x2C, 0x07, 0x08, 0xF9, 0xFF, 0x13,  // .1,.....
                /* 1900 */  0xCC, 0x05, 0x22, 0x30, 0xAB, 0x70, 0x07, 0xC4,  // .."0.p..
                /* 1908 */  0x54, 0x81, 0x08, 0xC8, 0x09, 0x80, 0x68, 0x2A,  // T.....h*
                /* 1910 */  0x10, 0x9A, 0x12, 0x8C, 0xEA, 0x92, 0x07, 0xC4,  // ........
                /* 1918 */  0x12, 0x80, 0xD0, 0x54, 0x20, 0x34, 0x25, 0x88,  // ...T 4%.
                /* 1920 */  0x00, 0xAD, 0xCA, 0x1E, 0x10, 0x53, 0x0A, 0x42,  // .....S.B
                /* 1928 */  0x95, 0x83, 0xD0, 0x74, 0x20, 0x54, 0xB6, 0xBE,  // ...t T..
                /* 1930 */  0xC3, 0x02, 0x05, 0x11, 0x90, 0xA3, 0x83, 0x50,  // .......P
                /* 1938 */  0xE1, 0xFE, 0x40, 0x98, 0xDE, 0x97, 0x86, 0x00,  // ..@.....
                /* 1940 */  0x9D, 0x0E, 0x44, 0x40, 0x4E, 0x0C, 0x42, 0x15,  // ..D@N.B.
                /* 1948 */  0x7C, 0x32, 0x82, 0x10, 0xB1, 0x20, 0x54, 0xC1,  // |2... T.
                /* 1950 */  0x27, 0x23, 0x28, 0xD1, 0xF2, 0xB2, 0x13, 0x90,  // '#(.....
                /* 1958 */  0xF5, 0x81, 0x50, 0xBD, 0x20, 0x02, 0x73, 0x36,  // ..P. .s6
                /* 1960 */  0x20, 0x9A, 0x17, 0x84, 0xE6, 0x07, 0xA3, 0x5A,  //  ......Z
                /* 1968 */  0x8D, 0x02, 0x31, 0xFD, 0x20, 0x34, 0x0F, 0x88,  // ..1. 4..
                /* 1970 */  0xC0, 0xAC, 0xE0, 0xF9, 0x71, 0xC0, 0x0C, 0x84,  // ....q...
                /* 1978 */  0xAA, 0x04, 0x11, 0x98, 0x73, 0x01, 0xD1, 0xAC,  // ....s...
                /* 1980 */  0x20, 0x34, 0x3B, 0x18, 0xD5, 0xFE, 0x0F, 0xD1,  //  4;.....
                /* 1988 */  0x00, 0x08, 0x08, 0xCD, 0x07, 0xA2, 0xC3, 0x00,  // ........
                /* 1990 */  0x79, 0x96, 0x09, 0xC8, 0x1A, 0x41, 0xA8, 0x66,  // y....A.f
                /* 1998 */  0x10, 0x1D, 0x0F, 0x08, 0x10, 0xCD, 0x0F, 0x42,  // .......B
                /* 19A0 */  0xF5, 0xFC, 0x4D, 0x82, 0x91, 0x0C, 0x20, 0x02,  // ..M... .
                /* 19A8 */  0xB2, 0x96, 0x27, 0x68, 0x20, 0x92, 0xEA, 0x19,  // ..'h ...
                /* 19B0 */  0x14, 0x88, 0x24, 0x05, 0xA1, 0xC9, 0x41, 0x04,  // ..$...A.
                /* 19B8 */  0x66, 0xA5, 0x6F, 0x1D, 0x01, 0x59, 0x3D, 0x08,  // f.o..Y=.
                /* 19C0 */  0x4D, 0x03, 0x22, 0x30, 0x67, 0x71, 0x0B, 0xC2,  // M."0gq..
                /* 19C8 */  0x94, 0x3C, 0x5B, 0x04, 0xE2, 0x94, 0x20, 0x34,  // .<[... 4
                /* 19D0 */  0xA1, 0xDD, 0x23, 0x02, 0x7D, 0xAF, 0x3C, 0x1A,  // ..#.}.<.
                /* 19D8 */  0x30, 0x10, 0x9A, 0x12, 0x44, 0x47, 0x04, 0x22,  // 0...DG."
                /* 19E0 */  0x18, 0xC8, 0xFF, 0xFF, 0x41, 0x0B, 0x84, 0x6A,  // ....A..j
                /* 19E8 */  0x07, 0xD1, 0xD0, 0x08, 0x10, 0xCD, 0x0F, 0x42,  // .......B
                /* 19F0 */  0xF5, 0xBC, 0xD1, 0x34, 0x4C, 0xF2, 0x41, 0x12,  // ...4L.A.
                /* 19F8 */  0x88, 0xD3, 0x80, 0x50, 0x95, 0x5F, 0x2B, 0x1D,  // ...P._+.
                /* 1A00 */  0x08, 0xC8, 0x97, 0x48, 0x07, 0x02, 0x02, 0x42,  // ...H...B
                /* 1A08 */  0xF5, 0x82, 0xE8, 0x40, 0x40, 0x80, 0x68, 0x5E,  // ...@@.h^
                /* 1A10 */  0x10, 0x9A, 0x1F, 0x8C, 0xE6, 0x7F, 0x07, 0xE9,  // ........
                /* 1A18 */  0xF8, 0x41, 0x1E, 0x6E, 0x1A, 0x18, 0x01, 0xA1,  // .A.n....
                /* 1A20 */  0xEA, 0x7E, 0x35, 0x41, 0x88, 0xB2, 0xA7, 0x95,  // .~5A....
                /* 1A28 */  0x40, 0xC8, 0xAB, 0x26, 0x30, 0xFB, 0xD5, 0x6A,  // @..&0..j
                /* 1A30 */  0x00, 0xD6, 0x64, 0xFC, 0x18, 0x40, 0x41, 0x04,  // ..d..@A.
                /* 1A38 */  0xE6, 0x4C, 0x40, 0x34, 0x27, 0x08, 0xCD, 0x0D,  // .L@4'...
                /* 1A40 */  0x42, 0xF5, 0x7C, 0x71, 0x34, 0x4C, 0x02, 0x22,  // B.|q4L."
                /* 1A48 */  0x50, 0xEB, 0x7D, 0xEC, 0x04, 0x21, 0x69, 0x41,  // P.}..!iA
                /* 1A50 */  0x68, 0x92, 0x97, 0x58, 0x10, 0x92, 0xC2, 0xFB,  // h..X....
                /* 1A58 */  0x20, 0xA9, 0x78, 0x10, 0xA6, 0x5B, 0x3D, 0x38,  //  .x..[=8
                /* 1A60 */  0xCB, 0x02, 0x42, 0xB3, 0x81, 0x68, 0xA0, 0xE4,  // ..B..h..
                /* 1A68 */  0x6D, 0x77, 0xA0, 0x0C, 0x84, 0xEA, 0x05, 0x11,  // mw......
                /* 1A70 */  0x98, 0x73, 0x02, 0xD1, 0xEC, 0x20, 0x54, 0xD9,  // .s... T.
                /* 1A78 */  0x33, 0x4D, 0xC3, 0x20, 0x20, 0x02, 0x72, 0x32,  // 3M.  .r2
                /* 1A80 */  0x10, 0x9A, 0x14, 0x8C, 0x26, 0xF5, 0x0F, 0xC2,  // ....&...
                /* 1A88 */  0x74, 0xBE, 0x52, 0x35, 0x60, 0x52, 0x60, 0xA0,  // t.R5`R`.
                /* 1A90 */  0x14, 0x84, 0x26, 0x4D, 0x70, 0xA8, 0xA1, 0x19,  // ..&Mp...
                /* 1A98 */  0xC0, 0x99, 0x24, 0x10, 0x2A, 0x13, 0x44, 0x07,  // ..$.*.D.
                /* 1AA0 */  0x15, 0x6B, 0x06, 0x11, 0xA0, 0xE3, 0x81, 0xD1,  // .k......
                /* 1AA8 */  0xA8, 0x20, 0x34, 0x3E, 0x20, 0xD5, 0xD2, 0xE1,  // . 4> ...
                /* 1AB0 */  0xA0, 0x42, 0x41, 0x04, 0xE6, 0x14, 0x20, 0x34,  // .BA... 4
                /* 1AB8 */  0x19, 0x88, 0x00, 0x1D, 0x13, 0x90, 0x86, 0x08,  // ........
                /* 1AC0 */  0x01, 0xC6, 0x22, 0x81, 0x90, 0xFF, 0xFF, 0x81,  // ..".....
                /* 1AC8 */  0x44, 0x20, 0x34, 0x69, 0x09, 0x50, 0x96, 0x1B,  // D 4i.P..
                /* 1AD0 */  0x44, 0x83, 0x26, 0x29, 0x8E, 0x12, 0x14, 0x84,  // D.&)....
                /* 1AD8 */  0x66, 0x04, 0xA1, 0x99, 0x41, 0x68, 0x98, 0x16,  // f...Ah..
                /* 1AE0 */  0x20, 0x2C, 0x18, 0x08, 0x0D, 0x0B, 0xA2, 0xE3,  //  ,......
                /* 1AE8 */  0x0D, 0x01, 0xD1, 0xF1, 0x83, 0xC4, 0x38, 0x4C,  // ......8L
                /* 1AF0 */  0x50, 0x10, 0xAA, 0xA6, 0x06, 0x08, 0x0B, 0x0F,  // P.......
                /* 1AF8 */  0x22, 0x50, 0x4B, 0xC9, 0x01, 0xCA, 0xA2, 0x80,  // "PK.....
                /* 1B00 */  0x08, 0xCC, 0x01, 0x41, 0x68, 0x6C, 0x10, 0x2A,  // ...Ahl.*
                /* 1B08 */  0xA3, 0x07, 0x08, 0x8B, 0x18, 0x04, 0x94, 0x09,  // ........
                /* 1B10 */  0x2C, 0x02, 0xC2, 0x24, 0x36, 0x39, 0xC2, 0x50,  // ,..$69.P
                /* 1B18 */  0x10, 0x1A, 0x03, 0x44, 0x60, 0x0E, 0x0E, 0x44,  // ...D`..D
                /* 1B20 */  0xC5, 0x44, 0x01, 0x61, 0xE2, 0x40, 0x68, 0x0C,  // .D.a.@h.
                /* 1B28 */  0x10, 0x01, 0x12, 0x20, 0x2A, 0xA6, 0x0A, 0x20,  // ... *.. 
                /* 1B30 */  0x05, 0xA1, 0x29, 0x40, 0xA8, 0xAA, 0x2C, 0x87,  // ..)@..,.
                /* 1B38 */  0x10, 0x0A, 0xA2, 0x43, 0x0A, 0x01, 0xA1, 0x79,  // ...C...y
                /* 1B40 */  0xC1, 0xA8, 0xCE, 0x2E, 0x47, 0x0F, 0x0A, 0x42,  // ....G..B
                /* 1B48 */  0xB3, 0x80, 0xD0, 0xE0, 0x20, 0x34, 0x57, 0x98,  // .... 4W.
                /* 1B50 */  0xC3, 0x03, 0x2D, 0x73, 0x78, 0xA0, 0x20, 0x54,  // ..-sx. T
                /* 1B58 */  0x2F, 0x88, 0x8E, 0x25, 0x04, 0x88, 0x26, 0x07,  // /..%..&.
                /* 1B60 */  0xA1, 0xBA, 0xD2, 0x1C, 0x58, 0x68, 0x9E, 0x03,  // ....Xh..
                /* 1B68 */  0x0D, 0xED, 0x73, 0x64, 0xA0, 0x20, 0x34, 0x53,  // ..sd. 4S
                /* 1B70 */  0xA1, 0x83, 0x06, 0x05, 0xA1, 0xB9, 0x41, 0xA8,  // ......A.
                /* 1B78 */  0xB2, 0x44, 0xC3, 0xA3, 0x20, 0x02, 0x75, 0x72,  // .D.. .ur
                /* 1B80 */  0x20, 0xAA, 0xA6, 0x11, 0x08, 0x53, 0x07, 0xA2,  //  ....S..
                /* 1B88 */  0x01, 0x10, 0x20, 0x9A, 0x13, 0x84, 0xE6, 0x06,  // .. .....
                /* 1B90 */  0xA3, 0x0A, 0x3B, 0x81, 0xB0, 0x7C, 0x20, 0xE4,  // ..;..| .
                /* 1B98 */  0xFF, 0x7F, 0x64, 0x52, 0x28, 0x10, 0xF6, 0xFF,  // ..dR(...
                /* 1BA0 */  0x07                                             // .
            })
        }

        Mutex (C13C, 0x00)
        Method (C147, 5, NotSerialized)
        {
            Acquire (C13C, 0xFFFF)
            If (Arg4)
            {
                Acquire (\_GL, 0xFFFF)
            }

            C05B = (Arg0 << 0x10)
            C05C = Arg1
            C05D = Arg2
            C05E = Arg3
            C05F = 0x00
            \C136 (Arg0)
            Local0 = C05F /* \_SB_.C05F */
            If (Arg4)
            {
                Release (\_GL)
            }

            Release (C13C)
            Return (Local0)
        }

        OperationRegion (C2A4, SystemIO, 0x80, 0x01)
        Field (C2A4, ByteAcc, NoLock, Preserve)
        {
            C2A5,   8
        }

        OperationRegion (C2A6, SystemIO, 0x054C, 0x04)
        Field (C2A6, ByteAcc, NoLock, Preserve)
        {
            C2A7,   8, 
            C2A8,   8, 
            C2A9,   8, 
            C2AA,   8
        }

        Mutex (C2AB, 0x00)
        Mutex (C2AC, 0x00)
        Name (C2AD, 0x00)
        Method (C2B4, 1, NotSerialized)
        {
            Acquire (C2AB, 0xFFFF)
            C2A9 = Arg0
            C2A5 = Arg0
            Release (C2AB)
            Return (0x00)
        }

        Method (C2B6, 1, NotSerialized)
        {
            Acquire (C2AB, 0xFFFF)
            C2AA = Arg0
            Release (C2AB)
            Return (0x00)
        }

        Method (C144, 1, NotSerialized)
        {
            Acquire (C2AB, 0xFFFF)
            C2A9 = (Arg0 & 0xFF)
            C2AA = ((Arg0 >> 0x08) & 0xFF)
            C2A5 = (Arg0 & 0xFF)
            C2B8 (Arg0)
            Release (C2AB)
            Return (0x00)
        }

        Method (C28E, 1, NotSerialized)
        {
            Return (0x00)
        }

        Method (C2B7, 1, NotSerialized)
        {
            Return (0x00)
        }

        Method (C2B5, 0, NotSerialized)
        {
            Return (0x00)
        }

        Method (C2C6, 0, Serialized)
        {
            Acquire (C2AC, 0xFFFF)
            C2B4 (C2AD)
            Release (C2AC)
        }

        Method (C2C7, 0, Serialized)
        {
            Acquire (C2AC, 0xFFFF)
            C144 (C2AD)
            Release (C2AC)
        }

        Method (C2B8, 1, Serialized)
        {
            Return (0x00)
        }
    }

    Scope (\_TZ)
    {
        Name (C2CA, Package (0x04)
        {
            Package (0x02)
            {
                Package (0x08)
                {
                    0x0AAC, 
                    0x0C28, 
                    0x0C8C, 
                    0x0CF0, 
                    0x0D54, 
                    0x0DB8, 
                    0x0DFE, 
                    0x0E44
                }, 

                Package (0x08)
                {
                    0x0C5A, 
                    0x0CBE, 
                    0x0D22, 
                    0x0D86, 
                    0x0DEA, 
                    0x0E30, 
                    0x0E62, 
                    0x0FA3
                }
            }, 

            Package (0x02)
            {
                Package (0x03)
                {
                    0x0AAC, 
                    0x0DCC, 
                    0x0DD6
                }, 

                Package (0x03)
                {
                    0x0EA8, 
                    0x0EC6, 
                    0x0FA3
                }
            }, 

            Package (0x02)
            {
                Package (0x03)
                {
                    0x0AAC, 
                    0x0AAC, 
                    0x0AAC
                }, 

                Package (0x03)
                {
                    0x0D9A, 
                    0x0D9A, 
                    0x0FA3
                }
            }, 

            Package (0x02)
            {
                Package (0x02)
                {
                    0x0AAC, 
                    0x0CA0
                }, 

                Package (0x02)
                {
                    0x0D04, 
                    0x0FA3
                }
            }
        })
        Name (C2CB, Package (0x06)
        {
            0x64, 
            0x5A, 
            0x50, 
            0x46, 
            0x2D, 
            0x00
        })
        Name (C2CC, 0x00)
        Name (C2CD, 0x01)
        Name (C2CE, 0x02)
        Name (C2CF, 0x03)
        Name (C2D0, 0x04)
        Name (C2D1, 0x05)
        Name (C2D2, 0x06)
        Name (C2D3, 0x00)
        Name (C2D4, 0x00)
        Name (C2D5, 0x00)
        Name (C2D6, 0x00)
        Name (C2D7, Package (0x04){})
        Name (C2D8, Package (0x04){})
        Name (C2D9, Package (0x04){})
        Name (C2DA, Buffer (0x01){})
        Mutex (C1C7, 0x00)
        Name (C1C8, 0x0F)
        Name (C04F, 0x00)
        Name (C1CC, 0x14)
        Method (C2DB, 2, Serialized)
        {
            Local1 = (0x01 << Arg1)
            If ((DerefOf (C2DA [Arg0]) & Local1))
            {
                Local0 = 0x01
            }
            Else
            {
                Local0 = 0x00
            }

            Return (Local0)
        }

        Method (C2DC, 3, Serialized)
        {
            Local4 = DerefOf (C2DA [Arg1])
            Local1 = Local4
            Local0 = (0x01 << Arg2)
            If ((Arg0 == 0x01))
            {
                Local4 |= Local0
            }
            Else
            {
                Local4 &= ~Local0
            }

            C2DA [Arg1] = Local4
            If ((Local1 != Local4))
            {
                Local5 = 0x00
                Local2 = 0x00
                While ((Local5 < 0x01))
                {
                    Local2 |= DerefOf (C2DA [Local5])
                    Local5++
                }

                Local3 = 0x00
                Local0 = 0x00
                While ((Local2 != 0x00))
                {
                    If ((Local2 & 0x01))
                    {
                        Local0 = DerefOf (C2CB [Local3])
                        Local2 = 0x00
                    }
                    Else
                    {
                        Local2 = (Local2 >> 0x01)
                        Local3 += 0x01
                    }
                }

                \_SB.C002.C003.C005.C1A0 (Local0)
            }
        }

        Method (C2DD, 2, Serialized)
        {
            Local0 = 0x01
            Local1 = Arg0
            Local3 = DerefOf (C2D9 [Arg1])
            If ((Local3 == 0xFFFFFFFD))
            {
                Local3 = 0x00
            }

            If ((Arg0 < Local3))
            {
                Local0 = 0x00
                Local1 = (Arg0 + 0x01)
            }

            Local2 = DerefOf (DerefOf (DerefOf (C2CA [C2DE (Arg1)]) [
                Local0]) [Local1])
            Return (Local2)
        }

        Method (C2DF, 2, Serialized)
        {
            If ((Arg0 & 0x80))
            {
                Local0 = (Arg0 - 0x0100)
            }
            Else
            {
                Local0 = Arg0
            }

            If ((Arg1 == 0x01))
            {
                Local2 = (Local0 + C04F) /* \_TZ_.C04F */
            }
            Else
            {
                Local2 = (Local0 - C04F) /* \_TZ_.C04F */
            }

            If ((Local2 > 0x7F))
            {
                If (((Local2 & 0x8000) == 0x00))
                {
                    Local2 = 0x7F
                }

                Local2 &= 0xFF
            }

            Return (Local2)
        }

        Method (C2E0, 0, Serialized)
        {
            Local0 = \_SB.C038
            Local2 = \_SB.C039
            Local3 = \_SB.C03A
            Local1 = 0x00
            While ((Local1 < Local0))
            {
                If (Local1)
                {
                    Local4 = DerefOf (Local2 [Local1])
                    Local4 *= 0x0A
                    Local4 += 0x0AAC
                    DerefOf (DerefOf (C2CA [C2DE (0x00)]) [0x00]) [
                        Local1] = Local4
                }

                If ((Local1 < (Local0 - 0x01)))
                {
                    Local4 = DerefOf (Local3 [Local1])
                    Local4 *= 0x0A
                    Local4 += 0x0AAC
                    DerefOf (DerefOf (C2CA [C2DE (0x00)]) [0x01]) [
                        Local1] = Local4
                }

                Local1++
            }
        }

        Method (C2E1, 0, Serialized)
        {
        }

        Method (C2E2, 0, Serialized)
        {
            Acquire (C1C7, 0xFFFF)
            C1C8 = 0x0F
            C2D5 = 0x06
            Local0 = 0x00
            While ((Local0 < 0x04))
            {
                C2D7 [Local0] = 0x00
                C2D8 [Local0] = 0x00
                C2D9 [Local0] = 0xFFFFFFFD
                Local0++
            }

            Local0 = 0x00
            While ((Local0 < 0x01))
            {
                C2DA [Local0] = 0x00
                Local0++
            }

            Release (C1C7)
        }

        Method (C2E3, 0, Serialized)
        {
            Local1 = (\_TZ.TZ0._AC0 () - 0x0AAC)
            Divide (Local1, 0x0A, Local0, Local2)
            Local2 += 0x03
            \_SB.C002.C003.C0DE (0x98, 0x19, Local2)
            Local1 = (\_TZ.TZ2._CRT () - 0x0AAC)
            Divide (Local1, 0x0A, Local0, Local2)
            Local2 += 0x01
            \_SB.C002.C003.C0DE (0x98, 0x20, Local2)
            \_SB.C002.C003.C0DE (0x98, 0x0A, 0x04)
            \_SB.C002.C003.C0DE (0x98, 0x09, 0x00)
            \_SB.C002.C003.C0DE (0x98, 0x21, 0x0A)
            \_SB.C002.C003.C0DE (0x98, 0x0C, 0x00)
            \_SB.C002.C003.C0DE (0x98, 0x0B, Local1)
            If ((\_SB.C043 == 0x01))
            {
                C1CC = 0x14
            }
            Else
            {
                C1CC = 0x00
            }

            \_SB.C002.C003.C005.C19F (0x00, C1CC)
        }

        Method (C2E4, 0, Serialized)
        {
            C2E2 ()
            C2E3 ()
        }

        Method (C2E5, 1, Serialized)
        {
            If ((Arg0 < 0x03))
            {
                If ((Arg0 == 0x00))
                {
                    Local2 = 0x10
                    Local2 = \_SB.C002.C003.C0DE (0x99, 0x01, 0x00)
                }
                Else
                {
                    If ((Arg0 == 0x01))
                    {
                        Local2 = \_SB.C002.C003.C0DE (0x99, 0x01, 0x00)
                    }
                    Else
                    {
                        Local2 = \_SB.C002.C003.C0DE (0x99, 0x00, 0x00)
                    }

                    If ((Local2 & 0xFF00))
                    {
                        Local2 = 0x00
                    }

                    If ((Local2 & 0x80))
                    {
                        Local2 -= 0x0100
                    }
                }

                Local1 = (Local2 * 0x0A)
                Local1 += 0x0AAC
            }
            Else
            {
                Local1 = 0x0B4C
                Acquire (\_SB.C002.C003.C005.C155, 0xFFFF)
                If (\_SB.C002.C003.C005.C157)
                {
                    Local1 = \_SB.C002.C003.C005.C193
                }

                Release (\_SB.C002.C003.C005.C155)
            }

            Local2 = Local1
            Local3 = 0x00
            If ((Local1 < 0x0B4C))
            {
                If ((DerefOf (C2D7 [Arg0]) < 0x0B4C))
                {
                    C2D8 [Arg0] = 0x0B4C
                }

                Local1 = DerefOf (C2D8 [Arg0])
            }

            C2D7 [Arg0] = Local2
            C2D8 [Arg0] = Local1
            Acquire (C1C7, 0xFFFF)
            Local2 = (0x01 << Arg0)
            If ((C2D5 & Local2))
            {
                Local0 = Match (DerefOf (DerefOf (C2CA [C2DE (Arg0)]) [0x01]
                    ), MGT, Local1, MTR, 0x00, 0x00)
            }
            Else
            {
                Local0 = Match (DerefOf (DerefOf (C2CA [C2DE (Arg0)]) [0x00]
                    ), MGE, Local1, MTR, 0x00, 0x00)
                Local0--
                C2D5 |= Local2
            }

            If (((Local0 != DerefOf (C2D9 [Arg0])) || C2D4))
            {
                C2D4 = 0x00
                C2D9 [Arg0] = Local0
                If ((Arg0 < 0x03))
                {
                    C2E6 (Local0, Arg0)
                }
                Else
                {
                    Notify (\_TZ.TZ3, 0x81) // Thermal Trip Point Change
                }

                C1C8 &= ~Local2
            }

            Release (C1C7)
            Return (Local1)
        }

        Method (C2E6, 2, Serialized)
        {
            Local0 = DerefOf (DerefOf (DerefOf (C2CA [C2DE (Arg1)]) [
                0x01]) [Arg0])
            Local0 -= 0x0AAC
            Divide (Local0, 0x0A, Local1, Local6)
            If (((Arg1 == 0x00) && (Local6 < 0x7F))){}
            Local0 = DerefOf (DerefOf (DerefOf (C2CA [C2DE (Arg1)]) [
                0x00]) [Arg0])
            If ((Local0 < 0x0AAC))
            {
                Local1 = (0x0AAC - Local0)
                Divide (Local1, 0x0A, Local3, Local2)
                Local2 = ~Local2
                Local2 += 0x01
                Local2 &= 0xFF
            }
            Else
            {
                Local0 -= 0x0AAC
                Divide (Local0, 0x0A, Local1, Local2)
                If ((Arg1 == 0x00)){}
            }

            If ((Arg1 < 0x01))
            {
                \_SB.C002.C003.C0DE (0x98, 0x0E, Local2)
                \_SB.C002.C003.C0DE (0x98, 0x0D, Local6)
                If (Arg1)
                {
                    Notify (\_TZ.TZ1, 0x81) // Thermal Trip Point Change
                }
                Else
                {
                    Notify (\_TZ.TZ0, 0x81) // Thermal Trip Point Change
                }
            }

            If ((Arg1 == 0x02))
            {
                \_SB.C002.C003.C0DE (0x98, 0x0C, Local2)
                \_SB.C002.C003.C0DE (0x98, 0x0B, Local6)
                Notify (\_TZ.TZ2, 0x81) // Thermal Trip Point Change
            }
        }

        Method (C2DE, 1, Serialized)
        {
            Local1 = Arg0
            Return (Local1)
        }

        Method (C2E7, 0, Serialized)
        {
            If ((\_SB.C007 & 0x01000000))
            {
                Return (Package (0x02)
                {
                    \_PR.CPU0, 
                    \_PR.CPU1
                })
            }
            Else
            {
                Return (Package (0x01)
                {
                    \_PR.CPU0
                })
            }
        }

        PowerResource (C2E8, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (C2DB (0x00, 0x00))
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                C2DC (0x01, 0x00, 0x00)
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                C2DC (0x00, 0x00, 0x00)
            }
        }

        PowerResource (C2E9, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (C2DB (0x00, 0x01))
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                C2DC (0x01, 0x00, 0x01)
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                C2DC (0x00, 0x00, 0x01)
            }
        }

        PowerResource (C2EA, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (C2DB (0x00, 0x02))
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                C2DC (0x01, 0x00, 0x02)
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                C2DC (0x00, 0x00, 0x02)
            }
        }

        PowerResource (C2EB, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (C2DB (0x00, 0x03))
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                C2DC (0x01, 0x00, 0x03)
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                C2DC (0x00, 0x00, 0x03)
            }
        }

        PowerResource (C2EC, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (C2DB (0x00, 0x04))
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                C2DC (0x01, 0x00, 0x04)
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                C2DC (0x00, 0x00, 0x04)
            }
        }

        Device (C2ED)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                \_TZ.C2E1 ()
                \_TZ.C2E2 ()
            }

            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                C2E8
            })
        }

        Device (C2EE)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                C2E9
            })
        }

        Device (C2EF)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                C2EA
            })
        }

        Device (C2F0)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                C2EB
            })
        }

        Device (C2F1)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                C2EC
            })
        }

        ThermalZone (TZ0)
        {
            Name (_AL0, Package (0x01)  // _ALx: Active List, x=0-9
            {
                C2ED
            })
            Name (_AL1, Package (0x01)  // _ALx: Active List, x=0-9
            {
                C2EE
            })
            Name (_AL2, Package (0x01)  // _ALx: Active List, x=0-9
            {
                C2EF
            })
            Name (_AL3, Package (0x01)  // _ALx: Active List, x=0-9
            {
                C2F0
            })
            Name (_AL4, Package (0x01)  // _ALx: Active List, x=0-9
            {
                C2F1
            })
            Method (_AC0, 0, NotSerialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (C2DD (C2D0, 0x00))
            }

            Method (_AC1, 0, NotSerialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (C2DD (C2CF, 0x00))
            }

            Method (_AC2, 0, NotSerialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (C2DD (C2CE, 0x00))
            }

            Method (_AC3, 0, NotSerialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (C2DD (C2CD, 0x00))
            }

            Method (_AC4, 0, NotSerialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (C2DD (C2CC, 0x00))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (C2DD (C2D2, 0x00))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If ((C2D6 == 0x00))
                {
                    \_TZ.C2E3 ()
                    C2D6 = 0x01
                }

                Return (C2E5 (0x00))
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                Return (C2DD (C2D1, 0x00))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                Return (C2E7 ())
            }

            Name (_TC1, 0x01)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x02)  // _TC2: Thermal Constant 2
        }

        ThermalZone (TZ1)
        {
            Name (_TSP, 0x012C)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x01)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x02)  // _TC2: Thermal Constant 2
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (C2DD (0x01, 0x01))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (C2E5 (0x01))
            }
        }

        ThermalZone (TZ2)
        {
            Name (_TSP, 0x012C)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x01)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x02)  // _TC2: Thermal Constant 2
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (C2DD (0x01, 0x02))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (C2E5 (0x02))
            }
        }

        ThermalZone (TZ3)
        {
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                Return (C2DD (0x00, 0x03))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                Return (C2E7 ())
            }

            Name (_TSP, 0x012C)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x01)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x02)  // _TC2: Thermal Constant 2
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_TZ.TZ1._CRT ())
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (C2E5 (0x03))
            }
        }

        ThermalZone (TZ4)
        {
            Name (_CRT, 0x0EF8)  // _CRT: Critical Temperature
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = 0x1E
                Acquire (\_SB.C002.C003.C005.C155, 0xFFFF)
                If (\_SB.C002.C003.C005.C157)
                {
                    Local0 = \_SB.C002.C003.C005.C18A
                }

                Release (\_SB.C002.C003.C005.C155)
                If ((Local0 > 0x64))
                {
                    Local0 = 0x64
                }

                Local0 *= 0x0A
                Local0 += 0x0AAC
                Return (Local0)
            }
        }
    }

    Device (\_SB.C2F2)
    {
        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
        Name (_UID, 0x00)  // _UID: Unique ID
        Name (C2F3, Package (0x10){})
        Name (C2F4, Package (0x10){})
        Name (C2F5, Package (0x11){})
        Name (C2F6, Package (0x11){})
        Name (C2F7, 0xFFFFFFFD)
        Mutex (C2F8, 0x00)
        Method (C2F9, 0, NotSerialized)
        {
            Local0 = (\_SB.C02C + 0x000F0000)
            Return (Local0)
        }

        OperationRegion (C2FA, SystemMemory, C2F9 (), 0xB0)
        Field (C2FA, AnyAcc, NoLock, Preserve)
        {
            C2FB,   640
        }

        Method (C2FC, 1, NotSerialized)
        {
            OperationRegion (C2FD, SystemMemory, Arg0, 0x03)
            Field (C2FD, ByteAcc, NoLock, Preserve)
            {
                C2FE,   16, 
                C2FF,   8
            }

            Local0 = 0x00
            If ((C2FE == 0xAA55))
            {
                Local0 = (C2FF << 0x09)
                Local0 += Arg0
                Local0--
            }

            Return (Local0)
        }

        Method (C300, 0, NotSerialized)
        {
            Local0 = C2FB /* \_SB_.C2F2.C2FB */
            Local3 = 0x00
            Local4 = 0x00
            Local1 = 0x01
            While ((Local1 && (Local3 <= 0x10)))
            {
                Local2 = DerefOf (Local0 [(Local4 + 0x03)])
                Local1 = ((DerefOf (Local0 [(Local4 + 0x04)]) << 0x08
                    ) | Local2)
                Local1 <<= 0x04
                If (Local1)
                {
                    C2F3 [Local3] = Local1
                    Local5 = DerefOf (Local0 [(Local4 + 0x02)])
                    Local5 = (Local1 + (Local5 << 0x09))
                    Local5--
                    C2F4 [Local3] = Local5
                    Local3++
                    Local4 += 0x05
                }
            }

            Return (Local3)
        }

        Method (C301, 0, NotSerialized)
        {
            Local3 = C300 ()
            Local4 = Local3
            Local2 = 0x00
            Local7 = Local2
            While ((Local2 < Local4))
            {
                Local1 = 0x000FFFFF
                Local5 = Local2
                While ((Local5 < Local3))
                {
                    Local6 = DerefOf (C2F3 [Local5])
                    If ((Local6 > Local7))
                    {
                        If ((Local6 < Local1))
                        {
                            Local0 = Local5
                            Local1 = Local6
                        }
                    }
                    ElseIf ((Local6 == Local7))
                    {
                        Local4--
                    }

                    Local5++
                }

                If ((Local0 > Local2))
                {
                    Local7 = DerefOf (C2F4 [Local0])
                    C2F3 [Local0] = DerefOf (C2F3 [Local2])
                    C2F4 [Local0] = DerefOf (C2F4 [Local2])
                    C2F3 [Local2] = Local1
                    C2F4 [Local2] = Local7
                }

                Local7 = C2FC (Local1)
                If (Local7)
                {
                    C2F4 [Local2] = Local7
                }

                Local7 = Local1
                Local2++
            }

            Return (Local4)
        }

        Method (C302, 1, NotSerialized)
        {
            Acquire (C08E, 0xFFFF)
            Local0 = 0x00
            C2F7 = Local0
            Local2 = Local0
            Local3 = Local0
            While ((Local0 <= 0x10))
            {
                C2F5 [Local0] = Local2
                C2F6 [Local0] = Local2
                Local0++
            }

            Local0 = (C023 << 0x04)
            C090 [C08F] = Local0
            C091 [C08F] = Local0
            C2F3 [Arg0] = Local0
            C2F4 [Arg0] = Local0
            While (((Local2 <= Arg0) && (Local3 <= C08F)))
            {
                Local0 = DerefOf (C090 [Local3])
                Local1 = (DerefOf (C091 [Local3]) + 0x01)
                Local4 = DerefOf (C2F3 [Local2])
                Local5 = (DerefOf (C2F4 [Local2]) + 0x01)
                Local6 = DerefOf (C2F5 [C2F7])
                If ((Local1 <= Local4))
                {
                    If (Local6)
                    {
                        C2F6 [C2F7] = (Local0 - Local6)
                        C2F7++
                    }

                    If ((Local1 < Local4))
                    {
                        C2F5 [C2F7] = Local1
                    }

                    Local3++
                }
                Else
                {
                    If (Local6)
                    {
                        Local7 = (Local4 - Local6)
                        If ((Local7 > 0x00))
                        {
                            C2F6 [C2F7] = Local7
                            C2F7++
                        }
                    }

                    If ((Local0 > Local5))
                    {
                        C2F5 [C2F7] = Local5
                    }

                    Local2++
                }
            }

            Release (C08E)
        }

        Method (C303, 0, NotSerialized)
        {
            Acquire (C2F8, 0xFFFF)
            If ((C2F7 == 0xFFFFFFFD))
            {
                C08D ()
                Local0 = C301 ()
                C302 (Local0)
            }

            Local1 = C2F7 /* \_SB_.C2F2.C2F7 */
            Release (C2F8)
            Return (Local1)
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            C303 ()
        }

        Method (C094, 3, NotSerialized)
        {
            Local2 = Arg1
            CreateDWordField (Arg0, Local2, C304)
            C304 = 0x0986
            Local2 += 0x04
            CreateDWordField (Arg0, Local2, C305)
            C305 = DerefOf (C2F5 [Arg2])
            Local2 += 0x04
            CreateDWordField (Arg0, Local2, C306)
            C306 = DerefOf (C2F6 [Arg2])
            Local2 += 0x04
            Return (Local2)
        }

        Method (C307, 0, NotSerialized)
        {
            Local1 = (C2F7 * 0x0C)
            Local2 = (SizeOf (C01B) + Local1)
            Local0 = Buffer (Local2){}
            Local1 = 0x00
            Local2 = Local1
            While ((Local1 < C2F7))
            {
                Local2 = C094 (Local0, Local2, Local1)
                Local1++
            }

            Local1 = 0x00
            While ((Local1 < SizeOf (C01B)))
            {
                Local0 [Local2] = DerefOf (C01B [Local1])
                Local2++
                Local1++
            }

            Return (Local0)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            C308 ()
            Local0 = C01B /* \_SB_.C2F2.C01B */
            Acquire (C2F8, 0xFFFF)
            If ((C2F7 > 0x00))
            {
                Local0 = C307 ()
            }

            Release (C2F8)
            Return (Local0)
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Local0 = (SizeOf (C01B) - 0x02)
            Local0 |= C303 ()
            If (Local0)
            {
                Local0 = 0x0F
            }

            Return (Local0)
        }
    }

    Scope (\_SB.C2F2)
    {
        Name (C01B, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFEDA0000,         // Address Base
                0x00020000,         // Address Length
                )
            Memory32Fixed (ReadWrite,
                0xFEE00000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Method (C308, 0, NotSerialized)
        {
            Local0 = 0x00
        }
    }

    Device (\_SB.C002.C309)
    {
        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
        Name (_UID, 0x01)  // _UID: Unique ID
        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (C30A, ResourceTemplate ()
            {
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x1000,             // Range Minimum
                    0x1000,             // Range Maximum
                    0x01,               // Alignment
                    0x80,               // Length
                    )
                IO (Decode16,
                    0x1100,             // Range Minimum
                    0x1100,             // Range Maximum
                    0x01,               // Alignment
                    0x40,               // Length
                    )
                IO (Decode16,
                    0x1200,             // Range Minimum
                    0x1200,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                Memory32Fixed (ReadWrite,
                    0xF8000000,         // Address Base
                    0x04000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEC00000,         // Address Base
                    0x00000100,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED90000,         // Address Base
                    0x0000B000,         // Address Length
                    )
            })
            Return (C30A) /* \_SB_.C002.C309._CRS.C30A */
        }
    }

    Device (\_SB.C002.C003.C30C)
    {
        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Name (\_SB.C002.C003.C30D, ResourceTemplate ()
        {
            IO (Decode16,
                0x0010,             // Range Minimum
                0x0010,             // Range Maximum
                0x01,               // Alignment
                0x10,               // Length
                )
            IO (Decode16,
                0x0024,             // Range Minimum
                0x0024,             // Range Maximum
                0x01,               // Alignment
                0x1C,               // Length
                )
            IO (Decode16,
                0x004E,             // Range Minimum
                0x004E,             // Range Maximum
                0x01,               // Alignment
                0x02,               // Length
                )
            IO (Decode16,
                0x0050,             // Range Minimum
                0x0050,             // Range Maximum
                0x01,               // Alignment
                0x04,               // Length
                )
            IO (Decode16,
                0x0063,             // Range Minimum
                0x0063,             // Range Maximum
                0x01,               // Alignment
                0x01,               // Length
                )
            IO (Decode16,
                0x0065,             // Range Minimum
                0x0065,             // Range Maximum
                0x01,               // Alignment
                0x01,               // Length
                )
            IO (Decode16,
                0x0067,             // Range Minimum
                0x0067,             // Range Maximum
                0x01,               // Alignment
                0x01,               // Length
                )
            IO (Decode16,
                0x0074,             // Range Minimum
                0x0074,             // Range Maximum
                0x01,               // Alignment
                0x04,               // Length
                )
            IO (Decode16,
                0x0090,             // Range Minimum
                0x0090,             // Range Maximum
                0x01,               // Alignment
                0x10,               // Length
                )
            IO (Decode16,
                0x00A4,             // Range Minimum
                0x00A4,             // Range Maximum
                0x01,               // Alignment
                0x1A,               // Length
                )
            IO (Decode16,
                0x0500,             // Range Minimum
                0x0500,             // Range Maximum
                0x01,               // Alignment
                0x80,               // Length
                )
            IO (Decode16,
                0x0800,             // Range Minimum
                0x0800,             // Range Maximum
                0x01,               // Alignment
                0x10,               // Length
                )
            Memory32Fixed (ReadOnly,
                0xFFB00000,         // Address Base
                0x00100000,         // Address Length
                )
            Memory32Fixed (ReadOnly,
                0xFFF00000,         // Address Base
                0x00100000,         // Address Length
                )
        })
        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Return (C30D) /* \_SB_.C002.C003.C30D */
        }
    }

    Name (\_S0, Package (0x03)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S3, Package (0x03)  // _S3_: S3 System State
    {
        0x05, 
        0x05, 
        0x00
    })
    Name (\_S4, Package (0x03)  // _S4_: S4 System State
    {
        0x06, 
        0x06, 
        0x00
    })
    Name (\_S5, Package (0x03)  // _S5_: S5 System State
    {
        0x07, 
        0x07, 
        0x00
    })
    Method (\_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        \_SB.C03D = Arg0
        If ((Arg0 > 0x00))
        {
            If ((Arg0 != 0x05))
            {
                \_SB.C002.C003.C005.C1B5 (0x00)
                \_SB.C1FD = 0x01
            }
        }
    }

    Method (\_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        \_SB.C03D = 0x00
        \_SB.C04B = 0x00
        If ((Arg0 == 0x03))
        {
            If (\_SB.C048)
            {
                \_SB.C147 (0xEA49, 0x0C, 0x00, 0x00, 0x00)
            }

            If (\_SB.C049)
            {
                \_SB.C147 (0xEA49, 0x0C, 0x01, 0x00, 0x00)
            }

            \_SB.C002.C003.C0D3 ^= 0x4000
        }

        \_SB.C002.C003.C005.C15B ()
        If (\_SB.C002.C003.C005.C157)
        {
            Acquire (\_SB.C002.C003.C005.C155, 0xFFFF)
            \_SB.C002.C003.C005.C160 = 0x01
            \_SB.C002.C003.C005.C15F = 0x00
            Release (\_SB.C002.C003.C005.C155)
        }

        If ((Arg0 > 0x02))
        {
            \_TZ.C2E4 ()
            Notify (\_TZ.TZ1, 0x80) // Thermal Status Change
            Notify (\_TZ.TZ2, 0x80) // Thermal Status Change
            \_SB.C1FD = 0x01
            If ((\_SB.C007 & 0x01000000))
            {
                If (((\_SB.C007 & 0xF0) && (\C008 () == 0x04)))
                {
                    \_SB.ISMI (0x3D, 0x00, 0x00, 0x00)
                }
            }

            If ((Arg0 == 0x03))
            {
                \_SB.ISMI (0x46, 0x00, 0x00, 0x00)
            }

            If ((Arg0 == 0x04))
            {
                If (\_SB.C019)
                {
                    \_SB.ISMI (0x47, 0x00, 0x00, 0x00)
                }

                Notify (\_TZ.TZ0, 0x80) // Thermal Status Change
            }
        }

        If (((Arg0 == 0x04) || (\C008 () == 0x01)))
        {
            Notify (\_SB.C201, 0x02) // Device Wake
        }

        Local2 = \_SB.C002.C003.C005.C006 ()
        \_SB.C002.C003.C005.C159 (0x03, 0xFF)
        Local1 = \_SB.C002.C003.C005.C15A ()
        Local3 = \_SB.C002.C003.C005.C006 ()
        Local3 ^= Local2
        If (Local3)
        {
            Notify (\_SB.C1C9, 0x80) // Status Change
            If (\_PR.CPU0.C001)
            {
                Notify (\_PR.CPU0, 0x81) // C-State Change
                Notify (\_PR.CPU1, 0x81) // C-State Change
            }

            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Notify (\_PR.CPU1, 0x80) // Performance Capability Change
        }
        ElseIf ((Arg0 == 0x04))
        {
            \_SB.C1AA = (Local2 ^ 0x01)
        }

        Notify (\_SB.C002.C0F9, 0x00) // Bus Check
        Notify (\_SB.C002.C100, 0x00) // Bus Check
        Notify (\_SB.C002.C101, 0x00) // Bus Check
        Notify (\_SB.C002.C102, 0x00) // Bus Check
        Notify (\_SB.C002.C103, 0x00) // Bus Check
        \_SB.C002.ACEL.C1F7 ()
        If (((\_SB.C002.C11D.C10D & 0x40) == 0x00))
        {
            Notify (\_SB.C002.C11D, 0x00) // Bus Check
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            Local1 = (\_SB.C002.C003.C0D2 & 0x2000)
            Local1 ^= 0x2000
            If (Local1)
            {
                \_SB.C002.C003.C005.C162 = 0x01
            }
        }

        Return (Package (0x02)
        {
            0x00, 
            0x00
        })
    }

    Scope (\_GPE)
    {
        Name (C30F, 0xFFFFFFFD)
        Method (_L00, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local0 = \_SB.C002.C003.C0DE (0x19, 0x00, 0x00)
            Local1 = 0x00
            Local3 = 0x06
            Local0 = \_SB.C002.C003.C0DE (0x99, 0x02, 0x00)
            If (((Local0 & 0xFF00) == 0x00))
            {
                If ((Local0 & 0x18))
                {
                    Local1 |= 0x02
                    If ((Local0 & 0x08))
                    {
                        Local3 &= 0xFFFFFFFD
                    }
                }

                If ((Local0 & 0x60))
                {
                    Local1 |= 0x04
                    If ((Local0 & 0x20))
                    {
                        Local3 &= 0xFFFFFFFB
                    }
                }
            }
            Else
            {
                Local1 = 0x06
            }

            Acquire (\_TZ.C1C7, 0xFFFF)
            \_TZ.C1C8 |= Local1
            Local4 = (\_TZ.C2D5 & 0xFFFFFFF9)
            \_TZ.C2D5 = (Local4 | Local3)
            Release (\_TZ.C1C7)
            If ((Local1 & 0x02))
            {
                Notify (\_TZ.TZ0, 0x80) // Thermal Status Change
            }

            If ((Local1 & 0x04))
            {
                Notify (\_TZ.TZ2, 0x80) // Thermal Status Change
            }
        }

        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (((\_SB.C002.C09B.C09F & 0x00010000) == 0x00))
            {
                If (\_SB.C002.C10A.C1E9 ())
                {
                    Notify (\_SB.C002.C10A, 0x00) // Bus Check
                }
            }

            If (((\_SB.C002.C09B.C09F & 0x00040000) == 0x00))
            {
                If (\_SB.C002.C11D.C111)
                {
                    \_SB.C002.C11D.C111 = 0x01
                    \_SB.C002.C11D.C10D = (0x08 | 0x01)
                    Sleep (0x01F4)
                    Notify (\_SB.C002.C11D, 0x00) // Bus Check
                }
            }

            If (((\_SB.C002.C09B.C09F & 0x00080000) == 0x00))
            {
                If (\_SB.C002.C120.C111)
                {
                    \_SB.C002.C120.C10D = (0x08 | 0x01)
                    \_SB.C002.C120.C111 = 0x01
                    Sleep (0x01F4)
                    Notify (\_SB.C002.C120, 0x00) // Bus Check
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.C002.C003.C0C8 = 0x00
            Local0 = \_SB.C056
            If (Local0)
            {
                \_SB.C056 = 0x00
                If ((Local0 == 0x01))
                {
                    If (((\_SB.C051 & 0x03) == 0x00))
                    {
                        C233 (0x00)
                        Notify (\_SB.C002.C088, 0x80) // Status Change
                    }
                }

                If (((Local0 >= 0x04) && (Local0 <= 0x05)))
                {
                    \_SB.C1FE.C1FF (Local0, 0x00)
                }

                If ((Local0 == 0x07))
                {
                    Acquire (\_TZ.C1C7, 0xFFFF)
                    \_TZ.C1C8 |= 0x01
                    Release (\_TZ.C1C7)
                    Notify (\_TZ.TZ0, 0x80) // Thermal Status Change
                }

                If ((Local0 == 0x03))
                {
                    Notify (\_SB.C002.C088.C14A, 0x87) // Device-Specific
                }

                If ((Local0 == 0x02))
                {
                    Notify (\_SB.C002.C088.C14A, 0x86) // Device-Specific
                }
            }
        }

        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.C002.C0F9, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.C002.C100, 0x02) // Device Wake
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (((\_SB.C002.C09B.C09F & 0x00010000) == 0x00))
            {
                If (\_SB.C002.C10A.C10F)
                {
                    While (\_SB.C002.C10A.C10F)
                    {
                        \_SB.C002.C10A.C10F = 0x01
                    }

                    \_SB.C002.C10A.C112 = 0x01
                    Notify (\_SB.C002.C10A, 0x02) // Device Wake
                }
            }

            If (((\_SB.C002.C09B.C09F & 0x00040000) == 0x00))
            {
                If (\_SB.C002.C11D.C10F)
                {
                    While (\_SB.C002.C11D.C10F)
                    {
                        \_SB.C002.C11D.C10F = 0x01
                    }

                    \_SB.C002.C11D.C112 = 0x01
                    Notify (\_SB.C002.C11D, 0x02) // Device Wake
                }
            }

            If (((\_SB.C002.C09B.C09F & 0x00080000) == 0x00))
            {
                If (\_SB.C002.C120.C10F)
                {
                    While (\_SB.C002.C120.C10F)
                    {
                        \_SB.C002.C120.C10F = 0x01
                    }

                    \_SB.C002.C120.C112 = 0x01
                    Notify (\_SB.C002.C120, 0x02) // Device Wake
                }
            }
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.C002.C09B, 0x02) // Device Wake
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.C002.C101, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.C002.C103, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.C002.C102, 0x02) // Device Wake
        }

        Method (_L17, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local0 = (\_SB.C002.C003.C0BA & 0xFFFF3FFF)
            \_SB.C002.C003.C0BA = (Local0 | 0x4000)
            \_SB.C002.C088.C143 (0x01)
            If (((\_SB.C051 & 0x03) == 0x00))
            {
                C233 (0x00)
                Notify (\_SB.C002.C088, 0x80) // Status Change
            }

            Notify (\_SB.C002.C10A, 0x00) // Bus Check
            \_SB.C1FE.C1FF (0x01, 0x00)
            Sleep (0x03E8)
            Notify (\_SB.C002.C102, 0x00) // Bus Check
            Notify (\_SB.C002.C103, 0x00) // Bus Check
        }

        Name (C310, 0x00)
        Method (C311, 0, NotSerialized)
        {
            Sleep (0x64)
            C200 (0x0400)
            Local0 = \_SB.C002.C003.C0D3
            Local1 = \_SB.C002.C003.C0D2
            If ((Local1 & 0x0400))
            {
                \_SB.C002.C003.C0D3 = (Local0 | 0x0400)
            }
            Else
            {
                \_SB.C002.C003.C0D3 = (Local0 & 0xFFFFFBFF)
            }

            C310 = 0x00
        }

        Method (_L1D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (((\_SB.C002.C003.C0BA & 0x0C000000) == 0x08000000))
            {
                If ((\C008 () >= 0x06))
                {
                    Notify (\_SB.C1D0, 0x80) // Status Change
                }

                Local0 = (\_SB.C002.C003.C0BA & 0xF3FFFFFF)
                \_SB.C002.C003.C0BA = Local0
                Local1 = 0x01
                If (((\_SB.C051 & 0x03) == 0x00))
                {
                    Local2 = 0x01
                    If ((\_SB.C002.C003.C0D2 & 0x2000))
                    {
                        Local2 = 0x05DC
                    }

                    C233 (Local2)
                    If (\_SB.C044)
                    {
                        Notify (\_SB.C002.C088, 0x80) // Status Change
                        If ((\C008 () < 0x06))
                        {
                            Local1 = 0x00
                        }
                    }
                }

                If (\_SB.C002.C003.C005.C157)
                {
                    \_SB.C002.C003.C005.C162 = (\_SB.C1D0._LID () ^ 0x01)
                }

                If (Local1)
                {
                    Local0 = (\_SB.C002.C003.C0BA & 0xF3FFFFFF)
                    \_SB.C002.C003.C0BA = (Local0 | 0x04000000)
                }

                \_SB.C002.ACEL.C1F8 ()
                If ((\C008 () < 0x06))
                {
                    Notify (\_SB.C1D0, 0x80) // Status Change
                }
            }
        }

        Method (C200, 1, Serialized)
        {
            If (C312 ())
            {
                If ((\_SB.C058 == 0x01))
                {
                    C313 ()
                }
            }
            ElseIf ((\_SB.C002.C003.C0D2 & 0x0100))
            {
                If ((\_SB.C059 == 0x01))
                {
                    Notify (\_SB.C002.C120.C1F3, 0x03) // Eject Request
                }
                Else
                {
                    \_SB.C002.C120.C1F3.C1F4 ()
                    Sleep (0x64)
                    Notify (\_SB.C002.C120, 0x00) // Bus Check
                }
            }
        }

        Method (C312, 0, Serialized)
        {
            Local0 = \_SB.C002.C003.C0D3
            Local1 = \_SB.C002.C003.C0C0
            \_SB.C002.C003.C0C7 |= 0x0400
            Local1 = \_SB.C002.C003.C0C7
            Local1 ^= Local0
            Local2 = \_SB.C002.C003.C0D2
            Local3 = 0x01
            If ((\_SB.C002.C003.C005.C006 () == 0x00))
            {
                If ((Local1 & 0x0400))
                {
                    Local3 = 0x00
                }
            }

            Return (Local3)
        }

        Method (C313, 0, Serialized)
        {
            \_SB.C002.C003.C0D6 |= 0x0100
            Sleep (0x012C)
            \_SB.C002.C120.C10C = 0x00
            Sleep (0xC8)
        }

        Method (C233, 1, NotSerialized)
        {
            If ((Arg0 || (\_SB.C053 != C30F)))
            {
                C30F = \_SB.C053
                If ((C008 () >= 0x04))
                {
                    Notify (\_SB.C002, 0x00) // Bus Check
                }
                Else
                {
                    Notify (\_SB.C002.C088, 0x00) // Bus Check
                }

                If ((Arg0 > 0x01))
                {
                    Sleep (Arg0)
                }
                Else
                {
                    Sleep (0x02EE)
                }
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 57
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "30AA    "
[018h 0024   4]                 Oem Revision : 00000003
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]                 FACS Address : 3F7F7E80
[028h 0040   4]                 DSDT Address : 3F7E5ACC
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : F1
[035h 0053   1]           ACPI Disable Value : F0
[036h 0054   1]               S4BIOS Command : F2
[037h 0055   1]              P-State Control : 80
[038h 0056   4]     PM1A Event Block Address : 00001000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001004
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001020
[04Ch 0076   4]       PM Timer Block Address : 00001008
[050h 0080   4]           GPE0 Block Address : 00001028
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000080A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000000

[080h 0128   1]         Value to cause reset : 00
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 000000003F7F7E80
[08Ch 0140   8]                 DSDT Address : 000000003F7E5ACC
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000001000

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 20
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000001004

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 10
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000001020

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000001008

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000001028

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 04 57 48 50 20 20 20 20  // FACP.....WHP    
    0010: 33 30 41 41 20 20 20 20 03 00 00 00 48 50 20 20  // 30AA    ....HP  
    0020: 01 00 00 00 80 7E 7F 3F CC 5A 7E 3F 00 02 09 00  // .....~.?.Z~?....
    0030: B2 00 00 00 F1 F0 F2 80 00 10 00 00 00 00 00 00  // ................
    0040: 04 10 00 00 00 00 00 00 20 10 00 00 08 10 00 00  // ........ .......
    0050: 28 10 00 00 00 00 00 00 04 02 01 04 08 00 00 00  // (...............
    0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 32 03 00 00  // e...........2...
    0070: A5 80 00 00 01 08 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 80 7E 7F 3F 00 00 00 00 CC 5A 7E 3F  // .....~.?.....Z~?
    0090: 00 00 00 00 01 20 00 00 00 10 00 00 00 00 00 00  // ..... ..........
    00A0: 01 20 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // . ..............
    00B0: 04 10 00 00 00 00 00 00 01 10 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 20 10 00 00 00 00 00 00  // ........ .......
    00D0: 01 20 00 00 08 10 00 00 00 00 00 00 01 40 00 00  // . ...........@..
    00E0: 28 10 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // (...............
    00F0: 00 00 00 00                                      // ....


FACS1
-----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000001
                      S4BIOS Support Present : 1
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FACS2
-----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000001
                      S4BIOS Support Present : 1
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 28
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "30AA    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 20
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 28 48 50 20 20 20 20  // HPET8....(HP    
    0010: 33 30 41 41 20 20 20 20 01 00 00 00 48 50 20 20  // 30AA    ....HP  
    0020: 01 00 00 00 01 A2 86 80 00 20 00 00 00 00 D0 FE  // ......... ......
    0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 18
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "30AA    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 18 48 50 20 20 20 20  // MCFG<.....HP    
    0010: 33 30 41 41 20 20 20 20 01 00 00 00 48 50 20 20  // 30AA    ....HP  
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DC
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 5B AB 60 56 \
    BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD 1D A9 8C 94 \
    B4 AE 08 11 DC 13 59 D3 7F F6 3E 87 31 B9 95 74 \
    10 DA 3B A4 5B B5 19 82 7C 39 D7 0D 7C 22 AC 1C \
    2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21 96 E1 2E 68 \
    9A BF 44 45 3E 3C 8E 99 90 DE 37 38 57 0B 92 15 \
    BC DE FF F2 07 7E B5 40 8C 51 3A C3 02 48 F6 13 \
    12 72 FB 42 78 E6 47 88 54 C7 B0 F0 93 9E FB 04 \
    B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6 01 00 00 00 \
    B6 00 00 00 00 00 02 00 48 50 51 4F 45 4D 53 4C \
    49 43 2D 4D 50 43 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 30 90 1F B4 A4 BE 80 1E E9 33 EC 7F FC B1 \
    28 0E A6 CE 43 72 8C 79 30 B4 F4 59 EA 7D CF B7 \
    11 8B DA 70 C5 C8 3F 79 20 08 6F 64 CA 07 88 B3 \
    B1 16 B4 BA 1A F1 85 52 B1 F5 07 55 B5 70 61 EF \
    44 8C AA 5F 78 14 66 98 9C F3 58 D8 AA 48 E0 37 \
    F8 F6 AB 64 FA DA 17 2A 62 E3 04 1D 32 2D D5 EA \
    33 66 5C 5B 3B 0E F7 09 66 42 32 AA 14 99 C3 EE \
    1A 62 3B 07 5F F0 48 44 C4 E6 32 59 1F 14 3E F1 \
    B2 38 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 DC 48 50 51 4F 45 4D  // SLICv.....HPQOEM
    0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 48 50 20 20  // SLIC-MPC....HP  
    0020: 01 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD  // [.`V.X.....\.O..
    0050: 1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87  // ..........Y...>.
    0060: 31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D  // 1..t..;.[...|9..
    0070: 7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21  // |"..*....m.....!
    0080: 96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38  // ...h..DE><....78
    0090: 57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3  // W........~.@.Q:.
    00A0: 02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0  // .H...r.Bx.G.T...
    00B0: 93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6  // ...........2..T.
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F  // ............HPQO
    00D0: 45 4D 53 4C 49 43 2D 4D 50 43 57 49 4E 44 4F 57  // EMSLIC-MPCWINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 30 90 1F B4 A4 BE 80 1E E9 33  // ......0........3
    0100: EC 7F FC B1 28 0E A6 CE 43 72 8C 79 30 B4 F4 59  // ....(...Cr.y0..Y
    0110: EA 7D CF B7 11 8B DA 70 C5 C8 3F 79 20 08 6F 64  // .}.....p..?y .od
    0120: CA 07 88 B3 B1 16 B4 BA 1A F1 85 52 B1 F5 07 55  // ...........R...U
    0130: B5 70 61 EF 44 8C AA 5F 78 14 66 98 9C F3 58 D8  // .pa.D.._x.f...X.
    0140: AA 48 E0 37 F8 F6 AB 64 FA DA 17 2A 62 E3 04 1D  // .H.7...d...*b...
    0150: 32 2D D5 EA 33 66 5C 5B 3B 0E F7 09 66 42 32 AA  // 2-..3f\[;...fB2.
    0160: 14 99 C3 EE 1A 62 3B 07 5F F0 48 44 C4 E6 32 59  // .....b;._.HD..2Y
    0170: 1F 14 3E F1 B2 38                                // ..>..8


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "Cpu1Tst", 0x00003000)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "HPQSAT", 0x00000001)
{
    /*
     * iASL Warning: There were 3 external control methods found during
     * disassembly, but only 0 were resolved (3 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.C002, DeviceObj)
    External (_SB_.C002.C0E4, DeviceObj)
    External (_SB_.C154, UnknownObj)
    External (_SB_.C203, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (_SB_.C20A, IntObj)
    External (C0EC, IntObj)
    External (C0EE, IntObj)
    External (C0EF, IntObj)
    External (C0F0, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (C0F4, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (C202, UnknownObj)

    Scope (\_SB.C002)
    {
        Device (C31C)
        {
            Name (_ADR, 0x001F0002)  // _ADR: Address
            Device (C0FE)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
                Name (C31D, Package (0x06)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    If ((SizeOf (Arg0) == 0x0200))
                    {
                        Local0 = 0x00
                        Local1 = Buffer ((SizeOf (C202) * 0x02)){}
                        While ((Local0 < SizeOf (C202)))
                        {
                            Local2 = DerefOf (C202 [Local0])
                            Local2 *= 0x02
                            Local3 = (Local0 * 0x02)
                            Local1 [Local3] = DerefOf (Arg0 [Local2])
                            Local1 [(Local3 + 0x01)] = DerefOf (Arg0 [(
                                Local2 + 0x01)])
                            Local0++
                        }

                        \_SB.C203 (0x00010000, 0x00, Local1, C31D)
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (\_SB.C20A) /* External reference */
                    C31D
                    0x00
                }
            }
        }
    }

    Scope (\_SB.C002.C0E4)
    {
        Name (_ADR, 0x001F0001)  // _ADR: Address
        Name (C31E, 0x01)
        Device (C314)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Name (C315, Package (0x05)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
            {
                Local0 = Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                CreateDWordField (Local0, 0x00, C316)
                CreateDWordField (Local0, 0x04, C317)
                CreateDWordField (Local0, 0x08, C31F)
                CreateDWordField (Local0, 0x0C, C320)
                CreateDWordField (Local0, 0x10, C318)
                0x00 = C0EC /* External reference */
                0x00
                C316
                0x00 = C0EF /* External reference */
                C318
                If ((C318 & 0x01))
                {
                    0x00 = C0EE /* External reference */
                    0x00
                    C317
                }
                Else
                {
                    C317 = C316 /* \_SB_.C002.C0E4.C314._GTM.C316 */
                }

                If ((((\_SB.C154 & 0x0F) == 0x07) || ((C31E & 0x01
                    ) == 0x00)))
                {
                    C31F = 0x78
                    C320 = 0x11
                    C318 |= 0x0C
                }
                Else
                {
                    0x00 = C0EC /* External reference */
                    0x01
                    C31F
                    If ((C318 & 0x04))
                    {
                        0x00 = C0EE /* External reference */
                        0x01
                        C320
                    }
                    Else
                    {
                        C320 = C31F /* \_SB_.C002.C0E4.C314._GTM.C31F */
                    }
                }

                Return (Local0)
            }

            Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
            {
                CreateDWordField (Arg0, 0x00, C316)
                CreateDWordField (Arg0, 0x04, C317)
                CreateDWordField (Arg0, 0x08, C31F)
                CreateDWordField (Arg0, 0x0C, C320)
                CreateDWordField (Arg0, 0x10, C318)
                If (((\_SB.C154 & 0x0F) == 0x01))
                {
                    C31E |= 0x01
                    If ((SizeOf (Arg1) == 0x0200))
                    {
                        Local0 = 0x00
                        Local1 = Buffer ((SizeOf (C202) * 0x02)){}
                        While ((Local0 < SizeOf (C202)))
                        {
                            Local2 = DerefOf (C202 [Local0])
                            Local2 *= 0x02
                            Local3 = (Local0 * 0x02)
                            Local1 [Local3] = DerefOf (Arg1 [Local2])
                            Local1 [(Local3 + 0x01)] = DerefOf (Arg1 [(
                                Local2 + 0x01)])
                            Local0++
                        }

                        Local1 = C0F0 (0x00, 0x00, C316, C318)
                        Local2
                        Store (C0F4 (0x00, 0x00, C317, C318, Local1, Local3, \_SB.C203 (Local2, Local3, Local1, 
                            C315))
                    }
                }
            }

            Device (C319)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (\_SB.C20A) /* External reference */
                    C315
                    0x00
                }
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "CpuPm", 0x00003000)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (INI_, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x3F7F5409, 
            0x00000208, 
            "CPU1IST ", 
            0x3F7F5335, 
            0x000000D4, 
            "CPU0CST ", 
            0x3F7F5696, 
            0x00000663, 
            "CPU1CST ", 
            0x3F7F5611, 
            0x00000085
        })
        Name (CFGD, 0x133368B1)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\SDTL, 0x00)
    }

    Scope (\_PR.CPU0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            INI ()
        }

        Name (HI0, 0x00)
        Name (HC0, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0._OSC.CAP0 */
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC0 & 0x09) == 
                    0x09)) && !(SDTL & 0x01)))
                {
                    SDTL |= 0x01
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [0x01]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, 0x00)
        Name (HC1, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS1, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS1, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS1)
            CreateDWordField (Arg3, 0x04, CAP1)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS1 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS1 [0x00] = 0x0A
                Return (Arg3)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1._OSC.CAP1 */
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC1 & 0x09) == 
                    0x09)) && !(SDTL & 0x10)))
                {
                    SDTL |= 0x10
                    OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                    Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC1 & 0x18)) && !
                    (SDTL & 0x20)))
                {
                    SDTL |= 0x20
                    OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                    Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
                }
            }

            Return (Arg3)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "Cpu0Tst", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PSS, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDC0 & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000000910, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000000910, // Address
                        ,)
                }
            })
        }

        Name (TSSI, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                0x00, 
                0x0F, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                0x00, 
                0x0E, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                0x00, 
                0x0D, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                0x00, 
                0x0C, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                0x00, 
                0x0B, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                0x00, 
                0x0A, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                0x00, 
                0x09, 
                0x00
            }
        })
        Name (TSSM, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                0x00, 
                0x1E, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                0x00, 
                0x1C, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                0x00, 
                0x1A, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                0x00, 
                0x18, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                0x00, 
                0x16, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                0x00, 
                0x14, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                0x00, 
                0x12, 
                0x00
            }
        })
        Name (TSSF, 0x00)
        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((!TSSF && CondRefOf (_PSS)))
            {
                Local0 = _PSS /* External reference */
                Local1 = SizeOf (Local0)
                Local1--
                Local2 = DerefOf (DerefOf (Local0 [Local1]) [0x01])
                Local3 = 0x00
                While ((Local3 < SizeOf (TSSI)))
                {
                    Local4 = ((Local2 * (0x08 - Local3)) / 0x08)
                    DerefOf (TSSI [Local3]) [0x01] = Local4
                    DerefOf (TSSM [Local3]) [0x01] = Local4
                    Local3++
                }

                TSSF = Ones
            }

            If ((PDC0 & 0x04))
            {
                Return (TSSM) /* \_PR_.CPU0.TSSM */
            }

            Return (TSSI) /* \_PR_.CPU0.TSSI */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "HPQNLP", 0x00000001)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but only 0 were resolved (2 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.C311, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.C059, UnknownObj)
    External (C1F4, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    If ((\_SB.C059 == 0x01))
    {
        Method (\_SB.C002.C120.C1F3._EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
        {
            C1F4 ()
        }
    }

    Method (\_GPE._L1A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
    {
        \_GPE.C311 ()
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)
    External (PPC_, IntObj)

    Scope (\_PR.CPU0)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & 0x01) && (PDC0 & 0x01)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B2, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & 0x01))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x03)
        {
            Package (0x06)
            {
                0x00000683, 
                0x000088B8, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x000061A8, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00003E80, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000683, 
                0x000088B8, 
                0x0000000A, 
                0x0000000A, 
                0x00000A21, 
                0x00000A21
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x000061A8, 
                0x0000000A, 
                0x0000000A, 
                0x0000081A, 
                0x0000081A
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00003E80, 
                0x0000000A, 
                0x0000000A, 
                0x00000613, 
                0x00000613
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((CFGD & 0x01000000))
            {
                If (((PDC0 & 0x0800) || (CFGD & 0x02000000)))
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            0x05, 
                            0x00, 
                            0x00, 
                            0xFE, 
                            0x02
                        }
                    })
                }

                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFC, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "Cpu1Cst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (CSTH, IntObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Local0 = CSTH /* External reference */
            If (((CFGD & 0x01000000) && !(PDC0 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0200)))
            {
                If (((CFGD & 0x0200) && (Local0 == 0x00)))
                {
                    Return (Package (0x05)
                    {
                        0x04, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000030, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x64, 
                            0x64
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000052, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x8C, 
                            0x0A
                        }
                    })
                }

                If (((CFGD & 0x80) && (Local0 == 0x00)))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000030, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x64, 
                            0x64
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x3C, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0100)))
            {
                If (((CFGD & 0x0200) && (Local0 == 0x00)))
                {
                    Return (Package (0x05)
                    {
                        0x04, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001016, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x64, 
                            0x64
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001018, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x8C, 
                            0x0A
                        }
                    })
                }

                If (((CFGD & 0x80) && (Local0 == 0x00)))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001016, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x64, 
                            0x64
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001015, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x3C, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x14, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x0200) && (Local0 == 0x00)))
            {
                Return (Package (0x05)
                {
                    0x04, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001016, // Address
                                ,)
                        }, 

                        0x03, 
                        0x64, 
                        0x64
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001018, // Address
                                ,)
                        }, 

                        0x03, 
                        0x8C, 
                        0x0A
                    }
                })
            }

            If (((CFGD & 0x80) && (Local0 == 0x00)))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001016, // Address
                                ,)
                        }, 

                        0x03, 
                        0x64, 
                        0x64
                    }
                })
            }

            If ((CFGD & 0x40))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001015, // Address
                                ,)
                        }, 

                        0x03, 
                        0x3C, 
                        0xFA
                    }
                })
            }

            If ((CFGD & 0x20))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x14, 
                        0x01F4
                    }
                })
            }

            Return (Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03E8
                }
            })
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "Cpu1Ist", 0x00003000)
{
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (((PDC1 & 0x0800) || (CFGD & 0x02000000)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFE, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x02
                }
            })
        }
    }
}



TCPA
----
[000h 0000   4]                    Signature : "TCPA"    [Trusted Computing Platform Alliance table]
[004h 0004   4]                 Table Length : 00000032
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 33
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "30AA    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   2]               Platform Class : 0000
[026h 0038   4]         Min Event Log Length : 00010000
[02Ah 0042   8]            Event Log Address : 000000003F7D4B12

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 02 33 48 50 20 20 20 20  // TCPA2....3HP    
    0010: 33 30 41 41 20 20 20 20 01 00 00 00 48 50 20 20  // 30AA    ....HP  
    0020: 01 00 00 00 00 00 00 00 01 00 12 4B 7D 3F 00 00  // ...........K}?..
    0030: 00 00                                            // ..


