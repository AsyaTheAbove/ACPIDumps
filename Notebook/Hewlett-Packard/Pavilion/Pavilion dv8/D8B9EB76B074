
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20141107-64 [Apr  6 2015]
Copyright (c) 2000 - 2014 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   RSDP                          "HPQOEM"
   RSDT   0x00000044     0x01    "HPQOEM"  "SLIC-MPC"   0x00000001    "    "     0x01000013
   XSDT   0x00000064     0x01    "HPQOEM"  "SLIC-MPC"   0x00000001    "    "     0x01000013
   DSDT   0x0000CCE0     0x02    "HPQOEM"  "SLIC-MPC"   0x00000001    "MSFT"     0x01000013
   FACS   0x00000040
   FACP   0x000000F4     0x04    "HPQOEM"  "SLIC-MPC"   0x00000001    "MSFT"     0x01000013
   ASF!   0x000000A5     0x20    "HPQOEM"  "SLIC-MPC"   0x00000001    "MSFT"     0x01000013
   HPET   0x00000038     0x01    "HPQOEM"  "SLIC-MPC"   0x00000001    "MSFT"     0x01000013
   APIC   0x0000008C     0x02    "HPQOEM"  "SLIC-MPC"   0x00000001    "MSFT"     0x01000013
   MCFG   0x0000003C     0x01    "HPQOEM"  "SLIC-MPC"   0x00000001    "MSFT"     0x01000013
   SLIC   0x00000176     0x01    "HPQOEM"  "SLIC-MPC"   0x00000001    "SLIC"     0x000F4240
   BOOT   0x00000028     0x01    "HPQOEM"  "SLIC-MPC"   0x00000001    "MSFT"     0x01000013
   SSDT   0x000009F1     0x01    "PmRef "  "CpuPm   "   0x00003000    "INTL"     0x20051117
   SSDT   0x000002E8     0x01    "PmRef "  "Cpu0Ist "   0x00003000    "INTL"     0x20051117
   SSDT   0x00000891     0x01    "PmRef "  "Cpu0Cst "   0x00003001    "INTL"     0x20051117
   SSDT   0x00000303     0x01    "PmRef "  "ApIst   "   0x00003000    "INTL"     0x20051117
   SSDT   0x00000119     0x01    "PmRef "  "ApCst   "   0x00003000    "INTL"     0x20051117

Found 17 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000008C
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 97
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 01
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 03
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : 05
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[06Ch 0108   1]                Subtable Type : 01 [I/O APIC]
[06Dh 0109   1]                       Length : 0C
[06Eh 0110   1]                  I/O Apic ID : 02
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]                      Address : FEC00000
[074h 0116   4]                    Interrupt : 00000000

[078h 0120   1]                Subtable Type : 02 [Interrupt Source Override]
[079h 0121   1]                       Length : 0A
[07Ah 0122   1]                          Bus : 00
[07Bh 0123   1]                       Source : 00
[07Ch 0124   4]                    Interrupt : 00000002
[080h 0128   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[082h 0130   1]                Subtable Type : 02 [Interrupt Source Override]
[083h 0131   1]                       Length : 0A
[084h 0132   1]                          Bus : 00
[085h 0133   1]                       Source : 09
[086h 0134   4]                    Interrupt : 00000009
[08Ah 0138   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 140 (0x8C)

  0000: 41 50 49 43 8C 00 00 00 02 97 48 50 51 4F 45 4D  APIC......HPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 4D 53 46 54  SLIC-MPC....MSFT
  0020: 13 00 00 01 00 00 E0 FE 01 00 00 00 00 08 01 00  ................
  0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 04  ................
  0040: 01 00 00 00 00 08 04 06 01 00 00 00 00 08 05 01  ................
  0050: 01 00 00 00 00 08 06 03 01 00 00 00 00 08 07 05  ................
  0060: 01 00 00 00 00 08 08 07 01 00 00 00 01 0C 02 00  ................
  0070: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  ................
  0080: 00 00 02 0A 00 09 09 00 00 00 0D 00              ............


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format table]
[004h 0004   4]                 Table Length : 000000A5
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : 7F
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : 05
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0001
[02Ch 0044   4]              Manufacturer ID : 57010000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 01 [ASF Alerts]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 002C
[038h 0056   1]                   AssertMask : 00
[039h 0057   1]                 DeassertMask : 00
[03Ah 0058   1]                  Alert Count : 03
[03Bh 0059   1]            Alert Data Length : 0C

[03Ch 0060   1]                      Address : 89
[03Dh 0061   1]                      Command : 04
[03Eh 0062   1]                         Mask : 01
[03Fh 0063   1]                        Value : 01
[040h 0064   1]                   SensorType : 05
[041h 0065   1]                         Type : 6F
[042h 0066   1]                       Offset : 00
[043h 0067   1]                   SourceType : 68
[044h 0068   1]                     Severity : 08
[045h 0069   1]                 SensorNumber : 88
[046h 0070   1]                       Entity : 17
[047h 0071   1]                     Instance : 00

[048h 0072   1]                      Address : 89
[049h 0073   1]                      Command : 04
[04Ah 0074   1]                         Mask : 04
[04Bh 0075   1]                        Value : 04
[04Ch 0076   1]                   SensorType : 07
[04Dh 0077   1]                         Type : 6F
[04Eh 0078   1]                       Offset : 00
[04Fh 0079   1]                   SourceType : 68
[050h 0080   1]                     Severity : 20
[051h 0081   1]                 SensorNumber : 88
[052h 0082   1]                       Entity : 03
[053h 0083   1]                     Instance : 00

[054h 0084   1]                      Address : 89
[055h 0085   1]                      Command : 05
[056h 0086   1]                         Mask : 01
[057h 0087   1]                        Value : 01
[058h 0088   1]                   SensorType : 19
[059h 0089   1]                         Type : 6F
[05Ah 0090   1]                       Offset : 00
[05Bh 0091   1]                   SourceType : 68
[05Ch 0092   1]                     Severity : 20
[05Dh 0093   1]                 SensorNumber : 88
[05Eh 0094   1]                       Entity : 22
[05Fh 0095   1]                     Instance : 00

[060h 0096   1]                Subtable Type : 02 [ASF Remote Control]
[061h 0097   1]                     Reserved : 00
[062h 0098   2]                       Length : 0018
[064h 0100   1]                Control Count : 04
[065h 0101   1]          Control Data Length : 04
[066h 0102   2]                     Reserved : 0000

[068h 0104   1]                     Function : 00
[069h 0105   1]                      Address : 88
[06Ah 0106   1]                      Command : 00
[06Bh 0107   1]                        Value : 03

[06Ch 0108   1]                     Function : 01
[06Dh 0109   1]                      Address : 88
[06Eh 0110   1]                      Command : 00
[06Fh 0111   1]                        Value : 02

[070h 0112   1]                     Function : 02
[071h 0113   1]                      Address : 88
[072h 0114   1]                      Command : 00
[073h 0115   1]                        Value : 01

[074h 0116   1]                     Function : 03
[075h 0117   1]                      Address : 88
[076h 0118   1]                      Command : 00
[077h 0119   1]                        Value : 04

[078h 0120   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121   1]                     Reserved : 00
[07Ah 0122   2]                       Length : 0017
[07Ch 0124   7]                 Capabilities : 20 F8 00 00 00 1F F0
[083h 0131   1]              Completion Code : 00
[084h 0132   4]                Enterprise ID : 00000000
[088h 0136   1]                      Command : 00
[089h 0137   2]                    Parameter : 0000
[08Bh 0139   2]                 Boot Options : 0000
[08Dh 0141   2]               Oem Parameters : 0000

[08Fh 0143   1]                Subtable Type : 84 [ASF Address]
[090h 0144   1]                     Reserved : 00
[091h 0145   2]                       Length : 0016
[093h 0147   1]                Eprom Address : 00
[094h 0148   1]                 Device Count : 10
[095h 0149   1]                    Addresses : 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8 00 00 00 00 00 


Raw Table Data: Length 165 (0xA5)

  0000: 41 53 46 21 A5 00 00 00 20 7F 48 50 51 4F 45 4D  ASF!.... .HPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 4D 53 46 54  SLIC-MPC....MSFT
  0020: 13 00 00 01 00 00 10 00 05 FF 01 00 00 00 01 57  ...............W
  0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 89 04 01 01  ......,.........
  0040: 05 6F 00 68 08 88 17 00 89 04 04 04 07 6F 00 68  .o.h.........o.h
  0050: 20 88 03 00 89 05 01 01 19 6F 00 68 20 88 22 00   ........o.h .".
  0060: 02 00 18 00 04 04 00 00 00 88 00 03 01 88 00 02  ................
  0070: 02 88 00 01 03 88 00 04 03 00 17 00 20 F8 00 00  ............ ...
  0080: 00 1F F0 00 00 00 00 00 00 00 00 00 00 00 00 84  ................
  0090: 00 16 00 00 10 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8  .....\h.........
  00A0: 00 00 00 00 00                                   .....


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0E
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   1]          Boot Register Index : 44
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

  0000: 42 4F 4F 54 28 00 00 00 01 0E 48 50 51 4F 45 4D  BOOT(.....HPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 4D 53 46 54  SLIC-MPC....MSFT
  0020: 13 00 00 01 44 00 00 00                          ....D...


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 2, "HPQOEM", "SLIC-MPC", 0x00000001)
{
    /*
     * iASL Warning: There were 6 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.IEIT.EITV, MethodObj)    // Warning: Unresolved method, guessing 0 arguments
    External (ECST, MethodObj)    // Warning: Unresolved method, guessing 1 arguments
    External (HDOS, MethodObj)    // Warning: Unresolved method, guessing 0 arguments
    External (HNOT, MethodObj)    // Warning: Unresolved method, guessing 1 arguments
    External (IDAB, MethodObj)    // Warning: Unresolved method, guessing 0 arguments
    External (TNOT, MethodObj)    // Warning: Unresolved method, guessing 0 arguments

    External (_PR_.CPU0._PPC, UnknownObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (PDC4, UnknownObj)
    External (PDC5, UnknownObj)
    External (PDC6, UnknownObj)
    External (PDC7, UnknownObj)

    Name (SP2O, 0x4E)
    Name (SP1O, 0x2E)
    Name (IO1B, 0x0600)
    Name (IO1L, 0x70)
    Name (IO2B, 0x0600)
    Name (IO2L, 0x20)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x10)
    Name (SP3O, 0x2E)
    Name (IO4B, 0x0A20)
    Name (IO4L, 0x20)
    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x4000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED1B000)
    Name (DMIL, 0x1000)
    Name (IFPB, 0xFED14000)
    Name (IFPL, 0x1000)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (TTTB, 0xFED20000)
    Name (TTTL, 0x00020000)
    Name (SMBS, 0xEFA0)
    Name (PBLK, 0x0410)
    Name (PMBS, 0x0400)
    Name (PMLN, 0x80)
    Name (LVL2, 0x0414)
    Name (LVL3, 0x0415)
    Name (LVL4, 0x0416)
    Name (SMIP, 0xB2)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (PM30, 0x0430)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED1F404)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, Zero)
    Name (SHPC, One)
    Name (PEPM, Zero)
    Name (PEER, Zero)
    Name (PECS, Zero)
    Name (ITKE, Zero)
    Name (FHPP, One)
    Name (DSSP, Zero)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (BRF, One)
    Name (BPH, 0x02)
    Name (BLC, 0x03)
    Name (BRFS, 0x04)
    Name (BPHS, 0x05)
    Name (BLCT, 0x06)
    Name (BRF4, 0x07)
    Name (BEP, 0x08)
    Name (BBF, 0x09)
    Name (BOF, 0x0A)
    Name (BPT, 0x0B)
    Name (SRAF, 0x0C)
    Name (WWP, 0x0D)
    Name (SDOE, 0x0E)
    Name (TRTP, One)
    Name (TRTD, 0x02)
    Name (TRTI, 0x03)
    Name (GCDD, One)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x0C)
    Name (DSLC, 0x0E)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (SOOT, 0x35)
    Name (PDBR, 0x4D)
    Name (SMBL, 0x10)
    Name (TCGM, One)
    Name (MUWK, Zero)
    Name (KBWK, Zero)
    Name (LAWK, Zero)
    Name (WAOK, Zero)
    Name (BCL1, Package (0x0D)
    {
        0x14, 
        0x18, 
        0x1C, 
        0x21, 
        0x26, 
        0x2B, 
        0x34, 
        0x3D, 
        0x46, 
        0x55, 
        0x5A
    })
    Name (BCL2, Package (0x0D)
    {
        0x14, 
        0x18, 
        0x1C, 
        0x20, 
        0x24, 
        0x29, 
        0x33, 
        0x3D, 
        0x46, 
        0x55, 
        0x5A
    })
    Name (BCLT, Package (0x0D)
    {
        0x64, 
        0x32, 
        Zero, 
        0x0A, 
        0x14, 
        0x1E, 
        0x28, 
        0x32, 
        0x3C, 
        0x46, 
        0x50, 
        0x5A, 
        0x64
    })
    Name (CCBL, Zero)
    Name (WA40, Zero)
    Name (NVDF, Zero)
    Name (NVSF, Zero)
    OperationRegion (GNVS, SystemMemory, 0xBF7BDE18, 0x00000175)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x25), 
        REVN,   8, 
        Offset (0x28), 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        Offset (0x32), 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        COMA,   8, 
        COMB,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        KSV0,   32, 
        KSV1,   8, 
        Offset (0x67), 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        Offset (0x6E), 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x74), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x78), 
        TPMP,   8, 
        TPME,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        BID,    8, 
        Offset (0xAA), 
        ASLB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        I409,   8, 
        I509,   8, 
        I609,   8, 
        I709,   8, 
        IPCF,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        GSMI,   8, 
        PAVP,   8, 
        Offset (0xE1), 
        OSCC,   8, 
        NEXP,   8, 
        SDGV,   8, 
        SDDV,   8, 
        Offset (0xEB), 
        DSEN,   8, 
        ECON,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        Offset (0x100), 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        EBAS,   32, 
        CPSP,   32, 
        EECP,   32, 
        EVCP,   32, 
        XBAS,   32, 
        OBS1,   32, 
        OBS2,   32, 
        OBS3,   32, 
        OBS4,   32, 
        OBS5,   32, 
        OBS6,   32, 
        OBS7,   32, 
        OBS8,   32, 
        Offset (0x157), 
        ATMC,   8, 
        PTMC,   8, 
        ATRA,   8, 
        PTRA,   8, 
        PNHM,   32, 
        TBAB,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        ATPC,   8, 
        PTPC,   8, 
        PFLV,   8, 
        BREV,   8, 
        DPBM,   8, 
        DPCM,   8, 
        DPDM,   8, 
        ALFP,   8, 
        IMON,   8, 
        SMIA,   8, 
        S3DS,   8, 
        PMEE,   8
    }

    OperationRegion (OGNS, SystemMemory, 0xBF7BCF18, 0x0000005A)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        OG00,   8, 
        OG01,   8, 
        OG02,   8, 
        OG03,   8, 
        OG04,   8, 
        OG05,   8, 
        OG06,   8, 
        OG07,   8, 
        OG08,   8, 
        OG09,   8, 
        OG10,   8, 
        WMIA,   8, 
        WMIO,   8, 
        ACPS,   8, 
        HPBD,   8, 
        IVIM,   8, 
        EXTM,   8, 
        WDI0,   8, 
        WDI1,   8, 
        WDI2,   8, 
        WDI3,   8, 
        WSI0,   8, 
        WSI1,   8, 
        WSI2,   8, 
        WSI3,   8, 
        NCDD,   8, 
        NCAD,   8, 
        NNDD,   8, 
        EXCM,   8, 
        VBTL,   8, 
        SID0,   8, 
        SID1,   8, 
        SID2,   8, 
        SID3,   8, 
        SID4,   8, 
        SID5,   8, 
        SID6,   8, 
        SID7,   8, 
        WBLC,   8, 
        WLD0,   8, 
        WLD1,   8, 
        WLD2,   8, 
        WLD3,   8, 
        WLD4,   8, 
        WLD5,   8, 
        WLD6,   8, 
        WLD7,   8, 
        WBD0,   8, 
        WBD1,   8, 
        WBD2,   8, 
        WBD3,   8, 
        WWD0,   8, 
        WWD1,   8, 
        WWD2,   8, 
        WWD3,   8, 
        WAB0,   8, 
        WAB1,   8, 
        WAB2,   8, 
        WAB3,   8, 
        WAB4,   8, 
        WAB5,   8, 
        DBGD,   32, 
        CMTF,   8, 
        CMTI,   32, 
        CMTO,   8, 
        MSRA,   8, 
        BLLV,   8, 
        PSTN,   8, 
        VGAT,   8, 
        PCHV,   8, 
        TJMX,   8
    }

    OperationRegion (H1DA, SystemMemory, 0xBF7BEF98, 0x00000006)
    Field (H1DA, AnyAcc, Lock, Preserve)
    {
        H1SG,   32, 
        FACM,   16
    }

    OperationRegion (MBOX, SystemMemory, 0xBF7BDA98, 0x00000320)
    Field (MBOX, AnyAcc, NoLock, Preserve)
    {
        PCI1,   8, 
        PCI2,   8, 
        PCI3,   8, 
        PCI4,   8, 
        PCI5,   8, 
        PCI6,   8, 
        PCI7,   8, 
        PCI8,   8, 
        NLCK,   8, 
        ZIPE,   8, 
        COA1,   8, 
        CAIO,   8, 
        CAIP,   8, 
        CAMD,   8, 
        CADA,   8, 
        COB1,   8, 
        CBIO,   8, 
        CBIP,   8, 
        CBMD,   8, 
        CBDA,   8, 
        FHSD,   8, 
        COMC,   8, 
        CCIO,   8, 
        CCIP,   8, 
        CCMD,   8, 
        CCDA,   8, 
        COMD,   8, 
        CDIO,   8, 
        CDIP,   8, 
        CDMD,   8, 
        CDDA,   8, 
        LPT1,   8, 
        L1IO,   8, 
        L1IP,   8, 
        L1MD,   8, 
        L1DA,   8, 
        LPT2,   8, 
        L2IO,   8, 
        L2IP,   8, 
        L2MD,   8, 
        L2DA,   8, 
        LPT3,   8, 
        L3IO,   8, 
        L3IP,   8, 
        L3MD,   8, 
        L3DA,   8, 
        FDDC,   8, 
        FDWP,   8, 
        HGMP,   8, 
        LGMP,   8, 
        MIDI,   8, 
        AZLA,   8, 
        AUDO,   8, 
        MODM,   8, 
        IDEC,   8, 
        SSED,   8, 
        PACT,   8, 
        SCFG,   8, 
        AMOD,   8, 
        IMOD,   8, 
        LCFG,   8, 
        IDLY,   8, 
        PMTP,   8, 
        PM32,   8, 
        PMBM,   8, 
        PMTM,   8, 
        PSTP,   8, 
        PSIO,   8, 
        PSBM,   8, 
        PSTM,   8, 
        IDE0,   8, 
        IDE1,   8, 
        IDE2,   8, 
        IDE3,   8, 
        IDE4,   8, 
        IDE5,   8, 
        IDE6,   8, 
        IDE7,   8, 
        HIUB,   8, 
        LUBS,   8, 
        PLYT,   8, 
        EDCG,   8, 
        SDFY,   8, 
        SDTC,   8, 
        SDRP,   8, 
        SDCL,   8, 
        SDRC,   8, 
        SDRE,   8, 
        FC2L,   8, 
        FC3L,   8, 
        FCS4,   8, 
        APIM,   8, 
        HPTS,   8, 
        HPTA,   8, 
        EMAS,   8, 
        VGAO,   8, 
        SOFF,   8, 
        KBPO,   8, 
        MSPO,   8, 
        USBB,   8, 
        EVTL,   8, 
        SYBE,   8, 
        ETLC,   8, 
        ACPV,   8, 
        TPMD,   8, 
        TPMO,   8, 
        TPMC,   8, 
        TPMM,   8, 
        TPCC,   8, 
        TPLC,   8, 
        TPLR,   32, 
        QBOT,   8, 
        BOTQ,   8, 
        PBOT,   8, 
        M256,   8, 
        PEGF,   8, 
        OSY1,   16, 
        BMTP,   8, 
        BNPT,   8, 
        LNMT,   8, 
        NBTO,   8, 
        NABD,   8, 
        NEBD,   8, 
        NLBD,   8, 
        DFBT,   16, 
        NPSP,   16, 
        LANG,   8, 
        UACL,   8, 
        SUPS,   8, 
        DVET,   8, 
        S3RS,   8, 
        DAS1,   8, 
        DAS3,   8, 
        WKPM,   8, 
        WKMD,   8, 
        WKS5,   8, 
        HOUR,   8, 
        MINS,   8, 
        SECS,   8, 
        DOFM,   8, 
        NBTV,   64, 
        BTOD,   64, 
        SPVP,   16, 
        POPW,   16, 
        USPW,   16, 
        HDPW,   16, 
        SAHP,   16, 
        SAHF,   8, 
        SUVF,   8, 
        USRF,   8, 
        UMPW,   8, 
        SMHP,   16, 
        SAMP,   16, 
        SAMF,   8, 
        SPFA,   8, 
        SPFB,   8, 
        SPFC,   8, 
        SPFD,   8, 
        SPFE,   8, 
        SPFF,   8, 
        SPFG,   8, 
        SPFH,   8, 
        SPFI,   8, 
        SPFJ,   8, 
        SPFK,   8, 
        SPFL,   8, 
        SPFM,   8, 
        SPFN,   8, 
        SPFO,   8, 
        SPFP,   8, 
        SPFQ,   8, 
        SPFR,   8, 
        SPFS,   8, 
        SPFT,   8, 
        SPFU,   8, 
        SPFV,   8, 
        SPFW,   8, 
        SPFX,   8, 
        SPFY,   8, 
        SPFZ,   8, 
        SPF0,   8, 
        SPF1,   8, 
        SPF2,   8, 
        SPF3,   8, 
        SPF4,   8, 
        SPF5,   8, 
        CRD0,   8, 
        CRD1,   8, 
        CRD2,   8, 
        CRD3,   8, 
        CRD4,   8, 
        CRD5,   8, 
        CRD6,   8, 
        CRD7,   8, 
        SPCR,   8, 
        KRSV,   64, 
        LANE,   8, 
        AORS,   8, 
        P0HP,   8, 
        P1HP,   8, 
        P2HP,   8, 
        P3HP,   8, 
        P4HP,   8, 
        P5HP,   8, 
        P0IL,   8, 
        P1IL,   8, 
        P2IL,   8, 
        WOLN,   8, 
        DVPA,   8, 
        DTGM,   8, 
        Offset (0xF5), 
        Offset (0xF6), 
        BOTT,   8, 
        PANT,   8, 
        TVTP,   8, 
        U201,   8, 
        U202,   8, 
        U111,   8, 
        U112,   8, 
        U113,   8, 
        U114,   8, 
        U115,   8, 
        UPPC,   8, 
        UP00,   8, 
        UP01,   8, 
        UP02,   8, 
        UP03,   8, 
        UP04,   8, 
        UP05,   8, 
        UP06,   8, 
        UP07,   8, 
        UP08,   8, 
        UP09,   8, 
        UP10,   8, 
        UP11,   8, 
        P80R,   8, 
        WDOG,   8, 
        WDTO,   16, 
        WDTB,   16, 
        MASF,   8, 
        MAMT,   8, 
        ABXP,   8, 
        SPIL,   8, 
        PWDW,   8, 
        HETO,   8, 
        AWTR,   16, 
        EOPT,   8, 
        ASFB,   8, 
        MBTX,   8, 
        IDER,   8, 
        SOLE,   8, 
        UCME,   8, 
        MEDM,   8, 
        PPDA,   8, 
        PPCG,   8, 
        PPBV,   8, 
        PPV1,   8, 
        PPPV,   8, 
        PPMV,   8, 
        PRE0,   8, 
        PRE1,   8, 
        PRE2,   8, 
        PRE3,   8, 
        PRE4,   8, 
        PRE5,   8, 
        PRE6,   8, 
        PRE7,   8, 
        PRA0,   8, 
        PRA1,   8, 
        PRA2,   8, 
        PRA3,   8, 
        PRA4,   8, 
        PRA5,   8, 
        PRA6,   8, 
        PRA7,   8, 
        PRU0,   8, 
        PRU1,   8, 
        PRU2,   8, 
        PRU3,   8, 
        PRU4,   8, 
        PRU5,   8, 
        PRU6,   8, 
        PRU7,   8, 
        PRF0,   8, 
        PRF1,   8, 
        PRF2,   8, 
        PRF3,   8, 
        PRF4,   8, 
        PRF5,   8, 
        PRF6,   8, 
        PRF7,   8, 
        PRN0,   8, 
        PRN1,   8, 
        PRN2,   8, 
        PRN3,   8, 
        PRN4,   8, 
        PRN5,   8, 
        PRN6,   8, 
        PRN7,   8, 
        PRC0,   8, 
        PRC1,   8, 
        PRC2,   8, 
        PRC3,   8, 
        PRC4,   8, 
        PRC5,   8, 
        PRC6,   8, 
        PRC7,   8, 
        CTD0,   8, 
        CTD1,   8, 
        CTD2,   8, 
        CTD3,   8, 
        CTD4,   8, 
        CTD5,   8, 
        CTD6,   8, 
        CTD7,   8, 
        PIE0,   8, 
        PIE1,   8, 
        PIE2,   8, 
        PIE3,   8, 
        PIE4,   8, 
        PIE5,   8, 
        PIE6,   8, 
        PIE7,   8, 
        SFE0,   8, 
        SFE1,   8, 
        SFE2,   8, 
        SFE3,   8, 
        SFE4,   8, 
        SFE5,   8, 
        SFE6,   8, 
        SFE7,   8, 
        SNE0,   8, 
        SNE1,   8, 
        SNE2,   8, 
        SNE3,   8, 
        SNE4,   8, 
        SNE5,   8, 
        SNE6,   8, 
        SNE7,   8, 
        SCE0,   8, 
        SCE1,   8, 
        SCE2,   8, 
        SCE3,   8, 
        SCE4,   8, 
        SCE5,   8, 
        SCE6,   8, 
        SCE7,   8, 
        PPS0,   8, 
        PPS1,   8, 
        PPS2,   8, 
        PPS3,   8, 
        PPS4,   8, 
        PPS5,   8, 
        PPS6,   8, 
        PPS7,   8, 
        PHP0,   8, 
        PHP1,   8, 
        PHP2,   8, 
        PHP3,   8, 
        PHP4,   8, 
        PHP5,   8, 
        PHP6,   8, 
        PHP7,   8, 
        PEGA,   8, 
        PGAA,   8, 
        PGL0,   8, 
        PL0A,   8, 
        PGL1,   8, 
        Offset (0x196), 
        PAV1,   8, 
        ISTC,   8, 
        TRML,   8, 
        ATHF,   8, 
        PTTP,   8, 
        XDMD,   8, 
        PCRR,   8, 
        PROH,   8, 
        TUBM,   8, 
        TSTE,   8, 
        BPST,   8, 
        VTST,   8, 
        CSTS,   8, 
        ENCS,   8, 
        ENC6,   8, 
        CMPE,   8, 
        MDST,   8, 
        EXBR,   8, 
        TXTE,   8, 
        VTDE,   8, 
        CART,   8, 
        CATT,   8, 
        STBE,   8, 
        PEBE,   8, 
        PCBE,   8, 
        EHBE,   8, 
        UHBE,   8, 
        HABE,   8, 
        ERS2,   8, 
        GLPM,   8, 
        GRTT,   8, 
        CRID,   8, 
        ATLF,   8, 
        PTC1,   8, 
        PTC2,   8, 
        PTSP,   8, 
        CTTP,   8, 
        HTSP,   8, 
        U116,   8, 
        U117,   8, 
        UP12,   8, 
        UP13,   8, 
        DALC,   8, 
        ENC7,   8, 
        CSIT,   8, 
        CSIF,   8, 
        CSL1,   8, 
        MIRP,   8, 
        MEMF,   8, 
        CHIL,   8, 
        RKIL,   8, 
        QPIF,   8, 
        DLMF,   8, 
        GPPS,   8, 
        AGLP,   8, 
        EIPS,   8, 
        MTUB,   8, 
        CPEC,   8, 
        IPSP,   8, 
        CTLT,   8, 
        CTLV,   16, 
        MPLT,   8, 
        MPLV,   16, 
        PPLT,   8, 
        PPLV,   16, 
        CPLT,   8, 
        CPLV,   16, 
        RTIF,   8, 
        DPPM,   8, 
        RELT,   8, 
        INTR,   8, 
        PATD,   8, 
        COHE,   8, 
        CTBO,   8, 
        FBOT,   8, 
        CTRD,   8, 
        CERD,   8, 
        MTRD,   8, 
        PTRD,   8, 
        ALEL,   8, 
        CALE,   8, 
        MALE,   8, 
        PALE,   8, 
        DALE,   8, 
        TODM,   8, 
        D1TR,   8, 
        D2TR,   8, 
        D3TR,   8, 
        D4TR,   8, 
        LFPC,   8, 
        RMHM,   8, 
        METR,   8, 
        ECML,   8, 
        MPEC,   8, 
        TRTS,   8, 
        CACK,   8, 
        AZHI,   8, 
        IMEP,   8, 
        IMFE,   8, 
        SAG3,   8, 
        CRSV,   160, 
        CBSD,   8, 
        ED3E,   8, 
        FAON,   8, 
        FFDL,   8, 
        CDBT,   8, 
        FLBT,   8, 
        ENSV,   8, 
        SEHD,   8, 
        FK11,   8, 
        FLFG,   8, 
        BTET,   8, 
        ORSV,   472, 
        LPSD,   8, 
        UT8V,   8, 
        VTDT,   8, 
        DRSV,   776, 
        MEFD,   8, 
        FWVB,   8, 
        USBP,   8, 
        FWPR,   8, 
        MELF,   8, 
        MEFQ,   8, 
        HP0S,   8, 
        HP1S,   8, 
        HP2S,   8, 
        HP3S,   8, 
        HP4S,   8, 
        HP5S,   8, 
        TDTC,   8, 
        TDTP,   8, 
        TDTS,   8, 
        TXTS,   8, 
        PEG1,   8, 
        CPMD,   8, 
        MESK,   8, 
        ENIF,   8, 
        PRSV,   640
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x1B)
        {
            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x1B)
        {
            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR02, Package (0x02)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }
        })
        Name (AR02, Package (0x02)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR01, Package (0x00) {})
        Name (AR01, Package (0x00) {})
        Name (PR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }

        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Name (LSTS, Zero)
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (ECON)
                {
                    If ((^^PCI0.LPCB.EC0.ECLS == One))
                    {
                        LSTS = Zero
                    }
                    Else
                    {
                        LSTS = One
                    }

                    If (IGDS)
                    {
                        LIDS = LSTS /* \_SB_.LID0.LSTS */
                        ^^PCI0.GFX0.CLID = LSTS /* \_SB_.LID0.LSTS */
                    }

                    Return (LSTS) /* \_SB_.LID0.LSTS */
                }
                Else
                {
                    If (IGDS)
                    {
                        LIDS = One
                    }

                    If (IGDS)
                    {
                        ^^PCI0.GFX0.CLID = LIDS /* \LIDS */
                    }

                    Return (One)
                }
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
        }

        Method (GBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            Arg2 = TIDX /* \_SB_.GBFE.TIDX */
        }

        Method (PBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            TIDX = Arg2
        }

        Method (ITOS, 1, NotSerialized)
        {
            Local0 = Buffer (0x05)
                {
                     0x20, 0x20, 0x20, 0x20, 0x20                     /*       */
                }
            Local7 = Buffer (0x11)
                {
                    "0123456789ABCDEF"
                }
            Local1 = 0x05
            Local2 = Zero
            Local3 = Zero
            While (Local1)
            {
                Local1--
                Local4 = ((Arg0 >> (Local1 << 0x02)) & 0x0F)
                GBFE (Local7, Local4, RefOf (Local5))
                PBFE (Local0, Local2, Local5)
                Local2++
            }

            Return (Local0)
        }

        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (ACP, Ones)
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                If (ECON)
                {
                    Local0 = (One & ^^PCI0.LPCB.EC0.SW2S) /* \_SB_.PCI0.LPCB.EC0_.SW2S */
                    PWRS = Local0
                    Return (Local0)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (BAT0)
        {
            Name (FRST, One)
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (PBIF, Package (0x0D)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                0xFA, 
                0x96, 
                0x0A, 
                0x19, 
                "BAT1", 
                " ", 
                " ", 
                " "
            })
            Name (PBST, Package (0x04)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x2710
            })
            Name (BAST, Zero)
            Name (B1ST, 0x0F)
            Name (B1WT, Zero)
            Name (FABL, 0xFFFFFFFF)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (ECON)
                {
                    If (^^PCI0.LPCB.EC0.MBTS)
                    {
                        B1ST = 0x1F
                    }
                    Else
                    {
                        B1ST = 0x0F
                    }
                }
                Else
                {
                    B1ST = 0x0F
                }

                Return (B1ST) /* \_SB_.BAT0.B1ST */
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                If (ECON)
                {
                    If (^^PCI0.LPCB.EC0.MBTS)
                    {
                        UPBI ()
                    }
                    Else
                    {
                        IVBI ()
                    }
                }
                Else
                {
                    IVBI ()
                }

                Return (PBIF) /* \_SB_.BAT0.PBIF */
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                If (ECON)
                {
                    If (^^PCI0.LPCB.EC0.MBTS)
                    {
                        UPBS ()
                    }
                    Else
                    {
                        IVBS ()
                    }
                }
                Else
                {
                    IVBS ()
                }

                Return (PBST) /* \_SB_.BAT0.PBST */
            }

            Method (UPBI, 0, NotSerialized)
            {
                If (!^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x10, RefOf (Local5)))
                {
                    If ((Local5 && !(Local5 & 0x8000)))
                    {
                        Local5 >>= 0x05
                        Local5 <<= 0x05
                        Index (PBIF, 0x02) = Local5
                        Local2 = (Local5 / 0x64)
                        Local2 += One
                        Local4 = (Local2 * 0x0C)
                        Index (PBIF, 0x05) = (Local4 + 0x02)
                        Local4 = (Local2 * 0x07)
                        Index (PBIF, 0x06) = (Local4 + 0x02)
                        Local4 = (Local2 * 0x09)
                        FABL = (Local4 + 0x02)
                    }
                }

                If (^^PCI0.LPCB.EC0.MBNH)
                {
                    Local0 = ^^PCI0.LPCB.EC0.BCLB /* \_SB_.PCI0.LPCB.EC0_.BCLB */
                    Local1 = ^^PCI0.LPCB.EC0.BCHB /* \_SB_.PCI0.LPCB.EC0_.BCHB */
                    Local1 <<= 0x08
                    Local0 |= Local1
                    Index (PBIF, One) = Local0
                    Local0 = ^^PCI0.LPCB.EC0.BVLB /* \_SB_.PCI0.LPCB.EC0_.BVLB */
                    Local1 = ^^PCI0.LPCB.EC0.BVHB /* \_SB_.PCI0.LPCB.EC0_.BVHB */
                    Local1 <<= 0x08
                    Local0 |= Local1
                    Index (PBIF, 0x04) = Local0
                    Index (PBIF, 0x09) = "OANI$"
                    Index (PBIF, 0x0B) = "NiMH"
                }
                Else
                {
                    Local0 = ^^PCI0.LPCB.EC0.BCLB /* \_SB_.PCI0.LPCB.EC0_.BCLB */
                    Local1 = ^^PCI0.LPCB.EC0.BCHB /* \_SB_.PCI0.LPCB.EC0_.BCHB */
                    Local1 <<= 0x08
                    Local0 |= Local1
                    Index (PBIF, One) = Local0
                    Local0 = ^^PCI0.LPCB.EC0.BVLB /* \_SB_.PCI0.LPCB.EC0_.BVLB */
                    Local1 = ^^PCI0.LPCB.EC0.BVHB /* \_SB_.PCI0.LPCB.EC0_.BVHB */
                    Local1 <<= 0x08
                    Local0 |= Local1
                    Index (PBIF, 0x04) = Local0
                    Sleep (0x32)
                    Index (PBIF, 0x0B) = "LION"
                }

                Index (PBIF, 0x09) = "Primary"
                UPUM ()
                Index (PBIF, Zero) = One
            }

            Method (UPUM, 0, NotSerialized)
            {
                Local0 = Buffer (0x0A)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                        /* 0008 */  0x00, 0x00                                       /* .. */
                    }
                Local6 = Buffer (0x05)
                    {
                         0x36, 0x35, 0x35, 0x33, 0x35                     /* 65535 */
                    }
                Local7 = Buffer (0x05)
                    {
                         0x31, 0x32, 0x33, 0x32, 0x31                     /* 12321 */
                    }
                Index (PBIF, 0x0C) = "Hewlett-Packard"
            }

            Method (UPBS, 0, NotSerialized)
            {
                Local5 = ^^PCI0.LPCB.EC0.MBRM /* \_SB_.PCI0.LPCB.EC0_.MBRM */
                If (!(Local5 & 0x8000))
                {
                    Local5 >>= 0x05
                    Local5 <<= 0x05
                    If ((Local5 != DerefOf (Index (PBST, 0x02))))
                    {
                        If ((^^PCI0.LPCB.EC0.BACR == One))
                        {
                            Index (PBST, 0x02) = FABL /* \_SB_.BAT0.FABL */
                        }
                        Else
                        {
                            Index (PBST, 0x02) = Local5
                        }
                    }
                }

                Index (PBST, 0x03) = ^^PCI0.LPCB.EC0.MBCV /* \_SB_.PCI0.LPCB.EC0_.MBCV */
                Index (PBST, Zero) = ^^PCI0.LPCB.EC0.MBST /* \_SB_.PCI0.LPCB.EC0_.MBST */
            }

            Method (IVBI, 0, NotSerialized)
            {
                Index (PBIF, One) = 0xFFFFFFFF
                Index (PBIF, 0x02) = 0xFFFFFFFF
                Index (PBIF, 0x04) = 0xFFFFFFFF
                Index (PBIF, 0x09) = "Bad"
                Index (PBIF, 0x0A) = "Bad"
                Index (PBIF, 0x0B) = "Bad"
                Index (PBIF, 0x0C) = "Bad"
            }

            Method (IVBS, 0, NotSerialized)
            {
                Index (PBST, Zero) = Zero
                Index (PBST, One) = 0xFFFFFFFF
                Index (PBST, 0x02) = 0xFFFFFFFF
                Index (PBST, 0x03) = 0x2710
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            OperationRegion (HBUS, PCI_Config, 0x40, 0xC0)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x08), 
                MHEN,   1, 
                    ,   13, 
                MHBR,   18, 
                Offset (0x10), 
                IIEN,   1, 
                    ,   11, 
                DIBI,   20, 
                Offset (0x28), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x30), 
                IPEN,   1, 
                    ,   11, 
                IPBR,   20, 
                Offset (0x62), 
                TUUD,   16, 
                Offset (0x70), 
                    ,   4, 
                TLUD,   12, 
                Offset (0x89), 
                    ,   3, 
                GTSE,   1, 
                Offset (0x8A)
            }

            OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x1100)
            Field (MCHT, ByteAcc, NoLock, Preserve)
            {
                Offset (0xD40), 
                ADVE,   1, 
                    ,   11, 
                ADVT,   20, 
                Offset (0x101E), 
                T0IS,   16, 
                Offset (0x105E), 
                T1IS,   16, 
                Offset (0x10EF), 
                ESCS,   8
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((PELN >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((PELN >> 0x14) - One)
                If (^^CPBG.IMCH.PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((^^CPBG.IMCH.PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (^^CPBG.IMCH.PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((^^CPBG.IMCH.PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (^^CPBG.IMCH.PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((^^CPBG.IMCH.PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (^^CPBG.IMCH.PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((^^CPBG.IMCH.PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (^^CPBG.IMCH.PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((^^CPBG.IMCH.PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (^^CPBG.IMCH.PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((^^CPBG.IMCH.PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (^^CPBG.IMCH.PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((^^CPBG.IMCH.PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (^^CPBG.IMCH.PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((^^CPBG.IMCH.PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (^^CPBG.IMCH.PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((^^CPBG.IMCH.PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (^^CPBG.IMCH.PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((^^CPBG.IMCH.PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (^^CPBG.IMCH.PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((^^CPBG.IMCH.PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (^^CPBG.IMCH.PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((^^CPBG.IMCH.PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (^^CPBG.IMCH.PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((^^CPBG.IMCH.PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    If ((PNHM >= 0x000106E1))
                    {
                        Local0 = ^IO10.TOLM /* \_SB_.PCI0.IO10.TOLM */
                        M1MN = (Local0++ << 0x1A)
                    }
                    Else
                    {
                        Local0 = ^IIO0.TOLM /* \_SB_.PCI0.IIO0.TOLM */
                        M1MN = (Local0++ << 0x1A)
                    }
                }
                Else
                {
                    M1MN = (TLUD << 0x14)
                }

                M1LN = ((M1MX - M1MN) + One)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (((Arg0 == GUID) && NEXP))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & 0x02))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (PCPC, 0, NotSerialized)
                {
                    ECST (0x6F)
                }

                Method (PAPR, 0, NotSerialized)
                {
                    If (ECON)
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DSEN = (Arg0 & 0x07)
                    If (((Arg0 & 0x03) == Zero))
                    {
                        If (CondRefOf (HDOS))
                        {
                            HDOS ()
                        }
                    }
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    If (CondRefOf (IDAB))
                    {
                        NDID = Zero
                        IDAB ()
                    }
                    Else
                    {
                        NDID = Zero
                        If ((DIDL != Zero))
                        {
                            DID1 = SDDL (DIDL)
                        }

                        If ((DDL2 != Zero))
                        {
                            DID2 = SDDL (DDL2)
                        }

                        If ((DDL3 != Zero))
                        {
                            DID3 = SDDL (DDL3)
                        }

                        If ((DDL4 != Zero))
                        {
                            DID4 = SDDL (DDL4)
                        }

                        If ((DDL5 != Zero))
                        {
                            DID5 = SDDL (DDL5)
                        }

                        If ((DDL6 != Zero))
                        {
                            DID6 = SDDL (DDL6)
                        }

                        If ((DDL7 != Zero))
                        {
                            DID7 = SDDL (DDL7)
                        }

                        If ((DDL8 != Zero))
                        {
                            DID8 = SDDL (DDL8)
                        }
                    }

                    If ((NDID == One))
                    {
                        Name (TMP1, Package (0x01)
                        {
                            0xFFFFFFFF
                        })
                        Index (TMP1, Zero) = (0x00010000 | DID1)
                        Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
                    }

                    If ((NDID == 0x02))
                    {
                        Name (TMP2, Package (0x02)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP2, Zero) = (0x00010000 | DID1)
                        Index (TMP2, One) = (0x00010000 | DID2)
                        Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
                    }

                    If ((NDID == 0x03))
                    {
                        Name (TMP3, Package (0x03)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP3, Zero) = (0x00010000 | DID1)
                        Index (TMP3, One) = (0x00010000 | DID2)
                        Index (TMP3, 0x02) = (0x00010000 | DID3)
                        Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
                    }

                    If ((NDID == 0x04))
                    {
                        Name (TMP4, Package (0x04)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP4, Zero) = (0x00010000 | DID1)
                        Index (TMP4, One) = (0x00010000 | DID2)
                        Index (TMP4, 0x02) = (0x00010000 | DID3)
                        Index (TMP4, 0x03) = (0x00010000 | DID4)
                        Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
                    }

                    If ((NDID == 0x05))
                    {
                        Name (TMP5, Package (0x05)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP5, Zero) = (0x00010000 | DID1)
                        Index (TMP5, One) = (0x00010000 | DID2)
                        Index (TMP5, 0x02) = (0x00010000 | DID3)
                        Index (TMP5, 0x03) = (0x00010000 | DID4)
                        Index (TMP5, 0x04) = (0x00010000 | DID5)
                        Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
                    }

                    If ((NDID == 0x06))
                    {
                        Name (TMP6, Package (0x06)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP6, Zero) = (0x00010000 | DID1)
                        Index (TMP6, One) = (0x00010000 | DID2)
                        Index (TMP6, 0x02) = (0x00010000 | DID3)
                        Index (TMP6, 0x03) = (0x00010000 | DID4)
                        Index (TMP6, 0x04) = (0x00010000 | DID5)
                        Index (TMP6, 0x05) = (0x00010000 | DID6)
                        Return (TMP6) /* \_SB_.PCI0.GFX0._DOD.TMP6 */
                    }

                    If ((NDID == 0x07))
                    {
                        Name (TMP7, Package (0x07)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP7, Zero) = (0x00010000 | DID1)
                        Index (TMP7, One) = (0x00010000 | DID2)
                        Index (TMP7, 0x02) = (0x00010000 | DID3)
                        Index (TMP7, 0x03) = (0x00010000 | DID4)
                        Index (TMP7, 0x04) = (0x00010000 | DID5)
                        Index (TMP7, 0x05) = (0x00010000 | DID6)
                        Index (TMP7, 0x06) = (0x00010000 | DID7)
                        Return (TMP7) /* \_SB_.PCI0.GFX0._DOD.TMP7 */
                    }

                    If ((NDID == 0x08))
                    {
                        Name (TMP8, Package (0x08)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP8, Zero) = (0x00010000 | DID1)
                        Index (TMP8, One) = (0x00010000 | DID2)
                        Index (TMP8, 0x02) = (0x00010000 | DID3)
                        Index (TMP8, 0x03) = (0x00010000 | DID4)
                        Index (TMP8, 0x04) = (0x00010000 | DID5)
                        Index (TMP8, 0x05) = (0x00010000 | DID6)
                        Index (TMP8, 0x06) = (0x00010000 | DID7)
                        Index (TMP8, 0x07) = (0x00010000 | DID8)
                        Return (TMP8) /* \_SB_.PCI0.GFX0._DOD.TMP8 */
                    }

                    Return (Package (0x01)
                    {
                        0x0400
                    })
                }

                Device (DD01)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID1 == Zero))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID1))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDDS (DID1))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD1) /* \NXD1 */
                        }

                        Return (NDDS (DID1))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD02)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID2 == Zero))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID2))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((LIDS == Zero))
                        {
                            Return (Zero)
                        }

                        Return (CDDS (DID2))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD2) /* \NXD2 */
                        }

                        Return (NDDS (DID2))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Return (Package (0x17)
                        {
                            0x50, 
                            0x32, 
                            Zero, 
                            0x05, 
                            0x0A, 
                            0x0F, 
                            0x14, 
                            0x19, 
                            0x1E, 
                            0x23, 
                            0x28, 
                            0x2D, 
                            0x32, 
                            0x37, 
                            0x3C, 
                            0x41, 
                            0x46, 
                            0x4B, 
                            0x50, 
                            0x55, 
                            0x5A, 
                            0x5F, 
                            0x64
                        })
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                        {
                            AINT (One, Arg0)
                            BRTL = Arg0
                        }
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Return (BRTL) /* \BRTL */
                    }
                }

                Device (DD03)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        P8XH (0x04, 0xEA, Zero)
                        P8XH (0x04, 0xEA, One)
                        If ((DID3 == Zero))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID3))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID3 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID3))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD3) /* \NXD3 */
                        }

                        Return (NDDS (DID3))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Return (BCLT) /* \BCLT */
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        If (ECON)
                        {
                            SBCM (Arg0)
                        }
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        If (ECON)
                        {
                            Return (GBQC ())
                        }
                        Else
                        {
                            Return (GBQC ())
                        }
                    }

                    Method (GBQC, 0, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = ^^^LPCB.EC0.BRTL /* \_SB_.PCI0.LPCB.EC0_.BRTL */
                        While ((Local0 < 0x0B))
                        {
                            If ((LCDD == 0x314AA34C))
                            {
                                Local2 = DerefOf (Index (BCL1, Local0))
                            }
                            Else
                            {
                                Local2 = DerefOf (Index (BCL2, Local0))
                            }

                            If ((Local1 == Local2))
                            {
                                Local2 = (Local0 + 0x02)
                                Local3 = DerefOf (Index (BCLT, Local2))
                                Local0 = 0x0B
                            }

                            Local0++
                        }

                        Return (Local3)
                    }

                    Method (SBCM, 1, NotSerialized)
                    {
                        Local0 = Zero
                        While ((Local0 < 0x0B))
                        {
                            Local1 = (Local0 + 0x02)
                            Local2 = DerefOf (Index (BCLT, Local1))
                            If ((Arg0 == Local2))
                            {
                                If ((LCDD == 0x314AA34C))
                                {
                                    ^^^LPCB.EC0.BRTL = DerefOf (Index (BCL1, Local0))
                                }
                                Else
                                {
                                    ^^^LPCB.EC0.BRTL = DerefOf (Index (BCL2, Local0))
                                }

                                Local0 = 0x0B
                            }

                            Local0++
                        }
                    }
                }

                Device (DD04)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID4 == Zero))
                        {
                            Return (0x04)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID4))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID4 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID4))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD4) /* \NXD4 */
                        }

                        Return (NDDS (DID4))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD05)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID5 == Zero))
                        {
                            Return (0x05)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID5))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID5 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID5))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD5) /* \NXD5 */
                        }

                        Return (NDDS (DID5))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD06)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID6 == Zero))
                        {
                            Return (0x06)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID6))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID6 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID6))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD6) /* \NXD6 */
                        }

                        Return (NDDS (DID6))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD07)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID7 == Zero))
                        {
                            Return (0x07)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID7))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID7 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID7))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD7) /* \NXD7 */
                        }

                        Return (NDDS (DID7))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD08)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID8 == Zero))
                        {
                            Return (0x08)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID8))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID8 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID8))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD8) /* \NXD8 */
                        }

                        Return (NDDS (DID8))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Method (SDDL, 1, NotSerialized)
                {
                    NDID++
                    Local0 = (Arg0 & 0x0F0F)
                    Local1 = (0x80000000 | Local0)
                    If ((DIDL == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL2 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL3 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL4 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL5 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL6 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL7 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL8 == Local0))
                    {
                        Return (Local1)
                    }

                    Return (Zero)
                }

                Method (CDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((Zero == Local0))
                    {
                        Return (0x1D)
                    }

                    If ((CADL == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL2 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL3 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL4 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL5 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL6 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL7 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL8 == Local0))
                    {
                        Return (0x1F)
                    }

                    Return (0x1D)
                }

                Method (NDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((Zero == Local0))
                    {
                        Return (Zero)
                    }

                    If ((NADL == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL2 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL3 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL4 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL5 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL6 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL7 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL8 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Scope (^^PCI0)
                {
                    OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                    Field (MCHP, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x60), 
                        TASM,   10, 
                        Offset (0x62)
                    }
                }

                OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
                Field (IGDP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x12), 
                        ,   1, 
                    GIVD,   1, 
                        ,   2, 
                    GUMA,   3, 
                    Offset (0x14), 
                        ,   4, 
                    GMFN,   1, 
                    Offset (0x18), 
                    Offset (0xA4), 
                    ASLE,   8, 
                    Offset (0xA8), 
                    GSSE,   1, 
                    GSSB,   14, 
                    GSES,   1, 
                    Offset (0xB0), 
                        ,   12, 
                    CDVL,   1, 
                    Offset (0xB2), 
                    Offset (0xB5), 
                    LBPC,   8, 
                    Offset (0xBC), 
                    ASLS,   32
                }

                OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
                Field (IGDM, AnyAcc, NoLock, Preserve)
                {
                    SIGN,   128, 
                    SIZE,   32, 
                    OVER,   32, 
                    SVER,   256, 
                    VVER,   128, 
                    GVER,   128, 
                    MBOX,   32, 
                    DMOD,   32, 
                    Offset (0x100), 
                    DRDY,   32, 
                    CSTS,   32, 
                    CEVT,   32, 
                    Offset (0x120), 
                    DIDL,   32, 
                    DDL2,   32, 
                    DDL3,   32, 
                    DDL4,   32, 
                    DDL5,   32, 
                    DDL6,   32, 
                    DDL7,   32, 
                    DDL8,   32, 
                    CPDL,   32, 
                    CPL2,   32, 
                    CPL3,   32, 
                    CPL4,   32, 
                    CPL5,   32, 
                    CPL6,   32, 
                    CPL7,   32, 
                    CPL8,   32, 
                    CADL,   32, 
                    CAL2,   32, 
                    CAL3,   32, 
                    CAL4,   32, 
                    CAL5,   32, 
                    CAL6,   32, 
                    CAL7,   32, 
                    CAL8,   32, 
                    NADL,   32, 
                    NDL2,   32, 
                    NDL3,   32, 
                    NDL4,   32, 
                    NDL5,   32, 
                    NDL6,   32, 
                    NDL7,   32, 
                    NDL8,   32, 
                    ASLP,   32, 
                    TIDX,   32, 
                    CHPD,   32, 
                    CLID,   32, 
                    CDCK,   32, 
                    SXSW,   32, 
                    EVTS,   32, 
                    CNOT,   32, 
                    NRDY,   32, 
                    Offset (0x200), 
                    SCIE,   1, 
                    GEFC,   4, 
                    GXFC,   3, 
                    GESF,   8, 
                    Offset (0x204), 
                    PARM,   32, 
                    DSLP,   32, 
                    Offset (0x300), 
                    ARDY,   32, 
                    ASLC,   32, 
                    TCHE,   32, 
                    ALSI,   32, 
                    BCLP,   32, 
                    PFIT,   32, 
                    CBLV,   32, 
                    BCLM,   320, 
                    CPFM,   32, 
                    EPFM,   32, 
                    PLUT,   592, 
                    PFMB,   32, 
                    CCDV,   32, 
                    PCFT,   32, 
                    Offset (0x400), 
                    GVD1,   49152, 
                    PHED,   32, 
                    BDDC,   2048
                }

                Name (DBTB, Package (0x15)
                {
                    Zero, 
                    0x07, 
                    0x38, 
                    0x01C0, 
                    0x0E00, 
                    0x3F, 
                    0x01C7, 
                    0x0E07, 
                    0x01F8, 
                    0x0E38, 
                    0x0FC0, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x7000, 
                    0x7007, 
                    0x7038, 
                    0x71C0, 
                    0x7E00
                })
                Name (CDCT, Package (0x05)
                {
                    Package (0x02)
                    {
                        0xE4, 
                        0x0140
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }
                })
                Name (SUCC, One)
                Name (NVLD, 0x02)
                Name (CRIT, 0x04)
                Name (NCRT, 0x06)
                Method (GSCI, 0, Serialized)
                {
                    Method (GBDA, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = 0x0679
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            PARM = 0x0240
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            PARM &= 0xEFFF0000
                            PARM &= (DerefOf (Index (DBTB, IBTT)) << 0x10)
                            PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            PARM = IPSC /* \IPSC */
                            PARM |= (IPAT << 0x08)
                            PARM += 0x0100
                            PARM |= (LIDS << 0x10)
                            PARM += 0x00010000
                            PARM |= (IBIA << 0x14)
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            PARM = ITVF /* \ITVF */
                            PARM |= (ITVM << 0x04)
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                            PARM ^= One
                            PARM |= (GMFN << One)
                            PARM |= 0x1800
                            PARM |= (IDMS << 0x11)
                            PARM |= (DerefOf (Index (DerefOf (Index (CDCT, HVCO)), CDVL)) << 
                                0x15) /* \_SB_.PCI0.GFX0.PARM */
                            GESF = One
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            PARM = Zero
                            If (ISSC)
                            {
                                PARM |= 0x03
                            }

                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            PARM = KSV0 /* \KSV0 */
                            GESF = KSV1 /* \KSV1 */
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                    }

                    Method (SBCB, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = Zero
                            PARM = 0x000F87FD
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x03))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            ITVF = (PARM & 0x0F)
                            ITVM = ((PARM & 0xF0) >> 0x04)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            If ((PARM == Zero))
                            {
                                Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x08))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x09))
                        {
                            IBTT = (PARM & 0xFF)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            IPSC = (PARM & 0xFF)
                            If (((PARM >> 0x08) & 0xFF))
                            {
                                IPAT = ((PARM >> 0x08) & 0xFF)
                                IPAT--
                            }

                            IBIA = ((PARM >> 0x14) & 0x07)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            IF1E = ((PARM >> One) & One)
                            If ((PARM & 0x0001E000))
                            {
                                IDMS = ((PARM >> 0x0D) & 0x0F)
                            }
                            Else
                            {
                                IDMS = ((PARM >> 0x11) & 0x0F)
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x10))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x11))
                        {
                            PARM = (LIDS << 0x08)
                            PARM += 0x0100
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x12))
                        {
                            If ((PARM & One))
                            {
                                If (((PARM >> One) == One))
                                {
                                    ISSC = One
                                }
                                Else
                                {
                                    GESF = Zero
                                    Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                                }
                            }
                            Else
                            {
                                ISSC = Zero
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x13))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x14))
                        {
                            PAVP = (PARM & 0x0F)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GEFC == 0x04))
                    {
                        GXFC = GBDA ()
                    }

                    If ((GEFC == 0x06))
                    {
                        GXFC = SBCB ()
                    }

                    GEFC = Zero
                    SCIS = One
                    GSSE = Zero
                    SCIE = Zero
                    Return (Zero)
                }

                Method (PDRD, 0, NotSerialized)
                {
                    If (!DRDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!DRDY)
                }

                Method (PSTS, 0, NotSerialized)
                {
                    If ((CSTS > 0x02))
                    {
                        Sleep (ASLP)
                    }

                    Return ((CSTS == 0x03))
                }

                Method (GNOT, 2, NotSerialized)
                {
                    If (PDRD ())
                    {
                        Return (One)
                    }

                    CEVT = Arg0
                    CSTS = 0x03
                    If (((CHPD == Zero) && (Arg1 == Zero)))
                    {
                        If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                        {
                            Notify (PCI0, Arg1)
                        }
                        Else
                        {
                            Notify (GFX0, Arg1)
                        }
                    }

                    If (CondRefOf (HNOT))
                    {
                        HNOT (Arg0)
                    }
                    Else
                    {
                        Notify (GFX0, 0x80) // Status Change
                    }

                    Return (Zero)
                }

                Method (GHDS, 1, NotSerialized)
                {
                    TIDX = Arg0
                    Return (GNOT (One, Zero))
                }

                Method (GLID, 1, NotSerialized)
                {
                    CLID = Arg0
                    Return (GNOT (0x02, Zero))
                }

                Method (GDCK, 1, NotSerialized)
                {
                    CDCK = Arg0
                    Return (GNOT (0x04, Zero))
                }

                Method (PARD, 0, NotSerialized)
                {
                    If (!ARDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!ARDY)
                }

                Method (AINT, 2, NotSerialized)
                {
                    If (!(TCHE & (One << Arg0)))
                    {
                        Return (One)
                    }

                    If (PARD ())
                    {
                        Return (One)
                    }

                    If ((Arg0 == 0x02))
                    {
                        If (CPFM)
                        {
                            Local0 = (CPFM & 0x0F)
                            Local1 = (EPFM & 0x0F)
                            If ((Local0 == One))
                            {
                                If ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                Else
                                {
                                    If ((Local1 & 0x08))
                                    {
                                        PFIT = 0x08
                                    }
                                    Else
                                    {
                                        PFIT = One
                                    }
                                }
                            }

                            If ((Local0 == 0x06))
                            {
                                If ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                Else
                                {
                                    If ((Local1 & One))
                                    {
                                        PFIT = One
                                    }
                                    Else
                                    {
                                        PFIT = 0x06
                                    }
                                }
                            }

                            If ((Local0 == 0x08))
                            {
                                If ((Local1 & One))
                                {
                                    PFIT = One
                                }
                                Else
                                {
                                    If ((Local1 & 0x06))
                                    {
                                        PFIT = 0x06
                                    }
                                    Else
                                    {
                                        PFIT = 0x08
                                    }
                                }
                            }
                        }
                        Else
                        {
                            PFIT ^= 0x07
                        }

                        PFIT |= 0x80000000
                        ASLC = 0x04
                    }
                    Else
                    {
                        If ((Arg0 == One))
                        {
                            BCLP = ((Arg1 * 0xFF) / 0x64)
                            BCLP |= 0x80000000
                            ASLC = 0x02
                        }
                        Else
                        {
                            If ((Arg0 == Zero))
                            {
                                ALSI = Arg1
                                ASLC = One
                            }
                            Else
                            {
                                Return (One)
                            }
                        }
                    }

                    ASLE = One
                    Return (Zero)
                }

                Method (SCIP, 0, NotSerialized)
                {
                    If ((OVER != Zero))
                    {
                        Return (!GSMI)
                    }

                    Return (Zero)
                }
            }

            Device (P0P2)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PR02 */
                }

                Device (PEGP)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SWIT, One)
                    Name (CRTA, One)
                    Name (LCDA, One)
                    Name (TVAA, One)
                    Name (HDTV, One)
                    Name (DDDS, Buffer (0x14) {})
                    CreateDWordField (DDDS, Zero, D0ST)
                    CreateDWordField (DDDS, 0x04, D1ST)
                    CreateDWordField (DDDS, 0x08, D2ST)
                    CreateDWordField (DDDS, 0x0C, D3ST)
                    CreateDWordField (DDDS, 0x10, D4ST)
                    CreateWordField (DDDS, Zero, D0ID)
                    CreateBitField (DDDS, 0x12, D0EN)
                    CreateBitField (DDDS, 0x14, D0CN)
                    CreateWordField (DDDS, 0x04, D1ID)
                    CreateBitField (DDDS, 0x32, D1EN)
                    CreateBitField (DDDS, 0x34, D1CN)
                    CreateWordField (DDDS, 0x08, D2ID)
                    CreateBitField (DDDS, 0x52, D2EN)
                    CreateBitField (DDDS, 0x54, D2CN)
                    CreateWordField (DDDS, 0x0C, D3ID)
                    CreateBitField (DDDS, 0x72, D3EN)
                    CreateBitField (DDDS, 0x74, D3CN)
                    CreateWordField (DDDS, 0x10, D4ID)
                    CreateBitField (DDDS, 0x92, D4EN)
                    CreateBitField (DDDS, 0x94, D4CN)
                    Method (DDCN, 1, NotSerialized)
                    {
                        Local0 = (Arg0 & 0xFFFF)
                        If ((Local0 == D0ID))
                        {
                            Return (D0CN) /* \_SB_.PCI0.P0P2.VGA_.D0CN */
                        }
                        Else
                        {
                            If ((Local0 == D1ID))
                            {
                                Return (D1CN) /* \_SB_.PCI0.P0P2.VGA_.D1CN */
                            }
                            Else
                            {
                                If ((Local0 == D2ID))
                                {
                                    Return (D2CN) /* \_SB_.PCI0.P0P2.VGA_.D2CN */
                                }
                                Else
                                {
                                    If ((Local0 == D3ID))
                                    {
                                        Return (D3CN) /* \_SB_.PCI0.P0P2.VGA_.D3CN */
                                    }
                                    Else
                                    {
                                        If ((Local0 == D4ID))
                                        {
                                            Return (D4CN) /* \_SB_.PCI0.P0P2.VGA_.D4CN */
                                        }
                                    }
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (DDEN, 1, NotSerialized)
                    {
                        Local0 = (Arg0 & 0xFFFF)
                        If ((Local0 == D0ID))
                        {
                            Return (D0EN) /* \_SB_.PCI0.P0P2.VGA_.D0EN */
                        }
                        Else
                        {
                            If ((Local0 == D1ID))
                            {
                                Return (D1EN) /* \_SB_.PCI0.P0P2.VGA_.D1EN */
                            }
                            Else
                            {
                                If ((Local0 == D2ID))
                                {
                                    Return (D2EN) /* \_SB_.PCI0.P0P2.VGA_.D2EN */
                                }
                                Else
                                {
                                    If ((Local0 == D3ID))
                                    {
                                        Return (D3EN) /* \_SB_.PCI0.P0P2.VGA_.D3EN */
                                    }
                                    Else
                                    {
                                        If ((Local0 == D4ID))
                                        {
                                            Return (D4EN) /* \_SB_.PCI0.P0P2.VGA_.D4EN */
                                        }
                                    }
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_PSC, Zero)  // _PSC: Power State Current
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        DBGD = 0xE3
                        TRAP (TRTI, 0x21)
                        P8XH (0x04, 0xEB, Zero)
                        P8XH (0x04, 0xEB, One)
                        _PSC = Zero
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        _PSC = 0x03
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        SWIT = (Arg0 & 0x03)
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x03)
                        {
                            0x00010100, 
                            0x00010118, 
                            0x00010121
                        })
                    }

                    Device (CRT)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "CRT -- _DCS"
                            If (CRTA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "CRT -- _DGS"
                            If (CRTA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "CRT -- _DSS"
                        }
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0118)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "LCD -- _DCS"
                            If (LCDA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "LCD -- _DCS"
                            If (LCDA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "LCD -- _DSS"
                        }

                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLT) /* \BCLT */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If (ECON)
                            {
                                SBCM (Arg0)
                            }
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            If (ECON)
                            {
                                Return (GBQC ())
                            }
                            Else
                            {
                                Return (GBQC ())
                            }
                        }

                        Method (GBQC, 0, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = ^^^^LPCB.EC0.BRTL /* \_SB_.PCI0.LPCB.EC0_.BRTL */
                            While ((Local0 < 0x0B))
                            {
                                If ((LCDD == 0x314AA34C))
                                {
                                    Local2 = DerefOf (Index (BCL1, Local0))
                                }
                                Else
                                {
                                    Local2 = DerefOf (Index (BCL2, Local0))
                                }

                                If ((Local1 == Local2))
                                {
                                    Local2 = (Local0 + 0x02)
                                    Local3 = DerefOf (Index (BCLT, Local2))
                                    Local0 = 0x0B
                                }

                                Local0++
                            }

                            Return (Local3)
                        }

                        Method (SBCM, 1, NotSerialized)
                        {
                            Local0 = Zero
                            While ((Local0 < 0x0B))
                            {
                                Local1 = (Local0 + 0x02)
                                Local2 = DerefOf (Index (BCLT, Local1))
                                If ((Arg0 == Local2))
                                {
                                    If ((LCDD == 0x314AA34C))
                                    {
                                        ^^^^LPCB.EC0.BRTL = DerefOf (Index (BCL1, Local0))
                                    }
                                    Else
                                    {
                                        ^^^^LPCB.EC0.BRTL = DerefOf (Index (BCL2, Local0))
                                    }

                                    Local0 = 0x0B
                                }

                                Local0++
                            }
                        }
                    }

                    Device (HDMI)
                    {
                        Name (_ADR, 0x0121)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "HDMI TV -- _DCS"
                            If (HDTV)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "HDMI TV -- _DCS"
                            If (HDTV)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "HDMI TV -- _DSS"
                        }
                    }

                    Method (NVIF, 3, NotSerialized)
                    {
                        Name (STA0, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           /* .... */
                        })
                        Name (DAT0, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           /* .... */
                        })
                        STA0 = 0x80000002
                        DAT0 = Zero
                        If ((Arg0 == One))
                        {
                            If ((Arg1 == Zero))
                            {
                                STA0 = Zero
                                DAT0 = One
                                Concatenate (STA0, DAT0, Local0)
                            }

                            Return (Local0)
                        }
                        Else
                        {
                            If ((Arg0 == 0x0B))
                            {
                                If ((Arg1 == Zero))
                                {
                                    NVSF = 0xAA
                                    STA0 = Zero
                                    DAT0 = One
                                    Concatenate (STA0, DAT0, Local0)
                                    Return (Local0)
                                }
                                Else
                                {
                                    If ((Arg1 == 0x03))
                                    {
                                        CSTE = Zero
                                        CADL = Zero
                                        NSTE = One
                                        DDDS = Arg2
                                        Local1 = Zero
                                        If (DDCN (0x00010118))
                                        {
                                            Local1 |= One
                                        }

                                        If (DDCN (0x00010100))
                                        {
                                            Local1 |= 0x02
                                        }

                                        If (DDCN (0x00010121))
                                        {
                                            Local1 |= 0x10
                                        }

                                        CADL = Local1
                                        Local2 = Zero
                                        If (DDEN (0x00010118))
                                        {
                                            Local2 |= One
                                        }

                                        If (DDEN (0x00010100))
                                        {
                                            Local2 |= 0x02
                                        }

                                        If (DDEN (0x00010121))
                                        {
                                            Local2 |= 0x10
                                        }

                                        CSTE = Local2
                                        If ((CADL == One))
                                        {
                                            NSTE = One
                                        }
                                        Else
                                        {
                                            If ((CADL == 0x03))
                                            {
                                                If ((CSTE == One))
                                                {
                                                    NSTE = 0x02
                                                }
                                                Else
                                                {
                                                    If ((CSTE == 0x02))
                                                    {
                                                        NSTE = 0x03
                                                    }
                                                    Else
                                                    {
                                                        If ((CSTE == 0x03))
                                                        {
                                                            NSTE = One
                                                        }
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                If ((CADL == 0x11))
                                                {
                                                    If ((CSTE == One))
                                                    {
                                                        NSTE = 0x10
                                                    }
                                                    Else
                                                    {
                                                        If ((CSTE == 0x10))
                                                        {
                                                            NSTE = 0x11
                                                        }
                                                        Else
                                                        {
                                                            If ((CSTE == 0x11))
                                                            {
                                                                NSTE = One
                                                            }
                                                        }
                                                    }
                                                }
                                                Else
                                                {
                                                    If ((CADL == 0x13))
                                                    {
                                                        If ((CSTE == One))
                                                        {
                                                            NSTE = 0x02
                                                        }
                                                        Else
                                                        {
                                                            If ((CSTE == 0x02))
                                                            {
                                                                NSTE = 0x10
                                                            }
                                                            Else
                                                            {
                                                                If ((CSTE == 0x10))
                                                                {
                                                                    NSTE = 0x03
                                                                }
                                                                Else
                                                                {
                                                                    If ((CSTE == 0x03))
                                                                    {
                                                                        NSTE = 0x11
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((CSTE == 0x11))
                                                                        {
                                                                            NSTE = One
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        NVDF = One
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Device (P0P3)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PR02 */
                }

                Device (PEGP)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SWIT, One)
                    Name (CRTA, One)
                    Name (LCDA, One)
                    Name (TVAA, One)
                    Name (HDTV, One)
                    Name (DDDS, Buffer (0x14) {})
                    CreateDWordField (DDDS, Zero, D0ST)
                    CreateDWordField (DDDS, 0x04, D1ST)
                    CreateDWordField (DDDS, 0x08, D2ST)
                    CreateDWordField (DDDS, 0x0C, D3ST)
                    CreateDWordField (DDDS, 0x10, D4ST)
                    CreateWordField (DDDS, Zero, D0ID)
                    CreateBitField (DDDS, 0x12, D0EN)
                    CreateBitField (DDDS, 0x14, D0CN)
                    CreateWordField (DDDS, 0x04, D1ID)
                    CreateBitField (DDDS, 0x32, D1EN)
                    CreateBitField (DDDS, 0x34, D1CN)
                    CreateWordField (DDDS, 0x08, D2ID)
                    CreateBitField (DDDS, 0x52, D2EN)
                    CreateBitField (DDDS, 0x54, D2CN)
                    CreateWordField (DDDS, 0x0C, D3ID)
                    CreateBitField (DDDS, 0x72, D3EN)
                    CreateBitField (DDDS, 0x74, D3CN)
                    CreateWordField (DDDS, 0x10, D4ID)
                    CreateBitField (DDDS, 0x92, D4EN)
                    CreateBitField (DDDS, 0x94, D4CN)
                    Method (DDCN, 1, NotSerialized)
                    {
                        Local0 = (Arg0 & 0xFFFF)
                        If ((Local0 == D0ID))
                        {
                            Return (D0CN) /* \_SB_.PCI0.P0P3.VGA_.D0CN */
                        }
                        Else
                        {
                            If ((Local0 == D1ID))
                            {
                                Return (D1CN) /* \_SB_.PCI0.P0P3.VGA_.D1CN */
                            }
                            Else
                            {
                                If ((Local0 == D2ID))
                                {
                                    Return (D2CN) /* \_SB_.PCI0.P0P3.VGA_.D2CN */
                                }
                                Else
                                {
                                    If ((Local0 == D3ID))
                                    {
                                        Return (D3CN) /* \_SB_.PCI0.P0P3.VGA_.D3CN */
                                    }
                                    Else
                                    {
                                        If ((Local0 == D4ID))
                                        {
                                            Return (D4CN) /* \_SB_.PCI0.P0P3.VGA_.D4CN */
                                        }
                                    }
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (DDEN, 1, NotSerialized)
                    {
                        Local0 = (Arg0 & 0xFFFF)
                        If ((Local0 == D0ID))
                        {
                            Return (D0EN) /* \_SB_.PCI0.P0P3.VGA_.D0EN */
                        }
                        Else
                        {
                            If ((Local0 == D1ID))
                            {
                                Return (D1EN) /* \_SB_.PCI0.P0P3.VGA_.D1EN */
                            }
                            Else
                            {
                                If ((Local0 == D2ID))
                                {
                                    Return (D2EN) /* \_SB_.PCI0.P0P3.VGA_.D2EN */
                                }
                                Else
                                {
                                    If ((Local0 == D3ID))
                                    {
                                        Return (D3EN) /* \_SB_.PCI0.P0P3.VGA_.D3EN */
                                    }
                                    Else
                                    {
                                        If ((Local0 == D4ID))
                                        {
                                            Return (D4EN) /* \_SB_.PCI0.P0P3.VGA_.D4EN */
                                        }
                                    }
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_PSC, Zero)  // _PSC: Power State Current
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        DBGD = 0xE3
                        TRAP (TRTI, 0x21)
                        P8XH (0x04, 0xEB, Zero)
                        P8XH (0x04, 0xEB, One)
                        _PSC = Zero
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        _PSC = 0x03
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        SWIT = (Arg0 & 0x03)
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x03)
                        {
                            0x00010100, 
                            0x00010118, 
                            0x00010121
                        })
                    }

                    Device (CRT)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "CRT -- _DCS"
                            If (CRTA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "CRT -- _DGS"
                            If (CRTA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "CRT -- _DSS"
                        }
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0118)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "LCD -- _DCS"
                            If (LCDA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "LCD -- _DCS"
                            If (LCDA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "LCD -- _DSS"
                        }

                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLT) /* \BCLT */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If (ECON)
                            {
                                SBCM (Arg0)
                            }
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            If (ECON)
                            {
                                Return (GBQC ())
                            }
                            Else
                            {
                                Return (GBQC ())
                            }
                        }

                        Method (GBQC, 0, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = ^^^^LPCB.EC0.BRTL /* \_SB_.PCI0.LPCB.EC0_.BRTL */
                            While ((Local0 < 0x0B))
                            {
                                If ((LCDD == 0x314AA34C))
                                {
                                    Local2 = DerefOf (Index (BCL1, Local0))
                                }
                                Else
                                {
                                    Local2 = DerefOf (Index (BCL2, Local0))
                                }

                                If ((Local1 == Local2))
                                {
                                    Local2 = (Local0 + 0x02)
                                    Local3 = DerefOf (Index (BCLT, Local2))
                                    Local0 = 0x0B
                                }

                                Local0++
                            }

                            Return (Local3)
                        }

                        Method (SBCM, 1, NotSerialized)
                        {
                            Local0 = Zero
                            While ((Local0 < 0x0B))
                            {
                                Local1 = (Local0 + 0x02)
                                Local2 = DerefOf (Index (BCLT, Local1))
                                If ((Arg0 == Local2))
                                {
                                    If ((LCDD == 0x314AA34C))
                                    {
                                        ^^^^LPCB.EC0.BRTL = DerefOf (Index (BCL1, Local0))
                                    }
                                    Else
                                    {
                                        ^^^^LPCB.EC0.BRTL = DerefOf (Index (BCL2, Local0))
                                    }

                                    Local0 = 0x0B
                                }

                                Local0++
                            }
                        }
                    }

                    Device (HDMI)
                    {
                        Name (_ADR, 0x0121)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            Debug = "HDMI TV -- _DCS"
                            If (HDTV)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            Debug = "HDMI TV -- _DCS"
                            If (HDTV)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Debug = "HDMI TV -- _DSS"
                        }
                    }

                    Method (NVIF, 3, NotSerialized)
                    {
                        Name (STA0, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           /* .... */
                        })
                        Name (DAT0, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           /* .... */
                        })
                        STA0 = 0x80000002
                        DAT0 = Zero
                        If ((Arg0 == One))
                        {
                            If ((Arg1 == Zero))
                            {
                                STA0 = Zero
                                DAT0 = One
                                Concatenate (STA0, DAT0, Local0)
                            }

                            Return (Local0)
                        }
                        Else
                        {
                            If ((Arg0 == 0x0B))
                            {
                                If ((Arg1 == Zero))
                                {
                                    NVSF = 0xAA
                                    STA0 = Zero
                                    DAT0 = One
                                    Concatenate (STA0, DAT0, Local0)
                                    Return (Local0)
                                }
                                Else
                                {
                                    If ((Arg1 == 0x03))
                                    {
                                        CSTE = Zero
                                        CADL = Zero
                                        NSTE = One
                                        DDDS = Arg2
                                        Local1 = Zero
                                        If (DDCN (0x00010118))
                                        {
                                            Local1 |= One
                                        }

                                        If (DDCN (0x00010100))
                                        {
                                            Local1 |= 0x02
                                        }

                                        If (DDCN (0x00010121))
                                        {
                                            Local1 |= 0x10
                                        }

                                        CADL = Local1
                                        Local2 = Zero
                                        If (DDEN (0x00010118))
                                        {
                                            Local2 |= One
                                        }

                                        If (DDEN (0x00010100))
                                        {
                                            Local2 |= 0x02
                                        }

                                        If (DDEN (0x00010121))
                                        {
                                            Local2 |= 0x10
                                        }

                                        CSTE = Local2
                                        If ((CADL == One))
                                        {
                                            NSTE = One
                                        }
                                        Else
                                        {
                                            If ((CADL == 0x03))
                                            {
                                                If ((CSTE == One))
                                                {
                                                    NSTE = 0x02
                                                }
                                                Else
                                                {
                                                    If ((CSTE == 0x02))
                                                    {
                                                        NSTE = 0x03
                                                    }
                                                    Else
                                                    {
                                                        If ((CSTE == 0x03))
                                                        {
                                                            NSTE = One
                                                        }
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                If ((CADL == 0x11))
                                                {
                                                    If ((CSTE == One))
                                                    {
                                                        NSTE = 0x10
                                                    }
                                                    Else
                                                    {
                                                        If ((CSTE == 0x10))
                                                        {
                                                            NSTE = 0x11
                                                        }
                                                        Else
                                                        {
                                                            If ((CSTE == 0x11))
                                                            {
                                                                NSTE = One
                                                            }
                                                        }
                                                    }
                                                }
                                                Else
                                                {
                                                    If ((CADL == 0x13))
                                                    {
                                                        If ((CSTE == One))
                                                        {
                                                            NSTE = 0x02
                                                        }
                                                        Else
                                                        {
                                                            If ((CSTE == 0x02))
                                                            {
                                                                NSTE = 0x10
                                                            }
                                                            Else
                                                            {
                                                                If ((CSTE == 0x10))
                                                                {
                                                                    NSTE = 0x03
                                                                }
                                                                Else
                                                                {
                                                                    If ((CSTE == 0x03))
                                                                    {
                                                                        NSTE = 0x11
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((CSTE == 0x11))
                                                                        {
                                                                            NSTE = One
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        NVDF = One
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x0B, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x0B, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB)
                {
                    OperationRegion (PCI0.LPCB.LPC1, PCI_Config, 0x40, 0xC0)
                    Field (PCI0.LPCB.LPC1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x20), 
                        PARC,   8, 
                        PBRC,   8, 
                        PCRC,   8, 
                        PDRC,   8, 
                        Offset (0x28), 
                        PERC,   8, 
                        PFRC,   8, 
                        PGRC,   8, 
                        PHRC,   8
                    }

                    Device (LNKA)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PARC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLA, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLA, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PARC & 0x0F))
                            Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PARC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PARC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKB)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PBRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLB, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLB, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PBRC & 0x0F))
                            Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PBRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PBRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKC)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PCRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLC, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLC, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PCRC & 0x0F))
                            Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PCRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PCRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKD)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PDRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLD, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLD, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PDRC & 0x0F))
                            Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PDRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PDRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKE)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PERC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLE, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLE, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PERC & 0x0F))
                            Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PERC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PERC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKF)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PFRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLF, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLF, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PFRC & 0x0F))
                            Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PFRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PFRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKG)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PGRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLG, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLG, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PGRC & 0x0F))
                            Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PGRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PGRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKH)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PHRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLH, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLH, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PHRC & 0x0F))
                            Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PHRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PHRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }
                }

                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0xB0), 
                    RAEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BFFR, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                        })
                        Return (BFFR) /* \_SB_.PCI0.LPCB.EC0_._CRS.BFFR */
                    }

                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        SMPR,   8, 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCM,   8, 
                        SMD0,   256, 
                        BCNT,   8, 
                        SMAA,   8, 
                        BATD,   16, 
                        Offset (0x40), 
                        SW2S,   1, 
                            ,   3, 
                        TRPM,   1, 
                        Offset (0x41), 
                        W7OS,   1, 
                            ,   1, 
                        RFLE,   1, 
                            ,   1, 
                        ECOS,   1, 
                        PFN2,   1, 
                        WOLF,   1, 
                        PFLG,   1, 
                        Offset (0x43), 
                        BBDA,   1, 
                        CIRB,   1, 
                            ,   4, 
                        NQLB,   1, 
                        Offset (0x44), 
                        NICL,   1, 
                        NICD,   1, 
                        Offset (0x45), 
                            ,   2, 
                        QUAD,   1, 
                        Offset (0x46), 
                        Offset (0x4E), 
                        LIDE,   1, 
                        Offset (0x52), 
                        ECLS,   1, 
                        WBSS,   1, 
                        Offset (0x58), 
                        RTMP,   8, 
                        ECT1,   8, 
                        ECT2,   8, 
                        RG5B,   8, 
                        FSPD,   16, 
                        Offset (0x5F), 
                        CFN2,   1, 
                        SFN2,   1, 
                        Offset (0x70), 
                        BCLB,   8, 
                        BCHB,   8, 
                        Offset (0x74), 
                        BVLB,   8, 
                        BVHB,   8, 
                        Offset (0x7E), 
                        BATP,   8, 
                        Offset (0x82), 
                        MBST,   8, 
                        MCUR,   16, 
                        MBRM,   16, 
                        MBCV,   16, 
                        Offset (0xA0), 
                        QBHK,   8, 
                        RTCW,   1, 
                        Offset (0xA2), 
                        QBBB,   8, 
                        SMTD,   8, 
                        MBTS,   1, 
                        MBTF,   1, 
                            ,   5, 
                        BACR,   1, 
                        MBTC,   1, 
                            ,   2, 
                        MBNH,   1, 
                        Offset (0xA6), 
                        BA1C,   8, 
                        Offset (0xAA), 
                        ADIM,   1, 
                            ,   6, 
                        RCDS,   1, 
                        Offset (0xAD), 
                        SRAD,   8, 
                        Offset (0xAF), 
                        MCER,   8, 
                        Offset (0xB2), 
                        RPM1,   8, 
                        RPM2,   8, 
                        CLOW,   4, 
                        CMAX,   4, 
                        Offset (0xBC), 
                        MCEA,   8, 
                        Offset (0xCF), 
                        DLYC,   8, 
                        EBPL,   1, 
                        Offset (0xD2), 
                            ,   6, 
                        APWR,   1, 
                        DLYE,   1, 
                        Offset (0xD6), 
                        DBPL,   8, 
                        Offset (0xDA), 
                        EPRW,   8, 
                        PSKB,   1, 
                        PSTP,   1, 
                        PSBA,   1, 
                        PWOL,   1, 
                        Offset (0xDF), 
                        ECBW,   1, 
                        Offset (0xE0), 
                        DLYT,   8, 
                        Offset (0xE2), 
                        BRTL,   8, 
                        Offset (0xE6), 
                        SFHK,   8, 
                        GQKS,   7, 
                        Offset (0xF0), 
                            ,   7, 
                        TMPS,   1, 
                        Offset (0xF4), 
                        SFAN,   8
                    }

                    Name (BATO, Zero)
                    Name (BATN, Zero)
                    Name (BATF, 0xC0)
                    Name (WBDS, Zero)
                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        ECON = One
                        SSDP = 0xF3
                        SSMP = 0xC5
                        GBAS ()
                        If ((OSYS >= 0x07D9))
                        {
                            W7OS = One
                        }
                        Else
                        {
                            W7OS = Zero
                        }

                        CMSW (0x6E, Zero)
                        If ((SRAD <= 0x03))
                        {
                            CUPS = (PSTN - One)
                        }

                        If ((SRAD <= 0x02))
                        {
                            CUPS = 0x02
                        }

                        If ((SRAD <= One))
                        {
                            CUPS = Zero
                        }

                        If ((SW2S == Zero))
                        {
                            CUPS = Zero
                        }

                        PSSC (CUPS)
                    }

                    Method (BPOL, 1, NotSerialized)
                    {
                        DBPL = Arg0
                        EBPL = One
                    }

                    Method (BPOM, 0, NotSerialized)
                    {
                        DBPL = Zero
                        EBPL = Zero
                    }

                    Name (_GPE, 0x16)  // _GPE: General Purpose Events
                    Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If ((ED3E == One))
                        {
                            If (SW2S)
                            {
                                ^^^RP05.J380.D3EF = Zero
                                TRAP (TRTI, 0x5C)
                            }
                            Else
                            {
                                ^^^RP05.J380.D3EF = 0x40
                            }
                        }

                        GBAS ()
                        Notify (BAT0, 0x81) // Information Change
                        Notify (BAT0, 0x80) // Status Change
                        If ((0x02 & BATF))
                        {
                            Notify (ACAD, 0x80) // Status Change
                            PWRS = SW2S /* \_SB_.PCI0.LPCB.EC0_.SW2S */
                            If (SW2S)
                            {
                                Local0 = SRAD /* \_SB_.PCI0.LPCB.EC0_.SRAD */
                                Local1 = Zero
                                If ((Local0 == One))
                                {
                                    Local1 = Zero
                                }

                                If ((Local0 == 0x02))
                                {
                                    Local1 = 0x02
                                }

                                If ((Local0 == 0x03))
                                {
                                    Local1 = (PSTN - One)
                                }

                                If ((Local1 != CUPS))
                                {
                                    PSSC (Local1)
                                }

                                ^^^^WMID.WEID = 0x03
                                ^^^^WMID.WMED = Zero
                                Notify (WMID, 0x80) // Status Change
                            }
                            Else
                            {
                                SRAD = Zero
                                PSSC (Zero)
                            }
                        }
                        Else
                        {
                        }

                        ^^^ACEL.ADJT ()
                        PNOT ()
                    }

                    Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        BACR = Zero
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (GBAS, 0, NotSerialized)
                    {
                        BATF = Zero
                        Local0 = MBTS /* \_SB_.PCI0.LPCB.EC0_.MBTS */
                        Local1 = SW2S /* \_SB_.PCI0.LPCB.EC0_.SW2S */
                        Local0 <<= 0x06
                        Local1 <<= One
                        If (((BATO & 0x40) != Local0))
                        {
                            BATF |= 0x40
                        }

                        If (((BATO & 0x02) != Local1))
                        {
                            BATF |= 0x02
                        }

                        BATO = Zero
                        BATO = (Local0 | Local1)
                    }

                    Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Sleep (0x14)
                        Debug = "_Q80 : Temperature Up"
                        Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
                        \_TZ.TZ01.OTHD (RTMP)
                    }

                    Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Sleep (0x14)
                        Debug = "_Q81 : Temperature Down"
                        Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
                        \_TZ.TZ01.OTHD (RTMP)
                    }

                    Method (_Q8A, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If (LIDE)
                        {
                            Debug = "_Q8A : LID Switch Event"
                            LIDE = Zero
                            Sleep (0x14)
                            Notify (LID0, 0x80) // Status Change
                            ^^^ACEL.ADJT ()
                        }
                    }

                    Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If (IGDS)
                        {
                            ^^^GFX0.GHDS (Zero)
                            Sleep (0xC8)
                        }
                        Else
                        {
                            If ((NVSF == 0xAA))
                            {
                                GDNV ()
                            }
                            Else
                            {
                                TRAP (TRTI, 0x0B)
                            }

                            Local3 = NSTE /* \NSTE */
                            ^^^P0P2.VGA.LCDA = (Local3 & One)
                            ^^^P0P2.VGA.CRTA = ((Local3 & 0x02) >> One)
                            ^^^P0P2.VGA.TVAA = ((Local3 & 0x04) >> 0x02)
                            ^^^P0P3.VGA.LCDA = (Local3 & One)
                            ^^^P0P3.VGA.CRTA = ((Local3 & 0x02) >> One)
                            ^^^P0P3.VGA.TVAA = ((Local3 & 0x04) >> 0x02)
                            ^^^P0P2.VGA.HDTV = ((Local3 & 0x10) >> 0x04)
                            ^^^P0P3.VGA.HDTV = ((Local3 & 0x10) >> 0x04)
                            Sleep (0xC8)
                            Notify (^^^P0P2.VGA, 0x80) // Status Change
                            Notify (^^^P0P3.VGA, 0x80) // Status Change
                            Sleep (0xC8)
                        }
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If ((OSYS >= 0x07D6))
                        {
                            If (IGDS)
                            {
                                Notify (^^^GFX0.DD03, 0x86) // Device-Specific
                            }
                            Else
                            {
                                Notify (^^^P0P2.VGA.LCD, 0x86) // Device-Specific
                                Notify (^^^P0P3.VGA.LCD, 0x86) // Device-Specific
                            }
                        }
                        Else
                        {
                        }
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If ((OSYS >= 0x07D6))
                        {
                            If (IGDS)
                            {
                                Notify (^^^GFX0.DD03, 0x87) // Device-Specific
                            }
                            Else
                            {
                                Notify (^^^P0P2.VGA.LCD, 0x87) // Device-Specific
                                Notify (^^^P0P3.VGA.LCD, 0x87) // Device-Specific
                            }
                        }
                        Else
                        {
                        }
                    }

                    Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        P80H = 0x15
                        WAB1 = CMSR (0x49)
                        If ((WAB1 & 0x08))
                        {
                            WAB1 &= 0xF7
                            RFLE = Zero
                        }
                        Else
                        {
                            WAB1 |= 0x08
                            If ((WAOK == Zero))
                            {
                                If ((WBLC & One))
                                {
                                    RFLE = One
                                }
                            }
                        }

                        If ((WAOK == Zero))
                        {
                            If ((WAB1 & 0x0A))
                            {
                                WAB1 |= 0x02
                                WAB2 |= 0x02
                                WAB3 |= 0x02
                            }
                            Else
                            {
                                WAB1 |= 0x0A
                                WAB2 |= 0x0A
                                WAB3 |= 0x0A
                            }

                            WAB5 |= 0x08
                            WAB4 |= 0x08
                        }
                        Else
                        {
                            WAB5 = 0x07
                            WAB4 = Zero
                            If ((WAB1 & 0x02))
                            {
                                WAB4 |= One
                            }

                            If ((WAB2 & 0x02))
                            {
                                WAB4 |= 0x02
                            }

                            If ((WAB3 & 0x02))
                            {
                                WAB4 |= 0x04
                            }
                        }

                        TRAP (TRTI, 0x20)
                        If ((WAOK == One))
                        {
                            ^^^^WMID.WEID = 0x05
                            ^^^^WMID.WMED = Zero
                            Notify (WMID, 0x80) // Status Change
                        }
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Local1 = QBBB /* \_SB_.PCI0.LPCB.EC0_.QBBB */
                        QBBB = Zero
                        If ((Local1 == 0x2C))
                        {
                            Notify (EJET, 0x02) // Device Wake
                        }

                        Debug = "!!! DVD/Music Button pressed !!!"
                        ^^^^WMID.WEID = 0x04
                        ^^^^WMID.WMED = Zero
                        Notify (WMID, 0x80) // Status Change
                    }

                    Method (_Q8E, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Sleep (0x14)
                        Q8E0 = CLOW /* \_SB_.PCI0.LPCB.EC0_.CLOW */
                        If ((Q8E0 < (PSTN - One)))
                        {
                            Q8E0++
                        }

                        CPUT ()
                        CLOW = CUPS /* \CUPS */
                    }

                    Method (_Q8F, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Sleep (0x14)
                        Q8E0 = CLOW /* \_SB_.PCI0.LPCB.EC0_.CLOW */
                        If ((Q8E0 > Zero))
                        {
                            Q8E0--
                        }

                        CPUT ()
                        CLOW = CUPS /* \CUPS */
                    }

                    Method (_Q30, 0, NotSerialized)  // _Qxx: EC Query
                    {
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        SMW0,   16
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        SMB0,   8
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        FLD0,   64
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        FLD1,   128
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        FLD2,   192
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        FLD3,   256
                    }

                    Mutex (MUT0, 0x00)
                    Mutex (MUT1, 0x00)
                    Method (SMRD, 4, NotSerialized)
                    {
                        If (!ECON)
                        {
                            Return (0xFF)
                        }

                        If ((Arg0 != 0x07))
                        {
                            If ((Arg0 != 0x09))
                            {
                                If ((Arg0 != 0x0B))
                                {
                                    Return (0x19)
                                }
                            }
                        }

                        Acquire (MUT0, 0xFFFF)
                        Local0 = 0x04
                        While ((Local0 > One))
                        {
                            SMST &= 0x40
                            SMCM = Arg2
                            SMAD = Arg1
                            SMPR = Arg0
                            Local3 = Zero
                            While (!Local1 = (SMST & 0xBF))
                            {
                                Sleep (0x02)
                                Local3++
                                If ((Local3 == 0x32))
                                {
                                    SMST &= 0x40
                                    SMCM = Arg2
                                    SMAD = Arg1
                                    SMPR = Arg0
                                    Local3 = Zero
                                }
                            }

                            If ((Local1 == 0x80))
                            {
                                Local0 = Zero
                            }
                            Else
                            {
                                Local0--
                            }
                        }

                        If (Local0)
                        {
                            Local0 = (Local1 & 0x1F)
                        }
                        Else
                        {
                            If ((Arg0 == 0x07))
                            {
                                Arg3 = SMB0 /* \_SB_.PCI0.LPCB.EC0_.SMB0 */
                            }

                            If ((Arg0 == 0x09))
                            {
                                Arg3 = SMW0 /* \_SB_.PCI0.LPCB.EC0_.SMW0 */
                            }

                            If ((Arg0 == 0x0B))
                            {
                                Local3 = BCNT /* \_SB_.PCI0.LPCB.EC0_.BCNT */
                                Local2 = (0x0100 >> 0x03)
                                If ((Local3 > Local2))
                                {
                                    Local3 = Local2
                                }

                                If ((Local3 < 0x11))
                                {
                                    Local2 = FLD1 /* \_SB_.PCI0.LPCB.EC0_.FLD1 */
                                }
                                Else
                                {
                                    If ((Local3 < 0x19))
                                    {
                                        Local2 = FLD2 /* \_SB_.PCI0.LPCB.EC0_.FLD2 */
                                    }
                                    Else
                                    {
                                        Local2 = FLD3 /* \_SB_.PCI0.LPCB.EC0_.FLD3 */
                                    }
                                }

                                Local3++
                                Local4 = Buffer (Local3) {}
                                Local3--
                                Local5 = Zero
                                While ((Local3 > Local5))
                                {
                                    GBFE (Local2, Local5, RefOf (Local6))
                                    PBFE (Local4, Local5, Local6)
                                    Local5++
                                }

                                PBFE (Local4, Local5, Zero)
                                Arg3 = Local4
                            }
                        }

                        Release (MUT0)
                        Return (Local0)
                    }

                    Method (SMWR, 4, NotSerialized)
                    {
                        If (!ECON)
                        {
                            Return (0xFF)
                        }

                        If ((Arg0 != 0x06))
                        {
                            If ((Arg0 != 0x08))
                            {
                                If ((Arg0 != 0x0A))
                                {
                                    Return (0x19)
                                }
                            }
                        }

                        Acquire (MUT0, 0xFFFF)
                        Local0 = 0x04
                        While ((Local0 > One))
                        {
                            If ((Arg0 == 0x06))
                            {
                                SMB0 = Arg3
                            }

                            If ((Arg0 == 0x08))
                            {
                                SMW0 = Arg3
                            }

                            If ((Arg0 == 0x0A))
                            {
                                SMD0 = Arg3
                            }

                            SMST &= 0x40
                            SMCM = Arg2
                            SMAD = Arg1
                            SMPR = Arg0
                            Local3 = Zero
                            While (!Local1 = (SMST & 0xBF))
                            {
                                Sleep (0x02)
                                Local3++
                                If ((Local3 == 0x32))
                                {
                                    SMST &= 0x40
                                    SMCM = Arg2
                                    SMAD = Arg1
                                    SMPR = Arg0
                                    Local3 = Zero
                                }
                            }

                            If ((Local1 == 0x80))
                            {
                                Local0 = Zero
                            }
                            Else
                            {
                                Local0--
                            }
                        }

                        If (Local0)
                        {
                            Local0 = (Local1 & 0x1F)
                        }

                        Release (MUT0)
                        Return (Local0)
                    }

                    Method (GSHK, 0, Serialized)
                    {
                        If (ECON)
                        {
                            Local0 = SFHK /* \_SB_.PCI0.LPCB.EC0_.SFHK */
                        }

                        Return (Local0)
                    }

                    Method (SSHK, 1, Serialized)
                    {
                        If (ECON)
                        {
                            SFHK = Arg0
                        }
                    }

                    Method (NHSB, 0, NotSerialized)
                    {
                    }
                }

                Device (CIR0)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return ("*ENE0100")
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUFA, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0380,             // Range Minimum
                                0x0380,             // Range Maximum
                                0x01,               // Alignment
                                0x0F,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                        })
                        Return (BUFA) /* \_SB_.PCI0.LPCB.CIR0._CRS.BUFA */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IO (Decode16,
                            0x0380,             // Range Minimum
                            0x0380,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {4}
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x18, 
                        0x05
                    })
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y0F)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        Else
                        {
                            If (HPAE)
                            {
                                Return (0x0B)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y0F._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == One))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x164E,             // Range Minimum
                            0x164E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0380,             // Range Minimum
                            0x0380,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            FixedIO (
                                0x0060,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0064,             // Address
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x18, 
                        0x03
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBWK = Arg0
                    }
                }

                Device (PS2M)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return ("*SYN1E0F")
                    }

                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN1E00"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x18, 
                        0x03
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MUWK = Arg0
                    }
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (IHUB)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, ToPLD ()  // _PLD: Physical Location of Device
                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD ()  // _PLD: Physical Location of Device
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD ()  // _PLD: Physical Location of Device
                        }

                        Device (PRT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD ()  // _PLD: Physical Location of Device
                        }
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((OSYS >= 0x07D9))
                    {
                        Return (Package (0x02)
                        {
                            0x0D, 
                            0x03
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x0D, 
                            Zero
                        })
                    }
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
            }

            Device (USB4)
            {
                Name (_ADR, 0x001D0004)  // _ADR: Address
            }

            Device (EHC2)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (IHUB)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, ToPLD ()  // _PLD: Physical Location of Device
                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD ()  // _PLD: Physical Location of Device
                        }
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((OSYS >= 0x07D9))
                    {
                        Return (Package (0x02)
                        {
                            0x0D, 
                            0x03
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x0D, 
                            Zero
                        })
                    }
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x001A0001)  // _ADR: Address
            }

            Device (USB6)
            {
                Name (_ADR, 0x001A0002)  // _ADR: Address
            }

            Device (USB7)
            {
                Name (_ADR, 0x001A0003)  // _ADR: Address
            }

            Device (HDEF)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
                Field (HDAR, WordAcc, NoLock, Preserve)
                {
                    DCKA,   1, 
                    Offset (0x01), 
                    DCKM,   1, 
                        ,   6, 
                    DCKS,   1, 
                    Offset (0x08), 
                        ,   15, 
                    PMES,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKMD)
                    {
                        Return (Package (0x02)
                        {
                            0x0D, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x0D, 
                            Zero
                        })
                    }
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x10), 
                    APL0,   1, 
                    APL1,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x10), 
                    APL0,   1, 
                    APL1,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PR05 */
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (RTLD, PCI_Config, Zero, 0x02)
                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        RVID,   16
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((RVID == 0xFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x05
                        })
                    }

                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        LAWK = Arg0
                    }
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x10), 
                    APL0,   1, 
                    APL1,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PR06 */
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x10), 
                    APL0,   1, 
                    APL1,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PR07 */
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x10), 
                    APL0,   1, 
                    APL1,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (J380)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0xFF)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SSID,   32, 
                        Offset (0xAC), 
                        D3EF,   8, 
                        Offset (0xB2), 
                        LAT0,   8, 
                        Offset (0xCF), 
                        ATRB,   8, 
                        Offset (0xD3), 
                        PMC0,   8
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((DVID != 0xFFFFFFFF))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        If ((ED3E == One))
                        {
                            If ((OSYS == 0x07D9))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (J381)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        If ((OSYS == 0x07D9))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                }

                Device (J382)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        If ((OSYS == 0x07D9))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                }

                Device (J383)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        If ((OSYS == 0x07D9))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                }

                Device (J384)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        If ((OSYS == 0x07D9))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PR08) /* \_SB_.PR08 */
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x10), 
                    APL0,   1, 
                    APL1,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PR0B) /* \_SB_.PR0B */
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (One)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PDSX)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }
            }

            Device (IO10)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                OperationRegion (IBUS, PCI_Config, 0xD0, 0xE0)
                Field (IBUS, DWordAcc, NoLock, Preserve)
                {
                        ,   26, 
                    TOLM,   6, 
                        ,   26, 
                    TOHM,   38, 
                    Offset (0xB0), 
                    VTEN,   1, 
                        ,   11, 
                    VTBA,   20
                }
            }

            Device (IO1X)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                OperationRegion (PBIC, PCI_Config, Zero, 0xF0)
                Field (PBIC, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x7C), 
                    SR0,    32, 
                    SR1,    32, 
                    SR2,    32, 
                    SR3,    32, 
                    SR4,    32, 
                    SR5,    32, 
                    SR6,    32, 
                    SR7,    32, 
                    SR8,    32, 
                    SR9,    32
                }
            }

            Device (IIO0)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (IBUS, PCI_Config, 0xD0, 0xE0)
                Field (IBUS, DWordAcc, NoLock, Preserve)
                {
                        ,   26, 
                    TOLM,   6, 
                        ,   26, 
                    TOHM,   38, 
                    Offset (0xB0), 
                    VTEN,   1, 
                        ,   11, 
                    VTBA,   20
                }
            }

            Device (IIOX)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                OperationRegion (PBIC, PCI_Config, Zero, 0xF0)
                Field (PBIC, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x7C), 
                    SR0,    32, 
                    SR1,    32, 
                    SR2,    32, 
                    SR3,    32, 
                    SR4,    32, 
                    SR5,    32, 
                    SR6,    32, 
                    SR7,    32, 
                    SR8,    32, 
                    SR9,    32
                }
            }

            Device (ACEL)
            {
                Name (_HID, EisaId ("HPQ0004"))  // _HID: Hardware ID
                Name (DVPN, 0xFF)
                Name (CNST, 0xFF)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    INIT ()
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Interrupt (ResourceConsumer, Edge, ActiveLow, Exclusive, ,, )
                    {
                        0x00000017,
                    }
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    P80H = 0x50
                    If ((OSYS >= 0x07D6))
                    {
                        If ((DVPN == 0xFF))
                        {
                            P80H = 0x60
                            Local0 = 0x0F
                            Local1 = ^^SBUS.SRDB (0x39, 0x20)
                            P80H = 0x61
                            If ((Local1 == 0xFFFF))
                            {
                                Local0 = Zero
                            }

                            DVPN = Local0
                        }
                    }
                    Else
                    {
                        DVPN = Zero
                    }

                    Return (DVPN) /* \_SB_.PCI0.ACEL.DVPN */
                }

                Method (INIT, 0, Serialized)
                {
                    If (_STA ())
                    {
                        P80H = 0x51
                        ^^SBUS.SWRB (0x38, 0x20, 0x47)
                        ^^SBUS.SWRB (0x38, 0x21, 0x0A)
                        ^^SBUS.SWRB (0x38, 0x32, 0x14)
                        ^^SBUS.SWRB (0x38, 0x33, 0x02)
                        ^^SBUS.SWRB (0x38, 0x30, 0x95)
                        Local0 = ^^SBUS.SRDB (0x39, 0x23)
                        ^^SBUS.SWRB (0x38, 0x36, 0x11)
                        ^^SBUS.SWRB (0x38, 0x37, One)
                        ^^SBUS.SWRB (0x38, 0x34, 0x2A)
                        CNST = 0xFF
                        ADJT ()
                    }
                }

                Method (ADJT, 0, Serialized)
                {
                    If (_STA ())
                    {
                        P80H = 0x52
                        Local0 = PWRS /* \PWRS */
                        If (((^^^LID0._LID () == Zero) && (Local0 == Zero)))
                        {
                            If ((CNST != One))
                            {
                                CNST = One
                                ^^SBUS.SWRB (0x38, 0x22, 0xC2)
                            }
                        }
                        Else
                        {
                            If ((CNST != Zero))
                            {
                                CNST = Zero
                                ^^SBUS.SWRB (0x38, 0x22, 0xC1)
                            }
                        }
                    }
                }

                Method (CLRI, 0, Serialized)
                {
                    P80H = 0x53
                    Local0 = Zero
                    If ((PWRS == Zero))
                    {
                        If ((^^^BAT0._STA () == 0x1F))
                        {
                            If (ECON)
                            {
                                If ((^^LPCB.EC0.MBRM <= 0x96))
                                {
                                    Local0 = Zero
                                }
                            }
                        }
                    }

                    Return (Local0)
                }

                Method (ALRD, 1, Serialized)
                {
                    P80H = 0x54
                    Local0 = ^^SBUS.SRDB (0x39, Arg0)
                    Return (Local0)
                }

                Method (ALWR, 2, Serialized)
                {
                    P80H = 0x55
                    Local0 = ^^SBUS.SWRB (0x38, Arg0, Arg1)
                    Return (Local0)
                }

                Method (ALED, 1, Serialized)
                {
                    P80H = 0x56
                    If (Arg0)
                    {
                        HLED = One
                    }
                    Else
                    {
                        HLED = Zero
                    }
                }

                Method (ALID, 1, Serialized)
                {
                    P80H = 0x57
                    Return (^^^LID0._LID ())
                }

                Method (ADSN, 0, Serialized)
                {
                    P80H = 0x58
                    Local0 = Zero
                    Return (Local0)
                }
            }
        }

        Device (EJET)
        {
            Name (_HID, EisaId ("PNP0C32"))  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (GHID, 0, NotSerialized)
            {
                Return (Buffer (One)
                {
                     0x05                                             /* . */
                })
            }
        }

        Device (WMID)
        {
            Name (WCDS, Package (0x30)
            {
                0x04, 
                0x04, 
                0x04, 
                Zero, 
                0x04, 
                0x04, 
                Zero, 
                Zero, 
                0x04, 
                0x04, 
                0x0C, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x06, 
                Zero, 
                Zero, 
                0x04, 
                0x04, 
                0x04, 
                0x04, 
                0x04, 
                0x04, 
                0x04, 
                0x04, 
                0x04, 
                Zero, 
                0x04, 
                Zero, 
                0x04, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x04, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x04
            })
            Name (WAR7, Zero)
            Method (CSMI, 2, Serialized)
            {
                CMTF = Arg0
                CMTI = Arg1
                SSMP = 0xC2
                Return (CMTO) /* \CMTO */
            }

            OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
            Field (SPRT, ByteAcc, Lock, Preserve)
            {
                SMIP,   8, 
                SMID,   8
            }

            Method (HSMI, 1, NotSerialized)
            {
                SMID = Arg0
                SMIP = 0xD5
            }

            Method (GFCC, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           /* .... */
                        }
                    }
                Index (Local0, Zero) = Zero
                Index (DerefOf (Index (Local0, 0x02)), Zero) = FACM /* \FACM */
                Return (Local0)
            }

            Method (SFCC, 1, NotSerialized)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                FACM = Arg0
                HSMI (One)
                Return (Local0)
            }

            Method (HWMC, 2, NotSerialized)
            {
                CreateDWordField (Arg1, Zero, SNIN)
                CreateDWordField (Arg1, 0x04, COMD)
                CreateDWordField (Arg1, 0x08, CMTP)
                CreateDWordField (Arg1, 0x0C, DASI)
                If ((Arg0 == One))
                {
                    Local0 = Zero
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x04
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x80
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x0400
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x1000
                }

                Local1 = Buffer ((0x08 + Local0)) {}
                CreateDWordField (Local1, Zero, SNOU)
                CreateDWordField (Local1, 0x04, RTCD)
                Local5 = DASI /* \_SB_.WMID.HWMC.DASI */
                If ((DASI > 0x02F0))
                {
                    Local5 = 0x02F0
                }

                CreateField (Arg1, Zero, ((Local5 + 0x10) * 0x08), DAIN)
                SNOU = 0x4C494146
                RTCD = 0x02
                If ((SNIN == 0x55434553))
                {
                    RTCD = 0x03
                    If ((COMD == One))
                    {
                        RTCD = 0x04
                        If ((CMTP == 0x05))
                        {
                            Local2 = GWLS ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x1B))
                        {
                            Local2 = GWDI ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x0E))
                        {
                            Local2 = GWID ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x10))
                        {
                            Local2 = GHPI ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x07))
                        {
                            If (DASI)
                            {
                                Local3 = DerefOf (Index (Arg1, 0x10))
                                Local2 = GBAI (Local3)
                                RTCD = Zero
                            }
                            Else
                            {
                                RTCD = 0x05
                            }
                        }

                        If ((CMTP == One))
                        {
                            Local2 = GDPS ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x08))
                        {
                            Local2 = GBBT ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x09))
                        {
                            Local2 = GHKS ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x0A))
                        {
                            Local2 = GHKF ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x0C))
                        {
                            Local2 = GBBV ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x0D))
                        {
                            Local2 = GTFR ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x0B))
                        {
                            Local2 = GBBS ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x13))
                        {
                            Local2 = GBNS ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x17))
                        {
                            Local2 = GDIM ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x0F))
                        {
                            Local2 = SMAT ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x1A))
                        {
                            Local2 = GMSR ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x1D))
                        {
                            Local2 = GDLC ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x1F))
                        {
                            If (ECON)
                            {
                                Local2 = BACS ()
                                RTCD = Zero
                            }
                            Else
                            {
                                Local2 = Package (0x03)
                                    {
                                        Zero, 
                                        Zero, 
                                        Buffer (0x04)
                                        {
                                             0x00, 0x00, 0x00, 0x00                           /* .... */
                                        }
                                    }
                                Index (Local2, Zero) = 0x35
                                RTCD = Zero
                            }
                        }

                        If ((CMTP == 0x29))
                        {
                            Local2 = GFCC ()
                            RTCD = Zero
                        }

                        If ((CMTP == 0x30))
                        {
                            P80H = 0x8A
                            Local2 = GPCS ()
                            RTCD = Zero
                        }
                    }

                    If ((COMD == 0x02))
                    {
                        RTCD = 0x04
                        If (((CMTP > Zero) && (CMTP <= 0x30)))
                        {
                            If ((DASI < DerefOf (Index (WCDS, (CMTP - One)))))
                            {
                                RTCD = 0x05
                            }
                            Else
                            {
                                CreateDWordField (Arg1, 0x10, DDWD)
                                If ((CMTP == 0x05))
                                {
                                    Local2 = SWLS (DDWD)
                                    RTCD = Zero
                                }

                                If ((CMTP == 0x1B))
                                {
                                    Local2 = SWDS (DDWD)
                                    RTCD = Zero
                                }

                                If ((CMTP == One))
                                {
                                    Local2 = SDPS (DDWD)
                                    RTCD = Zero
                                }

                                If ((CMTP == 0x09))
                                {
                                    Local2 = SHKS (DDWD)
                                    RTCD = Zero
                                }

                                If ((CMTP == 0x0A))
                                {
                                    Local2 = SHKF (DDWD)
                                    RTCD = Zero
                                }

                                If ((CMTP == 0x0B))
                                {
                                    CreateDWordField (Arg1, 0x14, DWD1)
                                    CreateDWordField (Arg1, 0x18, DWD2)
                                    Local2 = SMCE (DDWD, DWD1, DWD2)
                                    RTCD = Zero
                                }

                                If ((CMTP == 0x10))
                                {
                                    If ((DASI != DerefOf (Index (WCDS, (CMTP - One)))))
                                    {
                                        RTCD = 0x05
                                    }
                                    Else
                                    {
                                        CreateByteField (Arg1, 0x10, DAB0)
                                        CreateByteField (Arg1, 0x11, DAB1)
                                        CreateByteField (Arg1, 0x12, DAB2)
                                        CreateByteField (Arg1, 0x13, DAB3)
                                        CreateByteField (Arg1, 0x14, DAB4)
                                        CreateByteField (Arg1, 0x15, DAB5)
                                        Local2 = SHPI (DAB0, DAB1, DAB2, DAB3, DAB4, DAB5)
                                        RTCD = Zero
                                    }
                                }

                                If ((CMTP == 0x13))
                                {
                                    Local2 = SBNS (DDWD)
                                    RTCD = Zero
                                }

                                If ((CMTP == 0x17))
                                {
                                    Local2 = SDIM (DDWD)
                                    RTCD = Zero
                                }

                                If ((CMTP == 0x1A))
                                {
                                    Local2 = SMSR (DDWD)
                                    RTCD = Zero
                                }

                                If ((CMTP == 0x1D))
                                {
                                    Local2 = SDLC (DDWD)
                                    RTCD = Zero
                                }

                                If ((CMTP == 0x1F))
                                {
                                    If (ECON)
                                    {
                                        Local3 = ^^PCI0.LPCB.EC0.MBTS /* \_SB_.PCI0.LPCB.EC0_.MBTS */
                                        If (((Local3 & One) == One))
                                        {
                                            Local2 = BACC (DDWD)
                                            Local3 = Package (0x03)
                                                {
                                                    Zero, 
                                                    Zero, 
                                                    Buffer (0x04)
                                                    {
                                                         0x00, 0x00, 0x00, 0x00                           /* .... */
                                                    }
                                                }
                                            Index (Local3, Zero) = Local2
                                            Local2 = Local3
                                            RTCD = Zero
                                        }
                                        Else
                                        {
                                            Local2 = Package (0x03)
                                                {
                                                    Zero, 
                                                    Zero, 
                                                    Buffer (0x04)
                                                    {
                                                         0x00, 0x00, 0x00, 0x00                           /* .... */
                                                    }
                                                }
                                            Index (Local2, Zero) = 0x34
                                            RTCD = Zero
                                        }
                                    }
                                    Else
                                    {
                                        Local2 = Package (0x03)
                                            {
                                                Zero, 
                                                Zero, 
                                                Buffer (0x04)
                                                {
                                                     0x00, 0x00, 0x00, 0x00                           /* .... */
                                                }
                                            }
                                        Index (Local2, Zero) = 0x35
                                        RTCD = Zero
                                    }
                                }

                                If ((CMTP == 0x29))
                                {
                                    Local2 = SFCC (DDWD)
                                    RTCD = Zero
                                }

                                If ((CMTP == 0x30))
                                {
                                    P80H = 0xAA
                                    Local2 = SPCS (DDWD)
                                    RTCD = Zero
                                }
                            }
                        }
                    }

                    If ((COMD == 0x00020002))
                    {
                        RTCD = 0x21
                        If ((CMTP == One))
                        {
                            P80H = 0xC1
                            Local2 = Package (0x03)
                                {
                                    Zero, 
                                    Zero, 
                                    Buffer (0x04)
                                    {
                                         0x00, 0x00, 0x00, 0x00                           /* .... */
                                    }
                                }
                            Index (Local2, Zero) = Zero
                            Index (Local2, One) = 0x04
                            CSMI (One, Zero)
                            Index (DerefOf (Index (Local2, 0x02)), Zero) = CMTO /* \CMTO */
                            RTCD = Zero
                            P80H = 0x1C
                        }

                        If ((CMTP == 0x02))
                        {
                            P80H = 0xC2
                            Local2 = Package (0x02)
                                {
                                    Zero, 
                                    Zero
                                }
                            CSMI (0x02, DAIN)
                            RTCD = CMTO /* \CMTO */
                            P80H = 0x2C
                        }

                        If ((CMTP == 0x03))
                        {
                            P80H = 0xC3
                            Local2 = Package (0x02)
                                {
                                    Zero, 
                                    Zero
                                }
                            CSMI (0x03, DAIN)
                            RTCD = CMTO /* \CMTO */
                            P80H = 0x3C
                        }
                    }
                }

                If ((RTCD == Zero))
                {
                    RTCD = DerefOf (Index (Local2, Zero))
                    If ((RTCD == Zero))
                    {
                        If ((DerefOf (Index (Local2, One)) <= Local0))
                        {
                            Local0 = Zero
                            While ((Local0 < DerefOf (Index (Local2, One))))
                            {
                                Index (Local1, (Local0 + 0x08)) = DerefOf (Index (DerefOf (Index (
                                    Local2, 0x02)), Local0))
                                Local0++
                            }

                            SNOU = 0x53534150
                        }
                        Else
                        {
                            RTCD = 0x05
                        }
                    }
                }

                Return (Local1)
            }

            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (WEID, Zero)
            Name (WMED, Zero)
            Name (BUFF, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            CreateByteField (BUFF, Zero, OB0)
            CreateByteField (BUFF, One, OB1)
            CreateByteField (BUFF, 0x02, OB2)
            CreateByteField (BUFF, 0x03, OB3)
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  /* 4.._c,.E */
                /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  /* ..=D.... */
                /* 0010 */  0x41, 0x44, 0x01, 0x02, 0x79, 0x42, 0xF2, 0x95,  /* AD..yB.. */
                /* 0018 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  /* {M4C.... */
                /* 0020 */  0xC6, 0x7E, 0xF6, 0x1C, 0x80, 0x00, 0x01, 0x08,  /* .~...... */
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  /* !...f... */
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  /* ......). */
                /* 0038 */  0x41, 0x45, 0x01, 0x00, 0xD4, 0x2B, 0x99, 0xD0,  /* AE...+.. */
                /* 0040 */  0x7C, 0xA4, 0xFE, 0x4E, 0xB0, 0x72, 0x32, 0x4A,  /* |..N.r2J */
                /* 0048 */  0xEC, 0x92, 0x29, 0x6C, 0x42, 0x43, 0x01, 0x00   /* ..)lBC.. */
            })
            Method (WQBC, 1, NotSerialized)
            {
                Local0 = WMIA /* \WMIA */
                Return (Local0)
            }

            Method (WMAD, 3, NotSerialized)
            {
                Return (HWMC (Arg1, Arg2))
            }

            Method (GWLS, 0, NotSerialized)
            {
                WAOK = One
                TRAP (TRTI, 0x1F)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x01, 0x02, 0x03, 0x04                           /* .... */
                        }
                    }
                Index (DerefOf (Index (Local0, 0x02)), Zero) = WAB0 /* \WAB0 */
                Index (DerefOf (Index (Local0, 0x02)), One) = WAB1 /* \WAB1 */
                Index (DerefOf (Index (Local0, 0x02)), 0x02) = WAB2 /* \WAB2 */
                Index (DerefOf (Index (Local0, 0x02)), 0x03) = WAB3 /* \WAB3 */
                Return (Local0)
            }

            Method (SWLS, 1, NotSerialized)
            {
                WAB4 = (Arg0 & 0xFF)
                WAB5 = ((Arg0 >> 0x08) & 0xFF)
                WAB1 |= 0x0C /* \WAB1 */
                WAB2 |= 0x0C /* \WAB2 */
                WAB3 |= 0x0C /* \WAB3 */
                TRAP (TRTI, 0x20)
                WEID = 0x05
                WMED = Zero
                Notify (WMID, 0x80) // Status Change
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GWID, 0, NotSerialized)
            {
                Local0 = Zero
                If ((((WBD0 + WBD1) != 0x01FE) && ((
                    WBD0 + WBD1) != Zero)))
                {
                    Local1 = Buffer (0x06)
                        {
                             0x02, 0x02, 0x00, 0x00, 0x00, 0x00               /* ...... */
                        }
                    Index (Local1, 0x02) = WBD0 /* \WBD0 */
                    Index (Local1, 0x03) = WBD1 /* \WBD1 */
                    Index (Local1, 0x04) = WBD2 /* \WBD2 */
                    Index (Local1, 0x05) = WBD3 /* \WBD3 */
                    Local0 += 0x06
                }

                If ((((WWD0 + WWD1) != 0x01FE) && ((
                    WWD0 + WWD1) != Zero)))
                {
                    Local2 = Buffer (0x06)
                        {
                             0x02, 0x03, 0x00, 0x00, 0x00, 0x00               /* ...... */
                        }
                    Index (Local2, 0x02) = WWD0 /* \WWD0 */
                    Index (Local2, 0x03) = WWD1 /* \WWD1 */
                    Index (Local2, 0x04) = WWD2 /* \WWD2 */
                    Index (Local2, 0x05) = WWD3 /* \WWD3 */
                    If ((Local0 == Zero))
                    {
                        Local1 = Local2
                    }
                    Else
                    {
                        Concatenate (Local1, Local2, Local3)
                        Local1 = Local3
                    }

                    Local0 += 0x06
                }

                If ((((WLD0 + WLD1) != 0x01FE) && ((
                    WLD0 + WLD1) != Zero)))
                {
                    Local2 = Buffer (0x0A)
                        {
                            /* 0000 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                            /* 0008 */  0x00, 0x00                                       /* .. */
                        }
                    Index (Local2, 0x02) = WLD0 /* \WLD0 */
                    Index (Local2, 0x03) = WLD1 /* \WLD1 */
                    Index (Local2, 0x04) = WLD2 /* \WLD2 */
                    Index (Local2, 0x05) = WLD3 /* \WLD3 */
                    Index (Local2, 0x06) = WLD4 /* \WLD4 */
                    Index (Local2, 0x07) = WLD5 /* \WLD5 */
                    Index (Local2, 0x08) = WLD6 /* \WLD6 */
                    Index (Local2, 0x09) = WLD7 /* \WLD7 */
                    If ((Local0 == Zero))
                    {
                        Local1 = Local2
                    }
                    Else
                    {
                        Concatenate (Local1, Local2, Local3)
                        Local1 = Local3
                    }

                    Local0 += 0x0A
                }

                Local2 = Package (0x03) {}
                Index (Local2, Zero) = Zero
                Index (Local2, One) = Local0
                Index (Local2, 0x02) = Local1
                Return (Local2)
            }

            Method (GHPI, 0, NotSerialized)
            {
                Local0 = Buffer (0x08)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                    }
                TRAP (TRTI, 0x1D)
                SID2 += 0x30
                SID3 += 0x30
                SID4 += 0x30
                SID5 += 0x30
                SID6 += 0x30
                SID7 += 0x30
                Index (Local0, Zero) = SID2 /* \SID2 */
                Index (Local0, One) = SID3 /* \SID3 */
                Index (Local0, 0x02) = SID4 /* \SID4 */
                Index (Local0, 0x03) = SID5 /* \SID5 */
                Index (Local0, 0x04) = SID6 /* \SID6 */
                Index (Local0, 0x05) = SID7 /* \SID7 */
                Local1 = Package (0x03)
                    {
                        Zero, 
                        0x06, 
                        Zero
                    }
                Index (Local1, 0x02) = Local0
                Return (Local1)
            }

            Method (SHPI, 6, NotSerialized)
            {
                Arg0 -= 0x30
                Arg1 -= 0x30
                Arg2 -= 0x30
                Arg3 -= 0x30
                Arg4 -= 0x30
                Arg5 -= 0x30
                SID0 = 0x02
                SID1 = Zero
                SID2 = Arg0
                SID3 = Arg1
                SID4 = Arg2
                SID5 = Arg3
                SID6 = Arg4
                SID7 = Arg5
                TRAP (TRTI, 0x1E)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GBAI, 1, NotSerialized)
            {
                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                If (!ECON)
                {
                    Local0 = Package (0x02)
                        {
                            0x0D, 
                            Zero
                        }
                    Sleep (0x96)
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    Return (Local0)
                }

                If (Arg0)
                {
                    Local0 = Package (0x02)
                        {
                            0x06, 
                            Zero
                        }
                    Sleep (0x96)
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    Return (Local0)
                }

                If (!^^PCI0.LPCB.EC0.MBTS)
                {
                    Local0 = Package (0x02)
                        {
                            0x06, 
                            Zero
                        }
                    Sleep (0x96)
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    Return (Local0)
                }

                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80) {}
                    }
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x18, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), One))
                Index (DerefOf (Index (Local0, 0x02)), Zero) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x10, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x03))
                Index (DerefOf (Index (Local0, 0x02)), 0x02) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x0F, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x05))
                Index (DerefOf (Index (Local0, 0x02)), 0x04) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x0C, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x07))
                Index (DerefOf (Index (Local0, 0x02)), 0x06) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x17, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x09))
                Index (DerefOf (Index (Local0, 0x02)), 0x08) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x08, RefOf (Local1))
                Local1 -= 0x0AAA
                Divide (Local1, 0x0A, Local2, Local1)
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0B))
                Index (DerefOf (Index (Local0, 0x02)), 0x0A) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x09, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0D))
                Index (DerefOf (Index (Local0, 0x02)), 0x0C) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x0A, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x0F))
                Index (DerefOf (Index (Local0, 0x02)), 0x0E) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x19, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x11))
                Index (DerefOf (Index (Local0, 0x02)), 0x10) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x16, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x13))
                Index (DerefOf (Index (Local0, 0x02)), 0x12) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x3F, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x15))
                Index (DerefOf (Index (Local0, 0x02)), 0x14) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x3E, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x17))
                Index (DerefOf (Index (Local0, 0x02)), 0x16) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x3D, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x19))
                Index (DerefOf (Index (Local0, 0x02)), 0x18) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x3C, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, Index (DerefOf (Index (Local0, 0x02)), 0x1B))
                Index (DerefOf (Index (Local0, 0x02)), 0x1A) = Local2
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x1C, RefOf (Local1))
                Local3 = ITOS (ToBCD (Local1))
                Local2 = 0x1C
                Local4 = Zero
                Local1 = SizeOf (Local3)
                While (Local1)
                {
                    GBFE (Local3, Local4, RefOf (Local5))
                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local5)
                    Local1--
                    Local2++
                    Local4++
                }

                Index (DerefOf (Index (Local0, 0x02)), Local2) = 0x20
                Local2++
                ^^PCI0.LPCB.EC0.SMRD (0x09, 0x16, 0x1B, RefOf (Local1))
                Local7 = (Local1 & 0x1F)
                Local6 = ITOS (ToBCD (Local7))
                Local7 = (Local1 & 0x01E0)
                Local7 >>= 0x05
                Local5 = ITOS (ToBCD (Local7))
                Local7 = (Local1 >> 0x09)
                Local7 += 0x07BC
                Local4 = ITOS (ToBCD (Local7))
                Local1 = 0x02
                Local7 = 0x03
                While (Local1)
                {
                    GBFE (Local5, Local7, RefOf (Local3))
                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local3)
                    Local1--
                    Local2++
                    Local7++
                }

                Index (DerefOf (Index (Local0, 0x02)), Local2) = "/"
                Local2++
                Local1 = 0x02
                Local7 = 0x03
                While (Local1)
                {
                    GBFE (Local6, Local7, RefOf (Local3))
                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local3)
                    Local1--
                    Local2++
                    Local7++
                }

                Index (DerefOf (Index (Local0, 0x02)), Local2) = "/"
                Local2++
                Local1 = 0x04
                Local7 = One
                While (Local1)
                {
                    GBFE (Local4, Local7, RefOf (Local3))
                    PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local3)
                    Local1--
                    Local2++
                    Local7++
                }

                Index (DerefOf (Index (Local0, 0x02)), Local2) = Zero
                If ((^^PCI0.LPCB.EC0.SMRD (0x0B, 0x16, 0x20, RefOf (Local1)) == Zero))
                {
                    Local3 = SizeOf (Local1)
                    If ((Local3 > 0x12))
                    {
                        Local3 = 0x12
                    }

                    Local2 = 0x2C
                    Local4 = Zero
                    While (Local3)
                    {
                        GBFE (Local1, Local4, RefOf (Local5))
                        PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local5)
                        Local3--
                        Local2++
                        Local4++
                    }
                }

                If ((^^PCI0.LPCB.EC0.SMRD (0x0B, 0x16, 0x70, RefOf (Local1)) == Zero))
                {
                    Local3 = SizeOf (Local1)
                    If ((Local3 > 0x10))
                    {
                        Local3 = 0x10
                    }

                    Local2 = 0x3E
                    Local4 = Zero
                    While (Local3)
                    {
                        GBFE (Local1, Local4, RefOf (Local5))
                        PBFE (DerefOf (Index (Local0, 0x02)), Local2, Local5)
                        Local3--
                        Local2++
                        Local4++
                    }
                }

                Index (DerefOf (Index (Local0, 0x02)), Local2) = Zero
                Sleep (0x96)
                Release (^^PCI0.LPCB.EC0.MUT1)
                Return (Local0)
            }

            Method (GDPS, 0, NotSerialized)
            {
                OB0 = Zero
                If (IGDS)
                {
                    If (((^^PCI0.GFX0.CPDL == 0x0100) || (^^PCI0.GFX0.CPL2 == 0x0100)))
                    {
                        OB0 |= 0x02
                    }

                    If ((^^PCI0.GFX0.CPL3 == 0x0100))
                    {
                        OB0 |= 0x02
                    }

                    If (((^^PCI0.GFX0.CPDL == 0x0400) || (^^PCI0.GFX0.CPL2 == 0x0400)))
                    {
                        OB0 |= One
                    }

                    If ((^^PCI0.GFX0.CPL3 == 0x0400))
                    {
                        OB0 |= One
                    }

                    If (((^^PCI0.GFX0.CPDL == 0x0300) || (^^PCI0.GFX0.CPL2 == 0x0300)))
                    {
                        OB0 |= 0x10
                    }

                    If ((^^PCI0.GFX0.CPL3 == 0x0300))
                    {
                        OB0 |= 0x10
                    }
                }
                Else
                {
                    If ((NVSF == 0xAA))
                    {
                        GDNV ()
                    }
                    Else
                    {
                        TRAP (TRTI, 0x0B)
                    }

                    OB0 = CADL /* \CADL */
                }

                OB1 = Zero
                OB2 = Zero
                OB3 = Zero
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x01, 0x02, 0x03, 0x04                           /* .... */
                        }
                    }
                Index (DerefOf (Index (Local0, 0x02)), Zero) = OB0 /* \_SB_.WMID.OB0_ */
                Index (DerefOf (Index (Local0, 0x02)), One) = OB1 /* \_SB_.WMID.OB1_ */
                Index (DerefOf (Index (Local0, 0x02)), 0x02) = OB2 /* \_SB_.WMID.OB2_ */
                Index (DerefOf (Index (Local0, 0x02)), 0x03) = OB3 /* \_SB_.WMID.OB3_ */
                Return (Local0)
            }

            Method (SDPS, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0x07)
                If (IGDS)
                {
                    Local1 = WMIO /* \WMIO */
                    If ((Local0 == Local1))
                    {
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }
                    Else
                    {
                        NSTE = Zero
                        If ((Local0 == One))
                        {
                            NSTE |= 0x0808 /* \NSTE */
                        }

                        If ((Local0 == 0x02))
                        {
                            NSTE |= 0x0101 /* \NSTE */
                        }

                        If ((Local0 == 0x03))
                        {
                            NSTE |= 0x0909 /* \NSTE */
                        }

                        If ((Local0 == 0x04))
                        {
                            NSTE |= 0x0202 /* \NSTE */
                        }

                        If ((Local0 == 0x05))
                        {
                            NSTE |= 0x0A0A /* \NSTE */
                        }

                        If ((Local0 == 0x06))
                        {
                            NSTE |= 0x0303 /* \NSTE */
                        }

                        If ((Local0 == 0x07))
                        {
                            NSTE |= 0x0B0B /* \NSTE */
                        }

                        PADL = CADL /* \CADL */
                        If ((OSYS >= 0x07D1))
                        {
                            Notify (PCI0, Zero) // Bus Check
                        }
                        Else
                        {
                            Notify (^^PCI0.GFX0, Zero) // Bus Check
                        }

                        Sleep (0x02EE)
                        Notify (^^PCI0.GFX0, 0x80) // Status Change
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }
                }
                Else
                {
                    Local1 = NCDD /* \NCDD */
                    If ((Local0 == Local1))
                    {
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }
                    Else
                    {
                        If ((Local0 == One))
                        {
                            ^^PCI0.P0P2.VGA.LCDA = One
                            ^^PCI0.P0P2.VGA.CRTA = Zero
                            ^^PCI0.P0P2.VGA.TVAA = Zero
                            ^^PCI0.P0P3.VGA.LCDA = One
                            ^^PCI0.P0P3.VGA.CRTA = Zero
                            ^^PCI0.P0P3.VGA.TVAA = Zero
                            ^^PCI0.P0P2.VGA.HDTV = Zero
                            ^^PCI0.P0P3.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x02))
                        {
                            ^^PCI0.P0P2.VGA.LCDA = Zero
                            ^^PCI0.P0P2.VGA.CRTA = One
                            ^^PCI0.P0P2.VGA.TVAA = Zero
                            ^^PCI0.P0P3.VGA.LCDA = Zero
                            ^^PCI0.P0P3.VGA.CRTA = One
                            ^^PCI0.P0P3.VGA.TVAA = Zero
                            ^^PCI0.P0P2.VGA.HDTV = Zero
                            ^^PCI0.P0P3.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x03))
                        {
                            ^^PCI0.P0P2.VGA.LCDA = One
                            ^^PCI0.P0P2.VGA.CRTA = One
                            ^^PCI0.P0P2.VGA.TVAA = Zero
                            ^^PCI0.P0P3.VGA.LCDA = One
                            ^^PCI0.P0P3.VGA.CRTA = One
                            ^^PCI0.P0P3.VGA.TVAA = Zero
                            ^^PCI0.P0P2.VGA.HDTV = Zero
                            ^^PCI0.P0P3.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x04))
                        {
                            ^^PCI0.P0P2.VGA.LCDA = Zero
                            ^^PCI0.P0P2.VGA.CRTA = Zero
                            ^^PCI0.P0P2.VGA.TVAA = One
                            ^^PCI0.P0P2.VGA.LCDA = Zero
                            ^^PCI0.P0P2.VGA.CRTA = Zero
                            ^^PCI0.P0P2.VGA.TVAA = One
                            ^^PCI0.P0P2.VGA.HDTV = Zero
                            ^^PCI0.P0P3.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x05))
                        {
                            ^^PCI0.P0P2.VGA.LCDA = One
                            ^^PCI0.P0P2.VGA.CRTA = Zero
                            ^^PCI0.P0P2.VGA.TVAA = One
                            ^^PCI0.P0P3.VGA.LCDA = One
                            ^^PCI0.P0P3.VGA.CRTA = Zero
                            ^^PCI0.P0P3.VGA.TVAA = One
                            ^^PCI0.P0P2.VGA.HDTV = Zero
                            ^^PCI0.P0P3.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x06))
                        {
                            ^^PCI0.P0P2.VGA.LCDA = Zero
                            ^^PCI0.P0P2.VGA.CRTA = One
                            ^^PCI0.P0P2.VGA.TVAA = One
                            ^^PCI0.P0P3.VGA.LCDA = Zero
                            ^^PCI0.P0P3.VGA.CRTA = One
                            ^^PCI0.P0P3.VGA.TVAA = One
                            ^^PCI0.P0P2.VGA.HDTV = Zero
                            ^^PCI0.P0P3.VGA.HDTV = Zero
                        }

                        If ((Local0 == 0x07))
                        {
                            ^^PCI0.P0P2.VGA.LCDA = One
                            ^^PCI0.P0P2.VGA.CRTA = One
                            ^^PCI0.P0P2.VGA.TVAA = One
                            ^^PCI0.P0P3.VGA.LCDA = One
                            ^^PCI0.P0P3.VGA.CRTA = One
                            ^^PCI0.P0P3.VGA.TVAA = One
                            ^^PCI0.P0P2.VGA.HDTV = Zero
                            ^^PCI0.P0P3.VGA.HDTV = Zero
                        }

                        If ((OSYS >= 0x07D1))
                        {
                            Notify (PCI0, Zero) // Bus Check
                        }
                        Else
                        {
                            Notify (^^PCI0.P0P2.VGA, Zero) // Bus Check
                            Notify (^^PCI0.P0P3.VGA, Zero) // Bus Check
                        }

                        Sleep (0x02EE)
                        Notify (^^PCI0.P0P2.VGA, 0x80) // Status Change
                        Notify (^^PCI0.P0P3.VGA, 0x80) // Status Change
                        Return (Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                    }
                }
            }

            Method (SMCE, 3, NotSerialized)
            {
                Local1 = Zero
                Local2 = Zero
                If (Arg0)
                {
                    Local1 |= One
                }
                Else
                {
                    Local1 &= 0xFE
                }

                If (Arg1)
                {
                    Local1 |= ((Local1 & 0x8000) >> 0x09)
                    Local2 |= ((Local2 & 0x7000) >> 0x0C)
                }
                Else
                {
                    Local1 &= 0xBF
                }

                If (Arg2)
                {
                    Local1 |= 0x80
                }
                Else
                {
                    Local1 &= 0x7F
                }

                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GBBT, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80)
                        {
                            /* 0000 */  0x31, 0x01, 0x9B, 0x01, 0xFF, 0x01, 0x63, 0x02,  /* 1.....c. */
                            /* 0008 */  0xAE, 0x01, 0x64, 0x02, 0x9D, 0x01, 0xB6, 0x01,  /* ..d..... */
                            /* 0010 */  0xB7, 0x01, 0x65, 0x02, 0x66, 0x02, 0x67, 0x02,  /* ..e.f.g. */
                            /* 0018 */  0x68, 0x02, 0xFF, 0xFF, 0xE4, 0x20, 0xE6, 0x20,  /* h.... .  */
                            /* 0020 */  0x42, 0x21, 0x70, 0x21, 0x8D, 0x21, 0x8E, 0x21,  /* B!p!.!.! */
                            /* 0028 */  0x8F, 0x21, 0x90, 0x21, 0x91, 0x21, 0x92, 0x21,  /* .!.!.!.! */
                            /* 0030 */  0x93, 0x21, 0x00, 0x00                           /* .!.. */
                        }
                    }
                Return (Local0)
            }

            Method (GHKS, 0, NotSerialized)
            {
                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04) {}
                    }
                Index (DerefOf (Index (Local0, 0x02)), Zero) = ^^PCI0.LPCB.EC0.GSHK ()
                Release (^^PCI0.LPCB.EC0.MUT1)
                Return (Local0)
            }

            Method (SHKS, 1, NotSerialized)
            {
                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                ^^PCI0.LPCB.EC0.SSHK (Arg0)
                Release (^^PCI0.LPCB.EC0.MUT1)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (HKFR, 0, NotSerialized)
            {
                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04) {}
                    }
                If (ECON)
                {
                    Local1 = ^^PCI0.LPCB.EC0.QBHK /* \_SB_.PCI0.LPCB.EC0_.QBHK */
                }

                Release (^^PCI0.LPCB.EC0.MUT1)
                If ((Local1 == 0x0D))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x31
                    Index (DerefOf (Index (Local0, 0x02)), One) = One
                }

                If ((Local1 == One))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x9B
                    Index (DerefOf (Index (Local0, 0x02)), One) = One
                }

                If ((Local1 == 0x04))
                {
                    If (IGDS)
                    {
                        Local3 = Zero
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = 0xAE
                        Index (DerefOf (Index (Local0, 0x02)), One) = One
                        If (((^^PCI0.GFX0.CADL == 0x0100) || (^^PCI0.GFX0.CAL2 == 0x0100)))
                        {
                            Local3 |= 0x02
                        }

                        If (((^^PCI0.GFX0.CADL == 0x0400) || (^^PCI0.GFX0.CAL2 == 0x0400)))
                        {
                            Local3 |= One
                        }

                        If (((^^PCI0.GFX0.CADL == 0x0300) || (^^PCI0.GFX0.CAL2 == 0x0300)))
                        {
                            Local3 |= 0x10
                        }

                        Index (DerefOf (Index (Local0, 0x02)), 0x03) = Local3
                        Local3 = Zero
                        If (((^^PCI0.GFX0.NADL == 0x0100) || (^^PCI0.GFX0.NDL2 == 0x0100)))
                        {
                            Local3 |= 0x02
                        }

                        If (((^^PCI0.GFX0.NADL == 0x0400) || (^^PCI0.GFX0.NDL2 == 0x0400)))
                        {
                            Local3 |= One
                        }

                        If (((^^PCI0.GFX0.NADL == 0x0300) || (^^PCI0.GFX0.NDL2 == 0x0300)))
                        {
                            Local3 |= 0x10
                        }

                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = Local3
                        ^^PCI0.GFX0.GHDS (Zero)
                    }
                    Else
                    {
                        If ((NVSF == 0xAA))
                        {
                            GDNV ()
                        }
                        Else
                        {
                            TRAP (TRTI, 0x0B)
                        }

                        Sleep (0x64)
                        Local3 = NSTE /* \NSTE */
                        ^^PCI0.P0P2.VGA.LCDA = (Local3 & One)
                        ^^PCI0.P0P2.VGA.CRTA = ((Local3 & 0x02) >> One)
                        ^^PCI0.P0P3.VGA.LCDA = (Local3 & One)
                        ^^PCI0.P0P3.VGA.CRTA = ((Local3 & 0x02) >> One)
                        ^^PCI0.P0P2.VGA.HDTV = ((Local3 & 0x10) >> 0x04)
                        ^^PCI0.P0P3.VGA.HDTV = ((Local3 & 0x10) >> 0x04)
                        Notify (^^PCI0.P0P2.VGA, 0x80) // Status Change
                        Notify (^^PCI0.P0P3.VGA, 0x80) // Status Change
                        Sleep (0x64)
                        Index (DerefOf (Index (Local0, 0x02)), Zero) = 0xAE
                        Index (DerefOf (Index (Local0, 0x02)), One) = One
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = (((NSTE & 
                            0x03) << Zero) | DerefOf (Index (DerefOf (Index (Local0, 0x02)), 0x02)))
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = (((NSTE & 
                            0x10) << Zero) | DerefOf (Index (DerefOf (Index (Local0, 0x02)), 0x02)))
                        Index (DerefOf (Index (Local0, 0x02)), 0x03) = Zero
                        Index (DerefOf (Index (Local0, 0x02)), 0x03) = (((CSTE & 
                            0x03) << Zero) | DerefOf (Index (DerefOf (Index (Local0, 0x02)), 0x03)))
                        Index (DerefOf (Index (Local0, 0x02)), 0x03) = (((CSTE & 
                            0x10) << Zero) | DerefOf (Index (DerefOf (Index (Local0, 0x02)), 0x03)))
                    }
                }

                If ((Local1 == 0x06))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x9D
                    Index (DerefOf (Index (Local0, 0x02)), One) = One
                }

                If ((Local1 == 0x07))
                {
                    If ((OSYS >= 0x07D6))
                    {
                        If (IGDS)
                        {
                            Notify (^^PCI0.GFX0.DD03, 0x87) // Device-Specific
                        }
                        Else
                        {
                            Notify (^^PCI0.P0P2.VGA.LCD, 0x87) // Device-Specific
                            Notify (^^PCI0.P0P3.VGA.LCD, 0x87) // Device-Specific
                        }
                    }
                    Else
                    {
                    }

                    Sleep (0x32)
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0xB6
                    Index (DerefOf (Index (Local0, 0x02)), One) = One
                }

                If ((Local1 == 0x08))
                {
                    If ((OSYS >= 0x07D6))
                    {
                        If (IGDS)
                        {
                            Notify (^^PCI0.GFX0.DD03, 0x86) // Device-Specific
                        }
                        Else
                        {
                            Notify (^^PCI0.P0P2.VGA.LCD, 0x86) // Device-Specific
                            Notify (^^PCI0.P0P3.VGA.LCD, 0x86) // Device-Specific
                        }
                    }
                    Else
                    {
                    }

                    Sleep (0x32)
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0xB7
                    Index (DerefOf (Index (Local0, 0x02)), One) = One
                }

                Return (Local0)
            }

            Method (GHKF, 0, NotSerialized)
            {
                Return (HKFR ())
            }

            Method (SHKF, 1, NotSerialized)
            {
                Local1 = (Arg0 & 0xFF)
                Local3 = (Arg0 & 0xFF00)
                Local2 = (Local3 >> 0x08)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04) {}
                    }
                Index (DerefOf (Index (Local0, 0x02)), Zero) = Local1
                Index (DerefOf (Index (Local0, 0x02)), One) = Local2
                If ((Arg0 == 0x01AE))
                {
                    If ((OSYS >= 0x07D9))
                    {
                        If (ECON)
                        {
                            ^^PCI0.LPCB.EC0.RCDS = One
                        }
                        Else
                        {
                            If (IGDS)
                            {
                                Local3 = Zero
                                Index (DerefOf (Index (Local0, 0x02)), Zero) = 0xAE
                                Index (DerefOf (Index (Local0, 0x02)), One) = One
                                If (((^^PCI0.GFX0.CADL == 0x0100) || (^^PCI0.GFX0.CAL2 == 0x0100)))
                                {
                                    Local3 |= 0x02
                                }

                                If (((^^PCI0.GFX0.CADL == 0x0400) || (^^PCI0.GFX0.CAL2 == 0x0400)))
                                {
                                    Local3 |= One
                                }

                                If (((^^PCI0.GFX0.CADL == 0x0300) || (^^PCI0.GFX0.CAL2 == 0x0300)))
                                {
                                    Local3 |= 0x10
                                }

                                Index (DerefOf (Index (Local0, 0x02)), 0x03) = Local3
                                Local3 = Zero
                                If (((^^PCI0.GFX0.NADL == 0x0100) || (^^PCI0.GFX0.NDL2 == 0x0100)))
                                {
                                    Local3 |= 0x02
                                }

                                If (((^^PCI0.GFX0.NADL == 0x0400) || (^^PCI0.GFX0.NDL2 == 0x0400)))
                                {
                                    Local3 |= One
                                }

                                If (((^^PCI0.GFX0.NADL == 0x0300) || (^^PCI0.GFX0.NDL2 == 0x0300)))
                                {
                                    Local3 |= 0x10
                                }

                                Index (DerefOf (Index (Local0, 0x02)), 0x02) = Local3
                                ^^PCI0.GFX0.GHDS (Zero)
                            }
                            Else
                            {
                                If ((NVSF == 0xAA))
                                {
                                    GDNV ()
                                }
                                Else
                                {
                                    TRAP (TRTI, 0x0B)
                                }

                                Sleep (0x64)
                                Local3 = NSTE /* \NSTE */
                                ^^PCI0.P0P2.VGA.LCDA = (Local3 & One)
                                ^^PCI0.P0P2.VGA.CRTA = ((Local3 & 0x02) >> One)
                                ^^PCI0.P0P3.VGA.LCDA = (Local3 & One)
                                ^^PCI0.P0P3.VGA.CRTA = ((Local3 & 0x02) >> One)
                                ^^PCI0.P0P2.VGA.HDTV = ((Local3 & 0x10) >> 0x04)
                                ^^PCI0.P0P3.VGA.HDTV = ((Local3 & 0x10) >> 0x04)
                                Notify (^^PCI0.P0P2.VGA, 0x80) // Status Change
                                Notify (^^PCI0.P0P3.VGA, 0x80) // Status Change
                                Sleep (0x64)
                                Index (DerefOf (Index (Local0, 0x02)), Zero) = 0xAE
                                Index (DerefOf (Index (Local0, 0x02)), One) = One
                                Index (DerefOf (Index (Local0, 0x02)), 0x02) = Zero
                                Index (DerefOf (Index (Local0, 0x02)), 0x02) = (((NSTE & 
                                    0x03) << Zero) | DerefOf (Index (DerefOf (Index (Local0, 0x02)), 0x02)))
                                Index (DerefOf (Index (Local0, 0x02)), 0x02) = (((NSTE & 
                                    0x10) << Zero) | DerefOf (Index (DerefOf (Index (Local0, 0x02)), 0x02)))
                                Index (DerefOf (Index (Local0, 0x02)), 0x03) = Zero
                                Index (DerefOf (Index (Local0, 0x02)), 0x03) = (((CSTE & 
                                    0x03) << Zero) | DerefOf (Index (DerefOf (Index (Local0, 0x02)), 0x03)))
                                Index (DerefOf (Index (Local0, 0x02)), 0x03) = (((CSTE & 
                                    0x10) << Zero) | DerefOf (Index (DerefOf (Index (Local0, 0x02)), 0x03)))
                            }
                        }
                    }
                }

                Return (Local0)
            }

            Method (GBBS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0xB (BIOS Read)"
                ^^PCI0.LPCB.EC0.NQLB = One
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Unicode ("\x01")
                    }
                Return (Local0)
            }

            Method (GBBV, 0, NotSerialized)
            {
                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04) {}
                    }
                If (ECON)
                {
                    Local1 = ^^PCI0.LPCB.EC0.QBBB /* \_SB_.PCI0.LPCB.EC0_.QBBB */
                    ^^PCI0.LPCB.EC0.QBBB = Zero
                }

                If ((Local1 == 0x03))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0xE4
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x20
                }

                If ((Local1 == 0x04))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x42
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                    If ((CBSD == Zero))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = Zero
                    }
                    Else
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = 0x02
                    }
                }

                If ((Local1 == 0x05))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0xE6
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x20
                    If ((CBSD == Zero))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = Zero
                    }
                    Else
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = 0x02
                    }
                }

                If ((Local1 == 0x10))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x70
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                }

                If ((Local1 == 0x20))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x8D
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                    If ((CBSD == Zero))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = One
                    }
                    Else
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = 0x03
                    }
                }

                If ((Local1 == 0x21))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x8E
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                    If ((CBSD == Zero))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = One
                    }
                    Else
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = 0x03
                    }
                }

                If ((Local1 == 0x22))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x8F
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                }

                If ((Local1 == 0x23))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x90
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                    If ((CBSD == Zero))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = One
                    }
                    Else
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = 0x03
                    }
                }

                If ((Local1 == 0x24))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x91
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                    If ((CBSD == Zero))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = One
                    }
                    Else
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = 0x03
                    }
                }

                If ((Local1 == 0x25))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x92
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                    If ((CBSD == Zero))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = One
                    }
                    Else
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = 0x03
                    }
                }

                If ((Local1 == 0x26))
                {
                    Index (DerefOf (Index (Local0, 0x02)), Zero) = 0x93
                    Index (DerefOf (Index (Local0, 0x02)), One) = 0x21
                    If ((CBSD == Zero))
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = One
                    }
                    Else
                    {
                        Index (DerefOf (Index (Local0, 0x02)), 0x02) = 0x03
                    }
                }

                If ((Local1 == 0x2C))
                {
                    Notify (EJET, 0x02) // Device Wake
                }

                Release (^^PCI0.LPCB.EC0.MUT1)
                Return (Local0)
            }

            Method (GTFR, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80) {}
                    }
                Local2 = 0x83
                Index (DerefOf (Index (Local0, 0x02)), Zero) = Local2
                If ((VTDT == One))
                {
                    Local2 = One
                }
                Else
                {
                    Local2 = Zero
                }

                Index (DerefOf (Index (Local0, 0x02)), One) = Local2
                Return (Local0)
            }

            Method (GBNS, 0, NotSerialized)
            {
                Local0 = Zero
                If (ECON)
                {
                    Local0 = ^^PCI0.LPCB.EC0.BBDA /* \_SB_.PCI0.LPCB.EC0_.BBDA */
                }

                If (Local0)
                {
                    Local1 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Zero
                        }
                }
                Else
                {
                    Local1 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            One
                        }
                }

                Return (Local1)
            }

            Method (SBNS, 1, NotSerialized)
            {
                Local0 = Arg0
                If (Local0)
                {
                    ^^PCI0.LPCB.EC0.BBDA = Zero
                }
                Else
                {
                    ^^PCI0.LPCB.EC0.BBDA = One
                }

                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GDIM, 0, NotSerialized)
            {
                Local0 = Zero
                Local1 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Zero
                    }
                If (ECON)
                {
                    Local0 = ^^PCI0.LPCB.EC0.ADIM /* \_SB_.PCI0.LPCB.EC0_.ADIM */
                }

                If ((Local0 == Zero))
                {
                    Local1 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Zero
                        }
                }
                Else
                {
                    If ((Local0 == One))
                    {
                        Local1 = Package (0x03)
                            {
                                Zero, 
                                0x04, 
                                One
                            }
                    }
                }

                Return (Local1)
            }

            Method (SDIM, 1, NotSerialized)
            {
                If ((Arg0 & 0xFF))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Zero
                }

                If (ECON)
                {
                    ^^PCI0.LPCB.EC0.ADIM = Local0
                }

                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (SMAT, 0, NotSerialized)
            {
                If (ECON)
                {
                    Local1 = ^^PCI0.LPCB.EC0.SRAD /* \_SB_.PCI0.LPCB.EC0_.SRAD */
                }

                Local2 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Unicode ("\x02")
                    }
                If ((Local1 == One))
                {
                    Index (DerefOf (Index (Local2, 0x02)), Zero) = One
                }
                Else
                {
                    If ((Local1 == 0x02))
                    {
                        Index (DerefOf (Index (Local2, 0x02)), Zero) = 0x02
                    }
                    Else
                    {
                        If ((Local1 == 0x03))
                        {
                            Index (DerefOf (Index (Local2, 0x02)), Zero) = 0x02
                        }
                        Else
                        {
                            If ((Local1 == 0x04))
                            {
                                Index (DerefOf (Index (Local2, 0x02)), Zero) = 0x03
                            }
                            Else
                            {
                                Index (DerefOf (Index (Local2, 0x02)), Zero) = Zero
                            }
                        }
                    }
                }

                Return (Local2)
            }

            Method (GMSR, 0, NotSerialized)
            {
                Local0 = MSRA /* \MSRA */
                Local1 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           /* .... */
                        }
                    }
                Index (DerefOf (Index (Local1, 0x02)), Zero) = Local0
                Return (Local1)
            }

            Method (SMSR, 1, NotSerialized)
            {
                Local0 = Arg0
                MSRA = Local0
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (BACS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x1F (BIOS Read)"
                Local0 = Zero
                Local1 = Zero
                Local2 = Zero
                If (^^PCI0.LPCB.EC0.MBTS)
                {
                    Local0 = ^^PCI0.LPCB.EC0.BA1C /* \_SB_.PCI0.LPCB.EC0_.BA1C */
                    If (((Local0 & 0x10) == 0x10))
                    {
                        Local1 = (Local0 & 0x02)
                        If ((Local1 == 0x02))
                        {
                            Local1 = 0x02
                        }
                        Else
                        {
                            Local1 = One
                        }
                    }
                    Else
                    {
                        Local1 = Zero
                    }
                }
                Else
                {
                    Local1 = 0xFF
                }

                Local2 = 0xFF
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           /* .... */
                        }
                    }
                Index (DerefOf (Index (Local0, 0x02)), Zero) = Local1
                Index (DerefOf (Index (Local0, 0x02)), One) = Local2
                Return (Local0)
            }

            Method (BACC, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x1F (BIOS Write)"
                Local0 = (Arg0 & 0xFF)
                Local1 = ((Arg0 >> 0x08) & 0xFF)
                If ((Local0 == Zero))
                {
                    If (^^PCI0.LPCB.EC0.MBTS)
                    {
                        If ((Local1 == Zero))
                        {
                            Local3 = ^^PCI0.LPCB.EC0.BA1C /* \_SB_.PCI0.LPCB.EC0_.BA1C */
                            Local3 &= 0xE5
                            ^^PCI0.LPCB.EC0.BA1C = Local3
                            Local2 = Zero
                        }
                        Else
                        {
                            If ((Local1 == One))
                            {
                                Local3 = ^^PCI0.LPCB.EC0.BA1C /* \_SB_.PCI0.LPCB.EC0_.BA1C */
                                Local3 &= 0xE5
                                Local3 |= 0x08
                                ^^PCI0.LPCB.EC0.BA1C = Local3
                                Local2 = Zero
                            }
                            Else
                            {
                                If ((Local1 == 0x02))
                                {
                                    Local3 = ^^PCI0.LPCB.EC0.BA1C /* \_SB_.PCI0.LPCB.EC0_.BA1C */
                                    Local3 &= 0xE5
                                    Local3 |= 0x0A
                                    ^^PCI0.LPCB.EC0.BA1C = Local3
                                    Local2 = Zero
                                }
                                Else
                                {
                                    Local2 = 0x35
                                }
                            }
                        }
                    }
                    Else
                    {
                        Local0 = 0x34
                    }
                }
                Else
                {
                    If ((Local0 == One))
                    {
                        Local2 = 0x34
                    }
                    Else
                    {
                        Local2 = 0x35
                    }
                }

                Return (Local2)
            }

            Method (GWDI, 0, NotSerialized)
            {
                WAOK = One
                WA40 = One
                TRAP (TRTI, 0x1F)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80) {}
                    }
                Local1 = Zero
                Local1 += (WAB0 & One)
                Local1 += ((WAB0 & 0x02) >> One)
                Local2 = Zero
                Index (DerefOf (Index (Local0, 0x02)), Zero) = One
                Index (DerefOf (Index (Local0, 0x02)), One) = Zero
                Index (DerefOf (Index (Local0, 0x02)), 0x02) = Zero
                Index (DerefOf (Index (Local0, 0x02)), 0x03) = Zero
                Index (DerefOf (Index (Local0, 0x02)), 0x04) = Zero
                Index (DerefOf (Index (Local0, 0x02)), 0x05) = Zero
                Index (DerefOf (Index (Local0, 0x02)), 0x06) = Local1
                Index (DerefOf (Index (Local0, 0x02)), 0x07) = Local1
                Local2 += 0x10
                If ((WAB0 & One))
                {
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + Zero)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + One)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x02)) = 
                        WLD0 /* \WLD0 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x03)) = 
                        WLD1 /* \WLD1 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x04)) = 
                        WLD2 /* \WLD2 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x05)) = 
                        WLD3 /* \WLD3 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x06)) = 
                        WLD4 /* \WLD4 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x07)) = 
                        WLD5 /* \WLD5 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x08)) = 
                        WLD6 /* \WLD6 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x09)) = 
                        WLD7 /* \WLD7 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0A)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0B)) = 
                        WAB1 /* \WAB1 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0C)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0D)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0E)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0F)) = 
                        Zero
                    Local2 += 0x10
                }

                If ((WAB0 & 0x02))
                {
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + Zero)) = 
                        One
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + One)) = 
                        One
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x02)) = 
                        WBD0 /* \WBD0 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x03)) = 
                        WBD1 /* \WBD1 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x04)) = 
                        WBD2 /* \WBD2 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x05)) = 
                        WBD3 /* \WBD3 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x06)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x07)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x08)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x09)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0A)) = 
                        One
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0B)) = 
                        WAB2 /* \WAB2 */
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0C)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0D)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0E)) = 
                        Zero
                    Index (DerefOf (Index (Local0, 0x02)), (Local2 + 0x0F)) = 
                        Zero
                    Local2 += 0x10
                }

                Return (Local0)
            }

            Method (SWDS, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = (Local0 & 0x00FF0000)
                Local1 >>= 0x10
                Local2 = (Local0 & 0xFF000000)
                Local2 >>= 0x18
                If ((Local1 == 0xFE))
                {
                    If ((Local2 == One))
                    {
                        WAB4 = 0x08
                    }
                    Else
                    {
                        WAB4 = Zero
                    }

                    WAB5 = 0x08
                    TRAP (TRTI, 0x20)
                }
                Else
                {
                    If ((Local1 == 0xFF))
                    {
                        Local3 = WAB1 /* \WAB1 */
                        Local3 &= 0x08
                        Local3 >>= 0x03
                        If ((Local3 != Local2))
                        {
                            ^^PCI0.LPCB.EC0._Q15 ()
                        }
                    }
                    Else
                    {
                        If ((Local1 == Zero))
                        {
                            If ((Local2 == One))
                            {
                                WAB4 = One
                            }
                            Else
                            {
                                WAB4 = Zero
                            }

                            WAB5 = One
                            TRAP (TRTI, 0x20)
                        }

                        If ((Local1 == One))
                        {
                            If ((Local2 == One))
                            {
                                WAB4 = 0x02
                            }
                            Else
                            {
                                WAB4 = Zero
                            }

                            WAB5 = 0x02
                            TRAP (TRTI, 0x20)
                        }
                    }
                }

                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GDLC, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x1D (BIOS Read)"
                Local1 = CMSR (0x6A)
                Local2 = CMSR (0x6B)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           /* .... */
                        }
                    }
                Index (DerefOf (Index (Local0, 0x02)), Zero) = Local1
                Index (DerefOf (Index (Local0, 0x02)), One) = Local2
                Return (Local0)
            }

            Method (SDLC, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x1D (BIOS Write)"
                Local0 = (Arg0 & 0xFF)
                CMSW (0x6A, Local0)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GPCS, 0, NotSerialized)
            {
                Debug = "Get Post Code Error Status ---"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           /* .... */
                        }
                    }
                Local1 = CMSR (0x71)
                Index (DerefOf (Index (Local0, 0x02)), Zero) = Local1
                Return (Local0)
            }

            Method (SPCS, 1, NotSerialized)
            {
                Debug = "Set Post Code Error State ---"
                Local0 = (Arg0 & 0xFF)
                If ((Local0 == One))
                {
                    SSDP = 0xF2
                    SSMP = 0xC5
                }

                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
                Concatenate (WEID, WMED, Local0)
                Return (Local0)
            }

            Name (WQAE, Buffer (0x08A9)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  /* FOMB.... */
                /* 0008 */  0x99, 0x08, 0x00, 0x00, 0x8A, 0x3A, 0x00, 0x00,  /* .....:.. */
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  /* DS...}.T */
                /* 0018 */  0x98, 0x4B, 0x9C, 0x00, 0x01, 0x06, 0x18, 0x42,  /* .K.....B */
                /* 0020 */  0x10, 0x13, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  /* ..."!... */
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  /* ..,...8. */
                /* 0030 */  0x84, 0x1C, 0x40, 0x88, 0x59, 0x50, 0x08, 0x21,  /* ..@.YP.! */
                /* 0038 */  0x10, 0xEA, 0x4F, 0x20, 0xBF, 0x02, 0x10, 0x3A,  /* ..O ...: */
                /* 0040 */  0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E, 0x11,  /* . S.A.N. */
                /* 0048 */  0x44, 0xD0, 0xAB, 0x00, 0x9B, 0x02, 0x4C, 0x0A,  /* D.....L. */
                /* 0050 */  0xB0, 0x28, 0x40, 0xBB, 0x00, 0xCB, 0x02, 0x74,  /* .(@....t */
                /* 0058 */  0x0B, 0x90, 0x0E, 0x4B, 0x44, 0x82, 0xA3, 0xC4,  /* ...KD... */
                /* 0060 */  0x80, 0xA3, 0x74, 0x62, 0x0B, 0x37, 0x6C, 0xF0,  /* ..tb.7l. */
                /* 0068 */  0x42, 0x51, 0x34, 0x83, 0x28, 0x09, 0x2A, 0x17,  /* BQ4.(.*. */
                /* 0070 */  0xE0, 0x1B, 0x41, 0xE0, 0xE5, 0x0A, 0x90, 0x3C,  /* ..A....< */
                /* 0078 */  0x01, 0x69, 0x16, 0x60, 0x58, 0x80, 0x75, 0x01,  /* .i.`X.u. */
                /* 0080 */  0xB2, 0x87, 0x40, 0xA5, 0x0E, 0x01, 0x25, 0x67,  /* ..@...%g */
                /* 0088 */  0x08, 0xA8, 0x01, 0xB4, 0x3A, 0x01, 0xE1, 0x57,  /* ....:..W */
                /* 0090 */  0x3A, 0x25, 0x24, 0x41, 0x38, 0x63, 0x15, 0x8F,  /* :%$A8c.. */
                /* 0098 */  0xAF, 0x59, 0x34, 0x3D, 0x27, 0x39, 0xC7, 0x90,  /* .Y4='9.. */
                /* 00A0 */  0xE3, 0x71, 0xA1, 0x07, 0xC1, 0x05, 0x78, 0x18,  /* .q....x. */
                /* 00A8 */  0x06, 0x1D, 0xB2, 0x22, 0x6B, 0x80, 0xC1, 0x58,  /* ..."k..X */
                /* 00B0 */  0x18, 0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9,  /* ..u1j.H. */
                /* 00B8 */  0x80, 0x0C, 0x51, 0x12, 0x1C, 0x6A, 0xD4, 0x96,  /* ..Q..j.. */
                /* 00C0 */  0x28, 0xC0, 0xFC, 0x38, 0x34, 0xBB, 0xB6, 0xC7,  /* (..84... */
                /* 00C8 */  0x42, 0x20, 0x99, 0xB4, 0xA1, 0xA0, 0xA4, 0x40,  /* B .....@ */
                /* 00D0 */  0x68, 0x6C, 0x67, 0xEA, 0x19, 0x45, 0x3C, 0x52,  /* hlg..E<R */
                /* 00D8 */  0xC3, 0x24, 0xF0, 0x28, 0x22, 0x1B, 0x8D, 0x43,  /* .$.("..C */
                /* 00E0 */  0x63, 0x87, 0xE1, 0x61, 0x06, 0x3B, 0x88, 0xC3,  /* c..a.;.. */
                /* 00E8 */  0x38, 0xE6, 0xC8, 0x09, 0x3C, 0xA1, 0x23, 0x3D,  /* 8...<.#= */
                /* 00F0 */  0xF2, 0xC2, 0xE6, 0x29, 0xD4, 0x18, 0xCD, 0x41,  /* ...)...A */
                /* 00F8 */  0x11, 0xB8, 0xD0, 0x18, 0x19, 0x10, 0xF2, 0x3C,  /* .......< */
                /* 0100 */  0x7E, 0x8D, 0xC4, 0x04, 0x76, 0x2F, 0xC0, 0x1A,  /* ~...v/.. */
                /* 0108 */  0xA6, 0x60, 0x1B, 0x9B, 0x98, 0xFE, 0xFF, 0x10,  /* .`...... */
                /* 0110 */  0x47, 0x1E, 0xA3, 0xAD, 0xB9, 0x0B, 0x29, 0x4C,  /* G.....)L */
                /* 0118 */  0x8C, 0x28, 0xC1, 0xE2, 0x55, 0x3C, 0x0D, 0xA1,  /* .(..U<.. */
                /* 0120 */  0x3C, 0x29, 0x84, 0x8A, 0x54, 0x19, 0x8A, 0x86,  /* <)..T... */
                /* 0128 */  0x1E, 0xA5, 0x42, 0x01, 0xCE, 0xE6, 0x21, 0xDC,  /* ..B...!. */
                /* 0130 */  0x1A, 0x41, 0x85, 0x10, 0x2B, 0x52, 0xAC, 0xF6,  /* .A..+R.. */
                /* 0138 */  0x07, 0x41, 0x42, 0x2E, 0x5B, 0xC7, 0x07, 0x47,  /* .AB.[..G */
                /* 0140 */  0x1A, 0x0D, 0xEA, 0x50, 0xE0, 0xB1, 0x7B, 0xDC,  /* ...P..{. */
                /* 0148 */  0xCF, 0x02, 0x3E, 0x08, 0x9C, 0x5B, 0x90, 0xA3,  /* ..>..[.. */
                /* 0150 */  0x3B, 0x8B, 0x47, 0x85, 0x83, 0xF6, 0xF0, 0xD8,  /* ;.G..... */
                /* 0158 */  0x6D, 0xC0, 0x67, 0x08, 0x9F, 0x02, 0xF0, 0xAE,  /* m.g..... */
                /* 0160 */  0x01, 0x35, 0xFD, 0x83, 0x67, 0x82, 0xE0, 0x50,  /* .5..g..P */
                /* 0168 */  0x43, 0xF4, 0xA8, 0xC3, 0x9D, 0xC0, 0x21, 0x32,  /* C.....!2 */
                /* 0170 */  0x40, 0x4F, 0xEA, 0xB8, 0xB1, 0x83, 0x3B, 0x99,  /* @O....;. */
                /* 0178 */  0x83, 0x7E, 0x6F, 0x68, 0xF6, 0xC6, 0x40, 0x08,  /* .~oh..@. */
                /* 0180 */  0x8E, 0xC7, 0x97, 0x05, 0x36, 0xE1, 0x04, 0x96,  /* ....6... */
                /* 0188 */  0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x51, 0x9E,  /* ?.....Q. */
                /* 0190 */  0x56, 0xCC, 0x90, 0xCF, 0x0C, 0x26, 0xB0, 0x58,  /* V....&.X */
                /* 0198 */  0x08, 0x29, 0x80, 0xD0, 0x78, 0xC0, 0x7F, 0x03,  /* .)..x... */
                /* 01A0 */  0x78, 0xC0, 0xF0, 0xCD, 0xC0, 0xF3, 0x35, 0xC1,  /* x.....5. */
                /* 01A8 */  0xB0, 0x10, 0x32, 0xB2, 0x0A, 0x8F, 0x87, 0x8E,  /* ..2..... */
                /* 01B0 */  0xC2, 0xD7, 0x83, 0xC3, 0x39, 0xAD, 0x78, 0x26,  /* ....9.x& */
                /* 01B8 */  0x18, 0x0E, 0x42, 0x27, 0x09, 0x8B, 0x1A, 0x36,  /* ..B'...6 */
                /* 01C0 */  0x3D, 0x39, 0xF0, 0x43, 0x03, 0xBB, 0x19, 0x9C,  /* =9.C.... */
                /* 01C8 */  0xC1, 0x23, 0x80, 0x47, 0x72, 0x42, 0xFE, 0x98,  /* .#.GrB.. */
                /* 01D0 */  0x78, 0x60, 0xF0, 0x01, 0xF1, 0xDE, 0xA7, 0x4C,  /* x`.....L */
                /* 01D8 */  0x46, 0x70, 0xA6, 0x06, 0xF4, 0x71, 0xC0, 0xFF,  /* Fp...q.. */
                /* 01E0 */  0xFF, 0xA1, 0xF0, 0x21, 0x7A, 0x7C, 0xA7, 0x7C,  /* ...!z|.| */
                /* 01E8 */  0xBC, 0x96, 0x00, 0x21, 0x59, 0xE3, 0x84, 0x7E,  /* ...!Y..~ */
                /* 01F0 */  0x87, 0xF0, 0xF1, 0xC3, 0x47, 0x16, 0x47, 0x84,  /* ....G.G. */
                /* 01F8 */  0x90, 0x93, 0x53, 0x00, 0x1A, 0xF8, 0x74, 0xCF,  /* ..S...t. */
                /* 0200 */  0x2E, 0xC2, 0xE9, 0x7A, 0x52, 0x0E, 0x34, 0x0C,  /* ...zR.4. */
                /* 0208 */  0x3A, 0x4E, 0x70, 0x9C, 0x07, 0xC0, 0x31, 0x4E,  /* :Np...1N */
                /* 0210 */  0xF8, 0xE7, 0x02, 0xF8, 0x03, 0xE4, 0xA7, 0x8C,  /* ........ */
                /* 0218 */  0x57, 0x8C, 0x04, 0x8E, 0x39, 0x42, 0xF4, 0xB9,  /* W...9B.. */
                /* 0220 */  0xC6, 0x23, 0xC4, 0xC2, 0x3F, 0x55, 0x14, 0x3E,  /* .#..?U.> */
                /* 0228 */  0x10, 0x32, 0x46, 0x70, 0x01, 0x7A, 0x8C, 0xC0,  /* .2Fp.z.. */
                /* 0230 */  0x37, 0xE0, 0x18, 0xD1, 0x47, 0x09, 0xAE, 0xFE,  /* 7...G... */
                /* 0238 */  0xA0, 0x41, 0x07, 0x88, 0xFB, 0xFF, 0x0F, 0x10,  /* .A...... */
                /* 0240 */  0x3E, 0xA8, 0x07, 0x08, 0x7C, 0xA3, 0x1F, 0x3D,  /* >...|..= */
                /* 0248 */  0xD0, 0xE3, 0xB2, 0xE8, 0xF3, 0x80, 0x8C, 0x9F,  /* ........ */
                /* 0250 */  0x68, 0x34, 0x2F, 0x7E, 0x3A, 0xE0, 0x87, 0x0F,  /* h4/~:... */
                /* 0258 */  0xF0, 0x80, 0x7A, 0x48, 0x38, 0x50, 0xCC, 0xB4,  /* ..zH8P.. */
                /* 0260 */  0x39, 0xE8, 0xB3, 0xCB, 0xA1, 0x63, 0x87, 0x0B,  /* 9....c.. */
                /* 0268 */  0xFE, 0x13, 0x08, 0xB8, 0xE4, 0x1D, 0xC2, 0x40,  /* .......@ */
                /* 0270 */  0x31, 0x62, 0xFC, 0x39, 0xC8, 0xA7, 0x30, 0xF0,  /* 1b.9..0. */
                /* 0278 */  0xFF, 0xFF, 0x4F, 0x61, 0xB8, 0x11, 0xF0, 0x20,  /* ..Oa...  */
                /* 0280 */  0xAF, 0x05, 0x9F, 0xB6, 0xA8, 0x74, 0x18, 0xD4,  /* .....t.. */
                /* 0288 */  0x81, 0x0B, 0x30, 0x09, 0x1A, 0xE1, 0x59, 0xA2,  /* ..0...Y. */
                /* 0290 */  0x36, 0x08, 0x01, 0xBF, 0x4D, 0xBC, 0x6D, 0xF9,  /* 6...M.m. */
                /* 0298 */  0x16, 0x10, 0xE7, 0xC8, 0x7B, 0x3B, 0x70, 0x11,  /* ....{;p. */
                /* 02A0 */  0x8C, 0x08, 0xA7, 0x1D, 0xCA, 0x63, 0x88, 0x18,  /* .....c.. */
                /* 02A8 */  0x23, 0xCA, 0xE3, 0x96, 0x51, 0xDE, 0xB6, 0x5E,  /* #...Q..^ */
                /* 02B0 */  0x00, 0xE2, 0x9D, 0xE5, 0xF3, 0x96, 0x31, 0x82,  /* ......1. */
                /* 02B8 */  0x47, 0x7E, 0xE0, 0x62, 0x62, 0xDF, 0x13, 0xFA,  /* G~.bb... */
                /* 02C0 */  0xB9, 0xF9, 0xC0, 0x05, 0x38, 0xFB, 0xFF, 0x1F,  /* ....8... */
                /* 02C8 */  0xB8, 0x00, 0x0E, 0x05, 0x3D, 0x0C, 0xA1, 0x87,  /* ....=... */
                /* 02D0 */  0xE1, 0xA9, 0x9C, 0xCB, 0x13, 0xE5, 0xA9, 0x44,  /* .......D */
                /* 02D8 */  0x8C, 0x1A, 0x26, 0xEA, 0x33, 0x94, 0x2F, 0x1A,  /* ..&.3./. */
                /* 02E0 */  0x3E, 0x10, 0x81, 0xEF, 0xCC, 0x05, 0xFC, 0xFE,  /* >....... */
                /* 02E8 */  0xFF, 0x07, 0x22, 0x38, 0x02, 0xCF, 0x34, 0xA0,  /* .."8..4. */
                /* 02F0 */  0xF4, 0x39, 0x03, 0x81, 0x9C, 0x8A, 0x0F, 0x35,  /* .9.....5 */
                /* 02F8 */  0xC0, 0x48, 0xF4, 0xAB, 0xC1, 0x27, 0x1A, 0x2A,  /* .H...'.* */
                /* 0300 */  0x13, 0x06, 0x75, 0xA8, 0x01, 0x4C, 0x5E, 0x61,  /* ..u..L^a */
                /* 0308 */  0x9E, 0x46, 0xCF, 0xF9, 0x59, 0xC6, 0xA7, 0x1A,  /* .F..Y... */
                /* 0310 */  0x1F, 0x4A, 0x8D, 0x63, 0x88, 0x97, 0x99, 0x87,  /* .J.c.... */
                /* 0318 */  0x1A, 0x1F, 0x0B, 0x5E, 0x49, 0x7D, 0xA8, 0x31,  /* ...^I}.1 */
                /* 0320 */  0x54, 0x9C, 0x87, 0x1A, 0x9F, 0x48, 0x03, 0x45,  /* T....H.E */
                /* 0328 */  0x7D, 0xB3, 0x79, 0xB6, 0x31, 0x7A, 0x7C, 0xDF,  /* }.y.1z|. */
                /* 0330 */  0x50, 0x0D, 0xF1, 0x50, 0xC3, 0x84, 0xBD, 0x23,  /* P..P...# */
                /* 0338 */  0xF4, 0xC1, 0xF5, 0xA1, 0x06, 0x1C, 0xFF, 0xFF,  /* ........ */
                /* 0340 */  0x43, 0x0D, 0xC0, 0xFF, 0xFF, 0xFF, 0xA1, 0x06,  /* C....... */
                /* 0348 */  0x70, 0x74, 0x34, 0x80, 0x73, 0x64, 0xC4, 0x1D,  /* pt4.sd.. */
                /* 0350 */  0x0D, 0xC0, 0x75, 0x28, 0x05, 0x0E, 0x47, 0x03,  /* ..u(..G. */
                /* 0358 */  0xE0, 0x71, 0x14, 0x02, 0xF3, 0x85, 0xC6, 0x47,  /* .q.....G */
                /* 0360 */  0x21, 0x60, 0xF1, 0xFF, 0x3F, 0x0A, 0xE1, 0x64,  /* !`..?..d */
                /* 0368 */  0x9F, 0x83, 0x50, 0x42, 0x8F, 0x42, 0x80, 0x54,  /* ..PB.B.T */
                /* 0370 */  0xC8, 0xA7, 0x88, 0x67, 0x1F, 0x5F, 0x7E, 0x1E,  /* ...g._~. */
                /* 0378 */  0x08, 0x22, 0xBC, 0xE6, 0xFB, 0x14, 0xE4, 0x43,  /* .".....C */
                /* 0380 */  0xBE, 0x8F, 0x42, 0x0C, 0xC6, 0x50, 0xBE, 0x06,  /* ..B..P.. */
                /* 0388 */  0xF9, 0x28, 0xC4, 0xA0, 0x5E, 0x83, 0x7C, 0xDF,  /* .(..^.|. */
                /* 0390 */  0x37, 0xC8, 0x91, 0x18, 0xFB, 0x99, 0xC0, 0x47,  /* 7......G */
                /* 0398 */  0x21, 0x26, 0xED, 0x28, 0x04, 0x28, 0xFC, 0xFF,  /* !&.(.(.. */
                /* 03A0 */  0x1F, 0x85, 0x00, 0xFE, 0xFF, 0xFF, 0x8F, 0x42,  /* .......B */
                /* 03A8 */  0x80, 0xB3, 0x00, 0x47, 0x03, 0xD0, 0x4D, 0xEB,  /* ...G..M. */
                /* 03B0 */  0x51, 0x08, 0xBC, 0x77, 0x96, 0xD3, 0x3E, 0x01,  /* Q..w..>. */
                /* 03B8 */  0x9F, 0x85, 0x00, 0xB3, 0xFF, 0xFF, 0xB3, 0x10,  /* ........ */
                /* 03C0 */  0x30, 0x3B, 0x0A, 0x45, 0x3D, 0xE8, 0x57, 0xA1,  /* 0;.E=.W. */
                /* 03C8 */  0x27, 0x80, 0x17, 0x80, 0x18, 0x61, 0xDE, 0x81,  /* '....a.. */
                /* 03D0 */  0x5E, 0x32, 0xD9, 0x5D, 0xDC, 0x38, 0x4F, 0x2E,  /* ^2.].8O. */
                /* 03D8 */  0xA7, 0x6D, 0x94, 0x97, 0x20, 0x1F, 0x28, 0x9E,  /* .m.. .(. */
                /* 03E0 */  0x85, 0x0C, 0xF5, 0x2E, 0x14, 0xF4, 0x8D, 0xDC,  /* ........ */
                /* 03E8 */  0xA3, 0x8C, 0x19, 0x3F, 0xC4, 0xF3, 0x90, 0x21,  /* ...?...! */
                /* 03F0 */  0x9E, 0x85, 0x00, 0x76, 0xFD, 0xFF, 0xCF, 0x42,  /* ...v...B */
                /* 03F8 */  0x00, 0xFF, 0xFF, 0xFF, 0x47, 0x03, 0xF8, 0x2F,  /* ....G../ */
                /* 0400 */  0x00, 0x9F, 0x85, 0x80, 0xE7, 0x09, 0xE0, 0x41,  /* .......A */
                /* 0408 */  0xDB, 0x67, 0x21, 0x80, 0x33, 0x87, 0xCB, 0xF3,  /* .g!.3... */
                /* 0410 */  0x0F, 0x7A, 0x60, 0xEF, 0x11, 0x9E, 0xF5, 0x71,  /* .z`....q */
                /* 0418 */  0xBF, 0x5E, 0x7A, 0xE0, 0x0F, 0x05, 0xCF, 0x42,  /* .^z....B */
                /* 0420 */  0x0C, 0xEB, 0x98, 0x7C, 0x16, 0x62, 0x10, 0x2F,  /* ...|.b./ */
                /* 0428 */  0x9A, 0x86, 0x78, 0xE1, 0xF4, 0x61, 0xC0, 0xFF,  /* ..x..a.. */
                /* 0430 */  0x7F, 0xBC, 0xC0, 0xAF, 0x9C, 0x06, 0x0A, 0x12,  /* ........ */
                /* 0438 */  0xE8, 0x59, 0x08, 0x60, 0xFC, 0xFF, 0xFF, 0x2C,  /* .Y.`..., */
                /* 0440 */  0x04, 0x90, 0x71, 0x8D, 0x3A, 0x0B, 0x01, 0xCB,  /* ..q.:... */
                /* 0448 */  0x63, 0x0C, 0x3B, 0xAD, 0x24, 0xF8, 0xFF, 0x3F,  /* c.;.$..? */
                /* 0450 */  0x0B, 0x01, 0x9F, 0x5C, 0x46, 0x0E, 0x42, 0x98,  /* ...\F.B. */
                /* 0458 */  0x88, 0x6F, 0x05, 0x1F, 0x33, 0x01, 0xA5, 0xE7,  /* .o..3... */
                /* 0460 */  0xA0, 0x17, 0x77, 0x63, 0x04, 0x7E, 0x91, 0x78,  /* ..wc.~.x */
                /* 0468 */  0xCC, 0x64, 0x47, 0x4D, 0xC3, 0x3C, 0x0B, 0x19,  /* .dGM.<.. */
                /* 0470 */  0xEF, 0x30, 0xCE, 0xE0, 0x09, 0xDE, 0x93, 0x7F,  /* .0...... */
                /* 0478 */  0x16, 0x62, 0x60, 0xC7, 0x18, 0xEC, 0x51, 0xC8,  /* .b`...Q. */
                /* 0480 */  0xA0, 0x06, 0x8F, 0x1D, 0x22, 0x4C, 0xA0, 0x67,  /* ...."L.g */
                /* 0488 */  0x21, 0x16, 0x6A, 0xDC, 0x3A, 0x7F, 0xF8, 0x2C,  /* !.j.:.., */
                /* 0490 */  0x04, 0xBC, 0xFF, 0xFF, 0x67, 0x21, 0xC0, 0xD3,  /* ....g!.. */
                /* 0498 */  0x61, 0xC3, 0x67, 0x0D, 0xF0, 0x0C, 0xDF, 0xA3,  /* a.g..... */
                /* 04A0 */  0x3A, 0x87, 0xC7, 0x63, 0xE0, 0x92, 0x55, 0xC7,  /* :..c..U. */
                /* 04A8 */  0x09, 0x83, 0xE5, 0x5E, 0xA7, 0x6C, 0x9C, 0x61,  /* ...^.l.a */
                /* 04B0 */  0xE8, 0x20, 0xAC, 0x0E, 0x48, 0xC3, 0xC1, 0xDC,  /* . ..H... */
                /* 04B8 */  0x43, 0x0E, 0xE2, 0x7C, 0xD8, 0x40, 0xAD, 0x08,  /* C..|.@.. */
                /* 04C0 */  0x4E, 0xC7, 0x24, 0x0F, 0xDA, 0x5A, 0x28, 0xA4,  /* N.$..Z(. */
                /* 04C8 */  0x80, 0x46, 0x03, 0x32, 0xBC, 0x33, 0x9F, 0x96,  /* .F.2.3.. */
                /* 04D0 */  0x28, 0x88, 0x01, 0x7D, 0x02, 0xB2, 0x8D, 0x73,  /* (..}...s */
                /* 04D8 */  0x00, 0x6A, 0x2F, 0x9A, 0x02, 0x39, 0xDA, 0x60,  /* .j/..9.` */
                /* 04E0 */  0xF4, 0x5F, 0x16, 0xE8, 0x6C, 0x7C, 0x0D, 0xE0,  /* ._..l|.. */
                /* 04E8 */  0x1A, 0x20, 0x74, 0x30, 0x30, 0xB4, 0xD5, 0xDC,  /* . t00... */
                /* 04F0 */  0x62, 0x50, 0x60, 0xC6, 0x7F, 0x70, 0x31, 0x81,  /* bP`..p1. */
                /* 04F8 */  0x8F, 0x2E, 0xF8, 0xB3, 0x00, 0xEE, 0xFF, 0x3F,  /* .......? */
                /* 0500 */  0x5C, 0x8F, 0xF6, 0x5D, 0xA0, 0xEA, 0xC9, 0xEA,  /* \..].... */
                /* 0508 */  0x8A, 0x60, 0x75, 0x97, 0x17, 0x08, 0x33, 0x32,  /* .`u...32 */
                /* 0510 */  0x41, 0x7D, 0x07, 0x02, 0x50, 0x00, 0xF9, 0x0E,  /* A}..P... */
                /* 0518 */  0xE0, 0xA3, 0xD3, 0x73, 0x00, 0x9B, 0x48, 0x88,  /* ...s..H. */
                /* 0520 */  0x30, 0xD1, 0x8C, 0x8E, 0x98, 0x30, 0x2A, 0xFA,  /* 0....0*. */
                /* 0528 */  0x84, 0x29, 0x88, 0x27, 0xEC, 0x58, 0x13, 0x46,  /* .).'.X.F */
                /* 0530 */  0xCF, 0xC4, 0x77, 0x1B, 0x36, 0x62, 0x4C, 0x88,  /* ..w.6bL. */
                /* 0538 */  0xDB, 0x06, 0xB4, 0x09, 0x06, 0xF5, 0x3D, 0x08,  /* ......=. */
                /* 0540 */  0xD6, 0x90, 0xF9, 0x58, 0x7C, 0x67, 0xC0, 0x4D,  /* ...X|g.M */
                /* 0548 */  0x19, 0x8C, 0x73, 0x62, 0xD7, 0x04, 0x0B, 0x9C,  /* ..sb.... */
                /* 0550 */  0x33, 0xC8, 0xE1, 0x31, 0xD7, 0x2F, 0x7E, 0x5B,  /* 3..1./~[ */
                /* 0558 */  0xF2, 0xE8, 0xF8, 0x41, 0xC1, 0x37, 0x1C, 0x86,  /* ...A.7.. */
                /* 0560 */  0xFD, 0x30, 0xE6, 0x19, 0xBD, 0x8A, 0xF9, 0xE6,  /* .0...... */
                /* 0568 */  0x86, 0x81, 0xF5, 0x78, 0x39, 0xAC, 0xD1, 0xC2,  /* ...x9... */
                /* 0570 */  0x1E, 0xDA, 0xAB, 0x87, 0xCF, 0x2D, 0x3E, 0x4F,  /* .....->O */
                /* 0578 */  0x18, 0x23, 0xAC, 0x2F, 0x2C, 0xE0, 0x00, 0xFC,  /* .#./,... */
                /* 0580 */  0xFF, 0xBF, 0x5A, 0xC1, 0xBE, 0x6B, 0x80, 0xE7,  /* ..Z..k.. */
                /* 0588 */  0x26, 0xE4, 0xBB, 0x06, 0xC0, 0xDA, 0xFF, 0xFF,  /* &....... */
                /* 0590 */  0x5D, 0x03, 0xFE, 0x35, 0xC1, 0x77, 0x0D, 0xE0,  /* ]..5.w.. */
                /* 0598 */  0x3D, 0x74, 0xDF, 0x35, 0x80, 0x6B, 0xF6, 0xBB,  /* =t.5.k.. */
                /* 05A0 */  0x06, 0xEA, 0x18, 0x60, 0x85, 0x77, 0x0D, 0x68,  /* ...`.w.h */
                /* 05A8 */  0xB7, 0xB4, 0x57, 0xB4, 0x87, 0x2A, 0x6B, 0xBA,  /* ..W..*k. */
                /* 05B0 */  0x6C, 0xA0, 0xD4, 0x5C, 0x36, 0x00, 0x6D, 0xFF,  /* l..\6.m. */
                /* 05B8 */  0xFF, 0xCB, 0x06, 0xB0, 0x91, 0x32, 0x61, 0x54,  /* .....2aT */
                /* 05C0 */  0xF8, 0x09, 0x53, 0x10, 0x4F, 0xD8, 0xC1, 0x2E,  /* ..S.O... */
                /* 05C8 */  0x1B, 0xA0, 0x88, 0x71, 0xD9, 0x00, 0xFD, 0xD8,  /* ...q.... */
                /* 05D0 */  0x5E, 0x36, 0x80, 0xC1, 0x3D, 0x81, 0xDF, 0x36,  /* ^6..=..6 */
                /* 05D8 */  0x80, 0x37, 0xA4, 0x6F, 0x1B, 0xC0, 0xF4, 0xFF,  /* .7.o.... */
                /* 05E0 */  0x0F, 0x31, 0xFF, 0x6D, 0x03, 0xC5, 0x61, 0x95,  /* .1.m..a. */
                /* 05E8 */  0xB7, 0x0D, 0x88, 0x87, 0x77, 0x46, 0x60, 0x55,  /* ....wF`U */
                /* 05F0 */  0xD7, 0x0D, 0x94, 0x9E, 0xEB, 0x06, 0x40, 0x02,  /* ......@. */
                /* 05F8 */  0x31, 0x13, 0x46, 0xC5, 0x9F, 0x30, 0x05, 0xF1,  /* 1.F..0.. */
                /* 0600 */  0x84, 0x1D, 0xED, 0xBA, 0x01, 0x8A, 0x20, 0xD7,  /* ...... . */
                /* 0608 */  0x0D, 0xD0, 0xCF, 0xEB, 0x94, 0xC1, 0xFA, 0xFF,  /* ........ */
                /* 0610 */  0xBF, 0x6E, 0x60, 0x2F, 0x0A, 0x98, 0xFB, 0x06,  /* .n`/.... */
                /* 0618 */  0xF0, 0x86, 0xE5, 0xF7, 0x0D, 0xC0, 0xC7, 0xE5,  /* ........ */
                /* 0620 */  0x1B, 0x73, 0xDF, 0x00, 0x6C, 0xFE, 0xFF, 0xEF,  /* .s..l... */
                /* 0628 */  0x1B, 0x00, 0x13, 0x2E, 0x0A, 0xB8, 0xFB, 0x06,  /* ........ */
                /* 0630 */  0xF0, 0xBE, 0x48, 0xFB, 0xBE, 0x01, 0x5C, 0x83,  /* ..H...\. */
                /* 0638 */  0x49, 0xF8, 0xFF, 0xDF, 0xF5, 0xE8, 0x0B, 0x40,  /* I......@ */
                /* 0640 */  0x51, 0x60, 0x50, 0x43, 0xF2, 0x99, 0x00, 0x3F,  /* Q`PC...? */
                /* 0648 */  0xBA, 0x83, 0x3B, 0xA6, 0xE0, 0x4C, 0x12, 0x1C,  /* ..;..L.. */
                /* 0650 */  0x6A, 0xE0, 0xBE, 0x02, 0x3C, 0xCD, 0x9F, 0xD6,  /* j...<... */
                /* 0658 */  0x7B, 0xBD, 0xE7, 0xF1, 0x24, 0x10, 0x92, 0x1D,  /* {...$... */
                /* 0660 */  0x61, 0x7C, 0x6C, 0x43, 0x9C, 0x0C, 0xC8, 0x41,  /* a|lC...A */
                /* 0668 */  0xDC, 0x47, 0xF7, 0x88, 0xEF, 0xE1, 0x86, 0x49,  /* .G.....I */
                /* 0670 */  0xE0, 0x21, 0x33, 0x34, 0x0E, 0x8D, 0x1D, 0x86,  /* .!34.... */
                /* 0678 */  0xEF, 0x02, 0xC1, 0x0E, 0xE2, 0x30, 0xCE, 0xD7,  /* .....0.. */
                /* 0680 */  0x04, 0x9E, 0xD0, 0x83, 0xC0, 0x7B, 0xF9, 0xA3,  /* .....{.. */
                /* 0688 */  0x41, 0xF1, 0x77, 0x03, 0x4A, 0x60, 0xB8, 0xD0,  /* A.w.J`.. */
                /* 0690 */  0x98, 0x91, 0xFA, 0x6C, 0xFF, 0x8E, 0x70, 0x24,  /* ...l..p$ */
                /* 0698 */  0x26, 0xB0, 0x7B, 0x48, 0x59, 0x13, 0xA0, 0xF1,  /* &.{HY... */
                /* 06A0 */  0x96, 0x43, 0x20, 0x7A, 0xC3, 0x91, 0x2D, 0x14,  /* .C z..-. */
                /* 06A8 */  0xCD, 0x2D, 0xCA, 0xFB, 0x42, 0x14, 0x3B, 0x43,  /* .-..B.;C */
                /* 06B0 */  0x10, 0x46, 0x94, 0x60, 0x41, 0x9E, 0xD6, 0x62,  /* .F.`A..b */
                /* 06B8 */  0x45, 0x79, 0x66, 0x37, 0x42, 0xC4, 0x10, 0xAF,  /* Eyf7B... */
                /* 06C0 */  0x0C, 0x81, 0x5E, 0x12, 0xC2, 0x07, 0x79, 0xEC,  /* ..^...y. */
                /* 06C8 */  0x89, 0xD3, 0xFE, 0x20, 0x88, 0xF8, 0x17, 0x82,  /* ... .... */
                /* 06D0 */  0x3C, 0x80, 0x28, 0xD2, 0x68, 0x50, 0xE7, 0x06,  /* <.(.hP.. */
                /* 06D8 */  0x8F, 0xDD, 0x87, 0x10, 0x5F, 0xFE, 0x7D, 0xB8,  /* ...._.}. */
                /* 06E0 */  0xF7, 0xE8, 0x0E, 0xEE, 0x45, 0xFE, 0xA0, 0x3D,  /* ....E..= */
                /* 06E8 */  0x3C, 0x76, 0xC2, 0xF0, 0x41, 0x03, 0x8E, 0x6B,  /* <v..A..k */
                /* 06F0 */  0x40, 0x4D, 0xFF, 0x19, 0x01, 0x2C, 0x97, 0x7F,  /* @M...,.. */
                /* 06F8 */  0xF8, 0xE3, 0xF1, 0x3D, 0xC1, 0xF3, 0x39, 0xE1,  /* ...=..9. */
                /* 0700 */  0x04, 0x96, 0x3F, 0x08, 0xD4, 0x71, 0x84, 0xCF,  /* ..?..q.. */
                /* 0708 */  0xF3, 0x85, 0xC3, 0x90, 0xCF, 0x02, 0x87, 0xC5,  /* ........ */
                /* 0710 */  0xC4, 0x0A, 0xF8, 0xFF, 0x9F, 0x4C, 0xD8, 0x78,  /* .....L.x */
                /* 0718 */  0xC0, 0x7F, 0x0F, 0x79, 0xFD, 0xF7, 0xCD, 0xC0,  /* ...y.... */
                /* 0720 */  0xF3, 0x35, 0xC1, 0x88, 0x10, 0x72, 0x32, 0x1E,  /* .5...r2. */
                /* 0728 */  0x34, 0xE8, 0xD9, 0xF8, 0x80, 0xE1, 0xEB, 0x09,  /* 4....... */
                /* 0730 */  0x3B, 0x77, 0x70, 0x51, 0xE7, 0x0E, 0xD4, 0xD1,  /* ;wpQ.... */
                /* 0738 */  0xC1, 0xA7, 0x06, 0x76, 0xB3, 0xC1, 0x1C, 0xB7,  /* ...v.... */
                /* 0740 */  0xF9, 0x59, 0x03, 0xFC, 0x23, 0x84, 0x7F, 0x7B,  /* .Y..#..{ */
                /* 0748 */  0xF0, 0xBC, 0x7C, 0x65, 0x78, 0x75, 0x48, 0xE0,  /* ..|exuH. */
                /* 0750 */  0x90, 0x23, 0x44, 0x8F, 0xCB, 0x23, 0xC4, 0x9C,  /* .#D..#.. */
                /* 0758 */  0x6F, 0x30, 0x43, 0x04, 0xD7, 0x59, 0x00, 0x1C,  /* o0C..Y.. */
                /* 0760 */  0x43, 0x04, 0x3E, 0x67, 0x4C, 0x9F, 0x71, 0x60,  /* C.>gL.q` */
                /* 0768 */  0xFE, 0xFF, 0xCF, 0x38, 0xEC, 0xD2, 0xC3, 0x07,  /* ...8.... */
                /* 0770 */  0x6A, 0x78, 0x13, 0xF8, 0xFE, 0x8C, 0x3B, 0xD2,  /* jx....;. */
                /* 0778 */  0x18, 0x9C, 0x1F, 0x33, 0x1E, 0x76, 0x18, 0xF8,  /* ...3.v.. */
                /* 0780 */  0xFB, 0x8E, 0x67, 0x70, 0x34, 0x3E, 0xA0, 0x18,  /* ..gp4>.. */
                /* 0788 */  0x21, 0xF8, 0x73, 0xC9, 0x73, 0x8A, 0x35, 0x0F,  /* !.s.s.5. */
                /* 0790 */  0x52, 0x33, 0x7A, 0x67, 0x38, 0x04, 0x76, 0xB3,  /* R3zg8.v. */
                /* 0798 */  0xC2, 0x1D, 0x38, 0x3C, 0x04, 0x3E, 0x80, 0x56,  /* ..8<.>.V */
                /* 07A0 */  0x27, 0x47, 0x4E, 0x3F, 0xA7, 0x84, 0x1B, 0x3E,  /* 'GN?...> */
                /* 07A8 */  0xBF, 0x0A, 0x60, 0x0E, 0x41, 0x38, 0x85, 0x36,  /* ..`.A8.6 */
                /* 07B0 */  0x7D, 0x6A, 0x34, 0x6A, 0xD5, 0xA0, 0x4C, 0x8D,  /* }j4j..L. */
                /* 07B8 */  0x32, 0x0D, 0x6A, 0xF5, 0xA9, 0xD4, 0x98, 0xB1,  /* 2.j..... */
                /* 07C0 */  0x0B, 0x8B, 0x03, 0xBE, 0x02, 0x74, 0x1C, 0xB0,  /* .....t.. */
                /* 07C8 */  0x3C, 0x0A, 0x1D, 0xC1, 0xC8, 0x9B, 0x40, 0x20,  /* <.....@  */
                /* 07D0 */  0x0E, 0x0B, 0x42, 0x23, 0xBD, 0x71, 0x04, 0x62,  /* ..B#.q.b */
                /* 07D8 */  0xC9, 0xEF, 0x2F, 0x81, 0x58, 0xEE, 0x03, 0x45,  /* ../.X..E */
                /* 07E0 */  0x20, 0x0E, 0x68, 0x02, 0x9C, 0xAA, 0x00, 0xA7,  /*  .h..... */
                /* 07E8 */  0xAF, 0x01, 0x81, 0x38, 0x32, 0x08, 0x15, 0xFA,  /* ...82... */
                /* 07F0 */  0x35, 0x13, 0x88, 0x63, 0x82, 0xD0, 0x50, 0x3E,  /* 5..c..P> */
                /* 07F8 */  0x40, 0x98, 0xF4, 0x17, 0x80, 0x00, 0x89, 0x11,  /* @....... */
                /* 0800 */  0x10, 0x16, 0xEE, 0xE5, 0x20, 0x10, 0x4B, 0x7B,  /* .... .K{ */
                /* 0808 */  0x2D, 0x08, 0xC4, 0x42, 0xAC, 0x80, 0xB0, 0xB8,  /* -..B.... */
                /* 0810 */  0x20, 0x34, 0x9C, 0x16, 0x10, 0x26, 0xC9, 0x0C,  /*  4...&.. */
                /* 0818 */  0x08, 0x0B, 0x04, 0x42, 0xE5, 0x3F, 0xD3, 0x04,  /* ...B.?.. */
                /* 0820 */  0x62, 0x91, 0x6E, 0x00, 0xE9, 0xBA, 0x05, 0xE2,  /* b.n..... */
                /* 0828 */  0x20, 0x7A, 0x40, 0x98, 0x0C, 0x3F, 0x20, 0x2C,  /*  z@..? , */
                /* 0830 */  0x34, 0x08, 0x8D, 0xF6, 0x6C, 0x10, 0x20, 0x31,  /* 4...l. 1 */
                /* 0838 */  0x04, 0xC2, 0xE2, 0x3B, 0x02, 0x61, 0xE2, 0xDF,  /* ...;.a.. */
                /* 0840 */  0x44, 0x02, 0x71, 0x4A, 0x4B, 0x10, 0x37, 0xA5,  /* D.qJK.7. */
                /* 0848 */  0x01, 0x06, 0x11, 0x90, 0x93, 0x6A, 0x02, 0x62,  /* .....j.b */
                /* 0850 */  0xB9, 0x41, 0x34, 0x24, 0xF2, 0xB0, 0x10, 0x90,  /* .A4$.... */
                /* 0858 */  0x93, 0x82, 0x68, 0xC0, 0xC4, 0x14, 0x90, 0xFF,  /* ..h..... */
                /* 0860 */  0xFF, 0x43, 0x13, 0x88, 0x80, 0x9C, 0xCA, 0x15,  /* .C...... */
                /* 0868 */  0x10, 0x8B, 0x08, 0x22, 0x20, 0x27, 0x7B, 0x52,  /* ..." '{R */
                /* 0870 */  0x09, 0xC8, 0x39, 0x41, 0x74, 0x04, 0x20, 0xBA,  /* ..9At. . */
                /* 0878 */  0x80, 0x58, 0x3E, 0x10, 0x01, 0x39, 0x96, 0x2F,  /* .X>..9./ */
                /* 0880 */  0x20, 0x16, 0x12, 0x44, 0x40, 0x4E, 0xF4, 0xF3,  /*  ..D@N.. */
                /* 0888 */  0x09, 0x44, 0xE2, 0x81, 0x68, 0x10, 0xE4, 0x3F,  /* .D..h..? */
                /* 0890 */  0x21, 0x20, 0x67, 0x04, 0x11, 0x10, 0x79, 0x12,  /* ! g...y. */
                /* 0898 */  0x05, 0x21, 0x9A, 0x3E, 0x62, 0x02, 0x71, 0x6A,  /* .!.>b.qj */
                /* 08A0 */  0x10, 0x9A, 0xEC, 0x27, 0x14, 0x84, 0xFC, 0xFF,  /* ...'.... */
                /* 08A8 */  0x01                                             /* . */
            })
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x01, 0x00000410, 0x06) {}
        Processor (CPU1, 0x02, 0x00000410, 0x06) {}
        Processor (CPU2, 0x03, 0x00000410, 0x06) {}
        Processor (CPU3, 0x04, 0x00000410, 0x06) {}
        Processor (CPU4, 0x05, 0x00000410, 0x06) {}
        Processor (CPU5, 0x06, 0x00000410, 0x06) {}
        Processor (CPU6, 0x07, 0x00000410, 0x06) {}
        Processor (CPU7, 0x08, 0x00000410, 0x06) {}
    }

    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 3, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        If ((Arg0 == 0x04))
        {
            P80D = ((P80D & Zero) | Arg1)
        }

        If ((Arg2 == Zero)) {}
        If ((Arg2 == One))
        {
            P80H = P80D /* \P80D */
        }
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8, 
        SSDP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        \_SB.PCI0.LPCB.EC0.RFLE = Zero
        P80D = Zero
        P8XH (Zero, Arg0, Zero)
        TRAP (TRTI, 0x22)
        If ((Arg0 == 0x03))
        {
            P8XH (0x04, 0x53, Zero)
            P8XH (0x04, 0x53, One)
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x1E)
            }
        }

        If ((Arg0 == 0x04))
        {
            P8XH (0x04, 0x54, Zero)
            P8XH (0x04, 0x54, One)
            CMSW (0x6E, 0x6E)
        }

        If (ECON)
        {
            \_SB.PCI0.LPCB.EC0.PWOL = LAWK /* \LAWK */
        }

        If ((Arg0 == 0x03))
        {
            If (ECON)
            {
                \_SB.PCI0.LPCB.EC0.PSKB = KBWK /* \KBWK */
                \_SB.PCI0.LPCB.EC0.PSTP = MUWK /* \MUWK */
            }
        }
        Else
        {
            If (ECON)
            {
                \_SB.PCI0.LPCB.EC0.PSKB = Zero
                \_SB.PCI0.LPCB.EC0.PSTP = Zero
            }
        }
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        P80D = Zero
        If (NEXP)
        {
            If ((OSCC & 0x02))
            {
                \_SB.PCI0.NHPG ()
            }

            If ((OSCC & 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If ((Arg0 == 0x03))
        {
            P8XH (0x04, 0xE3, Zero)
            P8XH (0x04, 0xE3, One)
            SSDP = 0xF3
            SSMP = 0xC5
            \_SB.PCI0.LPCB.EC0.RTCW = Zero
            If ((Zero == ACTT)) {}
            If ((ED3E == One))
            {
                If (!IGDS)
                {
                    Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                }
            }

            If (ECON)
            {
                If ((\_SB.PCI0.LPCB.EC0.BACR == One))
                {
                    Notify (\_SB.BAT0, 0x80) // Status Change
                }

                If ((\_SB.PCI0.LPCB.EC0.BACR == Zero)) {}
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x14)
            }

            If ((PMEE == One))
            {
                PMEN = One
            }

            If ((OSYS == 0x07D2))
            {
                If ((CFGD & One))
                {
                    If ((\_PR.CPU0._PPC > Zero))
                    {
                        \_PR.CPU0._PPC -= One
                        PNOT ()
                        \_PR.CPU0._PPC += One
                        PNOT ()
                    }
                    Else
                    {
                        \_PR.CPU0._PPC += One
                        PNOT ()
                        \_PR.CPU0._PPC -= One
                        PNOT ()
                    }
                }
            }

            Local2 = \_SB.PCI0.LPCB.EC0.SRAD
            If ((Local2 <= 0x03))
            {
                CUPS = (PSTN - One)
            }

            If ((Local2 <= 0x02))
            {
                CUPS = 0x02
            }

            If ((Local2 <= One))
            {
                CUPS = Zero
            }

            If ((\_SB.PCI0.LPCB.EC0.SW2S == Zero))
            {
                \_SB.PCI0.LPCB.EC0.SRAD = Zero
            }

            PSSC (CUPS)
            If ((RP1D == Zero))
            {
                Notify (\_SB.PCI0.RP01, Zero) // Bus Check
            }

            If ((RP2D == Zero))
            {
                Notify (\_SB.PCI0.RP02, Zero) // Bus Check
            }

            If ((RP3D == Zero))
            {
                Notify (\_SB.PCI0.RP03, Zero) // Bus Check
            }

            If ((RP4D == Zero))
            {
                Notify (\_SB.PCI0.RP04, Zero) // Bus Check
            }

            If ((RP5D == Zero))
            {
                Notify (\_SB.PCI0.RP05, Zero) // Bus Check
            }

            If ((RP8D == Zero))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                }
            }
        }

        If ((Arg0 == 0x04))
        {
            P8XH (0x04, 0xE4, Zero)
            P8XH (0x04, 0xE4, One)
            CMSW (0x6E, Zero)
        }

        \_SB.PCI0.ACEL.INIT ()
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            Local0 = CMSR (0x70)
            If ((Local0 == One))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        If ((ED3E == One))
        {
            If (!IGDS)
            {
                If ((One & \_SB.PCI0.LPCB.EC0.SW2S))
                {
                    \_SB.PCI0.RP05.J380.D3EF = Zero
                }
                Else
                {
                    \_SB.PCI0.RP05.J380.D3EF = 0x40
                }
            }
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }

            If ((PDC4 & 0x08))
            {
                Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                If ((PDC4 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU4, 0x81) // C-State Change
                }
            }

            If ((PDC5 & 0x08))
            {
                Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                If ((PDC5 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU5, 0x81) // C-State Change
                }
            }

            If ((PDC6 & 0x08))
            {
                Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                If ((PDC6 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU6, 0x81) // C-State Change
                }
            }

            If ((PDC7 & 0x08))
            {
                Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                If ((PDC7 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU7, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == TRTP))
        {
            TRP0 = Zero
        }

        If ((Arg0 == TRTD))
        {
            DTSF = Arg1
            TRPD = Zero
            Return (DTSF) /* \DTSF */
        }

        If ((Arg0 == TRTI))
        {
            TRPH = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSYS = 0x07D0
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                    ^LPCB.EC0.ECOS = One
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }
            }
        }

        Method (NHPG, 0, Serialized)
        {
            ^RP01.HPEX = Zero
            ^RP02.HPEX = Zero
            ^RP03.HPEX = Zero
            ^RP04.HPEX = Zero
            ^RP05.HPEX = Zero
            ^RP08.HPEX = Zero
            ^RP01.HPSX = One
            ^RP02.HPSX = One
            ^RP03.HPSX = One
            ^RP04.HPSX = One
            ^RP05.HPSX = One
            ^RP08.HPSX = One
        }

        Method (NPME, 0, Serialized)
        {
            ^RP01.PMEX = Zero
            ^RP02.PMEX = Zero
            ^RP03.PMEX = Zero
            ^RP04.PMEX = Zero
            ^RP05.PMEX = Zero
            ^RP08.PMEX = Zero
            ^RP01.PMSX = One
            ^RP02.PMSX = One
            ^RP03.PMSX = One
            ^RP04.PMSX = One
            ^RP05.PMSX = One
            ^RP08.PMSX = One
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
    }

    OperationRegion (CMS1, SystemIO, 0x72, 0x02)
    Field (CMS1, ByteAcc, NoLock, Preserve)
    {
        CMSI,   8, 
        CMSD,   8
    }

    Method (CMSW, 2, NotSerialized)
    {
        CMSI = Arg0
        CMSD = Arg1
    }

    Method (CMSR, 1, NotSerialized)
    {
        CMSI = Arg0
        Return (CMSD) /* \CMSD */
    }

    OperationRegion (PLID, SystemMemory, 0x000FFFA0, 0x04)
    Field (PLID, AnyAcc, NoLock, Preserve)
    {
        LCDD,   32
    }

    Method (GDNV, 0, NotSerialized)
    {
        NVDF = Zero
        Notify (\_SB.PCI0.P0P3.VGA, 0xCB) // Hardware-Specific
        Notify (\_SB.PCI0.P0P2.VGA, 0xCB) // Hardware-Specific
        Local0 = Zero
        While (((NVDF == Zero) && (Local0 < 0x0A)))
        {
            Sleep (0x64)
            Local0++
        }
    }

    Scope (_TZ)
    {
        Name (TPTM, 0x4B)
        Name (AS85, 0x53)
        Name (AS90, 0x58)
        Name (AS00, 0x62)
        Name (AS05, 0x67)
        Name (TPPP, 0x41)
        Name (OT01, Buffer (0x03)
        {
             0x61, 0x5F, 0x5A                                 /* a_Z */
        })
        Name (OT02, Buffer (0x03)
        {
             0x55, 0x52, 0x4B                                 /* URK */
        })
        Name (OT03, Buffer (0x03)
        {
             0x66, 0x64, 0x5F                                 /* fd_ */
        })
        Name (OT04, Buffer (0x03)
        {
             0x57, 0x55, 0x50                                 /* WUP */
        })
        ThermalZone (TZ01)
        {
            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((OSYS >= 0x07D6))
                {
                    If ((TJMX == 0x64))
                    {
                        Return (0x0EC6)
                    }

                    If ((TJMX == 0x55))
                    {
                        Return (0x0E30)
                    }

                    If ((TJMX == 0x69))
                    {
                        Return (0x0EF8)
                    }

                    If ((TJMX == 0x5A))
                    {
                        Return (0x0E62)
                    }
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((OSYS < 0x07D6))
                {
                    If ((TJMX == 0x64))
                    {
                        Return (0x0EC6)
                    }

                    If ((TJMX == 0x55))
                    {
                        Return (0x0E30)
                    }

                    If ((TJMX == 0x69))
                    {
                        Return (0x0EF8)
                    }

                    If ((TJMX == 0x5A))
                    {
                        Return (0x0E62)
                    }
                }
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                If (ECON)
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.RTMP
                    If ((CTYP == Zero))
                    {
                        OTHD (Local0)
                    }

                    If ((TJMX == 0x64))
                    {
                        If ((Local0 >= 0x69))
                        {
                            Local1 = CMSR (0x72)
                            Local1 = (Local0 | One)
                            CMSW (0x72, Local1)
                        }
                    }

                    If ((TJMX == 0x55))
                    {
                        If ((Local0 >= 0x5A))
                        {
                            Local1 = CMSR (0x72)
                            Local1 = (Local0 | One)
                            CMSW (0x72, Local1)
                        }
                    }

                    If ((TJMX == 0x69))
                    {
                        If ((Local0 >= 0x6E))
                        {
                            Local1 = CMSR (0x72)
                            Local1 = (Local0 | One)
                            CMSW (0x72, Local1)
                        }
                    }

                    If ((TJMX == 0x5A))
                    {
                        If ((Local0 >= 0x5F))
                        {
                            Local1 = CMSR (0x72)
                            Local1 = (Local0 | One)
                            CMSW (0x72, Local1)
                        }
                    }

                    Return ((0x0AAC + (Local0 * 0x0A)))
                }
                Else
                {
                    If ((CTYP == Zero))
                    {
                        OTHD (TPTM)
                    }

                    Return ((0x0AAC + (TPTM * 0x0A)))
                }
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                If (CMPE)
                {
                    Return (Package (0x08)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3, 
                        \_PR.CPU4, 
                        \_PR.CPU5, 
                        \_PR.CPU6, 
                        \_PR.CPU7
                    })
                }

                Return (Package (0x01)
                {
                    \_PR.CPU0
                })
            }

            Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
            {
                If ((OSYS > 0x07D6))
                {
                    CTYP = Arg0
                    \_SB.PCI0.LPCB.EC0.TRPM = Arg0
                }
                Else
                {
                    CTYP = Zero
                    \_SB.PCI0.LPCB.EC0.TRPM = Zero
                }
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    Return ((0x0AAC + (TPPP * 0x0A)))
                }
                Else
                {
                    Local0 = (PPMF & One)
                    If (Local0)
                    {
                        If ((TJMX == 0x64))
                        {
                            Return ((0x0AAC + (AS00 * 0x0A)))
                        }

                        If ((TJMX == 0x55))
                        {
                            Return ((0x0AAC + (AS85 * 0x0A)))
                        }

                        If ((TJMX == 0x69))
                        {
                            Return ((0x0AAC + (AS05 * 0x0A)))
                        }

                        If ((TJMX == 0x5A))
                        {
                            Return ((0x0AAC + (AS90 * 0x0A)))
                        }
                    }
                }
            }

            Name (_TC1, 0x02)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x05)  // _TC2: Thermal Constant 2
            Name (_TSP, 0x32)  // _TSP: Thermal Sampling Period
            Method (OTHD, 1, NotSerialized)
            {
                If ((TJMX == 0x64))
                {
                    Local0 = OT01 /* \_TZ_.OT01 */
                }

                If ((TJMX == 0x55))
                {
                    Local0 = OT02 /* \_TZ_.OT02 */
                }

                If ((TJMX == 0x69))
                {
                    Local0 = OT03 /* \_TZ_.OT03 */
                }

                If ((TJMX == 0x5A))
                {
                    Local0 = OT04 /* \_TZ_.OT04 */
                }

                Local2 = \_SB.PCI0.LPCB.EC0.SRAD
                If ((Arg0 >= DerefOf (Index (Local0, Zero))))
                {
                    If ((Local2 <= 0x03))
                    {
                        THL1 ()
                    }
                }
                Else
                {
                    If ((Arg0 >= DerefOf (Index (Local0, One))))
                    {
                        If ((Local2 <= 0x02))
                        {
                            THL2 ()
                        }
                    }
                    Else
                    {
                        If ((Arg0 <= DerefOf (Index (Local0, 0x02))))
                        {
                            If ((Local2 <= One))
                            {
                                THL3 ()
                            }
                        }
                    }
                }

                CPUT ()
            }

            Method (THL1, 0, NotSerialized)
            {
                THR0 = (PSTN - One)
            }

            Method (THL2, 0, NotSerialized)
            {
                THR0 = 0x02
            }

            Method (THL3, 0, NotSerialized)
            {
                THR0 = Zero
            }

            Name (REGN, "Processor Thermal Zone")
            Name (FMAX, 0x1388)
            Name (FMIN, Zero)
            Method (FRSP, 0, NotSerialized)
            {
                Local2 = Zero
                If (ECON)
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.RPM1
                    Local1 = \_SB.PCI0.LPCB.EC0.RPM2
                    Local1 <<= 0x08
                    Local0 |= Local1
                    If ((Local0 != Zero))
                    {
                        Divide (0x00075300, Local0, Local0, Local2)
                    }
                }

                Return (Local2)
            }

            Method (FSSP, 1, NotSerialized)
            {
                If (ECON)
                {
                    If ((Arg0 != Zero))
                    {
                        \_SB.PCI0.LPCB.EC0.SFAN = Zero
                    }
                    Else
                    {
                        \_SB.PCI0.LPCB.EC0.SFAN = 0x02
                    }
                }
            }
        }
    }

    Name (TBOF, One)
    Method (TSWH, 1, NotSerialized)
    {
        If ((TJMX == 0x69))
        {
            If (((Arg0 >= 0x63) && (TBOF == One)))
            {
                TRAP (TRTI, 0xEE)
                TBOF = Zero
            }

            If (((Arg0 <= 0x61) && (TBOF == Zero)))
            {
                TRAP (TRTI, 0xEF)
                TBOF = One
            }
        }

        If ((TJMX == 0x5A))
        {
            If (((Arg0 >= 0x54) && (TBOF == One)))
            {
                TRAP (TRTI, 0xEE)
                TBOF = Zero
            }

            If (((Arg0 <= 0x52) && (TBOF == Zero)))
            {
                TRAP (TRTI, 0xEF)
                TBOF = One
            }
        }
    }

    Name (Q8E0, Zero)
    Name (THR0, Zero)
    Name (CUPS, Zero)
    Method (CPUT, 0, NotSerialized)
    {
        Local0 = Zero
        Local0 |= (Q8E0 != Zero)
        Local0 |= (THR0 != Zero)
        If (Local0)
        {
            CUPS = Zero
            If ((Q8E0 > CUPS))
            {
                CUPS = Q8E0 /* \Q8E0 */
            }

            If ((THR0 > CUPS))
            {
                CUPS = THR0 /* \THR0 */
            }

            If ((CUPS != \_PR.CPU0._PPC))
            {
                \_PR.CPU0._PPC = CUPS /* \CUPS */
                If (CMPE)
                {
                    Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                }
                Else
                {
                    Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                }
            }
        }
        Else
        {
            If ((\_PR.CPU0._PPC != Zero))
            {
                \_PR.CPU0._PPC = Zero
                If (CMPE)
                {
                    Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                    Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                }
                Else
                {
                    Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                }
            }

            CUPS = Zero
        }
    }

    Method (PSSC, 1, NotSerialized)
    {
        CUPS = Arg0
        THR0 = Arg0
        Q8E0 = Arg0
        \_SB.PCI0.LPCB.EC0.CLOW = Arg0
        CPUT ()
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y10)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y12)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y13)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y14)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y15)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    _Y16)
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y11)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y10._BAS, RBR0)  // _BAS: Base Address
                RBR0 = (^^LPCB.RCBA << 0x0E)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._BAS, TBR0)  // _BAS: Base Address
                TBR0 = TBAB /* \TBAB */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._LEN, TBLN)  // _LEN: Length
                If ((TBAB == Zero))
                {
                    TBLN = Zero
                }

                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._LEN, MBLN)  // _LEN: Length
                    MBLN = Zero
                }
                Else
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._BAS, MBR0)  // _BAS: Base Address
                    MBR0 = (MHBR << 0x0E)
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._BAS, DBR0)  // _BAS: Base Address
                DBR0 = (DIBR << 0x0C)
                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    DBR0 = (DIBI << 0x0C)
                }

                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._LEN, EBLN)  // _LEN: Length
                    EBLN = Zero
                }
                Else
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._BAS, EBR0)  // _BAS: Base Address
                    EBR0 = (EPBR << 0x0C)
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._BAS, XBR0)  // _BAS: Base Address
                XBR0 = (^^^CPBG.IMCH.PXBR << 0x14)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._LEN, XSZ0)  // _LEN: Length
                XSZ0 = (0x10000000 >> ^^^CPBG.IMCH.PXSZ) /* \_SB_.CPBG.IMCH.PXSZ */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y16._BAS, VTB0)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y16._LEN, VTLN)  // _LEN: Length
                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    If ((PNHM >= 0x000106E1))
                    {
                        If (^^IO10.VTEN)
                        {
                            VTB0 = (^^IO10.VTBA << 0x0C)
                        }
                        Else
                        {
                            VTLN = Zero
                        }
                    }
                    Else
                    {
                        If (^^IIO0.VTEN)
                        {
                            VTB0 = (^^IIO0.VTBA << 0x0C)
                        }
                        Else
                        {
                            VTLN = Zero
                        }
                    }
                }
                Else
                {
                    If (ADVE)
                    {
                        VTB0 = (ADVT << 0x0C)
                    }
                    Else
                    {
                        VTLN = Zero
                    }
                }

                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Scope (\)
    {
        OperationRegion (IO_T, SystemIO, 0x0800, 0x10)
        Field (IO_T, ByteAcc, NoLock, Preserve)
        {
            TRPI,   16, 
            Offset (0x04), 
            Offset (0x06), 
            Offset (0x08), 
            TRP0,   8, 
            Offset (0x0A), 
            Offset (0x0B), 
            Offset (0x0C), 
            Offset (0x0D), 
            Offset (0x0E), 
            Offset (0x0F), 
            Offset (0x10)
        }

        OperationRegion (IO_D, SystemIO, 0x0810, 0x04)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x20), 
                ,   2, 
            SPST,   1, 
            Offset (0x28), 
                ,   11, 
            PMEN,   1, 
            Offset (0x42), 
                ,   1, 
            GPEC,   1, 
            Offset (0x64), 
                ,   9, 
            SCIS,   1, 
            Offset (0x66)
        }

        OperationRegion (GPIO, SystemIO, GPBS, 0x64)
        Field (GPIO, ByteAcc, NoLock, Preserve)
        {
            GU00,   8, 
            GU01,   8, 
            GU02,   8, 
            GU03,   8, 
            GIO0,   8, 
            GIO1,   8, 
            GIO2,   8, 
            GIO3,   8, 
            Offset (0x0C), 
            GL00,   8, 
            HLED,   1, 
            Offset (0x0E), 
            GL02,   8, 
                ,   3, 
            GP27,   1, 
            GP28,   1, 
            Offset (0x10), 
            Offset (0x18), 
            GB00,   8, 
            GB01,   8, 
            GB02,   8, 
            GB03,   8, 
            Offset (0x2C), 
            GIV0,   8, 
            GIV1,   8, 
            GIV2,   8, 
            GIV3,   8, 
            GU04,   8, 
            GU05,   8, 
            GU06,   8, 
            GU07,   8, 
            GIO4,   8, 
            GIO5,   8, 
            GIO6,   8, 
            GIO7,   8, 
                ,   5, 
                ,   1, 
            Offset (0x39), 
            GL05,   8, 
            GL06,   8, 
            GL07,   8, 
            Offset (0x40), 
            GU08,   8, 
            GU09,   8, 
            GU0A,   8, 
            GU0B,   8, 
            GIO8,   8, 
            GIO9,   8, 
            GIOA,   8, 
            GIOB,   8, 
            GL08,   8, 
            GL09,   8, 
            GL0A,   8, 
            GL0B,   8
        }

        OperationRegion (RCRB, SystemMemory, SRCB, 0x4000)
        Field (RCRB, DWordAcc, Lock, Preserve)
        {
            Offset (0x1000), 
            Offset (0x3000), 
            Offset (0x3404), 
            HPAS,   2, 
                ,   5, 
            HPAE,   1, 
            Offset (0x3418), 
                ,   1, 
                ,   1, 
            SATD,   1, 
            SMBD,   1, 
            HDAD,   1, 
            Offset (0x341A), 
            RP1D,   1, 
            RP2D,   1, 
            RP3D,   1, 
            RP4D,   1, 
            RP5D,   1, 
            RP6D,   1, 
            RP7D,   1, 
            RP8D,   1
        }

        Method (GPI0, 4, NotSerialized)
        {
            If (((Arg0 | Arg1) == Zero))
            {
                Return (0xFFFFFFFF)
            }
            Else
            {
                If (((Arg0 == Zero) & (Arg1 == One)))
                {
                    Return (0x0384)
                }
            }

            Return ((0x1E * (0x09 - (Arg2 + Arg3))))
        }

        Method (GDMA, 2, NotSerialized)
        {
            If ((Arg0 == One))
            {
                If ((Arg1 == One))
                {
                    Return (0x0F)
                }
            }

            Return (0xFFFFFFFF)
        }

        Method (SFLG, 5, NotSerialized)
        {
            Local0 = Zero
            Local0 |= Arg1
            Local0 |= (Arg0 << One)
            Local0 |= (Arg2 << 0x03)
            Local0 |= (Arg3 << 0x02)
            Local0 |= (Arg4 << 0x04)
            Return (Local0)
        }

        Method (SPIO, 3, NotSerialized)
        {
            Name (PBUF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
            })
            CreateByteField (PBUF, Zero, RCT)
            CreateByteField (PBUF, One, ISP)
            CreateByteField (PBUF, 0x02, FAST)
            CreateByteField (PBUF, 0x03, DMAE)
            CreateByteField (PBUF, 0x04, PIOT)
            If (((Arg0 == Zero) || (Arg0 == 0xFFFFFFFF)))
            {
                Return (PBUF) /* \SPIO.PBUF */
            }

            If ((Arg0 > 0xF0))
            {
                DMAE = One
                PIOT = Zero
            }
            Else
            {
                FAST = One
                If ((Arg1 & 0x02))
                {
                    If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                    {
                        RCT = 0x03
                        ISP = 0x02
                        PIOT = 0x04
                        Return (PBUF) /* \SPIO.PBUF */
                    }

                    If (((Arg0 <= 0xB4) & (Arg2 & One)))
                    {
                        RCT = One
                        ISP = 0x02
                        PIOT = 0x03
                        Return (PBUF) /* \SPIO.PBUF */
                    }
                    Else
                    {
                        RCT = Zero
                        ISP = One
                        PIOT = 0x02
                    }
                }
            }

            Return (PBUF) /* \SPIO.PBUF */
        }

        Method (SDMA, 3, NotSerialized)
        {
            Name (PBUF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            CreateByteField (PBUF, Zero, PCT)
            CreateByteField (PBUF, One, PCB)
            CreateByteField (PBUF, 0x02, UDMT)
            CreateByteField (PBUF, 0x03, UDME)
            CreateByteField (PBUF, 0x04, DMAT)
            If (((Arg0 == Zero) || (Arg0 == 0xFFFFFFFF)))
            {
                Return (PBUF) /* \SDMA.PBUF */
            }

            If ((Arg0 <= 0x78))
            {
                If ((Arg1 & 0x04))
                {
                    UDME = One
                    If (((Arg0 <= 0x0F) & (Arg2 & 0x40)))
                    {
                        UDMT = One
                        PCB = One
                        PCT = One
                        DMAT = 0x06
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x14) & (Arg2 & 0x20)))
                    {
                        UDMT = One
                        PCB = One
                        PCT = One
                        DMAT = 0x05
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                    {
                        PCB = One
                        PCT = 0x02
                        DMAT = 0x04
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                    {
                        PCB = One
                        PCT = One
                        DMAT = 0x03
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                    {
                        PCT = 0x02
                        DMAT = 0x02
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                    {
                        PCT = One
                        DMAT = One
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x78) & (Arg2 & One)))
                    {
                        DMAT = Zero
                    }
                }
            }

            Return (PBUF) /* \SDMA.PBUF */
        }

        Method (SETT, 3, Serialized)
        {
            If ((Arg1 & 0x02))
            {
                If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                {
                    Return (0x0B)
                }

                If (((Arg0 <= 0xB4) && (Arg2 & One)))
                {
                    Return (0x09)
                }
            }

            Return (0x04)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SBUS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
            Field (SMBP, DWordAcc, NoLock, Preserve)
            {
                    ,   2, 
                I2CE,   1
            }

            OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
            Field (SMPB, DWordAcc, NoLock, Preserve)
            {
                    ,   5, 
                SBAR,   11
            }

            OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCON,   8, 
                HCOM,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8, 
                PECR,   8, 
                RXSA,   8, 
                SDAT,   16
            }

            Method (SSXB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRXB, 1, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCON = 0x44
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRB, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = Arg2
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRW, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT1 = (Arg2 & 0xFF)
                DAT0 = ((Arg2 >> 0x08) & 0xFF)
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDW, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (((DAT0 << 0x08) | DAT1))
                }

                Return (0xFFFFFFFF)
            }

            Method (SBLW, 4, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg3
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Index (Arg2, Zero))
                HCON = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    HSTS = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        HBDR = DerefOf (Index (Arg2, Local1))
                    }
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SBLR, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100) {})
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg2
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x54
                Local0 = 0x0FA0
                While ((!(HSTS & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    KILL ()
                    Return (Zero)
                }

                Index (TBUF, Zero) = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                HSTS = 0x80
                Local1 = One
                While ((Local1 < DerefOf (Index (TBUF, Zero))))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    Index (TBUF, Local1) = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                    HSTS = 0x80
                    Local1++
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                }

                Return (Zero)
            }

            Method (STRT, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Local0--
                        Sleep (One)
                        If ((Local0 == Zero))
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (COMP, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (KILL, 0, Serialized)
            {
                HCON |= 0x02
                HSTS |= 0xFF
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            L01C += One
            If (((RP1D == Zero) && \_SB.PCI0.RP01.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP01.PDCX)
                {
                    Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                    SSMP = SMIA /* \SMIA */
                }
                Else
                {
                    \_SB.PCI0.RP01.HPSX = One
                }
            }

            If (((RP2D == Zero) && \_SB.PCI0.RP02.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP02.PDCX)
                {
                    If (\_SB.PCI0.RP02.PDSX)
                    {
                        TRAP (TRTI, 0x0C)
                        Sleep (0x05DC)
                        Notify (\_SB.PCI0.RP02, One) // Device Check
                    }

                    Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                    SSMP = SMIA /* \SMIA */
                }
                Else
                {
                    \_SB.PCI0.RP02.HPSX = One
                }
            }

            If (((RP3D == Zero) && \_SB.PCI0.RP03.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP03.PDCX)
                {
                    Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                    SSMP = SMIA /* \SMIA */
                }
                Else
                {
                    \_SB.PCI0.RP03.HPSX = One
                }
            }

            If (((RP4D == Zero) && \_SB.PCI0.RP04.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP04.PDCX)
                {
                    Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                    SSMP = SMIA /* \SMIA */
                }
                Else
                {
                    \_SB.PCI0.RP04.HPSX = One
                }
            }

            If ((ED3E == One))
            {
                If (!IGDS)
                {
                    If (((RP5D == Zero) && \_SB.PCI0.RP05.HPSX))
                    {
                        Sleep (0x64)
                        If (\_SB.PCI0.RP05.PDCX)
                        {
                            \_SB.PCI0.RP05.PDCX = One
                            \_SB.PCI0.RP05.HPSX = One
                            If (\_SB.PCI0.RP05.PDSX)
                            {
                                TRAP (TRTI, 0x5A)
                                If ((One & \_SB.PCI0.LPCB.EC0.SW2S))
                                {
                                    \_SB.PCI0.RP05.J380.D3EF = Zero
                                }
                            }

                            Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                            If ((\_SB.PCI0.RP05.PDSX == One))
                            {
                                \_SB.PCI0.RP05.APL0 = One
                            }
                            Else
                            {
                                \_SB.PCI0.RP05.APL0 = Zero
                            }
                        }
                        Else
                        {
                            \_SB.PCI0.RP05.HPSX = One
                        }
                    }
                }
            }

            If (((RP8D == Zero) && \_SB.PCI0.RP08.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP08.PDCX)
                {
                    Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                    SSMP = SMIA /* \SMIA */
                    Notify (\_SB.PCI0.RP08.PXSX, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP08.HPSX = One
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            GPEC = Zero
            If (CondRefOf (\_SB.PCI0.IEIT.EITV))
            {
                \_SB.PCI0.IEIT.EITV ()
            }

            If (CondRefOf (TNOT))
            {
                TNOT ()
            }
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            \_SB.PCI0.SBUS.HSTS = 0x20
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L15, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L1D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.P0P2, 0x02) // Device Wake
            Notify (\_SB.PCI0.P0P2.PEGP, 0x02) // Device Wake
            Notify (\_SB.PCI0.P0P3, 0x02) // Device Wake
            Notify (\_SB.PCI0.P0P3.PEGP, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
        }

        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
        }

        Method (_L20, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB6, 0x02) // Device Wake
        }

        Method (_L25, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB7, 0x02) // Device Wake
        }
    }

    OperationRegion (PBIC, PCI_Config, Zero, 0xF0)
    Field (PBIC, DWordAcc, NoLock, Preserve)
    {
        Offset (0x7C), 
        SR0,    32, 
        SR1,    32, 
        SR2,    32, 
        SR3,    32, 
        SR4,    32, 
        SR5,    32, 
        SR6,    32, 
        SR7,    32, 
        SR8,    32, 
        SR9,    32
    }

    OperationRegion (IBUS, PCI_Config, 0xD0, 0xE0)
    Field (IBUS, DWordAcc, NoLock, Preserve)
    {
            ,   26, 
        TOLM,   6, 
            ,   26, 
        TOHM,   38, 
        Offset (0xB0), 
        VTEN,   1, 
            ,   11, 
        VTBA,   20
    }

    Scope (_SB)
    {
        Device (CPBG)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0xFF)  // _UID: Unique ID
            Name (_BBN, 0xFF)  // _BBN: BIOS Bus Number
            Name (_ADR, Zero)  // _ADR: Address
            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, _Y17)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.CPBG._Y17._MIN, PBMN)  // _MIN: Minimum Base Address
                PBMN = ((PELN >> 0x14) - One)
                CreateWordField (BUF0, \_SB.CPBG._Y17._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((PELN >> 0x14) - One)
                Return (BUF0) /* \_SB_.CPBG.BUF0 */
            }

            Device (IMCH)
            {
                Name (_ADR, One)  // _ADR: Address
                OperationRegion (PBUS, PCI_Config, Zero, 0xC0)
                Field (PBUS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                        ,   4, 
                    PM0H,   2, 
                    Offset (0x41), 
                    PM1L,   2, 
                        ,   2, 
                    PM1H,   2, 
                    Offset (0x42), 
                    PM2L,   2, 
                        ,   2, 
                    PM2H,   2, 
                    Offset (0x43), 
                    PM3L,   2, 
                        ,   2, 
                    PM3H,   2, 
                    Offset (0x44), 
                    PM4L,   2, 
                        ,   2, 
                    PM4H,   2, 
                    Offset (0x45), 
                    PM5L,   2, 
                        ,   2, 
                    PM5H,   2, 
                    Offset (0x46), 
                    PM6L,   2, 
                        ,   2, 
                    PM6H,   2, 
                    Offset (0x47), 
                    Offset (0x48), 
                        ,   7, 
                    HENA,   1, 
                    Offset (0x50), 
                    PXEN,   1, 
                    PXSZ,   2, 
                        ,   17, 
                    PXBR,   12
                }
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((S3DS == One))
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : EF
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]                 FACS Address : BF76E000
[028h 0040   4]                 DSDT Address : BF7EC000
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 80
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000450
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 85
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 0039
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 7D
[06Bh 0107   1]        RTC Month Alarm Index : 7E
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000386A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : FB
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000BF76E000
[08Ch 0140   8]                 DSDT Address : 00000000BF7EC000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 00
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000000

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 00 [SystemMemory]
[0ADh 0173   1]                    Bit Width : 00
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000000

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 00 [SystemMemory]
[0D1h 0209   1]                    Bit Width : 00
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000000

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 00 [SystemMemory]
[0DDh 0221   1]                    Bit Width : 00
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000000

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

  0000: 46 41 43 50 F4 00 00 00 04 EF 48 50 51 4F 45 4D  FACP......HPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 4D 53 46 54  SLIC-MPC....MSFT
  0020: 13 00 00 01 00 E0 76 BF 00 C0 7E BF 01 02 09 00  ......v...~.....
  0030: B2 00 00 00 A0 A1 00 80 00 04 00 00 00 00 00 00  ................
  0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  ........P.......
  0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 00 85   ...............
  0060: 65 00 39 00 00 04 10 00 01 03 7D 7E 32 13 00 00  e.9.......}~2...
  0070: A5 86 03 00 01 08 00 01 B2 00 00 00 00 00 00 00  ................
  0080: FB 00 00 00 00 E0 76 BF 00 00 00 00 00 C0 7E BF  ......v.......~.
  0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00F0: 00 00 00 00                                      ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4E
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 4E 48 50 51 4F 45 4D  HPET8....NHPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 4D 53 46 54  SLIC-MPC....MSFT
  0020: 13 00 00 01 01 A2 86 80 00 00 00 00 00 00 D0 FE  ................
  0030: 00 00 00 00 00 80 00 00                          ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 76
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 76 48 50 51 4F 45 4D  MCFG<....vHPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 4D 53 46 54  SLIC-MPC....MSFT
  0020: 13 00 00 01 00 00 00 00 00 00 00 00 00 00 00 E0  ................
  0030: 00 00 00 00 00 00 00 FF 00 00 00 00              ............


RSDP
----
[000h 0000   8]                    Signature : "RSD PTR "
[008h 0008   1]                     Checksum : 4B
[009h 0009   6]                       Oem ID : "HPQOEM"
[00Fh 0015   1]                     Revision : 02
[010h 0016   4]                 RSDT Address : BF7FE0AC
[014h 0020   4]                       Length : 00000024
[018h 0024   8]                 XSDT Address : 00000000BF7FE120
[020h 0032   1]            Extended Checksum : 9D
[021h 0033   3]                     Reserved : 000000

Raw Table Data: Length 36 (0x24)

  0000: 52 53 44 20 50 54 52 20 4B 48 50 51 4F 45 4D 02  RSD PTR KHPQOEM.
  0010: AC E0 7F BF 24 00 00 00 20 E1 7F BF 00 00 00 00  ....$... .......
  0020: 9D 00 00 00                                      ....


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0A
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]       ACPI Table Address   0 : BF7FC000
[028h 0040   4]       ACPI Table Address   1 : BF7FD000
[02Ch 0044   4]       ACPI Table Address   2 : BF7FB000
[030h 0048   4]       ACPI Table Address   3 : BF7FA000
[034h 0052   4]       ACPI Table Address   4 : BF7F9000
[038h 0056   4]       ACPI Table Address   5 : BF7EB000
[03Ch 0060   4]       ACPI Table Address   6 : BF7E8000
[040h 0064   4]       ACPI Table Address   7 : BF7E5000

Raw Table Data: Length 68 (0x44)

  0000: 52 53 44 54 44 00 00 00 01 0A 48 50 51 4F 45 4D  RSDTD.....HPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 20 20 20 20  SLIC-MPC....    
  0020: 13 00 00 01 00 C0 7F BF 00 D0 7F BF 00 B0 7F BF  ................
  0030: 00 A0 7F BF 00 90 7F BF 00 B0 7E BF 00 80 7E BF  ..........~...~.
  0040: 00 50 7E BF                                      .P~.


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F9
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "SLIC"
[020h 0032   4]        Asl Compiler Revision : 000F4240


[024h 0036   4]                Subtable Type : 00000000 [Public Key Structure]
[028h 0040   4]                       Length : 0000009C

[02Ch 0044   1]                     Key Type : 06
[02Dh 0045   1]                      Version : 02
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]                    Algorithm : 00002400
[034h 0052   4]                        Magic : "RSA1"
[038h 0056   4]                    BitLength : 00000400
[03Ch 0060   4]                     Exponent : 00010001
[040h 0064 128]                      Modulus : 5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD \
                                               1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87 \
                                               31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D \
                                               7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21 \
                                               96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38 \
                                               57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3 \
                                               02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0 \
                                               93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6

[0C0h 0192   4]                Subtable Type : 00000001 [Windows Marker Structure]
[0C4h 0196   4]                       Length : 000000B6

[0C8h 0200   4]                      Version : 00020000
[0CCh 0204   6]                       Oem ID : "HPQOEM"
[0D2h 0210   8]                 Oem Table ID : "SLIC-MPC"
[0DAh 0218   8]                 Windows Flag : "WINDOWS "
[0E2h 0226   4]                 SLIC Version : 00020001
[0E6h 0230  16]                     Reserved : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[0F6h 0246 128]                    Signature : 30 90 1F B4 A4 BE 80 1E E9 33 EC 7F FC B1 28 0E \
                                               A6 CE 43 72 8C 79 30 B4 F4 59 EA 7D CF B7 11 8B \
                                               DA 70 C5 C8 3F 79 20 08 6F 64 CA 07 88 B3 B1 16 \
                                               B4 BA 1A F1 85 52 B1 F5 07 55 B5 70 61 EF 44 8C \
                                               AA 5F 78 14 66 98 9C F3 58 D8 AA 48 E0 37 F8 F6 \
                                               AB 64 FA DA 17 2A 62 E3 04 1D 32 2D D5 EA 33 66 \
                                               5C 5B 3B 0E F7 09 66 42 32 AA 14 99 C3 EE 1A 62 \
                                               3B 07 5F F0 48 44 C4 E6 32 59 1F 14 3E F1 B2 38

Raw Table Data: Length 374 (0x176)

  0000: 53 4C 49 43 76 01 00 00 01 F9 48 50 51 4F 45 4D  SLICv.....HPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 53 4C 49 43  SLIC-MPC....SLIC
  0020: 40 42 0F 00 00 00 00 00 9C 00 00 00 06 02 00 00  @B..............
  0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  .$..RSA1........
  0040: 5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD  [.`V.X.....\.O..
  0050: 1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87  ..........Y...>.
  0060: 31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D  1..t..;.[...|9..
  0070: 7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21  |"..*....m.....!
  0080: 96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38  ...h..DE><....78
  0090: 57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3  W........~.@.Q:.
  00A0: 02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0  .H...r.Bx.G.T...
  00B0: 93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6  ...........2..T.
  00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F  ............HPQO
  00D0: 45 4D 53 4C 49 43 2D 4D 50 43 57 49 4E 44 4F 57  EMSLIC-MPCWINDOW
  00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  S ..............
  00F0: 00 00 00 00 00 00 30 90 1F B4 A4 BE 80 1E E9 33  ......0........3
  0100: EC 7F FC B1 28 0E A6 CE 43 72 8C 79 30 B4 F4 59  ....(...Cr.y0..Y
  0110: EA 7D CF B7 11 8B DA 70 C5 C8 3F 79 20 08 6F 64  .}.....p..?y .od
  0120: CA 07 88 B3 B1 16 B4 BA 1A F1 85 52 B1 F5 07 55  ...........R...U
  0130: B5 70 61 EF 44 8C AA 5F 78 14 66 98 9C F3 58 D8  .pa.D.._x.f...X.
  0140: AA 48 E0 37 F8 F6 AB 64 FA DA 17 2A 62 E3 04 1D  .H.7...d...*b...
  0150: 32 2D D5 EA 33 66 5C 5B 3B 0E F7 09 66 42 32 AA  2-..3f\[;...fB2.
  0160: 14 99 C3 EE 1A 62 3B 07 5F F0 48 44 C4 E6 32 59  .....b;._.HD..2Y
  0170: 1F 14 3E F1 B2 38                                ..>..8


SSDT1
-----
DefinitionBlock ("ssdt1.aml", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{

    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0xBF691A98, 
            0x000002E8, 
            "APIST   ", 
            0xBF691718, 
            0x00000303, 
            "CPU0CST ", 
            0xBF690018, 
            0x00000891, 
            "APCST   ", 
            0xBF68FD98, 
            0x00000119
        })
        Name (CFGD, 0x03230653)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & One))
            {
                If ((((CFGD & 0x01000002) && ((PDC0 & 0x09) == 
                    0x09)) && !(SDTL & One)))
                {
                    SDTL |= One
                    OperationRegion (IST0, SystemMemory, DerefOf (Index (SSDT, One)), DerefOf (Index (SSDT, 0x02)))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000002) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (Index (SSDT, 0x07)), DerefOf (Index (SSDT, 0x08)))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC0 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC0 & 0x18))
            {
                APCT ()
            }

            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0xF0) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (Index (SSDT, 0x0A)), DerefOf (Index (SSDT, 0x0B)))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (Index (SSDT, 0x04)), DerefOf (Index (SSDT, 0x05)))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & One))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & One))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS4)
            CreateDWordField (Arg0, 0x04, CAP4)
            If (((STS4 == 0x06) || (STS4 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS4 & One))
            {
                CAP4 &= 0x0BFF
                Return (Zero)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4.GCAP.CAP4 */
            If (((PDC4 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC4 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS5)
            CreateDWordField (Arg0, 0x04, CAP5)
            If (((STS5 == 0x06) || (STS5 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS5 & One))
            {
                CAP5 &= 0x0BFF
                Return (Zero)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5.GCAP.CAP5 */
            If (((PDC5 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC5 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS6)
            CreateDWordField (Arg0, 0x04, CAP6)
            If (((STS6 == 0x06) || (STS6 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS6 & One))
            {
                CAP6 &= 0x0BFF
                Return (Zero)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6.GCAP.CAP6 */
            If (((PDC6 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC6 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS7)
            CreateDWordField (Arg0, 0x04, CAP7)
            If (((STS7 == 0x06) || (STS7 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS7 & One))
            {
                CAP7 &= 0x0BFF
                Return (Zero)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7.GCAP.CAP7 */
            If (((PDC7 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC7 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }
}



SSDT2
-----
DefinitionBlock ("ssdt2.aml", "SSDT", 1, "PmRef", "Cpu0Ist", 0x00003000)
{

    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilites
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000800, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & One))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x07)
        {
            Package (0x06)
            {
                0x00000640, 
                0x0000AFC8, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x0000063F, 
                0x0000AFC8, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000005BA, 
                0x0000A20D, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x000094E0, 
                0x0000006E, 
                0x0000000A, 
                0x00000383, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x000004AF, 
                0x000087F6, 
                0x0000006E, 
                0x0000000A, 
                0x00000483, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x0000042A, 
                0x00007B14, 
                0x0000006E, 
                0x0000000A, 
                0x00000583, 
                0x00000005
            }, 

            Package (0x06)
            {
                0x000003A5, 
                0x00006EB5, 
                0x0000006E, 
                0x0000000A, 
                0x00000683, 
                0x00000006
            }
        })
        Name (_PSS, Package (0x07)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000640, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x0000063F, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }, 

            Package (0x06)
            {
                0x000005BA, 
                0x0000A20D, 
                0x0000000A, 
                0x0000000A, 
                0x0000000B, 
                0x0000000B
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x000094E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000000A, 
                0x0000000A
            }, 

            Package (0x06)
            {
                0x000004AF, 
                0x000087F6, 
                0x0000000A, 
                0x0000000A, 
                0x00000009, 
                0x00000009
            }, 

            Package (0x06)
            {
                0x0000042A, 
                0x00007B14, 
                0x0000000A, 
                0x0000000A, 
                0x00000008, 
                0x00000008
            }, 

            Package (0x06)
            {
                0x000003A5, 
                0x00006EB5, 
                0x0000000A, 
                0x0000000A, 
                0x00000007, 
                0x00000007
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU0.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU0.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x08
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x08
            }
        })
    }
}



SSDT3
-----
DefinitionBlock ("ssdt3.aml", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{

    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x00200000) && (PDC0 & 0x0200)))
            {
                If (!PWRS)
                {
                    If ((CFGD & 0x20000000))
                    {
                        If ((CFGD & 0x40))
                        {
                            Return (Package (0x04)
                            {
                                0x03, 
                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000000, // Address
                                            0x01,               // Access Size
                                            )
                                    }, 

                                    One, 
                                    0x03, 
                                    0x03E8
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000010, // Address
                                            0x03,               // Access Size
                                            )
                                    }, 

                                    0x02, 
                                    0xCD, 
                                    0x01F4
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000030, // Address
                                            0x03,               // Access Size
                                            )
                                    }, 

                                    0x03, 
                                    0xF5, 
                                    0xC8
                                }
                            })
                        }

                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000030, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x03, 
                                0xF5, 
                                0xC8
                            }
                        })
                    }

                    If ((CFGD & 0x0200))
                    {
                        If ((CFGD & 0x40))
                        {
                            Return (Package (0x04)
                            {
                                0x03, 
                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000000, // Address
                                            0x01,               // Access Size
                                            )
                                    }, 

                                    One, 
                                    0x03, 
                                    0x03E8
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000010, // Address
                                            0x03,               // Access Size
                                            )
                                    }, 

                                    0x02, 
                                    0xCD, 
                                    0x01F4
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000020, // Address
                                            0x03,               // Access Size
                                            )
                                    }, 

                                    0x03, 
                                    0xF5, 
                                    0x015E
                                }
                            })
                        }

                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000020, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x03, 
                                0xF5, 
                                0x015E
                            }
                        })
                    }

                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000010, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }
                        })
                    }

                    Return (Package (0x02)
                    {
                        One, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }
                    })
                }

                If ((CFGD & 0x0200))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0xF5, 
                            0x015E
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0xCD, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0100)))
            {
                If (!PWRS)
                {
                    If ((CFGD & 0x20000000))
                    {
                        If ((CFGD & 0x40))
                        {
                            Return (Package (0x04)
                            {
                                0x03, 
                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000000, // Address
                                            0x01,               // Access Size
                                            )
                                    }, 

                                    One, 
                                    0x03, 
                                    0x03E8
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (SystemIO, 
                                            0x08,               // Bit Width
                                            0x00,               // Bit Offset
                                            0x0000000000000414, // Address
                                            ,)
                                    }, 

                                    0x02, 
                                    0xCD, 
                                    0x01F4
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (SystemIO, 
                                            0x08,               // Bit Width
                                            0x00,               // Bit Offset
                                            0x0000000000000416, // Address
                                            ,)
                                    }, 

                                    0x03, 
                                    0xF5, 
                                    0xC8
                                }
                            })
                        }

                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000416, // Address
                                        ,)
                                }, 

                                0x03, 
                                0xF5, 
                                0xC8
                            }
                        })
                    }

                    If ((CFGD & 0x0200))
                    {
                        If ((CFGD & 0x40))
                        {
                            Return (Package (0x04)
                            {
                                0x03, 
                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000000, // Address
                                            0x01,               // Access Size
                                            )
                                    }, 

                                    One, 
                                    0x03, 
                                    0x03E8
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (SystemIO, 
                                            0x08,               // Bit Width
                                            0x00,               // Bit Offset
                                            0x0000000000000414, // Address
                                            ,)
                                    }, 

                                    0x02, 
                                    0xCD, 
                                    0x01F4
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (SystemIO, 
                                            0x08,               // Bit Width
                                            0x00,               // Bit Offset
                                            0x0000000000000415, // Address
                                            ,)
                                    }, 

                                    0x03, 
                                    0xF5, 
                                    0x015E
                                }
                            })
                        }

                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000415, // Address
                                        ,)
                                }, 

                                0x03, 
                                0xF5, 
                                0x015E
                            }
                        })
                    }

                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000414, // Address
                                        ,)
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }
                        })
                    }

                    Return (Package (0x02)
                    {
                        One, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }
                    })
                }

                If ((CFGD & 0x0200))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000415, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xF5, 
                            0x015E
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000414, // Address
                                    ,)
                            }, 

                            0x02, 
                            0xCD, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            If (!PWRS)
            {
                If ((CFGD & 0x20000000))
                {
                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x04)
                        {
                            0x03, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x00,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000000, // Address
                                        ,)
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000414, // Address
                                        ,)
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000416, // Address
                                        ,)
                                }, 

                                0x03, 
                                0xF5, 
                                0xC8
                            }
                        })
                    }

                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000416, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xF5, 
                            0xC8
                        }
                    })
                }

                If ((CFGD & 0x0200))
                {
                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x04)
                        {
                            0x03, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x00,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000000, // Address
                                        ,)
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000414, // Address
                                        ,)
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000415, // Address
                                        ,)
                                }, 

                                0x03, 
                                0xF5, 
                                0x015E
                            }
                        })
                    }

                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000415, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xF5, 
                            0x015E
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000414, // Address
                                    ,)
                            }, 

                            0x02, 
                            0xCD, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            If ((CFGD & 0x0200))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000415, // Address
                                ,)
                        }, 

                        0x03, 
                        0xF5, 
                        0x015E
                    }
                })
            }

            If ((CFGD & 0x40))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000414, // Address
                                ,)
                        }, 

                        0x02, 
                        0xCD, 
                        0x01F4
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    0x03, 
                    0x03E8
                }
            })
        }
    }
}



SSDT4
-----
DefinitionBlock ("ssdt4.aml", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{

    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSD, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }
}



SSDT5
-----
DefinitionBlock ("ssdt5.aml", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{

    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



XSDT
----
[000h 0000   4]                    Signature : "XSDT"    [Extended System Description Table]
[004h 0004   4]                 Table Length : 00000064
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E4
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   8]       ACPI Table Address   0 : 00000000BF7FC000
[02Ch 0044   8]       ACPI Table Address   1 : 00000000BF7FD000
[034h 0052   8]       ACPI Table Address   2 : 00000000BF7FB000
[03Ch 0060   8]       ACPI Table Address   3 : 00000000BF7FA000
[044h 0068   8]       ACPI Table Address   4 : 00000000BF7F9000
[04Ch 0076   8]       ACPI Table Address   5 : 00000000BF7EB000
[054h 0084   8]       ACPI Table Address   6 : 00000000BF7E8000
[05Ch 0092   8]       ACPI Table Address   7 : 00000000BF7E5000

Raw Table Data: Length 100 (0x64)

  0000: 58 53 44 54 64 00 00 00 01 E4 48 50 51 4F 45 4D  XSDTd.....HPQOEM
  0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 20 20 20 20  SLIC-MPC....    
  0020: 13 00 00 01 00 C0 7F BF 00 00 00 00 00 D0 7F BF  ................
  0030: 00 00 00 00 00 B0 7F BF 00 00 00 00 00 A0 7F BF  ................
  0040: 00 00 00 00 00 90 7F BF 00 00 00 00 00 B0 7E BF  ..............~.
  0050: 00 00 00 00 00 80 7E BF 00 00 00 00 00 50 7E BF  ......~......P~.
  0060: 00 00 00 00                                      ....


