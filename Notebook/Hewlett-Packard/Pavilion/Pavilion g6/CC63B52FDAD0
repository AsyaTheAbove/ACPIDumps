
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20210930
Copyright (c) 2000 - 2021 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "HPQOEM"  "INSYDE  "  0x00000001  "HP  "   0x00040000
 02)  ASF!  0x000000A5  0x20  "HPQOEM"  "INSYDE  "  0x00000001  "HP  "   0x00040000
 03)  APIC  0x00000084  0x03  "HPQOEM"  "INSYDE  "  0x00000001  "HP  "   0x00040000
 04)  SLIC  0x00000176  0x01  "HPQOEM"  "SLIC-MPC"  0x00000001  "HP  "   0x00040000
 05)  SSDT  0x00001ED4  0x02  "HPQOEM"  "INSYDE  "  0x00000001  "MSFT"   0x04000000
 06)  BOOT  0x00000028  0x01  "HPQOEM"  "INSYDE  "  0x00000001  "HP  "   0x00040000
 07)  UEFI  0x00000236  0x01  "HPQOEM"  "INSYDE  "  0x00000001  "HP  "   0x00040000
 08)  DSDT  0x0000FA99  0x01  "HPQOEM"  "INSYDE  "  0xF0000000  "ACPI"   0x00040000
 09)  WDRT  0x00000047  0x01  "HPQOEM"  "INSYDE  "  0x00000000  "HP  "   0x00040000
 10)  WDAT  0x000001AC  0x01  "HPQOEM"  "INSYDE  "  0x00000001  "HP  "   0x00040000
 11)  FACP  0x0000010C  0x05  "HPQOEM"  "SLIC-MPC"  0x00000001  "HP  "   0x00040000
 12)  FPDT  0x00000044  0x01  "HPQOEM"  "INSYDE  "  0x00000001  "HP  "   0x00040000
 13)  SSDT  0x00000B9C  0x01  "HPQOEM"  "INSYDE  "  0x00000001  "AMD "   0x00000001
 14)  HPET  0x00000038  0x01  "HPQOEM"  "INSYDE  "  0x00000001  "HP  "   0x00040000
 15)  FACS  0x00000040  0x02

Found 15 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000084
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 0A
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 10
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 11
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 12
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 13
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 04
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[06Ch 0108   1]                Subtable Type : 04 [Local APIC NMI]
[06Dh 0109   1]                       Length : 06
[06Eh 0110   1]                 Processor ID : 00
[06Fh 0111   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[071h 0113   1]         Interrupt Input LINT : 01

[072h 0114   1]                Subtable Type : 04 [Local APIC NMI]
[073h 0115   1]                       Length : 06
[074h 0116   1]                 Processor ID : 01
[075h 0117   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[077h 0119   1]         Interrupt Input LINT : 01

[078h 0120   1]                Subtable Type : 04 [Local APIC NMI]
[079h 0121   1]                       Length : 06
[07Ah 0122   1]                 Processor ID : 02
[07Bh 0123   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[07Dh 0125   1]         Interrupt Input LINT : 01

[07Eh 0126   1]                Subtable Type : 04 [Local APIC NMI]
[07Fh 0127   1]                       Length : 06
[080h 0128   1]                 Processor ID : 03
[081h 0129   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[083h 0131   1]         Interrupt Input LINT : 01

Raw Table Data: Length 132 (0x84)

    0000: 41 50 49 43 84 00 00 00 03 0A 48 50 51 4F 45 4D  // APIC......HPQOEM
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 48 50 20 20  // INSYDE  ....HP  
    0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 00 10  // ................
    0030: 01 00 00 00 00 08 01 11 01 00 00 00 00 08 02 12  // ................
    0040: 01 00 00 00 00 08 03 13 01 00 00 00 01 0C 04 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0060: 00 00 02 0A 00 09 09 00 00 00 0F 00 04 06 00 05  // ................
    0070: 00 01 04 06 01 05 00 01 04 06 02 05 00 01 04 06  // ................
    0080: 03 05 00 01                                      // ....


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format Table]
[004h 0004   4]                 Table Length : 000000A5
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : F4
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : 00
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0001
[02Ch 0044   4]              Manufacturer ID : 57010000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 01 [ASF Alerts]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 002C
[038h 0056   1]                   AssertMask : 00
[039h 0057   1]                 DeassertMask : 00
[03Ah 0058   1]                  Alert Count : 03
[03Bh 0059   1]            Alert Data Length : 0C

[03Ch 0060   1]                      Address : 80
[03Dh 0061   1]                      Command : 23
[03Eh 0062   1]                         Mask : 01
[03Fh 0063   1]                        Value : 01
[040h 0064   1]                   SensorType : 01
[041h 0065   1]                         Type : 01
[042h 0066   1]                       Offset : 00
[043h 0067   1]                   SourceType : 39
[044h 0068   1]                     Severity : 10
[045h 0069   1]                 SensorNumber : 00
[046h 0070   1]                       Entity : 07
[047h 0071   1]                     Instance : 00

[048h 0072   1]                      Address : 80
[049h 0073   1]                      Command : 23
[04Ah 0074   1]                         Mask : 02
[04Bh 0075   1]                        Value : 02
[04Ch 0076   1]                   SensorType : 01
[04Dh 0077   1]                         Type : 01
[04Eh 0078   1]                       Offset : 00
[04Fh 0079   1]                   SourceType : 39
[050h 0080   1]                     Severity : 10
[051h 0081   1]                 SensorNumber : 01
[052h 0082   1]                       Entity : 07
[053h 0083   1]                     Instance : 00

[054h 0084   1]                      Address : 80
[055h 0085   1]                      Command : 23
[056h 0086   1]                         Mask : 04
[057h 0087   1]                        Value : 04
[058h 0088   1]                   SensorType : 01
[059h 0089   1]                         Type : 01
[05Ah 0090   1]                       Offset : 00
[05Bh 0091   1]                   SourceType : 39
[05Ch 0092   1]                     Severity : 10
[05Dh 0093   1]                 SensorNumber : 02
[05Eh 0094   1]                       Entity : 07
[05Fh 0095   1]                     Instance : 00

[060h 0096   1]                Subtable Type : 02 [ASF Remote Control]
[061h 0097   1]                     Reserved : 00
[062h 0098   2]                       Length : 0018
[064h 0100   1]                Control Count : 04
[065h 0101   1]          Control Data Length : 04
[066h 0102   2]                     Reserved : 0000

[068h 0104   1]                     Function : 00
[069h 0105   1]                      Address : 71
[06Ah 0106   1]                      Command : 00
[06Bh 0107   1]                        Value : 00

[06Ch 0108   1]                     Function : 01
[06Dh 0109   1]                      Address : 71
[06Eh 0110   1]                      Command : 02
[06Fh 0111   1]                        Value : 00

[070h 0112   1]                     Function : 02
[071h 0113   1]                      Address : 71
[072h 0114   1]                      Command : 01
[073h 0115   1]                        Value : 00

[074h 0116   1]                     Function : 03
[075h 0117   1]                      Address : 71
[076h 0118   1]                      Command : 03
[077h 0119   1]                        Value : 00

[078h 0120   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121   1]                     Reserved : 00
[07Ah 0122   2]                       Length : 0017
[07Ch 0124   7]                 Capabilities : 21 F8 00 00 00 1B F0
[083h 0131   1]              Completion Code : 00
[084h 0132   4]                Enterprise ID : 57010000
[088h 0136   1]                      Command : 00
[089h 0137   2]                    Parameter : 0100
[08Bh 0139   2]                 Boot Options : 7000
[08Dh 0141   2]               Oem Parameters : 1600

[08Fh 0143   1]                Subtable Type : 00 [ASF Information]
[090h 0144   1]                     Reserved : 10
[091h 0145   2]                       Length : 00A0
[093h 0147   1]          Minimum Reset Value : A2
[094h 0148   1]     Minimum Polling Interval : A4
[095h 0149   2]                    System ID : 0000
[097h 0151   4]              Manufacturer ID : 00000000
[09Bh 0155   1]                        Flags : 00
[09Ch 0156   3]                     Reserved : 000000


Raw Table Data: Length 165 (0xA5)

    0000: 41 53 46 21 A5 00 00 00 20 F4 48 50 51 4F 45 4D  // ASF!.... .HPQOEM
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 48 50 20 20  // INSYDE  ....HP  
    0020: 00 00 04 00 00 00 10 00 00 FF 01 00 00 00 01 57  // ...............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 80 23 01 01  // ......,......#..
    0040: 01 01 00 39 10 00 07 00 80 23 02 02 01 01 00 39  // ...9.....#.....9
    0050: 10 01 07 00 80 23 04 04 01 01 00 39 10 02 07 00  // .....#.....9....
    0060: 02 00 18 00 04 04 00 00 00 71 00 00 01 71 02 00  // .........q...q..
    0070: 02 71 01 00 03 71 03 00 03 00 17 00 21 F8 00 00  // .q...q......!...
    0080: 00 1B F0 00 00 00 01 57 00 00 01 00 70 00 16 00  // .......W....p...
    0090: 10 A0 00 A2 A4 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00                                   // .....


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : AC
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]          Boot Register Index : 44
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 AC 48 50 51 4F 45 4D  // BOOT(.....HPQOEM
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 48 50 20 20  // INSYDE  ....HP  
    0020: 00 00 04 00 44 00 00 00                          // ....D...


DSDT
----
DefinitionBlock ("", "DSDT", 1, "HPQOEM", "INSYDE  ", 0xF0000000)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but only 0 were resolved (2 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.C000._PPC, IntObj)
    External (_PR_.C000.PPCV, UnknownObj)
    External (_PR_.C001.PPCV, UnknownObj)
    External (_PR_.C002.PPCV, UnknownObj)
    External (_PR_.C003.PPCV, UnknownObj)
    External (_SB_.APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (ALIB, IntObj)

    OperationRegion (SPRT, SystemIO, 0xB0, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    OperationRegion (CMS1, SystemIO, 0x72, 0x02)
    Field (CMS1, ByteAcc, NoLock, Preserve)
    {
        CMSI,   8, 
        CMSD,   8
    }

    IndexField (CMSI, CMSD, ByteAcc, NoLock, Preserve)
    {
        Offset (0xC0), 
        WWLE,   1, 
        WWLS,   1, 
        WBTE,   1, 
        WBTS,   1, 
        WCME,   1, 
        WCMS,   1, 
        WCMC,   1, 
        WWBS,   1, 
        Offset (0xC6), 
        PFID,   8, 
        WBPB,   1, 
        WBRC,   1, 
        WBLN,   1, 
        WBUB,   1, 
        Offset (0xC8), 
        Offset (0xCA), 
        PSZE,   8, 
        THAS,   8, 
        Offset (0xD1), 
            ,   3, 
        CHOT,   1, 
        Offset (0xE2), 
        CWD0,   8, 
        CWD1,   8, 
        CWD2,   8, 
        CWD3,   8, 
        CWDF,   8, 
        CWCS,   8, 
        Offset (0xF7), 
        HSDC,   8, 
        HSDS,   8, 
        HBUC,   8, 
        HBUS,   8
    }

    Method (CMSW, 2, NotSerialized)
    {
        CMSI = Arg0
        CMSD = Arg1
    }

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DBG1, SystemIO, 0x80, 0x02)
    Field (DBG1, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
        Offset (0x24), 
        MMSO,   32, 
        Offset (0x50), 
        HPAD,   32, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xC8), 
            ,   2, 
        SPRE,   1, 
        TPDE,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1, 
            ,   3, 
        UREN,   1
    }

    OperationRegion (GSMM, SystemMemory, MMSO, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x132), 
            ,   7, 
        GP51,   1, 
        Offset (0x136), 
            ,   7, 
        GP55,   1, 
        Offset (0x13A), 
            ,   7, 
        GP59,   1, 
        Offset (0x13F), 
            ,   7, 
        GP64,   1, 
        Offset (0x160), 
            ,   7, 
        GE01,   1, 
        Offset (0x16A), 
            ,   7, 
        GE11,   1, 
            ,   7, 
        GE12,   1, 
        Offset (0x16E), 
            ,   7, 
        BATS,   1, 
        Offset (0x1FF), 
            ,   1, 
        G01S,   1, 
        Offset (0x203), 
            ,   1, 
        G01E,   1, 
        Offset (0x207), 
            ,   1, 
        TR01,   1, 
        Offset (0x20B), 
            ,   1, 
        TL01,   1, 
        Offset (0x20D), 
            ,   7, 
        ACIR,   1, 
        Offset (0x277), 
        XHP0,   5, 
        Offset (0x278), 
        XHP1,   5, 
        Offset (0x287), 
            ,   1, 
        CLPS,   1, 
        Offset (0x298), 
            ,   7, 
        G15A,   1, 
        Offset (0x2AF), 
            ,   2, 
        SLPS,   2, 
        Offset (0x376), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BA), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BD), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3DE), 
        BLNK,   2, 
        Offset (0x3EF), 
        PHYD,   1, 
        Offset (0xAFF), 
        WDRS,   1, 
        Offset (0xE80), 
            ,   2, 
        ECES,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, 0x0400, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        If (((DAS3 == Zero) && (DAS1 == Zero)))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }
        Else
        {
            If (((DAS3 == Zero) && (Arg1 == 0x03)))
            {
                PRWP [One] = One
            }

            If (((DAS1 == Zero) && (Arg1 == One)))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
    }

    Method (SWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PWDE = One
        PEWD = Zero
    }

    Method (CHKH, 0, NotSerialized)
    {
        \_SB.PCI0.SMBS.G16T = ~\_SB.PCI0.SMBS.GE16
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        INAB = Arg0
        Return (DAAB) /* \DAAB */
    }

    Method (WTAB, 2, NotSerialized)
    {
        INAB = Arg0
        DAAB = Arg1
    }

    Method (RWAB, 3, NotSerialized)
    {
        Local0 = (RDAB (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    OperationRegion (PEBA, SystemMemory, 0xF8000000, 0x02000000)
    Field (PEBA, AnyAcc, NoLock, Preserve)
    {
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (GNVS, SystemMemory, 0xBFBBCF18, 0x00000013)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        DAS1,   8, 
        DAS3,   8, 
        TNBH,   8, 
        TCP0,   8, 
        TCP1,   8, 
        ATNB,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PWMN,   8, 
        LPTY,   8, 
        M92D,   8, 
        WKPM,   8, 
        ALST,   8, 
        AFUC,   8, 
        EXUS,   8, 
        AIRC,   8, 
        WLSH,   8, 
        TSSS,   8, 
        ODZC,   8
    }

    Name (PSWF, Zero)
    Name (KBWU, Zero)
    Name (TPWU, Zero)
    OperationRegion (OGNS, SystemMemory, 0xBFBBA018, 0x00001101)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        SERN,   80, 
        RES1,   176, 
        MACD,   48, 
        RES2,   208, 
        MBNE,   128, 
        HWCN,   128, 
        RES3,   128, 
        CTNU,   152, 
        RES4,   8, 
        IMDE,   8, 
        FPSZ,   8, 
        W7CF,   8, 
        PFCY,   16, 
        PFRV,   24, 
        WWUN,   8, 
        WWIA,   8, 
        GPSA,   8, 
        KBMT,   8, 
        RES5,   32, 
        CTON,   24, 
        RES6,   8, 
        GUID,   64, 
        UUID,   128, 
        ASTG,   160, 
        SKNM,   112, 
        MDID,   256, 
        ESTL,   8, 
        IMID,   8, 
        ODDC,   8, 
        TVFL,   8, 
        QPFL,   8, 
        QPSL,   8, 
        CHID,   8, 
        OSSK,   8, 
        WPFL,   8, 
        DBSW,   8, 
        EFOF,   8, 
        MSED,   8, 
        INFL,   16, 
        Offset (0x1000), 
        WSD0,   8, 
        WSD1,   8, 
        WSD2,   8, 
        WSD3,   8, 
        HWCT,   8, 
        HWBC,   8, 
        HWRC,   8, 
        HWBF,   1024, 
        IAOR,   8, 
        CDAT,   32, 
        WLVD,   16, 
        WLDD,   16, 
        WLSV,   16, 
        WLSS,   16, 
        BTVD,   16, 
        BTDD,   16, 
        WWVD,   16, 
        WWDD,   16, 
        GPVD,   16, 
        GPDD,   16, 
        FACM,   16, 
        SMA4,   8, 
        WIVD,   16, 
        WIDD,   16, 
        RCKP,   8, 
        HDSM,   16, 
        HD1H,   64, 
        HD2H,   64, 
        OD1H,   64, 
        EBUR,   8, 
        HD1P,   16, 
        HD1M,   16, 
        HD2P,   16, 
        HD2M,   16, 
        OD1P,   16, 
        OD1M,   16, 
        OG00,   8, 
        OG01,   8, 
        OG02,   8, 
        OG03,   8, 
        OG04,   8, 
        OG05,   8, 
        OG06,   8, 
        OG07,   8, 
        OG08,   8, 
        OG09,   8, 
        OG10,   8, 
        CPUP,   64, 
        GPUP,   32, 
        SYSP,   64, 
        FANP,   32, 
        BATP,   32, 
        HDDP,   32, 
        CPUT,   8, 
        GPUT,   8, 
        SYST,   8, 
        FANT,   8, 
        BATT,   8, 
        HDDT,   8, 
        SSVM,   8
    }

    OperationRegion (NVST, SystemMemory, 0xBFBBDE8E, 0x00000131)
    Field (NVST, AnyAcc, Lock, Preserve)
    {
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        SBFN,   8, 
        DID,    32, 
        INFO,   2048, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        ROMS,   32, 
        MUXF,   8, 
        PDDN,   8, 
        PPCM,   8, 
        PPCN,   8, 
        NCPU,   8, 
        MCPU,   8, 
        ECPU,   8, 
        WM0D,   8
    }

    Method (SCMP, 2, NotSerialized)
    {
        Name (STG1, Buffer (0x50){})
        Name (STG2, Buffer (0x50){})
        STG1 = Arg0
        STG2 = Arg1
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = Zero
        While ((Local0 < SizeOf (Arg0)))
        {
            If ((DerefOf (STG1 [Local0]) != DerefOf (STG2 [Local0]
                )))
            {
                Return (Zero)
            }

            Local0++
        }

        Return (One)
    }

    Name (WNOS, Zero)
    Name (MYOS, Zero)
    Name (HTTS, Zero)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Name (SSOS, Zero)
    Method (CKOS, 0, NotSerialized)
    {
        If ((WNOS == Zero))
        {
            If (SCMP (_OS, "Microsoft Windows"))
            {
                WNOS = One
            }

            If (SCMP (_OS, "Microsoft Windows NT"))
            {
                WNOS = 0x02
            }

            If (SCMP (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                WNOS = 0x03
            }

            If (CondRefOf (\_OSI, Local0))
            {
                If (SCMP (_OS, "Windows 2006"))
                {
                    WNOS = 0x05
                }
                ElseIf (SCMP (_OS, "Windows 2009"))
                {
                    WNOS = 0x06
                }
                Else
                {
                    WNOS = 0x04
                }
            }
        }

        Return (WNOS) /* \WNOS */
    }

    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }

                If (_OSI ("NOT_WINP_KEY"))
                {
                    SSOS = One
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Name (ECON, Zero)
    Scope (_PR)
    {
        Processor (C000, 0x00, 0x00000410, 0x06){}
        Processor (C001, 0x01, 0x00000410, 0x06){}
        Processor (C002, 0x02, 0x00000410, 0x06){}
        Processor (C003, 0x03, 0x00000410, 0x06){}
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((DAS1 == One))
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            One, 
            Zero, 
            Zero
        })
    }

    If ((DAS3 == One))
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            0x03, 
            Zero, 
            Zero
        })
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    Scope (_GPE)
    {
        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.OHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.OHC2, 0x02) // Device Wake
            Notify (\_SB.PCI0.OHC3, 0x02) // Device Wake
            Notify (\_SB.PCI0.OHC4, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC3, 0x02) // Device Wake
            Notify (\_SB.PCI0.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.XHC1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((OSTB == 0x50))
            {
                If (((\_SB.PCI0.SATA.ODDZ.DSDA == Zero) && ((ODZC == One) && (\_SB.PCI0.SATA.ODDZ.ODDB == One))))
                {
                    If (\_SB.PCI0.SMBS.G16T)
                    {
                        Sleep (0x14)
                        If (\_SB.PCI0.SMBS.GE16)
                        {
                            If (((\_SB.PCI0.SATA.VIDI == 0x78001022) || (\_SB.PCI0.SATA.VIDI == 0x78011022))){}
                            If (((\_SB.PCI0.SATA.VIDI == 0x78041022) || (\_SB.PCI0.SATA.VIDI == 0x78021002)))
                            {
                                Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                            }

                            If ((\_SB.PCI0.SATA.VIDI == 0x78031022))
                            {
                                Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                            }

                            P80H = 0xDF15
                        }
                    }
                    Else
                    {
                        Sleep (0x14)
                        If (!\_SB.PCI0.SMBS.GE16)
                        {
                            If (((\_SB.PCI0.SATA.VIDI == 0x78001022) || (\_SB.PCI0.SATA.VIDI == 0x78011022))){}
                            If (((\_SB.PCI0.SATA.VIDI == 0x78041022) || (\_SB.PCI0.SATA.VIDI == 0x78021002)))
                            {
                                Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                            }

                            If ((\_SB.PCI0.SATA.VIDI == 0x78031022))
                            {
                                Notify (\_SB.PCI0.SATA.ODDZ, 0x80) // Status Change
                            }

                            P80H = 0xDF14
                        }
                    }

                    \_SB.PCI0.SMBS.G16T = ~\_SB.PCI0.SMBS.G16T
                }
            }
        }
    }

    Scope (_TZ)
    {
        Name (TPC, 0x67)
        Name (TPTM, 0x4B)
        Name (TPAS, 0x60)
        Name (PSVT, 0x50)
        Name (PSVM, Zero)
        Name (DHOT, 0x5A)
        Name (HOTF, Zero)
        Name (TPLG, 0xFF)
        Name (PSVD, Zero)
        ThermalZone (THRM)
        {
            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                If (ECON)
                {
                    Local0 = \_SB.PCI0.LPC0.EC0.RTMP
                    If (((TPLG != 0xFF) && (Local0 >= TPC)))
                    {
                        Local1 = 0x05
                        While ((((Local0 - 0x14) >= TPLG) && (Local1 != 
                            Zero)))
                        {
                            Sleep (0x0190)
                            Local0 = \_SB.PCI0.LPC0.EC0.RTMP
                            Local1--
                        }
                    }

                    TPLG = Local0
                    If ((Local0 >= TPC))
                    {
                        HOTF = One
                    }
                    ElseIf ((Local0 < DHOT))
                    {
                        HOTF = Zero
                    }

                    Return ((0x0AAC + (Local0 * 0x0A)))
                }
                Else
                {
                    Return ((0x0AAC + (TPTM * 0x0A)))
                }
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If (((TPOS == 0x40) || (TPOS == 0x50)))
                {
                    Return ((0x0AAC + (TPC * 0x0A)))
                }
                Else
                {
                    Return (0x14A2)
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If (!((TPOS == 0x40) || (TPOS == 0x50)))
                {
                    Return ((0x0AAC + (TPC * 0x0A)))
                }
                Else
                {
                    Return (0x14A2)
                }
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                If ((ECPU == 0x04))
                {
                    Return (Package (0x04)
                    {
                        \_PR.C000, 
                        \_PR.C001, 
                        \_PR.C002, 
                        \_PR.C003
                    })
                }
                ElseIf ((ECPU == 0x03))
                {
                    Return (Package (0x03)
                    {
                        \_PR.C000, 
                        \_PR.C001, 
                        \_PR.C002
                    })
                }
                ElseIf ((ECPU == 0x02))
                {
                    Return (Package (0x02)
                    {
                        \_PR.C000, 
                        \_PR.C001
                    })
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        \_PR.C000
                    })
                }
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                If (((PSVM == One) && (OSTB == 0x50)))
                {
                    Return ((0x0AAC + (PSVT * 0x0A)))
                }
                Else
                {
                    Return ((0x0AAC + (TPAS * 0x0A)))
                }
            }

            Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
            {
                If ((OSTB == 0x50))
                {
                    If (ECON)
                    {
                        PSVM = Arg0
                        \_SB.PCI0.LPC0.EC0.TAPM = PSVM /* \_TZ_.PSVM */
                    }
                }
            }

            Method (_TC1, 0, NotSerialized)  // _TC1: Thermal Constant 1
            {
                Return (0x02)
            }

            Method (_TC2, 0, NotSerialized)  // _TC2: Thermal Constant 2
            {
                Return (0x03)
            }

            Method (_TSP, 0, NotSerialized)  // _TSP: Thermal Sampling Period
            {
                Return (0x1E)
            }
        }
    }

    Name (PICM, Zero)
    Name (GPIC, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
        GPIC = Arg0
        If (PICM)
        {
            \_SB.DSPI ()
        }
    }

    Name (AKYF, Zero)
    Name (FAOF, Zero)
    Name (SGSS, Zero)
    Name (WWLG, Zero)
    Name (WCMG, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        WDRS = Zero
        WWLG = \_SB.PCI0.SMBS.O052
        WCMG = \_SB.PCI0.SMBS.O189
        If (ECON)
        {
            If (((\_SB.PCI0.LPC0.EC0.SW2S == Zero) || (Arg0 != 0x03)))
            {
                UREN = Zero
                \_SB.PCI0.LPC0.EC0.UPWR = Zero
            }
            Else
            {
                UREN = One
                \_SB.PCI0.LPC0.EC0.UPWR = One
            }

            If (((\_SB.PCI0.SPB1.XPDV.LPSW == One) || (PSWF == One)))
            {
                \_SB.PCI0.LPC0.EC0.LANP = One
            }
            Else
            {
                \_SB.PCI0.LPC0.EC0.LANP = Zero
            }
        }

        SPTS (Arg0)
        If ((Arg0 == One))
        {
            IO80 = 0x51
            \_SB.S80H (0x51)
        }

        If ((Arg0 == 0x03))
        {
            IO80 = 0x53
            \_SB.S80H (0x53)
            XHP0 = 0x1F
            XHP1 = 0x1F
            \_SB.PCI0.SMBS.SLPS = One
            S34E (Arg0)
        }

        If ((Arg0 == 0x04))
        {
            CMSW (0xE0, 0x60)
            IO80 = 0x54
            \_SB.S80H (0x54)
            \_SB.PCI0.SMBS.SLPS = One
            RSTU = One
            S34E (Arg0)
        }

        If ((Arg0 == 0x05))
        {
            IO80 = 0x55
            \_SB.S80H (0x55)
        }

        \_SB.APTS (Arg0)
    }

    Method (S34E, 1, NotSerialized)
    {
        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.LPC0.EC0._Q33 ()
            If ((\_TZ.HOTF == One))
            {
                Local0 = (\_TZ.TPC - 0x0A)
                If (ECON)
                {
                    If ((\_SB.PCI0.LPC0.EC0.RTMP >= Local0))
                    {
                        CHOT = One
                    }
                }
                Else
                {
                    CHOT = One
                }
            }
        }

        \_SB.PCI0.SATA.ODDZ.DSDA = One
        \_SB.PCI0.LPC0.EC0.KTWU ()
        AKYF = \_SB.PCI0.LPC0.EC0.ACKY
        FAOF = \_SB.PCI0.LPC0.EC0.FASO
        SGSS = \_SB.PCI0.SMBS.O192
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        CMSW (0xE0, Zero)
        \_SB.PCI0.SMBS.O052 = WWLG /* \WWLG */
        \_SB.PCI0.SMBS.O189 = WCMG /* \WCMG */
        SWAK (Arg0)
        \_SB.AWAK (Arg0)
        If ((Arg0 == One))
        {
            IO80 = 0xE1
            \_SB.S80H (0xE1)
            \_SB.PCI0.P2P.PR4B = 0xF1
        }

        If ((Arg0 == 0x03))
        {
            IO80 = 0xE3
            \_SB.S80H (0xE3)
            CHKH ()
            S34W (Arg0)
        }

        If ((Arg0 == 0x04))
        {
            IO80 = 0xE4
            \_SB.S80H (0xE4)
            \_SB.PCI0._INI ()
            If (((TPOS == 0x40) || (TPOS == 0x41)))
            {
                \_SB.PCI0.EHC1.STOS ()
                \_SB.PCI0.EHC2.STOS ()
                \_SB.PCI0.EHC3.STOS ()
            }

            S34W (Arg0)
        }

        If ((Arg0 == 0x05))
        {
            IO80 = 0xE5
        }

        Return (Zero)
    }

    Method (S34W, 1, NotSerialized)
    {
        If (WBPB)
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
            Notify (\_SB.LID, 0x80) // Status Change
        }
        ElseIf (WBUB)
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
        ElseIf (ECON)
        {
            If (\_SB.PCI0.LPC0.EC0.FTCF)
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        If (WBRC)
        {
            Notify (\_SB.PCI0.LPC0.RTC, 0x02) // Device Wake
        }

        If (WBLN)
        {
            Notify (\_SB.PCI0.SPB1.XPDV, 0x02) // Device Wake
        }

        \_SB.WMID.W05W (0x03)
        If ((PFID != Zero))
        {
            \_SB.PCI0.SMBS.O192 = SGSS /* \SGSS */
        }

        \_SB.PCI0.LPC0.EC0.W7RF ()
        \_SB.PCI0.LPC0.EC0.ACKY = AKYF /* \AKYF */
        \_SB.PCI0.LPC0.EC0.FASO = FAOF /* \FAOF */
        \_SB.PCI0.ACEL.INIT ()
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            OperationRegion (SCTH, PCI_Config, 0x7A, One)
            Field (SCTH, ByteAcc, NoLock, Preserve)
            {
                RSMF,   1
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((GPIC == Zero)){}
                Else
                {
                    DSPI ()
                }

                OSTP ()
                CHKH ()
                CMSW (0xE0, Zero)
                If (CondRefOf (_OSI, Local0))
                {
                    MYOS = Zero
                }
                ElseIf ((SizeOf (_OS) == 0x14))
                {
                    MYOS = One
                }
                ElseIf ((SizeOf (_OS) == 0x27))
                {
                    MYOS = 0x02
                }
                Else
                {
                    MYOS = 0x03
                }
            }

            OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
            Field (NBMS, DWordAcc, NoLock, Preserve)
            {
                MIDX,   32, 
                MIDR,   32
            }

            Mutex (NBMM, 0x00)
            Method (NBMR, 1, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                MIDX = Local0
                Local0 = MIDR /* \_SB_.PCI0.MIDR */
                MIDX = 0x7F
                Release (NBMM)
                Return (Local0)
            }

            Method (NBMW, 2, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                Local0 |= 0x80
                MIDX = Local0
                MIDR = Arg1
                MIDX = Local0 &= 0x7F
                Release (NBMM)
            }

            OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
            Field (NBXP, DWordAcc, NoLock, Preserve)
            {
                NBXI,   32, 
                NBXD,   32
            }

            Mutex (NBXM, 0x00)
            Method (NBXR, 1, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                Local0 = NBXD /* \_SB_.PCI0.NBXD */
                NBXI = Zero
                Release (NBXM)
                Return (Local0)
            }

            Method (NBXW, 2, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                NBXD = Arg1
                NBXI = Zero
                Release (NBXM)
            }

            Method (XPTR, 2, NotSerialized)
            {
                If (((Arg0 < 0x02) && (Arg0 > 0x07)))
                {
                    Return (Zero)
                }
                Else
                {
                    If ((Arg0 < 0x04))
                    {
                        Local1 = (Arg0 - 0x02)
                        Local0 = 0x01310800
                    }
                    Else
                    {
                        Local1 = (Arg0 - 0x04)
                        Local0 = 0x01300900
                    }

                    Local0 += (Local1 << 0x08)
                    Local0 <<= Local1
                    NBXW (Local0, Arg1)
                    Return (Ones)
                }
            }

            Method (XPLP, 2, NotSerialized)
            {
            }

            Method (XPLL, 2, NotSerialized)
            {
            }

            Name (_UID, One)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (AMHP, Zero)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    CTRL &= 0xFB
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)){}
                        If ((CTRL & 0x10)){}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (TOM, 0, NotSerialized)
            {
                Local0 = (TOML * 0x00010000)
                Local1 = (TOMH * 0x01000000)
                Local0 += Local1
                Return (Local0)
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x78000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFED3FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02D40000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED45000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x012BB000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, BTN1)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, BTX1)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, BTL1)  // _LEN: Length
                BTMN = TOM ()
                BTLN = (0xF8000000 - BTMN) /* \_SB_.PCI0._CRS.BTMN */
                Return (CRES) /* \_SB_.PCI0.CRES */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y02)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y03)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y02._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y02._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._LEN, ML02)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        ML02 = 0x1000
                    }

                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Method (XCMP, 2, NotSerialized)
            {
                If ((0x10 != SizeOf (Arg0)))
                {
                    Return (Zero)
                }

                If ((0x10 != SizeOf (Arg1)))
                {
                    Return (Zero)
                }

                Local0 = Zero
                While ((Local0 < 0x10))
                {
                    If ((DerefOf (Arg0 [Local0]) != DerefOf (Arg1 [Local0]
                        )))
                    {
                        Return (Zero)
                    }

                    Local0++
                }

                Return (One)
            }

            Method (AFN0, 0, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN0 ()
                }

                If ((PDDN == 0x02))
                {
                    ^PB2.VGA.AFN0 ()
                }

                If ((PDDN == 0x03))
                {
                    ^PB3.VGA.AFN0 ()
                }
            }

            Method (AFN1, 1, Serialized)
            {
            }

            Method (AFN2, 2, Serialized)
            {
            }

            Method (AFN3, 2, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN3 (Arg0, Arg1)
                }

                If ((PDDN == 0x02))
                {
                    ^PB2.VGA.AFN3 (Arg0, Arg1)
                }

                If ((PDDN == 0x03))
                {
                    ^PB3.VGA.AFN3 (Arg0, Arg1)
                }
            }

            Method (AFN4, 1, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN4 (Arg0)
                }

                If ((PDDN == 0x02))
                {
                    ^PB2.VGA.AFN4 (Arg0)
                }

                If ((PDDN == 0x03))
                {
                    ^PB3.VGA.AFN4 (Arg0)
                }
            }

            Method (AFN5, 0, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN5 ()
                }

                If ((PDDN == 0x02))
                {
                    ^PB2.VGA.AFN5 ()
                }

                If ((PDDN == 0x03))
                {
                    ^PB3.VGA.AFN5 ()
                }
            }

            Method (AFN6, 0, Serialized)
            {
                If ((PDDN == One))
                {
                    ^VGA.AFN6 ()
                }

                If ((PDDN == 0x02))
                {
                    ^PB2.VGA.AFN6 ()
                }

                If ((PDDN == 0x03))
                {
                    ^PB3.VGA.AFN6 ()
                }
            }

            Name (PR00, Package (0x1B)
            {
                Package (0x04)
                {
                    0x0010FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR00, Package (0x1B)
            {
                Package (0x04)
                {
                    0x0010FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0006FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.PCI0.AR00 */
                }

                Return (PR00) /* \_SB_.PCI0.PR00 */
            }

            Device (VGA)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Name (PXEN, 0x80000000)
                Name (PXID, 0x00020000)
                Name (PXMX, 0x80000001)
                Name (PXFX, 0x80000000)
                Name (PXDY, 0x80000000)
                Name (AF7E, 0x80000000)
                OperationRegion (PCIG, PCI_Config, Zero, 0x50)
                Field (PCIG, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    GBA2,   32
                }

                OperationRegion (GFMM, SystemMemory, GBA2, 0x6000)
                Field (GFMM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x5F68), 
                    AZPS,   32
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (DOSA, Zero)
                Name (CRTA, Zero)
                Name (LCDA, One)
                Name (TV0A, Zero)
                Name (HDTV, Zero)
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSA = Arg0
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Name (DODL, Package (0x05)
                    {
                        0x00010100, 
                        0x00010110, 
                        0x0200, 
                        0x00010210, 
                        0x00010220
                    })
                    Return (DODL) /* \_SB_.PCI0.VGA_._DOD.DODL */
                }

                Device (LCD)
                {
                    Name (_ADR, 0x0110)  // _ADR: Address
                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Return (Package (0x0D)
                        {
                            0x64, 
                            0x46, 
                            Zero, 
                            0x0A, 
                            0x14, 
                            0x1E, 
                            0x28, 
                            0x32, 
                            0x3C, 
                            0x46, 
                            0x50, 
                            0x5A, 
                            0x64
                        })
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Stall (0xFF)
                        Stall (0xFF)
                        Acquire (^^^LPC0.PSMX, 0xFFFF)
                        BCMD = 0x73
                        BSMI (Zero)
                        Release (^^^LPC0.PSMX)
                        Stall (0xFF)
                        Stall (0xFF)
                        Return (BRTL) /* \BRTL */
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        Stall (0xFF)
                        Stall (0xFF)
                        Acquire (^^^LPC0.PSMX, 0xFFFF)
                        BRTL = Arg0
                        BCMD = 0x72
                        BSMI (Zero)
                        Release (^^^LPC0.PSMX)
                        Stall (0xFF)
                        Stall (0xFF)
                    }
                }

                Device (HDMI)
                {
                    Name (_ADR, 0x0210)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (HDTV)
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x1D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (HDTV)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (CRT)
                {
                    Name (_ADR, 0x0100)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CRTA)
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x1D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CRTA)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (TV)
                {
                    Name (_ADR, 0x0200)  // _ADR: Address
                    Name (_DCS, Zero)  // _DCS: Display Current Status
                    Name (_DGS, Zero)  // _DGS: Display Graphics State
                }

                Device (DP)
                {
                    Name (_ADR, 0x0220)  // _ADR: Address
                    Name (_DCS, Zero)  // _DCS: Display Current Status
                    Name (_DGS, Zero)  // _DGS: Display Graphics State
                }

                Name (ATIB, Buffer (0x0100){})
                Method (ATIF, 2, Serialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Return (AF00 ())
                    }

                    If ((Arg0 == One))
                    {
                        Return (AF01 ())
                    }

                    If ((Arg0 == 0x02))
                    {
                        Return (AF02 ())
                    }

                    If ((Arg0 == 0x03))
                    {
                        Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
                    }

                    If ((Arg0 == 0x0F))
                    {
                        Return (AF15 ())
                    }
                    Else
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = Zero
                        VERN = Zero
                        NMSK = Zero
                        SFUN = Zero
                        Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                    }
                }

                Method (AF00, 0, NotSerialized)
                {
                    AZPS &= 0xC0000001
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateWordField (ATIB, 0x02, VERN)
                    CreateDWordField (ATIB, 0x04, NMSK)
                    CreateDWordField (ATIB, 0x08, SFUN)
                    SSZE = 0x0C
                    VERN = One
                    If ((PXEN == 0x80000000))
                    {
                        NMSK = 0x11
                    }
                    Else
                    {
                        NMSK = 0x51
                    }

                    MSKN = NMSK /* \_SB_.PCI0.VGA_.AF00.NMSK */
                    SFUN = 0x4007
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Method (AF01, 0, NotSerialized)
                {
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateDWordField (ATIB, 0x02, VMSK)
                    CreateDWordField (ATIB, 0x06, FLGS)
                    SSZE = 0x0A
                    VMSK = 0x03
                    FLGS = One
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Name (PSBR, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                })
                Name (MSKN, Zero)
                Name (SEXM, Zero)
                Name (STHG, Zero)
                Name (STHI, Zero)
                Name (SFPG, Zero)
                Name (SFPI, Zero)
                Name (SSPS, Zero)
                Name (SSDM, 0x0A)
                Name (SCDY, Zero)
                Name (SACT, Buffer (0x07)
                {
                     0x01, 0x02, 0x08, 0x80, 0x03, 0x09, 0x81         // .......
                })
                Method (AF02, 0, NotSerialized)
                {
                    CreateBitField (PSBR, Zero, PDSW)
                    CreateBitField (PSBR, One, PEXM)
                    CreateBitField (PSBR, 0x02, PTHR)
                    CreateBitField (PSBR, 0x03, PFPS)
                    CreateBitField (PSBR, 0x04, PSPS)
                    CreateBitField (PSBR, 0x05, PDCC)
                    CreateBitField (PSBR, 0x06, PXPS)
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateDWordField (ATIB, 0x02, PSBI)
                    CreateByteField (ATIB, 0x06, EXPM)
                    CreateByteField (ATIB, 0x07, THRM)
                    CreateByteField (ATIB, 0x08, THID)
                    CreateByteField (ATIB, 0x09, FPWR)
                    CreateByteField (ATIB, 0x0A, FPID)
                    CreateByteField (ATIB, 0x0B, SPWR)
                    SSZE = 0x0C
                    PSBI = PSBR /* \_SB_.PCI0.VGA_.PSBR */
                    If (PDSW)
                    {
                        PDSW = Zero
                    }

                    If (PEXM)
                    {
                        EXPM = SEXM /* \_SB_.PCI0.VGA_.SEXM */
                        SEXM = Zero
                        PEXM = Zero
                    }

                    If (PTHR)
                    {
                        THRM = STHG /* \_SB_.PCI0.VGA_.STHG */
                        THID = STHI /* \_SB_.PCI0.VGA_.STHI */
                        STHG = Zero
                        STHI = Zero
                        PTHR = Zero
                    }

                    If (PFPS)
                    {
                        FPWR = SFPG /* \_SB_.PCI0.VGA_.SFPG */
                        FPWR = SFPI /* \_SB_.PCI0.VGA_.SFPI */
                        SFPG = Zero
                        SFPI = Zero
                        PFPS = Zero
                    }

                    If (PSPS)
                    {
                        SPWR = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                        PSPS = Zero
                    }

                    If (PXPS)
                    {
                        PXPS = Zero
                    }

                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Method (AF03, 2, NotSerialized)
                {
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateWordField (ATIB, 0x02, SSDP)
                    CreateWordField (ATIB, 0x04, SCDP)
                    SSDP = Arg0
                    SCDP = Arg1
                    Name (NXTD, 0x06)
                    Name (CIDX, 0x06)
                    Local1 = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                    Local1 &= 0x8B
                    Local2 = SCDP /* \_SB_.PCI0.VGA_.AF03.SCDP */
                    If (CondRefOf (\_SB.LID._LID, Local4))
                    {
                        Local2 &= 0xFFFFFFFE
                        Local2 |= ^^^LID._LID ()
                    }
                    Else
                    {
                        Local2 |= One
                    }

                    P80H = Local2
                    Local0 = Zero
                    While ((Local0 < SizeOf (SACT)))
                    {
                        Local3 = DerefOf (SACT [Local0])
                        If ((Local3 == Local1))
                        {
                            CIDX = Local0
                            Local0 = SizeOf (SACT)
                        }
                        Else
                        {
                            Local0++
                        }
                    }

                    Local0 = CIDX /* \_SB_.PCI0.VGA_.AF03.CIDX */
                    While ((Local0 < SizeOf (SACT)))
                    {
                        Local0++
                        If ((Local0 == SizeOf (SACT)))
                        {
                            Local0 = Zero
                        }

                        Local3 = DerefOf (SACT [Local0])
                        If (((Local3 & Local2) == Local3))
                        {
                            NXTD = Local0
                            Local0 = SizeOf (SACT)
                        }
                    }

                    If ((NXTD == SizeOf (SACT)))
                    {
                        SSDP = Zero
                    }
                    Else
                    {
                        Local0 = NXTD /* \_SB_.PCI0.VGA_.AF03.NXTD */
                        Local3 = DerefOf (SACT [Local0])
                        SSDP &= 0xFFFFFFF4
                        SSDP |= Local3
                    }

                    SSZE = 0x04
                    P80H = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Method (AFN0, 0, Serialized)
                {
                    If ((MSKN & One))
                    {
                        CreateBitField (PSBR, Zero, PDSW)
                        PDSW = One
                        Notify (VGA, 0x81) // Information Change
                    }
                }

                Method (AFN3, 2, Serialized)
                {
                    If ((MSKN & 0x08))
                    {
                        Local0 = Arg0
                        SFPI = Local0
                        Local0 = Arg1
                        SFPG = Local0 &= 0x03
                        CreateBitField (PSBR, 0x03, PFPS)
                        PFPS = One
                        Notify (VGA, 0x81) // Information Change
                    }
                }

                Method (AFN4, 1, Serialized)
                {
                    If ((MSKN & 0x10))
                    {
                        Local0 = Arg0
                        Local1 = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                        SSPS = Local0
                        If ((Local0 == Local1)){}
                        Else
                        {
                            CreateBitField (PSBR, 0x04, PSPS)
                            PSPS = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }
                }

                Method (AFN5, 0, Serialized)
                {
                    If ((MSKN & 0x20))
                    {
                        CreateBitField (PSBR, 0x05, PDCC)
                        PDCC = One
                        Notify (VGA, 0x81) // Information Change
                    }
                }

                Method (AFN6, 0, Serialized)
                {
                    If ((MSKN & 0x40))
                    {
                        CreateBitField (PSBR, 0x06, PXPS)
                        PXPS = One
                        Notify (VGA, 0x81) // Information Change
                    }
                }

                Method (AF15, 0, NotSerialized)
                {
                    P80H = 0xFF
                    CreateWordField (ATIB, Zero, DNUM)
                    CreateWordField (ATIB, 0x02, DSZE)
                    CreateDWordField (ATIB, 0x04, FLAG)
                    CreateWordField (ATIB, 0x08, BUSN)
                    CreateWordField (ATIB, 0x0A, DEVN)
                    DSZE = 0x08
                    DNUM = One
                    FLAG = 0x04
                    BUSN = Zero
                    DEVN = One
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }

                Scope (\_SB.PCI0.VGA)
                {
                    OperationRegion (REVD, SystemMemory, 0xBFBBCD98, 0x00000008)
                    Field (REVD, AnyAcc, NoLock, Preserve)
                    {
                        SROM,   32, 
                        VROM,   32
                    }

                    Name (TVGA, Buffer (0x0004)
                    {
                         0x00                                             // .
                    })
                    Method (XTRM, 2, Serialized)
                    {
                        Local0 = (Arg0 + Arg1)
                        If ((Local0 <= SROM))
                        {
                            Local1 = (Arg1 * 0x08)
                            Local2 = (Arg0 * 0x08)
                            TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                            CreateField (TVGA, Local2, Local1, TEMP)
                            Name (RETB, Buffer (Arg1){})
                            RETB = TEMP /* \_SB_.PCI0.VGA_.XTRM.TEMP */
                            Return (RETB) /* \_SB_.PCI0.VGA_.XTRM.RETB */
                        }
                        ElseIf ((Arg0 < SROM))
                        {
                            Local3 = (SROM - Arg0)
                            Local1 = (Local3 * 0x08)
                            Local2 = (Arg0 * 0x08)
                            TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                            CreateField (TVGA, Local2, Local1, TEM)
                            Name (RETC, Buffer (Local3){})
                            RETC = TEM /* \_SB_.PCI0.VGA_.XTRM.TEM_ */
                            Return (RETC) /* \_SB_.PCI0.VGA_.XTRM.RETC */
                        }
                        Else
                        {
                            Name (RETD, Buffer (One){})
                            Return (RETD) /* \_SB_.PCI0.VGA_.XTRM.RETD */
                        }
                    }
                }

                Scope (\_SB.PCI0.VGA)
                {
                    Name (ATPB, Buffer (0x0100){})
                    Name (DSID, Ones)
                    Name (HSID, Ones)
                    Name (CNT0, Buffer (0x05)
                    {
                         0x05, 0x00, 0x00, 0x10, 0x01                     // .....
                    })
                    Name (CNT1, Buffer (0x05)
                    {
                         0x05, 0x01, 0x00, 0x00, 0x01                     // .....
                    })
                    Name (CNT2, Buffer (0x05)
                    {
                         0x07, 0x03, 0x00, 0x10, 0x02                     // .....
                    })
                    Name (CNT3, Buffer (0x05)
                    {
                         0x07, 0x07, 0x00, 0x20, 0x02                     // ... .
                    })
                    Name (CNT4, Buffer (0x05)
                    {
                         0x00, 0x09, 0x00, 0x30, 0x02                     // ...0.
                    })
                    Name (CNT5, Buffer (0x05)
                    {
                         0x01, 0x00, 0x01, 0x10, 0x01                     // .....
                    })
                    Name (CNT6, Buffer (0x05)
                    {
                         0x01, 0x01, 0x01, 0x00, 0x01                     // .....
                    })
                    Name (CNT7, Buffer (0x05)
                    {
                         0x03, 0x03, 0x01, 0x10, 0x02                     // .....
                    })
                    Name (CNT8, Buffer (0x05)
                    {
                         0x03, 0x07, 0x01, 0x20, 0x02                     // ... .
                    })
                    Name (CNT9, Buffer (0x05)
                    {
                         0x00, 0x09, 0x01, 0x30, 0x02                     // ...0.
                    })
                    Method (ATPX, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (PX00 ())
                        }

                        If ((Arg0 == One))
                        {
                            Return (PX01 ())
                        }

                        If ((Arg0 == 0x02))
                        {
                            PX02 (DerefOf (Arg1 [0x02]))
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((Arg0 == 0x03))
                        {
                            PX03 (DerefOf (Arg1 [0x02]))
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((Arg0 == 0x04))
                        {
                            PX04 (DerefOf (Arg1 [0x02]))
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((Arg0 == 0x08))
                        {
                            Return (PX08 ())
                        }

                        If ((Arg0 == 0x09))
                        {
                            Return (PX09 ())
                        }

                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, VERN)
                        CreateDWordField (ATPB, 0x04, SFUN)
                        SSZE = Zero
                        VERN = Zero
                        SFUN = Zero
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX00, 0, NotSerialized)
                    {
                        P80H = 0xE0
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, VERN)
                        CreateDWordField (ATPB, 0x04, SFUN)
                        SSZE = 0x08
                        VERN = One
                        If ((PFID == Zero))
                        {
                            SFUN = Zero
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((PXEN == 0x80000000))
                        {
                            SFUN = Zero
                            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                        }

                        If ((PXMX == 0x80000000))
                        {
                            SFUN = 0x018F
                        }
                        Else
                        {
                            SFUN = 0x03
                        }

                        If ((PXDY == 0x80000000))
                        {
                            SFUN &= 0xFFFFFFFE
                        }

                        If ((PXFX == 0x80000000))
                        {
                            SFUN &= 0xFFFFFFFD
                        }

                        SFUN = 0x03
                        If (((SSOS == One) || (OSTB == 0x80)))
                        {
                            SFUN &= 0xFFFFFFFE
                        }

                        If ((PXID == ^^PB2._ADR))
                        {
                            Local0 = ^^PB2.VGA.SVID /* \_SB_.PCI0.PB2_.VGA_.SVID */
                            Local1 = ^^PB2.HDAU.SVID /* \_SB_.PCI0.PB2_.HDAU.SVID */
                        }
                        Else
                        {
                            Local0 = ^^PB3.VGA.SVID /* \_SB_.PCI0.PB3_.VGA_.SVID */
                            Local1 = ^^PB3.HDAU.SVID /* \_SB_.PCI0.PB3_.HDAU.SVID */
                        }

                        If ((Local0 != Ones))
                        {
                            DSID = Local0
                        }

                        If ((Local1 != Ones))
                        {
                            HSID = Local1
                        }

                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX01, 0, NotSerialized)
                    {
                        P80H = 0xE1
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateDWordField (ATPB, 0x02, VMSK)
                        CreateDWordField (ATPB, 0x06, FLGS)
                        SSZE = 0x0A
                        VMSK = 0x07FF
                        If ((PXMX == 0x80000000))
                        {
                            FLGS = 0x4B
                        }
                        Else
                        {
                            FLGS = Zero
                            If ((PXDY == 0x80000001))
                            {
                                FLGS |= 0x0680
                            }

                            If ((PXDY == 0x80000002))
                            {
                                FLGS |= 0x0280
                            }
                        }

                        FLGS = 0x80
                        FLGS |= 0x0400
                        FLGS |= 0x0200
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX02, 1, NotSerialized)
                    {
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateByteField (ATPB, 0x02, PWST)
                        SSZE = 0x03
                        Local7 = Buffer (0x05){}
                        CreateWordField (Local7, Zero, SZZE)
                        CreateField (Local7, 0x10, 0x03, FUCC)
                        CreateField (Local7, 0x13, 0x05, DEVV)
                        CreateByteField (Local7, 0x03, BUSS)
                        CreateByteField (Local7, 0x04, HPST)
                        SZZE = 0x05
                        BUSS = Zero
                        FUCC = Zero
                        Local6 = Buffer (0x04){}
                        CreateByteField (Local6, 0x02, HPOX)
                        PWST = (Arg0 & One)
                        Name (HPOK, Zero)
                        If (PWST)
                        {
                            P80H = 0x11E2
                            If ((PXID == ^^PB2._ADR))
                            {
                                ^^PB2.PDC8 = Zero
                                ^^PB2.PDS8 = Zero
                                ^^PB2.HPC8 = Zero
                            }
                            Else
                            {
                                ^^PB3.PDC8 = Zero
                                ^^PB3.PDS8 = Zero
                                ^^PB3.HPC8 = Zero
                            }

                            ^^SMBS.O191 = Zero
                            ^^SMBS.E191 = Zero
                            ^^SMBS.O192 = Zero
                            ^^SMBS.E192 = Zero
                            Sleep (0x0A)
                            ^^SMBS.O192 = One
                            ^^SMBS.E192 = Zero
                            Sleep (0x64)
                            ^^SMBS.E028 = One
                            While ((^^SMBS.I028 == Zero)){}
                            Sleep (0x64)
                            ^^SMBS.O191 = One
                            ^^SMBS.E191 = Zero
                            P80H = 0x12E2
                            HPOK = Zero
                            Sleep (0x64)
                            Sleep (0x64)
                            If ((PXID == ^^PB2._ADR))
                            {
                                DEVV = 0x02
                            }
                            Else
                            {
                                DEVV = 0x03
                            }

                            HPST = One
                            0x06 = ALIB /* External reference */
                            Local7
                            Local6
                            Sleep (0x14)
                            Local2 = Zero
                            While ((Local2 < 0x0F))
                            {
                                If ((PXID == ^^PB2._ADR))
                                {
                                    ^^PB2.PDC2 = One
                                }
                                Else
                                {
                                    ^^PB3.PDC2 = One
                                }

                                Local4 = One
                                Local5 = 0xC8
                                While ((Local4 && Local5))
                                {
                                    If ((PXID == ^^PB2._ADR))
                                    {
                                        Local0 = ^^PB2.XPRD (0xA5)
                                    }
                                    Else
                                    {
                                        Local0 = ^^PB3.XPRD (0xA5)
                                    }

                                    Local0 &= 0x7F
                                    If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                                    {
                                        Local4 = Zero
                                    }
                                    Else
                                    {
                                        Sleep (0x05)
                                        Local5--
                                    }
                                }

                                If (!Local4)
                                {
                                    If ((PXID == ^^PB2._ADR))
                                    {
                                        Local5 = ^^PB2.XPDL ()
                                    }
                                    Else
                                    {
                                        Local5 = ^^PB3.XPDL ()
                                    }

                                    If (Local5)
                                    {
                                        If ((PXID == ^^PB2._ADR))
                                        {
                                            ^^PB2.XPRT ()
                                        }
                                        Else
                                        {
                                            ^^PB3.XPRT ()
                                        }

                                        Sleep (0x05)
                                        Local2++
                                    }
                                    Else
                                    {
                                        Local0 = Zero
                                        If ((PXID == ^^PB2._ADR))
                                        {
                                            If ((^^PB2.XPR2 () == Ones))
                                            {
                                                Local0 = One
                                            }
                                        }
                                        ElseIf ((^^PB3.XPR2 () == Ones))
                                        {
                                            Local0 = One
                                        }

                                        If (Local0)
                                        {
                                            HPOK = One
                                            Local2 = 0x10
                                        }
                                        Else
                                        {
                                            HPOK = Zero
                                            Local2 = 0x10
                                        }
                                    }
                                }
                                Else
                                {
                                    Local2 = 0x10
                                }
                            }

                            If (!HPOK)
                            {
                                P80H = 0x13E2
                                If ((PXID == ^^PB2._ADR))
                                {
                                    Local1 = ^^PB2.VGA.DVID /* \_SB_.PCI0.PB2_.VGA_.DVID */
                                }
                                Else
                                {
                                    Local1 = ^^PB3.VGA.DVID /* \_SB_.PCI0.PB3_.VGA_.DVID */
                                }

                                Sleep (0x0A)
                                Local4 = One
                                Local5 = 0x05
                                While ((Local4 && Local5))
                                {
                                    If ((PXID == ^^PB2._ADR))
                                    {
                                        Local0 = ^^PB2.XPRD (0xA5)
                                    }
                                    Else
                                    {
                                        Local0 = ^^PB3.XPRD (0xA5)
                                    }

                                    Local0 &= 0x7F
                                    If ((Local0 <= 0x04))
                                    {
                                        Local4 = Zero
                                    }
                                    Else
                                    {
                                        If ((PXID == ^^PB2._ADR))
                                        {
                                            Local1 = ^^PB2.VGA.DVID /* \_SB_.PCI0.PB2_.VGA_.DVID */
                                        }
                                        Else
                                        {
                                            Local1 = ^^PB3.VGA.DVID /* \_SB_.PCI0.PB3_.VGA_.DVID */
                                        }

                                        Sleep (0x05)
                                        Local5--
                                    }
                                }

                                If ((PXID == ^^PB2._ADR))
                                {
                                    DEVV = 0x02
                                }
                                Else
                                {
                                    DEVV = 0x03
                                }

                                HPST = Zero
                                ALIB
                                0x06
                                Local7
                            }

                            P80H = 0x14E2
                        }
                        Else
                        {
                            P80H = 0x02E2
                            If ((PXID == ^^PB2._ADR))
                            {
                                MUXF = 0x10
                            }
                            Else
                            {
                                MUXF = 0x18
                            }

                            ^^SMBS.O191 = Zero
                            ^^SMBS.E191 = Zero
                            Sleep (0x0A)
                            ^^SMBS.O192 = Zero
                            ^^SMBS.E192 = Zero
                            P80H = 0x03E2
                            If ((PXID == ^^PB2._ADR))
                            {
                                ^^PB2.PDC2 = One
                                Local1 = ^^PB2.VGA.DVID /* \_SB_.PCI0.PB2_.VGA_.DVID */
                            }
                            Else
                            {
                                ^^PB3.PDC2 = One
                                Local1 = ^^PB3.VGA.DVID /* \_SB_.PCI0.PB3_.VGA_.DVID */
                            }

                            Sleep (0x0A)
                            Local4 = One
                            Local5 = 0x05
                            While ((Local4 && Local5))
                            {
                                If ((PXID == ^^PB2._ADR))
                                {
                                    Local0 = ^^PB2.XPRD (0xA5)
                                }
                                Else
                                {
                                    Local0 = ^^PB3.XPRD (0xA5)
                                }

                                Local0 &= 0x7F
                                If ((Local0 <= 0x04))
                                {
                                    Local4 = Zero
                                }
                                Else
                                {
                                    If ((PXID == ^^PB2._ADR))
                                    {
                                        Local1 = ^^PB2.VGA.DVID /* \_SB_.PCI0.PB2_.VGA_.DVID */
                                    }
                                    Else
                                    {
                                        Local1 = ^^PB3.VGA.DVID /* \_SB_.PCI0.PB3_.VGA_.DVID */
                                    }

                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If ((PXID == ^^PB2._ADR))
                            {
                                DEVV = 0x02
                            }
                            Else
                            {
                                DEVV = 0x03
                            }

                            HPST = Zero
                            ALIB
                            0x06
                            Local7
                            HPOK = 0x02
                            P80H = 0x04E2
                        }

                        If (HPOK)
                        {
                            If (((HPOK == One) && (DSID != Ones)))
                            {
                                Local1 = DSID /* \_SB_.PCI0.VGA_.DSID */
                                If ((PXID == ^^PB2._ADR))
                                {
                                    ^^PB2.VGA.SMID = Local1
                                }
                                Else
                                {
                                    ^^PB3.VGA.SMID = Local1
                                }

                                Sleep (0x0A)
                                Local1 = HSID /* \_SB_.PCI0.VGA_.HSID */
                                If ((Local1 != Ones))
                                {
                                    If ((PXID == ^^PB2._ADR))
                                    {
                                        ^^PB2.HDAU.SMID = Local1
                                    }
                                    Else
                                    {
                                        ^^PB3.HDAU.SMID = Local1
                                    }
                                }

                                Sleep (0x0A)
                            }

                            If ((PXID == ^^PB2._ADR)){}
                            Else
                            {
                            }
                        }
                    }

                    Method (PX03, 1, NotSerialized)
                    {
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, DPSW)
                        SSZE = 0x04
                        DPSW = (Arg0 & One)
                    }

                    Method (PX04, 1, NotSerialized)
                    {
                        P80H = 0xE4
                        CreateWordField (ATPB, Zero, SSZE)
                        CreateWordField (ATPB, 0x02, ICSW)
                        SSZE = 0x04
                        ICSW = (Arg0 & One)
                    }

                    Method (PX08, 0, NotSerialized)
                    {
                        P80H = 0xE8
                        CreateWordField (ATPB, Zero, CNUM)
                        CreateWordField (ATPB, 0x02, CSSZ)
                        CNUM = 0x0A
                        CSSZ = 0x05
                        CreateField (ATPB, 0x20, 0x28, CTI0)
                        CTI0 = CNT0 /* \_SB_.PCI0.VGA_.CNT0 */
                        CreateField (ATPB, 0x48, 0x28, CTI1)
                        CTI1 = CNT1 /* \_SB_.PCI0.VGA_.CNT1 */
                        CreateField (ATPB, 0x70, 0x28, CTI2)
                        CreateByteField (CNT2, Zero, FLG2)
                        If ((LPTY == One))
                        {
                            If ((M92D == One))
                            {
                                FLG2 = Zero
                            }

                            If ((M92D == 0x02))
                            {
                                FLG2 = 0x07
                            }
                        }

                        CTI2 = CNT2 /* \_SB_.PCI0.VGA_.CNT2 */
                        CreateField (ATPB, 0x98, 0x28, CTI3)
                        CreateByteField (CNT3, Zero, FLG3)
                        If ((LPTY == Zero))
                        {
                            FLG3 = 0x07
                        }

                        If ((LPTY == One))
                        {
                            FLG3 = Zero
                        }

                        If ((LPTY == 0x02))
                        {
                            FLG3 = Zero
                        }

                        If ((M92D == 0x02))
                        {
                            FLG3 = 0x07
                        }

                        CTI3 = CNT3 /* \_SB_.PCI0.VGA_.CNT3 */
                        CreateField (ATPB, 0xC0, 0x28, CTI4)
                        CTI4 = CNT4 /* \_SB_.PCI0.VGA_.CNT4 */
                        CreateField (ATPB, 0xE8, 0x28, CTI5)
                        CTI5 = CNT5 /* \_SB_.PCI0.VGA_.CNT5 */
                        CreateField (ATPB, 0x0110, 0x28, CTI6)
                        CTI6 = CNT6 /* \_SB_.PCI0.VGA_.CNT6 */
                        CreateField (ATPB, 0x0138, 0x28, CTI7)
                        CreateByteField (CNT7, Zero, FLG7)
                        If ((LPTY == One))
                        {
                            If ((M92D == One))
                            {
                                FLG7 = Zero
                            }

                            If ((M92D == 0x02))
                            {
                                FLG7 = Zero
                            }
                        }

                        CTI7 = CNT7 /* \_SB_.PCI0.VGA_.CNT7 */
                        CreateField (ATPB, 0x0160, 0x28, CTI8)
                        CreateByteField (CNT8, Zero, FLG8)
                        If ((LPTY == Zero))
                        {
                            FLG8 = 0x07
                        }

                        If ((LPTY == One))
                        {
                            FLG8 = Zero
                        }

                        If ((LPTY == 0x02))
                        {
                            FLG8 = Zero
                        }

                        If ((M92D == 0x02))
                        {
                            FLG8 = 0x07
                        }

                        CTI8 = CNT8 /* \_SB_.PCI0.VGA_.CNT8 */
                        CreateField (ATPB, 0x0188, 0x28, CTI9)
                        CreateByteField (CNT9, Zero, FLG9)
                        If ((M92D == 0x02))
                        {
                            FLG9 = 0x07
                        }

                        CTI9 = CNT9 /* \_SB_.PCI0.VGA_.CNT9 */
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }

                    Method (PX09, 0, NotSerialized)
                    {
                        P80H = 0xE9
                        CreateWordField (ATPB, Zero, CNUM)
                        CreateWordField (ATPB, 0x02, CSSZ)
                        CNUM = Zero
                        CSSZ = Zero
                        CreateByteField (ATPB, 0x04, ATI0)
                        CreateByteField (ATPB, 0x05, HPD0)
                        CreateByteField (ATPB, 0x06, DDC0)
                        ATI0 = Zero
                        HPD0 = Zero
                        DDC0 = Zero
                        CreateByteField (ATPB, 0x07, ATI1)
                        CreateByteField (ATPB, 0x08, HPD1)
                        CreateByteField (ATPB, 0x09, DDC1)
                        ATI1 = Zero
                        HPD1 = Zero
                        DDC1 = Zero
                        Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
                    }
                }

                Name (AT00, Buffer (0xFF){})
                Name (AT01, Buffer (0x03){})
                Method (ATCS, 2, Serialized)
                {
                    If ((Arg0 == Zero))
                    {
                        ATC0 ()
                    }

                    If ((Arg0 == One))
                    {
                        ATC1 ()
                    }

                    If ((Arg0 == 0x02))
                    {
                        ATC2 (Arg1)
                    }

                    If ((Arg0 == 0x03))
                    {
                        ATC3 ()
                    }

                    If ((Arg0 == 0x04))
                    {
                        ATC4 (Arg1)
                    }

                    Return (AT00) /* \_SB_.PCI0.VGA_.AT00 */
                }

                Method (ATC0, 0, NotSerialized)
                {
                    CreateWordField (AT00, Zero, SZZE)
                    CreateWordField (AT00, 0x02, INTF)
                    CreateDWordField (AT00, 0x04, SUPP)
                    SZZE = 0x08
                    INTF = One
                    SUPP = 0x0F
                }

                Method (ATC1, 0, Serialized)
                {
                    CreateWordField (AT00, Zero, SZZE)
                    CreateDWordField (AT00, 0x02, VFMK)
                    CreateDWordField (AT00, 0x06, FLAG)
                    CreateField (AT00, 0x30, One, DOCK)
                    SZZE = 0x0A
                    VFMK = One
                    FLAG = Zero
                    DOCK = One
                }

                Method (ATC2, 1, Serialized)
                {
                    CreateField (Arg0, 0x10, 0x03, FUCC)
                    CreateField (Arg0, 0x13, 0x06, DEVV)
                    CreateByteField (Arg0, 0x03, BUSS)
                    CreateDWordField (Arg0, 0x04, VFMK)
                    CreateDWordField (Arg0, 0x06, FLAG)
                    CreateField (Arg0, 0x30, One, ADVC)
                    CreateField (Arg0, 0x31, One, WFCM)
                    CreateByteField (Arg0, 0x08, RQST)
                    CreateByteField (Arg0, 0x09, PFRQ)
                    CreateWordField (AT00, Zero, SZZE)
                    CreateByteField (AT00, 0x02, RETV)
                    SZZE = 0x03
                    RETV = One
                    0x02 = ALIB /* External reference */
                    Arg0
                    AT00
                }

                Method (ATC3, 0, Serialized)
                {
                    CreateWordField (AT00, Zero, SZZE)
                    CreateByteField (AT00, 0x02, RETV)
                    CreateWordField (AT01, Zero, SZZB)
                    CreateByteField (AT01, 0x02, PSPP)
                    SZZE = 0x03
                    RETV = One
                    SZZB = 0x03
                    PSPP = One
                    0x03 = ALIB /* External reference */
                    AT01
                    AT00
                }

                Method (ATC4, 1, Serialized)
                {
                    CreateField (Arg0, 0x10, 0x03, FUCC)
                    CreateField (Arg0, 0x13, 0x06, DEVV)
                    CreateByteField (Arg0, 0x03, BUSS)
                    CreateByteField (Arg0, 0x04, NULN)
                    CreateWordField (AT00, Zero, SZZE)
                    CreateByteField (AT00, 0x02, NULM)
                    SZZE = 0x03
                    NULM = One
                    0x04 = ALIB /* External reference */
                    Arg0
                    AT00
                }
            }

            Device (PB2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Name (PR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.PCI0.PB2_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PCI0.PB2_.PR02 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF8010100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x18), 
                        ,   3, 
                    PDC8,   1, 
                        ,   2, 
                    PDS8,   1, 
                    Offset (0x19), 
                    HPC8,   1, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB2_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB2_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB2_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB2_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSA, Zero)
                    Name (CRTA, Zero)
                    Name (LCDA, One)
                    Name (TV0A, Zero)
                    Name (HDTV, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Name (DODL, Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                        Return (DODL) /* \_SB_.PCI0.PB2_.VGA_._DOD.DODL */
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (Package (0x0D)
                            {
                                0x64, 
                                0x46, 
                                Zero, 
                                0x0A, 
                                0x14, 
                                0x1E, 
                                0x28, 
                                0x32, 
                                0x3C, 
                                0x46, 
                                0x50, 
                                0x5A, 
                                0x64
                            })
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            Stall (0xFF)
                            Stall (0xFF)
                            Acquire (^^^^LPC0.PSMX, 0xFFFF)
                            BCMD = 0x73
                            BSMI (Zero)
                            Release (^^^^LPC0.PSMX)
                            Stall (0xFF)
                            Stall (0xFF)
                            Return (BRTL) /* \BRTL */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Stall (0xFF)
                            Stall (0xFF)
                            Acquire (^^^^LPC0.PSMX, 0xFFFF)
                            BRTL = Arg0
                            BCMD = 0x72
                            BSMI (Zero)
                            Release (^^^^LPC0.PSMX)
                            Stall (0xFF)
                            Stall (0xFF)
                        }
                    }

                    Device (HDMI)
                    {
                        Name (_ADR, 0x0210)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If (HDTV)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If (HDTV)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (CRT)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If (CRTA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If (CRTA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (TV)
                    {
                        Name (_ADR, 0x0200)  // _ADR: Address
                        Name (_DCS, Zero)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                    }

                    Device (DP)
                    {
                        Name (_ADR, 0x0220)  // _ADR: Address
                        Name (_DCS, Zero)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Name (ATIB, Buffer (0x0100){})
                    Method (ATIF, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (AF00 ())
                        }

                        If ((Arg0 == One))
                        {
                            Return (AF01 ())
                        }

                        If ((Arg0 == 0x02))
                        {
                            Return (AF02 ())
                        }

                        If ((Arg0 == 0x03))
                        {
                            Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
                        }

                        If ((Arg0 == 0x0F))
                        {
                            Return (AF15 ())
                        }
                        Else
                        {
                            CreateWordField (ATIB, Zero, SSZE)
                            CreateWordField (ATIB, 0x02, VERN)
                            CreateDWordField (ATIB, 0x04, NMSK)
                            CreateDWordField (ATIB, 0x08, SFUN)
                            SSZE = Zero
                            VERN = Zero
                            NMSK = Zero
                            SFUN = Zero
                            Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                        }
                    }

                    Method (AF00, 0, NotSerialized)
                    {
                        ^^^VGA.AZPS &= 0xC0000001
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = 0x0C
                        VERN = One
                        If ((^^^VGA.PXEN == 0x80000000))
                        {
                            NMSK = 0x11
                        }
                        Else
                        {
                            NMSK = 0x51
                        }

                        MSKN = NMSK /* \_SB_.PCI0.PB2_.VGA_.AF00.NMSK */
                        SFUN = 0x4007
                        Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                    }

                    Method (AF01, 0, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateDWordField (ATIB, 0x02, VMSK)
                        CreateDWordField (ATIB, 0x06, FLGS)
                        SSZE = 0x0A
                        VMSK = 0x03
                        FLGS = One
                        Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                    }

                    Name (PSBR, Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (MSKN, Zero)
                    Name (SEXM, Zero)
                    Name (STHG, Zero)
                    Name (STHI, Zero)
                    Name (SFPG, Zero)
                    Name (SFPI, Zero)
                    Name (SSPS, Zero)
                    Name (SSDM, 0x0A)
                    Name (SCDY, Zero)
                    Name (SACT, Buffer (0x07)
                    {
                         0x01, 0x02, 0x08, 0x80, 0x03, 0x09, 0x81         // .......
                    })
                    Method (AF02, 0, NotSerialized)
                    {
                        CreateBitField (PSBR, Zero, PDSW)
                        CreateBitField (PSBR, One, PEXM)
                        CreateBitField (PSBR, 0x02, PTHR)
                        CreateBitField (PSBR, 0x03, PFPS)
                        CreateBitField (PSBR, 0x04, PSPS)
                        CreateBitField (PSBR, 0x05, PDCC)
                        CreateBitField (PSBR, 0x06, PXPS)
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateDWordField (ATIB, 0x02, PSBI)
                        CreateByteField (ATIB, 0x06, EXPM)
                        CreateByteField (ATIB, 0x07, THRM)
                        CreateByteField (ATIB, 0x08, THID)
                        CreateByteField (ATIB, 0x09, FPWR)
                        CreateByteField (ATIB, 0x0A, FPID)
                        CreateByteField (ATIB, 0x0B, SPWR)
                        SSZE = 0x0C
                        PSBI = PSBR /* \_SB_.PCI0.PB2_.VGA_.PSBR */
                        If (PDSW)
                        {
                            PDSW = Zero
                        }

                        If (PEXM)
                        {
                            EXPM = SEXM /* \_SB_.PCI0.PB2_.VGA_.SEXM */
                            SEXM = Zero
                            PEXM = Zero
                        }

                        If (PTHR)
                        {
                            THRM = STHG /* \_SB_.PCI0.PB2_.VGA_.STHG */
                            THID = STHI /* \_SB_.PCI0.PB2_.VGA_.STHI */
                            STHG = Zero
                            STHI = Zero
                            PTHR = Zero
                        }

                        If (PFPS)
                        {
                            FPWR = SFPG /* \_SB_.PCI0.PB2_.VGA_.SFPG */
                            FPWR = SFPI /* \_SB_.PCI0.PB2_.VGA_.SFPI */
                            SFPG = Zero
                            SFPI = Zero
                            PFPS = Zero
                        }

                        If (PSPS)
                        {
                            SPWR = SSPS /* \_SB_.PCI0.PB2_.VGA_.SSPS */
                            PSPS = Zero
                        }

                        If (PXPS)
                        {
                            PXPS = Zero
                        }

                        Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                    }

                    Method (AF03, 2, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, SSDP)
                        CreateWordField (ATIB, 0x04, SCDP)
                        SSDP = Arg0
                        SCDP = Arg1
                        Name (NXTD, 0x06)
                        Name (CIDX, 0x06)
                        Local1 = SSDP /* \_SB_.PCI0.PB2_.VGA_.AF03.SSDP */
                        Local1 &= 0x8B
                        Local2 = SCDP /* \_SB_.PCI0.PB2_.VGA_.AF03.SCDP */
                        If (CondRefOf (\_SB.LID._LID, Local4))
                        {
                            Local2 &= 0xFFFFFFFE
                            Local2 |= ^^^^LID._LID ()
                        }
                        Else
                        {
                            Local2 |= One
                        }

                        P80H = Local2
                        Local0 = Zero
                        While ((Local0 < SizeOf (SACT)))
                        {
                            Local3 = DerefOf (SACT [Local0])
                            If ((Local3 == Local1))
                            {
                                CIDX = Local0
                                Local0 = SizeOf (SACT)
                            }
                            Else
                            {
                                Local0++
                            }
                        }

                        Local0 = CIDX /* \_SB_.PCI0.PB2_.VGA_.AF03.CIDX */
                        While ((Local0 < SizeOf (SACT)))
                        {
                            Local0++
                            If ((Local0 == SizeOf (SACT)))
                            {
                                Local0 = Zero
                            }

                            Local3 = DerefOf (SACT [Local0])
                            If (((Local3 & Local2) == Local3))
                            {
                                NXTD = Local0
                                Local0 = SizeOf (SACT)
                            }
                        }

                        If ((NXTD == SizeOf (SACT)))
                        {
                            SSDP = Zero
                        }
                        Else
                        {
                            Local0 = NXTD /* \_SB_.PCI0.PB2_.VGA_.AF03.NXTD */
                            Local3 = DerefOf (SACT [Local0])
                            SSDP &= 0xFFFFFFF4
                            SSDP |= Local3
                        }

                        SSZE = 0x04
                        P80H = SSDP /* \_SB_.PCI0.PB2_.VGA_.AF03.SSDP */
                        Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                    }

                    Method (AFN0, 0, Serialized)
                    {
                        If ((MSKN & One))
                        {
                            CreateBitField (PSBR, Zero, PDSW)
                            PDSW = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AFN3, 2, Serialized)
                    {
                        If ((MSKN & 0x08))
                        {
                            Local0 = Arg0
                            SFPI = Local0
                            Local0 = Arg1
                            SFPG = Local0 &= 0x03
                            CreateBitField (PSBR, 0x03, PFPS)
                            PFPS = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AFN4, 1, Serialized)
                    {
                        If ((MSKN & 0x10))
                        {
                            Local0 = Arg0
                            Local1 = SSPS /* \_SB_.PCI0.PB2_.VGA_.SSPS */
                            SSPS = Local0
                            If ((Local0 == Local1)){}
                            Else
                            {
                                CreateBitField (PSBR, 0x04, PSPS)
                                PSPS = One
                                Notify (VGA, 0x81) // Information Change
                            }
                        }
                    }

                    Method (AFN5, 0, Serialized)
                    {
                        If ((MSKN & 0x20))
                        {
                            CreateBitField (PSBR, 0x05, PDCC)
                            PDCC = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AFN6, 0, Serialized)
                    {
                        If ((MSKN & 0x40))
                        {
                            CreateBitField (PSBR, 0x06, PXPS)
                            PXPS = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AF15, 0, NotSerialized)
                    {
                        P80H = 0xFF
                        CreateWordField (ATIB, Zero, DNUM)
                        CreateWordField (ATIB, 0x02, DSZE)
                        CreateDWordField (ATIB, 0x04, FLAG)
                        CreateWordField (ATIB, 0x08, BUSN)
                        CreateWordField (ATIB, 0x0A, DEVN)
                        DSZE = 0x08
                        DNUM = One
                        FLAG = 0x04
                        BUSN = Zero
                        DEVN = One
                        Return (ATIB) /* \_SB_.PCI0.PB2_.VGA_.ATIB */
                    }

                    Name (AT00, Buffer (0xFF){})
                    Name (AT01, Buffer (0x03){})
                    Method (ATCS, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            ATC0 ()
                        }

                        If ((Arg0 == One))
                        {
                            ATC1 ()
                        }

                        If ((Arg0 == 0x02))
                        {
                            ATC2 (Arg1)
                        }

                        If ((Arg0 == 0x03))
                        {
                            ATC3 ()
                        }

                        If ((Arg0 == 0x04))
                        {
                            ATC4 (Arg1)
                        }

                        Return (AT00) /* \_SB_.PCI0.PB2_.VGA_.AT00 */
                    }

                    Method (ATC0, 0, NotSerialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateWordField (AT00, 0x02, INTF)
                        CreateDWordField (AT00, 0x04, SUPP)
                        SZZE = 0x08
                        INTF = One
                        SUPP = 0x0F
                    }

                    Method (ATC1, 0, Serialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateDWordField (AT00, 0x02, VFMK)
                        CreateDWordField (AT00, 0x06, FLAG)
                        CreateField (AT00, 0x30, One, DOCK)
                        SZZE = 0x0A
                        VFMK = One
                        FLAG = Zero
                        DOCK = One
                    }

                    Method (ATC2, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateDWordField (Arg0, 0x04, VFMK)
                        CreateDWordField (Arg0, 0x06, FLAG)
                        CreateField (Arg0, 0x30, One, ADVC)
                        CreateField (Arg0, 0x31, One, WFCM)
                        CreateByteField (Arg0, 0x08, RQST)
                        CreateByteField (Arg0, 0x09, PFRQ)
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, RETV)
                        SZZE = 0x03
                        RETV = One
                        0x02 = ALIB /* External reference */
                        Arg0
                        AT00
                    }

                    Method (ATC3, 0, Serialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, RETV)
                        CreateWordField (AT01, Zero, SZZB)
                        CreateByteField (AT01, 0x02, PSPP)
                        SZZE = 0x03
                        RETV = One
                        SZZB = 0x03
                        PSPP = One
                        0x03 = ALIB /* External reference */
                        AT01
                        AT00
                    }

                    Method (ATC4, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateByteField (Arg0, 0x04, NULN)
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, NULM)
                        SZZE = 0x03
                        NULM = One
                        0x04 = ALIB /* External reference */
                        Arg0
                        AT00
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }
                }
            }

            Device (PB3)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Name (PR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKC, 
                        Zero
                    }
                })
                Name (AR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x12
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.PCI0.PB3_.AR03 */
                    }

                    Return (PR03) /* \_SB_.PCI0.PB3_.PR03 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF8018100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x18), 
                        ,   3, 
                    PDC8,   1, 
                        ,   2, 
                    PDS8,   1, 
                    Offset (0x19), 
                    HPC8,   1, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB3_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB3_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB3_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB3_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSA, Zero)
                    Name (CRTA, Zero)
                    Name (LCDA, One)
                    Name (TV0A, Zero)
                    Name (HDTV, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Name (DODL, Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                        Return (DODL) /* \_SB_.PCI0.PB3_.VGA_._DOD.DODL */
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (Package (0x0D)
                            {
                                0x64, 
                                0x46, 
                                Zero, 
                                0x0A, 
                                0x14, 
                                0x1E, 
                                0x28, 
                                0x32, 
                                0x3C, 
                                0x46, 
                                0x50, 
                                0x5A, 
                                0x64
                            })
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            Stall (0xFF)
                            Stall (0xFF)
                            Acquire (^^^^LPC0.PSMX, 0xFFFF)
                            BCMD = 0x73
                            BSMI (Zero)
                            Release (^^^^LPC0.PSMX)
                            Stall (0xFF)
                            Stall (0xFF)
                            Return (BRTL) /* \BRTL */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Stall (0xFF)
                            Stall (0xFF)
                            Acquire (^^^^LPC0.PSMX, 0xFFFF)
                            BRTL = Arg0
                            BCMD = 0x72
                            BSMI (Zero)
                            Release (^^^^LPC0.PSMX)
                            Stall (0xFF)
                            Stall (0xFF)
                        }
                    }

                    Device (HDMI)
                    {
                        Name (_ADR, 0x0210)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If (HDTV)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If (HDTV)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (CRT)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            If (CRTA)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x1D)
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If (CRTA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (TV)
                    {
                        Name (_ADR, 0x0200)  // _ADR: Address
                        Name (_DCS, Zero)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                    }

                    Device (DP)
                    {
                        Name (_ADR, 0x0220)  // _ADR: Address
                        Name (_DCS, Zero)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Name (ATIB, Buffer (0x0100){})
                    Method (ATIF, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (AF00 ())
                        }

                        If ((Arg0 == One))
                        {
                            Return (AF01 ())
                        }

                        If ((Arg0 == 0x02))
                        {
                            Return (AF02 ())
                        }

                        If ((Arg0 == 0x03))
                        {
                            Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
                        }

                        If ((Arg0 == 0x0F))
                        {
                            Return (AF15 ())
                        }
                        Else
                        {
                            CreateWordField (ATIB, Zero, SSZE)
                            CreateWordField (ATIB, 0x02, VERN)
                            CreateDWordField (ATIB, 0x04, NMSK)
                            CreateDWordField (ATIB, 0x08, SFUN)
                            SSZE = Zero
                            VERN = Zero
                            NMSK = Zero
                            SFUN = Zero
                            Return (ATIB) /* \_SB_.PCI0.PB3_.VGA_.ATIB */
                        }
                    }

                    Method (AF00, 0, NotSerialized)
                    {
                        ^^^VGA.AZPS &= 0xC0000001
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = 0x0C
                        VERN = One
                        If ((^^^VGA.PXEN == 0x80000000))
                        {
                            NMSK = 0x11
                        }
                        Else
                        {
                            NMSK = 0x51
                        }

                        MSKN = NMSK /* \_SB_.PCI0.PB3_.VGA_.AF00.NMSK */
                        SFUN = 0x4007
                        Return (ATIB) /* \_SB_.PCI0.PB3_.VGA_.ATIB */
                    }

                    Method (AF01, 0, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateDWordField (ATIB, 0x02, VMSK)
                        CreateDWordField (ATIB, 0x06, FLGS)
                        SSZE = 0x0A
                        VMSK = 0x03
                        FLGS = One
                        Return (ATIB) /* \_SB_.PCI0.PB3_.VGA_.ATIB */
                    }

                    Name (PSBR, Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (MSKN, Zero)
                    Name (SEXM, Zero)
                    Name (STHG, Zero)
                    Name (STHI, Zero)
                    Name (SFPG, Zero)
                    Name (SFPI, Zero)
                    Name (SSPS, Zero)
                    Name (SSDM, 0x0A)
                    Name (SCDY, Zero)
                    Name (SACT, Buffer (0x07)
                    {
                         0x01, 0x02, 0x08, 0x80, 0x03, 0x09, 0x81         // .......
                    })
                    Method (AF02, 0, NotSerialized)
                    {
                        CreateBitField (PSBR, Zero, PDSW)
                        CreateBitField (PSBR, One, PEXM)
                        CreateBitField (PSBR, 0x02, PTHR)
                        CreateBitField (PSBR, 0x03, PFPS)
                        CreateBitField (PSBR, 0x04, PSPS)
                        CreateBitField (PSBR, 0x05, PDCC)
                        CreateBitField (PSBR, 0x06, PXPS)
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateDWordField (ATIB, 0x02, PSBI)
                        CreateByteField (ATIB, 0x06, EXPM)
                        CreateByteField (ATIB, 0x07, THRM)
                        CreateByteField (ATIB, 0x08, THID)
                        CreateByteField (ATIB, 0x09, FPWR)
                        CreateByteField (ATIB, 0x0A, FPID)
                        CreateByteField (ATIB, 0x0B, SPWR)
                        SSZE = 0x0C
                        PSBI = PSBR /* \_SB_.PCI0.PB3_.VGA_.PSBR */
                        If (PDSW)
                        {
                            PDSW = Zero
                        }

                        If (PEXM)
                        {
                            EXPM = SEXM /* \_SB_.PCI0.PB3_.VGA_.SEXM */
                            SEXM = Zero
                            PEXM = Zero
                        }

                        If (PTHR)
                        {
                            THRM = STHG /* \_SB_.PCI0.PB3_.VGA_.STHG */
                            THID = STHI /* \_SB_.PCI0.PB3_.VGA_.STHI */
                            STHG = Zero
                            STHI = Zero
                            PTHR = Zero
                        }

                        If (PFPS)
                        {
                            FPWR = SFPG /* \_SB_.PCI0.PB3_.VGA_.SFPG */
                            FPWR = SFPI /* \_SB_.PCI0.PB3_.VGA_.SFPI */
                            SFPG = Zero
                            SFPI = Zero
                            PFPS = Zero
                        }

                        If (PSPS)
                        {
                            SPWR = SSPS /* \_SB_.PCI0.PB3_.VGA_.SSPS */
                            PSPS = Zero
                        }

                        If (PXPS)
                        {
                            PXPS = Zero
                        }

                        Return (ATIB) /* \_SB_.PCI0.PB3_.VGA_.ATIB */
                    }

                    Method (AF03, 2, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, SSDP)
                        CreateWordField (ATIB, 0x04, SCDP)
                        SSDP = Arg0
                        SCDP = Arg1
                        Name (NXTD, 0x06)
                        Name (CIDX, 0x06)
                        Local1 = SSDP /* \_SB_.PCI0.PB3_.VGA_.AF03.SSDP */
                        Local1 &= 0x8B
                        Local2 = SCDP /* \_SB_.PCI0.PB3_.VGA_.AF03.SCDP */
                        If (CondRefOf (\_SB.LID._LID, Local4))
                        {
                            Local2 &= 0xFFFFFFFE
                            Local2 |= ^^^^LID._LID ()
                        }
                        Else
                        {
                            Local2 |= One
                        }

                        P80H = Local2
                        Local0 = Zero
                        While ((Local0 < SizeOf (SACT)))
                        {
                            Local3 = DerefOf (SACT [Local0])
                            If ((Local3 == Local1))
                            {
                                CIDX = Local0
                                Local0 = SizeOf (SACT)
                            }
                            Else
                            {
                                Local0++
                            }
                        }

                        Local0 = CIDX /* \_SB_.PCI0.PB3_.VGA_.AF03.CIDX */
                        While ((Local0 < SizeOf (SACT)))
                        {
                            Local0++
                            If ((Local0 == SizeOf (SACT)))
                            {
                                Local0 = Zero
                            }

                            Local3 = DerefOf (SACT [Local0])
                            If (((Local3 & Local2) == Local3))
                            {
                                NXTD = Local0
                                Local0 = SizeOf (SACT)
                            }
                        }

                        If ((NXTD == SizeOf (SACT)))
                        {
                            SSDP = Zero
                        }
                        Else
                        {
                            Local0 = NXTD /* \_SB_.PCI0.PB3_.VGA_.AF03.NXTD */
                            Local3 = DerefOf (SACT [Local0])
                            SSDP &= 0xFFFFFFF4
                            SSDP |= Local3
                        }

                        SSZE = 0x04
                        P80H = SSDP /* \_SB_.PCI0.PB3_.VGA_.AF03.SSDP */
                        Return (ATIB) /* \_SB_.PCI0.PB3_.VGA_.ATIB */
                    }

                    Method (AFN0, 0, Serialized)
                    {
                        If ((MSKN & One))
                        {
                            CreateBitField (PSBR, Zero, PDSW)
                            PDSW = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AFN3, 2, Serialized)
                    {
                        If ((MSKN & 0x08))
                        {
                            Local0 = Arg0
                            SFPI = Local0
                            Local0 = Arg1
                            SFPG = Local0 &= 0x03
                            CreateBitField (PSBR, 0x03, PFPS)
                            PFPS = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AFN4, 1, Serialized)
                    {
                        If ((MSKN & 0x10))
                        {
                            Local0 = Arg0
                            Local1 = SSPS /* \_SB_.PCI0.PB3_.VGA_.SSPS */
                            SSPS = Local0
                            If ((Local0 == Local1)){}
                            Else
                            {
                                CreateBitField (PSBR, 0x04, PSPS)
                                PSPS = One
                                Notify (VGA, 0x81) // Information Change
                            }
                        }
                    }

                    Method (AFN5, 0, Serialized)
                    {
                        If ((MSKN & 0x20))
                        {
                            CreateBitField (PSBR, 0x05, PDCC)
                            PDCC = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AFN6, 0, Serialized)
                    {
                        If ((MSKN & 0x40))
                        {
                            CreateBitField (PSBR, 0x06, PXPS)
                            PXPS = One
                            Notify (VGA, 0x81) // Information Change
                        }
                    }

                    Method (AF15, 0, NotSerialized)
                    {
                        P80H = 0xFF
                        CreateWordField (ATIB, Zero, DNUM)
                        CreateWordField (ATIB, 0x02, DSZE)
                        CreateDWordField (ATIB, 0x04, FLAG)
                        CreateWordField (ATIB, 0x08, BUSN)
                        CreateWordField (ATIB, 0x0A, DEVN)
                        DSZE = 0x08
                        DNUM = One
                        FLAG = 0x04
                        BUSN = Zero
                        DEVN = One
                        Return (ATIB) /* \_SB_.PCI0.PB3_.VGA_.ATIB */
                    }

                    Name (AT00, Buffer (0xFF){})
                    Name (AT01, Buffer (0x03){})
                    Method (ATCS, 2, Serialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            ATC0 ()
                        }

                        If ((Arg0 == One))
                        {
                            ATC1 ()
                        }

                        If ((Arg0 == 0x02))
                        {
                            ATC2 (Arg1)
                        }

                        If ((Arg0 == 0x03))
                        {
                            ATC3 ()
                        }

                        If ((Arg0 == 0x04))
                        {
                            ATC4 (Arg1)
                        }

                        Return (AT00) /* \_SB_.PCI0.PB3_.VGA_.AT00 */
                    }

                    Method (ATC0, 0, NotSerialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateWordField (AT00, 0x02, INTF)
                        CreateDWordField (AT00, 0x04, SUPP)
                        SZZE = 0x08
                        INTF = One
                        SUPP = 0x0F
                    }

                    Method (ATC1, 0, Serialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateDWordField (AT00, 0x02, VFMK)
                        CreateDWordField (AT00, 0x06, FLAG)
                        CreateField (AT00, 0x30, One, DOCK)
                        SZZE = 0x0A
                        VFMK = One
                        FLAG = Zero
                        DOCK = One
                    }

                    Method (ATC2, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateDWordField (Arg0, 0x04, VFMK)
                        CreateDWordField (Arg0, 0x06, FLAG)
                        CreateField (Arg0, 0x30, One, ADVC)
                        CreateField (Arg0, 0x31, One, WFCM)
                        CreateByteField (Arg0, 0x08, RQST)
                        CreateByteField (Arg0, 0x09, PFRQ)
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, RETV)
                        SZZE = 0x03
                        RETV = One
                        0x02 = ALIB /* External reference */
                        Arg0
                        AT00
                    }

                    Method (ATC3, 0, Serialized)
                    {
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, RETV)
                        CreateWordField (AT01, Zero, SZZB)
                        CreateByteField (AT01, 0x02, PSPP)
                        SZZE = 0x03
                        RETV = One
                        SZZB = 0x03
                        PSPP = One
                        0x03 = ALIB /* External reference */
                        AT01
                        AT00
                    }

                    Method (ATC4, 1, Serialized)
                    {
                        CreateField (Arg0, 0x10, 0x03, FUCC)
                        CreateField (Arg0, 0x13, 0x06, DEVV)
                        CreateByteField (Arg0, 0x03, BUSS)
                        CreateByteField (Arg0, 0x04, NULN)
                        CreateWordField (AT00, Zero, SZZE)
                        CreateByteField (AT00, 0x02, NULM)
                        SZZE = 0x03
                        NULM = One
                        0x04 = ALIB /* External reference */
                        Arg0
                        AT00
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }
                }
            }

            Device (PB4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Name (PR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.PCI0.PB4_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PCI0.PB4_.PR04 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF8020100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x18), 
                        ,   3, 
                    PDC8,   1, 
                        ,   2, 
                    PDS8,   1, 
                    Offset (0x19), 
                    HPC8,   1, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB4_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB4_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB4_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB4_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (PB5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Name (PR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKA, 
                        Zero
                    }
                })
                Name (AR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x10
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.PCI0.PB5_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PCI0.PB5_.PR05 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF8028100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x18), 
                        ,   3, 
                    PDC8,   1, 
                        ,   2, 
                    PDS8,   1, 
                    Offset (0x19), 
                    HPC8,   1, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB5_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB5_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB5_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB5_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (PB6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Name (PR06, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR06, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.PCI0.PB6_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PCI0.PB6_.PR06 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF9030100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x18), 
                        ,   3, 
                    PDC8,   1, 
                        ,   2, 
                    PDS8,   1, 
                    Offset (0x19), 
                    HPC8,   1, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB6_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB6_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB6_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB6_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0xFF)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32, 
                        Offset (0xCA), 
                        RGCA,   8, 
                        DISF,   8, 
                        FIFO,   8
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x09)
                    }
                }

                Device (XPD3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0xFF)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32, 
                        Offset (0xAC), 
                        VDID,   32, 
                        Offset (0xE1), 
                        MISC,   8, 
                        Offset (0xFD), 
                        PLLM,   8
                    }
                }
            }

            Device (PB7)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Name (PR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKC, 
                        Zero
                    }
                })
                Name (AR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x12
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.PCI0.PB7_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PCI0.PB7_.PR07 */
                }

                OperationRegion (XPEX, SystemMemory, 0xF8038100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x18), 
                        ,   3, 
                    PDC8,   1, 
                        ,   2, 
                    PDS8,   1, 
                    Offset (0x19), 
                    HPC8,   1, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If ((VC0S & 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PB7_.XPID */
                    XPIR = Zero
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PB7_.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PB7_.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PB7_._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPPR, 1, NotSerialized)
                {
                    Name (HPOK, Zero)
                    HPOK = Zero
                    Local0 = (XPPB () << 0x03)
                    If (Arg0)
                    {
                        XPLL (Local0, One)
                        XPLP (Local0, One)
                        Sleep (0xC8)
                        XPTR (Local0, One)
                        Local5 = 0x0F
                        While ((!HPOK && (Local5 > Zero)))
                        {
                            PDC2 = One
                            Local1 = 0x28
                            While ((!HPOK && (Local1 > Zero)))
                            {
                                Local2 = XPRD (0xA5)
                                If (((Local2 & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If ((((Local2 >> 0x08) & 0xFF) == 0x3F))
                                {
                                    Local1 = One
                                }

                                If (((Local2 & 0xFF) >= 0x04))
                                {
                                    HPOK = One
                                }

                                Local1--
                            }

                            If (HPOK)
                            {
                                Local2 = (XPRD (0xA5) & 0xFF)
                                Local3 = ((XPRD (0xA2) >> 0x04) & 0x07)
                                If (((Local2 == 0x06) && ((Local3 > One) && (Local3 < 0x05))))
                                {
                                    HPOK = Zero
                                }
                            }

                            If (HPOK)
                            {
                                Local1 = 0x07D0
                                HPOK = Zero
                                While ((!HPOK && Local1))
                                {
                                    Local2 = (XPRD (0xA5) & 0xFF)
                                    If ((Local2 == 0x07))
                                    {
                                        Local1 = One
                                        Local4 = XPDL ()
                                        If (Local4)
                                        {
                                            XPRT ()
                                            Local5--
                                        }
                                    }

                                    If ((Local2 == 0x10))
                                    {
                                        HPOK = One
                                    }

                                    Sleep (One)
                                    Local1--
                                }
                            }
                        }
                    }

                    If (HPOK)
                    {
                        XPTR (Local0, Zero)
                        XPLP (Local0, Zero)
                        XPLL (Local0, Zero)
                    }

                    Return (Ones)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (SPB0)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Name (PR0A, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR0A, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.PCI0.SPB0.AR0A */
                    }

                    Return (PR0A) /* \_SB_.PCI0.SPB0.PR0A */
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.SPB0._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local2 = (Local1 << 0x03)
                    Local1 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (SPB1)
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (ECON)
                    {
                        ^^LPC0.EC0.LANP = Arg0
                    }

                    PSWF = Arg0
                }

                Name (PR0B, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKA, 
                        Zero
                    }
                })
                Name (AR0B, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x10
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.PCI0.SPB1.AR0B */
                    }

                    Return (PR0B) /* \_SB_.PCI0.SPB1.PR0B */
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.SPB1._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local2 = (Local1 << 0x03)
                    Local1 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0xFF)
                    Field (PCFG, AnyAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32, 
                        Offset (0x45), 
                        LPSW,   1
                    }
                }
            }

            Device (SPB2)
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Name (PR0C, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR0C, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.PCI0.SPB2.AR0C */
                    }

                    Return (PR0C) /* \_SB_.PCI0.SPB2.PR0C */
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.SPB2._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local2 = (Local1 << 0x03)
                    Local1 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (SPB3)
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Name (PR0D, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKC, 
                        Zero
                    }
                })
                Name (AR0D, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x12
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D) /* \_SB_.PCI0.SPB3.AR0D */
                    }

                    Return (PR0D) /* \_SB_.PCI0.SPB3.PR0D */
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((HPAD & 0x03) == 0x03))
                    {
                        If ((OSTB >= 0x40))
                        {
                            Return (0x0F)
                        }

                        HPAD = (HPAD & 0xFFFFFFE0)
                        Return (One)
                    }

                    Return (One)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y04)
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y04._BAS, HPEB)  // _BAS: Base Address
                    Local0 = HPAD /* \HPAD */
                    HPEB = (Local0 & 0xFFFFFC00)
                    Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
                }
            }

            Device (AZAL)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, Zero, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }
            }

            Device (OHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                OperationRegion (O1CS, PCI_Config, 0xC4, 0x04)
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (OHC2)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT3)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                        {
                            ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "TOP",
                                PLD_VerticalPosition   = "UPPER",
                                PLD_HorizontalPosition = "LEFT",
                                PLD_Shape              = "HORIZONTALRECTANGLE",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)

                        })
                    }
                }
            }

            Device (OHC3)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (OHC4)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                OperationRegion (PCFG, PCI_Config, 0xA0, 0x04)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    OSOW,   32
                }

                Method (STOS, 0, NotSerialized)
                {
                    OSOW |= 0x01000000
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT2)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                        {
                            ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "TOP",
                                PLD_VerticalPosition   = "UPPER",
                                PLD_HorizontalPosition = "LEFT",
                                PLD_Shape              = "HORIZONTALRECTANGLE",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)

                        })
                    }
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                OperationRegion (PCFG, PCI_Config, 0xA0, 0x04)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    OSOW,   32
                }

                Method (STOS, 0, NotSerialized)
                {
                    OSOW |= 0x01000000
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }
            }

            Device (EHC3)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
                OperationRegion (PCFG, PCI_Config, 0xA0, 0x04)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    OSOW,   32
                }

                Method (STOS, 0, NotSerialized)
                {
                    OSOW |= 0x01000000
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }
            }

            Device (XHC0)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }
            }

            Device (XHC1)
            {
                Name (_ADR, 0x00100001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (IRQF, PCI_Config, Zero, 0x0100)
                Field (IRQF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    RVID,   8
                }

                OperationRegion (ERMM, SystemMemory, MMSO, 0x1000)
                Field (ERMM, AnyAcc, NoLock, Preserve)
                {
                    Offset (0xFF), 
                        ,   5, 
                    E000,   1, 
                    O000,   1, 
                    I000,   1, 
                        ,   5, 
                    E001,   1, 
                    O001,   1, 
                    I001,   1, 
                    Offset (0x105), 
                        ,   5, 
                    E006,   1, 
                    O006,   1, 
                    I006,   1, 
                        ,   5, 
                    E007,   1, 
                    O007,   1, 
                    I007,   1, 
                    Offset (0x10A), 
                        ,   5, 
                    E011,   1, 
                    O011,   1, 
                    I011,   1, 
                        ,   5, 
                    E012,   1, 
                    O012,   1, 
                    I012,   1, 
                        ,   5, 
                    E013,   1, 
                    O013,   1, 
                    I013,   1, 
                        ,   5, 
                    E014,   1, 
                    O014,   1, 
                    I014,   1, 
                        ,   5, 
                    E015,   1, 
                    O015,   1, 
                    I015,   1, 
                        ,   5, 
                    E016,   1, 
                    O016,   1, 
                    I016,   1, 
                    Offset (0x113), 
                        ,   5, 
                    E020,   1, 
                    O020,   1, 
                    I020,   1, 
                        ,   5, 
                    E021,   1, 
                    O021,   1, 
                    I021,   1, 
                        ,   5, 
                    E022,   1, 
                    O022,   1, 
                    I022,   1, 
                        ,   5, 
                    E023,   1, 
                    O023,   1, 
                    I023,   1, 
                        ,   5, 
                    E024,   1, 
                    O024,   1, 
                    I024,   1, 
                        ,   5, 
                    E025,   1, 
                    O025,   1, 
                    I025,   1, 
                    Offset (0x11A), 
                        ,   5, 
                    E027,   1, 
                    O027,   1, 
                    I027,   1, 
                        ,   5, 
                    E028,   1, 
                    O028,   1, 
                    I028,   1, 
                        ,   5, 
                    E029,   1, 
                    O029,   1, 
                    I029,   1, 
                    Offset (0x11F), 
                        ,   5, 
                    E032,   1, 
                    O032,   1, 
                    I032,   1, 
                    Offset (0x122), 
                        ,   5, 
                    E035,   1, 
                    O035,   1, 
                    I035,   1, 
                    Offset (0x128), 
                        ,   1, 
                    H041,   1, 
                    S041,   1, 
                    U041,   1, 
                    D041,   1, 
                    E041,   1, 
                    O041,   1, 
                    I041,   1, 
                    Offset (0x12B), 
                        ,   5, 
                    E044,   1, 
                    O044,   1, 
                    I044,   1, 
                        ,   5, 
                    E045,   1, 
                    O045,   1, 
                    I045,   1, 
                        ,   1, 
                    H046,   1, 
                    S046,   1, 
                    U046,   1, 
                    D046,   1, 
                    E046,   1, 
                    O046,   1, 
                    I046,   1, 
                    Offset (0x132), 
                        ,   5, 
                    E051,   1, 
                    O051,   1, 
                    I051,   1, 
                        ,   5, 
                    E052,   1, 
                    O052,   1, 
                    I052,   1, 
                        ,   5, 
                    E053,   1, 
                    O053,   1, 
                    I053,   1, 
                    Offset (0x136), 
                        ,   5, 
                    E055,   1, 
                    O055,   1, 
                    I055,   1, 
                        ,   5, 
                    E056,   1, 
                    O056,   1, 
                    I056,   1, 
                        ,   5, 
                    E057,   1, 
                    O057,   1, 
                    I057,   1, 
                        ,   5, 
                    E058,   1, 
                    O058,   1, 
                    I058,   1, 
                        ,   5, 
                    E059,   1, 
                    O059,   1, 
                    I059,   1, 
                    Offset (0x13C), 
                        ,   1, 
                    H061,   1, 
                    S061,   1, 
                    U061,   1, 
                    D061,   1, 
                    E061,   1, 
                    O061,   1, 
                    I061,   1, 
                        ,   1, 
                    H062,   1, 
                    S062,   1, 
                    U062,   1, 
                    D062,   1, 
                    E062,   1, 
                    O062,   1, 
                    I062,   1, 
                        ,   1, 
                    H063,   1, 
                    S063,   1, 
                    U063,   1, 
                    D063,   1, 
                    E063,   1, 
                    O063,   1, 
                    I063,   1, 
                        ,   1, 
                    H064,   1, 
                    S064,   1, 
                    U064,   1, 
                    D064,   1, 
                    E064,   1, 
                    O064,   1, 
                    I064,   1, 
                    Offset (0x141), 
                        ,   5, 
                    E066,   1, 
                    O066,   1, 
                    I066,   1, 
                    Offset (0x162), 
                        ,   7, 
                    GE03,   1, 
                        ,   7, 
                    GE04,   1, 
                        ,   7, 
                    GE05,   1, 
                        ,   7, 
                    GE06,   1, 
                    Offset (0x16A), 
                        ,   7, 
                    GE09,   1, 
                        ,   7, 
                    GE12,   1, 
                        ,   7, 
                    GE13,   1, 
                        ,   7, 
                    GE14,   1, 
                        ,   7, 
                    GE15,   1, 
                        ,   7, 
                    GE16,   1, 
                    Offset (0x175), 
                        ,   7, 
                    GE22,   1, 
                    Offset (0x1A5), 
                        ,   5, 
                    E166,   1, 
                    O166,   1, 
                    I166,   1, 
                    Offset (0x1A9), 
                        ,   5, 
                    E170,   1, 
                    O170,   1, 
                    I170,   1, 
                        ,   5, 
                    E171,   1, 
                    O171,   1, 
                    I171,   1, 
                    Offset (0x1AE), 
                        ,   5, 
                    E175,   1, 
                    O175,   1, 
                    I175,   1, 
                        ,   5, 
                    E176,   1, 
                    O176,   1, 
                    I176,   1, 
                        ,   5, 
                    E177,   1, 
                    O177,   1, 
                    I177,   1, 
                        ,   5, 
                    E178,   1, 
                    O178,   1, 
                    I178,   1, 
                        ,   5, 
                    E179,   1, 
                    O179,   1, 
                    I179,   1, 
                        ,   5, 
                    E180,   1, 
                    O180,   1, 
                    I180,   1, 
                        ,   5, 
                    E181,   1, 
                    O181,   1, 
                    I181,   1, 
                        ,   5, 
                    E182,   1, 
                    O182,   1, 
                    I182,   1, 
                    Offset (0x1B7), 
                        ,   3, 
                    U184,   1, 
                    D184,   1, 
                    E184,   1, 
                    O184,   1, 
                    I184,   1, 
                    Offset (0x1BC), 
                        ,   5, 
                    E189,   1, 
                    O189,   1, 
                    I189,   1, 
                    Offset (0x1BE), 
                        ,   5, 
                    E191,   1, 
                    O191,   1, 
                    I191,   1, 
                        ,   5, 
                    E192,   1, 
                    O192,   1, 
                    I192,   1, 
                    Offset (0x1C4), 
                        ,   5, 
                    E197,   1, 
                    O197,   1, 
                    I197,   1, 
                    Offset (0x1C6), 
                        ,   5, 
                    E199,   1, 
                    O199,   1, 
                    I199,   1, 
                        ,   5, 
                    E200,   1, 
                    O200,   1, 
                    I200,   1, 
                    Offset (0x1FF), 
                        ,   1, 
                    G01S,   1, 
                        ,   3, 
                    G05S,   1, 
                        ,   8, 
                    G14S,   1, 
                    G15S,   1, 
                    G16S,   1, 
                        ,   5, 
                    G22S,   1, 
                    G23S,   1, 
                    Offset (0x203), 
                        ,   1, 
                    G01E,   1, 
                        ,   3, 
                    G05E,   1, 
                        ,   8, 
                    G14E,   1, 
                    G15E,   1, 
                    G16E,   1, 
                        ,   5, 
                    G22E,   1, 
                    G23E,   1, 
                    Offset (0x207), 
                        ,   1, 
                    G01T,   1, 
                        ,   3, 
                    G05T,   1, 
                    G06T,   1, 
                        ,   6, 
                    G13T,   1, 
                    G14T,   1, 
                    G15T,   1, 
                    G16T,   1, 
                        ,   5, 
                    G22T,   1, 
                    G23T,   1, 
                    Offset (0x20B), 
                        ,   1, 
                    G01L,   1, 
                        ,   3, 
                    G05L,   1, 
                        ,   9, 
                    G15L,   1, 
                    G16L,   1, 
                        ,   5, 
                    G22L,   1, 
                    G23L,   1, 
                    Offset (0x287), 
                        ,   1, 
                    CLPS,   1, 
                    Offset (0x298), 
                        ,   7, 
                    G15A,   1, 
                    Offset (0x2AF), 
                        ,   2, 
                    SLPS,   2, 
                    Offset (0x32B), 
                    SM0E,   1, 
                    Offset (0x32D), 
                        ,   1, 
                    SM0S,   2, 
                    Offset (0x361), 
                        ,   6, 
                    MT3A,   1, 
                    Offset (0x376), 
                    EPNM,   1, 
                    DPPF,   1, 
                    Offset (0x3BA), 
                        ,   6, 
                    PWDE,   1, 
                    Offset (0x3BD), 
                        ,   5, 
                    ALLS,   1, 
                    Offset (0x3C7), 
                        ,   2, 
                    TFTE,   1, 
                    Offset (0x3DE), 
                    BLNK,   2, 
                    Offset (0x3EF), 
                    PHYD,   1, 
                    Offset (0x3FF), 
                    F0CT,   8, 
                    F0MS,   8, 
                    F0FQ,   8, 
                    F0LD,   8, 
                    F0MD,   8, 
                    F0MP,   8, 
                    LT0L,   8, 
                    LT0H,   8, 
                    MT0L,   8, 
                    MT0H,   8, 
                    HT0L,   8, 
                    HT0H,   8, 
                    LRG0,   8, 
                    LHC0,   8, 
                    Offset (0x40F), 
                    F1CT,   8, 
                    F1MS,   8, 
                    F1FQ,   8, 
                    F1LD,   8, 
                    F1MD,   8, 
                    F1MP,   8, 
                    LT1L,   8, 
                    LT1H,   8, 
                    MT1L,   8, 
                    MT1H,   8, 
                    HT1L,   8, 
                    HT1H,   8, 
                    LRG1,   8, 
                    LHC1,   8, 
                    Offset (0x41F), 
                    F2CT,   8, 
                    F2MS,   8, 
                    F2FQ,   8, 
                    F2LD,   8, 
                    F2MD,   8, 
                    F2MP,   8, 
                    LT2L,   8, 
                    LT2H,   8, 
                    MT2L,   8, 
                    MT2H,   8, 
                    HT2L,   8, 
                    HT2H,   8, 
                    LRG2,   8, 
                    LHC2,   8, 
                    Offset (0x42F), 
                    F3CT,   8, 
                    F3MS,   8, 
                    F3FQ,   8, 
                    F3LD,   8, 
                    F3MD,   8, 
                    F3MP,   8, 
                    LT3L,   8, 
                    LT3H,   8, 
                    MT3L,   8, 
                    MT3H,   8, 
                    HT3L,   8, 
                    HT3H,   8, 
                    LRG3,   8, 
                    LHC3,   8, 
                    Offset (0x6FF), 
                    SEC,    8, 
                    Offset (0x701), 
                    MIN,    8, 
                    Offset (0xD06), 
                    MX07,   8, 
                    Offset (0xD0E), 
                    MX15,   8, 
                    MX16,   8, 
                    Offset (0xD14), 
                    MX21,   8, 
                    MX22,   8, 
                    MX23,   8, 
                    Offset (0xD1A), 
                    MX27,   8, 
                    MX28,   8, 
                    Offset (0xD1F), 
                    MX32,   8, 
                    Offset (0xD22), 
                    MX35,   8, 
                    Offset (0xD2B), 
                    MX44,   8, 
                    Offset (0xD32), 
                    MX51,   8, 
                    Offset (0xD34), 
                    MX53,   8, 
                    Offset (0xD38), 
                    MX57,   8, 
                    MX58,   8, 
                    MX59,   8, 
                    Offset (0xD41), 
                    MX66,   8, 
                    Offset (0xD65), 
                    M102,   8, 
                    Offset (0xD6D), 
                    M110,   8, 
                    Offset (0xDA9), 
                    M170,   8, 
                    Offset (0xDAE), 
                    M175,   8, 
                    M176,   8, 
                    M177,   8, 
                    Offset (0xDB3), 
                    M180,   8, 
                    Offset (0xDB5), 
                    M182,   8, 
                    Offset (0xDC4), 
                    M197,   8, 
                    Offset (0xDC7), 
                    M200,   8, 
                    Offset (0xDFF), 
                    MS00,   8, 
                    MS01,   8, 
                    MS02,   8, 
                    MS03,   8, 
                    MS04,   8, 
                    Offset (0xE3F), 
                    MS40,   8, 
                    Offset (0xE80), 
                        ,   2, 
                    ECES,   1
                }

                OperationRegion (ERM1, SystemMemory, MMSO, 0x1000)
                Field (ERM1, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x100), 
                        ,   5, 
                    P01E,   1, 
                    P01O,   1, 
                    P01I,   1, 
                    Offset (0x105), 
                        ,   5, 
                    P06E,   1, 
                    P06O,   1, 
                    P06I,   1, 
                        ,   5, 
                    P07E,   1, 
                    P07O,   1, 
                    P07I,   1, 
                    Offset (0x10A), 
                        ,   5, 
                    P0BE,   1, 
                    P0BO,   1, 
                    P0BI,   1, 
                        ,   5, 
                    P0CE,   1, 
                    P0CO,   1, 
                    P0CI,   1, 
                        ,   5, 
                    P0DE,   1, 
                    P0DO,   1, 
                    P0DI,   1, 
                        ,   5, 
                    P0EE,   1, 
                    P0EO,   1, 
                    P0EI,   1, 
                        ,   5, 
                    P0FE,   1, 
                    P0FO,   1, 
                    P0FI,   1, 
                        ,   5, 
                    P10E,   1, 
                    P10O,   1, 
                    P10I,   1, 
                    Offset (0x113), 
                        ,   5, 
                    P14E,   1, 
                    P14O,   1, 
                    P14I,   1, 
                        ,   5, 
                    P15E,   1, 
                    P15O,   1, 
                    P15I,   1, 
                    Offset (0x11A), 
                        ,   5, 
                    P1BE,   1, 
                    P1BO,   1, 
                    P1BI,   1, 
                    Offset (0x11F), 
                        ,   5, 
                    P20E,   1, 
                    P20O,   1, 
                    P20I,   1, 
                        ,   5, 
                    P21E,   1, 
                    P21O,   1, 
                    P21I,   1, 
                        ,   5, 
                    P22E,   1, 
                    P22O,   1, 
                    P22I,   1, 
                        ,   5, 
                    P23E,   1, 
                    P23O,   1, 
                    P23I,   1, 
                    Offset (0x128), 
                        ,   5, 
                    P29E,   1, 
                    P29O,   1, 
                    P29I,   1, 
                    Offset (0x12B), 
                        ,   5, 
                    P2CE,   1, 
                    P2CO,   1, 
                    P2CI,   1, 
                        ,   5, 
                    P2DE,   1, 
                    P2DO,   1, 
                    P2DI,   1, 
                    PO2E,   8, 
                    Offset (0x132), 
                        ,   5, 
                    P33E,   1, 
                    P33O,   1, 
                    P33I,   1, 
                    Offset (0x134), 
                        ,   5, 
                    P35E,   1, 
                    P35O,   1, 
                    P35I,   1, 
                    Offset (0x136), 
                        ,   5, 
                    P37E,   1, 
                    P37O,   1, 
                    P37I,   1, 
                    Offset (0x138), 
                        ,   5, 
                    P39E,   1, 
                    P39O,   1, 
                    P39I,   1, 
                    Offset (0x13A), 
                        ,   5, 
                    P3BE,   1, 
                    P3BO,   1, 
                    P3BI,   1, 
                    Offset (0x13C), 
                    PO3D,   8, 
                    PO3E,   8, 
                    PO3F,   8, 
                    PO40,   8, 
                    Offset (0x164), 
                        ,   7, 
                    Offset (0x165), 
                        ,   5, 
                    P66E,   1, 
                    P66O,   1, 
                    P66I,   1, 
                    Offset (0x16A), 
                    Offset (0x16B), 
                        ,   5, 
                    P6CE,   1, 
                    P6CO,   1, 
                    P6CI,   1, 
                    Offset (0x16E), 
                        ,   7, 
                    Offset (0x16F), 
                        ,   7, 
                    Offset (0x170), 
                    Offset (0x174), 
                    Offset (0x175), 
                        ,   7, 
                    Offset (0x176), 
                    Offset (0x1A5), 
                    POA6,   8, 
                    Offset (0x1A9), 
                        ,   5, 
                    PAAE,   1, 
                    PAAO,   1, 
                    PAAI,   1, 
                    Offset (0x1AE), 
                        ,   5, 
                    PAFE,   1, 
                    PAFO,   1, 
                    PAFI,   1, 
                        ,   5, 
                    PB0E,   1, 
                    PB0O,   1, 
                    PB0I,   1, 
                        ,   5, 
                    PB1E,   1, 
                    PB1O,   1, 
                    PB1I,   1, 
                        ,   5, 
                    PB2E,   1, 
                    PB2O,   1, 
                    PB2I,   1, 
                        ,   5, 
                    PB3E,   1, 
                    PB3O,   1, 
                    PB3I,   1, 
                        ,   5, 
                    PB4E,   1, 
                    PB4O,   1, 
                    PB4I,   1, 
                        ,   5, 
                    PB5E,   1, 
                    PB5O,   1, 
                    PB5I,   1, 
                        ,   5, 
                    PB6E,   1, 
                    PB6O,   1, 
                    PB6I,   1, 
                    Offset (0x1C6), 
                        ,   5, 
                    PC7E,   1, 
                    PC7O,   1, 
                    PC7I,   1, 
                        ,   5, 
                    PC8E,   1, 
                    PC8O,   1, 
                    PC8I,   1, 
                    Offset (0x207), 
                        ,   1, 
                        ,   1, 
                        ,   3, 
                        ,   1, 
                        ,   9, 
                    Offset (0x209), 
                        ,   1, 
                        ,   5, 
                        ,   1, 
                        ,   3, 
                    E26C,   1, 
                    Offset (0xD00), 
                    MX01,   8, 
                    Offset (0xD1F), 
                    Offset (0xD20), 
                    MX33,   8, 
                    MX34,   8, 
                    Offset (0xD28), 
                    MX41,   8, 
                    Offset (0xDA9), 
                    Offset (0xDB3), 
                    Offset (0xDB4), 
                    M181,   8, 
                    Offset (0xDB6), 
                    Offset (0xDC6), 
                    M199,   8, 
                    Offset (0xDFF)
                }

                Mutex (SBX0, 0x00)
                OperationRegion (SMB0, SystemIO, 0x0B00, 0x10)
                Field (SMB0, ByteAcc, NoLock, Preserve)
                {
                    HST0,   8, 
                    SLV0,   8, 
                    CNT0,   8, 
                    CMD0,   8, 
                    ADD0,   8, 
                    DT00,   8, 
                    DT10,   8, 
                    BLK0,   8
                }

                Method (WBD0, 1, NotSerialized)
                {
                    Local0 = Arg0
                    Local2 = Zero
                    Local3 = HST0 /* \_SB_.PCI0.SMBS.HST0 */
                    Local1 = (Local3 & 0x80)
                    While ((Local1 != 0x80))
                    {
                        If ((Local0 < 0x0A))
                        {
                            Local2 = 0x18
                            Local1 = Zero
                        }
                        Else
                        {
                            Sleep (0x0A)
                            Local0 -= 0x0A
                            Local3 = HST0 /* \_SB_.PCI0.SMBS.HST0 */
                            Local1 = (Local3 & 0x80)
                        }
                    }

                    If ((Local2 != 0x18))
                    {
                        Local1 = (HST0 & 0x1C)
                        If (Local1)
                        {
                            Local2 = 0x07
                        }
                    }

                    Return (Local2)
                }

                Method (WTC0, 1, NotSerialized)
                {
                    Local0 = Arg0
                    Local2 = 0x07
                    Local1 = One
                    While ((Local1 == One))
                    {
                        Local3 = (HST0 & 0x1D)
                        If ((Local3 != Zero))
                        {
                            If ((Local3 == One))
                            {
                                If ((Local0 < 0x0A))
                                {
                                    Local2 = 0x18
                                    Local1 = Zero
                                }
                                Else
                                {
                                    Sleep (0x0A)
                                    Local0 -= 0x0A
                                }
                            }
                            Else
                            {
                                Local2 = 0x07
                                Local1 = Zero
                            }
                        }
                        Else
                        {
                            Local2 = Zero
                            Local1 = Zero
                        }
                    }

                    HST0 = (HST0 | 0x1F)
                    Return (Local2)
                }

                Method (SBR0, 3, NotSerialized)
                {
                    Local0 = Package (0x03)
                        {
                            0x07, 
                            Zero, 
                            Zero
                        }
                    Local4 = (Arg0 & 0x5F)
                    If ((Local4 != 0x03))
                    {
                        If ((Local4 != 0x05))
                        {
                            If ((Local4 != 0x07))
                            {
                                If ((Local4 != 0x09))
                                {
                                    If ((Local4 != 0x0B))
                                    {
                                        Local0 [Zero] = 0x19
                                        Return (Local0)
                                    }
                                }
                            }
                        }
                    }

                    If ((Acquire (SBX0, 0xFFFF) == Zero))
                    {
                        ADD0 = ((Arg1 << One) | One)
                        CMD0 = Arg2
                        HST0 = (HST0 | 0x1F)
                        Local1 = (Arg0 & 0xA0)
                        CNT0 = ((CNT0 & 0x5F) | Local1)
                        If ((Local4 == 0x03))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x40)
                        }

                        If ((Local4 == 0x05))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x44)
                        }

                        If ((Local4 == 0x07))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x48)
                        }

                        If ((Local4 == 0x09))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x4C)
                        }

                        If ((Local4 == 0x0B))
                        {
                            HST0 = (HST0 | 0x80)
                            DT00 = Zero
                            CNT0 = ((CNT0 & 0xA0) | 0x54)
                        }

                        Local1 = WTC0 (0x03E8)
                        Local0 [Zero] = Local1
                        If ((Local1 == Zero))
                        {
                            If ((Local4 == 0x05))
                            {
                                Local0 [One] = One
                                Local0 [0x02] = DT00 /* \_SB_.PCI0.SMBS.DT00 */
                            }

                            If ((Local4 == 0x07))
                            {
                                Local0 [One] = One
                                Local0 [0x02] = DT00 /* \_SB_.PCI0.SMBS.DT00 */
                            }

                            If ((Local4 == 0x09))
                            {
                                Local0 [One] = 0x02
                                Local2 = DT10 /* \_SB_.PCI0.SMBS.DT10 */
                                Local2 <<= 0x08
                                Local2 += DT00 /* \_SB_.PCI0.SMBS.DT00 */
                                Local0 [0x02] = Local2
                            }

                            If ((Local4 == 0x0B))
                            {
                                Local1 = WBD0 (0x01F4)
                                If ((Local1 != Zero))
                                {
                                    Local0 [Zero] = Local1
                                }
                                Else
                                {
                                    Local0 [One] = DT00 /* \_SB_.PCI0.SMBS.DT00 */
                                    Local1 = DT00 /* \_SB_.PCI0.SMBS.DT00 */
                                    Local2 = CNT0 /* \_SB_.PCI0.SMBS.CNT0 */
                                    Local2 = Zero
                                    While ((Local2 < Local1))
                                    {
                                        Local3 = (0x02 + Local2)
                                        Local0 [Local3] = BLK0 /* \_SB_.PCI0.SMBS.BLK0 */
                                        Local2 += One
                                    }

                                    HST0 = (HST0 | 0x80)
                                }
                            }
                        }

                        CNT0 = (CNT0 & 0x5F)
                        Release (SBX0)
                    }

                    Return (Local0)
                }

                Method (SBW0, 5, NotSerialized)
                {
                    Local0 = Package (0x01)
                        {
                            0x07
                        }
                    Local4 = (Arg0 & 0x5F)
                    If ((Local4 != 0x02))
                    {
                        If ((Local4 != 0x04))
                        {
                            If ((Local4 != 0x06))
                            {
                                If ((Local4 != 0x08))
                                {
                                    If ((Local4 != 0x0A))
                                    {
                                        Local0 [Zero] = 0x19
                                        Return (Local0)
                                    }
                                }
                            }
                        }
                    }

                    If ((Acquire (SBX0, 0xFFFF) == Zero))
                    {
                        ADD0 = (Arg1 << One)
                        CMD0 = Arg2
                        HST0 = (HST0 | 0x1F)
                        Local1 = (Arg0 & 0xA0)
                        CNT0 = ((CNT0 & 0x5F) | Local1)
                        If ((Local4 == 0x02))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x40)
                        }

                        If ((Local4 == 0x04))
                        {
                            CNT0 = ((CNT0 & 0xA0) | 0x44)
                        }

                        If ((Local4 == 0x06))
                        {
                            DT00 = Arg4
                            CNT0 = ((CNT0 & 0xA0) | 0x48)
                        }

                        If ((Local4 == 0x08))
                        {
                            DT00 = (Arg4 & 0xFF)
                            DT10 = (Arg4 >> 0x08)
                            CNT0 = ((CNT0 & 0xA0) | 0x4C)
                        }

                        If ((Local4 == 0x0A))
                        {
                            HST0 = (HST0 | 0x80)
                            Local1 = CNT0 /* \_SB_.PCI0.SMBS.CNT0 */
                            DT00 = Arg3
                            Local2 = Zero
                            While ((Local2 < Arg3))
                            {
                                BLK0 = Arg4 [Local2]
                                Local2 += One
                            }

                            CNT0 = ((CNT0 & 0xA0) | 0x54)
                        }

                        Local0 [Zero] = WTC0 (0x03E8)
                        CNT0 = (CNT0 & 0x5F)
                        Release (SBX0)
                    }

                    Return (Local0)
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Mutex (PSMX, 0x00)
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (((HPAD & 0x03) == 0x03))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }

                    OperationRegion (RTCR, SystemCMOS, Zero, 0x40)
                    Field (RTCR, ByteAcc, NoLock, Preserve)
                    {
                        RTSE,   8, 
                        Offset (0x02), 
                        RTMN,   8, 
                        Offset (0x04), 
                        RTHR,   8, 
                        Offset (0x06), 
                        RTDY,   8, 
                        RTDE,   8, 
                        RTMH,   8, 
                        RTYR,   8
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (((HPAD & 0x03) == 0x03))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TMR_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TMR_.BUF1 */
                    }
                }

                Device (KBC0)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x1A, 
                        0x03
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBWU = Arg0
                    }
                }

                Device (PS2M)
                {
                    Method (_HID, 0, Serialized)  // _HID: Hardware ID
                    {
                        Switch ((PSZE & 0x03))
                        {
                            Case (Zero)
                            {
                                Return ("*SYN1E63")
                            }
                            Case (One)
                            {
                                Return ("*SYN1E64")
                            }
                            Case (0x02)
                            {
                                Return ("*SYN1E65")
                            }
                            Default
                            {
                                Return ("PNP0F13")
                            }

                        }
                    }

                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN1E00"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x1A, 
                        0x03
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        TPWU = Arg0
                    }
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x077A,             // Range Minimum
                            0x077A,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        IO (Decode16,
                            0x0840,             // Range Minimum
                            0x0840,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0380,             // Range Minimum
                            0x0380,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFF00000,         // Address Base
                            0x00100000,         // Address Length
                            _Y05)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y05._LEN, PSIZ)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y05._BAS, PBAS)  // _BAS: Base Address
                        PSIZ = ROMS /* \ROMS */
                        Local0 = (ROMS - One)
                        PBAS = (Ones - Local0)
                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BFFR, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                        })
                        Return (BFFR) /* \_SB_.PCI0.LPC0.EC0_._CRS.BFFR */
                    }

                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        SMPR,   8, 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCM,   8, 
                        SMD0,   256, 
                        BCNT,   8, 
                        SMAA,   8, 
                        BATD,   16, 
                        Offset (0x40), 
                        SW2S,   1, 
                            ,   2, 
                        ADPP,   1, 
                        TAPM,   1, 
                        Offset (0x41), 
                        WIN7,   1, 
                            ,   2, 
                        WINP,   1, 
                        RFLG,   1, 
                        PFN2,   1, 
                        WOLF,   1, 
                        PFLG,   1, 
                            ,   4, 
                        QWOS,   1, 
                            ,   1, 
                        BTON,   1, 
                        Offset (0x43), 
                        BBDA,   1, 
                            ,   2, 
                        ACKY,   1, 
                        Offset (0x44), 
                            ,   2, 
                        FASO,   1, 
                        Offset (0x4E), 
                        LIDE,   1, 
                            ,   2, 
                        TLDP,   1, 
                        Offset (0x52), 
                        LIDS,   1, 
                            ,   1, 
                            ,   1, 
                        TLID,   1, 
                        Offset (0x58), 
                        RTMP,   8, 
                        ECT1,   8, 
                        ECT2,   8, 
                        RG5B,   8, 
                        Offset (0x5F), 
                        SBVO,   1, 
                        Offset (0x68), 
                            ,   3, 
                        PLGS,   1, 
                        Offset (0x69), 
                            ,   6, 
                        BDSO,   1, 
                        Offset (0x70), 
                        BADC,   16, 
                        BFCC,   16, 
                        BADV,   16, 
                        BDVO,   8, 
                        Offset (0x7E), 
                        BATP,   8, 
                        Offset (0x82), 
                        MBST,   8, 
                        MCUR,   16, 
                        MBRM,   16, 
                        MBCV,   16, 
                        Offset (0x8D), 
                            ,   5, 
                        MBFC,   1, 
                        Offset (0x94), 
                        GSSU,   1, 
                        GSMS,   1, 
                        CS2S,   1, 
                        Offset (0x95), 
                        MMST,   4, 
                        DMST,   4, 
                        MBPG,   8, 
                        Offset (0xA0), 
                        QBHK,   8, 
                        Offset (0xA2), 
                        QBBB,   8, 
                        Offset (0xA4), 
                        MBTS,   1, 
                        MBTF,   1, 
                            ,   5, 
                        LLBW,   1, 
                        MBTC,   1, 
                            ,   2, 
                        MBNH,   1, 
                        Offset (0xA6), 
                        MBDC,   8, 
                            ,   1, 
                        CPBT,   1, 
                        Offset (0xAA), 
                            ,   1, 
                        MMBC,   1, 
                            ,   5, 
                        RCDS,   1, 
                        Offset (0xAD), 
                        SARS,   8, 
                        Offset (0xAF), 
                        MCER,   8, 
                        Offset (0xB2), 
                        RPM1,   8, 
                        RPM2,   8, 
                        OCPL,   4, 
                        OCPH,   4, 
                        Offset (0xBC), 
                        MCEA,   8, 
                        Offset (0xCF), 
                            ,   3, 
                        B47W,   1, 
                        Offset (0xD0), 
                        EBPL,   1, 
                        Offset (0xD2), 
                            ,   7, 
                        DLYE,   1, 
                        Offset (0xD4), 
                        PSDH,   8, 
                        PSDL,   8, 
                        DBPL,   8, 
                        Offset (0xDA), 
                        PSIX,   8, 
                        PSKB,   1, 
                        PSTP,   1, 
                        PSBA,   1, 
                        LANP,   1, 
                            ,   1, 
                        UPWR,   1, 
                        LIDW,   1, 
                        Offset (0xE0), 
                        DLYT,   8, 
                        Offset (0xE2), 
                        EBRL,   8, 
                        Offset (0xE6), 
                        SFHK,   8, 
                        Offset (0xF4), 
                        SFAN,   8, 
                        Offset (0xF9), 
                        FTCF,   1
                    }

                    Name (Q22L, Zero)
                    Name (Q22C, Zero)
                    Name (BATN, Zero)
                    Name (BATF, 0xC0)
                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x03) && (Arg1 == One)))
                        {
                            ECON = Arg1
                            If (ECON)
                            {
                                PWRS = SW2S /* \_SB_.PCI0.LPC0.EC0_.SW2S */
                                W7RF ()
                                OCPH = PPCM /* \PPCM */
                                UTAS ()
                                ^^^ACEL.INIT ()
                            }
                        }
                    }

                    Method (BPOL, 1, NotSerialized)
                    {
                        DBPL = Arg0
                        EBPL = One
                    }

                    Method (BPOM, 0, NotSerialized)
                    {
                        DBPL = Zero
                        EBPL = Zero
                    }

                    Name (_GPE, 0x05)  // _GPE: General Purpose Events
                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (BAT0, 0x80) // Status Change
                        Notify (ACAD, 0x80) // Status Change
                        If ((^^^^WMID.WMI5 == 0x05))
                        {
                            ^^^^WMID.GWEV (0x05, Zero)
                            ^^^^WMID.WMI5 = Zero
                        }
                    }

                    Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        CBCD ()
                        CPUS ()
                        GBAS ()
                        If ((0x40 & BATF))
                        {
                            Notify (BAT0, 0x81) // Information Change
                        }

                        If ((0x02 & BATF))
                        {
                            Notify (ACAD, 0x80) // Status Change
                        }

                        Notify (BAT0, 0x80) // Status Change
                        BPOL (0x05)
                        If (SW2S)
                        {
                            ^^^^WMID.GWEV (0x03, Zero)
                        }
                    }

                    Method (GBAS, 0, NotSerialized)
                    {
                        BATF = Zero
                        If (MBTS)
                        {
                            If ((^^^^BAT0.B1ST != 0x1F))
                            {
                                BATF |= 0x40
                            }
                        }
                        ElseIf ((^^^^BAT0.B1ST == 0x1F))
                        {
                            BATF |= 0x40
                        }

                        If (SW2S)
                        {
                            If ((^^^^ACAD.ACWT == Zero))
                            {
                                BATF |= 0x02
                            }
                        }
                        ElseIf ((^^^^ACAD.ACWT != Zero))
                        {
                            BATF |= 0x02
                        }
                    }

                    Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (BAT0, 0x80) // Status Change
                        Sleep (0x03E8)
                        Q22L = 0x22
                        Q22C = Zero
                        LLBW = Zero
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "_Q80 : Temperature Up/Down"
                        Notify (\_TZ.THRM, 0x80) // Thermal Status Change
                    }

                    Method (_Q8A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (LIDE)
                        {
                            Debug = "_Q8A : LID Switch Event"
                            LIDE = Zero
                            Notify (LID, 0x80) // Status Change
                            ^^^ACEL.ADJT ()
                        }
                    }

                    Method (_Q11, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (((TPOS == 0x40) || (TPOS == 0x50)))
                        {
                            If ((PFID == Zero))
                            {
                                Notify (^^^VGA.LCD, 0x86) // Device-Specific
                            }
                            Else
                            {
                                Notify (^^^VGA.LCD, 0x86) // Device-Specific
                                Notify (^^^PB2.VGA.LCD, 0x86) // Device-Specific
                            }
                        }
                        Else
                        {
                            Acquire (PSMX, 0xFFFF)
                            BRTL = 0x05
                            BCMD = 0x8A
                            BSMI (Zero)
                            Release (PSMX)
                        }

                        Stall (0xFF)
                        Stall (0xFF)
                        Stall (0xFF)
                        Stall (0xFF)
                    }

                    Method (_Q10, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (((TPOS == 0x40) || (TPOS == 0x50)))
                        {
                            If ((PFID == Zero))
                            {
                                Notify (^^^VGA.LCD, 0x87) // Device-Specific
                            }
                            Else
                            {
                                Notify (^^^VGA.LCD, 0x87) // Device-Specific
                                Notify (^^^PB2.VGA.LCD, 0x87) // Device-Specific
                            }
                        }
                        Else
                        {
                            Acquire (PSMX, 0xFFFF)
                            BRTL = 0x0A
                            BCMD = 0x8A
                            BSMI (Zero)
                            Release (PSMX)
                        }

                        Stall (0xFF)
                        Stall (0xFF)
                        Stall (0xFF)
                        Stall (0xFF)
                    }

                    Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "!!! Wireless Button pressed !!!"
                        Acquire (MUT2, 0xFFFF)
                        If (WWBS)
                        {
                            WWBS = Zero
                        }
                        Else
                        {
                            WWBS = One
                        }

                        UPWS ()
                        ^^^^WMID.GWEV (0x05, Zero)
                    }

                    Method (UPWS, 0, NotSerialized)
                    {
                        If (WWBS)
                        {
                            If ((^^^^WMID.WMIF != Zero))
                            {
                                If ((WWLE && WWLS))
                                {
                                    ^^^SMBS.O052 = One
                                }
                                Else
                                {
                                    ^^^SMBS.O052 = Zero
                                }

                                If ((WCME && WCMS))
                                {
                                    ^^^SMBS.O189 = One
                                }
                                Else
                                {
                                    ^^^SMBS.O189 = Zero
                                }
                            }
                            Else
                            {
                                If (WWLE)
                                {
                                    ^^^SMBS.O052 = One
                                }

                                If (WCME)
                                {
                                    ^^^SMBS.O189 = One
                                }
                            }
                        }
                        Else
                        {
                            ^^^SMBS.O052 = Zero
                            ^^^SMBS.O189 = Zero
                        }
                    }

                    Method (_Q33, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "!!! Peak Shift Timer sync up !!!"
                        If (ECON)
                        {
                            PSIX = 0xFF
                            Sleep (One)
                            FromBCD (^^RTC.RTMN, PSDL) /* \_SB_.PCI0.LPC0.EC0_.PSDL */
                            FromBCD (^^RTC.RTHR, PSDH) /* \_SB_.PCI0.LPC0.EC0_.PSDH */
                            PSIX = 0x1C
                            Sleep (One)
                            FromBCD (^^RTC.RTDY, PSDL) /* \_SB_.PCI0.LPC0.EC0_.PSDL */
                            FromBCD (^^RTC.RTSE, PSDH) /* \_SB_.PCI0.LPC0.EC0_.PSDH */
                            PSIX = 0x1D
                            Sleep (One)
                        }
                    }

                    Method (_Q8E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "!!! Down CPU speed. !!!"
                        If (ECON)
                        {
                            Local0 = \_PR.C000._PPC /* External reference */
                            Local1 = PPCM /* \PPCM */
                            If ((Local0 < Local1))
                            {
                                Local0 += One
                            }

                            \_PR.C000.PPCV = Local0
                            Notify (\_PR.C000, 0x80) // Performance Capability Change
                            If ((ECPU > One))
                            {
                                \_PR.C001.PPCV = Local0
                                Notify (\_PR.C001, 0x80) // Performance Capability Change
                            }

                            If ((ECPU > 0x02))
                            {
                                \_PR.C002.PPCV = Local0
                                Notify (\_PR.C002, 0x80) // Performance Capability Change
                            }

                            If ((ECPU > 0x03))
                            {
                                \_PR.C003.PPCV = Local0
                                Notify (\_PR.C003, 0x80) // Performance Capability Change
                            }

                            OCPL = Local0
                        }
                    }

                    Method (_Q8F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "!!! Up CPU speed !!!"
                        If (ECON)
                        {
                            Local0 = \_PR.C000._PPC /* External reference */
                            If (Local0)
                            {
                                Local0 -= One
                                \_PR.C000.PPCV = Local0
                                Notify (\_PR.C000, 0x80) // Performance Capability Change
                                If ((ECPU > One))
                                {
                                    \_PR.C001.PPCV = Local0
                                    Notify (\_PR.C001, 0x80) // Performance Capability Change
                                }

                                If ((ECPU > 0x02))
                                {
                                    \_PR.C002.PPCV = Local0
                                    Notify (\_PR.C002, 0x80) // Performance Capability Change
                                }

                                If ((ECPU > 0x03))
                                {
                                    \_PR.C003.PPCV = Local0
                                    Notify (\_PR.C003, 0x80) // Performance Capability Change
                                }
                            }
                        }

                        OCPL = Local0
                    }

                    Method (_Q92, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        UTAS ()
                    }

                    Method (_Q96, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        \_TZ.PSVD = Zero
                        Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
                    }

                    Method (_Q99, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        TSMI (0xD5, One)
                    }

                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        SMW0,   16
                    }

                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        SMB0,   8
                    }

                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        FLD0,   64
                    }

                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        FLD1,   128
                    }

                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        FLD2,   192
                    }

                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        FLD3,   256
                    }

                    Mutex (MUT0, 0x00)
                    Mutex (MUT1, 0x00)
                    Mutex (MUT2, 0x00)
                    Method (SMRD, 4, NotSerialized)
                    {
                        If (!ECON)
                        {
                            Return (0xFF)
                        }

                        If ((Arg0 != 0x07))
                        {
                            If ((Arg0 != 0x09))
                            {
                                If ((Arg0 != 0x0B))
                                {
                                    If ((Arg0 != 0x47))
                                    {
                                        Return (0x19)
                                    }
                                }
                            }
                        }

                        Acquire (MUT0, 0xFFFF)
                        Local0 = 0x04
                        While ((Local0 > One))
                        {
                            SMST &= 0x40
                            SMCM = Arg2
                            SMAD = Arg1
                            SMPR = Arg0
                            Local3 = Zero
                            While (!Local1 = (SMST & 0xBF))
                            {
                                Sleep (0x02)
                                Local3++
                                If ((Local3 == 0x32))
                                {
                                    SMST &= 0x40
                                    SMCM = Arg2
                                    SMAD = Arg1
                                    SMPR = Arg0
                                    Local3 = Zero
                                }
                            }

                            If ((Local1 == 0x80))
                            {
                                Local0 = Zero
                            }
                            Else
                            {
                                Local0--
                            }
                        }

                        If (Local0)
                        {
                            Local0 = (Local1 & 0x1F)
                        }
                        Else
                        {
                            If ((Arg0 == 0x07))
                            {
                                Arg3 = SMB0 /* \_SB_.PCI0.LPC0.EC0_.SMB0 */
                            }

                            If ((Arg0 == 0x47))
                            {
                                Arg3 = SMB0 /* \_SB_.PCI0.LPC0.EC0_.SMB0 */
                            }

                            If ((Arg0 == 0x09))
                            {
                                Arg3 = SMW0 /* \_SB_.PCI0.LPC0.EC0_.SMW0 */
                            }

                            If ((Arg0 == 0x0B))
                            {
                                Local3 = BCNT /* \_SB_.PCI0.LPC0.EC0_.BCNT */
                                Local2 = (0x0100 >> 0x03)
                                If ((Local3 > Local2))
                                {
                                    Local3 = Local2
                                }

                                If ((Local3 < 0x09))
                                {
                                    Local2 = FLD0 /* \_SB_.PCI0.LPC0.EC0_.FLD0 */
                                }
                                ElseIf ((Local3 < 0x11))
                                {
                                    Local2 = FLD1 /* \_SB_.PCI0.LPC0.EC0_.FLD1 */
                                }
                                ElseIf ((Local3 < 0x19))
                                {
                                    Local2 = FLD2 /* \_SB_.PCI0.LPC0.EC0_.FLD2 */
                                }
                                Else
                                {
                                    Local2 = FLD3 /* \_SB_.PCI0.LPC0.EC0_.FLD3 */
                                }

                                Local3++
                                Local4 = Buffer (Local3){}
                                Local3--
                                Local5 = Zero
                                While ((Local3 > Local5))
                                {
                                    GBFE (Local2, Local5, RefOf (Local6))
                                    PBFE (Local4, Local5, Local6)
                                    Local5++
                                }

                                PBFE (Local4, Local5, Zero)
                                Arg3 = Local4
                            }
                        }

                        Release (MUT0)
                        Return (Local0)
                    }

                    Method (SMWR, 4, NotSerialized)
                    {
                        If (!ECON)
                        {
                            Return (0xFF)
                        }

                        If ((Arg0 != 0x06))
                        {
                            If ((Arg0 != 0x08))
                            {
                                If ((Arg0 != 0x0A))
                                {
                                    If ((Arg0 != 0x46))
                                    {
                                        Return (0x19)
                                    }
                                }
                            }
                        }

                        Acquire (MUT0, 0xFFFF)
                        Local0 = 0x04
                        While ((Local0 > One))
                        {
                            If ((Arg0 == 0x06))
                            {
                                SMB0 = Arg3
                            }

                            If ((Arg0 == 0x46))
                            {
                                SMB0 = Arg3
                            }

                            If ((Arg0 == 0x08))
                            {
                                SMW0 = Arg3
                            }

                            If ((Arg0 == 0x0A))
                            {
                                SMD0 = Arg3
                            }

                            SMST &= 0x40
                            SMCM = Arg2
                            SMAD = Arg1
                            SMPR = Arg0
                            Local3 = Zero
                            While (!Local1 = (SMST & 0xBF))
                            {
                                Sleep (0x02)
                                Local3++
                                If ((Local3 == 0x32))
                                {
                                    SMST &= 0x40
                                    SMCM = Arg2
                                    SMAD = Arg1
                                    SMPR = Arg0
                                    Local3 = Zero
                                }
                            }

                            If ((Local1 == 0x80))
                            {
                                Local0 = Zero
                            }
                            Else
                            {
                                Local0--
                            }
                        }

                        If (Local0)
                        {
                            Local0 = (Local1 & 0x1F)
                        }

                        Release (MUT0)
                        Return (Local0)
                    }

                    Method (GSHK, 0, Serialized)
                    {
                        If (ECON)
                        {
                            Local0 = SFHK /* \_SB_.PCI0.LPC0.EC0_.SFHK */
                        }

                        Return (Local0)
                    }

                    Method (SSHK, 1, Serialized)
                    {
                        If (ECON)
                        {
                            SFHK = Arg0
                        }
                    }

                    Name (DISS, Buffer (0x0A)
                    {
                        /* 0000 */  0x01, 0x02, 0x10, 0x04, 0x20, 0x03, 0x11, 0x05,  // .... ...
                        /* 0008 */  0x21, 0x01                                       // !.
                    })
                    Name (SWII, 0x0A)
                    Method (GNSD, 0, Serialized)
                    {
                        Local0 = Zero
                        Local1 = CSTE /* \CSTE */
                        Local2 = ADDL /* \ADDL */
                        While ((Local0 < SWII))
                        {
                            Local3 = DerefOf (DISS [Local0])
                            If ((Local3 == Local1))
                            {
                                While ((Local0 < SWII))
                                {
                                    Local4 = Local0
                                    Local4++
                                    Local5 = DerefOf (DISS [Local4])
                                    If (((Local2 & Local5) == Local5))
                                    {
                                        NSTE = Local5
                                        Local0 = SWII /* \_SB_.PCI0.LPC0.EC0_.SWII */
                                    }
                                    Else
                                    {
                                        Local0++
                                    }
                                }
                            }
                            Else
                            {
                                Local0++
                            }
                        }
                    }

                    Method (CPUS, 0, NotSerialized)
                    {
                        Local0 = Zero
                        \_PR.C000.PPCV = Local0
                        Notify (\_PR.C000, 0x80) // Performance Capability Change
                        If ((ECPU > One))
                        {
                            \_PR.C001.PPCV = Local0
                            Notify (\_PR.C001, 0x80) // Performance Capability Change
                        }

                        If ((ECPU > 0x02))
                        {
                            \_PR.C002.PPCV = Local0
                            Notify (\_PR.C002, 0x80) // Performance Capability Change
                        }

                        If ((ECPU > 0x03))
                        {
                            \_PR.C003.PPCV = Local0
                            Notify (\_PR.C003, 0x80) // Performance Capability Change
                        }

                        If (ECON)
                        {
                            OCPL = Local0
                        }
                    }

                    Method (KTWU, 0, NotSerialized)
                    {
                        If (ECON)
                        {
                            PSKB = KBWU /* \KBWU */
                            PSTP = TPWU /* \TPWU */
                        }
                    }

                    Method (W7RF, 0, NotSerialized)
                    {
                        If (ECON)
                        {
                            WIN7 = Zero
                            RFLG = Zero
                            If ((OSTB == 0x50))
                            {
                                WIN7 = One
                            }

                            If ((OSTB == 0x80))
                            {
                                RFLG = One
                            }

                            If ((SSOS == One))
                            {
                                WINP = One
                            }
                        }
                    }

                    Method (CBCD, 0, NotSerialized)
                    {
                        If (ECON)
                        {
                            Local0 = MBDC /* \_SB_.PCI0.LPC0.EC0_.MBDC */
                            Local0 &= 0xE4
                            MBDC = Local0
                        }
                    }

                    Method (UTAS, 0, NotSerialized)
                    {
                        If (ECON)
                        {
                            If ((GSMS == One))
                            {
                                Local0 = MMST /* \_SB_.PCI0.LPC0.EC0_.MMST */
                            }
                            Else
                            {
                                Local0 = DMST /* \_SB_.PCI0.LPC0.EC0_.DMST */
                            }
                        }
                    }
                }

                OperationRegion (LCLM, SystemIO, 0x0C50, 0x03)
                Field (LCLM, ByteAcc, NoLock, Preserve)
                {
                    CLMI,   8, 
                    CLMD,   8, 
                    CLGP,   8
                }

                IndexField (CLMI, CLMD, ByteAcc, NoLock, Preserve)
                {
                    IDRG,   8, 
                    Offset (0x02), 
                    TSTS,   8, 
                    TINT,   8, 
                    Offset (0x12), 
                    I2CC,   8, 
                    GPIO,   8
                }

                Method (RGPM, 0, NotSerialized)
                {
                    Local0 = GPIO /* \_SB_.PCI0.LPC0.GPIO */
                    Local0 &= 0xFFFFFF3F
                    GPIO = Local0
                    Local1 = CLGP /* \_SB_.PCI0.LPC0.CLGP */
                    Return (Local1)
                }
            }

            Device (P2P)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                OperationRegion (PCPC, PCI_Config, Zero, 0xFF)
                Field (PCPC, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    PCMD,   8, 
                    Offset (0x1C), 
                    IOW1,   8, 
                    IOW2,   8, 
                    Offset (0x48), 
                    PR48,   8, 
                    PR49,   8, 
                    PR4A,   8, 
                    PR4B,   8
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                Name (B5EN, Zero)
                Name (BA_5, Zero)
                Name (SBAR, 0xF0351000)
                OperationRegion (SATX, PCI_Config, Zero, 0x44)
                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    VIDI,   32, 
                    Offset (0x0A), 
                    STCL,   16, 
                    Offset (0x24), 
                    BA05,   32, 
                    Offset (0x40), 
                    WTEN,   1, 
                    Offset (0x42), 
                    DIS0,   1, 
                    DIS1,   1, 
                    DIS2,   1, 
                    DIS3,   1, 
                    DIS4,   1, 
                    DIS5,   1
                }

                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DISP,   6
                }

                Method (GBAA, 0, Serialized)
                {
                    BA_5 = BA05 /* \_SB_.PCI0.SATA.BA05 */
                    If (((BA_5 == Ones) || (STCL != 0x0101)))
                    {
                        B5EN = Zero
                        Return (SBAR) /* \_SB_.PCI0.SATA.SBAR */
                    }
                    Else
                    {
                        B5EN = One
                        Return (BA_5) /* \_SB_.PCI0.SATA.BA_5 */
                    }
                }

                OperationRegion (BAR5, SystemMemory, GBAA (), 0x1000)
                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    NOPT,   5, 
                    Offset (0x0C), 
                    PTI0,   1, 
                    PTI1,   1, 
                    PTI2,   1, 
                    PTI3,   1, 
                    PTI4,   1, 
                    PTI5,   1, 
                    PTI6,   1, 
                    PTI7,   1, 
                    Offset (0x118), 
                    CST0,   1, 
                    Offset (0x120), 
                        ,   7, 
                    BSY0,   1, 
                    Offset (0x128), 
                    DET0,   4, 
                    Offset (0x129), 
                    IPM0,   4, 
                    Offset (0x12C), 
                    DDI0,   4, 
                    Offset (0x198), 
                    CST1,   1, 
                    Offset (0x1A0), 
                        ,   7, 
                    BSY1,   1, 
                    Offset (0x1A8), 
                    DET1,   4, 
                    Offset (0x1A9), 
                    IPM1,   4, 
                    Offset (0x1AC), 
                    DDI1,   4, 
                    Offset (0x218), 
                    CST2,   1, 
                    Offset (0x220), 
                        ,   7, 
                    BSY2,   1, 
                    Offset (0x228), 
                    DET2,   4, 
                    Offset (0x229), 
                    IPM2,   4, 
                    Offset (0x22C), 
                    DDI2,   4, 
                    Offset (0x298), 
                    CST3,   1, 
                    Offset (0x2A0), 
                        ,   7, 
                    BSY3,   1, 
                    Offset (0x2A8), 
                    DET3,   4, 
                    Offset (0x2A9), 
                    IPM3,   4, 
                    Offset (0x2AC), 
                    DDI3,   4, 
                    Offset (0x318), 
                    CST4,   1, 
                    Offset (0x320), 
                        ,   7, 
                    BSY4,   1, 
                    Offset (0x328), 
                    DET4,   4, 
                    Offset (0x329), 
                    IPM4,   4, 
                    Offset (0x32C), 
                    DDI4,   4, 
                    Offset (0x398), 
                    CST5,   1, 
                    Offset (0x3A0), 
                        ,   7, 
                    BSY5,   1, 
                    Offset (0x3A8), 
                    DET5,   4, 
                    Offset (0x3A9), 
                    IPM5,   4, 
                    Offset (0x3AC), 
                    DDI5,   4
                }

                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    PTI,    6
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    GBAA ()
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.PRID.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((TPOS >= 0x40) || (TPOS == 0x04)) && B5EN))
                        {
                            If (IPM0)
                            {
                                Local0 = 0x32
                                While (((BSY0 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (IPM2)
                            {
                                Local0 = 0x32
                                While (((BSY2 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET0 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY0 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET2 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY2 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.SECD.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((TPOS >= 0x40) || (TPOS == 0x04)) && B5EN))
                        {
                            If (IPM1)
                            {
                                Local0 = 0x32
                                While (((BSY1 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (IPM3)
                            {
                                Local0 = 0x32
                                While (((BSY3 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET1 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY1 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET3 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((TPOS < 0x40) && (TPOS != 0x04)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY3 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Method (ENP, 2, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        DIS0 = ~Arg1
                    }
                    ElseIf ((Arg0 == One))
                    {
                        DIS1 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        DIS2 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        DIS3 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        DIS4 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x05))
                    {
                        DIS5 = ~Arg1
                    }

                    WTEN = One
                    If ((Arg0 == Zero))
                    {
                        PTI0 = Arg1
                    }
                    ElseIf ((Arg0 == One))
                    {
                        PTI1 = Arg1
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        PTI2 = Arg1
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        PTI3 = Arg1
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        PTI4 = Arg1
                    }
                    ElseIf ((Arg0 == 0x05))
                    {
                        PTI5 = Arg1
                    }

                    If ((DISP == 0x3F))
                    {
                        PTI0 = One
                    }
                    ElseIf ((DIS0 && ((DISP & 0x3E) ^ 0x3E)))
                    {
                        PTI0 = Zero
                    }

                    Local0 = PTI /* \_SB_.PCI0.SATA.PTI_ */
                    Local1 = Zero
                    While (Local0)
                    {
                        If ((Local0 & One))
                        {
                            Local1++
                        }

                        Local0 >>= One
                    }

                    NOPT = Local1--
                    WTEN = Zero
                }

                Device (PRT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((ODZC == One) && (OSTB == 0x50)))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (DIS, 0, NotSerialized)
                    {
                        ENP (One, Zero)
                    }

                    Method (ENA, 0, NotSerialized)
                    {
                        ENP (One, One)
                    }

                    Device (ODD)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (ODDZ)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Name (ODPS, Zero)
                    Name (ODDB, Zero)
                    Name (DSDA, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((ODZC == One) && (OSTB == 0x50)))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        P80H = 0xDF00
                        DSDA = One
                        If ((ODZC == One))
                        {
                            If ((ODDB != Zero))
                            {
                                If (((VIDI == 0x78041022) || (VIDI == 0x78011022)))
                                {
                                    DIS1 = Zero
                                    Sleep (0x28)
                                    ^^^SMBS.O056 = One
                                    Sleep (0x28)
                                    CST1 = Zero
                                    Sleep (One)
                                    DDI1 = One
                                    Sleep (One)
                                    DDI1 = Zero
                                }

                                If (((VIDI == 0x78031022) || (VIDI == 0x78021022)))
                                {
                                    DIS1 = Zero
                                    Sleep (0x28)
                                    ^^^SMBS.O056 = One
                                    Sleep (0x28)
                                    CST1 = Zero
                                    Sleep (One)
                                    DDI1 = One
                                    Sleep (One)
                                    DDI1 = Zero
                                }

                                Sleep (0x012C)
                            }
                        }

                        ODDB = One
                        ODPS = Zero
                        DSDA = Zero
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        P80H = 0xDF03
                        If ((^^^SMBS.E056 == Zero))
                        {
                            DSDA = One
                            If ((ODZC == One))
                            {
                                If (((VIDI == 0x78041022) || (VIDI == 0x78011022)))
                                {
                                    Sleep (0x28)
                                    ^^^SMBS.O056 = Zero
                                    Sleep (0x28)
                                    DIS1 = One
                                }

                                If (((VIDI == 0x78031022) || (VIDI == 0x78021022)))
                                {
                                    Sleep (0x28)
                                    ^^^SMBS.O056 = Zero
                                    Sleep (0x28)
                                    DIS1 = One
                                }

                                Sleep (0xC8)
                            }

                            ODPS = 0x03
                            DSDA = Zero
                        }
                    }

                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Local0 = Zero
                        While (((DSDA == One) && (Local0 < 0x0190)))
                        {
                            Sleep (One)
                            Local0++
                        }

                        Return (ODPS) /* \_SB_.PCI0.SATA.ODDZ.ODPS */
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (ESAT)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (One)
                        }
                    }
                }
            }

            Device (IDE)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x5A, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    Zero, 
                    Zero
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    Zero
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    Zero
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, WordAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F)
                    Local1 = (Arg0 >> 0x04)
                    Return ((0x1E * ((Local0 + One) + (Local1 + One)
                        )))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, PIT1)
                    CreateByteField (Arg0, One, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateDWordField (BUF, Zero, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If ((PICX & One))
                    {
                        Return (BUF) /* \_SB_.PCI0.IDE_.GTM_.BUF_ */
                    }

                    PIO0 = GETT (PIT0)
                    PIO1 = GETT (PIT1)
                    If ((UDCX & One))
                    {
                        FLAG |= One
                        DMA0 = DerefOf (UDMT [(UDMX & 0x0F)])
                    }
                    ElseIf ((MDT0 != 0xFF))
                    {
                        DMA0 = GETT (MDT0)
                    }

                    If ((UDCX & 0x02))
                    {
                        FLAG |= 0x04
                        DMA1 = DerefOf (UDMT [(UDMX >> 0x04)])
                    }
                    ElseIf ((MDT1 != 0xFF))
                    {
                        DMA1 = GETT (MDT1)
                    }

                    FLAG |= 0x1A
                    Return (BUF) /* \_SB_.PCI0.IDE_.GTM_.BUF_ */
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, Zero, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                    })
                    CreateByteField (BUF, Zero, PIT1)
                    CreateByteField (BUF, One, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Local0 = Match (PIOT, MLE, PIO0, MTR, Zero, Zero)
                    Local0 %= 0x05
                    Local1 = Match (PIOT, MLE, PIO1, MTR, Zero, Zero)
                    Local1 %= 0x05
                    PIMX = ((Local1 << 0x04) | Local0)
                    PIT0 = DerefOf (PITR [Local0])
                    PIT1 = DerefOf (PITR [Local1])
                    If ((FLAG & One))
                    {
                        Local0 = Match (UDMT, MLE, DMA0, MTR, Zero, Zero)
                        Local0 %= 0x06
                        UDMX |= Local0
                        UDCX |= One
                    }
                    ElseIf ((DMA0 != Ones))
                    {
                        Local0 = Match (MDMT, MLE, DMA0, MTR, Zero, Zero)
                        MDT0 = DerefOf (MDTR [Local0])
                    }

                    If ((FLAG & 0x04))
                    {
                        Local0 = Match (UDMT, MLE, DMA1, MTR, Zero, Zero)
                        Local0 %= 0x06
                        UDMX |= (Local0 << 0x04)
                        UDCX |= 0x02
                    }
                    ElseIf ((DMA1 != Ones))
                    {
                        Local0 = Match (MDMT, MLE, DMA1, MTR, Zero, Zero)
                        MDT1 = DerefOf (MDTR [Local0])
                    }

                    Return (BUF) /* \_SB_.PCI0.IDE_.STM_.BUF_ */
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, Zero, MDT1)
                    CreateByteField (Arg1, One, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If ((Arg0 == 0xA0))
                    {
                        Local0 = (PIMX & 0x0F)
                        Local1 = MDT0 /* \_SB_.PCI0.IDE_.GTF_.MDT0 */
                        Local2 = (UDCX & One)
                        Local3 = (UDMX & 0x0F)
                    }
                    Else
                    {
                        Local0 = (PIMX >> 0x04)
                        Local1 = MDT1 /* \_SB_.PCI0.IDE_.GTF_.MDT1 */
                        Local2 = (UDCX & 0x02)
                        Local3 = (UDMX >> 0x04)
                    }

                    Name (BUF, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF               // ......
                    })
                    CreateByteField (BUF, One, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    CMDA = Arg0
                    CMDB = Arg0
                    PMOD = (Local0 | 0x08)
                    If (Local2)
                    {
                        DMOD = (Local3 | 0x40)
                    }
                    ElseIf ((Local1 != 0xFF))
                    {
                        Local4 = Match (MDMT, MLE, GETT (Local1), MTR, Zero, Zero)
                        If ((Local4 < 0x03))
                        {
                            DMOD = (0x20 | Local4)
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDE_.GTF_.BUF_ */
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = PPIT /* \_SB_.PCI0.IDE_.PPIT */
                        VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                        VPIC = PPIC /* \_SB_.PCI0.IDE_.PPIC */
                        VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                        VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        PPIT = VPIT /* \_SB_.PCI0.IDE_.PRID._STM.VPIT */
                        PMDT = VMDT /* \_SB_.PCI0.IDE_.PRID._STM.VMDT */
                        PPIM = VPIM /* \_SB_.PCI0.IDE_.PRID._STM.VPIM */
                        PUDC = VUDC /* \_SB_.PCI0.IDE_.PRID._STM.VUDC */
                        PUDM = VUDM /* \_SB_.PCI0.IDE_.PRID._STM.VUDM */
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                            VPIM = PPIM /* \_SB_.PCI0.IDE_.PPIM */
                            VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = PMDT /* \_SB_.PCI0.IDE_.PMDT */
                            VPIM = PPIM /* \_SB_.PCI0.IDE_.PPIM */
                            VUDC = PUDC /* \_SB_.PCI0.IDE_.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDE_.PUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        VPIT = SPIT /* \_SB_.PCI0.IDE_.SPIT */
                        VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                        VPIC = SPIC /* \_SB_.PCI0.IDE_.SPIC */
                        VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                        VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        SPIT = VPIT /* \_SB_.PCI0.IDE_.SECD._STM.VPIT */
                        SMDT = VMDT /* \_SB_.PCI0.IDE_.SECD._STM.VMDT */
                        SPIM = VPIM /* \_SB_.PCI0.IDE_.SECD._STM.VPIM */
                        SUDC = VUDC /* \_SB_.PCI0.IDE_.SECD._STM.VUDC */
                        SUDM = VUDM /* \_SB_.PCI0.IDE_.SECD._STM.VUDM */
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                            VPIM = SPIM /* \_SB_.PCI0.IDE_.SPIM */
                            VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            VMDT = SMDT /* \_SB_.PCI0.IDE_.SMDT */
                            VPIM = SPIM /* \_SB_.PCI0.IDE_.SPIM */
                            VUDC = SUDC /* \_SB_.PCI0.IDE_.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDE_.SUDM */
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }

            Device (ACEL)
            {
                Name (_HID, EisaId ("HPQ0004"))  // _HID: Hardware ID
                Name (DVPN, 0xFF)
                Name (CNST, 0xFF)
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Interrupt (ResourceConsumer, Edge, ActiveLow, Exclusive, ,, )
                    {
                        0x00000017,
                    }
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (ECON)
                    {
                        If ((DVPN == 0xFF))
                        {
                            Local0 = 0x0F
                            Local2 = ^^LPC0.EC0.SMRD (0x47, 0x51, 0x0F, RefOf (Local1))
                            If (((Local1 != 0x33) | (Local2 != Zero)))
                            {
                                Local0 = Zero
                            }

                            DVPN = Local0
                        }
                    }

                    Return (DVPN) /* \_SB_.PCI0.ACEL.DVPN */
                }

                Method (INIT, 0, Serialized)
                {
                    If (_STA ())
                    {
                        ^^LPC0.EC0.SMWR (0x46, 0x50, 0x20, 0x5F)
                        ^^LPC0.EC0.SMWR (0x46, 0x50, 0x21, 0x32)
                        ^^LPC0.EC0.SMWR (0x46, 0x50, 0x32, 0x20)
                        ^^LPC0.EC0.SMWR (0x46, 0x50, 0x33, 0x03)
                        ^^LPC0.EC0.SMWR (0x46, 0x50, 0x30, 0x95)
                        ^^LPC0.EC0.SMRD (0x47, 0x51, 0x24, RefOf (Local0))
                        Local0 &= 0xBF
                        Local0 |= 0x02
                        ^^LPC0.EC0.SMWR (0x46, 0x50, 0x24, Local0)
                        CNST = 0xFF
                        ADJT ()
                        ^^LPC0.EC0.PLGS = One
                    }
                }

                Method (ADJT, 0, Serialized)
                {
                    If (_STA ())
                    {
                        If (ECON)
                        {
                            Local0 = ^^LPC0.EC0.SW2S /* \_SB_.PCI0.LPC0.EC0_.SW2S */
                        }
                        Else
                        {
                            Local0 = PWRS /* \PWRS */
                        }

                        If (((^^^LID._LID () == Zero) && (Local0 == Zero)))
                        {
                            If ((CNST != One))
                            {
                                CNST = One
                                ^^LPC0.EC0.SMWR (0x46, 0x50, 0x36, 0x15)
                                ^^LPC0.EC0.SMWR (0x46, 0x50, 0x37, One)
                                ^^LPC0.EC0.SMWR (0x46, 0x50, 0x34, 0x2A)
                                ^^LPC0.EC0.SMWR (0x46, 0x50, 0x25, 0x02)
                                ^^LPC0.EC0.SMWR (0x46, 0x50, 0x22, 0x20)
                                ^^LPC0.EC0.MMST = Zero
                            }
                        }
                        ElseIf ((CNST != Zero))
                        {
                            CNST = Zero
                            ^^LPC0.EC0.SMWR (0x46, 0x50, 0x36, 0x07)
                            ^^LPC0.EC0.SMWR (0x46, 0x50, 0x37, 0x05)
                            ^^LPC0.EC0.SMWR (0x46, 0x50, 0x34, 0x7F)
                            ^^LPC0.EC0.SMWR (0x46, 0x50, 0x25, 0x02)
                            ^^LPC0.EC0.SMWR (0x46, 0x50, 0x22, 0x40)
                            ^^LPC0.EC0.MMST = One
                        }
                    }
                }

                Method (CLRI, 0, Serialized)
                {
                    Local0 = Zero
                    If (ECON)
                    {
                        If ((^^LPC0.EC0.SW2S == Zero))
                        {
                            If ((^^^BAT0._STA () == 0x1F))
                            {
                                If ((^^LPC0.EC0.MBRM <= 0x96))
                                {
                                    Local0 = One
                                }
                            }
                        }
                    }

                    Return (Local0)
                }

                Method (ALRD, 1, Serialized)
                {
                    Local0 = Zero
                    If (ECON)
                    {
                        ^^LPC0.EC0.SMRD (0x47, 0x51, Arg0, RefOf (Local0))
                    }

                    Return (Local0)
                }

                Method (ALWR, 2, Serialized)
                {
                    Local0 = Zero
                    If (ECON)
                    {
                        Local0 = ^^LPC0.EC0.SMWR (0x46, 0x50, Arg0, Arg1)
                    }

                    Return (Local0)
                }

                Method (ALED, 1, Serialized)
                {
                    If (Arg0)
                    {
                        ^^SMBS.O057 = Zero
                    }
                    Else
                    {
                        ^^SMBS.O057 = One
                    }
                }

                Method (ALID, 1, Serialized)
                {
                    Local1 = One
                    Local0 = ^^^LID._LID ()
                    ^^LPC0.EC0.SMRD (0x47, 0x51, 0x24, RefOf (Local1))
                    Local1 &= 0xBF
                    If ((Local0 == One))
                    {
                        Local1 |= 0x02
                    }
                    Else
                    {
                        Local1 &= 0xFD
                    }

                    ^^LPC0.EC0.SMWR (0x46, 0x50, 0x24, Local1)
                    Return (Local0)
                }

                Method (ADSN, 0, Serialized)
                {
                    Local0 = Zero
                    Return (Local0)
                }
            }
        }

        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x10), 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x15), 
            GEC,    8, 
            Offset (0x30), 
            USB1,   8, 
            USB2,   8, 
            USB3,   8, 
            USB4,   8, 
            USB5,   8, 
            USB6,   8, 
            USB7,   8, 
            Offset (0x40), 
            IDE,    8, 
            SATA,   8, 
            Offset (0x50), 
            GPP0,   8, 
            GPP1,   8, 
            GPP2,   8, 
            GPP3,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
            GEC = Arg0
            GPP0 = Arg0
            GPP0 = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
            USB2 = Arg0
            USB4 = Arg0
            USB6 = Arg0
            GPP1 = Arg0
            IDE = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
            USB5 = Arg0
            USB7 = Arg0
            GPP2 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
            GPP3 = Arg0
        }

        Name (PRS1, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,7,10,11,12,14,15}
        })
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }

        Method (GSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE4
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
        }

        Method (S80H, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE5
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
            Stall (0xFF)
        }

        Method (BSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xBE
            Stall (0xFF)
        }

        Method (TSMI, 2, NotSerialized)
        {
            APMD = Arg1
            APMC = Arg0
            Stall (0xFF)
        }

        Name (RTCC, Zero)
        Method (GHWI, 2, NotSerialized)
        {
            HWCT = Arg0
            HWBC = Arg1
            SSMP = 0xC3
            If ((HWRC != Zero))
            {
                RTCC = HWRC /* \HWRC */
            }

            Return (Zero)
        }

        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (ACWT, Zero)
            Name (XX00, Buffer (0x03){})
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                If (ECON)
                {
                    Sleep (0x32)
                    ACWT = ^^PCI0.LPC0.EC0.SW2S /* \_SB_.PCI0.LPC0.EC0_.SW2S */
                }
                Else
                {
                    ACWT = One
                }

                CreateWordField (XX00, Zero, SSZE)
                CreateByteField (XX00, 0x02, ACST)
                SSZE = 0x03
                If (ACWT)
                {
                    ^^PCI0.VGA.AFN4 (One)
                    ACST = Zero
                }
                Else
                {
                    ^^PCI0.VGA.AFN4 (0x02)
                    ACST = One
                }

                ALIB
                One
                XX00
                Return (ACWT) /* \_SB_.ACAD.ACWT */
            }
        }

        Name (FBAS, Zero)
        Method (VTOB, 1, NotSerialized)
        {
            Local0 = One
            Local0 <<= Arg0
            Return (Local0)
        }

        Method (BTOV, 1, NotSerialized)
        {
            Local0 = (Arg0 >> One)
            Local1 = Zero
            While (Local0)
            {
                Local1++
                Local0 >>= One
            }

            Return (Local1)
        }

        Method (MKWD, 2, NotSerialized)
        {
            If ((Arg1 & 0x80))
            {
                Local0 = 0xFFFF0000
            }
            Else
            {
                Local0 = Zero
            }

            Local0 |= Arg0
            Local0 |= (Arg1 << 0x08)
            Return (Local0)
        }

        Method (POSW, 1, NotSerialized)
        {
            If ((Arg0 & 0x8000))
            {
                If ((Arg0 == 0xFFFF))
                {
                    Return (Ones)
                }
                Else
                {
                    Local0 = ~Arg0
                    Local0++
                    Local0 &= 0xFFFF
                    Return (Local0)
                }
            }
            Else
            {
                Return (Arg0)
            }
        }

        Method (GBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            Arg2 = TIDX /* \_SB_.GBFE.TIDX */
        }

        Method (PBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            TIDX = Arg2
        }

        Method (ITOS, 1, NotSerialized)
        {
            Local0 = Buffer (0x05)
                {
                     0x20, 0x20, 0x20, 0x20, 0x20                     //      
                }
            Local7 = Buffer (0x11)
                {
                    "0123456789ABCDEF"
                }
            Local1 = 0x05
            Local2 = Zero
            Local3 = Zero
            While (Local1)
            {
                Local1--
                Local4 = ((Arg0 >> (Local1 << 0x02)) & 0x0F)
                GBFE (Local7, Local4, RefOf (Local5))
                PBFE (Local0, Local2, Local5)
                Local2++
            }

            Return (Local0)
        }

        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (PBIF, Package (0x0D)
            {
                One, 
                Ones, 
                Ones, 
                One, 
                Ones, 
                0xFA, 
                0x96, 
                0x0A, 
                0x19, 
                "BAT1", 
                " ", 
                " ", 
                " "
            })
            Name (PBST, Package (0x04)
            {
                Zero, 
                Ones, 
                Ones, 
                0x2710
            })
            Name (BAST, Zero)
            Name (B1ST, 0x0F)
            Name (B1WT, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (ECON)
                {
                    Sleep (0xC8)
                    If (^^PCI0.LPC0.EC0.MBTS)
                    {
                        B1ST = 0x1F
                    }
                    Else
                    {
                        B1ST = 0x0F
                    }
                }
                Else
                {
                    B1ST = 0x0F
                }

                Return (B1ST) /* \_SB_.BAT0.B1ST */
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                If (ECON)
                {
                    If (^^PCI0.LPC0.EC0.MBTS)
                    {
                        UPBI ()
                    }
                    Else
                    {
                        IVBI ()
                    }
                }
                Else
                {
                    IVBI ()
                }

                Return (PBIF) /* \_SB_.BAT0.PBIF */
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                If (ECON)
                {
                    If (^^PCI0.LPC0.EC0.MBTS)
                    {
                        UPBS ()
                    }
                    Else
                    {
                        IVBS ()
                    }
                }
                Else
                {
                    IVBS ()
                }

                Return (PBST) /* \_SB_.BAT0.PBST */
            }

            Method (UPBI, 0, NotSerialized)
            {
                Local0 = 0x09
                Local1 = 0x0E
                Local3 = 0x0B
                If ((^^PCI0.LPC0.EC0.BADC >= 0x12C0))
                {
                    If (^^PCI0.LPC0.EC0.MMBC)
                    {
                        Local0 = 0x05
                        Local1 = 0x0A
                    }
                    Else
                    {
                        Local0 = 0x07
                        Local1 = 0x0C
                    }

                    Local3 = (Local0 + 0x02)
                }

                Local5 = ^^PCI0.LPC0.EC0.BFCC /* \_SB_.PCI0.LPC0.EC0_.BFCC */
                If (((Local5 & 0x8000) == 0x8000))
                {
                    ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x10, RefOf (Local5))
                }

                If (((Local5 & 0x8000) != 0x8000))
                {
                    Local5 >>= 0x05
                    Local5 <<= 0x05
                    PBIF [0x02] = Local5
                    Local2 = (Local5 / 0x64)
                    Local2 += One
                    Local4 = (Local2 * Local1)
                    PBIF [0x05] = (Local4 + 0x02)
                    Local4 = (Local2 * Local0)
                    PBIF [0x06] = (Local4 + 0x02)
                    Local4 = (Local2 * Local3)
                    FBAS = (Local4 + 0x02)
                }

                If (^^PCI0.LPC0.EC0.MBNH)
                {
                    PBIF [0x09] = "OANI$"
                    PBIF [0x0B] = "NiMH"
                }
                Else
                {
                    PBIF [0x0B] = "LION"
                }

                PBIF [One] = Local5
                PBIF [0x04] = ^^PCI0.LPC0.EC0.BADV /* \_SB_.PCI0.LPC0.EC0_.BADV */
                PBIF [0x09] = "Primary"
                UPUM ()
                PBIF [Zero] = One
            }

            Method (UPUM, 0, NotSerialized)
            {
                Local0 = Buffer (0x0A)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00                                       // ..
                    }
                Local6 = Buffer (0x05)
                    {
                         0x36, 0x35, 0x35, 0x33, 0x35                     // 65535
                    }
                Local7 = Buffer (0x05)
                    {
                         0x31, 0x32, 0x33, 0x32, 0x31                     // 12321
                    }
                PBIF [0x0C] = "Hewlett-Packard"
            }

            Method (UPBS, 0, NotSerialized)
            {
                Local5 = ^^PCI0.LPC0.EC0.MCUR /* \_SB_.PCI0.LPC0.EC0_.MCUR */
                PBST [One] = POSW (Local5)
                Local5 = ^^PCI0.LPC0.EC0.MBRM /* \_SB_.PCI0.LPC0.EC0_.MBRM */
                If (!(Local5 & 0x8000))
                {
                    Local5 >>= 0x05
                    Local5 <<= 0x05
                    If ((Local5 != DerefOf (PBST [0x02])))
                    {
                        PBST [0x02] = Local5
                    }
                }

                If (((^^PCI0.LPC0.EC0.LLBW == One) && !^^PCI0.LPC0.EC0.SW2S))
                {
                    If ((^^PCI0.LPC0.EC0.Q22L == 0x22))
                    {
                        ^^PCI0.LPC0.EC0.Q22C++
                        If ((^^PCI0.LPC0.EC0.Q22C > 0x0F))
                        {
                            ^^PCI0.LPC0.EC0.LLBW = Zero
                        }
                    }

                    PBST [0x02] = FBAS /* \_SB_.FBAS */
                }

                PBST [0x03] = ^^PCI0.LPC0.EC0.MBCV /* \_SB_.PCI0.LPC0.EC0_.MBCV */
                PBST [Zero] = ^^PCI0.LPC0.EC0.MBST /* \_SB_.PCI0.LPC0.EC0_.MBST */
            }

            Method (IVBI, 0, NotSerialized)
            {
                PBIF [One] = Ones
                PBIF [0x02] = Ones
                PBIF [0x04] = Ones
                PBIF [0x09] = "Bad"
                PBIF [0x0A] = "      "
                PBIF [0x0B] = "Bad"
                PBIF [0x0C] = "Bad"
            }

            Method (IVBS, 0, NotSerialized)
            {
                PBST [Zero] = Zero
                PBST [One] = Ones
                PBST [0x02] = Ones
                PBST [0x03] = 0x2710
            }
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (ECON)
                {
                    If (^^PCI0.LPC0.EC0.LIDS)
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Local0 = One
                    }
                }
                Else
                {
                    Local0 = One
                }

                Return (Local0)
            }
        }

        Device (QLB0)
        {
            Name (_HID, "HPQ0007")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }
        }

        Device (WMID)
        {
            Name (WCDS, Package (0x38)
            {
                0x04, 
                0x04, 
                0x04, 
                Zero, 
                0x04, 
                0x04, 
                Zero, 
                Zero, 
                0x04, 
                0x04, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x08, 
                Zero, 
                Zero, 
                0x04, 
                0x04, 
                0x04, 
                Zero, 
                0x04, 
                0x80, 
                0x04, 
                0x04, 
                0x04, 
                Zero, 
                0x04, 
                0x04, 
                0x04, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x04, 
                Zero, 
                Zero, 
                0x04, 
                0x80, 
                0x04, 
                0x04, 
                0x04, 
                0x04, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x80, 
                0x80, 
                0x04
            })
            Method (CSTA, 0, NotSerialized)
            {
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                IAOR = One
                SSMP = 0xC1
                If ((IAOR == One))
                {
                    Local0 [Zero] = 0x1C
                }
                Else
                {
                    Local0 [Zero] = IAOR /* \IAOR */
                    DerefOf (Local0 [0x02]) [Zero] = (CDAT & 0xFF
                        )
                }

                Return (Local0)
            }

            Method (CACT, 1, NotSerialized)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                IAOR = 0x02
                CDAT = Arg0
                SSMP = 0xC1
                If ((IAOR == 0x02))
                {
                    Local0 [Zero] = 0x1C
                }
                Else
                {
                    Local0 [Zero] = IAOR /* \IAOR */
                }

                CDAT = Zero
                Return (Local0)
            }

            Method (CDAC, 1, NotSerialized)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                IAOR = 0x03
                CDAT = Arg0
                SSMP = 0xC1
                If ((IAOR == 0x03))
                {
                    Local0 [Zero] = 0x1C
                }
                Else
                {
                    Local0 [Zero] = IAOR /* \IAOR */
                }

                CDAT = Zero
                Return (Local0)
            }

            Method (HWMC, 2, Serialized)
            {
                CreateDWordField (Arg1, Zero, SGIN)
                CreateDWordField (Arg1, 0x04, COMD)
                CreateDWordField (Arg1, 0x08, CMDT)
                CreateDWordField (Arg1, 0x0C, DSZI)
                CreateByteField (Arg1, 0x10, D008)
                CreateByteField (Arg1, 0x11, D8_1)
                If ((DSZI >= 0x03))
                {
                    CreateByteField (Arg1, 0x12, D8_2)
                }

                If ((DSZI >= 0x04))
                {
                    CreateByteField (Arg1, 0x13, D8_3)
                }

                CreateDWordField (Arg1, 0x10, D032)
                If ((DSZI > Zero))
                {
                    CreateField (Arg1, 0x80, (DSZI * 0x08), D128)
                }

                If ((Arg0 == One))
                {
                    Local0 = Zero
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x04
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x80
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x0400
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x1000
                }

                Local1 = Buffer ((0x08 + Local0)){}
                CreateDWordField (Local1, Zero, SIOU)
                CreateDWordField (Local1, 0x04, RETC)
                Local5 = DSZI /* \_SB_.WMID.HWMC.DSZI */
                If ((DSZI > 0x02F0))
                {
                    Local5 = 0x02F0
                }

                CreateField (Arg1, Zero, ((Local5 + 0x10) * 0x08), DAIN)
                SIOU = 0x4C494146
                RETC = 0x02
                If ((SGIN == 0x55434553))
                {
                    RETC = 0x03
                    If ((COMD == One))
                    {
                        RETC = 0x04
                        If ((CMDT == 0x10))
                        {
                            Local2 = GWSD ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x07))
                        {
                            If (DSZI)
                            {
                                Local3 = DerefOf (Arg1 [0x10])
                                Local2 = GBIF (Local3)
                                RETC = Zero
                            }
                            Else
                            {
                                RETC = 0x05
                            }
                        }

                        If ((CMDT == One))
                        {
                            Local2 = GDST ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x08))
                        {
                            Local2 = GBBT ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x09))
                        {
                            Local2 = GHKS ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x0A))
                        {
                            Local2 = GHKF ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x0C))
                        {
                            Local2 = GBBV ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x04))
                        {
                            Local2 = GDKS ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x13))
                        {
                            Local2 = GBBS ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x0F))
                        {
                            Local2 = GSAS ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x1B))
                        {
                            Local2 = GWDI ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x1D))
                        {
                            Local2 = GSDC ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x1E))
                        {
                            Local2 = GBUS ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x1F))
                        {
                            Local2 = GBCC ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x0D))
                        {
                            Local2 = GFRC ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x29))
                        {
                            Local2 = GFCS ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x2B))
                        {
                            Local2 = GBCO ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x2A))
                        {
                            Local2 = GPES ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x28))
                        {
                            If ((DSZI == 0x04))
                            {
                                If ((((((D032 >= Zero) && (D032 <= 
                                    0x06)) || ((D032 >= 0x10) && (D032 <= 0x15))) || ((
                                    D032 >= 0x20) && (D032 <= 0x24))) || (D032 == 0xAA)))
                                {
                                    Local2 = GTDC (D008)
                                    RETC = Zero
                                }
                                Else
                                {
                                    RETC = 0x06
                                }
                            }
                            Else
                            {
                                RETC = 0x05
                            }
                        }

                        If ((CMDT == 0x2C))
                        {
                            Local2 = GTCS ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x36))
                        {
                            Local2 = GPST ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x37))
                        {
                            Local2 = GBCT ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x38))
                        {
                            Local2 = GBST ()
                            RETC = Zero
                        }
                    }

                    If ((COMD == 0x02))
                    {
                        RETC = 0x04
                        If (((CMDT > Zero) && (CMDT <= 0x38)))
                        {
                            If ((DSZI < DerefOf (WCDS [(CMDT - One)])))
                            {
                                RETC = 0x05
                            }
                            Else
                            {
                                CreateDWordField (Arg1, 0x10, DDWD)
                                If ((CMDT == One))
                                {
                                    Local2 = SDST (DDWD)
                                    RETC = Zero
                                }

                                If ((CMDT == 0x09))
                                {
                                    Local2 = SHKS (DDWD)
                                    RETC = Zero
                                }

                                If ((CMDT == 0x0A))
                                {
                                    Local2 = SHKF (DDWD)
                                    RETC = Zero
                                }

                                If ((CMDT == 0x10))
                                {
                                    If ((DSZI != DerefOf (WCDS [(CMDT - One)])))
                                    {
                                        RETC = 0x05
                                    }
                                    Else
                                    {
                                        CreateField (Arg1, 0x80, 0x40, DB08)
                                        Local2 = SWSD (DB08)
                                        RETC = Zero
                                    }
                                }

                                If ((CMDT == 0x13))
                                {
                                    Local2 = SBBS (DDWD)
                                    RETC = Zero
                                }

                                If ((CMDT == 0x1B))
                                {
                                    CreateByteField (Arg1, 0x10, SWD0)
                                    CreateByteField (Arg1, 0x11, SWD1)
                                    CreateByteField (Arg1, 0x12, SWD2)
                                    CreateByteField (Arg1, 0x13, SWD3)
                                    Local2 = SWDS (SWD0, SWD1, SWD2, SWD3)
                                    RETC = Zero
                                }

                                If ((CMDT == 0x1D))
                                {
                                    If ((DSZI != DerefOf (WCDS [(CMDT - One)])))
                                    {
                                        RETC = 0x05
                                    }
                                    Else
                                    {
                                        CreateByteField (Arg1, 0x10, SDC0)
                                        CreateByteField (Arg1, 0x11, SDC1)
                                        CreateByteField (Arg1, 0x12, SDC2)
                                        CreateByteField (Arg1, 0x13, SDC3)
                                        Local2 = SSDC (SDC0, SDC1, SDC2, SDC3)
                                        RETC = Zero
                                    }
                                }

                                If ((CMDT == 0x1E))
                                {
                                    Local2 = SBUS (DDWD)
                                    RETC = Zero
                                }

                                If ((CMDT == 0x1F))
                                {
                                    If ((DSZI != DerefOf (WCDS [(CMDT - One)])))
                                    {
                                        RETC = 0x05
                                    }
                                    Else
                                    {
                                        CreateByteField (Arg1, 0x10, BCC0)
                                        CreateByteField (Arg1, 0x11, BCC1)
                                        CreateByteField (Arg1, 0x12, BCC2)
                                        CreateByteField (Arg1, 0x13, BCC3)
                                        Local2 = SBCC (BCC0, BCC1, BCC2, BCC3)
                                        RETC = Zero
                                    }
                                }

                                If ((CMDT == 0x29))
                                {
                                    Local2 = SFCS (DDWD)
                                    RETC = Zero
                                }

                                If ((CMDT == 0x2A))
                                {
                                    Local2 = SPES (DDWD)
                                    RETC = Zero
                                }

                                If ((CMDT == 0x2B))
                                {
                                    If ((DSZI != DerefOf (WCDS [(CMDT - One)])))
                                    {
                                        RETC = 0x05
                                    }
                                    Else
                                    {
                                        CreateByteField (Arg1, 0x10, BCO0)
                                        CreateByteField (Arg1, 0x11, BCO1)
                                        CreateByteField (Arg1, 0x12, BCO2)
                                        CreateByteField (Arg1, 0x13, BCO3)
                                        Local2 = SBCO (BCO0, BCO1, BCO2, BCO3)
                                        RETC = Zero
                                    }
                                }

                                If ((CMDT == 0x28))
                                {
                                    If ((DSZI == 0x80))
                                    {
                                        Switch (D008)
                                        {
                                            Case (0x10)
                                            {
                                                If ((D8_1 == One))
                                                {
                                                    Local2 = STDC (D128)
                                                    RETC = Zero
                                                }
                                                Else
                                                {
                                                    RETC = 0x06
                                                }
                                            }
                                            Case (0x11)
                                            {
                                                If ((D8_1 == One))
                                                {
                                                    Local2 = STDC (D128)
                                                    RETC = Zero
                                                }
                                                Else
                                                {
                                                    RETC = 0x06
                                                }
                                            }
                                            Case (0x12)
                                            {
                                                If ((D8_1 == One))
                                                {
                                                    Local2 = STDC (D128)
                                                    RETC = Zero
                                                }
                                                Else
                                                {
                                                    RETC = 0x06
                                                }
                                            }
                                            Case (0x13)
                                            {
                                                If ((D8_1 == One))
                                                {
                                                    Local2 = STDC (D128)
                                                    RETC = Zero
                                                }
                                                Else
                                                {
                                                    RETC = 0x06
                                                }
                                            }
                                            Case (0x14)
                                            {
                                                If ((D8_1 == One))
                                                {
                                                    Local2 = STDC (D128)
                                                    RETC = Zero
                                                }
                                                Else
                                                {
                                                    RETC = 0x06
                                                }
                                            }
                                            Case (0x15)
                                            {
                                                If ((D8_1 == One))
                                                {
                                                    Local2 = STDC (D128)
                                                    RETC = Zero
                                                }
                                                Else
                                                {
                                                    RETC = 0x06
                                                }
                                            }
                                            Case (0x20)
                                            {
                                                If ((D8_1 == One))
                                                {
                                                    Local2 = STDC (D128)
                                                    RETC = Zero
                                                }
                                                Else
                                                {
                                                    RETC = 0x06
                                                }
                                            }
                                            Case (0x21)
                                            {
                                                If ((D8_1 == One))
                                                {
                                                    Local2 = STDC (D128)
                                                    RETC = Zero
                                                }
                                                Else
                                                {
                                                    RETC = 0x06
                                                }
                                            }
                                            Case (0x22)
                                            {
                                                If ((D8_1 == One))
                                                {
                                                    Local2 = STDC (D128)
                                                    RETC = Zero
                                                }
                                                Else
                                                {
                                                    RETC = 0x06
                                                }
                                            }
                                            Case (0x23)
                                            {
                                                If ((D8_1 == One))
                                                {
                                                    Local2 = STDC (D128)
                                                    RETC = Zero
                                                }
                                                Else
                                                {
                                                    RETC = 0x06
                                                }
                                            }
                                            Case (0x24)
                                            {
                                                If ((D8_1 == One))
                                                {
                                                    Local2 = STDC (D128)
                                                    RETC = Zero
                                                }
                                                Else
                                                {
                                                    RETC = 0x06
                                                }
                                            }
                                            Case (0xAA)
                                            {
                                                Local2 = STDC (D128)
                                                RETC = Zero
                                            }
                                            Default
                                            {
                                                RETC = 0x06
                                            }

                                        }
                                    }
                                    Else
                                    {
                                        RETC = 0x05
                                    }
                                }

                                If ((CMDT == 0x2C))
                                {
                                    If ((DSZI != DerefOf (WCDS [(CMDT - One)])))
                                    {
                                        RETC = 0x05
                                    }
                                    Else
                                    {
                                        CreateByteField (Arg1, 0x10, STC0)
                                        CreateByteField (Arg1, 0x11, STC1)
                                        CreateByteField (Arg1, 0x12, STC2)
                                        CreateByteField (Arg1, 0x13, STC3)
                                        Local2 = STCS (STC0, STC1, STC2, STC3)
                                        RETC = Zero
                                    }
                                }

                                If ((CMDT == 0x36))
                                {
                                    If ((DSZI != DerefOf (WCDS [(CMDT - One)])))
                                    {
                                        RETC = 0x05
                                    }
                                    Else
                                    {
                                        Local2 = SPST (D128)
                                        RETC = Zero
                                    }
                                }

                                If ((CMDT == 0x37))
                                {
                                    If ((DSZI != DerefOf (WCDS [(CMDT - One)])))
                                    {
                                        RETC = 0x05
                                    }
                                    Else
                                    {
                                        Local2 = SBCT (D128)
                                        RETC = Zero
                                    }
                                }

                                If ((CMDT == 0x38))
                                {
                                    If ((DSZI != DerefOf (WCDS [(CMDT - One)])))
                                    {
                                        RETC = 0x05
                                    }
                                    Else
                                    {
                                        Local2 = SBST (D008, D8_1, D8_2, D8_3)
                                        RETC = Zero
                                    }
                                }
                            }
                        }
                    }

                    If ((COMD == 0x00020002))
                    {
                        If ((CMDT == One))
                        {
                            Local2 = CSTA ()
                            RETC = Zero
                        }

                        If ((CMDT == 0x02))
                        {
                            Local2 = CACT (DAIN)
                            RETC = Zero
                        }

                        If ((CMDT == 0x03))
                        {
                            Local2 = CDAC (DAIN)
                            RETC = Zero
                        }
                    }
                }

                If ((RETC == Zero))
                {
                    RETC = DerefOf (Local2 [Zero])
                    If ((RETC == Zero))
                    {
                        If ((DerefOf (Local2 [One]) <= Local0))
                        {
                            Local0 = Zero
                            While ((Local0 < DerefOf (Local2 [One])))
                            {
                                Local1 [(Local0 + 0x08)] = DerefOf (DerefOf (
                                    Local2 [0x02]) [Local0])
                                Local0++
                            }

                            SIOU = 0x53534150
                        }
                        Else
                        {
                            RETC = 0x05
                        }
                    }
                }

                Return (Local1)
            }

            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (WMIF, Zero)
            Name (WEI0, Zero)
            Name (WED0, Zero)
            Name (WEI1, Zero)
            Name (WED1, Zero)
            Name (WEVI, Zero)
            Name (BUFF, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (WMI5, Zero)
            CreateByteField (BUFF, Zero, OB0)
            CreateByteField (BUFF, One, OB1)
            CreateByteField (BUFF, 0x02, OB2)
            CreateByteField (BUFF, 0x03, OB3)
            Name (WLID, 0xFF)
            Name (WBID, 0xFF)
            Name (BTID, 0xFF)
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  // 4.._c,.E
                /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  // ..=D....
                /* 0010 */  0x41, 0x44, 0x01, 0x02, 0x79, 0x42, 0xF2, 0x95,  // AD..yB..
                /* 0018 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  // {M4C....
                /* 0020 */  0xC6, 0x7E, 0xF6, 0x1C, 0x80, 0x00, 0x01, 0x08,  // .~......
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x41, 0x45, 0x01, 0x00, 0xD4, 0x2B, 0x99, 0xD0,  // AE...+..
                /* 0040 */  0x7C, 0xA4, 0xFE, 0x4E, 0xB0, 0x72, 0x32, 0x4A,  // |..N.r2J
                /* 0048 */  0xEC, 0x92, 0x29, 0x6C, 0x42, 0x43, 0x01, 0x00   // ..)lBC..
            })
            Method (WMAD, 3, Serialized)
            {
                Return (HWMC (Arg1, Arg2))
            }

            Method (GDST, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x1 (BIOS Read)"
                Acquire (^^PCI0.LPC0.PSMX, 0xFFFF)
                BCMD = 0x70
                BSMI (Zero)
                Release (^^PCI0.LPC0.PSMX)
                OB0 = ADDL /* \ADDL */
                OB1 = Zero
                OB2 = Zero
                OB3 = Zero
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x01, 0x02, 0x03, 0x04                           // ....
                        }
                    }
                DerefOf (Local0 [0x02]) [Zero] = OB0 /* \_SB_.WMID.OB0_ */
                DerefOf (Local0 [0x02]) [One] = OB1 /* \_SB_.WMID.OB1_ */
                DerefOf (Local0 [0x02]) [0x02] = OB2 /* \_SB_.WMID.OB2_ */
                DerefOf (Local0 [0x02]) [0x03] = OB3 /* \_SB_.WMID.OB3_ */
                Return (Local0)
            }

            Method (SDST, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x1 (BIOS Write)"
                Local0 = (Arg0 & 0x1F)
                Acquire (^^PCI0.LPC0.PSMX, 0xFFFF)
                BCMD = 0x70
                BSMI (Zero)
                Release (^^PCI0.LPC0.PSMX)
                If ((Local0 == CSTE))
                {
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
                Else
                {
                    If (((TPOS == 0x40) || (TPOS == 0x50)))
                    {
                        If (((PFID == Zero) || ((^^PCI0.PB2.VGA.DVID & 0xFFFF) == 0xFFFF)))
                        {
                            ^^PCI0.VGA.LCDA = (Local0 & One)
                            ^^PCI0.VGA.CRTA = ((Local0 & 0x02) >> One)
                            ^^PCI0.VGA.TV0A = ((Local0 & 0x04) >> 0x02)
                            ^^PCI0.VGA.HDTV = ((Local0 & 0x10) >> 0x04)
                            Notify (^^PCI0.VGA, 0x80) // Status Change
                        }
                        Else
                        {
                            ^^PCI0.PB2.VGA.LCDA = (Local0 & One)
                            ^^PCI0.PB2.VGA.CRTA = ((Local0 & 0x02) >> One)
                            ^^PCI0.PB2.VGA.TV0A = ((Local0 & 0x04) >> 0x02)
                            ^^PCI0.PB2.VGA.HDTV = ((Local0 & 0x10) >> 0x04)
                            Notify (^^PCI0.PB2.VGA, 0x80) // Status Change
                        }
                    }

                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
            }

            Method (GDKS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x04 (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        One, 
                        Buffer (One)
                        {
                             0x00                                             // .
                        }
                    }
                If (ECON)
                {
                    If ((^^PCI0.LPC0.EC0.TLID == One))
                    {
                        Local0 = Package (0x03)
                            {
                                Zero, 
                                One, 
                                Buffer (One)
                                {
                                     0x04                                             // .
                                }
                            }
                    }
                }

                Return (Local0)
            }

            Method (GBIF, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x7 (BIOS Read)"
                If (!ECON)
                {
                    Local0 = Package (0x02)
                        {
                            0x0D, 
                            Zero
                        }
                    Sleep (0x96)
                    Return (Local0)
                }

                If (Arg0)
                {
                    Local0 = Package (0x02)
                        {
                            0x06, 
                            Zero
                        }
                    Sleep (0x96)
                    Return (Local0)
                }

                Acquire (^^PCI0.LPC0.EC0.MUT1, 0xFFFF)
                If (!^^PCI0.LPC0.EC0.MBTS)
                {
                    Local0 = Package (0x02)
                        {
                            0x34, 
                            Zero
                        }
                    Sleep (0x96)
                    Release (^^PCI0.LPC0.EC0.MUT1)
                    Return (Local0)
                }
                ElseIf (^^PCI0.LPC0.EC0.BDSO)
                {
                    Local1 = ^^PCI0.LPC0.EC0.MBST /* \_SB_.PCI0.LPC0.EC0_.MBST */
                    Local2 = ^^PCI0.LPC0.EC0.MBDC /* \_SB_.PCI0.LPC0.EC0_.MBDC */
                    If (((Local1 & 0x02) & (Local2 == 0x19)))
                    {
                        Local0 = Package (0x02)
                            {
                                0x36, 
                                Zero
                            }
                        Sleep (0x96)
                        Release (^^PCI0.LPC0.EC0.MUT1)
                        Return (Local0)
                    }
                    ElseIf (((Local1 & One) & (Local2 == 0x1A)))
                    {
                        Local0 = Package (0x02)
                            {
                                0x36, 
                                Zero
                            }
                        Sleep (0x96)
                        Release (^^PCI0.LPC0.EC0.MUT1)
                        Return (Local0)
                    }
                }
                Else
                {
                    Local0 = Package (0x02)
                        {
                            0x37, 
                            Zero
                        }
                    Sleep (0x96)
                    Release (^^PCI0.LPC0.EC0.MUT1)
                    Return (Local0)
                }

                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80){}
                    }
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x18, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [One])
                DerefOf (Local0 [0x02]) [Zero] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x10, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x03])
                DerefOf (Local0 [0x02]) [0x02] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x0F, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x05])
                DerefOf (Local0 [0x02]) [0x04] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x0C, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x07])
                DerefOf (Local0 [0x02]) [0x06] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x17, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x09])
                DerefOf (Local0 [0x02]) [0x08] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x08, RefOf (Local1))
                Local1 -= 0x0AAA
                Divide (Local1, 0x0A, Local2, Local1)
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x0B])
                DerefOf (Local0 [0x02]) [0x0A] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x09, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x0D])
                DerefOf (Local0 [0x02]) [0x0C] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x0A, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x0F])
                DerefOf (Local0 [0x02]) [0x0E] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x19, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x11])
                DerefOf (Local0 [0x02]) [0x10] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x16, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x13])
                DerefOf (Local0 [0x02]) [0x12] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x3F, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x15])
                DerefOf (Local0 [0x02]) [0x14] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x3E, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x17])
                DerefOf (Local0 [0x02]) [0x16] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x3D, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x19])
                DerefOf (Local0 [0x02]) [0x18] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x3C, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x1B])
                DerefOf (Local0 [0x02]) [0x1A] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x1C, RefOf (Local1))
                Local3 = ITOS (ToBCD (Local1))
                Local2 = 0x1C
                Local4 = Zero
                Local1 = SizeOf (Local3)
                While (Local1)
                {
                    GBFE (Local3, Local4, RefOf (Local5))
                    PBFE (DerefOf (Local0 [0x02]), Local2, Local5)
                    Local1--
                    Local2++
                    Local4++
                }

                DerefOf (Local0 [0x02]) [Local2] = 0x20
                Local2++
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x1B, RefOf (Local1))
                Local7 = (Local1 & 0x1F)
                Local6 = ITOS (ToBCD (Local7))
                Local7 = (Local1 & 0x01E0)
                Local7 >>= 0x05
                Local5 = ITOS (ToBCD (Local7))
                Local7 = (Local1 >> 0x09)
                Local7 += 0x07BC
                Local4 = ITOS (ToBCD (Local7))
                Local1 = 0x02
                Local7 = 0x03
                While (Local1)
                {
                    GBFE (Local5, Local7, RefOf (Local3))
                    PBFE (DerefOf (Local0 [0x02]), Local2, Local3)
                    Local1--
                    Local2++
                    Local7++
                }

                DerefOf (Local0 [0x02]) [Local2] = "/"
                Local2++
                Local1 = 0x02
                Local7 = 0x03
                While (Local1)
                {
                    GBFE (Local6, Local7, RefOf (Local3))
                    PBFE (DerefOf (Local0 [0x02]), Local2, Local3)
                    Local1--
                    Local2++
                    Local7++
                }

                DerefOf (Local0 [0x02]) [Local2] = "/"
                Local2++
                Local1 = 0x04
                Local7 = One
                While (Local1)
                {
                    GBFE (Local4, Local7, RefOf (Local3))
                    PBFE (DerefOf (Local0 [0x02]), Local2, Local3)
                    Local1--
                    Local2++
                    Local7++
                }

                DerefOf (Local0 [0x02]) [Local2] = Zero
                ^^PCI0.LPC0.EC0.SMRD (0x0B, 0x16, 0x20, RefOf (Local1))
                Local3 = SizeOf (Local1)
                Local2 = 0x2C
                Local4 = Zero
                While (Local3)
                {
                    GBFE (Local1, Local4, RefOf (Local5))
                    PBFE (DerefOf (Local0 [0x02]), Local2, Local5)
                    Local3--
                    Local2++
                    Local4++
                }

                ^^PCI0.LPC0.EC0.SMRD (0x0B, 0x16, 0x70, RefOf (Local1))
                GBFE (Local1, Zero, RefOf (Local5))
                If ((Local5 == 0x36))
                {
                    Local3 = SizeOf (Local1)
                    Local2 = 0x3E
                    Local4 = Zero
                }
                Else
                {
                    Local3 = 0x03
                    Local2 = 0x3E
                    Local4 = Zero
                    Local1 = Buffer (0x04)
                        {
                            "N/A"
                        }
                }

                While (Local3)
                {
                    GBFE (Local1, Local4, RefOf (Local5))
                    PBFE (DerefOf (Local0 [0x02]), Local2, Local5)
                    Local3--
                    Local2++
                    Local4++
                }

                ^^PCI0.LPC0.EC0.SMRD (0x0B, 0x16, 0x21, RefOf (Local1))
                Local3 = SizeOf (Local1)
                Local2 = 0x4F
                Local4 = Zero
                While (Local3)
                {
                    GBFE (Local1, Local4, RefOf (Local5))
                    PBFE (DerefOf (Local0 [0x02]), Local2, Local5)
                    Local3--
                    Local2++
                    Local4++
                }

                ^^PCI0.LPC0.EC0.SMRD (0x0B, 0x16, 0x22, RefOf (Local1))
                Local3 = SizeOf (Local1)
                Local2 = 0x56
                Local4 = Zero
                While (Local3)
                {
                    GBFE (Local1, Local4, RefOf (Local5))
                    PBFE (DerefOf (Local0 [0x02]), Local2, Local5)
                    Local3--
                    Local2++
                    Local4++
                }

                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, Zero, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x5B])
                DerefOf (Local0 [0x02]) [0x5A] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x1B, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x5D])
                DerefOf (Local0 [0x02]) [0x5C] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x14, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x5F])
                DerefOf (Local0 [0x02]) [0x5E] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x15, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x61])
                DerefOf (Local0 [0x02]) [0x60] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x0B, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x63])
                DerefOf (Local0 [0x02]) [0x62] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x11, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x65])
                DerefOf (Local0 [0x02]) [0x64] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x12, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x67])
                DerefOf (Local0 [0x02]) [0x66] = Local2
                ^^PCI0.LPC0.EC0.SMRD (0x09, 0x16, 0x13, RefOf (Local1))
                Divide (Local1, 0x0100, Local2, DerefOf (Local0 [0x02]) [0x69])
                DerefOf (Local0 [0x02]) [0x68] = Local2
                DerefOf (Local0 [0x02]) [0x6A] = One
                Sleep (0x96)
                Release (^^PCI0.LPC0.EC0.MUT1)
                Return (Local0)
            }

            Method (GBBT, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x8 (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80)
                        {
                            /* 0000 */  0x31, 0x01, 0x9B, 0x01, 0xAE, 0x01, 0xB6, 0x01,  // 1.......
                            /* 0008 */  0xB7, 0x01, 0xFF, 0xFF, 0x00, 0x00               // ......
                        }
                    }
                Return (Local0)
            }

            Method (GHKS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x9 (BIOS Read)"
                Acquire (^^PCI0.LPC0.EC0.MUT1, 0xFFFF)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04){}
                    }
                DerefOf (Local0 [0x02]) [Zero] = ^^PCI0.LPC0.EC0.GSHK ()
                Release (^^PCI0.LPC0.EC0.MUT1)
                Return (Local0)
            }

            Method (SHKS, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x9 (BIOS Write)"
                Acquire (^^PCI0.LPC0.EC0.MUT1, 0xFFFF)
                ^^PCI0.LPC0.EC0.SSHK (Arg0)
                Release (^^PCI0.LPC0.EC0.MUT1)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GHKF, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0xA (BIOS Read)"
                Return (HKFR ())
            }

            Method (SHKF, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0xA (BIOS Write)"
                Local1 = (Arg0 & 0xFF)
                Local3 = (Arg0 & 0xFF00)
                Local2 = (Local3 >> 0x08)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04){}
                    }
                DerefOf (Local0 [0x02]) [Zero] = Local1
                DerefOf (Local0 [0x02]) [One] = Local2
                If ((Arg0 == 0x01AE))
                {
                    Acquire (^^PCI0.LPC0.PSMX, 0xFFFF)
                    BCMD = 0x70
                    BSMI (Zero)
                    Release (^^PCI0.LPC0.PSMX)
                    ^^PCI0.LPC0.EC0.GNSD ()
                    If (((TPOS == 0x40) || (TPOS == 0x50)))
                    {
                        If (((PFID == Zero) || ((^^PCI0.PB2.VGA.DVID & 0xFFFF) == 0xFFFF)))
                        {
                            ^^PCI0.VGA.LCDA = (NSTE & One)
                            ^^PCI0.VGA.CRTA = ((NSTE & 0x02) >> One)
                            ^^PCI0.VGA.TV0A = ((NSTE & 0x04) >> 0x02)
                            ^^PCI0.VGA.HDTV = ((NSTE & 0x10) >> 0x04)
                            Notify (^^PCI0.VGA, 0x80) // Status Change
                        }
                        Else
                        {
                            ^^PCI0.PB2.VGA.LCDA = (NSTE & One)
                            ^^PCI0.PB2.VGA.CRTA = ((NSTE & 0x02) >> One)
                            ^^PCI0.PB2.VGA.TV0A = ((NSTE & 0x04) >> 0x02)
                            ^^PCI0.PB2.VGA.HDTV = ((NSTE & 0x10) >> 0x04)
                            Notify (^^PCI0.PB2.VGA, 0x80) // Status Change
                        }
                    }

                    DerefOf (Local0 [0x02]) [0x02] = NSTE /* \NSTE */
                    DerefOf (Local0 [0x02]) [0x03] = CSTE /* \CSTE */
                }

                Return (Local0)
            }

            Method (HKFR, 0, Serialized)
            {
                Acquire (^^PCI0.LPC0.EC0.MUT1, 0xFFFF)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04){}
                    }
                If (ECON)
                {
                    Local1 = ^^PCI0.LPC0.EC0.QBHK /* \_SB_.PCI0.LPC0.EC0_.QBHK */
                    ^^PCI0.LPC0.EC0.QBHK = Zero
                }
                Else
                {
                    Local1 = Zero
                }

                If ((Local1 == 0x0D))
                {
                    Debug = "Fn+ESC Pressed"
                    DerefOf (Local0 [0x02]) [Zero] = 0x31
                    DerefOf (Local0 [0x02]) [One] = One
                }

                If ((Local1 == One))
                {
                    Debug = "Fn+F1 Pressed"
                    DerefOf (Local0 [0x02]) [Zero] = 0x9B
                    DerefOf (Local0 [0x02]) [One] = One
                }

                If ((Local1 == 0x02))
                {
                    Debug = "Fn+F2 Pressed"
                    ^^PCI0.LPC0.EC0._Q10 ()
                    Sleep (0x32)
                    DerefOf (Local0 [0x02]) [Zero] = 0xB6
                    DerefOf (Local0 [0x02]) [One] = One
                }

                If ((Local1 == 0x03))
                {
                    Debug = "Fn+F3 Pressed"
                    ^^PCI0.LPC0.EC0._Q11 ()
                    Sleep (0x32)
                    DerefOf (Local0 [0x02]) [Zero] = 0xB7
                    DerefOf (Local0 [0x02]) [One] = One
                }

                If ((Local1 == 0x04))
                {
                    Debug = "Fn+F4 Pressed"
                    Acquire (^^PCI0.LPC0.PSMX, 0xFFFF)
                    BCMD = 0x70
                    BSMI (Zero)
                    Release (^^PCI0.LPC0.PSMX)
                    ^^PCI0.LPC0.EC0.GNSD ()
                    If (((TPOS == 0x40) || (TPOS == 0x50)))
                    {
                        If (((PFID == Zero) || ((^^PCI0.PB2.VGA.DVID & 0xFFFF) == 0xFFFF)))
                        {
                            ^^PCI0.VGA.LCDA = (NSTE & One)
                            ^^PCI0.VGA.CRTA = ((NSTE & 0x02) >> One)
                            ^^PCI0.VGA.TV0A = ((NSTE & 0x04) >> 0x02)
                            ^^PCI0.VGA.HDTV = ((NSTE & 0x10) >> 0x04)
                            Notify (^^PCI0.VGA, 0x80) // Status Change
                        }
                        Else
                        {
                            ^^PCI0.PB2.VGA.LCDA = (NSTE & One)
                            ^^PCI0.PB2.VGA.CRTA = ((NSTE & 0x02) >> One)
                            ^^PCI0.PB2.VGA.TV0A = ((NSTE & 0x04) >> 0x02)
                            ^^PCI0.PB2.VGA.HDTV = ((NSTE & 0x10) >> 0x04)
                            Notify (^^PCI0.PB2.VGA, 0x80) // Status Change
                        }
                    }

                    DerefOf (Local0 [0x02]) [Zero] = 0xAE
                    DerefOf (Local0 [0x02]) [One] = One
                    DerefOf (Local0 [0x02]) [0x02] = NSTE /* \NSTE */
                    DerefOf (Local0 [0x02]) [0x03] = CSTE /* \CSTE */
                }

                If ((Local1 == 0x06))
                {
                    Debug = "Fn+F6 Pressed"
                    DerefOf (Local0 [0x02]) [Zero] = 0x9D
                    DerefOf (Local0 [0x02]) [One] = One
                }

                Release (^^PCI0.LPC0.EC0.MUT1)
                Return (Local0)
            }

            Method (GBBV, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0xC (BIOS Read)"
                Acquire (^^PCI0.LPC0.EC0.MUT1, 0xFFFF)
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04){}
                    }
                If (ECON)
                {
                    Local1 = ^^PCI0.LPC0.EC0.QBBB /* \_SB_.PCI0.LPC0.EC0_.QBBB */
                    ^^PCI0.LPC0.EC0.QBBB = Zero
                }
                Else
                {
                    Local1 = Zero
                }

                If ((Local1 == 0x04))
                {
                    DerefOf (Local0 [0x02]) [Zero] = 0x42
                    DerefOf (Local0 [0x02]) [One] = 0x21
                    If (!^^PCI0.LPC0.EC0.CPBT)
                    {
                        DerefOf (Local0 [0x02]) [0x02] = One
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [0x02] = 0x02
                    }
                }

                If ((Local1 == 0x20))
                {
                    DerefOf (Local0 [0x02]) [Zero] = 0x8D
                    DerefOf (Local0 [0x02]) [One] = 0x21
                    If (!^^PCI0.LPC0.EC0.CPBT)
                    {
                        DerefOf (Local0 [0x02]) [0x02] = One
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [0x02] = 0x03
                    }
                }

                If ((Local1 == 0x21))
                {
                    DerefOf (Local0 [0x02]) [Zero] = 0x8E
                    DerefOf (Local0 [0x02]) [One] = 0x21
                    If (!^^PCI0.LPC0.EC0.CPBT)
                    {
                        DerefOf (Local0 [0x02]) [0x02] = One
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [0x02] = 0x03
                    }
                }

                If ((Local1 == 0x22))
                {
                    DerefOf (Local0 [0x02]) [Zero] = 0x8F
                    DerefOf (Local0 [0x02]) [One] = 0x21
                    If (!^^PCI0.LPC0.EC0.CPBT)
                    {
                        DerefOf (Local0 [0x02]) [0x02] = One
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [0x02] = 0x03
                    }
                }

                If ((Local1 == 0x23))
                {
                    DerefOf (Local0 [0x02]) [Zero] = 0x90
                    DerefOf (Local0 [0x02]) [One] = 0x21
                    If (!^^PCI0.LPC0.EC0.CPBT)
                    {
                        DerefOf (Local0 [0x02]) [0x02] = One
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [0x02] = 0x03
                    }
                }

                If ((Local1 == 0x24))
                {
                    DerefOf (Local0 [0x02]) [Zero] = 0x91
                    DerefOf (Local0 [0x02]) [One] = 0x21
                    If (!^^PCI0.LPC0.EC0.CPBT)
                    {
                        DerefOf (Local0 [0x02]) [0x02] = One
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [0x02] = 0x03
                    }
                }

                If ((Local1 == 0x25))
                {
                    DerefOf (Local0 [0x02]) [Zero] = 0x92
                    DerefOf (Local0 [0x02]) [One] = 0x21
                    If (!^^PCI0.LPC0.EC0.CPBT)
                    {
                        DerefOf (Local0 [0x02]) [0x02] = One
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [0x02] = 0x03
                    }
                }

                If ((Local1 == 0x26))
                {
                    DerefOf (Local0 [0x02]) [Zero] = 0x93
                    DerefOf (Local0 [0x02]) [One] = 0x21
                    If (!^^PCI0.LPC0.EC0.CPBT)
                    {
                        DerefOf (Local0 [0x02]) [0x02] = One
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [0x02] = 0x03
                    }
                }

                Release (^^PCI0.LPC0.EC0.MUT1)
                Return (Local0)
            }

            Method (GFRC, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x0D (BIOS Read)"
                Local0 = Zero
                Local1 = Zero
                Local2 = Zero
                Local3 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80){}
                    }
                Local0 |= 0x02
                Local0 |= 0x10
                Local0 |= 0x20
                Local2 |= 0x08
                GSMI (0x52)
                If ((WM0D != Zero))
                {
                    Local0 |= 0x80
                }

                If ((SSVM != Zero))
                {
                    Local1 |= One
                }

                Local1 |= 0x08
                Local1 |= 0x10
                DerefOf (Local3 [0x02]) [Zero] = Local0
                DerefOf (Local3 [0x02]) [One] = Local1
                DerefOf (Local3 [0x02]) [0x02] = Local2
                Return (Local3)
            }

            Method (GSAS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x0F (BIOS Read)"
                Local0 = Zero
                If (ECON)
                {
                    If ((^^PCI0.LPC0.EC0.ADPP == One))
                    {
                        Local0 = ^^PCI0.LPC0.EC0.SARS /* \_SB_.PCI0.LPC0.EC0_.SARS */
                    }
                }

                If ((Local0 <= One))
                {
                    Local0 = One
                }
                ElseIf (((Local0 > One) && (Local0 < 0x04)))
                {
                    Local0 = 0x02
                }
                ElseIf ((Local0 == 0x04))
                {
                    Local0 = 0x03
                }

                Local1 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                DerefOf (Local1 [0x02]) [Zero] = Local0
                Return (Local1)
            }

            Method (GWSD, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x10 (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80){}
                    }
                Local1 = Zero
                Local1 += CWD0 /* \CWD0 */
                Local1 += CWD1 /* \CWD1 */
                Local1 += CWD2 /* \CWD2 */
                Local1 += CWD3 /* \CWD3 */
                Local1 += CWDF /* \CWDF */
                Local1 &= 0xFF
                If (((CWCS == Local1) & (CWDF == 0x38)))
                {
                    Local1 = Zero
                    Local2 = (CWD0 >> 0x04)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (CWD0 & 0x0F)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (CWD1 >> 0x04)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (CWD1 & 0x0F)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (CWD2 >> 0x04)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (CWD2 & 0x0F)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (CWD3 >> 0x04)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (CWD3 & 0x0F)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                }
                Else
                {
                    Local1 = Zero
                    Local2 = (WSD0 >> 0x04)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (WSD0 & 0x0F)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (WSD1 >> 0x04)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (WSD1 & 0x0F)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (WSD2 >> 0x04)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (WSD2 & 0x0F)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (WSD3 >> 0x04)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                    Local1 += One
                    Local2 = (WSD3 & 0x0F)
                    Local2 += 0x30
                    DerefOf (Local0 [0x02]) [Local1] = Local2
                }

                Return (Local0)
            }

            Method (SWSD, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x10 (BIOS Write)"
                Local1 = Zero
                Local2 = (DerefOf (Arg0 [Local1]) << 0x04)
                Local2 &= 0xF0
                Local1 += One
                Local2 |= (DerefOf (Arg0 [Local1]) & 0x0F)
                CWD0 = Local2
                Local1 += One
                Local2 = (DerefOf (Arg0 [Local1]) << 0x04)
                Local2 &= 0xF0
                Local1 += One
                Local2 |= (DerefOf (Arg0 [Local1]) & 0x0F)
                CWD1 = Local2
                Local1 += One
                Local2 = (DerefOf (Arg0 [Local1]) << 0x04)
                Local2 &= 0xF0
                Local1 += One
                Local2 |= (DerefOf (Arg0 [Local1]) & 0x0F)
                CWD2 = Local2
                Local1 += One
                Local2 = (DerefOf (Arg0 [Local1]) << 0x04)
                Local2 &= 0xF0
                Local1 += One
                Local2 |= (DerefOf (Arg0 [Local1]) & 0x0F)
                CWD3 = Local2
                CWDF = 0x38
                Local1 = Zero
                Local1 += CWD0 /* \CWD0 */
                Local1 += CWD1 /* \CWD1 */
                Local1 += CWD2 /* \CWD2 */
                Local1 += CWD3 /* \CWD3 */
                Local1 += CWDF /* \CWDF */
                Local1 &= 0xFF
                CWCS = Local1
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GBBS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x13 (BIOS Read)"
                Local0 = Zero
                If (ECON)
                {
                    Local0 = ^^PCI0.LPC0.EC0.BBDA /* \_SB_.PCI0.LPC0.EC0_.BBDA */
                }

                If (Local0)
                {
                    Local1 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x00, 0x00, 0x00, 0x00                           // ....
                            }
                        }
                }
                Else
                {
                    Local1 = Package (0x03)
                        {
                            Zero, 
                            0x04, 
                            Buffer (0x04)
                            {
                                 0x01, 0x00, 0x00, 0x00                           // ....
                            }
                        }
                }

                Return (Local1)
            }

            Method (SBBS, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x13 (BIOS Write)"
                Local0 = Arg0
                If (ECON)
                {
                    If (Local0)
                    {
                        ^^PCI0.LPC0.EC0.BBDA = Zero
                    }
                    Else
                    {
                        ^^PCI0.LPC0.EC0.BBDA = One
                    }
                }

                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GWDI, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x1B (BIOS Read)"
                WMIF = One
                Local0 = Buffer (0x10){}
                Local0 [Zero] = One
                Local0 [One] = Zero
                Local0 [0x02] = Zero
                Local0 [0x03] = Zero
                Local0 [0x04] = Zero
                Local0 [0x05] = Zero
                Local2 = Zero
                Local3 = Zero
                If (WWLE)
                {
                    Local2++
                    Local3++
                }

                If (WCME)
                {
                    If (WCMC)
                    {
                        Local2++
                    }

                    Local3++
                }
                ElseIf (WBTE)
                {
                    Local2++
                    Local3++
                }

                Local0 [0x06] = Local2
                Local0 [0x07] = Local3
                Local0 [0x08] = Zero
                Local0 [0x09] = Zero
                Local0 [0x0A] = Zero
                Local0 [0x0B] = Zero
                Local0 [0x0C] = Zero
                Local0 [0x0D] = Zero
                Local0 [0x0E] = Zero
                Local0 [0x0F] = Zero
                Local1 = Zero
                If (WWLE)
                {
                    Local2 = Buffer (0x10){}
                    Local2 [Zero] = Zero
                    Local2 [One] = Zero
                    Local2 [0x02] = (WLVD & 0xFF)
                    Local2 [0x03] = ((WLVD >> 0x08) & 0xFF)
                    Local2 [0x04] = (WLDD & 0xFF)
                    Local2 [0x05] = ((WLDD >> 0x08) & 0xFF)
                    Local2 [0x06] = (WLSV & 0xFF)
                    Local2 [0x07] = ((WLSV >> 0x08) & 0xFF)
                    Local2 [0x08] = (WLSS & 0xFF)
                    Local2 [0x09] = ((WLSS >> 0x08) & 0xFF)
                    Local2 [0x0A] = Local1
                    WLID = Local1
                    Local3 = Zero
                    If (^^PCI0.SMBS.O052)
                    {
                        Local3 |= One
                    }

                    If (WWLS)
                    {
                        Local3 |= 0x02
                    }

                    Local3 |= 0x04
                    If (WWBS)
                    {
                        Local3 |= 0x08
                    }

                    Local2 [0x0B] = Local3
                    Local2 [0x0C] = Zero
                    Local2 [0x0D] = Zero
                    Local2 [0x0E] = Zero
                    Local2 [0x0F] = Zero
                    Concatenate (Local0, Local2, Local0)
                }

                If (WCME)
                {
                    If (WCMC)
                    {
                        Local1++
                    }

                    Local2 = Buffer (0x10){}
                    Local2 [Zero] = One
                    Local2 [One] = One
                    Local2 [0x02] = (BTVD & 0xFF)
                    Local2 [0x03] = ((BTVD >> 0x08) & 0xFF)
                    Local2 [0x04] = (BTDD & 0xFF)
                    Local2 [0x05] = ((BTDD >> 0x08) & 0xFF)
                    Local2 [0x06] = Zero
                    Local2 [0x07] = Zero
                    Local2 [0x08] = Zero
                    Local2 [0x09] = Zero
                    Local2 [0x0A] = Local1
                    WBID = Local1
                    Local3 = Zero
                    If (WCMC)
                    {
                        If (^^PCI0.SMBS.O189)
                        {
                            Local3 |= One
                        }

                        If (WCMS)
                        {
                            Local3 |= 0x02
                        }
                    }
                    Else
                    {
                        If (^^PCI0.SMBS.O052)
                        {
                            Local3 |= One
                        }

                        If (WWLS)
                        {
                            Local3 |= 0x02
                        }
                    }

                    Local3 |= 0x04
                    If (WWBS)
                    {
                        Local3 |= 0x08
                    }

                    Local2 [0x0B] = Local3
                    Local2 [0x0C] = Zero
                    Local2 [0x0D] = Zero
                    Local2 [0x0E] = Zero
                    Local2 [0x0F] = Zero
                    Concatenate (Local0, Local2, Local0)
                }
                ElseIf (WBTE)
                {
                    Local1++
                    Local2 = Buffer (0x10){}
                    Local2 [Zero] = One
                    Local2 [One] = One
                    Local2 [0x02] = (BTVD & 0xFF)
                    Local2 [0x03] = ((BTVD >> 0x08) & 0xFF)
                    Local2 [0x04] = (BTDD & 0xFF)
                    Local2 [0x05] = ((BTDD >> 0x08) & 0xFF)
                    Local2 [0x06] = Zero
                    Local2 [0x07] = Zero
                    Local2 [0x08] = Zero
                    Local2 [0x09] = Zero
                    Local2 [0x0A] = Local1
                    BTID = Local1
                    Local3 = Zero
                    If (^^PCI0.SMBS.O053)
                    {
                        Local3 |= One
                    }

                    If (WBTS)
                    {
                        Local3 |= 0x02
                    }

                    Local3 |= 0x04
                    If (WWBS)
                    {
                        Local3 |= 0x08
                    }

                    Local2 [0x0B] = Local3
                    Local2 [0x0C] = Zero
                    Local2 [0x0D] = Zero
                    Local2 [0x0E] = Zero
                    Local2 [0x0F] = Zero
                    Concatenate (Local0, Local2, Local0)
                }

                Local1 = Package (0x03){}
                Local1 [Zero] = Zero
                Local1 [One] = SizeOf (Local0)
                Local1 [0x02] = Local0
                Return (Local1)
            }

            Method (SWDS, 4, Serialized)
            {
                Debug = "HP WMI Command 0x1B (BIOS Write)"
                If ((WWLE || (WBTE || WCME)))
                {
                    Acquire (^^PCI0.LPC0.EC0.MUT2, 0xFFFF)
                    Switch (Arg2)
                    {
                        Case (0xFE)
                        {
                            If (WWLE)
                            {
                                WWLS = Arg3
                            }

                            If (WCME)
                            {
                                If (WCMC)
                                {
                                    WCMS = Arg3
                                }
                            }
                            ElseIf (WBTE)
                            {
                                WBTS = Arg3
                            }
                        }
                        Case (0xFF)
                        {
                            WWBS = Arg3
                        }
                        Default
                        {
                            If ((Arg2 == WLID))
                            {
                                WWLS = Arg3
                            }

                            If ((Arg2 == WBID))
                            {
                                WCMS = Arg3
                            }

                            If ((Arg2 == BTID))
                            {
                                WBTS = Arg3
                            }
                        }

                    }

                    ^^PCI0.LPC0.EC0.UPWS ()
                    GWEV (0x05, Zero)
                    Sleep (0x0BB8)
                    Release (^^PCI0.LPC0.EC0.MUT2)
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
                Else
                {
                    GWEV (0x05, Zero)
                    Return (Package (0x02)
                    {
                        0x0D, 
                        Zero
                    })
                }
            }

            Method (GSDC, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x1D (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                GHWI (0x1D, One)
                CreateField (DerefOf (Local0 [0x02]), Zero, 0x20, BUFS)
                Local1 = Buffer (0x80){}
                Local1 = HWBF /* \HWBF */
                CreateDWordField (Local1, Zero, HWD1)
                BUFS = HWD1 /* \_SB_.WMID.GSDC.HWD1 */
                Return (Local0)
            }

            Method (SSDC, 4, NotSerialized)
            {
                Debug = "HP WMI Command 0x1D (BIOS Write)"
                Local0 = Buffer (0x80){}
                CreateDWordField (Local0, Zero, HWD1)
                HWD1 = Arg0
                HWBF = Local0
                GHWI (0x1D, 0x02)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GBUS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x1E (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                GHWI (0x1E, One)
                CreateField (DerefOf (Local0 [0x02]), Zero, 0x20, BUFS)
                Local1 = Buffer (0x80){}
                Local1 = HWBF /* \HWBF */
                CreateDWordField (Local1, Zero, HWD1)
                BUFS = HWD1 /* \_SB_.WMID.GBUS.HWD1 */
                Return (Local0)
            }

            Method (SBUS, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x1E (BIOS Write)"
                Local0 = Buffer (0x80){}
                CreateDWordField (Local0, Zero, HWD1)
                HWD1 = Arg0
                HWBF = Local0
                GHWI (0x1E, 0x02)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GBCC, 0, Serialized)
            {
                Debug = "HP WMI Command 0x1F (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04){}
                    }
                If (ECON)
                {
                    If ((^^PCI0.LPC0.EC0.MBTS == One))
                    {
                        Local1 = Zero
                        Local2 = ^^PCI0.LPC0.EC0.MBDC /* \_SB_.PCI0.LPC0.EC0_.MBDC */
                        If (((Local2 & 0x18) == 0x18))
                        {
                            Switch ((Local2 & 0x07))
                            {
                                Case (Zero)
                                {
                                    Local1 = Zero
                                }
                                Case (One)
                                {
                                    Local1 = One
                                }
                                Case (0x02)
                                {
                                    Local1 = 0x02
                                }
                                Case (0x04)
                                {
                                    Local1 = 0x03
                                }
                                Default
                                {
                                    Local1 = Zero
                                }

                            }
                        }
                        Else
                        {
                            Local1 = Zero
                        }

                        DerefOf (Local0 [0x02]) [Zero] = Local1
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [Zero] = 0xFF
                    }

                    DerefOf (Local0 [0x02]) [One] = 0xFF
                }
                Else
                {
                    DerefOf (Local0 [Zero]) [Zero] = 0x35
                }

                Return (Local0)
            }

            Method (SBCC, 4, Serialized)
            {
                Debug = "HP WMI Command 0x1F (BIOS Write)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Buffer (0x04){}
                    }
                If (ECON)
                {
                    If (((Arg0 == Zero) && (^^PCI0.LPC0.EC0.MBTS == One)))
                    {
                        Local1 = ^^PCI0.LPC0.EC0.MBST /* \_SB_.PCI0.LPC0.EC0_.MBST */
                        Local1 &= 0x03
                        If (((Local1 & 0x02) & (Arg1 << One)))
                        {
                            DerefOf (Local0 [0x02]) [Zero] = 0x36
                        }
                        ElseIf (((Local1 & One) & (Arg1 >> One)))
                        {
                            DerefOf (Local0 [0x02]) [Zero] = 0x36
                        }
                        ElseIf (((^^PCI0.LPC0.EC0.ADPP == Zero) & (Arg1 == One)))
                        {
                            DerefOf (Local0 [0x02]) [Zero] = 0x35
                        }
                        Else
                        {
                            Local1 = ^^PCI0.LPC0.EC0.MBDC /* \_SB_.PCI0.LPC0.EC0_.MBDC */
                            If ((Arg1 == Zero))
                            {
                                Local1 &= 0xE0
                                ^^PCI0.LPC0.EC0.MBDC = Local1
                                Return (Local0)
                            }

                            If ((Arg1 == One))
                            {
                                Local1 &= 0xF9
                                Local1 |= 0x09
                            }

                            If ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFA
                                Local1 |= 0x0A
                            }

                            ^^PCI0.LPC0.EC0.MBDC = Local1
                            Sleep (0x64)
                            Local1 = ^^PCI0.LPC0.EC0.MBDC /* \_SB_.PCI0.LPC0.EC0_.MBDC */
                            While (((Local1 & 0x10) != 0x10))
                            {
                                Sleep (0x64)
                                Local1 = ^^PCI0.LPC0.EC0.MBDC /* \_SB_.PCI0.LPC0.EC0_.MBDC */
                            }
                        }
                    }
                    ElseIf (((Arg0 == 0x63) && (^^PCI0.LPC0.EC0.ADPP == One)))
                    {
                        Local1 = ^^PCI0.LPC0.EC0.MBDC /* \_SB_.PCI0.LPC0.EC0_.MBDC */
                        Local2 = Arg1
                        Switch (Local2)
                        {
                            Case (Zero)
                            {
                                Local1 &= 0xE0
                                ^^PCI0.LPC0.EC0.MBDC = Local1
                                Return (Local0)
                            }
                            Case (One)
                            {
                                Local1 &= 0xFA
                                Local1 |= 0x0A
                            }
                            Case (0x02)
                            {
                                Local1 &= 0xFC
                                Local1 |= 0x0C
                            }
                            Default
                            {
                                DerefOf (Local0 [0x02]) [Zero] = 0x35
                                Return (Local0)
                            }

                        }

                        ^^PCI0.LPC0.EC0.MBDC = Local1
                        Sleep (0x64)
                        Local1 = ^^PCI0.LPC0.EC0.MBDC /* \_SB_.PCI0.LPC0.EC0_.MBDC */
                        While (((Local1 & 0x10) != 0x10))
                        {
                            Sleep (0x64)
                            Local1 = ^^PCI0.LPC0.EC0.MBDC /* \_SB_.PCI0.LPC0.EC0_.MBDC */
                        }
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [Zero] = 0x34
                    }
                }
                Else
                {
                    DerefOf (Local0 [0x02]) [Zero] = 0x35
                }

                Return (Local0)
            }

            Method (GTDC, 1, NotSerialized)
            {
                Local0 = Buffer (0x80){}
                CreateDWordField (Local0, Zero, HWD1)
                HWD1 = Arg0
                HWBF = Local0
                GHWI (0x28, One)
                Local1 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80){}
                    }
                CreateField (DerefOf (Local1 [0x02]), Zero, 0x0400, BUFS)
                Local2 = Buffer (0x80){}
                Local2 = HWBF /* \HWBF */
                BUFS = Local2
                Return (Local1)
            }

            Method (STDC, 1, NotSerialized)
            {
                HWBF = Arg0
                GHWI (0x28, 0x02)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GFCS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x29 (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                If (ECON)
                {
                    If (^^PCI0.LPC0.EC0.FTCF)
                    {
                        GHWI (0x29, One)
                        CreateField (DerefOf (Local0 [0x02]), Zero, 0x20, BUFS)
                        Local1 = Buffer (0x80){}
                        Local1 = HWBF /* \HWBF */
                        CreateDWordField (Local1, Zero, HWD1)
                        BUFS = HWD1 /* \_SB_.WMID.GFCS.HWD1 */
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [Zero] = Zero
                    }
                }
                Else
                {
                    DerefOf (Local0 [0x02]) [Zero] = Zero
                }

                Return (Local0)
            }

            Method (SFCS, 1, Serialized)
            {
                Debug = "HP WMI Command 0x29 (BIOS Write)"
                Local0 = Buffer (0x80){}
                CreateDWordField (Local0, Zero, HWD1)
                HWD1 = Arg0
                HWBF = Local0
                GHWI (0x29, 0x02)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GPES, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x2A (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                GHWI (0x2A, One)
                CreateField (DerefOf (Local0 [0x02]), Zero, 0x20, BUFS)
                Local1 = Buffer (0x80){}
                Local1 = HWBF /* \HWBF */
                CreateDWordField (Local1, Zero, HWD1)
                BUFS = HWD1 /* \_SB_.WMID.GPES.HWD1 */
                Return (Local0)
            }

            Method (SPES, 1, Serialized)
            {
                Debug = "HP WMI Command 0x2A (BIOS Write)"
                Local0 = Buffer (0x80){}
                CreateDWordField (Local0, Zero, HWD1)
                HWD1 = Arg0
                HWBF = Local0
                GHWI (0x2A, 0x02)
                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GBCO, 0, Serialized)
            {
                Debug = "HP WMI Command 0x2B (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04){}
                    }
                If (ECON)
                {
                    If (^^PCI0.LPC0.EC0.MBTS)
                    {
                        If (^^PCI0.LPC0.EC0.BDSO)
                        {
                            If (^^PCI0.LPC0.EC0.ADPP)
                            {
                                Local2 = ^^PCI0.LPC0.EC0.MBST /* \_SB_.PCI0.LPC0.EC0_.MBST */
                                Local2 &= 0x03
                                Switch (Local2)
                                {
                                    Case (Zero)
                                    {
                                        Local1 = ^^PCI0.LPC0.EC0.BDVO /* \_SB_.PCI0.LPC0.EC0_.BDVO */
                                        If ((Local1 == 0xC5))
                                        {
                                            Local1 = 0x04
                                        }
                                        Else
                                        {
                                            Local1 = Zero
                                        }
                                    }
                                    Case (One)
                                    {
                                        Local1 = 0x02
                                    }
                                    Case (0x02)
                                    {
                                        Local2 = ^^PCI0.LPC0.EC0.MCUR /* \_SB_.PCI0.LPC0.EC0_.MCUR */
                                        If ((Local2 <= 0x0200))
                                        {
                                            Local1 = 0x03
                                        }
                                        ElseIf ((Local2 == Zero))
                                        {
                                            Local1 = Zero
                                        }
                                        Else
                                        {
                                            Local1 = One
                                        }
                                    }
                                    Default
                                    {
                                        DerefOf (Local0 [Zero]) [Zero] = 0x37
                                        Return (Local0)
                                    }

                                }
                            }
                            Else
                            {
                                Local1 = 0x02
                            }
                        }
                        Else
                        {
                            DerefOf (Local0 [Zero]) [Zero] = 0x37
                            Return (Local0)
                        }
                    }
                    Else
                    {
                        Local1 = 0xFF
                    }

                    DerefOf (Local0 [0x02]) [Zero] = Local1
                    DerefOf (Local0 [0x02]) [One] = 0xFF
                }
                Else
                {
                    DerefOf (Local0 [Zero]) [Zero] = 0x35
                }

                Return (Local0)
            }

            Method (SBCO, 4, Serialized)
            {
                Debug = "HP WMI Command 0x2B (BIOS Write)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Buffer (0x04){}
                    }
                If (ECON)
                {
                    If ((Arg0 == Zero))
                    {
                        If (^^PCI0.LPC0.EC0.MBTS)
                        {
                            If (^^PCI0.LPC0.EC0.BDSO)
                            {
                                Local1 = ^^PCI0.LPC0.EC0.MBST /* \_SB_.PCI0.LPC0.EC0_.MBST */
                                Switch (Arg1)
                                {
                                    Case (Zero)
                                    {
                                        Local1 = 0x40
                                    }
                                    Case (One)
                                    {
                                        If ((^^PCI0.LPC0.EC0.ADPP == Zero))
                                        {
                                            DerefOf (Local0 [0x02]) [Zero] = 0x35
                                            Return (Local0)
                                        }

                                        Local1 = 0x41
                                    }
                                    Case (0x02)
                                    {
                                        If ((Local1 & One))
                                        {
                                            DerefOf (Local0 [0x02]) [Zero] = 0x36
                                            Return (Local0)
                                        }

                                        Local1 = 0x42
                                    }
                                    Case (0x03)
                                    {
                                        If ((^^PCI0.LPC0.EC0.ADPP == Zero))
                                        {
                                            DerefOf (Local0 [0x02]) [Zero] = 0x35
                                            Return (Local0)
                                        }

                                        If (^^PCI0.LPC0.EC0.MBFC)
                                        {
                                            DerefOf (Local0 [0x02]) [Zero] = 0x35
                                            Return (Local0)
                                        }

                                        Local1 = 0x43
                                    }
                                    Case (0x04)
                                    {
                                        Local1 = 0x44
                                    }
                                    Case (0x05)
                                    {
                                        Local1 = 0x45
                                    }
                                    Default
                                    {
                                        DerefOf (Local0 [0x02]) [Zero] = 0x03
                                        Return (Local0)
                                    }

                                }

                                ^^PCI0.LPC0.EC0.BDVO = Local1
                                Sleep (0x64)
                                Local1 = ^^PCI0.LPC0.EC0.BDVO /* \_SB_.PCI0.LPC0.EC0_.BDVO */
                                While (((Local1 & 0x80) != 0x80))
                                {
                                    Sleep (0x64)
                                    Local1 = ^^PCI0.LPC0.EC0.BDVO /* \_SB_.PCI0.LPC0.EC0_.BDVO */
                                }

                                Local1 &= 0x30
                                Switch (Local1)
                                {
                                    Case (Zero)
                                    {
                                        DerefOf (Local0 [0x02]) [Zero] = Zero
                                    }
                                    Case (0x10)
                                    {
                                        DerefOf (Local0 [0x02]) [Zero] = 0x35
                                    }
                                    Case (0x20)
                                    {
                                        DerefOf (Local0 [0x02]) [Zero] = 0x35
                                    }
                                    Case (0x30)
                                    {
                                        DerefOf (Local0 [0x02]) [Zero] = 0x37
                                    }

                                }
                            }
                            Else
                            {
                                DerefOf (Local0 [0x02]) [Zero] = 0x37
                            }
                        }
                        Else
                        {
                            DerefOf (Local0 [0x02]) [Zero] = 0x34
                        }
                    }
                    ElseIf ((Arg0 == One))
                    {
                        DerefOf (Local0 [0x02]) [Zero] = 0x34
                    }
                    Else
                    {
                        DerefOf (Local0 [0x02]) [Zero] = 0x03
                    }
                }
                Else
                {
                    DerefOf (Local0 [0x02]) [Zero] = 0x35
                }

                Return (Local0)
            }

            Method (GTCS, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x2C (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                If (ECON)
                {
                    Local1 = Zero
                    If (^^PCI0.LPC0.EC0.GSSU)
                    {
                        Local1 |= One
                    }

                    If (^^PCI0.LPC0.EC0.GSMS)
                    {
                        Local1 |= 0x02
                    }

                    If (^^PCI0.LPC0.EC0.CS2S)
                    {
                        Local1 |= 0x04
                    }

                    DerefOf (Local0 [0x02]) [Zero] = Local1
                    Local1 = ^^PCI0.LPC0.EC0.MMST /* \_SB_.PCI0.LPC0.EC0_.MMST */
                    DerefOf (Local0 [0x02]) [One] = Local1
                    Local1 = ^^PCI0.LPC0.EC0.DMST /* \_SB_.PCI0.LPC0.EC0_.DMST */
                    DerefOf (Local0 [0x02]) [0x02] = Local1
                }

                Return (Local0)
            }

            Method (STCS, 4, NotSerialized)
            {
                Debug = "HP WMI Command 0x2C (BIOS Write)"
                If (ECON)
                {
                    ^^PCI0.LPC0.EC0.MMST = Arg1
                    ^^PCI0.LPC0.EC0.DMST = Arg2
                    Local0 = ((Arg2 << 0x04) | Arg1)
                    THAS = Local0
                    ^^PCI0.LPC0.EC0.UTAS ()
                }

                Return (Package (0x02)
                {
                    Zero, 
                    Zero
                })
            }

            Method (GPST, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x36 (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80){}
                    }
                CreateField (DerefOf (Local0 [0x02]), Zero, 0x0400, BUFS)
                HWBF = BUFS /* \_SB_.WMID.GPST.BUFS */
                GHWI (0x36, One)
                BUFS = HWBF /* \HWBF */
                Local0 [Zero] = HWRC /* \HWRC */
                Return (Local0)
            }

            Method (SPST, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x36 (BIOS Write)"
                Local0 = Buffer (0x80){}
                CreateField (Arg0, Zero, 0x0400, BUFS)
                Local0 = BUFS /* \_SB_.WMID.SPST.BUFS */
                HWBF = Local0
                GHWI (0x36, 0x02)
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                Local0 [Zero] = HWRC /* \HWRC */
                Return (Local0)
            }

            Method (GBCT, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x37 (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x80, 
                        Buffer (0x80){}
                    }
                CreateField (DerefOf (Local0 [0x02]), Zero, 0x0400, BUFS)
                HWBF = BUFS /* \_SB_.WMID.GBCT.BUFS */
                GHWI (0x37, One)
                BUFS = HWBF /* \HWBF */
                Local0 [Zero] = HWRC /* \HWRC */
                Return (Local0)
            }

            Method (SBCT, 1, NotSerialized)
            {
                Debug = "HP WMI Command 0x37 (BIOS Write)"
                Local0 = Buffer (0x80){}
                CreateField (Arg0, Zero, 0x0400, BUFS)
                Local0 = BUFS /* \_SB_.WMID.SBCT.BUFS */
                HWBF = Local0
                GHWI (0x37, 0x02)
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                Local0 [Zero] = HWRC /* \HWRC */
                Return (Local0)
            }

            Method (GBST, 0, NotSerialized)
            {
                Debug = "HP WMI Command 0x38 (BIOS Read)"
                Local0 = Package (0x03)
                    {
                        Zero, 
                        0x04, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                GHWI (0x38, One)
                CreateField (DerefOf (Local0 [0x02]), Zero, 0x20, BUFS)
                Local1 = Buffer (0x80){}
                Local1 = HWBF /* \HWBF */
                CreateDWordField (Local1, Zero, HWD1)
                BUFS = HWD1 /* \_SB_.WMID.GBST.HWD1 */
                Local0 [Zero] = HWRC /* \HWRC */
                Return (Local0)
            }

            Method (SBST, 4, NotSerialized)
            {
                Debug = "HP WMI Command 0x38 (BIOS Write)"
                Local0 = Buffer (0x04){}
                CMSW (0xDF, 0x31)
                Local0 [Zero] = Arg0
                Local0 [One] = Arg1
                Local0 [0x02] = Arg2
                Local0 [0x03] = Arg3
                HWBF = Local0
                GHWI (0x38, 0x02)
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                Local0 [Zero] = HWRC /* \HWRC */
                Return (Local0)
            }

            Method (GWEV, 2, NotSerialized)
            {
                If ((WEI0 == Zero))
                {
                    WEI0 = Arg0
                    WED0 = Arg1
                }
                Else
                {
                    WEI1 = Arg0
                    WED1 = Arg1
                }

                Notify (WMID, 0x80) // Status Change
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                Local0 = Buffer (0x08)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                    }
                CreateDWordField (Local0, Zero, EVID)
                CreateDWordField (Local0, 0x04, EVDA)
                EVID = WEI0 /* \_SB_.WMID.WEI0 */
                EVDA = WED0 /* \_SB_.WMID.WED0 */
                If ((WEI1 != Zero))
                {
                    WEI0 = WEI1 /* \_SB_.WMID.WEI1 */
                    WED0 = WED1 /* \_SB_.WMID.WED1 */
                    EVID = WEI0 /* \_SB_.WMID.WEI0 */
                    EVDA = WED0 /* \_SB_.WMID.WED0 */
                    WEI1 = Zero
                    WED1 = Zero
                    If ((WEVI == Zero))
                    {
                        WEVI = One
                        Notify (WMID, 0x80) // Status Change
                    }
                }
                Else
                {
                    WEI0 = Zero
                    WED0 = Zero
                }

                Return (Local0)
            }

            Method (W05W, 1, NotSerialized)
            {
                WMI5 = 0x05
                Local0 = (Arg0 * 0x0A)
                If (ECON)
                {
                    ^^PCI0.LPC0.EC0.DLYT = Local0
                }
            }

            Name (WQAE, Buffer (0x08A9)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x99, 0x08, 0x00, 0x00, 0x8A, 0x3A, 0x00, 0x00,  // .....:..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0x4B, 0x9C, 0x00, 0x01, 0x06, 0x18, 0x42,  // .K.....B
                /* 0020 */  0x10, 0x13, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x88, 0x59, 0x50, 0x08, 0x21,  // ..@.YP.!
                /* 0038 */  0x10, 0xEA, 0x4F, 0x20, 0xBF, 0x02, 0x10, 0x3A,  // ..O ...:
                /* 0040 */  0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E, 0x11,  // . S.A.N.
                /* 0048 */  0x44, 0xD0, 0xAB, 0x00, 0x9B, 0x02, 0x4C, 0x0A,  // D.....L.
                /* 0050 */  0xB0, 0x28, 0x40, 0xBB, 0x00, 0xCB, 0x02, 0x74,  // .(@....t
                /* 0058 */  0x0B, 0x90, 0x0E, 0x4B, 0x44, 0x82, 0xA3, 0xC4,  // ...KD...
                /* 0060 */  0x80, 0xA3, 0x74, 0x62, 0x0B, 0x37, 0x6C, 0xF0,  // ..tb.7l.
                /* 0068 */  0x42, 0x51, 0x34, 0x83, 0x28, 0x09, 0x2A, 0x17,  // BQ4.(.*.
                /* 0070 */  0xE0, 0x1B, 0x41, 0xE0, 0xE5, 0x0A, 0x90, 0x3C,  // ..A....<
                /* 0078 */  0x01, 0x69, 0x16, 0x60, 0x58, 0x80, 0x75, 0x01,  // .i.`X.u.
                /* 0080 */  0xB2, 0x87, 0x40, 0xA5, 0x0E, 0x01, 0x25, 0x67,  // ..@...%g
                /* 0088 */  0x08, 0xA8, 0x01, 0xB4, 0x3A, 0x01, 0xE1, 0x57,  // ....:..W
                /* 0090 */  0x3A, 0x25, 0x24, 0x41, 0x38, 0x63, 0x15, 0x8F,  // :%$A8c..
                /* 0098 */  0xAF, 0x59, 0x34, 0x3D, 0x27, 0x39, 0xC7, 0x90,  // .Y4='9..
                /* 00A0 */  0xE3, 0x71, 0xA1, 0x07, 0xC1, 0x05, 0x78, 0x18,  // .q....x.
                /* 00A8 */  0x06, 0x1D, 0xB2, 0x22, 0x6B, 0x80, 0xC1, 0x58,  // ..."k..X
                /* 00B0 */  0x18, 0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9,  // ..u1j.H.
                /* 00B8 */  0x80, 0x0C, 0x51, 0x12, 0x1C, 0x6A, 0xD4, 0x96,  // ..Q..j..
                /* 00C0 */  0x28, 0xC0, 0xFC, 0x38, 0x34, 0xBB, 0xB6, 0xC7,  // (..84...
                /* 00C8 */  0x42, 0x20, 0x99, 0xB4, 0xA1, 0xA0, 0xA4, 0x40,  // B .....@
                /* 00D0 */  0x68, 0x6C, 0x67, 0xEA, 0x19, 0x45, 0x3C, 0x52,  // hlg..E<R
                /* 00D8 */  0xC3, 0x24, 0xF0, 0x28, 0x22, 0x1B, 0x8D, 0x43,  // .$.("..C
                /* 00E0 */  0x63, 0x87, 0xE1, 0x61, 0x06, 0x3B, 0x88, 0xC3,  // c..a.;..
                /* 00E8 */  0x38, 0xE6, 0xC8, 0x09, 0x3C, 0xA1, 0x23, 0x3D,  // 8...<.#=
                /* 00F0 */  0xF2, 0xC2, 0xE6, 0x29, 0xD4, 0x18, 0xCD, 0x41,  // ...)...A
                /* 00F8 */  0x11, 0xB8, 0xD0, 0x18, 0x19, 0x10, 0xF2, 0x3C,  // .......<
                /* 0100 */  0x7E, 0x8D, 0xC4, 0x04, 0x76, 0x2F, 0xC0, 0x1A,  // ~...v/..
                /* 0108 */  0xA6, 0x60, 0x1B, 0x9B, 0x98, 0xFE, 0xFF, 0x10,  // .`......
                /* 0110 */  0x47, 0x1E, 0xA3, 0xAD, 0xB9, 0x0B, 0x29, 0x4C,  // G.....)L
                /* 0118 */  0x8C, 0x28, 0xC1, 0xE2, 0x55, 0x3C, 0x0D, 0xA1,  // .(..U<..
                /* 0120 */  0x3C, 0x29, 0x84, 0x8A, 0x54, 0x19, 0x8A, 0x86,  // <)..T...
                /* 0128 */  0x1E, 0xA5, 0x42, 0x01, 0xCE, 0xE6, 0x21, 0xDC,  // ..B...!.
                /* 0130 */  0x1A, 0x41, 0x85, 0x10, 0x2B, 0x52, 0xAC, 0xF6,  // .A..+R..
                /* 0138 */  0x07, 0x41, 0x42, 0x2E, 0x5B, 0xC7, 0x07, 0x47,  // .AB.[..G
                /* 0140 */  0x1A, 0x0D, 0xEA, 0x50, 0xE0, 0xB1, 0x7B, 0xDC,  // ...P..{.
                /* 0148 */  0xCF, 0x02, 0x3E, 0x08, 0x9C, 0x5B, 0x90, 0xA3,  // ..>..[..
                /* 0150 */  0x3B, 0x8B, 0x47, 0x85, 0x83, 0xF6, 0xF0, 0xD8,  // ;.G.....
                /* 0158 */  0x6D, 0xC0, 0x67, 0x08, 0x9F, 0x02, 0xF0, 0xAE,  // m.g.....
                /* 0160 */  0x01, 0x35, 0xFD, 0x83, 0x67, 0x82, 0xE0, 0x50,  // .5..g..P
                /* 0168 */  0x43, 0xF4, 0xA8, 0xC3, 0x9D, 0xC0, 0x21, 0x32,  // C.....!2
                /* 0170 */  0x40, 0x4F, 0xEA, 0xB8, 0xB1, 0x83, 0x3B, 0x99,  // @O....;.
                /* 0178 */  0x83, 0x7E, 0x6F, 0x68, 0xF6, 0xC6, 0x40, 0x08,  // .~oh..@.
                /* 0180 */  0x8E, 0xC7, 0x97, 0x05, 0x36, 0xE1, 0x04, 0x96,  // ....6...
                /* 0188 */  0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x51, 0x9E,  // ?.....Q.
                /* 0190 */  0x56, 0xCC, 0x90, 0xCF, 0x0C, 0x26, 0xB0, 0x58,  // V....&.X
                /* 0198 */  0x08, 0x29, 0x80, 0xD0, 0x78, 0xC0, 0x7F, 0x03,  // .)..x...
                /* 01A0 */  0x78, 0xC0, 0xF0, 0xCD, 0xC0, 0xF3, 0x35, 0xC1,  // x.....5.
                /* 01A8 */  0xB0, 0x10, 0x32, 0xB2, 0x0A, 0x8F, 0x87, 0x8E,  // ..2.....
                /* 01B0 */  0xC2, 0xD7, 0x83, 0xC3, 0x39, 0xAD, 0x78, 0x26,  // ....9.x&
                /* 01B8 */  0x18, 0x0E, 0x42, 0x27, 0x09, 0x8B, 0x1A, 0x36,  // ..B'...6
                /* 01C0 */  0x3D, 0x39, 0xF0, 0x43, 0x03, 0xBB, 0x19, 0x9C,  // =9.C....
                /* 01C8 */  0xC1, 0x23, 0x80, 0x47, 0x72, 0x42, 0xFE, 0x98,  // .#.GrB..
                /* 01D0 */  0x78, 0x60, 0xF0, 0x01, 0xF1, 0xDE, 0xA7, 0x4C,  // x`.....L
                /* 01D8 */  0x46, 0x70, 0xA6, 0x06, 0xF4, 0x71, 0xC0, 0xFF,  // Fp...q..
                /* 01E0 */  0xFF, 0xA1, 0xF0, 0x21, 0x7A, 0x7C, 0xA7, 0x7C,  // ...!z|.|
                /* 01E8 */  0xBC, 0x96, 0x00, 0x21, 0x59, 0xE3, 0x84, 0x7E,  // ...!Y..~
                /* 01F0 */  0x87, 0xF0, 0xF1, 0xC3, 0x47, 0x16, 0x47, 0x84,  // ....G.G.
                /* 01F8 */  0x90, 0x93, 0x53, 0x00, 0x1A, 0xF8, 0x74, 0xCF,  // ..S...t.
                /* 0200 */  0x2E, 0xC2, 0xE9, 0x7A, 0x52, 0x0E, 0x34, 0x0C,  // ...zR.4.
                /* 0208 */  0x3A, 0x4E, 0x70, 0x9C, 0x07, 0xC0, 0x31, 0x4E,  // :Np...1N
                /* 0210 */  0xF8, 0xE7, 0x02, 0xF8, 0x03, 0xE4, 0xA7, 0x8C,  // ........
                /* 0218 */  0x57, 0x8C, 0x04, 0x8E, 0x39, 0x42, 0xF4, 0xB9,  // W...9B..
                /* 0220 */  0xC6, 0x23, 0xC4, 0xC2, 0x3F, 0x55, 0x14, 0x3E,  // .#..?U.>
                /* 0228 */  0x10, 0x32, 0x46, 0x70, 0x01, 0x7A, 0x8C, 0xC0,  // .2Fp.z..
                /* 0230 */  0x37, 0xE0, 0x18, 0xD1, 0x47, 0x09, 0xAE, 0xFE,  // 7...G...
                /* 0238 */  0xA0, 0x41, 0x07, 0x88, 0xFB, 0xFF, 0x0F, 0x10,  // .A......
                /* 0240 */  0x3E, 0xA8, 0x07, 0x08, 0x7C, 0xA3, 0x1F, 0x3D,  // >...|..=
                /* 0248 */  0xD0, 0xE3, 0xB2, 0xE8, 0xF3, 0x80, 0x8C, 0x9F,  // ........
                /* 0250 */  0x68, 0x34, 0x2F, 0x7E, 0x3A, 0xE0, 0x87, 0x0F,  // h4/~:...
                /* 0258 */  0xF0, 0x80, 0x7A, 0x48, 0x38, 0x50, 0xCC, 0xB4,  // ..zH8P..
                /* 0260 */  0x39, 0xE8, 0xB3, 0xCB, 0xA1, 0x63, 0x87, 0x0B,  // 9....c..
                /* 0268 */  0xFE, 0x13, 0x08, 0xB8, 0xE4, 0x1D, 0xC2, 0x40,  // .......@
                /* 0270 */  0x31, 0x62, 0xFC, 0x39, 0xC8, 0xA7, 0x30, 0xF0,  // 1b.9..0.
                /* 0278 */  0xFF, 0xFF, 0x4F, 0x61, 0xB8, 0x11, 0xF0, 0x20,  // ..Oa... 
                /* 0280 */  0xAF, 0x05, 0x9F, 0xB6, 0xA8, 0x74, 0x18, 0xD4,  // .....t..
                /* 0288 */  0x81, 0x0B, 0x30, 0x09, 0x1A, 0xE1, 0x59, 0xA2,  // ..0...Y.
                /* 0290 */  0x36, 0x08, 0x01, 0xBF, 0x4D, 0xBC, 0x6D, 0xF9,  // 6...M.m.
                /* 0298 */  0x16, 0x10, 0xE7, 0xC8, 0x7B, 0x3B, 0x70, 0x11,  // ....{;p.
                /* 02A0 */  0x8C, 0x08, 0xA7, 0x1D, 0xCA, 0x63, 0x88, 0x18,  // .....c..
                /* 02A8 */  0x23, 0xCA, 0xE3, 0x96, 0x51, 0xDE, 0xB6, 0x5E,  // #...Q..^
                /* 02B0 */  0x00, 0xE2, 0x9D, 0xE5, 0xF3, 0x96, 0x31, 0x82,  // ......1.
                /* 02B8 */  0x47, 0x7E, 0xE0, 0x62, 0x62, 0xDF, 0x13, 0xFA,  // G~.bb...
                /* 02C0 */  0xB9, 0xF9, 0xC0, 0x05, 0x38, 0xFB, 0xFF, 0x1F,  // ....8...
                /* 02C8 */  0xB8, 0x00, 0x0E, 0x05, 0x3D, 0x0C, 0xA1, 0x87,  // ....=...
                /* 02D0 */  0xE1, 0xA9, 0x9C, 0xCB, 0x13, 0xE5, 0xA9, 0x44,  // .......D
                /* 02D8 */  0x8C, 0x1A, 0x26, 0xEA, 0x33, 0x94, 0x2F, 0x1A,  // ..&.3./.
                /* 02E0 */  0x3E, 0x10, 0x81, 0xEF, 0xCC, 0x05, 0xFC, 0xFE,  // >.......
                /* 02E8 */  0xFF, 0x07, 0x22, 0x38, 0x02, 0xCF, 0x34, 0xA0,  // .."8..4.
                /* 02F0 */  0xF4, 0x39, 0x03, 0x81, 0x9C, 0x8A, 0x0F, 0x35,  // .9.....5
                /* 02F8 */  0xC0, 0x48, 0xF4, 0xAB, 0xC1, 0x27, 0x1A, 0x2A,  // .H...'.*
                /* 0300 */  0x13, 0x06, 0x75, 0xA8, 0x01, 0x4C, 0x5E, 0x61,  // ..u..L^a
                /* 0308 */  0x9E, 0x46, 0xCF, 0xF9, 0x59, 0xC6, 0xA7, 0x1A,  // .F..Y...
                /* 0310 */  0x1F, 0x4A, 0x8D, 0x63, 0x88, 0x97, 0x99, 0x87,  // .J.c....
                /* 0318 */  0x1A, 0x1F, 0x0B, 0x5E, 0x49, 0x7D, 0xA8, 0x31,  // ...^I}.1
                /* 0320 */  0x54, 0x9C, 0x87, 0x1A, 0x9F, 0x48, 0x03, 0x45,  // T....H.E
                /* 0328 */  0x7D, 0xB3, 0x79, 0xB6, 0x31, 0x7A, 0x7C, 0xDF,  // }.y.1z|.
                /* 0330 */  0x50, 0x0D, 0xF1, 0x50, 0xC3, 0x84, 0xBD, 0x23,  // P..P...#
                /* 0338 */  0xF4, 0xC1, 0xF5, 0xA1, 0x06, 0x1C, 0xFF, 0xFF,  // ........
                /* 0340 */  0x43, 0x0D, 0xC0, 0xFF, 0xFF, 0xFF, 0xA1, 0x06,  // C.......
                /* 0348 */  0x70, 0x74, 0x34, 0x80, 0x73, 0x64, 0xC4, 0x1D,  // pt4.sd..
                /* 0350 */  0x0D, 0xC0, 0x75, 0x28, 0x05, 0x0E, 0x47, 0x03,  // ..u(..G.
                /* 0358 */  0xE0, 0x71, 0x14, 0x02, 0xF3, 0x85, 0xC6, 0x47,  // .q.....G
                /* 0360 */  0x21, 0x60, 0xF1, 0xFF, 0x3F, 0x0A, 0xE1, 0x64,  // !`..?..d
                /* 0368 */  0x9F, 0x83, 0x50, 0x42, 0x8F, 0x42, 0x80, 0x54,  // ..PB.B.T
                /* 0370 */  0xC8, 0xA7, 0x88, 0x67, 0x1F, 0x5F, 0x7E, 0x1E,  // ...g._~.
                /* 0378 */  0x08, 0x22, 0xBC, 0xE6, 0xFB, 0x14, 0xE4, 0x43,  // .".....C
                /* 0380 */  0xBE, 0x8F, 0x42, 0x0C, 0xC6, 0x50, 0xBE, 0x06,  // ..B..P..
                /* 0388 */  0xF9, 0x28, 0xC4, 0xA0, 0x5E, 0x83, 0x7C, 0xDF,  // .(..^.|.
                /* 0390 */  0x37, 0xC8, 0x91, 0x18, 0xFB, 0x99, 0xC0, 0x47,  // 7......G
                /* 0398 */  0x21, 0x26, 0xED, 0x28, 0x04, 0x28, 0xFC, 0xFF,  // !&.(.(..
                /* 03A0 */  0x1F, 0x85, 0x00, 0xFE, 0xFF, 0xFF, 0x8F, 0x42,  // .......B
                /* 03A8 */  0x80, 0xB3, 0x00, 0x47, 0x03, 0xD0, 0x4D, 0xEB,  // ...G..M.
                /* 03B0 */  0x51, 0x08, 0xBC, 0x77, 0x96, 0xD3, 0x3E, 0x01,  // Q..w..>.
                /* 03B8 */  0x9F, 0x85, 0x00, 0xB3, 0xFF, 0xFF, 0xB3, 0x10,  // ........
                /* 03C0 */  0x30, 0x3B, 0x0A, 0x45, 0x3D, 0xE8, 0x57, 0xA1,  // 0;.E=.W.
                /* 03C8 */  0x27, 0x80, 0x17, 0x80, 0x18, 0x61, 0xDE, 0x81,  // '....a..
                /* 03D0 */  0x5E, 0x32, 0xD9, 0x5D, 0xDC, 0x38, 0x4F, 0x2E,  // ^2.].8O.
                /* 03D8 */  0xA7, 0x6D, 0x94, 0x97, 0x20, 0x1F, 0x28, 0x9E,  // .m.. .(.
                /* 03E0 */  0x85, 0x0C, 0xF5, 0x2E, 0x14, 0xF4, 0x8D, 0xDC,  // ........
                /* 03E8 */  0xA3, 0x8C, 0x19, 0x3F, 0xC4, 0xF3, 0x90, 0x21,  // ...?...!
                /* 03F0 */  0x9E, 0x85, 0x00, 0x76, 0xFD, 0xFF, 0xCF, 0x42,  // ...v...B
                /* 03F8 */  0x00, 0xFF, 0xFF, 0xFF, 0x47, 0x03, 0xF8, 0x2F,  // ....G../
                /* 0400 */  0x00, 0x9F, 0x85, 0x80, 0xE7, 0x09, 0xE0, 0x41,  // .......A
                /* 0408 */  0xDB, 0x67, 0x21, 0x80, 0x33, 0x87, 0xCB, 0xF3,  // .g!.3...
                /* 0410 */  0x0F, 0x7A, 0x60, 0xEF, 0x11, 0x9E, 0xF5, 0x71,  // .z`....q
                /* 0418 */  0xBF, 0x5E, 0x7A, 0xE0, 0x0F, 0x05, 0xCF, 0x42,  // .^z....B
                /* 0420 */  0x0C, 0xEB, 0x98, 0x7C, 0x16, 0x62, 0x10, 0x2F,  // ...|.b./
                /* 0428 */  0x9A, 0x86, 0x78, 0xE1, 0xF4, 0x61, 0xC0, 0xFF,  // ..x..a..
                /* 0430 */  0x7F, 0xBC, 0xC0, 0xAF, 0x9C, 0x06, 0x0A, 0x12,  // ........
                /* 0438 */  0xE8, 0x59, 0x08, 0x60, 0xFC, 0xFF, 0xFF, 0x2C,  // .Y.`...,
                /* 0440 */  0x04, 0x90, 0x71, 0x8D, 0x3A, 0x0B, 0x01, 0xCB,  // ..q.:...
                /* 0448 */  0x63, 0x0C, 0x3B, 0xAD, 0x24, 0xF8, 0xFF, 0x3F,  // c.;.$..?
                /* 0450 */  0x0B, 0x01, 0x9F, 0x5C, 0x46, 0x0E, 0x42, 0x98,  // ...\F.B.
                /* 0458 */  0x88, 0x6F, 0x05, 0x1F, 0x33, 0x01, 0xA5, 0xE7,  // .o..3...
                /* 0460 */  0xA0, 0x17, 0x77, 0x63, 0x04, 0x7E, 0x91, 0x78,  // ..wc.~.x
                /* 0468 */  0xCC, 0x64, 0x47, 0x4D, 0xC3, 0x3C, 0x0B, 0x19,  // .dGM.<..
                /* 0470 */  0xEF, 0x30, 0xCE, 0xE0, 0x09, 0xDE, 0x93, 0x7F,  // .0......
                /* 0478 */  0x16, 0x62, 0x60, 0xC7, 0x18, 0xEC, 0x51, 0xC8,  // .b`...Q.
                /* 0480 */  0xA0, 0x06, 0x8F, 0x1D, 0x22, 0x4C, 0xA0, 0x67,  // ...."L.g
                /* 0488 */  0x21, 0x16, 0x6A, 0xDC, 0x3A, 0x7F, 0xF8, 0x2C,  // !.j.:..,
                /* 0490 */  0x04, 0xBC, 0xFF, 0xFF, 0x67, 0x21, 0xC0, 0xD3,  // ....g!..
                /* 0498 */  0x61, 0xC3, 0x67, 0x0D, 0xF0, 0x0C, 0xDF, 0xA3,  // a.g.....
                /* 04A0 */  0x3A, 0x87, 0xC7, 0x63, 0xE0, 0x92, 0x55, 0xC7,  // :..c..U.
                /* 04A8 */  0x09, 0x83, 0xE5, 0x5E, 0xA7, 0x6C, 0x9C, 0x61,  // ...^.l.a
                /* 04B0 */  0xE8, 0x20, 0xAC, 0x0E, 0x48, 0xC3, 0xC1, 0xDC,  // . ..H...
                /* 04B8 */  0x43, 0x0E, 0xE2, 0x7C, 0xD8, 0x40, 0xAD, 0x08,  // C..|.@..
                /* 04C0 */  0x4E, 0xC7, 0x24, 0x0F, 0xDA, 0x5A, 0x28, 0xA4,  // N.$..Z(.
                /* 04C8 */  0x80, 0x46, 0x03, 0x32, 0xBC, 0x33, 0x9F, 0x96,  // .F.2.3..
                /* 04D0 */  0x28, 0x88, 0x01, 0x7D, 0x02, 0xB2, 0x8D, 0x73,  // (..}...s
                /* 04D8 */  0x00, 0x6A, 0x2F, 0x9A, 0x02, 0x39, 0xDA, 0x60,  // .j/..9.`
                /* 04E0 */  0xF4, 0x5F, 0x16, 0xE8, 0x6C, 0x7C, 0x0D, 0xE0,  // ._..l|..
                /* 04E8 */  0x1A, 0x20, 0x74, 0x30, 0x30, 0xB4, 0xD5, 0xDC,  // . t00...
                /* 04F0 */  0x62, 0x50, 0x60, 0xC6, 0x7F, 0x70, 0x31, 0x81,  // bP`..p1.
                /* 04F8 */  0x8F, 0x2E, 0xF8, 0xB3, 0x00, 0xEE, 0xFF, 0x3F,  // .......?
                /* 0500 */  0x5C, 0x8F, 0xF6, 0x5D, 0xA0, 0xEA, 0xC9, 0xEA,  // \..]....
                /* 0508 */  0x8A, 0x60, 0x75, 0x97, 0x17, 0x08, 0x33, 0x32,  // .`u...32
                /* 0510 */  0x41, 0x7D, 0x07, 0x02, 0x50, 0x00, 0xF9, 0x0E,  // A}..P...
                /* 0518 */  0xE0, 0xA3, 0xD3, 0x73, 0x00, 0x9B, 0x48, 0x88,  // ...s..H.
                /* 0520 */  0x30, 0xD1, 0x8C, 0x8E, 0x98, 0x30, 0x2A, 0xFA,  // 0....0*.
                /* 0528 */  0x84, 0x29, 0x88, 0x27, 0xEC, 0x58, 0x13, 0x46,  // .).'.X.F
                /* 0530 */  0xCF, 0xC4, 0x77, 0x1B, 0x36, 0x62, 0x4C, 0x88,  // ..w.6bL.
                /* 0538 */  0xDB, 0x06, 0xB4, 0x09, 0x06, 0xF5, 0x3D, 0x08,  // ......=.
                /* 0540 */  0xD6, 0x90, 0xF9, 0x58, 0x7C, 0x67, 0xC0, 0x4D,  // ...X|g.M
                /* 0548 */  0x19, 0x8C, 0x73, 0x62, 0xD7, 0x04, 0x0B, 0x9C,  // ..sb....
                /* 0550 */  0x33, 0xC8, 0xE1, 0x31, 0xD7, 0x2F, 0x7E, 0x5B,  // 3..1./~[
                /* 0558 */  0xF2, 0xE8, 0xF8, 0x41, 0xC1, 0x37, 0x1C, 0x86,  // ...A.7..
                /* 0560 */  0xFD, 0x30, 0xE6, 0x19, 0xBD, 0x8A, 0xF9, 0xE6,  // .0......
                /* 0568 */  0x86, 0x81, 0xF5, 0x78, 0x39, 0xAC, 0xD1, 0xC2,  // ...x9...
                /* 0570 */  0x1E, 0xDA, 0xAB, 0x87, 0xCF, 0x2D, 0x3E, 0x4F,  // .....->O
                /* 0578 */  0x18, 0x23, 0xAC, 0x2F, 0x2C, 0xE0, 0x00, 0xFC,  // .#./,...
                /* 0580 */  0xFF, 0xBF, 0x5A, 0xC1, 0xBE, 0x6B, 0x80, 0xE7,  // ..Z..k..
                /* 0588 */  0x26, 0xE4, 0xBB, 0x06, 0xC0, 0xDA, 0xFF, 0xFF,  // &.......
                /* 0590 */  0x5D, 0x03, 0xFE, 0x35, 0xC1, 0x77, 0x0D, 0xE0,  // ]..5.w..
                /* 0598 */  0x3D, 0x74, 0xDF, 0x35, 0x80, 0x6B, 0xF6, 0xBB,  // =t.5.k..
                /* 05A0 */  0x06, 0xEA, 0x18, 0x60, 0x85, 0x77, 0x0D, 0x68,  // ...`.w.h
                /* 05A8 */  0xB7, 0xB4, 0x57, 0xB4, 0x87, 0x2A, 0x6B, 0xBA,  // ..W..*k.
                /* 05B0 */  0x6C, 0xA0, 0xD4, 0x5C, 0x36, 0x00, 0x6D, 0xFF,  // l..\6.m.
                /* 05B8 */  0xFF, 0xCB, 0x06, 0xB0, 0x91, 0x32, 0x61, 0x54,  // .....2aT
                /* 05C0 */  0xF8, 0x09, 0x53, 0x10, 0x4F, 0xD8, 0xC1, 0x2E,  // ..S.O...
                /* 05C8 */  0x1B, 0xA0, 0x88, 0x71, 0xD9, 0x00, 0xFD, 0xD8,  // ...q....
                /* 05D0 */  0x5E, 0x36, 0x80, 0xC1, 0x3D, 0x81, 0xDF, 0x36,  // ^6..=..6
                /* 05D8 */  0x80, 0x37, 0xA4, 0x6F, 0x1B, 0xC0, 0xF4, 0xFF,  // .7.o....
                /* 05E0 */  0x0F, 0x31, 0xFF, 0x6D, 0x03, 0xC5, 0x61, 0x95,  // .1.m..a.
                /* 05E8 */  0xB7, 0x0D, 0x88, 0x87, 0x77, 0x46, 0x60, 0x55,  // ....wF`U
                /* 05F0 */  0xD7, 0x0D, 0x94, 0x9E, 0xEB, 0x06, 0x40, 0x02,  // ......@.
                /* 05F8 */  0x31, 0x13, 0x46, 0xC5, 0x9F, 0x30, 0x05, 0xF1,  // 1.F..0..
                /* 0600 */  0x84, 0x1D, 0xED, 0xBA, 0x01, 0x8A, 0x20, 0xD7,  // ...... .
                /* 0608 */  0x0D, 0xD0, 0xCF, 0xEB, 0x94, 0xC1, 0xFA, 0xFF,  // ........
                /* 0610 */  0xBF, 0x6E, 0x60, 0x2F, 0x0A, 0x98, 0xFB, 0x06,  // .n`/....
                /* 0618 */  0xF0, 0x86, 0xE5, 0xF7, 0x0D, 0xC0, 0xC7, 0xE5,  // ........
                /* 0620 */  0x1B, 0x73, 0xDF, 0x00, 0x6C, 0xFE, 0xFF, 0xEF,  // .s..l...
                /* 0628 */  0x1B, 0x00, 0x13, 0x2E, 0x0A, 0xB8, 0xFB, 0x06,  // ........
                /* 0630 */  0xF0, 0xBE, 0x48, 0xFB, 0xBE, 0x01, 0x5C, 0x83,  // ..H...\.
                /* 0638 */  0x49, 0xF8, 0xFF, 0xDF, 0xF5, 0xE8, 0x0B, 0x40,  // I......@
                /* 0640 */  0x51, 0x60, 0x50, 0x43, 0xF2, 0x99, 0x00, 0x3F,  // Q`PC...?
                /* 0648 */  0xBA, 0x83, 0x3B, 0xA6, 0xE0, 0x4C, 0x12, 0x1C,  // ..;..L..
                /* 0650 */  0x6A, 0xE0, 0xBE, 0x02, 0x3C, 0xCD, 0x9F, 0xD6,  // j...<...
                /* 0658 */  0x7B, 0xBD, 0xE7, 0xF1, 0x24, 0x10, 0x92, 0x1D,  // {...$...
                /* 0660 */  0x61, 0x7C, 0x6C, 0x43, 0x9C, 0x0C, 0xC8, 0x41,  // a|lC...A
                /* 0668 */  0xDC, 0x47, 0xF7, 0x88, 0xEF, 0xE1, 0x86, 0x49,  // .G.....I
                /* 0670 */  0xE0, 0x21, 0x33, 0x34, 0x0E, 0x8D, 0x1D, 0x86,  // .!34....
                /* 0678 */  0xEF, 0x02, 0xC1, 0x0E, 0xE2, 0x30, 0xCE, 0xD7,  // .....0..
                /* 0680 */  0x04, 0x9E, 0xD0, 0x83, 0xC0, 0x7B, 0xF9, 0xA3,  // .....{..
                /* 0688 */  0x41, 0xF1, 0x77, 0x03, 0x4A, 0x60, 0xB8, 0xD0,  // A.w.J`..
                /* 0690 */  0x98, 0x91, 0xFA, 0x6C, 0xFF, 0x8E, 0x70, 0x24,  // ...l..p$
                /* 0698 */  0x26, 0xB0, 0x7B, 0x48, 0x59, 0x13, 0xA0, 0xF1,  // &.{HY...
                /* 06A0 */  0x96, 0x43, 0x20, 0x7A, 0xC3, 0x91, 0x2D, 0x14,  // .C z..-.
                /* 06A8 */  0xCD, 0x2D, 0xCA, 0xFB, 0x42, 0x14, 0x3B, 0x43,  // .-..B.;C
                /* 06B0 */  0x10, 0x46, 0x94, 0x60, 0x41, 0x9E, 0xD6, 0x62,  // .F.`A..b
                /* 06B8 */  0x45, 0x79, 0x66, 0x37, 0x42, 0xC4, 0x10, 0xAF,  // Eyf7B...
                /* 06C0 */  0x0C, 0x81, 0x5E, 0x12, 0xC2, 0x07, 0x79, 0xEC,  // ..^...y.
                /* 06C8 */  0x89, 0xD3, 0xFE, 0x20, 0x88, 0xF8, 0x17, 0x82,  // ... ....
                /* 06D0 */  0x3C, 0x80, 0x28, 0xD2, 0x68, 0x50, 0xE7, 0x06,  // <.(.hP..
                /* 06D8 */  0x8F, 0xDD, 0x87, 0x10, 0x5F, 0xFE, 0x7D, 0xB8,  // ...._.}.
                /* 06E0 */  0xF7, 0xE8, 0x0E, 0xEE, 0x45, 0xFE, 0xA0, 0x3D,  // ....E..=
                /* 06E8 */  0x3C, 0x76, 0xC2, 0xF0, 0x41, 0x03, 0x8E, 0x6B,  // <v..A..k
                /* 06F0 */  0x40, 0x4D, 0xFF, 0x19, 0x01, 0x2C, 0x97, 0x7F,  // @M...,..
                /* 06F8 */  0xF8, 0xE3, 0xF1, 0x3D, 0xC1, 0xF3, 0x39, 0xE1,  // ...=..9.
                /* 0700 */  0x04, 0x96, 0x3F, 0x08, 0xD4, 0x71, 0x84, 0xCF,  // ..?..q..
                /* 0708 */  0xF3, 0x85, 0xC3, 0x90, 0xCF, 0x02, 0x87, 0xC5,  // ........
                /* 0710 */  0xC4, 0x0A, 0xF8, 0xFF, 0x9F, 0x4C, 0xD8, 0x78,  // .....L.x
                /* 0718 */  0xC0, 0x7F, 0x0F, 0x79, 0xFD, 0xF7, 0xCD, 0xC0,  // ...y....
                /* 0720 */  0xF3, 0x35, 0xC1, 0x88, 0x10, 0x72, 0x32, 0x1E,  // .5...r2.
                /* 0728 */  0x34, 0xE8, 0xD9, 0xF8, 0x80, 0xE1, 0xEB, 0x09,  // 4.......
                /* 0730 */  0x3B, 0x77, 0x70, 0x51, 0xE7, 0x0E, 0xD4, 0xD1,  // ;wpQ....
                /* 0738 */  0xC1, 0xA7, 0x06, 0x76, 0xB3, 0xC1, 0x1C, 0xB7,  // ...v....
                /* 0740 */  0xF9, 0x59, 0x03, 0xFC, 0x23, 0x84, 0x7F, 0x7B,  // .Y..#..{
                /* 0748 */  0xF0, 0xBC, 0x7C, 0x65, 0x78, 0x75, 0x48, 0xE0,  // ..|exuH.
                /* 0750 */  0x90, 0x23, 0x44, 0x8F, 0xCB, 0x23, 0xC4, 0x9C,  // .#D..#..
                /* 0758 */  0x6F, 0x30, 0x43, 0x04, 0xD7, 0x59, 0x00, 0x1C,  // o0C..Y..
                /* 0760 */  0x43, 0x04, 0x3E, 0x67, 0x4C, 0x9F, 0x71, 0x60,  // C.>gL.q`
                /* 0768 */  0xFE, 0xFF, 0xCF, 0x38, 0xEC, 0xD2, 0xC3, 0x07,  // ...8....
                /* 0770 */  0x6A, 0x78, 0x13, 0xF8, 0xFE, 0x8C, 0x3B, 0xD2,  // jx....;.
                /* 0778 */  0x18, 0x9C, 0x1F, 0x33, 0x1E, 0x76, 0x18, 0xF8,  // ...3.v..
                /* 0780 */  0xFB, 0x8E, 0x67, 0x70, 0x34, 0x3E, 0xA0, 0x18,  // ..gp4>..
                /* 0788 */  0x21, 0xF8, 0x73, 0xC9, 0x73, 0x8A, 0x35, 0x0F,  // !.s.s.5.
                /* 0790 */  0x52, 0x33, 0x7A, 0x67, 0x38, 0x04, 0x76, 0xB3,  // R3zg8.v.
                /* 0798 */  0xC2, 0x1D, 0x38, 0x3C, 0x04, 0x3E, 0x80, 0x56,  // ..8<.>.V
                /* 07A0 */  0x27, 0x47, 0x4E, 0x3F, 0xA7, 0x84, 0x1B, 0x3E,  // 'GN?...>
                /* 07A8 */  0xBF, 0x0A, 0x60, 0x0E, 0x41, 0x38, 0x85, 0x36,  // ..`.A8.6
                /* 07B0 */  0x7D, 0x6A, 0x34, 0x6A, 0xD5, 0xA0, 0x4C, 0x8D,  // }j4j..L.
                /* 07B8 */  0x32, 0x0D, 0x6A, 0xF5, 0xA9, 0xD4, 0x98, 0xB1,  // 2.j.....
                /* 07C0 */  0x0B, 0x8B, 0x03, 0xBE, 0x02, 0x74, 0x1C, 0xB0,  // .....t..
                /* 07C8 */  0x3C, 0x0A, 0x1D, 0xC1, 0xC8, 0x9B, 0x40, 0x20,  // <.....@ 
                /* 07D0 */  0x0E, 0x0B, 0x42, 0x23, 0xBD, 0x71, 0x04, 0x62,  // ..B#.q.b
                /* 07D8 */  0xC9, 0xEF, 0x2F, 0x81, 0x58, 0xEE, 0x03, 0x45,  // ../.X..E
                /* 07E0 */  0x20, 0x0E, 0x68, 0x02, 0x9C, 0xAA, 0x00, 0xA7,  //  .h.....
                /* 07E8 */  0xAF, 0x01, 0x81, 0x38, 0x32, 0x08, 0x15, 0xFA,  // ...82...
                /* 07F0 */  0x35, 0x13, 0x88, 0x63, 0x82, 0xD0, 0x50, 0x3E,  // 5..c..P>
                /* 07F8 */  0x40, 0x98, 0xF4, 0x17, 0x80, 0x00, 0x89, 0x11,  // @.......
                /* 0800 */  0x10, 0x16, 0xEE, 0xE5, 0x20, 0x10, 0x4B, 0x7B,  // .... .K{
                /* 0808 */  0x2D, 0x08, 0xC4, 0x42, 0xAC, 0x80, 0xB0, 0xB8,  // -..B....
                /* 0810 */  0x20, 0x34, 0x9C, 0x16, 0x10, 0x26, 0xC9, 0x0C,  //  4...&..
                /* 0818 */  0x08, 0x0B, 0x04, 0x42, 0xE5, 0x3F, 0xD3, 0x04,  // ...B.?..
                /* 0820 */  0x62, 0x91, 0x6E, 0x00, 0xE9, 0xBA, 0x05, 0xE2,  // b.n.....
                /* 0828 */  0x20, 0x7A, 0x40, 0x98, 0x0C, 0x3F, 0x20, 0x2C,  //  z@..? ,
                /* 0830 */  0x34, 0x08, 0x8D, 0xF6, 0x6C, 0x10, 0x20, 0x31,  // 4...l. 1
                /* 0838 */  0x04, 0xC2, 0xE2, 0x3B, 0x02, 0x61, 0xE2, 0xDF,  // ...;.a..
                /* 0840 */  0x44, 0x02, 0x71, 0x4A, 0x4B, 0x10, 0x37, 0xA5,  // D.qJK.7.
                /* 0848 */  0x01, 0x06, 0x11, 0x90, 0x93, 0x6A, 0x02, 0x62,  // .....j.b
                /* 0850 */  0xB9, 0x41, 0x34, 0x24, 0xF2, 0xB0, 0x10, 0x90,  // .A4$....
                /* 0858 */  0x93, 0x82, 0x68, 0xC0, 0xC4, 0x14, 0x90, 0xFF,  // ..h.....
                /* 0860 */  0xFF, 0x43, 0x13, 0x88, 0x80, 0x9C, 0xCA, 0x15,  // .C......
                /* 0868 */  0x10, 0x8B, 0x08, 0x22, 0x20, 0x27, 0x7B, 0x52,  // ..." '{R
                /* 0870 */  0x09, 0xC8, 0x39, 0x41, 0x74, 0x04, 0x20, 0xBA,  // ..9At. .
                /* 0878 */  0x80, 0x58, 0x3E, 0x10, 0x01, 0x39, 0x96, 0x2F,  // .X>..9./
                /* 0880 */  0x20, 0x16, 0x12, 0x44, 0x40, 0x4E, 0xF4, 0xF3,  //  ..D@N..
                /* 0888 */  0x09, 0x44, 0xE2, 0x81, 0x68, 0x10, 0xE4, 0x3F,  // .D..h..?
                /* 0890 */  0x21, 0x20, 0x67, 0x04, 0x11, 0x10, 0x79, 0x12,  // ! g...y.
                /* 0898 */  0x05, 0x21, 0x9A, 0x3E, 0x62, 0x02, 0x71, 0x6A,  // .!.>b.qj
                /* 08A0 */  0x10, 0x9A, 0xEC, 0x27, 0x14, 0x84, 0xFC, 0xFF,  // ...'....
                /* 08A8 */  0x01                                             // .
            })
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 90
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]                 FACS Address : BFB77000
[028h 0040   4]                 DSDT Address : BFBE8000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000800
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000085A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000000000B0

[080h 0128   1]         Value to cause reset : FB
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000BFBE8000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 03 [DWord Access:32]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000800

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 04 [QWord Access:64]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) */

Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 90 48 50 51 4F 45 4D  // FACP......HPQOEM
    0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 48 50 20 20  // SLIC-MPC....HP  
    0020: 00 00 04 00 00 70 B7 BF 00 80 BE BF 00 02 09 00  // .....p..........
    0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 00 03 00 00  // e...............
    0070: A5 85 00 00 01 08 00 01 B0 00 00 00 00 00 00 00  // ................
    0080: FB 00 00 00 00 00 00 00 00 00 00 00 00 80 BE BF  // ................
    0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 04  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 8F
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000BFBE3F98

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 00000000BFBE3F18

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 8F 48 50 51 4F 45 4D  // FPDTD.....HPQOEM
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 48 50 20 20  // INSYDE  ....HP  
    0020: 00 00 04 00 00 00 10 01 00 00 00 00 98 3F BE BF  // .............?..
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 18 3F BE BF  // .............?..
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D1
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]            Hardware Block ID : 10228210

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 D1 48 50 51 4F 45 4D  // HPET8.....HPQOEM
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 48 50 20 20  // INSYDE  ....HP  
    0020: 00 00 04 00 10 82 22 10 00 00 00 00 00 00 D0 FE  // ......".........
    0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BC
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 BC 48 50 51 4F 45 4D  // MCFG<.....HPQOEM
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 48 50 20 20  // INSYDE  ....HP  
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D9
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "SLIC-MPC"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036 338] Software Licensing Structure : \
    53 4C 49 43 76 01 00 00 01 D9 48 50 51 4F 45 4D \
    53 4C 49 43 2D 4D 50 43 01 00 00 00 48 50 20 20 \
    00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00 \
    00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 \
    5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD \
    1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87 \
    31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D \
    7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21 \
    96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38 \
    57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3 \
    02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0 \
    93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6 \
    01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F \
    45 4D 53 4C 49 43 2D 4D 50 43 57 49 4E 44 4F 57 \
    53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 30 90 1F B4 A4 BE 80 1E E9 33 \
    EC 7F FC B1 28 0E A6 CE 43 72 8C 79 30 B4 F4 59 \
    EA 7D CF B7 11 8B DA 70 C5 C8 3F 79 20 08 6F 64 \
    CA 07 88 B3 B1 16 B4 BA 1A F1 85 52 B1 F5 07 55 \
    B5 70 61 EF 44 8C AA 5F 78 14 66 98 9C F3 58 D8 \
    AA 48 E0 37 F8 F6 AB 64 FA DA 17 2A 62 E3 04 1D \
    32 2D 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 D9 48 50 51 4F 45 4D  // SLICv.....HPQOEM
    0010: 53 4C 49 43 2D 4D 50 43 01 00 00 00 48 50 20 20  // SLIC-MPC....HP  
    0020: 00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD  // [.`V.X.....\.O..
    0050: 1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87  // ..........Y...>.
    0060: 31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D  // 1..t..;.[...|9..
    0070: 7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21  // |"..*....m.....!
    0080: 96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38  // ...h..DE><....78
    0090: 57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3  // W........~.@.Q:.
    00A0: 02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0  // .H...r.Bx.G.T...
    00B0: 93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6  // ...........2..T.
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F  // ............HPQO
    00D0: 45 4D 53 4C 49 43 2D 4D 50 43 57 49 4E 44 4F 57  // EMSLIC-MPCWINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 30 90 1F B4 A4 BE 80 1E E9 33  // ......0........3
    0100: EC 7F FC B1 28 0E A6 CE 43 72 8C 79 30 B4 F4 59  // ....(...Cr.y0..Y
    0110: EA 7D CF B7 11 8B DA 70 C5 C8 3F 79 20 08 6F 64  // .}.....p..?y .od
    0120: CA 07 88 B3 B1 16 B4 BA 1A F1 85 52 B1 F5 07 55  // ...........R...U
    0130: B5 70 61 EF 44 8C AA 5F 78 14 66 98 9C F3 58 D8  // .pa.D.._x.f...X.
    0140: AA 48 E0 37 F8 F6 AB 64 FA DA 17 2A 62 E3 04 1D  // .H.7...d...*b...
    0150: 32 2D D5 EA 33 66 5C 5B 3B 0E F7 09 66 42 32 AA  // 2-..3f\[;...fB2.
    0160: 14 99 C3 EE 1A 62 3B 07 5F F0 48 44 C4 E6 32 59  // .....b;._.HD..2Y
    0170: 1F 14 3E F1 B2 38                                // ..>..8


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "HPQOEM", "INSYDE  ", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIC, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Scope (\_SB)
    {
        Name (A001, 0x06)
        Name (AD02, 0x03)
        Alias (AD02, A029)
        Name (AD03, 0x01)
        Alias (AD03, A030)
        Name (AD04, 0x00)
        Alias (AD04, A031)
        Name (AD05, 0x03)
        Alias (AD05, A032)
        Name (AD06, Package (0x08)
        {
            0x00, 
            0x00, 
            0x02, 
            0x00, 
            0x00, 
            0x00, 
            0x02, 
            0x00
        })
        Alias (AD06, A033)
        Name (AD08, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD08, A034)
        Name (A035, 0x00)
        Name (A036, 0x00)
        Name (A037, 0x01)
        Name (A038, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A039, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A040, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (AD09, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD09, A019)
        Name (A041, Package (0x08)
        {
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01
        })
        Name (A042, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A017, 0x00)
        Name (AD10, Package (0x04)
        {
            0x6C, 
            0x5A, 
            0x4E, 
            0x40
        })
        Alias (AD10, A044)
        Method (A045, 1, Serialized)
        {
            Local1 = DerefOf (Arg0 [0x02])
            Local0 = A003 ()
            A036 = Local1
            Local2 = ((0x01 << 0x05) | (0x01 << 0x06))
            Local3 = ((A036 << 0x05) | (A037 << 0x06))
            A004 (0x00, 0x60, 0xF4, ~Local2, (Local2 & Local3))
            If ((Local1 == Local0))
            {
                Return (0x00)
            }

            A013 (A036)
            If ((A029 == 0x04))
            {
                A002 (0x01)
            }

            If (((A029 <= 0x01) || (A029 >= 0x04)))
            {
                Return (0x00)
            }

            If ((A035 == 0x00))
            {
                Return (0x00)
            }

            A046 ()
            Return (0x00)
        }

        Method (A047, 1, NotSerialized)
        {
            Local7 = A048 (Arg0)
            Local0 = DerefOf (Local7 [0x02])
            If ((Local0 != 0x02))
            {
                Return (Local7)
            }

            A046 ()
            Return (Local7)
        }

        Method (A048, 1, NotSerialized)
        {
            Name (A049, 0x00)
            A017 = 0x00
            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A050)
            A050 = 0x03
            CreateByteField (Local7, 0x02, A051)
            A051 = 0x01
            If (((A029 <= 0x01) || (A029 >= 0x04)))
            {
                Return (Local7)
            }

            If ((A035 == 0x00))
            {
                Return (Local7)
            }

            CreateWordField (Arg0, 0x02, A052)
            CreateWordField (Arg0, 0x04, A053)
            CreateWordField (Arg0, 0x06, A054)
            CreateByteField (Arg0, 0x08, A055)
            CreateByteField (Arg0, 0x09, A056)
            A049 = ((A052 >> 0x08) & 0xFF)
            While ((A017 <= A001))
            {
                If ((A018 (A017) == 0x01))
                {
                    Local1 = A014 (((A017 + 0x02) << 0x03), 0x18)
                    Local2 = ((Local1 >> 0x10) & 0xFF)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    If (((A049 >= Local1) && (A049 <= Local2)))
                    {
                        Break
                    }
                }

                A017++
            }

            If ((A017 > A001))
            {
                Return (Local7)
            }

            If ((DerefOf (A038 [A017]) == 0x00))
            {
                A038 [A017] = A052 /* \_SB_.A048.A052 */
            }
            ElseIf ((DerefOf (A038 [A017]) != A052))
            {
                Return (Local7)
            }

            A042 [A017] = 0x00
            If ((A056 == 0x00))
            {
                A038 [A017] = 0x00
            }

            If ((A056 == 0x01))
            {
                A042 [A017] = 0x01
            }

            If ((A056 == 0x02))
            {
                A040 [A017] = 0x01
            }

            If ((A056 == 0x03))
            {
                A040 [A017] = 0x02
            }

            If (((A053 & A054) == 0x01))
            {
                A040 [A017] = DerefOf (A033 [A017])
            }

            A051 = 0x02
            Return (Local7)
        }

        Method (A018, 1, Serialized)
        {
            If ((DerefOf (A033 [Arg0]) == 0x00))
            {
                Return (0x00)
            }

            Return (0x01)
        }

        Method (A057, 1, Serialized)
        {
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            A035 = DerefOf (Arg0 [0x02])
            Local0 = A007 (0x00, 0x60, 0xF4)
            If ((A035 == 0x01))
            {
                If (((Local0 & 0x01) == 0x01))
                {
                    Return (Local7)
                }

                Local0 |= 0x01
            }

            If ((A035 == 0x00))
            {
                If (((Local0 & 0x01) == 0x00))
                {
                    Return (Local7)
                }

                Local0 &= ~0x01
            }

            Local0 |= (A029 << 0x01)
            A006 (0x00, 0x60, 0xF4, Local0)
            A058 (RefOf (A039), RefOf (A038))
            A013 (A036)
            If ((A029 == 0x04))
            {
                A002 (0x01)
            }

            If (((A029 > 0x01) && (A029 < 0x04)))
            {
                If ((A029 == 0x02))
                {
                    A058 (RefOf (A033), RefOf (A019))
                    A017 = 0x00
                    While ((A017 <= A001))
                    {
                        If ((DerefOf (A034 [A017]) != 0x00))
                        {
                            A019 [A017] = DerefOf (A034 [A017])
                        }

                        A017++
                    }
                }
                Else
                {
                    A058 (RefOf (A041), RefOf (A019))
                    A019 [0x06] = DerefOf (A033 [0x06])
                }

                A046 ()
            }

            Return (Local7)
        }

        Name (A059, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Method (A046, 0, Serialized)
        {
            A017 = 0x00
            A058 (RefOf (A041), RefOf (A059))
            While ((A017 <= A001))
            {
                If ((A018 (A017) == 0x01))
                {
                    A059 [A017] = A060 (A017)
                }

                A017++
            }

            If ((Match (A042, MEQ, 0x01, MTR, 0x00, 0x00) != Ones))
            {
                A058 (RefOf (A041), RefOf (A059))
            }

            If ((Match (A059, MEQ, 0x02, MTR, 0x00, 0x00) != Ones))
            {
                A061 (0x02, 0x01)
                A002 (0x02)
            }

            A017 = 0x00
            While ((A017 <= A001))
            {
                If ((A018 (A017) == 0x00))
                {
                    A017++
                    Continue
                }

                Local0 = DerefOf (A019 [A017])
                Local2 = DerefOf (A059 [A017])
                If ((Local0 == Local2))
                {
                    A017++
                    Continue
                }

                A019 [A017] = Local2
                A062 (A017, Local2)
                A017++
            }

            If ((Match (A059, MEQ, 0x02, MTR, 0x00, 0x00) == Ones))
            {
                A002 (0x01)
                A061 (0x01, 0x00)
            }

            A016 ()
        }

        Method (A060, 1, NotSerialized)
        {
            Local0 = 0x02
            Local1 = A003 ()
            If ((DerefOf (A038 [Arg0]) == 0x00))
            {
                If (((Local1 == 0x01) || (A029 == 0x03)))
                {
                    Local0 = 0x01
                }

                If (((Local1 == 0x00) && (A029 == 0x03)))
                {
                    If ((Arg0 == 0x06))
                    {
                        Local0 = 0x02
                    }
                }

                If ((DerefOf (A034 [Arg0]) != 0x00))
                {
                    Local0 = DerefOf (A034 [Arg0])
                }
            }
            Else
            {
                Local0 = DerefOf (A040 [Arg0])
            }

            Local2 = DerefOf (A033 [A017])
            If ((Local2 < Local0))
            {
                Local0 = Local2
            }

            Return (Local0)
        }

        Method (A062, 2, NotSerialized)
        {
            If ((Arg0 == 0x06))
            {
                A004 (0x00, 0x60, 0x80, ~0x40, 0x40)
            }

            A063 (Arg0, Arg1)
            If ((DerefOf (A038 [Arg0]) != 0x00))
            {
                A064 (Arg0, 0xA1, ~0x1000, 0x00)
            }
            Else
            {
                A064 (Arg0, 0xA1, ~0x1000, 0x1000)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = (A065 (Arg0, 0xA5) & 0x3F)
            A066 (Arg0, 0x01, Local3)
            If ((Local3 >= 0x10))
            {
                A067 (Arg0)
                Local2 = 0x01
                While (Local2)
                {
                    A068 (Local1, 0x68, ~0x00, 0x20)
                    Sleep (0x1E)
                    While ((A014 (Local1, 0x68) & 0x08000000))
                    {
                        Sleep (0x0A)
                    }

                    Local2 = 0x00
                    If ((Arg1 == 0x01))
                    {
                        If ((A069 (Arg0) != 0x01))
                        {
                            Local2 = 0x01
                        }
                    }
                }

                A070 (Arg0)
            }
            Else
            {
            }

            If ((Arg0 == 0x06))
            {
                A004 (0x00, 0x60, 0x80, ~0x40, 0x00)
            }
        }

        Name (A071, Package (0x09)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A072, 0x00)
        Name (A073, 0x00)
        Name (A074, 0x00)
        Method (A067, 1, Serialized)
        {
            A072 = 0x00
            A073 = 0x00
            Local1 = ((Arg0 + 0x02) << 0x03)
            If ((Arg0 == 0x06))
            {
                A071 [0x00] = A075 (0x00, 0x00)
                A075 (0x00, 0x01)
                Return (0x00)
            }

            Local3 = A014 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A014 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A072 = A076 ((Local2 + Local4), 0x10)
                If ((A072 == 0x00))
                {
                    Local4++
                    Continue
                }

                A072 += 0x10
                A073 = A014 ((Local2 + Local4), A072)
                A071 [Local4] = (A073 & 0x03)
                A068 ((Local2 + Local4), A072, ~0x03, 0x00)
                Local4++
            }

            A074 = A014 (Local1, 0x68)
            A068 (Local1, 0x68, ~0x03, 0x00)
        }

        Method (A070, 1, Serialized)
        {
            A072 = 0x00
            A073 = 0x00
            If ((Arg0 == 0x06))
            {
                A075 (DerefOf (A071 [0x00]), 0x01)
                Return (0x00)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = A014 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            A068 (Local1, 0x68, ~0x03, (A074 & 0x03))
            Local2 = (Local3 << 0x08)
            Local3 = A014 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A072 = A076 ((Local2 + Local4), 0x10)
                If ((A072 == 0x00))
                {
                    Local4++
                    Continue
                }

                A072 += 0x10
                A015 ((Local2 + Local4), A072, DerefOf (A071 [Local4]))
                Local4++
            }
        }

        Method (A063, 2, NotSerialized)
        {
            Local0 = ((Arg0 + 0x02) << 0x03)
            If ((Arg1 == 0x01))
            {
                A068 (Local0, 0x88, ~0x2F, 0x21)
                A064 (Arg0, 0xA4, ~0x20000001, 0x00)
            }
            Else
            {
                A064 (Arg0, 0xA4, ~0x20000001, 0x20000001)
                A068 (Local0, 0x88, ~0x2F, 0x02)
            }
        }

        Method (A058, 2, NotSerialized)
        {
            Local1 = SizeOf (Arg0)
            Local0 = 0x00
            While ((Local0 < Local1))
            {
                DerefOf (Arg1) [Local0] = DerefOf (DerefOf (Arg0) [Local0])
                Local0++
            }
        }

        Method (A003, 0, NotSerialized)
        {
            Return ((A036 & A037))
        }

        Name (A022, 0x00)
        Name (A023, 0x00)
        Name (A024, 0x00)
        Name (A025, 0x00)
        Name (A026, 0x00)
        Name (A077, 0x00)
        Name (A078, 0x00)
        Name (A079, Buffer (0x10)
        {
            /* 0000 */  0x01, 0x02, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08,  // ........
            /* 0008 */  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10   // ........
        })
        Method (A080, 1, NotSerialized)
        {
            Name (A049, 0x00)
            Name (A081, 0x00)
            A017 = 0x00
            Local7 = Buffer (0x0A){}
            A049 = DerefOf (Arg0 [0x03])
            A081 = DerefOf (Arg0 [0x04])
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = A081 /* \_SB_.A080.A081 */
            Return (Local7)
            While ((A017 <= A001))
            {
                If ((A018 (A017) == 0x01))
                {
                    Local1 = A014 (((A017 + 0x02) << 0x03), 0x18)
                    Local2 = ((Local1 >> 0x10) & 0xFF)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    If (((A049 >= Local1) && (A049 <= Local2)))
                    {
                        Break
                    }
                }

                A017++
            }

            If ((A017 > A001))
            {
                Return (Local7)
            }

            If ((A082 (A017, 0x01) <= A081))
            {
                Return (Local7)
            }

            Local1 = DerefOf (A079 [A081])
            A083 (A017, 0x01, 0x00)
            A083 (A017, 0x02, Local1)
            A016 ()
            Local7 [0x02] = Local1
            Return (Local7)
        }

        Method (A084, 1, Serialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            Local4 = ((Local1 >> 0x03) - 0x02)
            If ((Local0 == 0x01))
            {
                Local2 = 0x06
            }
            Else
            {
                Local2 = 0x04
            }

            Local3 = A014 (Local1, 0x68)
            A068 (Local1, 0x68, ~0x03, 0x00)
            Local0 = A085 (Local4, Local2)
            A068 (Local1, 0x68, ~0x03, (Local3 & 0x03))
            A016 ()
            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A050)
            CreateByteField (Local7, 0x02, A051)
            CreateByteField (Local7, 0x03, A086)
            A050 = 0x04
            A051 = 0x00
            A086 = Local0
            Return (Local7)
        }

        Name (A087, Buffer (0x0A)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00                                       // ..
        })
        Method (A085, 2, Serialized)
        {
            Local4 = 0x00
            Local7 = A021 (Arg0)
            Local1 = DerefOf (Local7 [0x07])
            If ((Local1 != 0x01))
            {
                Return (Local4)
            }

            Local2 = Arg1
            While ((Local2 != 0x08))
            {
                If ((Local2 == 0x06))
                {
                    A034 [Arg0] = 0x00
                    A064 (Arg0, 0xA2, ~0x2000, 0x00)
                    If (((A029 > 0x01) && (A029 < 0x04)))
                    {
                        A037 = 0x00
                        A046 ()
                    }
                    Else
                    {
                        A063 (Arg0, DerefOf (A033 [Arg0]))
                    }

                    A083 (Arg0, 0x01, 0x00)
                    A088 (Arg0, 0x00)
                    Local2 = 0x01
                    Local3 = 0x00
                }

                If ((Local2 == 0x01))
                {
                    Local1 = (A065 (Arg0, 0xA5) & 0x3F)
                    If ((Local1 > 0x04))
                    {
                        Local2 = 0x02
                        Local3 = 0x00
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                    }
                    Else
                    {
                        Local2 = 0x04
                    }
                }

                If ((Local2 == 0x02))
                {
                    Local1 = A065 (Arg0, 0xA5)
                    Local1 &= 0x3F
                    If (((Local1 >= 0x10) && (Local1 <= 0x13)))
                    {
                        Local2 = 0x05
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                        Continue
                    }

                    Local2 = 0x04
                    If ((DerefOf (A034 [Arg0]) == 0x01))
                    {
                        Continue
                    }

                    If ((A089 (Arg0) == 0x01))
                    {
                        A064 (Arg0, 0xA2, ~0x2000, 0x2000)
                        A034 [Arg0] = 0x01
                        A063 (Arg0, 0x01)
                        Local2 = 0x07
                    }
                }

                If ((Local2 == 0x04))
                {
                    A088 (Arg0, 0x01)
                    A083 (Arg0, 0x00, 0x00)
                    A090 (Arg0)
                    Local0 = ((Arg0 + 0x02) << 0x03)
                    Local1 = A014 (Local0, 0x18)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    Local0 = (Local1 << 0x08)
                    Local0 = A014 (Local0, 0x00)
                    If ((Local0 == 0xFFFFFFFF)){}
                    A034 [Arg0] = 0x01
                    Local2 = 0x00
                }

                If ((Local2 == 0x07))
                {
                    If (CondRefOf (\_SB.ALIC, Local6))
                    {
                        Local1 = ((Arg0 + 0x02) << 0x03)
                        \_SB.ALIC (Local1, 0x00)
                        Sleep (0x02)
                        \_SB.ALIC (Local1, 0x01)
                        Local3 = 0x00
                        Local2 = 0x01
                        Continue
                    }

                    Local2 = 0x04
                }

                If ((Local2 == 0x05))
                {
                    Local4 = 0x01
                    Local2 = 0x00
                    A091 (Arg0)
                    A092 (Arg0)
                }

                If ((Local2 == 0x00))
                {
                    If (((A029 > 0x01) && (A029 < 0x04)))
                    {
                        A037 = 0x01
                        A046 ()
                    }

                    Local2 = 0x08
                }
            }

            Return (Local4)
        }

        Method (A083, 3, Serialized)
        {
            Local7 = A021 (Arg0)
            A022 = DerefOf (Local7 [0x00])
            A023 = DerefOf (Local7 [0x01])
            A024 = DerefOf (Local7 [0x02])
            A025 = DerefOf (Local7 [0x03])
            A078 = A082 (Arg0, 0x01)
            If ((Arg1 == 0x00))
            {
                A093 (Arg0, A024, (A024 + (A078 - 0x01)), 0x01)
                A008 (A022, A023, 0x01)
            }

            If ((Arg1 == 0x01))
            {
                A008 (A022, A023, 0x00)
                A093 (Arg0, A024, (A024 + (A078 - 0x01)), 0x00)
            }

            If ((Arg1 != 0x02))
            {
                Return (0x00)
            }

            If ((Arg2 == 0x00))
            {
                Local2 = A082 (Arg0, 0x00)
            }
            Else
            {
                Local2 = Arg2
            }

            If ((A078 <= Local2))
            {
                Return (0x00)
            }

            Local1 = A094 (Arg0)
            If ((Local1 == 0x00))
            {
                Local3 = (A024 + Local2)
                Local4 = A025 /* \_SB_.A025 */
            }
            Else
            {
                Local4 = (A025 - Local2)
                Local3 = A024 /* \_SB_.A024 */
            }

            A093 (Arg0, Local3, Local4, 0x01)
            If ((A022 > A023))
            {
                Local3 = A023 /* \_SB_.A023 */
                Local4 = A022 /* \_SB_.A022 */
            }
            Else
            {
                Local4 = A023 /* \_SB_.A023 */
                Local3 = A022 /* \_SB_.A022 */
            }

            If ((Local1 == 0x00))
            {
                Local3 += Local2
            }
            Else
            {
                Local4 -= Local2
            }

            A008 (Local3, Local4, 0x01)
            Return (0x00)
        }

        Method (A089, 1, NotSerialized)
        {
            Local1 = Buffer (0x10){}
            Local0 = 0x00
            While ((Local0 <= 0x03))
            {
                Local2 = A065 (Arg0, (Local0 + 0xA5))
                Local1 [(Local0 * 0x04)] = Local2
                Local1 [((Local0 * 0x04) + 0x01)] = (
                    Local2 >> 0x08)
                Local1 [((Local0 * 0x04) + 0x02)] = (
                    Local2 >> 0x10)
                Local1 [((Local0 * 0x04) + 0x03)] = (
                    Local2 >> 0x18)
                Local0++
            }

            Local0 = 0x00
            While ((Local0 < 0x0F))
            {
                If (((DerefOf (Local1 [Local0]) == 0x2A) && (DerefOf (
                    Local1 [(Local0 + 0x01)]) == 0x09)))
                {
                    Return (0x01)
                }

                Local0++
            }

            Return (0x00)
        }

        Method (A094, 1, Serialized)
        {
            Local7 = A021 (Arg0)
            A022 = DerefOf (Local7 [0x00])
            A023 = DerefOf (Local7 [0x01])
            Local0 = 0x00
            If ((A022 > A023))
            {
                Local0 = 0x01
            }

            Local1 = (A065 (Arg0, 0x50) & 0x01)
            Return (((Local0 ^ Local1) & 0x01))
        }

        Method (A088, 2, NotSerialized)
        {
            Local7 = A021 (Arg0)
            A077 = DerefOf (Local7 [0x04])
            A026 = ((DerefOf (Local7 [(0x05 + 0x01)]) << 
                0x08) | DerefOf (Local7 [0x05]))
            A004 (0x00, 0xE0, ((A026 << 0x10) | (0x0800 + (0x0100 * 
                A077))), ~0x01, Arg1)
        }

        Name (A095, Buffer (0x07)
        {
             0x00, 0x01, 0x02, 0x04, 0x08, 0x0C, 0x10         // .......
        })
        Method (A082, 2, NotSerialized)
        {
            If ((Arg1 == 0x00))
            {
                Local0 = ((A065 (Arg0, 0xA2) >> 0x04) & 0x07)
                Local1 = DerefOf (A095 [Local0])
            }
            Else
            {
                Local7 = A021 (Arg0)
                A022 = DerefOf (Local7 [0x00])
                A023 = DerefOf (Local7 [0x01])
                If ((A022 > A023))
                {
                    Local1 = (A022 - A023) /* \_SB_.A023 */
                }
                Else
                {
                    Local1 = (A023 - A022) /* \_SB_.A022 */
                }

                Local1++
            }

            Return (Local1)
        }

        Method (A093, 4, Serialized)
        {
            Local7 = A021 (Arg0)
            A024 = Arg1
            A025 = Arg2
            A026 = ((DerefOf (Local7 [(0x05 + 0x01)]) << 
                0x08) | DerefOf (Local7 [0x05]))
            If ((A024 > A025))
            {
                Local1 = (A024 - A025) /* \_SB_.A025 */
                Local2 = A025 /* \_SB_.A025 */
            }
            Else
            {
                Local1 = (A025 - A024) /* \_SB_.A024 */
                Local2 = A024 /* \_SB_.A024 */
            }

            Local3 = (((0x01 << (Local1 + 0x01)) - 0x01) << 
                Local2)
            Local4 = ~Local3
            If ((Arg3 == 0x01))
            {
                Local3 = 0x00
            }

            A004 (0x00, 0xE0, ((A026 << 0x10) | 0x8023), Local4, Local3)
            Stall (0x0A)
        }

        Name (A096, Package (0x01)
        {
            Package (0x02)
            {
                0x10831969, 
                0x00
            }
        })
        Method (A091, 1, Serialized)
        {
            Local6 = ((Arg0 + 0x02) << 0x03)
            Local2 = A076 (Local6, 0x10)
            If ((Local2 != 0x00))
            {
                Local0 = A014 (Local6, 0x18)
                Local0 = ((Local0 >> 0x08) & 0xFF)
                Local1 = (Local0 << 0x08)
                Local0 = A014 (Local1, 0x0C)
                Local0 = ((Local0 >> 0x10) & 0xFF)
                If (((Local0 & 0x80) != 0x00))
                {
                    Local4 = 0x07
                }
                Else
                {
                    Local4 = 0x00
                }

                Local3 = 0x08
                Local5 = 0x00
                While ((Local5 <= Local4))
                {
                    Local2 = A076 ((Local1 + Local5), 0x10)
                    If ((Local2 != 0x00))
                    {
                        Local0 = (A014 ((Local1 + Local5), (Local2 + 0x04)) & 0x07)
                        Local6 = A014 ((Local1 + Local5), 0x00)
                        Local7 = 0x00
                        While ((Local7 < SizeOf (A096)))
                        {
                            If ((DerefOf (DerefOf (A096 [Local7]) [0x00]) == Local6))
                            {
                                Local0 = DerefOf (DerefOf (A096 [Local7]) [0x01])
                            }

                            Local7++
                        }

                        If ((Local0 < Local3))
                        {
                            Local3 = Local0
                        }
                    }

                    Local5++
                }

                If ((Local3 != 0x08))
                {
                    Local6 = ((Arg0 + 0x02) << 0x03)
                    Local2 = A076 (Local6, 0x10)
                    Local0 = (A014 (Local6, (Local2 + 0x04)) & 0x07)
                    If ((Local0 < Local3))
                    {
                        Local3 = Local0
                    }

                    Local3 <<= 0x05
                    A068 (Local6, (Local2 + 0x08), ~0xE0, Local3)
                    Local5 = 0x00
                    While ((Local5 <= Local4))
                    {
                        Local2 = A076 ((Local1 + Local5), 0x10)
                        If ((Local2 != 0x00))
                        {
                            A068 (Local1, (Local2 + 0x08), ~0xE0, Local3)
                        }

                        Local5++
                    }
                }
            }
        }

        Method (A090, 1, Serialized)
        {
            Local0 = ((Arg0 + 0x02) << 0x03)
            Local1 = A076 (Local0, 0x10)
            If ((Local1 != 0x00))
            {
                A068 (Local0, (Local1 + 0x08), ~0xE0, 0x00)
            }
        }

        Method (A092, 1, Serialized)
        {
            Local7 = A021 (Arg0)
            Local0 = DerefOf (Local7 [0x09])
            If ((Local0 == 0x00))
            {
                Return (0x00)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local0 = A014 (Local1, 0x18)
            Local2 = (Local0 & 0xFF00)
            Local0 = A014 (Local2, 0x0C)
            Local0 = ((Local0 >> 0x10) & 0xFF)
            If (((Local0 & 0x80) != 0x00))
            {
                Local3 = 0x07
            }
            Else
            {
                Local3 = 0x00
            }

            Local4 = 0x00
            Local5 = 0x00
            While ((Local4 <= Local3))
            {
                Local6 = A076 ((Local2 | Local4), 0x10)
                If ((Local6 == 0x00))
                {
                    Local4++
                    Continue
                }

                If (((A014 ((Local2 | Local4), (Local6 + 0x0C
                    )) & (0x01 << 0x12)) != 0x00))
                {
                    Local5 = 0x01
                }
                Else
                {
                    Local5 = 0x00
                    Break
                }

                Local4++
            }

            If ((Local5 == 0x00))
            {
                Return (0x00)
            }

            Local4 = 0x00
            While ((Local4 <= Local3))
            {
                Local6 = A076 ((Local2 | Local4), 0x10)
                If ((Local6 == 0x00))
                {
                    Local4++
                    Continue
                }

                A068 ((Local2 | Local4), (Local6 + 0x10), 0xFFFFFFFF, (0x01 << 
                    0x08))
                Local4++
            }
        }

        Name (AD01, 0xF8000000)
        Alias (AD01, A097)
        Name (AD07, Package (0x08)
        {
            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x04, 0x04, 0x04, 0x04, 0x01, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x01                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x05, 0x05, 0x05, 0x05, 0x02, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x01                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x06, 0x06, 0x06, 0x06, 0x03, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x01                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x07, 0x07, 0x07, 0x07, 0x04, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x01                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x03, 0x00, 0x03, 0x00, 0x30, 0x01, 0x00,  // .....0..
                /* 0008 */  0x02, 0x00                                       // ..
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            }
        })
        Alias (AD07, A098)
        Method (A021, 1, NotSerialized)
        {
            Return (DerefOf (A098 [Arg0]))
        }

        Method (A014, 2, Serialized)
        {
            Local0 = (A097 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A099, SystemMemory, Local0, 0x04)
            Field (A099, DWordAcc, NoLock, Preserve)
            {
                A100,   32
            }

            Return (A100) /* \_SB_.A014.A100 */
        }

        Method (A015, 3, Serialized)
        {
            Local0 = (A097 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A099, SystemMemory, Local0, 0x04)
            Field (A099, DWordAcc, NoLock, Preserve)
            {
                A100,   32
            }

            A100 = Arg2
        }

        Method (A068, 4, Serialized)
        {
            Local0 = A014 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A015 (Arg0, Arg1, Local0)
        }

        Mutex (A101, 0x00)
        Method (A065, 2, NotSerialized)
        {
            Acquire (A101, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A015 (Local0, 0xE0, Arg1)
            Local0 = A014 (Local0, 0xE4)
            Release (A101)
            Return (Local0)
        }

        Method (A066, 3, NotSerialized)
        {
            Acquire (A101, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A015 (Local0, 0xE0, Arg1)
            A015 (Local0, 0xE4, Arg2)
            Release (A101)
        }

        Method (A064, 4, NotSerialized)
        {
            Local0 = A065 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A066 (Arg0, Arg1, Local0)
        }

        Mutex (A102, 0x00)
        Method (A007, 3, NotSerialized)
        {
            Acquire (A102, 0xFFFF)
            A015 (Arg0, Arg1, Arg2)
            Local0 = A014 (Arg0, (Arg1 + 0x04))
            Release (A102)
            Return (Local0)
        }

        Method (A006, 4, NotSerialized)
        {
            Acquire (A102, 0xFFFF)
            A015 (Arg0, Arg1, Arg2)
            A015 (Arg0, (Arg1 + 0x04), Arg3)
            Release (A102)
        }

        Method (A004, 5, NotSerialized)
        {
            Local0 = A007 (Arg0, Arg1, Arg2)
            Local0 = ((Local0 & Arg3) | Arg4)
            A006 (Arg0, Arg1, Arg2, Local0)
        }

        Method (A076, 2, NotSerialized)
        {
            Local1 = 0x34
            If ((A014 (Arg0, 0x00) == 0xFFFFFFFF))
            {
                Return (0x00)
            }

            Local0 = 0x01
            While ((Local0 == 0x01))
            {
                Local1 = (A014 (Arg0, Local1) & 0xFF)
                If ((Local1 == 0x00))
                {
                    Break
                }

                If (((A014 (Arg0, Local1) & 0xFF) == Arg1))
                {
                    Local0 = 0x00
                }
                Else
                {
                    Local1++
                }
            }

            Return (Local1)
        }

        Method (A075, 2, Serialized)
        {
            OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
            Field (PMIO, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
            {
                Offset (0xE0), 
                ABAR,   32
            }

            OperationRegion (ACFG, SystemIO, ABAR, 0x08)
            Field (ACFG, DWordAcc, NoLock, Preserve)
            {
                ABIX,   32, 
                ABDA,   32
            }

            Local0 = 0x00
            If ((Arg1 == 0x00))
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A075.ABDA */
                Return (Local0)
            }
            Else
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A075.ABDA */
                Local0 = ((Local0 & 0xFFFFFFFC) | Arg0)
                ABDA = Local0
            }
        }

        Name (A103, Buffer (0x0100){})
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x01))
            {
                Return (A045 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (A047 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (A057 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (A080 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (A104 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (A084 (Arg1))
            }

            Return (0x00)
        }

        Method (A104, 0, Serialized)
        {
            Return (0x00)
        }

        Method (A005, 1, NotSerialized)
        {
            While (((A007 (0x00, 0xB8, 0xE0003004) & 0x02) != 0x02)){}
            Local0 = A007 (0x00, 0xB8, 0xE0003000)
            Local0 = ((Local0 & 0xFFFE0000) | (~(Local0 & 0x01)
                 & 0x01))
            Local0 |= (Arg0 << 0x01)
            A006 (0x00, 0xB8, 0xE0003000, Local0)
            While (((A007 (0x00, 0xB8, 0xE0003004) & 0x01) != 0x01)){}
            While (((A007 (0x00, 0xB8, 0xE0003004) & 0x02) != 0x02)){}
        }

        Method (A069, 1, NotSerialized)
        {
            Local1 = A065 (Arg0, 0xA4)
            Local2 = (Local1 >> 0x0D)
            Local2 &= 0x03
            Local2++
            Return (Local2)
        }

        Method (A061, 2, Serialized)
        {
            If ((Arg0 == 0x01))
            {
                Local3 = DerefOf (A044 [A031])
            }
            Else
            {
                Local3 = DerefOf (A044 [A030])
            }

            Local2 = (A007 (0x00, 0xB8, 0xE000203C) & 0x04)
            Local1 = (A007 (0x00, 0xB8, 0xE0002040) & 0x01)
            While (((Local1 << 0x02) != Local2))
            {
                Local1 = (A007 (0x00, 0xB8, 0xE0002040) & 0x01)
            }

            Local1 = A007 (0x00, 0xB8, 0xE000203C)
            If ((Arg0 == 0x01))
            {
                Local1 &= 0xFFFFFFFD
            }
            Else
            {
                Local1 |= 0x02
            }

            A006 (0x00, 0xB8, 0xE000203C, Local1)
            Local1 &= ~(0xFF << 0x08)
            Local1 |= (Local3 << 0x08)
            Local2 = (~Local1 & 0x04)
            Local1 = ((Local1 & ~0x04) | Local2)
            A006 (0x00, 0xB8, 0xE000203C, Local1)
            If ((Arg1 != 0x00))
            {
                While (((Local1 << 0x02) != Local2))
                {
                    Local1 = (A007 (0x00, 0xB8, 0xE0002040) & 0x01)
                }
            }
        }

        Method (A002, 1, NotSerialized)
        {
            Local1 = A003 ()
            Local5 = 0x00
            A004 (0x00, 0xB8, 0x0001F300, 0xFFFFFFFE, 0x00)
            A005 (0x09)
            If ((Local1 == 0x00))
            {
                A006 (0x00, 0xB8, 0x0001F954, 0x00)
                A004 (0x00, 0xB8, 0x0001F200, 0xFFFFFFFE, 0x00)
                A004 (0x00, 0xB8, 0x0001F2A0, 0xFFFFFFFE, 0x01)
                A004 (0x00, 0xB8, 0x0001F2C0, 0xFFFFFFFE, 0x01)
                Local6 = 0x00050001
            }
            Else
            {
                If ((Arg0 == 0x01))
                {
                    Local5 = A007 (0x00, 0xB8, 0x0001FE00)
                    A006 (0x00, 0xB8, 0x0001F954, Local5)
                    A004 (0x00, 0xB8, 0x0001F200, 0xFFFFFFFE, 0x01)
                    A004 (0x00, 0xB8, 0x0001F2A0, 0xFFFFFFFE, 0x01)
                    A004 (0x00, 0xB8, 0x0001F2C0, 0xFFFFFFFE, 0x00)
                }
                Else
                {
                    A004 (0x00, 0xB8, 0x0001F200, 0xFFFFFFFE, 0x01)
                    A004 (0x00, 0xB8, 0x0001F2A0, 0xFFFFFFFE, 0x00)
                    A004 (0x00, 0xB8, 0x0001F2C0, 0xFFFFFFFE, 0x01)
                }

                Local6 = 0x01
            }

            A004 (0x00, 0xB8, 0x0001F300, 0xFF00FFFE, Local6)
            A005 (0x09)
        }

        Method (A008, 3, NotSerialized)
        {
            If ((Arg0 > Arg1))
            {
                Local3 = Arg1
                Local4 = Arg0
            }
            Else
            {
                Local3 = Arg0
                Local4 = Arg1
            }

            Local0 = A007 (0x00, 0xB8, 0x0001F39C)
            Local0 &= 0x18
            If ((Arg2 == 0x00))
            {
                Local0 = (((Local4 << 0x18) | (Local3 << 0x10)) | 
                    (Local0 | 0x03))
            }

            If ((Arg2 == 0x01))
            {
                Local0 = (((Local4 << 0x18) | (Local3 << 0x10)) | 
                    (Local0 | 0x03))
            }

            A006 (0x00, 0xB8, 0x0001F39C, Local0)
            A005 ((0x03 - Arg2))
        }

        Method (A009, 1, NotSerialized)
        {
        }

        Name (A010, 0x00)
        Name (A011, 0x00)
        Name (A012, 0x00)
        Method (A013, 1, NotSerialized)
        {
            Local2 = ((0x18 << 0x03) | 0x04)
            If ((A012 == 0x00))
            {
                A011 = A014 (Local2, 0x0124)
                A012 = 0x01
            }

            Local3 = A014 (Local2, 0x0124)
            If ((Arg0 == 0x00))
            {
                Local3 |= (A011 & 0x00400000)
            }
            Else
            {
                Local3 &= 0xFFBFFFFF
            }

            A015 (Local2, 0x0124, Local3)
            If ((A010 == 0x00))
            {
                If ((A014 (0x08, 0x00) == 0xFFFFFFFF))
                {
                    Local1 = (A007 (0x00, 0xB8, 0x0001F428) & 0x02)
                    If ((Local1 == 0x02))
                    {
                        A010 = 0x01
                    }
                }
            }

            If ((A010 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x20
                }
                Else
                {
                    Local0 = 0x21
                }

                A005 (Local0)
            }
        }

        Method (A016, 0, NotSerialized)
        {
            A017 = 0x00
            Local1 = 0x00
            While ((A017 <= A001))
            {
                If ((A018 (A017) == 0x00))
                {
                    A017++
                    Continue
                }

                If ((DerefOf (A019 [A017]) == 0x02))
                {
                    Local1 |= A020 (A017)
                }

                A017++
            }

            Local2 = (Local1 << 0x18)
            Local2 |= ((Local1 >> 0x08) & 0xFF00)
            Local2 |= ((Local1 << 0x08) & 0x00FF0000)
            A006 (0x00, 0xB8, 0x0001F610, Local2)
            A005 (0x08)
        }

        Method (A020, 1, NotSerialized)
        {
            Local7 = A021 (Arg0)
            A022 = DerefOf (Local7 [0x00])
            A023 = DerefOf (Local7 [0x01])
            A024 = DerefOf (Local7 [0x02])
            A025 = DerefOf (Local7 [0x03])
            A026 = ((DerefOf (Local7 [(0x05 + 0x01)]) << 
                0x08) | DerefOf (Local7 [0x05]))
            Local5 = A007 (0x00, 0xE0, ((A026 << 0x10) | 0x8023))
            Local5 >>= A024 /* \_SB_.A024 */
            Local2 = (0x01 << ((A025 - A024) + 0x01))
            Local2 -= 0x01
            Local5 &= Local2
            If ((A022 > A023))
            {
                Local3 = A023 /* \_SB_.A023 */
                Local4 = A022 /* \_SB_.A022 */
                Local1 = ((A025 - A024) - (Local4 - Local3))
            }
            Else
            {
                Local4 = A023 /* \_SB_.A023 */
                Local3 = A022 /* \_SB_.A022 */
                Local1 = 0x00
            }

            Local2 = (0x01 << ((Local4 - Local3) + 0x01))
            Local2 = ((Local2 - 0x01) << Local1)
            Local2 &= ~Local5
            Local2 = ((Local2 - 0x01) << (Local3 - Local1))
            Return (Local2)
        }

        Name (A027, 0x00)
        Name (A028, 0x00)
        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                If ((A027 == 0x01))
                {
                    Local0 = A014 (0xC5, 0x0170)
                    A015 (0xC5, 0x0170, (Local0 & ~(0x01 << 0x0E)))
                    A027 = 0x00
                }

                If ((A028 == 0x01))
                {
                    Local0 = A007 (0x00, 0xB8, 0x0001F428)
                    A006 (0x00, 0xB8, 0x0001F428, (Local0 | (0x01 << 0x05)))
                    A005 (0x16)
                    A028 = 0x00
                }
            }

            Local1 = A003 ()
            A013 (Local1)
        }

        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                A013 (0x01)
                Local0 = A007 (0x00, 0xB8, 0x0001F428)
                If (((Local0 & (0x01 << 0x05)) != 0x00))
                {
                    A006 (0x00, 0xB8, 0x0001F428, (Local0 & ~(0x01 << 0x05)
                        ))
                    A005 (0x16)
                    A028 = 0x01
                }

                Local0 = A014 (0xC5, 0x0170)
                If (((Local0 & (0x01 << 0x0E)) == 0x00))
                {
                    A015 (0xC5, 0x0170, (Local0 | (0x01 << 0x0E)))
                    A027 = 0x01
                }
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "HPQOEM", "INSYDE  ", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008FC, 
                0x00001885, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000132C, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00000FAF, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000D2C, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000B74, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000008FC, 
                0x00001885, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000007D0, 
                0x0000132C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x00000FAF, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000D2C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000B74, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000841, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008FC, 
                0x00001885, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000132C, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00000FAF, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000D2C, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000B74, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000008FC, 
                0x00001885, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000007D0, 
                0x0000132C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x00000FAF, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000D2C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000B74, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000841, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008FC, 
                0x00001885, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000132C, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00000FAF, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000D2C, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000B74, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000008FC, 
                0x00001885, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000007D0, 
                0x0000132C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x00000FAF, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000D2C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000B74, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000841, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008FC, 
                0x00001885, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000132C, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00000FAF, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000D2C, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000B74, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x000008FC, 
                0x00001885, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000007D0, 
                0x0000132C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000708, 
                0x00000FAF, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000D2C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000B74, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000004
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000841, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }
}



UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000236
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 33
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036  16]              UUID Identifier : 9D4BF935-A674-4710-BA02-BF0AA1758C7B
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 566 (0x236)

    0000: 55 45 46 49 36 02 00 00 01 33 48 50 51 4F 45 4D  // UEFI6....3HPQOEM
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 48 50 20 20  // INSYDE  ....HP  
    0020: 00 00 04 00 35 F9 4B 9D 74 A6 10 47 BA 02 BF 0A  // ....5.K.t..G....
    0030: A1 75 8C 7B 36 00 24 42 56 44 54 24 12 05 10 24  // .u.{6.$BVDT$...$
    0040: 11 49 50 24 46 2E 30 35 00 00 00 00 00 00 00 00  // .IP$F.05........
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 24 43 61 72  // ............$Car
    0060: 62 6F 6E 65 6C 20 43 6F 6D 61 6C 20 31 2E 30 00  // bonel Comal 1.0.
    0070: 00 00 00 00 00 00 24 43 43 42 2E 30 33 2E 37 32  // ......$CCB.03.72
    0080: 2E 30 32 00 00 00 00 00 00 00 00 00 00 00 00 00  // .02.............
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  // ................
    00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0160: FF FF FF FF FF 24 42 4D 45 24 00 DE 2E 00 00 02  // .....$BME$......
    0170: 00 00 24 00 D0 2E 00 30 0B 00 00 24 01 00 00 36  // ..$....0...$...6
    0180: 00 00 00 02 00 24 5F 4D 53 43 5F 56 45 52 3D DC  // .....$_MSC_VER=.
    0190: 05 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0230: FF FF FF FF FF FF                                // ......


WDAT
----
[000h 0000   4]                    Signature : "WDAT"    [Watchdog Action Table]
[004h 0004   4]                 Table Length : 000001AC
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9F
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]                Header Length : 00000020
[028h 0040   2]                  PCI Segment : 00FF
[02Ah 0042   1]                      PCI Bus : FF
[02Bh 0043   1]                   PCI Device : FF
[02Ch 0044   1]                 PCI Function : FF
[02Dh 0045   3]                     Reserved : 000000
[030h 0048   4]                 Timer Period : 000003E8
[034h 0052   4]                    Max Count : 000003FF
[038h 0056   4]                    Min Count : 00000002
[03Ch 0060   1]        Flags (decoded below) : 81
                                     Enabled : 1
                         Stopped When Asleep : 1
[03Dh 0061   3]                     Reserved : 000000
[040h 0064   4]         Watchdog Entry Count : 0000000F

[044h 0068   1]              Watchdog Action : 01
[045h 0069   1]                  Instruction : 82
[046h 0070   2]                     Reserved : 0000

[048h 0072  12]              Register Region : [Generic Address Structure]
[048h 0072   1]                     Space ID : 00 [SystemMemory]
[049h 0073   1]                    Bit Width : 20
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 03 [DWord Access:32]
[04Ch 0076   8]                      Address : 00000000FEC000F0

[054h 0084   4]                        Value : 00000080
[058h 0088   4]                Register Mask : 00000080

[05Ch 0092   1]              Watchdog Action : 04
[05Dh 0093   1]                  Instruction : 01
[05Eh 0094   2]                     Reserved : 0000

[060h 0096  12]              Register Region : [Generic Address Structure]
[060h 0096   1]                     Space ID : 00 [SystemMemory]
[061h 0097   1]                    Bit Width : 20
[062h 0098   1]                   Bit Offset : 00
[063h 0099   1]         Encoded Access Width : 03 [DWord Access:32]
[064h 0100   8]                      Address : 00000000FEC000F4

[06Ch 0108   4]                        Value : 00000000
[070h 0112   4]                Register Mask : 0000FFFF

[074h 0116   1]              Watchdog Action : 06
[075h 0117   1]                  Instruction : 83
[076h 0118   2]                     Reserved : 0000

[078h 0120  12]              Register Region : [Generic Address Structure]
[078h 0120   1]                     Space ID : 00 [SystemMemory]
[079h 0121   1]                    Bit Width : 20
[07Ah 0122   1]                   Bit Offset : 00
[07Bh 0123   1]         Encoded Access Width : 03 [DWord Access:32]
[07Ch 0124   8]                      Address : 00000000FEC000F4

[084h 0132   4]                        Value : 00000000
[088h 0136   4]                Register Mask : 0000FFFF

[08Ch 0140   1]              Watchdog Action : 08
[08Dh 0141   1]                  Instruction : 00
[08Eh 0142   2]                     Reserved : 0000

[090h 0144  12]              Register Region : [Generic Address Structure]
[090h 0144   1]                     Space ID : 00 [SystemMemory]
[091h 0145   1]                    Bit Width : 20
[092h 0146   1]                   Bit Offset : 00
[093h 0147   1]         Encoded Access Width : 03 [DWord Access:32]
[094h 0148   8]                      Address : 00000000FEC000F0

[09Ch 0156   4]                        Value : 00000001
[0A0h 0160   4]                Register Mask : 00000001

[0A4h 0164   1]              Watchdog Action : 09
[0A5h 0165   1]                  Instruction : 82
[0A6h 0166   2]                     Reserved : 0000

[0A8h 0168  12]              Register Region : [Generic Address Structure]
[0A8h 0168   1]                     Space ID : 00 [SystemMemory]
[0A9h 0169   1]                    Bit Width : 20
[0AAh 0170   1]                   Bit Offset : 00
[0ABh 0171   1]         Encoded Access Width : 03 [DWord Access:32]
[0ACh 0172   8]                      Address : 00000000FEC000F0

[0B4h 0180   4]                        Value : 00000001
[0B8h 0184   4]                Register Mask : 00000001

[0BCh 0188   1]              Watchdog Action : 0A
[0BDh 0189   1]                  Instruction : 00
[0BEh 0190   2]                     Reserved : 0000

[0C0h 0192  12]              Register Region : [Generic Address Structure]
[0C0h 0192   1]                     Space ID : 00 [SystemMemory]
[0C1h 0193   1]                    Bit Width : 20
[0C2h 0194   1]                   Bit Offset : 00
[0C3h 0195   1]         Encoded Access Width : 03 [DWord Access:32]
[0C4h 0196   8]                      Address : 00000000FEC000F0

[0CCh 0204   4]                        Value : 00000000
[0D0h 0208   4]                Register Mask : 00000001

[0D4h 0212   1]              Watchdog Action : 0B
[0D5h 0213   1]                  Instruction : 82
[0D6h 0214   2]                     Reserved : 0000

[0D8h 0216  12]              Register Region : [Generic Address Structure]
[0D8h 0216   1]                     Space ID : 00 [SystemMemory]
[0D9h 0217   1]                    Bit Width : 20
[0DAh 0218   1]                   Bit Offset : 00
[0DBh 0219   1]         Encoded Access Width : 03 [DWord Access:32]
[0DCh 0220   8]                      Address : 00000000FEC000F0

[0E4h 0228   4]                        Value : 00000000
[0E8h 0232   4]                Register Mask : 00000001

[0ECh 0236   1]              Watchdog Action : 10
[0EDh 0237   1]                  Instruction : 00
[0EEh 0238   2]                     Reserved : 0000

[0F0h 0240  12]              Register Region : [Generic Address Structure]
[0F0h 0240   1]                     Space ID : 00 [SystemMemory]
[0F1h 0241   1]                    Bit Width : 20
[0F2h 0242   1]                   Bit Offset : 00
[0F3h 0243   1]         Encoded Access Width : 03 [DWord Access:32]
[0F4h 0244   8]                      Address : 00000000FEC000F0

[0FCh 0252   4]                        Value : 00000000
[100h 0256   4]                Register Mask : 00000004

[104h 0260   1]              Watchdog Action : 11
[105h 0261   1]                  Instruction : 82
[106h 0262   2]                     Reserved : 0000

[108h 0264  12]              Register Region : [Generic Address Structure]
[108h 0264   1]                     Space ID : 00 [SystemMemory]
[109h 0265   1]                    Bit Width : 20
[10Ah 0266   1]                   Bit Offset : 00
[10Bh 0267   1]         Encoded Access Width : 03 [DWord Access:32]
[10Ch 0268   8]                      Address : 00000000FEC000F0

[114h 0276   4]                        Value : 00000000
[118h 0280   4]                Register Mask : 00000006

[11Ch 0284   1]              Watchdog Action : 12
[11Dh 0285   1]                  Instruction : 00
[11Eh 0286   2]                     Reserved : 0000

[120h 0288  12]              Register Region : [Generic Address Structure]
[120h 0288   1]                     Space ID : 00 [SystemMemory]
[121h 0289   1]                    Bit Width : 20
[122h 0290   1]                   Bit Offset : 00
[123h 0291   1]         Encoded Access Width : 03 [DWord Access:32]
[124h 0292   8]                      Address : 00000000FEC000F0

[12Ch 0300   4]                        Value : 00000004
[130h 0304   4]                Register Mask : 00000004

[134h 0308   1]              Watchdog Action : 13
[135h 0309   1]                  Instruction : 82
[136h 0310   2]                     Reserved : 0000

[138h 0312  12]              Register Region : [Generic Address Structure]
[138h 0312   1]                     Space ID : 00 [SystemMemory]
[139h 0313   1]                    Bit Width : 20
[13Ah 0314   1]                   Bit Offset : 00
[13Bh 0315   1]         Encoded Access Width : 03 [DWord Access:32]
[13Ch 0316   8]                      Address : 00000000FEC000F0

[144h 0324   4]                        Value : 00000004
[148h 0328   4]                Register Mask : 00000004

[14Ch 0332   1]              Watchdog Action : 20
[14Dh 0333   1]                  Instruction : 02
[14Eh 0334   2]                     Reserved : 0000

[150h 0336  12]              Register Region : [Generic Address Structure]
[150h 0336   1]                     Space ID : 01 [SystemIO]
[151h 0337   1]                    Bit Width : 08
[152h 0338   1]                   Bit Offset : 00
[153h 0339   1]         Encoded Access Width : 01 [Byte Access:8]
[154h 0340   8]                      Address : 0000000000000CD4

[15Ch 0348   4]                        Value : 000000EF
[160h 0352   4]                Register Mask : 000000FF

[164h 0356   1]              Watchdog Action : 20
[165h 0357   1]                  Instruction : 00
[166h 0358   2]                     Reserved : 0000

[168h 0360  12]              Register Region : [Generic Address Structure]
[168h 0360   1]                     Space ID : 01 [SystemIO]
[169h 0361   1]                    Bit Width : 08
[16Ah 0362   1]                   Bit Offset : 00
[16Bh 0363   1]         Encoded Access Width : 01 [Byte Access:8]
[16Ch 0364   8]                      Address : 0000000000000CD5

[174h 0372   4]                        Value : 00000001
[178h 0376   4]                Register Mask : 00000001

[17Ch 0380   1]              Watchdog Action : 21
[17Dh 0381   1]                  Instruction : 02
[17Eh 0382   2]                     Reserved : 0000

[180h 0384  12]              Register Region : [Generic Address Structure]
[180h 0384   1]                     Space ID : 01 [SystemIO]
[181h 0385   1]                    Bit Width : 08
[182h 0386   1]                   Bit Offset : 00
[183h 0387   1]         Encoded Access Width : 01 [Byte Access:8]
[184h 0388   8]                      Address : 0000000000000CD4

[18Ch 0396   4]                        Value : 000000EF
[190h 0400   4]                Register Mask : 000000FF

[194h 0404   1]              Watchdog Action : 21
[195h 0405   1]                  Instruction : 82
[196h 0406   2]                     Reserved : 0000

[198h 0408  12]              Register Region : [Generic Address Structure]
[198h 0408   1]                     Space ID : 01 [SystemIO]
[199h 0409   1]                    Bit Width : 08
[19Ah 0410   1]                   Bit Offset : 00
[19Bh 0411   1]         Encoded Access Width : 01 [Byte Access:8]
[19Ch 0412   8]                      Address : 0000000000000CD5

[1A4h 0420   4]                        Value : 00000000
[1A8h 0424   4]                Register Mask : 00000001

Raw Table Data: Length 428 (0x1AC)

    0000: 57 44 41 54 AC 01 00 00 01 9F 48 50 51 4F 45 4D  // WDAT......HPQOEM
    0010: 49 4E 53 59 44 45 20 20 01 00 00 00 48 50 20 20  // INSYDE  ....HP  
    0020: 00 00 04 00 20 00 00 00 FF 00 FF FF FF 00 00 00  // .... ...........
    0030: E8 03 00 00 FF 03 00 00 02 00 00 00 81 00 00 00  // ................
    0040: 0F 00 00 00 01 82 00 00 00 20 00 03 F0 00 C0 FE  // ......... ......
    0050: 00 00 00 00 80 00 00 00 80 00 00 00 04 01 00 00  // ................
    0060: 00 20 00 03 F4 00 C0 FE 00 00 00 00 00 00 00 00  // . ..............
    0070: FF FF 00 00 06 83 00 00 00 20 00 03 F4 00 C0 FE  // ......... ......
    0080: 00 00 00 00 00 00 00 00 FF FF 00 00 08 00 00 00  // ................
    0090: 00 20 00 03 F0 00 C0 FE 00 00 00 00 01 00 00 00  // . ..............
    00A0: 01 00 00 00 09 82 00 00 00 20 00 03 F0 00 C0 FE  // ......... ......
    00B0: 00 00 00 00 01 00 00 00 01 00 00 00 0A 00 00 00  // ................
    00C0: 00 20 00 03 F0 00 C0 FE 00 00 00 00 00 00 00 00  // . ..............
    00D0: 01 00 00 00 0B 82 00 00 00 20 00 03 F0 00 C0 FE  // ......... ......
    00E0: 00 00 00 00 00 00 00 00 01 00 00 00 10 00 00 00  // ................
    00F0: 00 20 00 03 F0 00 C0 FE 00 00 00 00 00 00 00 00  // . ..............
    0100: 04 00 00 00 11 82 00 00 00 20 00 03 F0 00 C0 FE  // ......... ......
    0110: 00 00 00 00 00 00 00 00 06 00 00 00 12 00 00 00  // ................
    0120: 00 20 00 03 F0 00 C0 FE 00 00 00 00 04 00 00 00  // . ..............
    0130: 04 00 00 00 13 82 00 00 00 20 00 03 F0 00 C0 FE  // ......... ......
    0140: 00 00 00 00 04 00 00 00 04 00 00 00 20 02 00 00  // ............ ...
    0150: 01 08 00 01 D4 0C 00 00 00 00 00 00 EF 00 00 00  // ................
    0160: FF 00 00 00 20 00 00 00 01 08 00 01 D5 0C 00 00  // .... ...........
    0170: 00 00 00 00 01 00 00 00 01 00 00 00 21 02 00 00  // ............!...
    0180: 01 08 00 01 D4 0C 00 00 00 00 00 00 EF 00 00 00  // ................
    0190: FF 00 00 00 21 82 00 00 01 08 00 01 D5 0C 00 00  // ....!...........
    01A0: 00 00 00 00 00 00 00 00 01 00 00 00              // ............


WDRT
----
[000h 0000   4]                    Signature : "WDRT"    [Watchdog Resource Table]
[004h 0004   4]                 Table Length : 00000047
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 21
[00Ah 0010   6]                       Oem ID : "HPQOEM"
[010h 0016   8]                 Oem Table ID : "INSYDE  "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "HP  "
[020h 0032   4]        Asl Compiler Revision : 00040000


[024h 0036  12]             Control Register : [Generic Address Structure]
[024h 0036   1]                     Space ID : 00 [SystemMemory]
[025h 0037   1]                    Bit Width : 20
[026h 0038   1]                   Bit Offset : 00
[027h 0039   1]         Encoded Access Width : 03 [DWord Access:32]
[028h 0040   8]                      Address : 00000000FEC000F0

[030h 0048  12]               Count Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 00 [SystemMemory]
[031h 0049   1]                    Bit Width : 20
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 03 [DWord Access:32]
[034h 0052   8]                      Address : 00000000FEC000F4

[03Ch 0060   2]                PCI Device ID : FFFF
[03Eh 0062   2]                PCI Vendor ID : FFFF
[040h 0064   1]                      PCI Bus : 00
[041h 0065   1]                   PCI Device : 00
[042h 0066   1]                 PCI Function : 00
[043h 0067   1]                  PCI Segment : 00
[044h 0068   2]                    Max Count : 03FF
[046h 0070   1]                Counter Units : 00

Raw Table Data: Length 71 (0x47)

    0000: 57 44 52 54 47 00 00 00 01 21 48 50 51 4F 45 4D  // WDRTG....!HPQOEM
    0010: 49 4E 53 59 44 45 20 20 00 00 00 00 48 50 20 20  // INSYDE  ....HP  
    0020: 00 00 04 00 00 20 00 03 F0 00 C0 FE 00 00 00 00  // ..... ..........
    0030: 00 20 00 03 F4 00 C0 FE 00 00 00 00 FF FF FF FF  // . ..............
    0040: 00 00 00 00 FF 03 00                             // .......


