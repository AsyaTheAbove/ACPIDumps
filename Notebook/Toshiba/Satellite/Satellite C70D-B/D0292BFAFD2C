
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20140214-64 [Mar 29 2014]
Copyright (c) 2000 - 2014 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   RSDP                          "TOSINV"
   RSDT   0x00000078     0x01    "TOSINV"  "TOSINV00"   0x00000001    "    "     0x01000013
   XSDT   0x000000CC     0x01    "TOSINV"  "TOSINV00"   0x00000001    "    "     0x01000013
   DSDT   0x00005F3F     0x01    "TOSINV"  "TOSINV00"   0xF0000000    "ACPI"     0x00040000
   FACS   0x00000040
   FACP   0x0000010C     0x05    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   UEFI   0x00000236     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   HPET   0x00000038     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   APIC   0x00000090     0x03    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   MCFG   0x0000003C     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   ASF!   0x000000A5     0x20    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   BOOT   0x00000028     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   SLIC   0x00000176     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   FPDT   0x00000044     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   MSDM   0x00000055     0x03    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   SSDT   0x00006D71     0x01    "TOSINV"  "TsbOdm  "   0x00001000    "INTL"     0x20120215
   SSDT   0x00000CB0     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   SSDT   0x0000487A     0x02    "TOSINV"  "TOSINV00"   0x00000002    "ACPI"     0x00040000
   VFCT   0x0000EC84     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   SSDT   0x0000085A     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   SSDT   0x00000418     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   SSDT   0x00001309     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   SSDT   0x0000008C     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   SSDT   0x00001138     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   SSDT   0x00000FB4     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000
   BGRT   0x00000038     0x01    "TOSINV"  "TOSINV00"   0x00000001    "ACPI"     0x00040000

Found 26 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000090
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : B1
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 04
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 01 [I/O APIC]
[059h 0089   1]                       Length : 0C
[05Ah 0090   1]                  I/O Apic ID : 05
[05Bh 0091   1]                     Reserved : 00
[05Ch 0092   4]                      Address : FEC01000
[060h 0096   4]                    Interrupt : 00000018

[064h 0100   1]                Subtable Type : 02 [Interrupt Source Override]
[065h 0101   1]                       Length : 0A
[066h 0102   1]                          Bus : 00
[067h 0103   1]                       Source : 00
[068h 0104   4]                    Interrupt : 00000002
[06Ch 0108   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[06Eh 0110   1]                Subtable Type : 02 [Interrupt Source Override]
[06Fh 0111   1]                       Length : 0A
[070h 0112   1]                          Bus : 00
[071h 0113   1]                       Source : 09
[072h 0114   4]                    Interrupt : 00000009
[076h 0118   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[078h 0120   1]                Subtable Type : 04 [Local APIC NMI]
[079h 0121   1]                       Length : 06
[07Ah 0122   1]                 Processor ID : 00
[07Bh 0123   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[07Dh 0125   1]         Interrupt Input LINT : 01

[07Eh 0126   1]                Subtable Type : 04 [Local APIC NMI]
[07Fh 0127   1]                       Length : 06
[080h 0128   1]                 Processor ID : 01
[081h 0129   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[083h 0131   1]         Interrupt Input LINT : 01

[084h 0132   1]                Subtable Type : 04 [Local APIC NMI]
[085h 0133   1]                       Length : 06
[086h 0134   1]                 Processor ID : 02
[087h 0135   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[089h 0137   1]         Interrupt Input LINT : 01

[08Ah 0138   1]                Subtable Type : 04 [Local APIC NMI]
[08Bh 0139   1]                       Length : 06
[08Ch 0140   1]                 Processor ID : 03
[08Dh 0141   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[08Fh 0143   1]         Interrupt Input LINT : 01

Raw Table Data: Length 144 (0x90)

  0000: 41 50 49 43 90 00 00 00 03 B1 54 4F 53 49 4E 56  APIC......TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 00 00  ................
  0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  ................
  0040: 01 00 00 00 00 08 03 03 01 00 00 00 01 0C 04 00  ................
  0050: 00 00 C0 FE 00 00 00 00 01 0C 05 00 00 10 C0 FE  ................
  0060: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  ................
  0070: 00 09 09 00 00 00 0F 00 04 06 00 05 00 01 04 06  ................
  0080: 01 05 00 01 04 06 02 05 00 01 04 06 03 05 00 01  ................


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format table]
[004h 0004   4]                 Table Length : 000000A5
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : 5F
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : 00
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0001
[02Ch 0044   4]              Manufacturer ID : 57010000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 01 [ASF Alerts]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 002C
[038h 0056   1]                   AssertMask : 00
[039h 0057   1]                 DeassertMask : 00
[03Ah 0058   1]                  Alert Count : 03
[03Bh 0059   1]            Alert Data Length : 0C

[03Ch 0060   1]                      Address : 80
[03Dh 0061   1]                      Command : 23
[03Eh 0062   1]                         Mask : 01
[03Fh 0063   1]                        Value : 01
[040h 0064   1]                   SensorType : 01
[041h 0065   1]                         Type : 01
[042h 0066   1]                       Offset : 00
[043h 0067   1]                   SourceType : 39
[044h 0068   1]                     Severity : 10
[045h 0069   1]                 SensorNumber : 00
[046h 0070   1]                       Entity : 07
[047h 0071   1]                     Instance : 00

[048h 0072   1]                      Address : 80
[049h 0073   1]                      Command : 23
[04Ah 0074   1]                         Mask : 02
[04Bh 0075   1]                        Value : 02
[04Ch 0076   1]                   SensorType : 01
[04Dh 0077   1]                         Type : 01
[04Eh 0078   1]                       Offset : 00
[04Fh 0079   1]                   SourceType : 39
[050h 0080   1]                     Severity : 10
[051h 0081   1]                 SensorNumber : 01
[052h 0082   1]                       Entity : 07
[053h 0083   1]                     Instance : 00

[054h 0084   1]                      Address : 80
[055h 0085   1]                      Command : 23
[056h 0086   1]                         Mask : 04
[057h 0087   1]                        Value : 04
[058h 0088   1]                   SensorType : 01
[059h 0089   1]                         Type : 01
[05Ah 0090   1]                       Offset : 00
[05Bh 0091   1]                   SourceType : 39
[05Ch 0092   1]                     Severity : 10
[05Dh 0093   1]                 SensorNumber : 02
[05Eh 0094   1]                       Entity : 07
[05Fh 0095   1]                     Instance : 00

[060h 0096   1]                Subtable Type : 02 [ASF Remote Control]
[061h 0097   1]                     Reserved : 00
[062h 0098   2]                       Length : 0018
[064h 0100   1]                Control Count : 04
[065h 0101   1]          Control Data Length : 04
[066h 0102   2]                     Reserved : 0000

[068h 0104   1]                     Function : 00
[069h 0105   1]                      Address : 71
[06Ah 0106   1]                      Command : 00
[06Bh 0107   1]                        Value : 00

[06Ch 0108   1]                     Function : 01
[06Dh 0109   1]                      Address : 71
[06Eh 0110   1]                      Command : 02
[06Fh 0111   1]                        Value : 00

[070h 0112   1]                     Function : 02
[071h 0113   1]                      Address : 71
[072h 0114   1]                      Command : 01
[073h 0115   1]                        Value : 00

[074h 0116   1]                     Function : 03
[075h 0117   1]                      Address : 71
[076h 0118   1]                      Command : 03
[077h 0119   1]                        Value : 00

[078h 0120   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121   1]                     Reserved : 00
[07Ah 0122   2]                       Length : 0017
[07Ch 0124   7]                 Capabilities : 21 F8 00 00 00 1B F0
[083h 0131   1]              Completion Code : 00
[084h 0132   4]                Enterprise ID : 57010000
[088h 0136   1]                      Command : 00
[089h 0137   2]                    Parameter : 0100
[08Bh 0139   2]                 Boot Options : 7000
[08Dh 0141   2]               Oem Parameters : 1600

[08Fh 0143   1]                Subtable Type : 00 [ASF Information]
[090h 0144   1]                     Reserved : 10
[091h 0145   2]                       Length : 00A0
[093h 0147   1]          Minimum Reset Value : A2
[094h 0148   1]     Minimum Polling Interval : A4
[095h 0149   2]                    System ID : 0000
[097h 0151   4]              Manufacturer ID : 00000000
[09Bh 0155   1]                        Flags : 00
[09Ch 0156   3]                     Reserved : 000000


Raw Table Data: Length 165 (0xA5)

  0000: 41 53 46 21 A5 00 00 00 20 5F 54 4F 53 49 4E 56  ASF!.... _TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 00 00 10 00 00 FF 01 00 00 00 01 57  ...............W
  0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 80 23 01 01  ......,......#..
  0040: 01 01 00 39 10 00 07 00 80 23 02 02 01 01 00 39  ...9.....#.....9
  0050: 10 01 07 00 80 23 04 04 01 01 00 39 10 02 07 00  .....#.....9....
  0060: 02 00 18 00 04 04 00 00 00 71 00 00 01 71 02 00  .........q...q..
  0070: 02 71 01 00 03 71 03 00 03 00 17 00 21 F8 00 00  .q...q......!...
  0080: 00 1B F0 00 00 00 01 57 00 00 01 00 70 00 16 00  .......W....p...
  0090: 10 A0 00 A2 A4 00 00 00 00 00 00 00 00 00 00 00  ................
  00A0: 00 00 00 00 00                                   .....


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 93
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   2]                      Version : 0001
[026h 0038   1]                       Status : 00
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 000000009C65F000
[030h 0048   4]                Image OffsetX : 0000007F
[034h 0052   4]                Image OffsetY : 0000004C

Raw Table Data: Length 56 (0x38)

  0000: 42 47 52 54 38 00 00 00 01 93 54 4F 53 49 4E 56  BGRT8.....TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 01 00 00 00 00 F0 65 9C 00 00 00 00  ..........e.....
  0030: 7F 00 00 00 4C 00 00 00                          ....L...


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 17
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]          Boot Register Index : 44
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

  0000: 42 4F 4F 54 28 00 00 00 01 17 54 4F 53 49 4E 56  BOOT(.....TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 44 00 00 00                          ....D...


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 1, "TOSINV", "TOSINV00", 0xF0000000)
{
    /*
     * iASL Warning: There were 11 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     */
    External (_SB_.APTS, MethodObj)    // Warning: Unresolved Method, guessing 1 arguments (may be incorrect, see warning above)
    External (_SB_.AWAK, MethodObj)    // Warning: Unresolved Method, guessing 5 arguments (may be incorrect, see warning above)
    External (_SB_.PCI0.LPC0.LREG, MethodObj)    // Warning: Unresolved Method, guessing 0 arguments (may be incorrect, see warning above)
    External (_SB_.TPTS, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (_SB_.TWAK, MethodObj)    // Warning: Unresolved Method, guessing 1 arguments (may be incorrect, see warning above)
    External (_SB_.WREC, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (AFN7, MethodObj)    // Warning: Unresolved Method, guessing 1 arguments (may be incorrect, see warning above)
    External (RDEC, MethodObj)    // Warning: Unresolved Method, guessing 6 arguments (may be incorrect, see warning above)
    External (SPS0, MethodObj)    // Warning: Unresolved Method, guessing 0 arguments (may be incorrect, see warning above)
    External (SPS3, MethodObj)    // Warning: Unresolved Method, guessing 0 arguments (may be incorrect, see warning above)
    External (WREC, MethodObj)    // Warning: Unresolved Method, guessing 4 arguments (may be incorrect, see warning above)

    External (_SB_.MUTS)
    External (_SB_.PCI0.LPC0.EC9C, IntObj)
    External (_SB_.PCI0.LPC0.ECA3)
    External (_SB_.PCI0.LPC0.ECOK, IntObj)
    External (_SB_.PCI0.LPC0.LIDW)
    External (_SB_.PCI0.LPC0.U3DP)
    External (_SB_.PWRB)

    Name (XINI, Zero)
    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DBG1, SystemIO, 0x80, 0x02)
    Field (DBG1, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (IMIO, SystemIO, 0x3E, 0x02)
    Field (IMIO, ByteAcc, NoLock, Preserve)
    {
        IMCX,   8, 
        IMCA,   8
    }

    IndexField (IMCX, IMCA, ByteAcc, NoLock, Preserve)
    {
        Offset (0x80), 
        MSTI,   8, 
        MITS,   8, 
        MRG0,   8, 
        MRG1,   8, 
        MRG2,   8, 
        MRG3,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xC8), 
            ,   2, 
        SPRE,   1, 
        TPDE,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMG, SystemMemory, 0xFED81500, 0x03FF)
    Field (GSMG, AnyAcc, NoLock, Preserve)
    {
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x377), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BE), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3E4), 
        BLNK,   2, 
        Offset (0x3F0), 
        PHYD,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, 0x0400, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        Store (Arg0, Index (PRWP, Zero))
        Store (Arg1, Index (PRWP, One))
        If (LEqual (DAS3, Zero))
        {
            If (LLessEqual (Arg1, 0x03))
            {
                Store (Zero, Index (PRWP, One))
            }
        }

        Return (PRWP)
    }

    Method (SPTS, 1, NotSerialized)
    {
        If (LEqual (Arg0, 0x03))
        {
            Store (One, BLNK)
        }

        If (LOr (LEqual (Arg0, 0x04), LEqual (Arg0, 0x05)))
        {
            Store (Zero, BLNK)
        }

        If (LEqual (Arg0, 0x03))
        {
            Store (Zero, RSTU)
        }

        Store (One, CLPS)
        Store (One, SLPS)
        Store (PEWS, PEWS)
    }

    Method (SWAK, 1, NotSerialized)
    {
        Store (0x03, BLNK)
        If (LEqual (Arg0, 0x03))
        {
            Store (One, RSTU)
        }

        Store (PEWS, PEWS)
        Store (One, PWDE)
        Store (Zero, PEWD)
    }

    Method (CHKH, 0, NotSerialized)
    {
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        Store (Arg0, INAB)
        Return (DAAB)
    }

    Method (WTAB, 2, NotSerialized)
    {
        Store (Arg0, INAB)
        Store (Arg1, DAAB)
    }

    Method (RWAB, 3, NotSerialized)
    {
        And (RDAB (Arg0), Arg1, Local0)
        Or (Local0, Arg2, Local1)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        ShiftLeft (Arg0, 0x05, Local0)
        Add (Local0, Arg1, Local1)
        ShiftLeft (Local1, 0x18, Local2)
        Add (Local2, Arg2, Local3)
        Return (Local3)
    }

    OperationRegion (PEBA, SystemMemory, 0xF8000000, 0x02000000)
    Field (PEBA, AnyAcc, NoLock, Preserve)
    {
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (GNVS, SystemMemory, 0x9FBBAE98, 0x00000021)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        DAS3,   8, 
        TNBH,   8, 
        TCP0,   8, 
        TCP1,   8, 
        ATNB,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PWMN,   8, 
        LPTY,   8, 
        M92D,   8, 
        WKPM,   8, 
        ALST,   8, 
        AFUC,   8, 
        EXUS,   8, 
        AIRC,   8, 
        WLSH,   8, 
        TSSS,   8, 
        AOZP,   8, 
        TZFG,   8, 
        BPS0,   8, 
        NAPC,   8, 
        PCBA,   32, 
        PCBL,   32, 
        WLAN,   8, 
        BLTH,   8, 
        GPSS,   8, 
        NFCS,   8
    }

    OperationRegion (OGNS, SystemMemory, 0x9FBA7818, 0x0000079C)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        EGPO,   8, 
        BTBE,   8, 
        WBEN,   8, 
        OG03,   8, 
        PBAR,   8, 
        OG05,   8, 
        OG06,   8, 
        OG07,   8, 
        OG08,   8, 
        OG09,   8, 
        OG10,   8, 
        Offset (0x14), 
        ACPS,   8, 
        CPUS,   8, 
        CPUL,   8, 
        ECRO,   8, 
        ECRM,   8, 
        ECRS,   8, 
        ECRD,   8, 
        Offset (0x1C), 
        EGST,   8, 
        LCDS,   4, 
        CECS,   1, 
        CECP,   1, 
        HDMI,   1, 
        HKMD,   1, 
        TSBK,   1, 
        SDAT,   1, 
        DCIR,   1, 
        DBTN,   2, 
        HKEM,   1, 
        HSEM,   1, 
        IECC,   1, 
        HSWK,   8, 
        LCMD,   8, 
        SVCF,   8, 
        SWB0,   32, 
        SWB1,   32, 
        SWB2,   32, 
        SWB3,   32, 
        SWB4,   32, 
        SWB5,   32, 
        SWB6,   32, 
        SWB7,   32, 
        KYB0,   32, 
        Offset (0x62), 
        IEC0,   8, 
        IEC1,   8, 
        IEC2,   8, 
        CECC,   8, 
        CECE,   32, 
        CECI,   16, 
        CECZ,   8, 
        CECF,   8, 
        CEC1,   32, 
        CEC2,   32, 
        CEC3,   32, 
        CEC4,   32, 
        CEC5,   32, 
        LENA,   8, 
        LENB,   8, 
        LENC,   8, 
        LENE,   8, 
        LEND,   8, 
        IFNK,   1024, 
        ICMD,   4096, 
        RESL,   32, 
        RESV,   16, 
        USC1,   32, 
        USC2,   32, 
        VGAM,   8, 
        USBM,   32, 
        TPID,   8, 
        NODD,   8, 
        IHDD,   8, 
        TJET,   8, 
        CPUM,   8, 
        POLI,   8, 
        TCCR,   8, 
        TEST,   8, 
        LCDC,   8, 
        PWM0,   8, 
        PWM1,   8, 
        PWM2,   8, 
        PWM3,   8, 
        PWM4,   8, 
        PWM5,   8, 
        PWM6,   8, 
        PWM7,   8, 
        EJLL,   8, 
        EJLR,   8, 
        OSYS,   16, 
        PNID,   8, 
        VGAN,   8, 
        CLMT,   8, 
        SCFG,   8, 
        FKRG,   8, 
        HFMF,   8, 
        HYBT,   8, 
        SKEY,   8, 
        UCSP,   8, 
        HSFN,   8, 
        HSP0,   8, 
        HSP1,   8, 
        HSP2,   8, 
        HSP3,   8, 
        HSP4,   8, 
        HSP5,   8, 
        HSP6,   8, 
        HSP7,   8, 
        HSP8,   8, 
        HSP9,   8, 
        HSPA,   8, 
        HSPB,   8, 
        HSS0,   8, 
        HSBD,   32, 
        HSDB,   32, 
        HSSS,   8, 
        LPSW,   8, 
        MID2,   8, 
        CLMX,   8, 
        CDPM,   8, 
        RSDA,   32, 
        MSDA,   32, 
        SMEP,   32, 
        SMTA,   32, 
        ITLK,   32, 
        DMIS,   32, 
        TPNO,   16, 
        STNO,   8, 
        Offset (0x36F), 
        Offset (0x375), 
        DMIF,   16, 
        Offset (0x37F), 
        WDMI,   8192, 
        TDMI,   24, 
        LADR,   32, 
        LBSZ,   8, 
        LRES,   32, 
        LHDR,   32, 
        LFUN,   8, 
        PLDN,   8, 
        PLRM,   8, 
        PLD1,   32, 
        PLD2,   32, 
        TLDM,   8, 
        PLRV,   8
    }

    OperationRegion (NVST, SystemMemory, 0x9FBA8E85, 0x0000012D)
    Field (NVST, AnyAcc, Lock, Preserve)
    {
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        SBFN,   8, 
        DID,    32, 
        INFO,   2048, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        ROMS,   32, 
        MUXF,   8, 
        PDDN,   8
    }

    Method (SCMP, 2, NotSerialized)
    {
        Name (STG1, Buffer (0x50) {})
        Name (STG2, Buffer (0x50) {})
        Store (Arg0, STG1)
        Store (Arg1, STG2)
        If (LNotEqual (SizeOf (Arg0), SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Store (Zero, Local0)
        While (LLess (Local0, SizeOf (Arg0)))
        {
            If (LNotEqual (DerefOf (Index (STG1, Local0)), DerefOf (Index (
                STG2, Local0))))
            {
                Return (Zero)
            }

            Increment (Local0)
        }

        Return (One)
    }

    Name (WNOS, Zero)
    Name (MYOS, Zero)
    Name (HTTS, Zero)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Store (SizeOf (Arg0), Local0)
        Store (SizeOf (Arg1), Local1)
        If (LNotEqual (Local0, Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0) {})
        Store (Arg0, BUF0)
        Name (BUF1, Buffer (Local0) {})
        Store (Arg1, BUF1)
        Store (Zero, Local2)
        While (LLess (Local2, Local0))
        {
            Store (DerefOf (Index (BUF0, Local2)), Local3)
            Store (DerefOf (Index (BUF1, Local2)), Local4)
            If (LNotEqual (Local3, Local4))
            {
                Return (Zero)
            }

            Increment (Local2)
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If (LEqual (OSTB, Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                Store (Zero, OSTB)
                Store (Zero, TPOS)
                If (_OSI ("Windows 2001"))
                {
                    Store (0x08, OSTB)
                    Store (0x08, TPOS)
                    Store (0x07D1, OSYS)
                }

                If (_OSI ("Windows 2001.1"))
                {
                    Store (0x20, OSTB)
                    Store (0x20, TPOS)
                    Store (0x07D1, OSYS)
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    Store (0x10, OSTB)
                    Store (0x10, TPOS)
                    Store (0x07D1, OSYS)
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    Store (0x11, OSTB)
                    Store (0x11, TPOS)
                    Store (0x07D2, OSYS)
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    Store (0x12, OSTB)
                    Store (0x12, TPOS)
                    Store (0x07D2, OSYS)
                }

                If (_OSI ("Windows 2006"))
                {
                    Store (0x40, OSTB)
                    Store (0x40, TPOS)
                    Store (0x07D6, OSYS)
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    Store (0x41, OSTB)
                    Store (0x41, TPOS)
                    Store (One, OSSP)
                    Store (0x07D6, OSYS)
                }

                If (_OSI ("Windows 2009"))
                {
                    Store (One, OSSP)
                    Store (0x50, OSTB)
                    Store (0x50, TPOS)
                    Store (0x07D9, OSYS)
                }

                If (_OSI ("Windows 2012"))
                {
                    Store (One, OSSP)
                    Store (0x60, OSTB)
                    Store (0x60, TPOS)
                    Store (0x07DC, OSYS)
                }

                If (_OSI ("Windows 2013"))
                {
                    Store (One, OSSP)
                    Store (0x60, OSTB)
                    Store (0x60, TPOS)
                    Store (0x07DD, OSYS)
                }

                If (_OSI ("Linux"))
                {
                    Store (One, LINX)
                    Store (0x80, OSTB)
                    Store (0x80, TPOS)
                }

                If (LGreater (OSYS, 0x07D5))
                {
                    Acquire (\_SB.MUTS, 0xFFFF)
                    \_SB.OSMI (0xE4)
                    Release (\_SB.MUTS)
                    \_SB.PCI0.LPC0.LREG ()
                }
                Else
                {
                    Store (Zero, XINI)
                }
            }
            Else
            {
                If (CondRefOf (\_OS, Local0))
                {
                    If (SEQL (_OS, "Microsoft Windows"))
                    {
                        Store (One, OSTB)
                        Store (One, TPOS)
                    }
                    Else
                    {
                        If (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                        {
                            Store (0x02, OSTB)
                            Store (0x02, TPOS)
                        }
                        Else
                        {
                            If (SEQL (_OS, "Microsoft Windows NT"))
                            {
                                Store (0x04, OSTB)
                                Store (0x04, TPOS)
                            }
                            Else
                            {
                                Store (Zero, OSTB)
                                Store (Zero, TPOS)
                            }
                        }
                    }
                }
                Else
                {
                    Store (Zero, OSTB)
                    Store (Zero, TPOS)
                }
            }
        }

        Return (OSTB)
    }

    Scope (_PR)
    {
        Processor (C000, 0x00, 0x00000410, 0x06) {}
        Processor (C001, 0x01, 0x00000000, 0x00) {}
        Processor (C002, 0x02, 0x00000000, 0x00) {}
        Processor (C003, 0x03, 0x00000000, 0x00) {}
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (LEqual (DAS3, One))
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            0x03, 
            Zero, 
            Zero
        })
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.GPP0, 0x02)
        }

        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.EHC1, 0x02)
            Notify (\_SB.PCI0.EHC2, 0x02)
            Notify (\_SB.PCI0.EHC3, 0x02)
            Notify (\_SB.PCI0.XHC0, 0x02)
        }
    }

    Name (EAC1, 0x2A)
    Name (CTMP, Zero)
    Name (PLCY, One)
    Name (CTTP, 0x69)
    Name (TPOK, Zero)
    Name (F1ST, Zero)
    Scope (_TZ)
    {
        PowerResource (PFA1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (F1ST)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                Store (One, F1ST)
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                Store (Zero, F1ST)
            }
        }

        Device (FAN1)
        {
            Name (_HID, EisaId ("PNP0C0B"))  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PFA1
            })
        }

        ThermalZone (THZN)
        {
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.LPC0.ECOK)
                {
                    Store (\_SB.PCI0.LPC0.EC9C, Local0)
                    And (Local0, 0x7F, Local0)
                    Store (Local0, CTMP)
                    If (LEqual (TPOK, Zero)) {}
                    Return (Add (0x0AAC, Multiply (CTMP, 0x0A)))
                }
                Else
                {
                    Return (0x0C80)
                }
            }

            Method (_AC1, 0, NotSerialized)  // _ACx: Active Cooling
            {
                Store (EAC1, Local0)
                Add (Local0, 0x0111, Local0)
                Multiply (Local0, 0x0A, Local0)
                Return (Local0)
            }

            Name (_AL1, Package (0x01)  // _ALx: Active List
            {
                FAN1
            })
            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Return (Add (0x0AAC, Multiply (CTTP, 0x0A)))
            }

            Method (_SCP, 1, NotSerialized)  // _SCP: Set Cooling Policy
            {
                Store (Arg0, PLCY)
            }

            Name (_PSL, Package (0x01)  // _PSL: Passive List
            {
                \_PR.C000
            })
            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (0x0EF8)
            }

            Name (_TSP, 0x96)  // _TSP: Thermal Sampling Period
        }
    }

    Name (PICM, Zero)
    Name (GPIC, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        Store (Arg0, PICM)
        Store (Arg0, GPIC)
        If (PICM)
        {
            \_SB.DSPI ()
            If (NAPC)
            {
                \_SB.PCI0.NAPE ()
            }
        }
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        \_SB.TPTS (Arg0, SPTS (Arg0), If (LEqual (Arg0, One))
            {
                \_SB.S80H (0x51)
            }, If (LEqual (Arg0, 0x03))
            {
                \_SB.S80H (0x53)
                Store (One, \_SB.PCI0.SMBS.SLPS)
            }, If (LEqual (Arg0, 0x04))
            {
                \_SB.S80H (0x54)
                Store (One, \_SB.PCI0.SMBS.SLPS)
                Store (One, RSTU)
            }, If (LEqual (Arg0, 0x05))
            {
                \_SB.S80H (0x55)
                Store (0x90, BCMD)
                \_SB.BSMI (Zero)
                \_SB.GSMI (0x03)
            }, \_SB.APTS (Arg0))
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        SWAK (Arg0)
        \_SB.AWAK (Arg0, If (LEqual (Arg0, 0x03))
            {
                \_SB.S80H (0xE3)
                CHKH ()
                Notify (\_SB.PCI0.GPP2, Zero)
                \_SB.WREC (0xDA, 0x03, Zero, 0x02, \_SB.WREC (0xDA, 0x0C, 0x02, 0x02, 
                    \_SB.WREC (0xDA, 0x30, 0x04, 0x02, If (LEqual (Arg0, 0x04))
                            {
                                \_SB.S80H (0xE4)
                                \_SB.PCI0._INI ()
                                Notify (\_SB.PWRB, 0x02)
                            }, \_SB.TWAK (Arg0), Return (Package (0x02)
                            {
                                Zero, 
                                Zero
                            }))))
            })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03"))  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If (LLessEqual (OSYS, 0x07D5))
                {
                    If (LEqual (XINI, Zero))
                    {
                        Store (One, XINI)
                        ^LPC0.LREG ()
                    }
                }

                SPS0 ()
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SPS3 ()
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (LEqual (GPIC, Zero)) {}
                Else
                {
                    DSPI ()
                    If (\NAPC)
                    {
                        NAPE ()
                    }
                }

                OSTP ()
                CHKH ()
                ^EHC1.STOS ()
                ^EHC2.STOS ()
                ^EHC3.STOS ()
                If (CondRefOf (_OSI, Local0))
                {
                    Store (Zero, MYOS)
                }
                Else
                {
                    If (LEqual (SizeOf (_OS), 0x14))
                    {
                        Store (One, MYOS)
                    }
                    Else
                    {
                        If (LEqual (SizeOf (_OS), 0x27))
                        {
                            Store (0x02, MYOS)
                        }
                        Else
                        {
                            Store (0x03, MYOS)
                        }
                    }
                }
            }

            OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
            Field (NBMS, DWordAcc, NoLock, Preserve)
            {
                MIDX,   32, 
                MIDR,   32
            }

            Mutex (NBMM, 0x00)
            Method (NBMR, 1, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                And (Arg0, 0x7F, Local0)
                Store (Local0, MIDX)
                Store (MIDR, Local0)
                Store (0x7F, MIDX)
                Release (NBMM)
                Return (Local0)
            }

            Method (NBMW, 2, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                And (Arg0, 0x7F, Local0)
                Or (Local0, 0x80, Local0)
                Store (Local0, MIDX)
                Store (Arg1, MIDR)
                Store (And (Local0, 0x7F, Local0), MIDX)
                Release (NBMM)
            }

            OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
            Field (NBXP, DWordAcc, NoLock, Preserve)
            {
                NBXI,   32, 
                NBXD,   32
            }

            Mutex (NBXM, 0x00)
            Method (NBXR, 1, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                Store (Arg0, NBXI)
                Store (NBXD, Local0)
                Store (Zero, NBXI)
                Release (NBXM)
                Return (Local0)
            }

            Method (NBXW, 2, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                Store (Arg0, NBXI)
                Store (Arg1, NBXD)
                Store (Zero, NBXI)
                Release (NBXM)
            }

            Method (GFXM, 0, NotSerialized)
            {
                Store (NBMR (0x08), Local0)
                ShiftRight (Local0, 0x08, Local0)
                And (Local0, 0x0F, Local0)
                Return (Local0)
            }

            Method (GPPM, 0, NotSerialized)
            {
                Store (NBMR (0x67), Local0)
                And (Local0, 0x0F, Local0)
                Return (Local0)
            }

            Method (GPPX, 0, NotSerialized)
            {
                Store (NBMR (0x2D), Local0)
                ShiftRight (Local0, 0x07, Local0)
                And (Local0, 0x0F, Local0)
                Return (Local0)
            }

            Method (XPTR, 2, NotSerialized)
            {
                If (LLess (Arg0, 0x02))
                {
                    Return (Zero)
                }

                If (LOr (LGreater (Arg0, 0x0A), LEqual (Arg0, 0x08)))
                {
                    Return (Zero)
                }
                Else
                {
                    Store (GPPM (), Local0)
                    Store (GPPX (), Local1)
                    If (LEqual (Arg0, 0x0A))
                    {
                        If (LAnd (LEqual (Local0, 0x03), LEqual (Local1, 0x03)))
                        {
                            Store (0x20, Local0)
                            Store (NBMR (0x2D), Local2)
                            If (Arg1)
                            {
                                And (Local2, Not (Local0), Local2)
                            }
                            Else
                            {
                                Or (Local2, Local0, Local2)
                            }

                            NBMW (0x2D, Local2)
                            Return (Ones)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg0, 0x09))
                    {
                        If (LAnd (LGreaterEqual (Local0, 0x02), LGreaterEqual (Local1, 0x02)))
                        {
                            Store (0x10, Local0)
                            Store (NBMR (0x2D), Local2)
                            If (Arg1)
                            {
                                And (Local2, Not (Local0), Local2)
                            }
                            Else
                            {
                                Or (Local2, Local0, Local2)
                            }

                            NBMW (0x2D, Local2)
                            Return (Ones)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Store (One, Local0)
                    If (LLess (Arg0, 0x04))
                    {
                        Add (Arg0, 0x02, Local1)
                    }
                    Else
                    {
                        Add (Arg0, 0x11, Local1)
                    }

                    ShiftLeft (Local0, Local1, Local0)
                    Store (NBMR (0x08), Local2)
                    If (Arg1)
                    {
                        And (Local2, Not (Local0), Local2)
                    }
                    Else
                    {
                        Or (Local2, Local0, Local2)
                    }

                    NBMW (0x08, Local2)
                    Return (Ones)
                }
            }

            Method (XPLP, 2, NotSerialized)
            {
            }

            Method (XPLL, 2, NotSerialized)
            {
            }

            Name (SWLS, Zero)
            Name (_UID, One)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (AMHP, Zero)
            Name (GWLS, Zero)
            Name (WLPD, 0x80000000)
            Method (TOM, 0, NotSerialized)
            {
                Multiply (TOML, 0x00010000, Local0)
                Multiply (TOMH, 0x01000000, Local1)
                Add (Local0, Local1, Local0)
                Return (Local0)
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x78000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFED3FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02D40000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED45000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x012BB000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, BTN1)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, BTX1)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, BTL1)  // _LEN: Length
                Store (TOM (), BTMN)
                ShiftLeft (PBAR, 0x18, Local0)
                Subtract (Local0, BTMN, BTLN)
                Return (CRES)
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y02)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y03)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y02._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y02._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._LEN, ML02)  // _LEN: Length
                    If (GPIC)
                    {
                        Store (0xFEC00000, MB01)
                        Store (0xFEE00000, MB02)
                        Store (0x1000, ML01)
                        If (\NAPC)
                        {
                            Add (ML01, 0x1000, ML01)
                        }

                        Store (0x1000, ML02)
                    }

                    Return (MEM1)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xF8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                Store (Zero, NAPX)
                Store (NAPD, Local0)
                And (Local0, 0xFFFFFFEF, Local0)
                Store (Local0, NAPD)
                Release (NAPM)
            }

            Name (PR00, Package (0x15)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }
            })
            Name (AR00, Package (0x15)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x11
                }
            })
            Name (NR00, Package (0x15)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x2C
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x2D
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x2E
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x2F
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x30
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x31
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x32
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x33
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0011FFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0012FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x11
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    If (\NAPC)
                    {
                        Return (NR00)
                    }
                    Else
                    {
                        Return (AR00)
                    }
                }
                Else
                {
                    Return (PR00)
                }
            }

            Name (TBHD, Package (0x33)
            {
                Package (0x02)
                {
                    Zero, 
                    One
                }, 

                Package (0x02)
                {
                    0x02, 
                    0x05
                }, 

                Package (0x02)
                {
                    0x04, 
                    0x0A
                }, 

                Package (0x02)
                {
                    0x06, 
                    0x0F
                }, 

                Package (0x02)
                {
                    0x08, 
                    0x14
                }, 

                Package (0x02)
                {
                    0x0A, 
                    0x19
                }, 

                Package (0x02)
                {
                    0x0C, 
                    0x1E
                }, 

                Package (0x02)
                {
                    0x0E, 
                    0x23
                }, 

                Package (0x02)
                {
                    0x10, 
                    0x28
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x2D
                }, 

                Package (0x02)
                {
                    0x14, 
                    0x33
                }, 

                Package (0x02)
                {
                    0x16, 
                    0x38
                }, 

                Package (0x02)
                {
                    0x18, 
                    0x3D
                }, 

                Package (0x02)
                {
                    0x1A, 
                    0x42
                }, 

                Package (0x02)
                {
                    0x1C, 
                    0x47
                }, 

                Package (0x02)
                {
                    0x1E, 
                    0x4C
                }, 

                Package (0x02)
                {
                    0x20, 
                    0x51
                }, 

                Package (0x02)
                {
                    0x22, 
                    0x56
                }, 

                Package (0x02)
                {
                    0x24, 
                    0x5B
                }, 

                Package (0x02)
                {
                    0x26, 
                    0x60
                }, 

                Package (0x02)
                {
                    0x28, 
                    0x66
                }, 

                Package (0x02)
                {
                    0x2A, 
                    0x6B
                }, 

                Package (0x02)
                {
                    0x2C, 
                    0x70
                }, 

                Package (0x02)
                {
                    0x2E, 
                    0x75
                }, 

                Package (0x02)
                {
                    0x30, 
                    0x7A
                }, 

                Package (0x02)
                {
                    0x32, 
                    0x7F
                }, 

                Package (0x02)
                {
                    0x34, 
                    0x84
                }, 

                Package (0x02)
                {
                    0x36, 
                    0x89
                }, 

                Package (0x02)
                {
                    0x38, 
                    0x8E
                }, 

                Package (0x02)
                {
                    0x3A, 
                    0x93
                }, 

                Package (0x02)
                {
                    0x3C, 
                    0x99
                }, 

                Package (0x02)
                {
                    0x3E, 
                    0x9E
                }, 

                Package (0x02)
                {
                    0x40, 
                    0xA3
                }, 

                Package (0x02)
                {
                    0x42, 
                    0xA8
                }, 

                Package (0x02)
                {
                    0x44, 
                    0xAD
                }, 

                Package (0x02)
                {
                    0x46, 
                    0xB2
                }, 

                Package (0x02)
                {
                    0x48, 
                    0xB7
                }, 

                Package (0x02)
                {
                    0x4A, 
                    0xBC
                }, 

                Package (0x02)
                {
                    0x4C, 
                    0xC1
                }, 

                Package (0x02)
                {
                    0x4E, 
                    0xC6
                }, 

                Package (0x02)
                {
                    0x50, 
                    0xCC
                }, 

                Package (0x02)
                {
                    0x52, 
                    0xD1
                }, 

                Package (0x02)
                {
                    0x54, 
                    0xD6
                }, 

                Package (0x02)
                {
                    0x56, 
                    0xDB
                }, 

                Package (0x02)
                {
                    0x58, 
                    0xE0
                }, 

                Package (0x02)
                {
                    0x5A, 
                    0xE5
                }, 

                Package (0x02)
                {
                    0x5C, 
                    0xEA
                }, 

                Package (0x02)
                {
                    0x5E, 
                    0xEF
                }, 

                Package (0x02)
                {
                    0x60, 
                    0xF4
                }, 

                Package (0x02)
                {
                    0x62, 
                    0xF9
                }, 

                Package (0x02)
                {
                    0x64, 
                    0xFF
                }
            })
            Method (DTOH, 1, NotSerialized)
            {
                Store (Zero, Local1)
                Store (0x33, Local2)
                ShiftRight (Add (Local1, Local2), One, Local0)
                Store (DerefOf (Index (DerefOf (Index (TBHD, Local0)), Zero)), 
                    Local3)
                While (LAnd (LAnd (LNotEqual (Local0, Local1), LNotEqual (Local0, 
                    Local2)), LNotEqual (Arg0, Local3)))
                {
                    If (LGreater (Arg0, Local3))
                    {
                        Store (Local0, Local1)
                    }
                    Else
                    {
                        Store (Local0, Local2)
                    }

                    ShiftRight (Add (Local1, Local2), One, Local0)
                    Store (DerefOf (Index (DerefOf (Index (TBHD, Local0)), Zero)), 
                        Local3)
                }

                Return (DerefOf (Index (DerefOf (Index (TBHD, Local0)), One)))
            }

            Method (HTOD, 1, NotSerialized)
            {
                Store (Zero, Local1)
                Store (0x33, Local2)
                ShiftRight (Add (Local1, Local2), One, Local0)
                Store (DerefOf (Index (DerefOf (Index (TBHD, Local0)), One)), 
                    Local3)
                While (LAnd (LAnd (LNotEqual (Local0, Local1), LNotEqual (Local0, 
                    Local2)), LNotEqual (Arg0, Local3)))
                {
                    If (LGreater (Arg0, Local3))
                    {
                        Store (Local0, Local1)
                    }
                    Else
                    {
                        Store (Local0, Local2)
                    }

                    ShiftRight (Add (Local1, Local2), One, Local0)
                    Store (DerefOf (Index (DerefOf (Index (TBHD, Local0)), One)), 
                        Local3)
                }

                Return (DerefOf (Index (DerefOf (Index (TBHD, Local0)), Zero)))
            }

            Name (BCLB, Package (0x35)
            {
                0x5A, 
                0x3C, 
                Zero, 
                0x02, 
                0x04, 
                0x06, 
                0x08, 
                0x0A, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x16, 
                0x18, 
                0x1A, 
                0x1C, 
                0x1E, 
                0x20, 
                0x22, 
                0x24, 
                0x26, 
                0x28, 
                0x2A, 
                0x2C, 
                0x2E, 
                0x30, 
                0x32, 
                0x34, 
                0x36, 
                0x38, 
                0x3A, 
                0x3C, 
                0x3E, 
                0x40, 
                0x42, 
                0x44, 
                0x46, 
                0x48, 
                0x4A, 
                0x4C, 
                0x4E, 
                0x50, 
                0x52, 
                0x54, 
                0x56, 
                0x58, 
                0x5A, 
                0x5C, 
                0x5E, 
                0x60, 
                0x62, 
                0x64
            })
            Name (BRLV, Package (0x0A)
            {
                0x55, 
                0x28, 
                0x0A, 
                0x14, 
                0x1E, 
                0x28, 
                0x37, 
                0x46, 
                0x55, 
                0x64
            })
            Name (PANL, Package (0x09)
            {
                Package (0x0A)
                {
                    0x55, 
                    0x28, 
                    0x0A, 
                    0x14, 
                    0x1E, 
                    0x28, 
                    0x37, 
                    0x46, 
                    0x55, 
                    0x64
                }, 

                Package (0x0A)
                {
                    0x4D, 
                    0x1C, 
                    0x09, 
                    0x0B, 
                    0x11, 
                    0x1C, 
                    0x2C, 
                    0x3C, 
                    0x4D, 
                    0x64
                }, 

                Package (0x0A)
                {
                    0x4B, 
                    0x1A, 
                    0x09, 
                    0x0D, 
                    0x11, 
                    0x1A, 
                    0x2A, 
                    0x39, 
                    0x4B, 
                    0x64
                }, 

                Package (0x0A)
                {
                    0x51, 
                    0x1C, 
                    0x09, 
                    0x0E, 
                    0x13, 
                    0x1C, 
                    0x2D, 
                    0x3E, 
                    0x51, 
                    0x64
                }, 

                Package (0x0A)
                {
                    0x49, 
                    0x1A, 
                    0x08, 
                    0x0E, 
                    0x11, 
                    0x1A, 
                    0x27, 
                    0x35, 
                    0x49, 
                    0x64
                }, 

                Package (0x0A)
                {
                    0x44, 
                    0x17, 
                    0x07, 
                    0x0C, 
                    0x10, 
                    0x17, 
                    0x23, 
                    0x33, 
                    0x44, 
                    0x64
                }, 

                Package (0x0A)
                {
                    0x44, 
                    0x17, 
                    0x07, 
                    0x0B, 
                    0x0F, 
                    0x17, 
                    0x24, 
                    0x33, 
                    0x44, 
                    0x64
                }, 

                Package (0x0A)
                {
                    0x3A, 
                    0x15, 
                    0x07, 
                    0x0B, 
                    0x0E, 
                    0x15, 
                    0x21, 
                    0x2D, 
                    0x3A, 
                    0x64
                }, 

                Package (0x0A)
                {
                    0x2F, 
                    0x11, 
                    0x05, 
                    0x08, 
                    0x0B, 
                    0x11, 
                    0x1A, 
                    0x24, 
                    0x2F, 
                    0x64
                }
            })
            Device (VGA)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Name (AF7E, 0x80000001)
                Name (VBAR, 0x12345678)
                OperationRegion (VGAX, PCI_Config, 0x24, 0x10)
                Field (VGAX, AnyAcc, NoLock, Preserve)
                {
                    BAR6,   32
                }

                Method (VBA2, 0, NotSerialized)
                {
                    Store (BAR6, VBAR)
                    Add (VBAR, 0x1724, VBAR)
                    Return (VBAR)
                }

                OperationRegion (VVVV, SystemMemory, VBA2 (), 0x10)
                Field (VVVV, AnyAcc, NoLock, Preserve)
                {
                    DACA,   8, 
                    Offset (0x02), 
                    DFP1,   1
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (DOSA, Zero)
                Name (BCML, 0x64)
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    Store (Arg0, DOSA)
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Return (Package (0x05)
                    {
                        0x00010100, 
                        0x00010110, 
                        0x0200, 
                        0x00010210, 
                        0x00010220
                    })
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    Store (Zero, ^^LPC0.LIDW)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    Store (One, ^^LPC0.LIDW)
                }

                Device (LCD)
                {
                    Name (_ADR, 0x0110)  // _ADR: Address
                    Method (BRIN, 1, NotSerialized)
                    {
                        Name (BPA0, Package (0x07)
                        {
                            0x0D, 
                            0x0E, 
                            0x0D, 
                            0x0F, 
                            0x0F, 
                            0x0F, 
                            0x0F
                        })
                        Store (Arg0, Local0)
                        Store (Zero, Local1)
                        Store (Zero, Local2)
                        Store (Zero, Local3)
                        Store (Zero, Local4)
                        Store (Zero, Local5)
                        If (LLess (Arg0, 0x64))
                        {
                            While (One)
                            {
                                If (LGreaterEqual (Local0, DerefOf (Index (BPA0, Local1))))
                                {
                                    Subtract (Local0, DerefOf (Index (BPA0, Local1)), Local0)
                                }
                                Else
                                {
                                    Break
                                }

                                Increment (Local1)
                            }

                            Store (Local0, Local2)
                            Add (Local1, 0x02, Local0)
                            Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), Local0)), 
                                Local3)
                            Increment (Local0)
                            Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), Local0)), 
                                Local4)
                            Store (Divide (Multiply (Subtract (Local4, Local3), Local2), DerefOf (
                                Index (BPA0, Local1)), ), Local5)
                            Store (Mod (Multiply (Subtract (Local4, Local3), Local2), DerefOf (
                                Index (BPA0, Local1))), Local0)
                            If (LEqual (Mod (DerefOf (Index (BPA0, Local1)), 0x02), 
                                Zero))
                            {
                                If (LGreaterEqual (Local0, Divide (DerefOf (Index (BPA0, Local1)), 
                                    0x02, )))
                                {
                                    Increment (Local5)
                                }
                            }
                            Else
                            {
                                If (LGreater (Local0, Divide (DerefOf (Index (BPA0, Local1)), 0x02, 
                                    )))
                                {
                                    Increment (Local5)
                                }
                            }

                            Add (Local3, Local5, Arg0)
                        }

                        Return (Arg0)
                    }

                    Name (BRLS, Package (0x67)
                    {
                        0x50, 
                        0x32, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        If (LEqual (PWM7, Zero))
                        {
                            Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x02)), 
                                PWM0)
                            Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x03)), 
                                PWM1)
                            Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x04)), 
                                PWM2)
                            Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x05)), 
                                PWM3)
                            Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x06)), 
                                PWM4)
                            Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x07)), 
                                PWM5)
                            Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x08)), 
                                PWM6)
                            Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x09)), 
                                PWM7)
                        }

                        If (LGreaterEqual (OSYS, 0x07DC))
                        {
                            Return (BRLS)
                        }
                        Else
                        {
                            Return (BRLV)
                        }
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        Acquire (^^^LPC0.PSMX, 0xFFFF)
                        Store (Arg0, BCML)
                        If (LGreaterEqual (OSYS, 0x07DC))
                        {
                            Store (BRIN (Arg0), Local0)
                            Divide (Multiply (Local0, 0xFF), 0x64, Local1, BRTL)
                        }
                        Else
                        {
                            If (LAnd (LGreaterEqual (Arg0, Zero), LLessEqual (Arg0, 0x64)))
                            {
                                Store (SizeOf (BRLV), Local0)
                                While (Local0)
                                {
                                    Decrement (Local0)
                                    Store (DerefOf (Index (BRLV, Local0)), Local1)
                                    If (LEqual (Arg0, Local1))
                                    {
                                        Break
                                    }
                                }

                                Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), Local0)), 
                                    Local1)
                                Divide (Multiply (Local1, 0xFF), 0x64, Local2, BRTL)
                                Subtract (Local0, 0x02, ^^^LPC0.ECA3)
                            }
                        }

                        AFN7 (BRTL)
                        Release (^^^LPC0.PSMX)
                    }

                    Method (_BQC, 0, Serialized)  // _BQC: Brightness Query Current
                    {
                        Return (BCML)
                    }
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x05))
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        WREC (0xCF, 0xC0, 0x06, One, Else
                            {
                                WREC (0xCF, 0xC0, 0x06, Zero)
                            })
                    }
                }

                Name (PR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x1D
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1F
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR02)
                        }
                        Else
                        {
                            Return (AR02)
                        }
                    }
                    Else
                    {
                        Return (PR02)
                    }
                }

                OperationRegion (XPEX, SystemMemory, 0xF8012100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Store (Zero, Local1)
                    Store (XPPB (), Local0)
                    If (LGreater (0x04, Local0))
                    {
                        Store (Zero, Local1)
                    }

                    If (LGreater (0x08, Local0))
                    {
                        Store (0x00010000, Local1)
                    }

                    If (LGreater (0x0B, Local0))
                    {
                        Store (0x00020000, Local1)
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Store (XPPB (), Local0)
                    Store (GPPX (), Local2)
                    Store (GFXM (), Local3)
                    Store (Zero, Local1)
                    If (LEqual (0x10, Local0))
                    {
                        Store (0xFFFF, Local1)
                        If (Local3)
                        {
                            Store (0x0F0F, Local1)
                        }
                    }

                    If (LEqual (0x18, Local0))
                    {
                        Store (0xF0F0, Local1)
                    }

                    If (LEqual (0x20, Local0))
                    {
                        Store (0x1010, Local1)
                    }

                    If (LEqual (0x28, Local0))
                    {
                        Store (0x2020, Local1)
                    }

                    If (LEqual (0x30, Local0))
                    {
                        Store (0x4040, Local1)
                    }

                    If (LEqual (0x38, Local0))
                    {
                        Store (0x8080, Local1)
                    }

                    If (LEqual (0x48, Local0))
                    {
                        Store (Zero, Local1)
                        If (LEqual (0x02, Local2))
                        {
                            Store (0x0303, Local1)
                        }

                        If (LEqual (0x03, Local2))
                        {
                            Store (0x0101, Local1)
                        }
                    }

                    If (LEqual (0x50, Local0))
                    {
                        Store (Zero, Local1)
                        If (LEqual (0x03, Local2))
                        {
                            Store (0x0202, Local1)
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Store (XPPD (), Local1)
                    If (LNotEqual (Zero, Local1))
                    {
                        Store (NBXR (Add (0x65, XPCN ())), Local2)
                        If (Arg0)
                        {
                            And (Local2, Not (Local1), Local2)
                        }
                        Else
                        {
                            Or (Local2, Local1, Local2)
                        }

                        NBXW (Add (0x65, XPCN ()), Local2)
                    }
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If (And (VC0S, 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    Store (Arg0, XPIR)
                    Store (XPID, Local0)
                    Store (Zero, XPIR)
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    Store (Arg0, XPIR)
                    Store (Arg1, XPID)
                    Store (Zero, XPIR)
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Store (XPRD (0xA2), Local0)
                    And (Local0, 0xFFFFFFF8, Local0)
                    ShiftRight (Local0, 0x04, Local1)
                    And (Local1, 0x07, Local1)
                    Or (Local0, Local1, Local0)
                    Or (Local0, 0x0100, Local0)
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Store (LKCN, Local0)
                    And (Local0, 0xFFFFFFDF, Local0)
                    Store (Local0, LKCN)
                    Or (Local0, 0x20, Local0)
                    Store (Local0, LKCN)
                    Store (0x64, Local1)
                    Store (One, Local2)
                    While (LAnd (Local1, Local2))
                    {
                        Sleep (One)
                        Store (LKST, Local3)
                        If (And (Local3, 0x0800))
                        {
                            Decrement (Local1)
                        }
                        Else
                        {
                            Store (Zero, Local2)
                        }
                    }

                    And (Local0, 0xFFFFFFDF, Local0)
                    Store (Local0, LKCN)
                    If (LNot (Local2))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Store (_ADR, Local0)
                    Store (ShiftRight (Local0, 0x10), Local1)
                    Store (ShiftLeft (Local1, 0x03), Local1)
                    Store (And (Local0, 0x0F), Local2)
                    Store (Or (Local1, Local2), Local3)
                    Return (Local3)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                Name (PR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x23
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR03)
                        }
                        Else
                        {
                            Return (AR03)
                        }
                    }
                    Else
                    {
                        Return (PR03)
                    }
                }

                OperationRegion (XPEX, SystemMemory, 0xF8013100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Store (Zero, Local1)
                    Store (XPPB (), Local0)
                    If (LGreater (0x04, Local0))
                    {
                        Store (Zero, Local1)
                    }

                    If (LGreater (0x08, Local0))
                    {
                        Store (0x00010000, Local1)
                    }

                    If (LGreater (0x0B, Local0))
                    {
                        Store (0x00020000, Local1)
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Store (XPPB (), Local0)
                    Store (GPPX (), Local2)
                    Store (GFXM (), Local3)
                    Store (Zero, Local1)
                    If (LEqual (0x10, Local0))
                    {
                        Store (0xFFFF, Local1)
                        If (Local3)
                        {
                            Store (0x0F0F, Local1)
                        }
                    }

                    If (LEqual (0x18, Local0))
                    {
                        Store (0xF0F0, Local1)
                    }

                    If (LEqual (0x20, Local0))
                    {
                        Store (0x1010, Local1)
                    }

                    If (LEqual (0x28, Local0))
                    {
                        Store (0x2020, Local1)
                    }

                    If (LEqual (0x30, Local0))
                    {
                        Store (0x4040, Local1)
                    }

                    If (LEqual (0x38, Local0))
                    {
                        Store (0x8080, Local1)
                    }

                    If (LEqual (0x48, Local0))
                    {
                        Store (Zero, Local1)
                        If (LEqual (0x02, Local2))
                        {
                            Store (0x0303, Local1)
                        }

                        If (LEqual (0x03, Local2))
                        {
                            Store (0x0101, Local1)
                        }
                    }

                    If (LEqual (0x50, Local0))
                    {
                        Store (Zero, Local1)
                        If (LEqual (0x03, Local2))
                        {
                            Store (0x0202, Local1)
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Store (XPPD (), Local1)
                    If (LNotEqual (Zero, Local1))
                    {
                        Store (NBXR (Add (0x65, XPCN ())), Local2)
                        If (Arg0)
                        {
                            And (Local2, Not (Local1), Local2)
                        }
                        Else
                        {
                            Or (Local2, Local1, Local2)
                        }

                        NBXW (Add (0x65, XPCN ()), Local2)
                    }
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If (And (VC0S, 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    Store (Arg0, XPIR)
                    Store (XPID, Local0)
                    Store (Zero, XPIR)
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    Store (Arg0, XPIR)
                    Store (Arg1, XPID)
                    Store (Zero, XPIR)
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Store (XPRD (0xA2), Local0)
                    And (Local0, 0xFFFFFFF8, Local0)
                    ShiftRight (Local0, 0x04, Local1)
                    And (Local1, 0x07, Local1)
                    Or (Local0, Local1, Local0)
                    Or (Local0, 0x0100, Local0)
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Store (LKCN, Local0)
                    And (Local0, 0xFFFFFFDF, Local0)
                    Store (Local0, LKCN)
                    Or (Local0, 0x20, Local0)
                    Store (Local0, LKCN)
                    Store (0x64, Local1)
                    Store (One, Local2)
                    While (LAnd (Local1, Local2))
                    {
                        Sleep (One)
                        Store (LKST, Local3)
                        If (And (Local3, 0x0800))
                        {
                            Decrement (Local1)
                        }
                        Else
                        {
                            Store (Zero, Local2)
                        }
                    }

                    And (Local0, 0xFFFFFFDF, Local0)
                    Store (Local0, LKCN)
                    If (LNot (Local2))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Store (_ADR, Local0)
                    Store (ShiftRight (Local0, 0x10), Local1)
                    Store (ShiftLeft (Local1, 0x03), Local1)
                    Store (And (Local0, 0x0F), Local2)
                    Store (Or (Local1, Local2), Local3)
                    Return (Local3)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Name (PR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR04)
                        }
                        Else
                        {
                            Return (AR04)
                        }
                    }
                    Else
                    {
                        Return (PR04)
                    }
                }

                OperationRegion (XPEX, SystemMemory, 0xF8014100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Store (Zero, Local1)
                    Store (XPPB (), Local0)
                    If (LGreater (0x04, Local0))
                    {
                        Store (Zero, Local1)
                    }

                    If (LGreater (0x08, Local0))
                    {
                        Store (0x00010000, Local1)
                    }

                    If (LGreater (0x0B, Local0))
                    {
                        Store (0x00020000, Local1)
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Store (XPPB (), Local0)
                    Store (GPPX (), Local2)
                    Store (GFXM (), Local3)
                    Store (Zero, Local1)
                    If (LEqual (0x10, Local0))
                    {
                        Store (0xFFFF, Local1)
                        If (Local3)
                        {
                            Store (0x0F0F, Local1)
                        }
                    }

                    If (LEqual (0x18, Local0))
                    {
                        Store (0xF0F0, Local1)
                    }

                    If (LEqual (0x20, Local0))
                    {
                        Store (0x1010, Local1)
                    }

                    If (LEqual (0x28, Local0))
                    {
                        Store (0x2020, Local1)
                    }

                    If (LEqual (0x30, Local0))
                    {
                        Store (0x4040, Local1)
                    }

                    If (LEqual (0x38, Local0))
                    {
                        Store (0x8080, Local1)
                    }

                    If (LEqual (0x48, Local0))
                    {
                        Store (Zero, Local1)
                        If (LEqual (0x02, Local2))
                        {
                            Store (0x0303, Local1)
                        }

                        If (LEqual (0x03, Local2))
                        {
                            Store (0x0101, Local1)
                        }
                    }

                    If (LEqual (0x50, Local0))
                    {
                        Store (Zero, Local1)
                        If (LEqual (0x03, Local2))
                        {
                            Store (0x0202, Local1)
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Store (XPPD (), Local1)
                    If (LNotEqual (Zero, Local1))
                    {
                        Store (NBXR (Add (0x65, XPCN ())), Local2)
                        If (Arg0)
                        {
                            And (Local2, Not (Local1), Local2)
                        }
                        Else
                        {
                            Or (Local2, Local1, Local2)
                        }

                        NBXW (Add (0x65, XPCN ()), Local2)
                    }
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If (And (VC0S, 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    Store (Arg0, XPIR)
                    Store (XPID, Local0)
                    Store (Zero, XPIR)
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    Store (Arg0, XPIR)
                    Store (Arg1, XPID)
                    Store (Zero, XPIR)
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Store (XPRD (0xA2), Local0)
                    And (Local0, 0xFFFFFFF8, Local0)
                    ShiftRight (Local0, 0x04, Local1)
                    And (Local1, 0x07, Local1)
                    Or (Local0, Local1, Local0)
                    Or (Local0, 0x0100, Local0)
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Store (LKCN, Local0)
                    And (Local0, 0xFFFFFFDF, Local0)
                    Store (Local0, LKCN)
                    Or (Local0, 0x20, Local0)
                    Store (Local0, LKCN)
                    Store (0x64, Local1)
                    Store (One, Local2)
                    While (LAnd (Local1, Local2))
                    {
                        Sleep (One)
                        Store (LKST, Local3)
                        If (And (Local3, 0x0800))
                        {
                            Decrement (Local1)
                        }
                        Else
                        {
                            Store (Zero, Local2)
                        }
                    }

                    And (Local0, 0xFFFFFFDF, Local0)
                    Store (Local0, LKCN)
                    If (LNot (Local2))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Store (_ADR, Local0)
                    Store (ShiftRight (Local0, 0x10), Local1)
                    Store (ShiftLeft (Local1, 0x03), Local1)
                    Store (And (Local0, 0x0F), Local2)
                    Store (Or (Local1, Local2), Local3)
                    Return (Local3)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00020005)  // _ADR: Address
                Name (PR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR05)
                        }
                        Else
                        {
                            Return (AR05)
                        }
                    }
                    Else
                    {
                        Return (PR05)
                    }
                }

                OperationRegion (XPEX, SystemMemory, 0xF8015100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Store (Zero, Local1)
                    Store (XPPB (), Local0)
                    If (LGreater (0x04, Local0))
                    {
                        Store (Zero, Local1)
                    }

                    If (LGreater (0x08, Local0))
                    {
                        Store (0x00010000, Local1)
                    }

                    If (LGreater (0x0B, Local0))
                    {
                        Store (0x00020000, Local1)
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Store (XPPB (), Local0)
                    Store (GPPX (), Local2)
                    Store (GFXM (), Local3)
                    Store (Zero, Local1)
                    If (LEqual (0x10, Local0))
                    {
                        Store (0xFFFF, Local1)
                        If (Local3)
                        {
                            Store (0x0F0F, Local1)
                        }
                    }

                    If (LEqual (0x18, Local0))
                    {
                        Store (0xF0F0, Local1)
                    }

                    If (LEqual (0x20, Local0))
                    {
                        Store (0x1010, Local1)
                    }

                    If (LEqual (0x28, Local0))
                    {
                        Store (0x2020, Local1)
                    }

                    If (LEqual (0x30, Local0))
                    {
                        Store (0x4040, Local1)
                    }

                    If (LEqual (0x38, Local0))
                    {
                        Store (0x8080, Local1)
                    }

                    If (LEqual (0x48, Local0))
                    {
                        Store (Zero, Local1)
                        If (LEqual (0x02, Local2))
                        {
                            Store (0x0303, Local1)
                        }

                        If (LEqual (0x03, Local2))
                        {
                            Store (0x0101, Local1)
                        }
                    }

                    If (LEqual (0x50, Local0))
                    {
                        Store (Zero, Local1)
                        If (LEqual (0x03, Local2))
                        {
                            Store (0x0202, Local1)
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Store (XPPD (), Local1)
                    If (LNotEqual (Zero, Local1))
                    {
                        Store (NBXR (Add (0x65, XPCN ())), Local2)
                        If (Arg0)
                        {
                            And (Local2, Not (Local1), Local2)
                        }
                        Else
                        {
                            Or (Local2, Local1, Local2)
                        }

                        NBXW (Add (0x65, XPCN ()), Local2)
                    }
                }

                Method (XPDL, 0, NotSerialized)
                {
                    If (And (VC0S, 0x00020000))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Mutex (XPPM, 0x00)
                Method (XPRD, 1, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    Store (Arg0, XPIR)
                    Store (XPID, Local0)
                    Store (Zero, XPIR)
                    Release (XPPM)
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    Acquire (XPPM, 0xFFFF)
                    Store (Arg0, XPIR)
                    Store (Arg1, XPID)
                    Store (Zero, XPIR)
                    Release (XPPM)
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Store (XPRD (0xA2), Local0)
                    And (Local0, 0xFFFFFFF8, Local0)
                    ShiftRight (Local0, 0x04, Local1)
                    And (Local1, 0x07, Local1)
                    Or (Local0, Local1, Local0)
                    Or (Local0, 0x0100, Local0)
                    XPWR (0xA2, Local0)
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Store (LKCN, Local0)
                    And (Local0, 0xFFFFFFDF, Local0)
                    Store (Local0, LKCN)
                    Or (Local0, 0x20, Local0)
                    Store (Local0, LKCN)
                    Store (0x64, Local1)
                    Store (One, Local2)
                    While (LAnd (Local1, Local2))
                    {
                        Sleep (One)
                        Store (LKST, Local3)
                        If (And (Local3, 0x0800))
                        {
                            Decrement (Local1)
                        }
                        Else
                        {
                            Store (Zero, Local2)
                        }
                    }

                    And (Local0, 0xFFFFFFDF, Local0)
                    Store (Local0, LKCN)
                    If (LNot (Local2))
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Store (_ADR, Local0)
                    Store (ShiftRight (Local0, 0x10), Local1)
                    Store (ShiftLeft (Local1, 0x03), Local1)
                    Store (And (Local0, 0x0F), Local2)
                    Store (Or (Local1, Local2), Local3)
                    Return (Local3)
                }

                Device (XPDV)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x08)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        PCMS,   32
                    }
                }
            }

            Device (GFX)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Name (PR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x18
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x19
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (\NAPC)
                        {
                            Return (NR01)
                        }
                        Else
                        {
                            Return (AR01)
                        }
                    }
                    Else
                    {
                        Return (PR01)
                    }
                }

                OperationRegion (XPEX, SystemMemory, 0xF8011100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSA, Zero)
                    Name (BCML, 0x64)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        Store (Arg0, DOSA)
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        Store (Zero, ^^^LPC0.LIDW)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        Store (One, ^^^LPC0.LIDW)
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Method (BRIN, 1, NotSerialized)
                        {
                            Name (BPA0, Package (0x07)
                            {
                                0x0D, 
                                0x0E, 
                                0x0D, 
                                0x0F, 
                                0x0F, 
                                0x0F, 
                                0x0F
                            })
                            Store (Arg0, Local0)
                            Store (Zero, Local1)
                            Store (Zero, Local2)
                            Store (Zero, Local3)
                            Store (Zero, Local4)
                            Store (Zero, Local5)
                            If (LLess (Arg0, 0x64))
                            {
                                While (One)
                                {
                                    If (LGreaterEqual (Local0, DerefOf (Index (BPA0, Local1))))
                                    {
                                        Subtract (Local0, DerefOf (Index (BPA0, Local1)), Local0)
                                    }
                                    Else
                                    {
                                        Break
                                    }

                                    Increment (Local1)
                                }

                                Store (Local0, Local2)
                                Add (Local1, 0x02, Local0)
                                Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), Local0)), 
                                    Local3)
                                Increment (Local0)
                                Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), Local0)), 
                                    Local4)
                                Store (Divide (Multiply (Subtract (Local4, Local3), Local2), DerefOf (
                                    Index (BPA0, Local1)), ), Local5)
                                Store (Mod (Multiply (Subtract (Local4, Local3), Local2), DerefOf (
                                    Index (BPA0, Local1))), Local0)
                                If (LEqual (Mod (DerefOf (Index (BPA0, Local1)), 0x02), 
                                    Zero))
                                {
                                    If (LGreaterEqual (Local0, Divide (DerefOf (Index (BPA0, Local1)), 
                                        0x02, )))
                                    {
                                        Increment (Local5)
                                    }
                                }
                                Else
                                {
                                    If (LGreater (Local0, Divide (DerefOf (Index (BPA0, Local1)), 0x02, 
                                        )))
                                    {
                                        Increment (Local5)
                                    }
                                }

                                Add (Local3, Local5, Arg0)
                            }

                            Return (Arg0)
                        }

                        Name (BRLS, Package (0x67)
                        {
                            0x50, 
                            0x32, 
                            Zero, 
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            0x09, 
                            0x0A, 
                            0x0B, 
                            0x0C, 
                            0x0D, 
                            0x0E, 
                            0x0F, 
                            0x10, 
                            0x11, 
                            0x12, 
                            0x13, 
                            0x14, 
                            0x15, 
                            0x16, 
                            0x17, 
                            0x18, 
                            0x19, 
                            0x1A, 
                            0x1B, 
                            0x1C, 
                            0x1D, 
                            0x1E, 
                            0x1F, 
                            0x20, 
                            0x21, 
                            0x22, 
                            0x23, 
                            0x24, 
                            0x25, 
                            0x26, 
                            0x27, 
                            0x28, 
                            0x29, 
                            0x2A, 
                            0x2B, 
                            0x2C, 
                            0x2D, 
                            0x2E, 
                            0x2F, 
                            0x30, 
                            0x31, 
                            0x32, 
                            0x33, 
                            0x34, 
                            0x35, 
                            0x36, 
                            0x37, 
                            0x38, 
                            0x39, 
                            0x3A, 
                            0x3B, 
                            0x3C, 
                            0x3D, 
                            0x3E, 
                            0x3F, 
                            0x40, 
                            0x41, 
                            0x42, 
                            0x43, 
                            0x44, 
                            0x45, 
                            0x46, 
                            0x47, 
                            0x48, 
                            0x49, 
                            0x4A, 
                            0x4B, 
                            0x4C, 
                            0x4D, 
                            0x4E, 
                            0x4F, 
                            0x50, 
                            0x51, 
                            0x52, 
                            0x53, 
                            0x54, 
                            0x55, 
                            0x56, 
                            0x57, 
                            0x58, 
                            0x59, 
                            0x5A, 
                            0x5B, 
                            0x5C, 
                            0x5D, 
                            0x5E, 
                            0x5F, 
                            0x60, 
                            0x61, 
                            0x62, 
                            0x63, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            If (LEqual (PWM7, Zero))
                            {
                                Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x02)), 
                                    PWM0)
                                Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x03)), 
                                    PWM1)
                                Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x04)), 
                                    PWM2)
                                Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x05)), 
                                    PWM3)
                                Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x06)), 
                                    PWM4)
                                Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x07)), 
                                    PWM5)
                                Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x08)), 
                                    PWM6)
                                Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x09)), 
                                    PWM7)
                            }

                            If (LGreaterEqual (OSYS, 0x07DC))
                            {
                                Return (BRLS)
                            }
                            Else
                            {
                                Return (BRLV)
                            }
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Acquire (^^^^LPC0.PSMX, 0xFFFF)
                            Store (Arg0, BCML)
                            If (LGreaterEqual (OSYS, 0x07DC))
                            {
                                Store (BRIN (Arg0), Local0)
                                Divide (Multiply (Local0, 0xFF), 0x64, Local1, BRTL)
                            }
                            Else
                            {
                                If (LAnd (LGreaterEqual (Arg0, Zero), LLessEqual (Arg0, 0x64)))
                                {
                                    Store (SizeOf (BRLV), Local0)
                                    While (Local0)
                                    {
                                        Decrement (Local0)
                                        Store (DerefOf (Index (BRLV, Local0)), Local1)
                                        If (LEqual (Arg0, Local1))
                                        {
                                            Break
                                        }
                                    }

                                    Store (DerefOf (Index (DerefOf (Index (PANL, PNID)), Local0)), 
                                        Local1)
                                    Divide (Multiply (Local1, 0xFF), 0x64, Local2, BRTL)
                                    Subtract (Local0, 0x02, ^^^^LPC0.ECA3)
                                }
                            }

                            AFN7 (BRTL)
                            Release (^^^^LPC0.PSMX)
                        }

                        Method (_BQC, 0, Serialized)  // _BQC: Brightness Query Current
                        {
                            Return (BCML)
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103"))  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LEqual (HPEN, One))
                    {
                        If (LGreaterEqual (OSTB, 0x40))
                        {
                            Return (0x0F)
                        }

                        Store (Zero, HPEN)
                        Return (One)
                    }

                    Return (One)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y04)
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y04._BAS, HPEB)  // _BAS: Base Address
                    Store (0xFED00000, Local0)
                    And (Local0, 0xFFFFFC00, HPEB)
                    Return (BUF0)
                }
            }

            Name (NPLD, Zero)
            Name (APLD, Package (0x01)
            {
                Buffer (0x14)
                {
                    /* 0000 */   0x82, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,
                    /* 0008 */   0x25, 0x09, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */   0x2C, 0x01, 0xBE, 0x00
                }
            })
            Name (DPLD, Package (0x01)
            {
                Buffer (0x10)
                {
                    /* 0000 */   0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */   0xB0, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            })
            Name (BPLD, Package (0x01)
            {
                Buffer (0x14)
                {
                    /* 0000 */   0x82, 0x00, 0x00, 0x00, 0x64, 0x00, 0x64, 0x00,
                    /* 0008 */   0x24, 0x41, 0x80, 0x01, 0x00, 0x00, 0x04, 0x00,
                    /* 0010 */   0x00, 0x03, 0xAB, 0x02
                }
            })
            Name (CPLD, Package (0x01)
            {
                Buffer (0x14)
                {
                    /* 0000 */   0x82, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,
                    /* 0008 */   0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */   0xFF, 0xFF, 0xFF, 0xFF
                }
            })
            Device (AZAL)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, Zero, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (APLD)
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                OperationRegion (PCFG, PCI_Config, 0xA0, 0x04)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    OSOW,   32
                }

                Method (STOS, 0, NotSerialized)
                {
                    Or (OSOW, 0x01000000, OSOW)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    Store (RDEC (0xDA, 0x03, Zero, Local0, If (LEqual (Local0, Zero))
                            {
                                Store (0x03, Local0)
                            }, Else
                            {
                                Store (One, Local0)
                            }), WREC)
                    0xDA
                    0x03
                    Zero
                    Local0
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Device (GHUB)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Device (PRT1)
                            {
                                Name (_ADR, One)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */   0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */   0x91, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
                                        /*           Revision : 01     */
                                        /*        IgnoreColor : 01     */
                                        /*              Color : 000000 */
                                        /*              Width : 0000   */
                                        /*             Height : 0000   */
                                        /*        UserVisible : 01     */
                                        /*               Dock : 00     */
                                        /*                Lid : 00     */
                                        /*              Panel : 02     */
                                        /*   VerticalPosition : 02     */
                                        /* HorizontalPosition : 00     */
                                        /*              Shape : 04     */
                                        /*   GroupOrientation : 00     */
                                        /*         GroupToken : 00     */
                                        /*      GroupPosition : 00     */
                                        /*                Bay : 00     */
                                        /*          Ejectable : 01     */
                                        /*  OspmEjectRequired : 01     */
                                        /*      CabinetNumber : 00     */
                                        /*     CardCageNumber : 00     */
                                        /*          Reference : 00     */
                                        /*           Rotation : 00     */
                                        /*              Order : 00     */
                                        /*     VerticalOffset : 0000   */
                                        /*   HorizontalOffset : 0000   */
                                    }
                                })
                            }

                            Device (PRT2)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */   0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */   0x91, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
                                        /*           Revision : 01     */
                                        /*        IgnoreColor : 01     */
                                        /*              Color : 000000 */
                                        /*              Width : 0000   */
                                        /*             Height : 0000   */
                                        /*        UserVisible : 01     */
                                        /*               Dock : 00     */
                                        /*                Lid : 00     */
                                        /*              Panel : 02     */
                                        /*   VerticalPosition : 02     */
                                        /* HorizontalPosition : 00     */
                                        /*              Shape : 04     */
                                        /*   GroupOrientation : 00     */
                                        /*         GroupToken : 00     */
                                        /*      GroupPosition : 00     */
                                        /*                Bay : 00     */
                                        /*          Ejectable : 01     */
                                        /*  OspmEjectRequired : 01     */
                                        /*      CabinetNumber : 00     */
                                        /*     CardCageNumber : 00     */
                                        /*          Reference : 00     */
                                        /*           Rotation : 00     */
                                        /*              Order : 00     */
                                        /*     VerticalOffset : 0000   */
                                        /*   HorizontalOffset : 0000   */
                                    }
                                })
                            }

                            Device (PRT3)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */   0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */   0x91, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
                                        /*           Revision : 01     */
                                        /*        IgnoreColor : 01     */
                                        /*              Color : 000000 */
                                        /*              Width : 0000   */
                                        /*             Height : 0000   */
                                        /*        UserVisible : 01     */
                                        /*               Dock : 00     */
                                        /*                Lid : 00     */
                                        /*              Panel : 02     */
                                        /*   VerticalPosition : 02     */
                                        /* HorizontalPosition : 00     */
                                        /*              Shape : 04     */
                                        /*   GroupOrientation : 00     */
                                        /*         GroupToken : 00     */
                                        /*      GroupPosition : 00     */
                                        /*                Bay : 00     */
                                        /*          Ejectable : 01     */
                                        /*  OspmEjectRequired : 01     */
                                        /*      CabinetNumber : 00     */
                                        /*     CardCageNumber : 00     */
                                        /*          Reference : 00     */
                                        /*           Rotation : 00     */
                                        /*              Order : 00     */
                                        /*     VerticalOffset : 0000   */
                                        /*   HorizontalOffset : 0000   */
                                    }
                                })
                            }

                            Device (PRT4)
                            {
                                Name (_ADR, 0x04)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    Zero, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                            }
                        }
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */   0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */   0x91, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
                                /*           Revision : 01     */
                                /*        IgnoreColor : 01     */
                                /*              Color : 000000 */
                                /*              Width : 0000   */
                                /*             Height : 0000   */
                                /*        UserVisible : 01     */
                                /*               Dock : 00     */
                                /*                Lid : 00     */
                                /*              Panel : 02     */
                                /*   VerticalPosition : 02     */
                                /* HorizontalPosition : 00     */
                                /*              Shape : 04     */
                                /*   GroupOrientation : 00     */
                                /*         GroupToken : 00     */
                                /*      GroupPosition : 00     */
                                /*                Bay : 00     */
                                /*          Ejectable : 01     */
                                /*  OspmEjectRequired : 01     */
                                /*      CabinetNumber : 00     */
                                /*     CardCageNumber : 00     */
                                /*          Reference : 00     */
                                /*           Rotation : 00     */
                                /*              Order : 00     */
                                /*     VerticalOffset : 0000   */
                                /*   HorizontalOffset : 0000   */
                            }
                        })
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */   0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */   0x91, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
                                /*           Revision : 01     */
                                /*        IgnoreColor : 01     */
                                /*              Color : 000000 */
                                /*              Width : 0000   */
                                /*             Height : 0000   */
                                /*        UserVisible : 01     */
                                /*               Dock : 00     */
                                /*                Lid : 00     */
                                /*              Panel : 02     */
                                /*   VerticalPosition : 02     */
                                /* HorizontalPosition : 00     */
                                /*              Shape : 04     */
                                /*   GroupOrientation : 00     */
                                /*         GroupToken : 00     */
                                /*      GroupPosition : 00     */
                                /*                Bay : 00     */
                                /*          Ejectable : 01     */
                                /*  OspmEjectRequired : 01     */
                                /*      CabinetNumber : 00     */
                                /*     CardCageNumber : 00     */
                                /*          Reference : 00     */
                                /*           Rotation : 00     */
                                /*              Order : 00     */
                                /*     VerticalOffset : 0000   */
                                /*   HorizontalOffset : 0000   */
                            }
                        })
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                OperationRegion (PCFG, PCI_Config, 0xA0, 0x04)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    OSOW,   32
                }

                Method (STOS, 0, NotSerialized)
                {
                    Or (OSOW, 0x01000000, OSOW)
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (GHUB)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */   0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */   0x24, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0010 */   0xFF, 0xFF, 0xFF, 0xFF
                                /*           Revision : 02     */
                                /*        IgnoreColor : 01     */
                                /*              Color : 000000 */
                                /*              Width : 0000   */
                                /*             Height : 0000   */
                                /*        UserVisible : 00     */
                                /*               Dock : 00     */
                                /*                Lid : 01     */
                                /*              Panel : 04     */
                                /*   VerticalPosition : 00     */
                                /* HorizontalPosition : 01     */
                                /*              Shape : 07     */
                                /*   GroupOrientation : 00     */
                                /*         GroupToken : 00     */
                                /*      GroupPosition : 00     */
                                /*                Bay : 00     */
                                /*          Ejectable : 00     */
                                /*  OspmEjectRequired : 00     */
                                /*      CabinetNumber : 00     */
                                /*     CardCageNumber : 00     */
                                /*          Reference : 00     */
                                /*           Rotation : 00     */
                                /*              Order : 00     */
                                /*     VerticalOffset : FFFF   */
                                /*   HorizontalOffset : FFFF   */
                            }
                        })
                        Device (WLBT)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (WCAM)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */   0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */   0x24, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0010 */   0xFF, 0xFF, 0xFF, 0xFF
                                    /*           Revision : 02     */
                                    /*        IgnoreColor : 01     */
                                    /*              Color : 000000 */
                                    /*              Width : 0000   */
                                    /*             Height : 0000   */
                                    /*        UserVisible : 00     */
                                    /*               Dock : 00     */
                                    /*                Lid : 01     */
                                    /*              Panel : 04     */
                                    /*   VerticalPosition : 00     */
                                    /* HorizontalPosition : 01     */
                                    /*              Shape : 07     */
                                    /*   GroupOrientation : 00     */
                                    /*         GroupToken : 00     */
                                    /*      GroupPosition : 00     */
                                    /*                Bay : 00     */
                                    /*          Ejectable : 00     */
                                    /*  OspmEjectRequired : 00     */
                                    /*      CabinetNumber : 00     */
                                    /*     CardCageNumber : 00     */
                                    /*          Reference : 00     */
                                    /*           Rotation : 00     */
                                    /*              Order : 00     */
                                    /*     VerticalOffset : FFFF   */
                                    /*   HorizontalOffset : FFFF   */
                                }
                            })
                            Device (CAM1)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    Zero, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    Buffer (0x14)
                                    {
                                        /* 0000 */   0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */   0x24, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0010 */   0xFF, 0xFF, 0xFF, 0xFF
                                        /*           Revision : 02     */
                                        /*        IgnoreColor : 01     */
                                        /*              Color : 000000 */
                                        /*              Width : 0000   */
                                        /*             Height : 0000   */
                                        /*        UserVisible : 00     */
                                        /*               Dock : 00     */
                                        /*                Lid : 01     */
                                        /*              Panel : 04     */
                                        /*   VerticalPosition : 00     */
                                        /* HorizontalPosition : 01     */
                                        /*              Shape : 07     */
                                        /*   GroupOrientation : 00     */
                                        /*         GroupToken : 00     */
                                        /*      GroupPosition : 00     */
                                        /*                Bay : 00     */
                                        /*          Ejectable : 00     */
                                        /*  OspmEjectRequired : 00     */
                                        /*      CabinetNumber : 00     */
                                        /*     CardCageNumber : 00     */
                                        /*          Reference : 00     */
                                        /*           Rotation : 00     */
                                        /*              Order : 00     */
                                        /*     VerticalOffset : FFFF   */
                                        /*   HorizontalOffset : FFFF   */
                                    }
                                })
                            }

                            Device (CAM2)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    Zero, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    Buffer (0x14)
                                    {
                                        /* 0000 */   0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */   0x24, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0010 */   0xFF, 0xFF, 0xFF, 0xFF
                                        /*           Revision : 02     */
                                        /*        IgnoreColor : 01     */
                                        /*              Color : 000000 */
                                        /*              Width : 0000   */
                                        /*             Height : 0000   */
                                        /*        UserVisible : 00     */
                                        /*               Dock : 00     */
                                        /*                Lid : 01     */
                                        /*              Panel : 04     */
                                        /*   VerticalPosition : 00     */
                                        /* HorizontalPosition : 01     */
                                        /*              Shape : 07     */
                                        /*   GroupOrientation : 00     */
                                        /*         GroupToken : 00     */
                                        /*      GroupPosition : 00     */
                                        /*                Bay : 00     */
                                        /*          Ejectable : 00     */
                                        /*  OspmEjectRequired : 00     */
                                        /*      CabinetNumber : 00     */
                                        /*     CardCageNumber : 00     */
                                        /*          Reference : 00     */
                                        /*           Rotation : 00     */
                                        /*              Order : 00     */
                                        /*     VerticalOffset : FFFF   */
                                        /*   HorizontalOffset : FFFF   */
                                    }
                                })
                            }
                        }

                        Device (TSCN)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }
                    }
                }
            }

            Device (EHC3)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                OperationRegion (PCFG, PCI_Config, 0xA0, 0x04)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    OSOW,   32
                }

                Method (STOS, 0, NotSerialized)
                {
                    Or (OSOW, 0x01000000, OSOW)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    Store (RDEC (0xDA, 0x0C, 0x02, Local0, If (LEqual (Local0, Zero))
                            {
                                Store (0x03, Local0)
                            }, Else
                            {
                                Store (One, Local0)
                            }), WREC)
                    0xDA
                    0x0C
                    0x02
                    Local0
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Device (GHUB)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Device (PRT1)
                            {
                                Name (_ADR, One)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */   0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */   0x91, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
                                        /*           Revision : 01     */
                                        /*        IgnoreColor : 01     */
                                        /*              Color : 000000 */
                                        /*              Width : 0000   */
                                        /*             Height : 0000   */
                                        /*        UserVisible : 01     */
                                        /*               Dock : 00     */
                                        /*                Lid : 00     */
                                        /*              Panel : 02     */
                                        /*   VerticalPosition : 02     */
                                        /* HorizontalPosition : 00     */
                                        /*              Shape : 04     */
                                        /*   GroupOrientation : 00     */
                                        /*         GroupToken : 00     */
                                        /*      GroupPosition : 00     */
                                        /*                Bay : 00     */
                                        /*          Ejectable : 01     */
                                        /*  OspmEjectRequired : 01     */
                                        /*      CabinetNumber : 00     */
                                        /*     CardCageNumber : 00     */
                                        /*          Reference : 00     */
                                        /*           Rotation : 00     */
                                        /*              Order : 00     */
                                        /*     VerticalOffset : 0000   */
                                        /*   HorizontalOffset : 0000   */
                                    }
                                })
                            }

                            Device (PRT2)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */   0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */   0x91, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
                                        /*           Revision : 01     */
                                        /*        IgnoreColor : 01     */
                                        /*              Color : 000000 */
                                        /*              Width : 0000   */
                                        /*             Height : 0000   */
                                        /*        UserVisible : 01     */
                                        /*               Dock : 00     */
                                        /*                Lid : 00     */
                                        /*              Panel : 02     */
                                        /*   VerticalPosition : 02     */
                                        /* HorizontalPosition : 00     */
                                        /*              Shape : 04     */
                                        /*   GroupOrientation : 00     */
                                        /*         GroupToken : 00     */
                                        /*      GroupPosition : 00     */
                                        /*                Bay : 00     */
                                        /*          Ejectable : 01     */
                                        /*  OspmEjectRequired : 01     */
                                        /*      CabinetNumber : 00     */
                                        /*     CardCageNumber : 00     */
                                        /*          Reference : 00     */
                                        /*           Rotation : 00     */
                                        /*              Order : 00     */
                                        /*     VerticalOffset : 0000   */
                                        /*   HorizontalOffset : 0000   */
                                    }
                                })
                            }
                        }
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }
                }
            }

            Device (XHC0)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x03))
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    Store (RDEC (0xDA, 0x30, 0x04, Local0, If (LEqual (Local0, Zero))
                            {
                                Store (0x03, Local0)
                            }, Else
                            {
                                Store (One, Local0)
                            }), WREC)
                    0xDA
                    0x30
                    0x04
                    Local0
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    If (LEqual (And (USC1, One), One))
                    {
                        Store (One, ^^LPC0.U3DP)
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SBRV, PCI_Config, 0x08, 0x0100)
                Field (SBRV, AnyAcc, NoLock, Preserve)
                {
                    RVID,   8, 
                    Offset (0x0C), 
                    HPBS,   32, 
                    Offset (0x3B), 
                        ,   3, 
                    HIHP,   1, 
                    Offset (0x5A), 
                    I1F,    1, 
                    I12F,   1, 
                    Offset (0x7A), 
                        ,   2, 
                    G31O,   1, 
                    Offset (0xD9), 
                        ,   6, 
                    ACIR,   1
                }

                OperationRegion (ERMG, SystemMemory, 0xFED81500, 0x03FF)
                Field (ERMG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x38), 
                    Offset (0x3A), 
                    G66I,   1, 
                        ,   5, 
                    G66O,   1, 
                    G66E,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    G6FI,   1, 
                        ,   5, 
                    G6FO,   1, 
                    G6FE,   1, 
                    Offset (0x104), 
                    Offset (0x106), 
                    G50I,   1, 
                        ,   5, 
                    G50O,   1, 
                    G50E,   1, 
                    Offset (0x108), 
                    Offset (0x10A), 
                    G51I,   1, 
                        ,   5, 
                    G51O,   1, 
                    G51E,   1, 
                    Offset (0x110), 
                    Offset (0x112), 
                    G57I,   1, 
                        ,   5, 
                    G57O,   1, 
                    G57E,   1, 
                    Offset (0x118), 
                    Offset (0x11A), 
                    G59I,   1, 
                        ,   5, 
                    G59O,   1, 
                    G59E,   1
                }

                OperationRegion (ERMM, SystemMemory, 0xFED80000, 0x1000)
                Field (ERMM, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x200), 
                        ,   1, 
                    E01S,   1, 
                        ,   3, 
                    E05S,   1, 
                        ,   9, 
                    E15S,   1, 
                    E16S,   1, 
                        ,   4, 
                    E21S,   1, 
                    E22S,   1, 
                    Offset (0x204), 
                        ,   1, 
                    E01E,   1, 
                        ,   3, 
                    E05E,   1, 
                        ,   4, 
                    E10E,   1, 
                        ,   4, 
                    E15E,   1, 
                    E16E,   1, 
                        ,   5, 
                    E22E,   1, 
                    Offset (0x208), 
                        ,   1, 
                    E01C,   1, 
                        ,   3, 
                    E05C,   1, 
                        ,   4, 
                    E10C,   1, 
                        ,   4, 
                    E15C,   1, 
                    E16C,   1, 
                        ,   4, 
                    E21C,   1, 
                    E22C,   1, 
                    Offset (0x20C), 
                        ,   1, 
                    E01L,   1, 
                        ,   3, 
                    E05L,   1, 
                        ,   9, 
                    E15L,   1, 
                    E16L,   1, 
                        ,   5, 
                    E22L,   1, 
                    Offset (0x288), 
                        ,   1, 
                    CLPS,   1, 
                    Offset (0x299), 
                        ,   7, 
                    G15A,   1, 
                    Offset (0x2B0), 
                        ,   2, 
                    SLPS,   2, 
                    Offset (0x362), 
                        ,   6, 
                    MT3A,   1, 
                    Offset (0x377), 
                    EPNM,   1, 
                    DPPF,   1, 
                    Offset (0x3BB), 
                        ,   6, 
                    PWDE,   1, 
                    Offset (0x3BE), 
                        ,   5, 
                    ALLS,   1, 
                    Offset (0x3C8), 
                        ,   2, 
                    TFTE,   1, 
                    Offset (0x3DF), 
                    BLNK,   2, 
                    Offset (0x3F0), 
                    PHYD,   1, 
                    Offset (0x400), 
                    F0CT,   8, 
                    F0MS,   8, 
                    F0FQ,   8, 
                    F0LD,   8, 
                    F0MD,   8, 
                    F0MP,   8, 
                    LT0L,   8, 
                    LT0H,   8, 
                    MT0L,   8, 
                    MT0H,   8, 
                    HT0L,   8, 
                    HT0H,   8, 
                    LRG0,   8, 
                    LHC0,   8, 
                    Offset (0x410), 
                    F1CT,   8, 
                    F1MS,   8, 
                    F1FQ,   8, 
                    F1LD,   8, 
                    F1MD,   8, 
                    F1MP,   8, 
                    LT1L,   8, 
                    LT1H,   8, 
                    MT1L,   8, 
                    MT1H,   8, 
                    HT1L,   8, 
                    HT1H,   8, 
                    LRG1,   8, 
                    LHC1,   8, 
                    Offset (0x420), 
                    F2CT,   8, 
                    F2MS,   8, 
                    F2FQ,   8, 
                    F2LD,   8, 
                    F2MD,   8, 
                    F2MP,   8, 
                    LT2L,   8, 
                    LT2H,   8, 
                    MT2L,   8, 
                    MT2H,   8, 
                    HT2L,   8, 
                    HT2H,   8, 
                    LRG2,   8, 
                    LHC2,   8, 
                    Offset (0x430), 
                    F3CT,   8, 
                    F3MS,   8, 
                    F3FQ,   8, 
                    F3LD,   8, 
                    F3MD,   8, 
                    F3MP,   8, 
                    LT3L,   8, 
                    LT3H,   8, 
                    MT3L,   8, 
                    MT3H,   8, 
                    HT3L,   8, 
                    HT3H,   8, 
                    LRG3,   8, 
                    LHC3,   8, 
                    Offset (0xD07), 
                    MX07,   8, 
                    Offset (0xD0F), 
                    MX15,   8, 
                    MX16,   8, 
                    Offset (0xD15), 
                    MX21,   8, 
                    Offset (0xD1B), 
                    MX27,   8, 
                    MX28,   8, 
                    Offset (0xD20), 
                    MX32,   8, 
                    Offset (0xD2C), 
                    MX44,   8, 
                    Offset (0xD31), 
                    MX49,   8, 
                    Offset (0xD35), 
                    MX53,   8, 
                    Offset (0xD39), 
                    MX57,   8, 
                    MX58,   8, 
                    MX59,   8, 
                    Offset (0xD42), 
                    MX66,   8, 
                    Offset (0xD66), 
                    M102,   8, 
                    Offset (0xD6E), 
                    M110,   8, 
                    Offset (0xDAF), 
                    M175,   8, 
                    M176,   8, 
                    Offset (0xDB4), 
                    M180,   8, 
                    Offset (0xDB6), 
                    M182,   8, 
                    Offset (0xE02), 
                    MS02,   8, 
                    MS03,   8, 
                    MS04,   8, 
                    Offset (0xE40), 
                    MS40,   8, 
                    Offset (0xE81), 
                        ,   2, 
                    ECES,   1
                }

                OperationRegion (ERM1, SystemMemory, 0xFED80000, 0x1000)
                Field (ERM1, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x208), 
                        ,   1, 
                        ,   1, 
                        ,   3, 
                        ,   1, 
                        ,   9, 
                    Offset (0x20A), 
                        ,   1, 
                        ,   5, 
                        ,   1, 
                        ,   3, 
                    E26C,   1, 
                    Offset (0xD01), 
                    MX01,   8, 
                    Offset (0xD20), 
                    Offset (0xD21), 
                    MX33,   8, 
                    MX34,   8, 
                    Offset (0xD29), 
                    MX41,   8, 
                    Offset (0xDAA), 
                    M170,   8, 
                    Offset (0xDB4), 
                    Offset (0xDB5), 
                    M181,   8, 
                    Offset (0xDB7), 
                    Offset (0xDC7), 
                    M199,   8, 
                    Offset (0xE00), 
                    MS00,   8, 
                    MS01,   8
                }

                Mutex (SBX0, 0x00)
                OperationRegion (SMB0, SystemIO, 0x0B00, 0x10)
                Field (SMB0, ByteAcc, NoLock, Preserve)
                {
                    HST0,   8, 
                    SLV0,   8, 
                    CNT0,   8, 
                    CMD0,   8, 
                    ADD0,   8, 
                    DT00,   8, 
                    DT10,   8, 
                    BLK0,   8
                }

                Method (WBD0, 1, NotSerialized)
                {
                    Store (Arg0, Local0)
                    Store (Zero, Local2)
                    Store (HST0, Local3)
                    Store (And (Local3, 0x80), Local1)
                    While (LNotEqual (Local1, 0x80))
                    {
                        If (LLess (Local0, 0x0A))
                        {
                            Store (0x18, Local2)
                            Store (Zero, Local1)
                        }
                        Else
                        {
                            Sleep (0x0A)
                            Subtract (Local0, 0x0A, Local0)
                            Store (HST0, Local3)
                            Store (And (Local3, 0x80), Local1)
                        }
                    }

                    If (LNotEqual (Local2, 0x18))
                    {
                        Store (And (HST0, 0x1C), Local1)
                        If (Local1)
                        {
                            Store (0x07, Local2)
                        }
                    }

                    Return (Local2)
                }

                Method (WTC0, 1, NotSerialized)
                {
                    Store (Arg0, Local0)
                    Store (0x07, Local2)
                    Store (One, Local1)
                    While (LEqual (Local1, One))
                    {
                        Store (And (HST0, 0x1D), Local3)
                        If (LNotEqual (Local3, Zero))
                        {
                            If (LEqual (Local3, One))
                            {
                                If (LLess (Local0, 0x0A))
                                {
                                    Store (0x18, Local2)
                                    Store (Zero, Local1)
                                }
                                Else
                                {
                                    Sleep (0x0A)
                                    Subtract (Local0, 0x0A, Local0)
                                }
                            }
                            Else
                            {
                                Store (0x07, Local2)
                                Store (Zero, Local1)
                            }
                        }
                        Else
                        {
                            Store (Zero, Local2)
                            Store (Zero, Local1)
                        }
                    }

                    Store (Or (HST0, 0x1F), HST0)
                    Return (Local2)
                }

                Method (SBR0, 3, NotSerialized)
                {
                    Store (Package (0x03)
                        {
                            0x07, 
                            Zero, 
                            Zero
                        }, Local0)
                    Store (And (Arg0, 0x5F), Local4)
                    If (LNotEqual (Local4, 0x03))
                    {
                        If (LNotEqual (Local4, 0x05))
                        {
                            If (LNotEqual (Local4, 0x07))
                            {
                                If (LNotEqual (Local4, 0x09))
                                {
                                    If (LNotEqual (Local4, 0x0B))
                                    {
                                        Store (0x19, Index (Local0, Zero))
                                        Return (Local0)
                                    }
                                }
                            }
                        }
                    }

                    If (LEqual (Acquire (SBX0, 0xFFFF), Zero))
                    {
                        Store (Or (ShiftLeft (Arg1, One), One), ADD0)
                        Store (Arg2, CMD0)
                        Store (Or (HST0, 0x1F), HST0)
                        Store (And (Arg0, 0xA0), Local1)
                        Store (Or (And (CNT0, 0x5F), Local1), CNT0)
                        If (LEqual (Local4, 0x03))
                        {
                            Store (Or (And (CNT0, 0xA0), 0x40), CNT0)
                        }

                        If (LEqual (Local4, 0x05))
                        {
                            Store (Or (And (CNT0, 0xA0), 0x44), CNT0)
                        }

                        If (LEqual (Local4, 0x07))
                        {
                            Store (Or (And (CNT0, 0xA0), 0x48), CNT0)
                        }

                        If (LEqual (Local4, 0x09))
                        {
                            Store (Or (And (CNT0, 0xA0), 0x4C), CNT0)
                        }

                        If (LEqual (Local4, 0x0B))
                        {
                            Store (Or (HST0, 0x80), HST0)
                            Store (Zero, DT00)
                            Store (Or (And (CNT0, 0xA0), 0x54), CNT0)
                        }

                        Store (WTC0 (0x03E8), Local1)
                        Store (Local1, Index (Local0, Zero))
                        If (LEqual (Local1, Zero))
                        {
                            If (LEqual (Local4, 0x05))
                            {
                                Store (One, Index (Local0, One))
                                Store (DT00, Index (Local0, 0x02))
                            }

                            If (LEqual (Local4, 0x07))
                            {
                                Store (One, Index (Local0, One))
                                Store (DT00, Index (Local0, 0x02))
                            }

                            If (LEqual (Local4, 0x09))
                            {
                                Store (0x02, Index (Local0, One))
                                Store (DT10, Local2)
                                ShiftLeft (Local2, 0x08, Local2)
                                Add (Local2, DT00, Local2)
                                Store (Local2, Index (Local0, 0x02))
                            }

                            If (LEqual (Local4, 0x0B))
                            {
                                Store (WBD0 (0x01F4), Local1)
                                If (LNotEqual (Local1, Zero))
                                {
                                    Store (Local1, Index (Local0, Zero))
                                }
                                Else
                                {
                                    Store (DT00, Index (Local0, One))
                                    Store (DT00, Local1)
                                    Store (CNT0, Local2)
                                    Store (Zero, Local2)
                                    While (LLess (Local2, Local1))
                                    {
                                        Add (0x02, Local2, Local3)
                                        Store (BLK0, Index (Local0, Local3))
                                        Add (One, Local2, Local2)
                                    }

                                    Store (Or (HST0, 0x80), HST0)
                                }
                            }
                        }

                        Store (And (CNT0, 0x5F), CNT0)
                        Release (SBX0)
                    }

                    Return (Local0)
                }

                Method (SBW0, 5, NotSerialized)
                {
                    Store (Package (0x01)
                        {
                            0x07
                        }, Local0)
                    Store (And (Arg0, 0x5F), Local4)
                    If (LNotEqual (Local4, 0x02))
                    {
                        If (LNotEqual (Local4, 0x04))
                        {
                            If (LNotEqual (Local4, 0x06))
                            {
                                If (LNotEqual (Local4, 0x08))
                                {
                                    If (LNotEqual (Local4, 0x0A))
                                    {
                                        Store (0x19, Index (Local0, Zero))
                                        Return (Local0)
                                    }
                                }
                            }
                        }
                    }

                    If (LEqual (Acquire (SBX0, 0xFFFF), Zero))
                    {
                        Store (ShiftLeft (Arg1, One), ADD0)
                        Store (Arg2, CMD0)
                        Store (Or (HST0, 0x1F), HST0)
                        Store (And (Arg0, 0xA0), Local1)
                        Store (Or (And (CNT0, 0x5F), Local1), CNT0)
                        If (LEqual (Local4, 0x02))
                        {
                            Store (Or (And (CNT0, 0xA0), 0x40), CNT0)
                        }

                        If (LEqual (Local4, 0x04))
                        {
                            Store (Or (And (CNT0, 0xA0), 0x44), CNT0)
                        }

                        If (LEqual (Local4, 0x06))
                        {
                            Store (Arg4, DT00)
                            Store (Or (And (CNT0, 0xA0), 0x48), CNT0)
                        }

                        If (LEqual (Local4, 0x08))
                        {
                            And (Arg4, 0xFF, DT00)
                            ShiftRight (Arg4, 0x08, DT10)
                            Store (Or (And (CNT0, 0xA0), 0x4C), CNT0)
                        }

                        If (LEqual (Local4, 0x0A))
                        {
                            Store (Or (HST0, 0x80), HST0)
                            Store (CNT0, Local1)
                            Store (Arg3, DT00)
                            Store (Zero, Local2)
                            While (LLess (Local2, Arg3))
                            {
                                Store (Index (Arg4, Local2), BLK0)
                                Add (One, Local2, Local2)
                            }

                            Store (Or (And (CNT0, 0xA0), 0x54), CNT0)
                        }

                        Store (WTC0 (0x03E8), Index (Local0, Zero))
                        Store (And (CNT0, 0x5F), CNT0)
                        Release (SBX0)
                    }

                    Return (Local0)
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Mutex (PSMX, 0x00)
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00"))  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (LEqual (HPEN, One))
                        {
                            Return (BUF0)
                        }

                        Return (BUF1)
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100"))  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (LEqual (HPEN, One))
                        {
                            Return (BUF0)
                        }

                        Return (BUF1)
                    }
                }

                Device (KBC0)
                {
                    Name (_HID, EisaId ("TOS1101"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0303"))  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (PS2M)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If (LEqual (MID2, 0x04))
                        {
                            Return (0x5111F351)
                        }

                        Return (0x3003F351)
                    }

                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN1900"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13")
                    })
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQNoFlags ()
                            {12}
                    })
                }

                Device (SMB1)
                {
                    Name (_HID, "SMB0001")  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0B20,             // Range Minimum
                            0x0B20,             // Range Maximum
                            0x20,               // Alignment
                            0x20,               // Length
                            )
                        IRQ (Level, ActiveLow, Shared, )
                            {7}
                    })
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0068,             // Range Minimum
                            0x0068,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x006C,             // Range Minimum
                            0x006C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x077A,             // Range Minimum
                            0x077A,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        IO (Decode16,
                            0x0840,             // Range Minimum
                            0x0840,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01"))  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFF700000,         // Address Base
                            0x00010000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFF00000,         // Address Base
                            0x00100000,         // Address Length
                            _Y05)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y05._LEN, PSIZ)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y05._BAS, PBAS)  // _BAS: Base Address
                        Store (ROMS, PSIZ)
                        Subtract (ROMS, One, Local0)
                        Subtract (Ones, Local0, PBAS)
                        Return (MSRC)
                    }
                }

                OperationRegion (LCLM, SystemIO, 0x0C50, 0x03)
                Field (LCLM, ByteAcc, NoLock, Preserve)
                {
                    CLMI,   8, 
                    CLMD,   8, 
                    CLGP,   8
                }

                IndexField (CLMI, CLMD, ByteAcc, NoLock, Preserve)
                {
                    IDRG,   8, 
                    Offset (0x02), 
                    TSTS,   8, 
                    TINT,   8, 
                    Offset (0x12), 
                    I2CC,   8, 
                    GPIO,   8
                }

                Method (RGPM, 0, NotSerialized)
                {
                    Store (GPIO, Local0)
                    And (Local0, 0xFFFFFF3F, Local0)
                    Store (Local0, GPIO)
                    Store (CLGP, Local1)
                    Return (Local1)
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                Name (B5EN, Zero)
                Name (BA_5, Zero)
                Name (SBAR, 0xF2C6E000)
                OperationRegion (SATX, PCI_Config, Zero, 0x44)
                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    VIDI,   32, 
                    Offset (0x0A), 
                    STCL,   16, 
                    Offset (0x24), 
                    BA05,   32, 
                    Offset (0x40), 
                    WTEN,   1, 
                    Offset (0x42), 
                    DIS0,   1, 
                    DIS1,   1, 
                    DIS2,   1, 
                    DIS3,   1, 
                    DIS4,   1, 
                    DIS5,   1
                }

                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DISP,   6
                }

                Method (GBAA, 0, Serialized)
                {
                    Store (BA05, BA_5)
                    If (LOr (LEqual (BA_5, Ones), LNotEqual (STCL, 0x0101)))
                    {
                        Store (Zero, B5EN)
                        Return (SBAR)
                    }
                    Else
                    {
                        Store (One, B5EN)
                        Return (BA_5)
                    }
                }

                OperationRegion (BAR5, SystemMemory, GBAA (), 0x1000)
                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    NOPT,   5, 
                    Offset (0x0C), 
                    PTI0,   1, 
                    PTI1,   1, 
                    PTI2,   1, 
                    PTI3,   1, 
                    PTI4,   1, 
                    PTI5,   1, 
                    PTI6,   1, 
                    PTI7,   1, 
                    Offset (0x118), 
                    CST0,   1, 
                    Offset (0x120), 
                        ,   7, 
                    BSY0,   1, 
                    Offset (0x128), 
                    DET0,   4, 
                    Offset (0x129), 
                    IPM0,   4, 
                    Offset (0x12C), 
                    DDI0,   4, 
                    Offset (0x198), 
                    CST1,   1, 
                    Offset (0x1A0), 
                        ,   7, 
                    BSY1,   1, 
                    Offset (0x1A8), 
                    DET1,   4, 
                    Offset (0x1A9), 
                    IPM1,   4, 
                    Offset (0x1AC), 
                    DDI1,   4, 
                    Offset (0x218), 
                    CST2,   1, 
                    Offset (0x220), 
                        ,   7, 
                    BSY2,   1, 
                    Offset (0x228), 
                    DET2,   4, 
                    Offset (0x229), 
                    IPM2,   4, 
                    Offset (0x22C), 
                    DDI2,   4, 
                    Offset (0x298), 
                    CST3,   1, 
                    Offset (0x2A0), 
                        ,   7, 
                    BSY3,   1, 
                    Offset (0x2A8), 
                    DET3,   4, 
                    Offset (0x2A9), 
                    IPM3,   4, 
                    Offset (0x2AC), 
                    DDI3,   4, 
                    Offset (0x318), 
                    CST4,   1, 
                    Offset (0x320), 
                        ,   7, 
                    BSY4,   1, 
                    Offset (0x328), 
                    DET4,   4, 
                    Offset (0x329), 
                    IPM4,   4, 
                    Offset (0x32C), 
                    DDI4,   4, 
                    Offset (0x398), 
                    CST5,   1, 
                    Offset (0x3A0), 
                        ,   7, 
                    BSY5,   1, 
                    Offset (0x3A8), 
                    DET5,   4, 
                    Offset (0x3A9), 
                    IPM5,   4, 
                    Offset (0x3AC), 
                    DDI5,   4
                }

                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    PTI,    6
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    GBAA ()
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */   0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
                        /* 0008 */   0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
                        /* 0010 */   0x1F, 0x00, 0x00, 0x00
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Store (Arg0, SPTM)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If (LAnd (LOr (LGreaterEqual (TPOS, 0x40), LEqual (TPOS, 0x04)), 
                            B5EN))
                        {
                            If (IPM2)
                            {
                                Store (0x32, Local0)
                                While (LAnd (LEqual (BSY2, One), Local0))
                                {
                                    Sleep (0xFA)
                                    Decrement (Local0)
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If (LEqual (B5EN, Zero))
                            {
                                Return (Zero)
                            }

                            If (LEqual (DET0, 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If (LAnd (LAnd (LLess (TPOS, 0x40), LNotEqual (TPOS, 0x04)), 
                                B5EN))
                            {
                                Store (0x32, Local0)
                                While (LAnd (LEqual (BSY0, One), Local0))
                                {
                                    Sleep (0xFA)
                                    Decrement (Local0)
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Store (Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF
                                }, Local0)
                            Return (Local0)
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If (LEqual (B5EN, Zero))
                            {
                                Return (Zero)
                            }

                            If (LEqual (DET2, 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If (LAnd (LAnd (LLess (TPOS, 0x40), LNotEqual (TPOS, 0x04)), 
                                B5EN))
                            {
                                Store (0x32, Local0)
                                While (LAnd (LEqual (BSY2, One), Local0))
                                {
                                    Sleep (0xFA)
                                    Decrement (Local0)
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Store (Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF
                                }, Local0)
                            Return (Local0)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */   0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
                        /* 0008 */   0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
                        /* 0010 */   0x1F, 0x00, 0x00, 0x00
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Store (Arg0, SPTM)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If (LAnd (LOr (LGreaterEqual (TPOS, 0x40), LEqual (TPOS, 0x04)), 
                            B5EN))
                        {
                            If (IPM1)
                            {
                                Store (0x32, Local0)
                                While (LAnd (LEqual (BSY1, One), Local0))
                                {
                                    Sleep (0xFA)
                                    Decrement (Local0)
                                }
                            }

                            If (IPM3)
                            {
                                Store (0x32, Local0)
                                While (LAnd (LEqual (BSY3, One), Local0))
                                {
                                    Sleep (0xFA)
                                    Decrement (Local0)
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If (LEqual (B5EN, Zero))
                            {
                                Return (Zero)
                            }

                            If (LEqual (DET1, 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If (LAnd (LAnd (LLess (TPOS, 0x40), LNotEqual (TPOS, 0x04)), 
                                B5EN))
                            {
                                Store (0x32, Local0)
                                While (LAnd (LEqual (BSY1, One), Local0))
                                {
                                    Sleep (0xFA)
                                    Decrement (Local0)
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Store (Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF
                                }, Local0)
                            Return (Local0)
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If (LEqual (B5EN, Zero))
                            {
                                Return (Zero)
                            }

                            If (LEqual (DET3, 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If (LAnd (LAnd (LLess (TPOS, 0x40), LNotEqual (TPOS, 0x04)), 
                                B5EN))
                            {
                                Store (0x32, Local0)
                                While (LAnd (LEqual (BSY3, One), Local0))
                                {
                                    Sleep (0xFA)
                                    Decrement (Local0)
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Store (Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF
                                }, Local0)
                            Return (Local0)
                        }
                    }
                }

                Method (ENP, 2, NotSerialized)
                {
                    If (LEqual (Arg0, Zero))
                    {
                        Store (Not (Arg1), DIS0)
                    }
                    Else
                    {
                        If (LEqual (Arg0, One))
                        {
                            Store (Not (Arg1), DIS1)
                        }
                        Else
                        {
                            If (LEqual (Arg0, 0x02))
                            {
                                Store (Not (Arg1), DIS2)
                            }
                            Else
                            {
                                If (LEqual (Arg0, 0x03))
                                {
                                    Store (Not (Arg1), DIS3)
                                }
                                Else
                                {
                                    If (LEqual (Arg0, 0x04))
                                    {
                                        Store (Not (Arg1), DIS4)
                                    }
                                    Else
                                    {
                                        If (LEqual (Arg0, 0x05))
                                        {
                                            Store (Not (Arg1), DIS5)
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Store (One, WTEN)
                    If (LEqual (Arg0, Zero))
                    {
                        Store (Arg1, PTI0)
                    }
                    Else
                    {
                        If (LEqual (Arg0, One))
                        {
                            Store (Arg1, PTI1)
                        }
                        Else
                        {
                            If (LEqual (Arg0, 0x02))
                            {
                                Store (Arg1, PTI2)
                            }
                            Else
                            {
                                If (LEqual (Arg0, 0x03))
                                {
                                    Store (Arg1, PTI3)
                                }
                                Else
                                {
                                    If (LEqual (Arg0, 0x04))
                                    {
                                        Store (Arg1, PTI4)
                                    }
                                    Else
                                    {
                                        If (LEqual (Arg0, 0x05))
                                        {
                                            Store (Arg1, PTI5)
                                        }
                                    }
                                }
                            }
                        }
                    }

                    If (LEqual (DISP, 0x3F))
                    {
                        Store (One, PTI0)
                    }
                    Else
                    {
                        If (LAnd (DIS0, XOr (And (DISP, 0x3E), 0x3E)))
                        {
                            Store (Zero, PTI0)
                        }
                    }

                    Store (PTI, Local0)
                    Store (Zero, Local1)
                    While (Local0)
                    {
                        If (And (Local0, One))
                        {
                            Increment (Local1)
                        }

                        ShiftRight (Local0, One, Local0)
                    }

                    Store (Decrement (Local1), NOPT)
                    Store (Zero, WTEN)
                }
            }

            Device (IDE)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x5A, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    Zero, 
                    Zero
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    Zero
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    Zero
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, WordAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Store (And (Arg0, 0x0F), Local0)
                    Store (ShiftRight (Arg0, 0x04), Local1)
                    Return (Multiply (0x1E, Add (Add (Local0, One), Add (Local1, 
                        One))))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, PIT1)
                    CreateByteField (Arg0, One, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        /* 0008 */   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        /* 0010 */   0x00, 0x00, 0x00, 0x00
                    })
                    CreateDWordField (BUF, Zero, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If (And (PICX, One))
                    {
                        Return (BUF)
                    }

                    Store (GETT (PIT0), PIO0)
                    Store (GETT (PIT1), PIO1)
                    If (And (UDCX, One))
                    {
                        Or (FLAG, One, FLAG)
                        Store (DerefOf (Index (UDMT, And (UDMX, 0x0F))), DMA0)
                    }
                    Else
                    {
                        If (LNotEqual (MDT0, 0xFF))
                        {
                            Store (GETT (MDT0), DMA0)
                        }
                    }

                    If (And (UDCX, 0x02))
                    {
                        Or (FLAG, 0x04, FLAG)
                        Store (DerefOf (Index (UDMT, ShiftRight (UDMX, 0x04))), DMA1)
                    }
                    Else
                    {
                        If (LNotEqual (MDT1, 0xFF))
                        {
                            Store (GETT (MDT1), DMA1)
                        }
                    }

                    Or (FLAG, 0x1A, FLAG)
                    Return (BUF)
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, Zero, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00
                    })
                    CreateByteField (BUF, Zero, PIT1)
                    CreateByteField (BUF, One, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Store (Match (PIOT, MLE, PIO0, MTR, Zero, Zero), Local0)
                    Divide (Local0, 0x05, Local0)
                    Store (Match (PIOT, MLE, PIO1, MTR, Zero, Zero), Local1)
                    Divide (Local1, 0x05, Local1)
                    Store (Or (ShiftLeft (Local1, 0x04), Local0), PIMX)
                    Store (DerefOf (Index (PITR, Local0)), PIT0)
                    Store (DerefOf (Index (PITR, Local1)), PIT1)
                    If (And (FLAG, One))
                    {
                        Store (Match (UDMT, MLE, DMA0, MTR, Zero, Zero), Local0)
                        Divide (Local0, 0x06, Local0)
                        Or (UDMX, Local0, UDMX)
                        Or (UDCX, One, UDCX)
                    }
                    Else
                    {
                        If (LNotEqual (DMA0, Ones))
                        {
                            Store (Match (MDMT, MLE, DMA0, MTR, Zero, Zero), Local0)
                            Store (DerefOf (Index (MDTR, Local0)), MDT0)
                        }
                    }

                    If (And (FLAG, 0x04))
                    {
                        Store (Match (UDMT, MLE, DMA1, MTR, Zero, Zero), Local0)
                        Divide (Local0, 0x06, Local0)
                        Or (UDMX, ShiftLeft (Local0, 0x04), UDMX)
                        Or (UDCX, 0x02, UDCX)
                    }
                    Else
                    {
                        If (LNotEqual (DMA1, Ones))
                        {
                            Store (Match (MDMT, MLE, DMA1, MTR, Zero, Zero), Local0)
                            Store (DerefOf (Index (MDTR, Local0)), MDT1)
                        }
                    }

                    Return (BUF)
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, Zero, MDT1)
                    CreateByteField (Arg1, One, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If (LEqual (Arg0, 0xA0))
                    {
                        Store (And (PIMX, 0x0F), Local0)
                        Store (MDT0, Local1)
                        And (UDCX, One, Local2)
                        Store (And (UDMX, 0x0F), Local3)
                    }
                    Else
                    {
                        Store (ShiftRight (PIMX, 0x04), Local0)
                        Store (MDT1, Local1)
                        And (UDCX, 0x02, Local2)
                        Store (ShiftRight (UDMX, 0x04), Local3)
                    }

                    Name (BUF, Buffer (0x0E)
                    {
                        /* 0000 */   0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,
                        /* 0008 */   0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF
                    })
                    CreateByteField (BUF, One, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    Store (Arg0, CMDA)
                    Store (Arg0, CMDB)
                    Or (Local0, 0x08, PMOD)
                    If (Local2)
                    {
                        Or (Local3, 0x40, DMOD)
                    }
                    Else
                    {
                        If (LNotEqual (Local1, 0xFF))
                        {
                            Store (Match (MDMT, MLE, GETT (Local1), MTR, Zero, Zero), Local4)
                            If (LLess (Local4, 0x03))
                            {
                                Or (0x20, Local4, DMOD)
                            }
                        }
                    }

                    Return (BUF)
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        Store (PPIT, VPIT)
                        Store (PMDT, VMDT)
                        Store (PPIC, VPIC)
                        Store (PUDC, VUDC)
                        Store (PUDM, VUDM)
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        Store (STM (Arg0, Arg1, Arg2), BUF)
                        Store (VPIT, PPIT)
                        Store (VMDT, PMDT)
                        Store (VPIM, PPIM)
                        Store (VUDC, PUDC)
                        Store (VUDM, PUDM)
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            Store (PMDT, VMDT)
                            Store (PPIM, VPIM)
                            Store (PUDC, VUDC)
                            Store (PUDM, VUDM)
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            Store (PMDT, VMDT)
                            Store (PPIM, VPIM)
                            Store (PUDC, VUDC)
                            Store (PUDM, VUDM)
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        Store (SPIT, VPIT)
                        Store (SMDT, VMDT)
                        Store (SPIC, VPIC)
                        Store (SUDC, VUDC)
                        Store (SUDM, VUDM)
                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        Store (STM (Arg0, Arg1, Arg2), BUF)
                        Store (VPIT, SPIT)
                        Store (VMDT, SMDT)
                        Store (VPIM, SPIM)
                        Store (VUDC, SUDC)
                        Store (VUDM, SUDM)
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            Store (SMDT, VMDT)
                            Store (SPIM, VPIM)
                            Store (SUDC, VUDC)
                            Store (SUDM, VUDM)
                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            Store (SMDT, VMDT)
                            Store (SPIM, VPIM)
                            Store (SUDC, VUDC)
                            Store (SUDM, VUDM)
                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }
        }

        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x10), 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x30), 
            USB1,   8, 
            USB2,   8, 
            USB3,   8, 
            USB4,   8, 
            USB5,   8, 
            USB6,   8, 
            USB7,   8, 
            Offset (0x40), 
            IDE,    8, 
            SATA,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Store (PD64, Local1)
            Store (0x1F, PIRE)
            Store (0x1F, PIRF)
            Store (0x1F, PIRG)
            Store (0x1F, PIRH)
        }

        Method (INTA, 1, NotSerialized)
        {
            Store (Arg0, PIRA)
            If (PICM)
            {
                Store (Arg0, HDAD)
            }
        }

        Method (INTB, 1, NotSerialized)
        {
            Store (Arg0, PIRB)
            If (PICM)
            {
                Store (Arg0, USB2)
                Store (Arg0, USB4)
                Store (Arg0, USB6)
                Store (Arg0, IDE)
            }
        }

        Method (INTC, 1, NotSerialized)
        {
            Store (Arg0, PIRC)
            If (PICM)
            {
                Store (Arg0, USB1)
                Store (Arg0, USB3)
                Store (Arg0, USB5)
                Store (Arg0, USB7)
            }
        }

        Method (INTD, 1, NotSerialized)
        {
            Store (Arg0, PIRD)
            If (PICM)
            {
                Store (Arg0, SATA)
            }
        }

        Name (PRS1, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,7,10,11,12,14,15}
        })
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                ShiftLeft (One, PIRA, IRQX)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRA)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                ShiftLeft (One, PIRB, IRQX)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRB)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                ShiftLeft (One, PIRC, IRQX)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRC)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                ShiftLeft (One, PIRD, IRQX)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRD)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Store (0x1F, PIRE)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                ShiftLeft (One, PIRE, IRQX)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRE)
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Store (0x1F, PIRF)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                ShiftLeft (One, PIRF, IRQX)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRF)
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Store (0x1F, PIRG)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                ShiftLeft (One, PIRG, IRQX)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRG)
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Store (0x1F, PIRH)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                ShiftLeft (One, PIRH, IRQX)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRH)
            }
        }

        Method (GSMI, 1, NotSerialized)
        {
            Store (Arg0, APMD)
            Store (0xE4, APMC)
            Sleep (0x02)
        }

        Method (S80H, 1, NotSerialized)
        {
            Store (Arg0, IO80)
        }

        Method (BSMI, 1, NotSerialized)
        {
            Store (Arg0, APMD)
            Store (0xBE, APMC)
            Sleep (One)
        }

        Method (OSMI, 1, NotSerialized)
        {
            Store (Arg0, APMD)
            Store (0xBA, APMC)
            Sleep (One)
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : C0
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]                 FACS Address : 9FB5F000
[028h 0040   4]                 DSDT Address : 9FBF2000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000800
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0064
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000085AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000000000B0

[080h 0128   1]         Value to cause reset : FB
[081h 0129   3]                     Reserved : 000000
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 000000009FBF2000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 03 [DWord Access:32]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000800

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 04 [QWord Access:64]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000


Raw Table Data: Length 268 (0x10C)

  0000: 46 41 43 50 0C 01 00 00 05 C0 54 4F 53 49 4E 56  FACP......TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 00 F0 B5 9F 00 20 BF 9F 00 02 09 00  ......... ......
  0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  ................
  0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  ................
  0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00   ...............
  0060: 64 00 E9 03 00 00 00 00 01 03 0D 00 00 03 00 00  d...............
  0070: AD 85 00 00 01 08 00 01 B0 00 00 00 00 00 00 00  ................
  0080: FB 00 00 00 00 00 00 00 00 00 00 00 00 20 BF 9F  ............. ..
  0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  ..... ..........
  00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  ................
  00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  ................
  00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 04  . ...........@..
  00E0: 20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ...............
  00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0100: 00 00 00 00 00 00 00 00 00 00 00 00              ............


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00084939
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 39 49 08 00 00 00 00 00  FACS@...9I......
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BA
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]                    Reset End : 000000009FBEFF98
**** ACPI table terminates in the middle of a data structure!

Raw Table Data: Length 68 (0x44)

  0000: 46 50 44 54 44 00 00 00 01 BA 54 4F 53 49 4E 56  FPDTD.....TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 00 00 10 01 00 00 00 00 98 FF BE 9F  ................
  0030: 00 00 00 00 01 00 10 01 00 00 00 00 18 FF BE 9F  ................
  0040: 00 00 00 00                                      ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 3C
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]            Hardware Block ID : 10228210

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 3C 54 4F 53 49 4E 56  HPET8....<TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 10 82 22 10 00 00 00 00 00 00 D0 FE  ......".........
  0030: 00 00 00 00 00 80 00 00                          ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 27
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 27 54 4F 53 49 4E 56  MCFG<....'TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 F8  ................
  0030: 00 00 00 00 00 00 00 3F 00 00 00 00              .......?....


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 66
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000


**** Unknown ACPI table type [MSDM]


Raw Table Data: Length 85 (0x55)

  0000: 4D 53 44 4D 55 00 00 00 03 66 54 4F 53 49 4E 56  MSDMU....fTOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00  ................
  0030: 00 00 00 00 1D 00 00 00 56 4D 46 4E 52 2D 48 38  ........VMFNR-H8
  0040: 4B 48 50 2D 46 52 44 39 36 2D 36 47 4A 54 34 2D  KHP-FRD96-6GJT4-
  0050: 44 4A 59 38 51                                   DJY8Q


RSDP
----
[000h 0000   8]                    Signature : "RSD PTR "
[008h 0008   1]                     Checksum : 6D
[009h 0009   6]                       Oem ID : "TOSINV"
[00Fh 0015   1]                     Revision : 02
[010h 0016   4]                 RSDT Address : 9FBC70C4
[014h 0020   4]                       Length : 00000024
[018h 0024   8]                 XSDT Address : 000000009FBC7188
[020h 0032   1]            Extended Checksum : 88
[021h 0033   3]                     Reserved : 000000

Raw Table Data: Length 36 (0x24)

  0000: 52 53 44 20 50 54 52 20 6D 54 4F 53 49 4E 56 02  RSD PTR mTOSINV.
  0010: C4 70 BC 9F 24 00 00 00 88 71 BC 9F 00 00 00 00  .p..$....q......
  0020: 88 00 00 00                                      ....


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 00000078
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 54
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]       ACPI Table Address   0 : 9FBFC000
[028h 0040   4]       ACPI Table Address   1 : 9FBFD000
[02Ch 0044   4]       ACPI Table Address   2 : 9FBFB000
[030h 0048   4]       ACPI Table Address   3 : 9FBFA000
[034h 0052   4]       ACPI Table Address   4 : 9FBF9000
[038h 0056   4]       ACPI Table Address   5 : 9FBF8000
[03Ch 0060   4]       ACPI Table Address   6 : 9FBF1000
[040h 0064   4]       ACPI Table Address   7 : 9FBF0000
[044h 0068   4]       ACPI Table Address   8 : 9FBEE000
[048h 0072   4]       ACPI Table Address   9 : 9FBED000
[04Ch 0076   4]       ACPI Table Address  10 : 9FBE6000
[050h 0080   4]       ACPI Table Address  11 : 9FBE5000
[054h 0084   4]       ACPI Table Address  12 : 9FBE0000
[058h 0088   4]       ACPI Table Address  13 : 9FBD1000
[05Ch 0092   4]       ACPI Table Address  14 : 9FBD0000
[060h 0096   4]       ACPI Table Address  15 : 9FBCF000
[064h 0100   4]       ACPI Table Address  16 : 9FBCD000
[068h 0104   4]       ACPI Table Address  17 : 9FBCC000
[06Ch 0108   4]       ACPI Table Address  18 : 9FBCA000
[070h 0112   4]       ACPI Table Address  19 : 9FBC8000
[074h 0116   4]       ACPI Table Address  20 : 9FBC9000

Raw Table Data: Length 120 (0x78)

  0000: 52 53 44 54 78 00 00 00 01 54 54 4F 53 49 4E 56  RSDTx....TTOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 20 20 20 20  TOSINV00....    
  0020: 13 00 00 01 00 C0 BF 9F 00 D0 BF 9F 00 B0 BF 9F  ................
  0030: 00 A0 BF 9F 00 90 BF 9F 00 80 BF 9F 00 10 BF 9F  ................
  0040: 00 00 BF 9F 00 E0 BE 9F 00 D0 BE 9F 00 60 BE 9F  .............`..
  0050: 00 50 BE 9F 00 00 BE 9F 00 10 BD 9F 00 00 BD 9F  .P..............
  0060: 00 F0 BC 9F 00 D0 BC 9F 00 C0 BC 9F 00 A0 BC 9F  ................
  0070: 00 80 BC 9F 00 90 BC 9F                          ........


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : FF
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000


[024h 0036   4]                Subtable Type : 00000000 [Public Key Structure]
[028h 0040   4]                       Length : 0000009C

[02Ch 0044   1]                     Key Type : 06
[02Dh 0045   1]                      Version : 02
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]                    Algorithm : 00002400
[034h 0052   4]                        Magic : "RSA1"
[038h 0056   4]                    BitLength : 00000400
[03Ch 0060   4]                     Exponent : 00010001
[040h 0064 128]                      Modulus : 01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE \
                                               E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53 \
                                               39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60 \
                                               A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC \
                                               1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90 \
                                               F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B \
                                               00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A \
                                               56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5

[0C0h 0192   4]                Subtable Type : 00000001 [Windows Marker Structure]
[0C4h 0196   4]                       Length : 000000B6

[0C8h 0200   4]                      Version : 00020000
[0CCh 0204   6]                       Oem ID : "TOSINV"
[0D2h 0210   8]                 Oem Table ID : "TOSINV00"
[0DAh 0218   8]                 Windows Flag : "WINDOWS "
[0E2h 0226   4]                 SLIC Version : 00020001
[0E6h 0230  16]                     Reserved : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[0F6h 0246 128]                    Signature : A0 C3 64 30 F3 3B BF 3D 6E C4 7A F1 66 D8 33 89 \
                                               77 3C D4 04 A2 AF 4A D4 AB 12 8D E3 6A D7 0D 6D \
                                               53 C4 79 13 EB B6 20 D1 A3 16 7B 08 B7 C5 E0 C2 \
                                               C8 6A 3F 7B 58 69 31 0C 97 49 C3 92 72 42 C4 0C \
                                               DC 2D BA F4 38 60 4C 3D D0 D2 20 9E 4C 5C 3A E6 \
                                               8B 15 3D 95 D2 3E 4E F7 AE 5F 34 B5 28 05 97 A9 \
                                               21 DF 51 58 F9 57 9C DF 99 E9 92 2C 7C CA 63 D0 \
                                               1D 62 F7 8C 8D 7A 1E 8D 9F 18 30 B0 45 0D F9 FA

Raw Table Data: Length 374 (0x176)

  0000: 53 4C 49 43 76 01 00 00 01 FF 54 4F 53 49 4E 56  SLICv.....TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00  ................
  0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  .$..RSA1........
  0040: 01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE  ......Ve .<.....
  0050: E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53  ...E.kr.E.)....S
  0060: 39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60  9.%............`
  0070: A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC  .rG....?`.......
  0080: 1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90  .n..}.._ZQ.h..=.
  0090: F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B  ..4....}..RL.c.k
  00A0: 00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A  .....o5.z...O).j
  00B0: 56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5  V..E..7..K.S[<..
  00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 54 4F 53 49  ............TOSI
  00D0: 4E 56 54 4F 53 49 4E 56 30 30 57 49 4E 44 4F 57  NVTOSINV00WINDOW
  00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  S ..............
  00F0: 00 00 00 00 00 00 A0 C3 64 30 F3 3B BF 3D 6E C4  ........d0.;.=n.
  0100: 7A F1 66 D8 33 89 77 3C D4 04 A2 AF 4A D4 AB 12  z.f.3.w<....J...
  0110: 8D E3 6A D7 0D 6D 53 C4 79 13 EB B6 20 D1 A3 16  ..j..mS.y... ...
  0120: 7B 08 B7 C5 E0 C2 C8 6A 3F 7B 58 69 31 0C 97 49  {......j?{Xi1..I
  0130: C3 92 72 42 C4 0C DC 2D BA F4 38 60 4C 3D D0 D2  ..rB...-..8`L=..
  0140: 20 9E 4C 5C 3A E6 8B 15 3D 95 D2 3E 4E F7 AE 5F   .L\:...=..>N.._
  0150: 34 B5 28 05 97 A9 21 DF 51 58 F9 57 9C DF 99 E9  4.(...!.QX.W....
  0160: 92 2C 7C CA 63 D0 1D 62 F7 8C 8D 7A 1E 8D 9F 18  .,|.c..b...z....
  0170: 30 B0 45 0D F9 FA                                0.E...


SSDT1
-----
DefinitionBlock ("ssdt1.aml", "SSDT", 1, "TOSINV", "TsbOdm", 0x00001000)
{

    External (_PR_.C000)
    External (_PR_.C001)
    External (_PR_.C002)
    External (_PR_.C003)
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPC0, DeviceObj)
    External (_SB_.PCI0.VGA_.DFP1)
    External (_SB_.PCI0.VGA_.LCD_)
    External (OGNS, OpRegionObj)
    External (P80H)
    External (PSMI, OpRegionObj)

    Scope (\_SB)
    {
        Field (PSMI, ByteAcc, NoLock, Preserve)
        {
            APMC,   8, 
            APMD,   8
        }

        Field (OGNS, AnyAcc, Lock, Preserve)
        {
            EGPO,   8, 
            BTBE,   8, 
            WBEN,   8, 
            OG03,   8, 
            PBAR,   8, 
            OG05,   8, 
            OG06,   8, 
            OG07,   8, 
            OG08,   8, 
            OG09,   8, 
            OG10,   8, 
            Offset (0x14), 
            ACPS,   8, 
            CPUS,   8, 
            CPUL,   8, 
            ECRO,   8, 
            ECRM,   8, 
            ECRS,   8, 
            ECRD,   8, 
            Offset (0x1C), 
            EGST,   8, 
            LCDS,   4, 
            CECS,   1, 
            CECP,   1, 
            HDMI,   1, 
            HKMD,   1, 
            TSBK,   1, 
            SDAT,   1, 
            DCIR,   1, 
            DBTN,   2, 
            HKEM,   1, 
            HSEM,   1, 
            IECC,   1, 
            HSWK,   8, 
            LCMD,   8, 
            SVCF,   8, 
            SWB0,   32, 
            SWB1,   32, 
            SWB2,   32, 
            SWB3,   32, 
            SWB4,   32, 
            SWB5,   32, 
            SWB6,   32, 
            SWB7,   32, 
            KYB0,   32, 
            Offset (0x62), 
            IEC0,   8, 
            IEC1,   8, 
            IEC2,   8, 
            CECC,   8, 
            CECE,   32, 
            CECI,   16, 
            CECZ,   8, 
            CECF,   8, 
            CEC1,   32, 
            CEC2,   32, 
            CEC3,   32, 
            CEC4,   32, 
            CEC5,   32, 
            LENA,   8, 
            LENB,   8, 
            LENC,   8, 
            LENE,   8, 
            LEND,   8, 
            IFNK,   1024, 
            ICMD,   4096, 
            RESL,   32, 
            RESV,   16, 
            USC1,   32, 
            USC2,   32, 
            VGAM,   8, 
            USBM,   32, 
            TPID,   8, 
            NODD,   8, 
            IHDD,   8, 
            TJET,   8, 
            CPUM,   8, 
            POLI,   8, 
            TCCR,   8, 
            TEST,   8, 
            LCDC,   8, 
            PWM0,   8, 
            PWM1,   8, 
            PWM2,   8, 
            PWM3,   8, 
            PWM4,   8, 
            PWM5,   8, 
            PWM6,   8, 
            PWM7,   8, 
            EJLL,   8, 
            EJLR,   8, 
            OSYS,   16, 
            PNID,   8, 
            VGAN,   8, 
            CLMT,   8, 
            SCFG,   8, 
            FKRG,   8, 
            HFMF,   8, 
            HYBT,   8, 
            SKEY,   8, 
            UCSP,   8, 
            HSFN,   8, 
            HSP0,   8, 
            HSP1,   8, 
            HSP2,   8, 
            HSP3,   8, 
            HSP4,   8, 
            HSP5,   8, 
            HSP6,   8, 
            HSP7,   8, 
            HSP8,   8, 
            HSP9,   8, 
            HSPA,   8, 
            HSPB,   8, 
            HSS0,   8, 
            HSBD,   32, 
            HSDB,   32, 
            HSSS,   8, 
            LPSW,   8, 
            MID2,   8, 
            CLMX,   8, 
            CDPM,   8, 
            RSDA,   32, 
            MSDA,   32, 
            SMEP,   32, 
            SMTA,   32, 
            ITLK,   32, 
            DMIS,   32, 
            TPNO,   16, 
            STNO,   8, 
            Offset (0x36F), 
            Offset (0x375), 
            DMIF,   16, 
            Offset (0x37F), 
            WDMI,   8192, 
            TDMI,   24, 
            LADR,   32, 
            LBSZ,   8, 
            LRES,   32, 
            LHDR,   32, 
            LFUN,   8, 
            PLDN,   8, 
            PLRM,   8, 
            PLD1,   32, 
            PLD2,   32, 
            TLDM,   8, 
            PLRV,   8
        }

        Field (OGNS, AnyAcc, Lock, Preserve)
        {
            Offset (0x42), 
            KYBF,   8, 
            KYBA,   248, 
            Offset (0x107), 
            CMGA,   480, 
            CMGB,   832, 
            CMGC,   1312, 
            CMGD,   832, 
            CCGD,   608
        }

        Field (OGNS, AnyAcc, Lock, Preserve)
        {
            Offset (0x22), 
            SWBF,   256, 
            KYBB,   256, 
            Offset (0x87), 
            F0CM,   8, 
            JFNK,   224, 
            CYCC,   16, 
            BTV1,   32, 
            BTV2,   32, 
            ILLU,   8, 
            MFNO,   8, 
            MBF1,   32, 
            MBF2,   32, 
            MBF3,   32, 
            MBF4,   32
        }

        Mutex (MUTS, 0x00)
        Mutex (MUTE, 0x00)
        Name (PWBS, Zero)
        Name (ACBS, Zero)
        Name (ACBW, Zero)
        Name (FKMS, 0xFF)
        Name (FTBT, Zero)
        Name (FBHK, Zero)
        Name (ILAN, Zero)
        Name (USBT, Zero)
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C"))  // _HID: Hardware ID
        }

        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D"))  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (\_SB.RDEC (0x92, One, Zero))
                {
                    If (LNot (LOr (LLess (OSYS, 0x07D6), LEqual (OSYS, 0x07D8))))
                    {
                        Notify (\_SB.VALZ, 0x8F)
                    }

                    Return (Zero)
                }

                Return (One)
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x1A, 
                0x04
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                \_SB.WREC (0xB6, One, Zero, Arg0)
            }
        }

        Method (RDEC, 3, Serialized)
        {
            Acquire (MUTE, 0xFFFF)
            Store (Arg0, ECRO)
            Store (Arg1, ECRM)
            Store (Arg2, ECRS)
            FLNK (0xFF, 0x0E)
            Store (ECRD, Local0)
            Release (MUTE)
            Return (Local0)
        }

        Method (WREC, 4, Serialized)
        {
            Acquire (MUTE, 0xFFFF)
            Store (Arg0, ECRO)
            Store (Arg1, ECRM)
            Store (Arg2, ECRS)
            Store (Arg3, ECRD)
            FLNK (0xFF, 0x0F)
            Release (MUTE)
        }

        Method (FLNK, 2, Serialized)
        {
            If (LEqual (IECC, Zero))
            {
                Add (IEC2, 0x03, IEC2)
                Decrement (IEC1)
                Subtract (IEC0, 0x0B, IEC0)
                Store (One, IECC)
            }

            If (LEqual (Arg0, 0xFF))
            {
                Store (Arg1, SVCF)
            }
            Else
            {
                Store (Arg1, SWB0)
            }

            Store (Arg0, LCMD)
            Store (0xFF, APMD)
            Store (0xE3, APMC)
            Return (And (SWB0, 0xFF))
        }

        Device (\_SB.FWEX)
        {
            Name (_HID, "TOS1901")  // _HID: Hardware ID
            Method (FWES, 1, NotSerialized)
            {
                Acquire (MUTS, 0xFFFF)
                Name (FWEB, Buffer (0x20) {})
                Store (DerefOf (Index (Arg0, Zero)), Local4)
                Store (Zero, Local7)
                If (LEqual (Local4, One))
                {
                    If (\_SB.PCI0.LPC0.ECOK)
                    {
                        Store (\_SB.PCI0.LPC0.RCPU, Index (FWEB, Zero))
                        Store (\_SB.PCI0.LPC0.VGAT, Index (FWEB, One))
                        Store (\_SB.PCI0.LPC0.LRPM, Index (FWEB, 0x02))
                        Store (\_SB.PCI0.LPC0.HRPM, Index (FWEB, 0x03))
                        Store (Zero, Index (FWEB, 0x04))
                        Store (Zero, Index (FWEB, 0x05))
                        Store (\_SB.RDEC (0xA0, 0xFF, Zero), Index (FWEB, 0x06))
                    }

                    Release (MUTS)
                    Return (FWEB)
                }

                If (LEqual (Local4, 0x81))
                {
                    Store (DerefOf (Index (Arg0, One)), Local0)
                    If (LEqual (Local0, 0xFF))
                    {
                        Store (\_SB.PCI0.LPC0.EVCT, Local0)
                        Store (Local0, Index (FWEB, Zero))
                        Release (MUTS)
                        Return (FWEB)
                    }
                    Else
                    {
                        If (LEqual (Local0, 0xFE))
                        {
                            Store (\_SB.PCI0.LPC0.FKST, Local0)
                            Store (Local0, Index (FWEB, Zero))
                            Release (MUTS)
                            Return (FWEB)
                        }
                        Else
                        {
                            Store (One, Local7)
                        }
                    }
                }

                Store (0x20, Local0)
                Store (One, Local1)
                Store (Zero, Local3)
                While (Local0)
                {
                    Store (ShiftLeft (DerefOf (Index (Arg0, Local1)), 0x18), Local2)
                    Add (And (ShiftRight (Local3, 0x08), 0x00FFFFFF), Local2, Local3)
                    If (LEqual (Local1, 0x04))
                    {
                        Store (Local3, Local5)
                        Store (Local3, SWB0)
                    }
                    Else
                    {
                        If (LEqual (Local1, 0x08))
                        {
                            Store (Local3, SWB1)
                        }
                        Else
                        {
                            If (LEqual (Local1, 0x0C))
                            {
                                Store (Local3, SWB2)
                            }
                            Else
                            {
                                If (LEqual (Local1, 0x10))
                                {
                                    Store (Local3, SWB3)
                                }
                                Else
                                {
                                    If (LEqual (Local1, 0x14))
                                    {
                                        Store (Local3, SWB4)
                                    }
                                    Else
                                    {
                                        If (LEqual (Local1, 0x18))
                                        {
                                            Store (Local3, SWB5)
                                        }
                                        Else
                                        {
                                            If (LEqual (Local1, 0x1C))
                                            {
                                                Store (Local3, SWB6)
                                            }
                                            Else
                                            {
                                                If (LEqual (Local1, 0x20))
                                                {
                                                    Store (Local3, SWB7)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Decrement (Local0)
                    Add (Local1, One, Local1)
                }

                If (LEqual (Local7, One))
                {
                    Store (0x11, Local4)
                    Store (\_SB.PCI0.LPC0.EVCT, Local5)
                }

                If (LEqual (Local4, 0x8B))
                {
                    If (LNotEqual (DerefOf (Index (Arg0, 0x0D)), 0xFF))
                    {
                        Or (DerefOf (Index (Arg0, 0x0D)), 0xF0, ILAN)
                        Or (SWB3, 0xFF, SWB3)
                    }

                    If (LNotEqual (DerefOf (Index (Arg0, 0x12)), 0xFF))
                    {
                        Or (DerefOf (Index (Arg0, 0x12)), 0xF0, USBT)
                        Or (SWB4, 0xFF00, SWB4)
                    }
                }

                FLNK (Local4, Local5)
                Store (SWB0, Local1)
                Store (Zero, Local2)
                While (LNotEqual (Local2, 0x20))
                {
                    If (LEqual (Local2, 0x04))
                    {
                        Store (SWB1, Local1)
                    }
                    Else
                    {
                        If (LEqual (Local2, 0x08))
                        {
                            Store (SWB2, Local1)
                        }
                        Else
                        {
                            If (LEqual (Local2, 0x0C))
                            {
                                Store (SWB3, Local1)
                            }
                            Else
                            {
                                If (LEqual (Local2, 0x10))
                                {
                                    Store (SWB4, Local1)
                                }
                                Else
                                {
                                    If (LEqual (Local2, 0x14))
                                    {
                                        Store (SWB5, Local1)
                                    }
                                    Else
                                    {
                                        If (LEqual (Local2, 0x18))
                                        {
                                            Store (SWB6, Local1)
                                        }
                                        Else
                                        {
                                            If (LEqual (Local2, 0x1C))
                                            {
                                                Store (SWB7, Local1)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Store (Local1, Index (FWEB, Local2))
                    Divide (Local1, 0x0100, Local0, Local1)
                    Add (Local2, One, Local2)
                }

                Store (Zero, Local0)
                If (LNotEqual (LCMD, Zero))
                {
                    Store (Zero, Local2)
                    While (LNotEqual (Local2, 0x20))
                    {
                        Store (0xFF, Index (FWEB, Local2))
                        Add (Local2, One, Local2)
                    }
                }

                Store (Local0, SWB0)
                Store (Local0, SWB1)
                Store (Local0, SWB2)
                Store (Local0, SWB3)
                Store (Local0, SWB4)
                Store (Local0, SWB5)
                Store (Local0, SWB6)
                Store (Local0, SWB7)
                If (LEqual (Local7, One))
                {
                    Store (\_SB.PCI0.LPC0.EVCT, Index (FWEB, 0x1F))
                }

                If (LEqual (Local4, 0x8A))
                {
                    If (LNotEqual (And (ILAN, 0xF0), 0xF0))
                    {
                        Store (DerefOf (Index (FWEB, 0x0C)), ILAN)
                    }
                    Else
                    {
                        And (ILAN, 0x0F, Index (FWEB, 0x0C))
                    }

                    If (LNotEqual (DerefOf (Index (FWEB, 0x11)), 0xFF))
                    {
                        If (LNotEqual (And (USBT, 0xF0), 0xF0))
                        {
                            Store (DerefOf (Index (FWEB, 0x11)), USBT)
                        }
                        Else
                        {
                            And (USBT, 0x0F, Index (FWEB, 0x11))
                        }
                    }
                }

                Release (MUTS)
                Return (FWEB)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LOr (LLess (OSYS, 0x07D0), LEqual (OSYS, 0x07D8)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Method (WFNK, 1, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            If (LEqual (Arg0, 0x04))
            {
                FLNK (0xFF, 0x7F)
            }

            \_SB.WREC (0xB6, One, Zero, Zero)
            If (LGreaterEqual (OSYS, 0x07DC))
            {
                If (LEqual (Arg0, 0x04))
                {
                    Store (Zero, HSFN)
                    If (LNotEqual (LEND, Zero))
                    {
                        Store (Zero, INIF)
                    }
                }

                If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
                {
                    If (LEqual (FBHK, One))
                    {
                        \_SB.WREC (0xDB, 0x80, 0x07, One)
                    }
                }
            }

            If (LEqual (Arg0, 0x03))
            {
                Store (FTBT, \_SB.PCI0.LPC0.FBFG)
                Store (Zero, \_SB.PCI0.LPC0.FBS3)
            }

            If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
            {
                Store (And (ShiftRight (\_SB.PCI0.LPC0.ECB6, 0x03), One), Local0)
                If (LNotEqual (Local0, PWBS))
                {
                    \_SB.WREC (0xB6, 0x08, 0x03, PWBS)
                }

                If (LNotEqual (\_SB.PCI0.LPC0.ECC8, ACBS))
                {
                    \_SB.WREC (0xC8, 0xFF, Zero, ACBS)
                }

                If (LNotEqual (\_SB.PCI0.LPC0.ECC9, ACBW))
                {
                    \_SB.WREC (0xC9, 0xFF, Zero, ACBW)
                }

                CLRB ()
                Store (Zero, HDSB)
                Store (Zero, SYBZ)
                Store (One, F0CM)
                FLNK (0xFF, Zero)
                Store (Zero, BTCG)
            }

            If (LGreater (OSYS, 0x07D5))
            {
                If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
                {
                    Store (HKMD, Local0)
                    \_SB.WREC (0xDB, One, Zero, Local0)
                }

                If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
                {
                    Store (HKEM, Local0)
                    \_SB.WREC (0xDB, 0x10, 0x04, Local0)
                    Store (HSEM, Local0)
                    \_SB.WREC (0xDB, 0x20, 0x05, Local0)
                    FLNK (0x10, One)
                    FLNK (0x15, 0xFF)
                    Store (0x0F, ILLU)
                }

                If (LNotEqual (\_SB.PCI0.LPC0.EVCT, Zero))
                {
                    FLNK (0x11, \_SB.PCI0.LPC0.EVCT)
                    If (LEqual (\_SB.RDEC (0xDB, 0x20, 0x05), Zero))
                    {
                        Store (KYB0, HSWK)
                        Store (Zero, KYB0)
                    }
                }
            }
            Else
            {
                If (LNotEqual (\_SB.PCI0.LPC0.EVCT, Zero))
                {
                    Notify (\_SB.FWEX, 0x80)
                }

                FLNK (0x15, 0xFF)
            }

            FLNK (0xFF, 0x30)
            Release (MUTS)
        }

        Method (SFNK, 1, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            If (LEqual (Arg0, 0x03))
            {
                Store (One, \_SB.PCI0.LPC0.FBS3)
                Store (\_SB.PCI0.LPC0.FBFG, FTBT)
            }
            Else
            {
                Store (Zero, CLMX)
            }

            \_SB.PCI0.LPC0.CLRL ()
            If (LGreater (OSYS, 0x07D5))
            {
                Store (Zero, \_SB.PCI0.LPC0.EVTC)
                Store (0x03, SYBZ)
                Store (Zero, HSWK)
                If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
                {
                    Store (\_SB.RDEC (0xDB, One, Zero), HKMD)
                }
            }

            If (LGreaterEqual (OSYS, 0x07DC))
            {
                If (LEqual (Arg0, 0x05))
                {
                    If (LEqual (And (ILAN, 0xF0), 0xF0))
                    {
                        VFBF ()
                        Store (One, HSFN)
                        Store (ILAN, HSP1)
                        And (ILAN, 0x0F, ILAN)
                    }

                    If (LEqual (And (USBT, 0xF0), 0xF0))
                    {
                        VFBF ()
                        Store (One, HSFN)
                        Store (USBT, HSP4)
                        And (USBT, 0x0F, USBT)
                    }
                }

                If (LAnd (LNotEqual (HSFN, Zero), LNotEqual (HSFN, 0xFF)))
                {
                    Store (One, HSFN)
                    FLNK (0xFF, 0x41)
                }

                If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
                {
                    Store (Zero, FBHK)
                    If (LEqual (And (\_SB.PCI0.LPC0.ECDB, 0x80), 0x80))
                    {
                        Store (One, FBHK)
                    }
                }
            }

            If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
            {
                Store (And (ShiftRight (\_SB.PCI0.LPC0.ECB6, 0x03), One), PWBS)
                Store (\_SB.PCI0.LPC0.ECC8, ACBS)
                Store (\_SB.PCI0.LPC0.ECC9, ACBW)
                Store (0xFF, FKMS)
            }
            Else
            {
                If (LEqual (Arg0, 0x05))
                {
                    If (LEqual (\_SB.PCI0.LPC0.ECC8, Zero))
                    {
                        \_SB.WREC (0xC8, 0xFF, Zero, 0x3F)
                        If (LEqual (\_SB.PCI0.LPC0.ECC9, Zero))
                        {
                            \_SB.WREC (0xC9, 0xFF, Zero, 0x03)
                        }
                    }

                    Store (Zero, Local1)
                    Store (Ones, SWB0)
                    Store (Ones, SWB1)
                    Store (Ones, SWB2)
                    Store (Ones, SWB3)
                    Store (Ones, SWB4)
                    Store (Ones, SWB5)
                    Store (Ones, SWB6)
                    Store (Ones, SWB7)
                    If (LEqual (And (ILAN, 0xF0), 0xF0))
                    {
                        And (SWB3, 0xFFFFFF00, SWB3)
                        If (LEqual (And (ILAN, 0x0F), One))
                        {
                            Or (SWB3, One, SWB3)
                        }

                        Store (One, Local1)
                    }

                    If (LEqual (And (USBT, 0xF0), 0xF0))
                    {
                        And (SWB4, 0xFFFF00FF, SWB4)
                        If (LEqual (And (USBT, 0x0F), One))
                        {
                            Or (SWB4, 0x0100, SWB4)
                        }

                        Store (One, Local1)
                    }

                    If (LEqual (Local1, One))
                    {
                        FLNK (0x8B, Ones)
                    }
                }
            }

            If (LGreater (Arg0, 0x02))
            {
                Store (Zero, HDSD)
                If (LEqual (Arg0, 0x05))
                {
                    FLNK (0xFF, 0x50)
                }
            }

            Release (MUTS)
        }

        Name (INIF, Zero)
        Name (CAGA, Buffer (0x50) {})
        Name (CAGB, Buffer (0x7C) {})
        Name (CAGC, Buffer (0xB8) {})
        Name (CAGE, Buffer (0x7C) {})
        Name (CAGD, Buffer (0x60) {})
        Name (FNKC, Buffer (0x80)
        {
             0x00
        })
        Name (RETP, Package (0x06)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (USAC, Zero)
        Name (BTCG, One)
        Name (BCMF, One)
        Method (TINC, 2, NotSerialized)
        {
            CreateDWordField (Arg1, Arg0, DCMD)
            Return (DCMD)
        }

        Method (RINC, 2, NotSerialized)
        {
            Multiply (Arg1, 0x04, Local0)
            CreateDWordField (Arg0, Local0, DCMD)
            Return (DCMD)
        }

        Method (WINC, 3, NotSerialized)
        {
            Multiply (Arg1, 0x04, Local0)
            CreateDWordField (Arg0, Local0, DCMD)
            Store (Arg2, DCMD)
        }

        Method (SRCH, 3, NotSerialized)
        {
            Store (Zero, Local1)
            While (LLess (Local1, Arg1))
            {
                Store (RINC (Arg0, Local1), Local0)
                If (LEqual (Local0, Arg2))
                {
                    Return (Local1)
                }

                Increment (Local1)
            }

            Return (Ones)
        }

        Method (TINI, 0, NotSerialized)
        {
            FLNK (0xFF, Zero)
            CopyObject (CMGA, CAGA)
            CopyObject (CMGB, CAGB)
            CopyObject (CMGC, CAGC)
            CopyObject (CMGD, CAGE)
            CopyObject (CCGD, CAGD)
            Store (IFNK, FNKC)
            Store (Zero, ICMD)
            Store (Zero, IFNK)
            Store (Zero, LEND)
            If (And (\_SB.PCI0.LPC0.EC94, One))
            {
                If (BTCG)
                {
                    Store (One, F0CM)
                    FLNK (0xFF, Zero)
                    Store (Zero, BTCG)
                }
            }
        }

        Method (PARG, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, LARG)
            Return (LARG)
        }

        Method (GTIF, 0, Serialized)
        {
            If (LOr (LEqual (INIF, Zero), LEqual (LEND, 0x13)))
            {
                Store (One, INIF)
                Return (Zero)
            }

            Return (INIF)
        }

        Method (CKIF, 0, NotSerialized)
        {
            Store (GTIF (), Local0)
            If (LEqual (Local0, Zero))
            {
                Acquire (MUTS, 0xFFFF)
                Store (0x0F, ILLU)
                TINI ()
                CLRB ()
                Release (MUTS)
            }
        }

        Name (RETA, Package (0x06)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (HDSP, 0x0F)
        Name (HDSB, Zero)
        Name (BATL, Zero)
        Name (SYBZ, Zero)
        Name (HDSD, Zero)
        Name (RFMD, 0xA0)
        Name (VADV, 0xBE)
        Name (VACC, 0x0100)
        Mutex (MUTM, 0x00)
        Name (ECRT, Package (0x08)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Method (CLRB, 0, NotSerialized)
        {
            Store (Zero, Local0)
            While (LLess (Local0, 0x08))
            {
                Store (Zero, Index (ECRT, Local0))
                Increment (Local0)
            }

            Store (Zero, \_SB.PCI0.LPC0.EWRB)
            Store (Zero, \_SB.PCI0.LPC0.ERDB)
        }

        Method (CKPC, 0, NotSerialized)
        {
            If (LEqual (\_SB.PCI0.LPC0.EWRB, Zero))
            {
                Store (Zero, Local0)
                While (LLess (Local0, 0x08))
                {
                    Store (DerefOf (Index (ECRT, Local0)), Local1)
                    If (LEqual (And (Local1, 0xFF000000), 0xFD000000))
                    {
                        Store (Add (And (Local1, 0x00FFFFFF), 0xFF000000), Index (ECRT, 
                            Local0))
                        Increment (Local0)
                        Store (Add (And (Local1, 0x00FFFFFF), ShiftLeft (Local0, 0x18)
                            ), \_SB.PCI0.LPC0.EWRB)
                        Break
                    }

                    Increment (Local0)
                }
            }
        }

        Method (CKSM, 0, NotSerialized)
        {
            If (LNotEqual (\_SB.PCI0.LPC0.ERDB, Zero))
            {
                Store (And (ShiftRight (\_SB.PCI0.LPC0.ERDB, 0x18), 0xFF), Local0)
                If (LLessEqual (Local0, 0x08))
                {
                    Store (Local0, Local1)
                    Decrement (Local0)
                    Store (Add (And (\_SB.PCI0.LPC0.ERDB, 0x00FFFFFF), 0xFE000000), Index (ECRT, 
                        Local0))
                    If (LEqual (Local1, 0x02))
                    {
                        Store (Zero, HDSB)
                    }
                }

                Store (Zero, \_SB.PCI0.LPC0.ERDB)
            }

            CKPC ()
        }

        Method (RDSM, 1, NotSerialized)
        {
            Acquire (MUTM, 0xFFFF)
            CKSM ()
            Store (Arg0, Local0)
            Decrement (Local0)
            Store (DerefOf (Index (ECRT, Local0)), Local1)
            If (LEqual (And (Local1, 0xFF000000), 0xFE000000))
            {
                Store (Zero, Index (ECRT, Local0))
            }

            Release (MUTM)
            Return (Local1)
        }

        Method (WRSM, 4, NotSerialized)
        {
            If (LOr (LOr (LEqual (Arg0, 0x94), LEqual (Arg0, 0x91)), LEqual (
                Arg0, 0x92)))
            {
                RDSM (Arg1)
            }

            Acquire (MUTM, 0xFFFF)
            Add (Arg0, Add (ShiftLeft (Arg1, 0x18), Add (ShiftLeft (Arg3, 
                0x10), ShiftLeft (Arg2, 0x08))), Local3)
            Store (One, Local2)
            Store (Zero, Local1)
            CKSM ()
            Store (And (ShiftRight (Local3, 0x18), 0xFF), Local0)
            Decrement (Local0)
            If (LOr (LOr (LEqual (Arg0, 0x94), LEqual (Arg0, 0x91)), LEqual (
                Arg0, 0x92)))
            {
                Store (Zero, Index (ECRT, Local0))
            }
            Else
            {
                Store (DerefOf (Index (ECRT, Local0)), Local1)
            }

            If (LEqual (Local1, Zero))
            {
                If (LEqual (\_SB.PCI0.LPC0.EWRB, Zero))
                {
                    Store (0xFF000000, Index (ECRT, Local0))
                    Store (Local3, \_SB.PCI0.LPC0.EWRB)
                }
                Else
                {
                    Store (Add (And (Local3, 0x00FFFFFF), 0xFD000000), Index (ECRT, 
                        Local0))
                }

                Store (Zero, Local2)
            }
            Else
            {
                If (LEqual (And (Local1, 0xFF000000), 0xFE000000))
                {
                    Store (0x02, Local2)
                }
            }

            Release (MUTM)
            Return (Local2)
        }

        Method (GRPA, 6, Serialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            Store (RINC (CAGD, Zero), Local7)
            Store (RINC (CAGD, 0x04), Local6)
            Store (RINC (CAGD, 0x05), Local5)
            Store (RINC (CAGD, 0x0D), Local4)
            Store (RINC (CAGD, 0x03), Index (RETA, Zero))
            Store (Local7, Index (RETA, One))
            Store (Local7, Index (RETA, 0x02))
            Store (Local7, Index (RETA, 0x03))
            Store (Local7, Index (RETA, 0x04))
            Store (Local7, Index (RETA, 0x05))
            While (One)
            {
                Store (ToInteger (Arg0), _T_0)
                If (LEqual (_T_0, Zero))
                {
                    Store (ShiftLeft (\_SB.PCI0.LPC0.ECA3, 0x0D), Index (RETA, 0x02))
                    Store (0xE000, Index (RETA, 0x03))
                    Store (Local7, Index (RETA, Zero))
                }
                Else
                {
                    If (LEqual (_T_0, One))
                    {
                        If (LEqual (Arg2, One))
                        {
                            Store (0x0A, RFMD)
                            WRSM (0x94, One, 0x08, Zero)
                            Store (Local7, Index (RETA, Zero))
                        }
                        Else
                        {
                            If (LEqual (Arg2, 0x10))
                            {
                                Store (0xA0, RFMD)
                                WRSM (0x94, One, 0x08, One)
                                Store (Local7, Index (RETA, Zero))
                            }
                        }
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Store (RINC (CAGD, 0x06), Index (RETA, 0x03))
                                Store (Local7, Index (RETA, Zero))
                            }
                            Else
                            {
                                If (LEqual (Arg2, 0xFFFF))
                                {
                                    Store (0x0200, Index (RETA, 0x03))
                                    Store (Local7, Index (RETA, Zero))
                                }
                            }
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x03))
                            {
                                If (LEqual (Arg2, Zero))
                                {
                                    And (Arg3, 0xFFFF, Local0)
                                    ShiftLeft (Add (ShiftRight (Local0, 0x08), And (Local0, 0xFF)
                                        ), 0x10, Local1)
                                    Add (Local1, Local0, Local1)
                                    Acquire (MUTS, 0xFFFF)
                                    FLNK (Arg1, Local1)
                                    If (LEqual (SWB0, Zero))
                                    {
                                        WINC (CAGD, 0x06, Local0)
                                        Store (Local7, Index (RETA, Zero))
                                    }

                                    Release (MUTS)
                                }
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LOr (LEqual (Arg2, One), LEqual (Arg2, 0x02)))
                                    {
                                        If (LEqual (Arg5, Zero))
                                        {
                                            If (LEqual (SYBZ, Zero))
                                            {
                                                Store (Local7, Index (RETA, Zero))
                                            }
                                            Else
                                            {
                                                Store (Local6, Index (RETA, Zero))
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (Arg5, One))
                                            {
                                                If (LEqual (SYBZ, 0x03))
                                                {
                                                    Store (Local5, Index (RETA, Zero))
                                                }
                                                Else
                                                {
                                                    Store (Arg2, Local0)
                                                    If (LEqual (Local0, One))
                                                    {
                                                        If (And (\_SB.PCI0.LPC0.EC94, One))
                                                        {
                                                            Store (\_SB.PCI0.LPC0.B1VT, Index (RETA, 0x02))
                                                            Store (Local7, Index (RETA, Zero))
                                                        }
                                                        Else
                                                        {
                                                            Store (0x02, Local0)
                                                        }
                                                    }

                                                    If (LEqual (Local0, 0x02))
                                                    {
                                                        Store (0xFF, Index (RETA, 0x02))
                                                        Store (Local7, Index (RETA, Zero))
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x05))
                                    {
                                        If (LEqual (And (Arg2, 0xFFFFFFFE), Zero))
                                        {
                                            If (LEqual (Arg5, Zero))
                                            {
                                                If (LEqual (SYBZ, Zero))
                                                {
                                                    Store (Local7, Index (RETA, Zero))
                                                }
                                                Else
                                                {
                                                    Store (Local6, Index (RETA, Zero))
                                                }
                                            }
                                            Else
                                            {
                                                If (LEqual (Arg5, One))
                                                {
                                                    If (LEqual (SYBZ, 0x03))
                                                    {
                                                        Store (Local5, Index (RETA, Zero))
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (Arg3, Zero))
                                                        {
                                                            If (LEqual (Arg2, Zero))
                                                            {
                                                                Add (ShiftLeft (\_SB.PCI0.LPC0.HRPM, 0x08), \_SB.PCI0.LPC0.LRPM, Local1)
                                                                Store (Local1, Index (RETA, 0x02))
                                                                Store (Local7, Index (RETA, Zero))
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (Arg3, One))
                                                            {
                                                                If (LEqual (Arg2, Zero))
                                                                {
                                                                    Add (ShiftLeft (\_SB.PCI0.LPC0.HRPM, 0x08), \_SB.PCI0.LPC0.LRPM, Local1)
                                                                    Store (Local1, Index (RETA, 0x02))
                                                                    Store (\_SB.PCI0.LPC0.MFAN, Index (RETA, 0x03))
                                                                    Store (Local7, Index (RETA, Zero))
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        If (LEqual (Arg2, One))
                                        {
                                            Store (0x8300, Index (RETA, Zero))
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x07))
                                        {
                                            If (LAnd (LEqual (Arg2, Zero), LEqual (Arg3, Zero)))
                                            {
                                                If (LEqual (Arg5, Zero))
                                                {
                                                    If (LNotEqual (SYBZ, 0x03))
                                                    {
                                                        Store (Local7, Index (RETA, Zero))
                                                    }
                                                    Else
                                                    {
                                                        Store (Local6, Index (RETA, Zero))
                                                    }
                                                }
                                                Else
                                                {
                                                    If (LEqual (Arg5, One))
                                                    {
                                                        If (LEqual (SYBZ, 0x03))
                                                        {
                                                            Store (Local5, Index (RETA, Zero))
                                                        }
                                                        Else
                                                        {
                                                            Add (ShiftLeft (\_SB.PCI0.LPC0.VGAT, 0x18), ShiftLeft (\_SB.PCI0.LPC0.RCPU, 0x08), Local0)
                                                            If (LEqual (And (\_SB.PCI0.LPC0.EC92, 0x08), 0x08))
                                                            {
                                                                If (LNotEqual (\_SB.PCI0.LPC0.ADVT, 0xFF))
                                                                {
                                                                    Store (\_SB.PCI0.LPC0.ADVT, Local1)
                                                                    Store (Local1, VADV)
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (\_SB.PCI0.LPC0.FCBT, One))
                                                                    {
                                                                        Store (\_SB.PCI0.LPC0.ADVT, Local1)
                                                                        Store (Local1, VADV)
                                                                    }
                                                                    Else
                                                                    {
                                                                        Store (VADV, Local1)
                                                                    }
                                                                }

                                                                Store (Add (Local0, Local1), Index (RETA, 0x02))
                                                                If (LNotEqual (And (\_SB.PCI0.LPC0.ACCR, 0xFF00), 0xFF00))
                                                                {
                                                                    Store (\_SB.PCI0.LPC0.ACCR, Local1)
                                                                    Store (Local1, VACC)
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (\_SB.PCI0.LPC0.FCBT, One))
                                                                    {
                                                                        Store (\_SB.PCI0.LPC0.ACCR, Local1)
                                                                        Store (Local1, VACC)
                                                                    }
                                                                    Else
                                                                    {
                                                                        Store (VACC, Local1)
                                                                    }
                                                                }

                                                                Store (Local1, Local0)
                                                                Store (Add (ShiftLeft (\_SB.PCI0.LPC0.ACCA, 0x10), Local0), Index (RETA, 
                                                                    0x03))
                                                            }
                                                            Else
                                                            {
                                                                Store (Add (Local0, 0xFF), Index (RETA, 0x02))
                                                                Store (Add (ShiftLeft (\_SB.PCI0.LPC0.ACCA, 0x10), 0xFFFF), Index (RETA, 
                                                                    0x03))
                                                            }

                                                            Store (Local7, Index (RETA, Zero))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08))
                                            {
                                                Store (One, Local0)
                                                If (LEqual (Arg4, 0x9D))
                                                {
                                                    Store (Zero, Local0)
                                                }

                                                If (LEqual (Local0, Zero))
                                                {
                                                    Store (RINC (CAGD, 0x02), Index (RETA, Zero))
                                                }
                                                Else
                                                {
                                                    If (LEqual (Arg5, Zero))
                                                    {
                                                        Store (One, Local0)
                                                        Add (Local4, One, Local1)
                                                        If (LEqual (Arg4, 0x98))
                                                        {
                                                            If (LAnd (LNotEqual (Arg2, One), LNotEqual (Arg2, 0x02)))
                                                            {
                                                                Store (Zero, Local0)
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (Arg4, 0xA9))
                                                            {
                                                                If (LAnd (LNotEqual (Arg2, One), LNotEqual (Arg2, 0x02)))
                                                                {
                                                                    If (LAnd (LNotEqual (Arg2, Local4), LNotEqual (Arg2, Local1)))
                                                                    {
                                                                        Store (Zero, Local0)
                                                                    }
                                                                }
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (Arg4, 0x9A))
                                                                {
                                                                    If (LNotEqual (And (Arg2, 0xFFFFFFFE), Zero))
                                                                    {
                                                                        Store (Zero, Local0)
                                                                    }
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (Arg4, 0x9B))
                                                                    {
                                                                        If (LGreater (Arg2, 0x02))
                                                                        {
                                                                            Store (Zero, Local0)
                                                                        }
                                                                    }
                                                                    Else
                                                                    {
                                                                        If (LOr (LEqual (Arg4, 0xA0), LEqual (Arg4, 0x9D)))
                                                                        {
                                                                            If (LNotEqual (Arg3, Zero))
                                                                            {
                                                                                Store (Zero, Local0)
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        If (Local0)
                                                        {
                                                            If (LEqual (SYBZ, 0x03))
                                                            {
                                                                Store (Local6, Index (RETA, Zero))
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (Arg4, 0xA9))
                                                                {
                                                                    If (LOr (LEqual (Arg2, 0x02), LEqual (Arg2, Local1)))
                                                                    {
                                                                        Store (Local7, Index (RETA, Zero))
                                                                    }
                                                                    Else
                                                                    {
                                                                        If (LEqual (Arg2, Local4))
                                                                        {
                                                                            Store (Local7, Index (RETA, Zero))
                                                                        }
                                                                        Else
                                                                        {
                                                                            If (LEqual (Arg2, One))
                                                                            {
                                                                                Store (Local7, Index (RETA, Zero))
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (SYBZ, Zero))
                                                                    {
                                                                        Store (Local7, Index (RETA, Zero))
                                                                    }
                                                                    Else
                                                                    {
                                                                        Store (Local6, Index (RETA, Zero))
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (Arg5, One))
                                                        {
                                                            If (LEqual (SYBZ, 0x03))
                                                            {
                                                                Store (Local5, Index (RETA, Zero))
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (Arg4, 0x98))
                                                                {
                                                                    Store (Arg2, Local0)
                                                                    If (LEqual (Local0, One))
                                                                    {
                                                                        If (And (\_SB.PCI0.LPC0.EC94, One))
                                                                        {
                                                                            Store (\_SB.PCI0.LPC0.B1CC, Index (RETA, 0x02))
                                                                            Store (\_SB.PCI0.LPC0.B1TP, Index (RETA, 0x03))
                                                                            Store (Local7, Index (RETA, Zero))
                                                                        }
                                                                        Else
                                                                        {
                                                                            Store (0x02, Local0)
                                                                        }
                                                                    }

                                                                    If (LEqual (Local0, 0x02))
                                                                    {
                                                                        Store (0xFFFF, Index (RETA, 0x02))
                                                                        Store (0xFF, Index (RETA, 0x03))
                                                                        Store (Local7, Index (RETA, Zero))
                                                                    }
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (Arg4, 0x9A))
                                                                    {
                                                                        If (LEqual (Arg2, Zero))
                                                                        {
                                                                            Store (\_SB.PCI0.LPC0.PWMS, Index (RETA, 0x02))
                                                                            Store (Local7, Index (RETA, Zero))
                                                                        }
                                                                    }
                                                                    Else
                                                                    {
                                                                        If (LEqual (Arg4, 0x9B))
                                                                        {
                                                                            If (LEqual (Arg2, Zero))
                                                                            {
                                                                                Store (\_SB.PCI0.LPC0.PHC1, Index (RETA, 0x03))
                                                                                Store (\_SB.PCI0.LPC0.PHC2, Index (RETA, 0x02))
                                                                                Store (Zero, \_SB.PCI0.LPC0.PHC1)
                                                                                Store (Zero, \_SB.PCI0.LPC0.PHC2)
                                                                                Store (Local7, Index (RETA, Zero))
                                                                            }
                                                                            Else
                                                                            {
                                                                                If (LEqual (Arg2, One))
                                                                                {
                                                                                    Store (\_SB.PCI0.LPC0.BATI, Index (RETA, 0x02))
                                                                                    Store (Zero, \_SB.PCI0.LPC0.BATI)
                                                                                    Store (Local7, Index (RETA, Zero))
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If (LEqual (Arg2, 0x02))
                                                                                    {
                                                                                        Store (\_SB.PCI0.LPC0.PHC3, Index (RETA, 0x03))
                                                                                        Store (\_SB.PCI0.LPC0.PHC4, Index (RETA, 0x02))
                                                                                        Store (Zero, \_SB.PCI0.LPC0.PHC3)
                                                                                        Store (Zero, \_SB.PCI0.LPC0.PHC4)
                                                                                        Store (Local7, Index (RETA, Zero))
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        Else
                                                                        {
                                                                            If (LEqual (Arg4, 0x9D))
                                                                            {
                                                                                If (LEqual (Arg3, Zero))
                                                                                {
                                                                                    Store (HDSD, Index (RETA, 0x02))
                                                                                    Store (Local7, Index (RETA, Zero))
                                                                                }
                                                                            }
                                                                            Else
                                                                            {
                                                                                If (LEqual (Arg4, 0xA0))
                                                                                {
                                                                                    If (LEqual (Arg3, Zero))
                                                                                    {
                                                                                        Store (And (\_SB.PCI0.LPC0.EVTC, 0x0B), Index (RETA, 0x02))
                                                                                        Store (Local7, Index (RETA, Zero))
                                                                                    }
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If (LEqual (Arg4, 0xA9))
                                                                                    {
                                                                                        Add (Local4, One, Local1)
                                                                                        If (LEqual (Arg2, One))
                                                                                        {
                                                                                            If (And (\_SB.PCI0.LPC0.EC94, One))
                                                                                            {
                                                                                                Add (\_SB.PCI0.LPC0.ECAE, ShiftLeft (\_SB.PCI0.LPC0.ECAF, 0x08), Local2)
                                                                                                Store (\_SB.PCI0.LPC0.ECAA, Local0)
                                                                                                Store (\_SB.PCI0.LPC0.ECAB, Local1)
                                                                                                ShiftLeft (Local1, 0x08, Local1)
                                                                                                Add (Local0, Local1, Local0)
                                                                                                Multiply (Local0, Local2, Local0)
                                                                                                Divide (Local0, 0x03E8, Local1, Local4)
                                                                                                Divide (Local0, 0x2710, Local1, Local3)
                                                                                                Store (\_SB.PCI0.LPC0.ECAC, Local0)
                                                                                                Store (\_SB.PCI0.LPC0.ECAD, Local1)
                                                                                                ShiftLeft (Local1, 0x08, Local1)
                                                                                                Add (Local0, Local1, Local0)
                                                                                                Multiply (Local0, Local2, Local0)
                                                                                                Divide (Local0, 0x2710, Local1, Local0)
                                                                                                Add (ShiftLeft (Local0, 0x10), Local3, Local1)
                                                                                                Store (Local1, Index (RETA, 0x04))
                                                                                                Store (\_SB.PCI0.LPC0.ECA4, Local0)
                                                                                                Store (Local4, Local1)
                                                                                                Multiply (Local1, Local0, Local4)
                                                                                                Divide (Local4, 0x64, Local1, Local0)
                                                                                                Add (Local0, One, Local0)
                                                                                                Divide (Local0, 0x0A, Local1, Local0)
                                                                                                Add (ShiftLeft (Local0, 0x10), \_SB.PCI0.LPC0.BSS1, Local1)
                                                                                                Add (Local1, ShiftLeft (\_SB.PCI0.LPC0.BSS2, 0x08), Index (RETA, 0x02))
                                                                                                Add (ShiftLeft (\_SB.PCI0.LPC0.BCV1, 0x10), \_SB.PCI0.LPC0.BCV0, Index (RETA, 0x03))
                                                                                                Store (\_SB.PCI0.LPC0.BCV2, Index (RETA, 0x05))
                                                                                                Store (Local7, Index (RETA, Zero))
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                Store (0xFFFF, Index (RETA, 0x02))
                                                                                                Store (0xFFFF, Index (RETA, 0x03))
                                                                                                Store (0xFFFF, Index (RETA, 0x04))
                                                                                                Store (0xFFFF, Index (RETA, 0x05))
                                                                                                Store (Local7, Index (RETA, Zero))
                                                                                            }
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If (LAnd (LEqual (Arg2, Local4), LEqual (And (\_SB.PCI0.LPC0.EC94, One), 
                                                                                                One)))
                                                                                            {
                                                                                                Add (\_SB.PCI0.LPC0.ECAE, ShiftLeft (\_SB.PCI0.LPC0.ECAF, 0x08), Local2)
                                                                                                Store (Local2, Index (RETA, 0x02))
                                                                                                Store (Local7, Index (RETA, Zero))
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                If (LOr (LEqual (Arg2, 0x02), LEqual (Arg2, Local1)))
                                                                                                {
                                                                                                    Store (0xFFFF, Index (RETA, 0x02))
                                                                                                    Store (0xFFFF, Index (RETA, 0x03))
                                                                                                    Store (0xFFFF, Index (RETA, 0x04))
                                                                                                    Store (0xFFFF, Index (RETA, 0x05))
                                                                                                    Store (Local7, Index (RETA, Zero))
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                If (LEqual (Arg4, 0x9A))
                                                {
                                                    If (LEqual (Arg2, One))
                                                    {
                                                        Store (0x8300, Index (RETA, Zero))
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x09))
                                                {
                                                    If (LEqual (Arg3, Zero))
                                                    {
                                                        If (LEqual (And (Arg2, 0xF4), Zero))
                                                        {
                                                            Store (Arg2, \_SB.PCI0.LPC0.EVTC)
                                                            Store (Local7, Index (RETA, Zero))
                                                        }
                                                    }
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x0C))
                                                    {
                                                        Store (\_SB.PCI0.LPC0.CPTV, Local0)
                                                        Store (Local0, Index (RETA, 0x02))
                                                        Store (\_SB.PCI0.LPC0.CCLV, Local0)
                                                        Store (Local0, Index (RETA, 0x03))
                                                        Store (Local7, Index (RETA, Zero))
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x0D))
                                                        {
                                                            Or (Or (Arg2, Arg3), Arg4, Local0)
                                                            Store (And (RINC (CAGD, 0x07), 0xFFFF), Local1)
                                                            If (LAnd (LGreaterEqual (Local1, 0x0690), LLess (Local1, 0x06A0)))
                                                            {
                                                                If (LEqual (And (\_SB.PCI0.LPC0.ECE2, 0x40), Zero))
                                                                {
                                                                    If (And (\_SB.PCI0.LPC0.EC94, One))
                                                                    {
                                                                        Store (RINC (CAGD, 0x02), Index (RETA, Zero))
                                                                        Store (One, Local0)
                                                                    }
                                                                }
                                                            }

                                                            If (LEqual (Local0, Zero))
                                                            {
                                                                If (LEqual (And (Arg5, 0xFFFE), Zero))
                                                                {
                                                                    If (LEqual (Arg5, Zero))
                                                                    {
                                                                        Store (One, BATL)
                                                                        Store (Local7, Index (RETA, Zero))
                                                                    }
                                                                    Else
                                                                    {
                                                                        If (LEqual (BATL, One))
                                                                        {
                                                                            Store (\_SB.PCI0.LPC0.BLFM, Index (RETA, 0x02))
                                                                            Store (Local7, Index (RETA, Zero))
                                                                            Store (Local7, BATL)
                                                                        }
                                                                        Else
                                                                        {
                                                                            Store (Local5, Index (RETA, Zero))
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x0E))
                                                            {
                                                                Or (Or (Arg3, Arg4), Arg5, Local0)
                                                                If (LEqual (Local0, Zero))
                                                                {
                                                                    If (LEqual (And (Arg2, 0xFFFE), Zero))
                                                                    {
                                                                        Store (Arg2, \_SB.PCI0.LPC0.BLFM)
                                                                        WRSM (0x94, 0x05, 0x89, Arg2)
                                                                        Store (Local7, Index (RETA, Zero))
                                                                    }
                                                                }
                                                            }
                                                            Else
                                                            {
                                                                Store (RINC (CAGD, 0x02), Index (RETA, Zero))
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Break
            }

            Return (RETA)
        }

        Method (GRPB, 7, Serialized)
        {
            Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
            Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            Store (RINC (CAGD, Zero), Local7)
            Store (RINC (CAGD, One), Local6)
            Store (RINC (CAGD, 0x03), Local5)
            While (One)
            {
                Store (ToInteger (Arg0), _T_0)
                If (LEqual (_T_0, 0x06))
                {
                    Or (Or (Arg3, Arg4), Arg5, Local0)
                    If (LEqual (Local0, Zero))
                    {
                        Store (Zero, Index (RETP, 0x02))
                        If (LEqual (HSWK, 0xE9))
                        {
                            Store (0x20, Index (RETP, 0x02))
                            Store (0x90, Index (RETP, 0x03))
                        }

                        Store (Local7, Index (RETP, Zero))
                    }
                }
                Else
                {
                    If (LEqual (_T_0, 0x09))
                    {
                        Or (Or (Arg3, Arg4), Arg5, Local0)
                        If (LEqual (Local0, Zero))
                        {
                            If (LEqual (Arg2, 0x5A00))
                            {
                                If (LEqual (HSWK, 0xE9))
                                {
                                    Store (Zero, HSWK)
                                }

                                Store (Local7, Index (RETP, Zero))
                            }
                        }
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x12))
                        {
                            ShiftRight (And (Arg6, 0x00FF0000), 0x10, Local0)
                            Store (Local5, Index (RETP, Zero))
                            While (One)
                            {
                                Store (ToInteger (Local0), _T_1)
                                If (LEqual (_T_1, Zero))
                                {
                                    Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                    If (LEqual (Local0, Zero))
                                    {
                                        Store (Local6, Index (RETP, 0x03))
                                        Store (Local7, Index (RETP, 0x02))
                                        Store (Local7, Index (RETP, Zero))
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_1, One))
                                    {
                                        Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local1)
                                        If (LEqual (Local1, Zero))
                                        {
                                            If (LEqual (And (Arg6, 0xFF000000), Zero))
                                            {
                                                Store (Local0, MFNO)
                                                FLNK (0xFF, Arg1)
                                                Store (MFNO, Local1)
                                                Store (ShiftLeft (Local1, 0x08), Index (RETP, Zero))
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_1, 0x03))
                                        {
                                            Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local1)
                                            If (LEqual (Local1, Zero))
                                            {
                                                If (LEqual (And (Arg6, 0xFF000000), Zero))
                                                {
                                                    Store (Local0, MFNO)
                                                    FLNK (0xFF, Arg1)
                                                    Store (MBF1, Index (RETP, 0x02))
                                                    Store (MBF2, Index (RETP, 0x03))
                                                    Store (MBF3, Index (RETP, 0x04))
                                                    Store (MBF4, Index (RETP, 0x05))
                                                    Store (Local7, Index (RETP, Zero))
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_1, 0x04))
                                            {
                                                Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local1)
                                                If (LEqual (Local1, Zero))
                                                {
                                                    If (LEqual (And (Arg6, 0xFF000000), Zero))
                                                    {
                                                        Store (Local0, MFNO)
                                                        FLNK (0xFF, Arg1)
                                                        Store (MBF1, Index (RETP, 0x02))
                                                        Store (MBF2, Index (RETP, 0x03))
                                                        Store (MBF3, Index (RETP, 0x04))
                                                        Store (MBF4, Index (RETP, 0x05))
                                                        Store (Local7, Index (RETP, Zero))
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_1, 0x05))
                                                {
                                                    Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local1)
                                                    If (LEqual (Local1, Zero))
                                                    {
                                                        If (LEqual (And (Arg6, 0xFF000000), Zero))
                                                        {
                                                            Store (Local0, MFNO)
                                                            FLNK (0xFF, Arg1)
                                                            Store (MBF1, Index (RETP, 0x02))
                                                            Store (MBF2, Index (RETP, 0x03))
                                                            Store (MBF3, Index (RETP, 0x04))
                                                            Store (MBF4, Index (RETP, 0x05))
                                                            Store (Local7, Index (RETP, Zero))
                                                        }
                                                    }
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_1, 0x06))
                                                    {
                                                        Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local1)
                                                        If (LEqual (Local1, Zero))
                                                        {
                                                            If (LEqual (And (Arg6, 0xFF000000), Zero))
                                                            {
                                                                Store (Local0, MFNO)
                                                                FLNK (0xFF, Arg1)
                                                                Store (MBF1, Index (RETP, 0x02))
                                                                Store (Local7, Index (RETP, Zero))
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                Break
                            }
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x13))
                            {
                                ShiftRight (And (Arg6, 0x00FF0000), 0x10, Local0)
                                Store (Local5, Index (RETP, Zero))
                                While (One)
                                {
                                    Store (ToInteger (Local0), _T_2)
                                    If (LEqual (_T_2, One))
                                    {
                                        Or (Or (Arg3, Arg4), Arg5, Local1)
                                        If (LEqual (Local1, Zero))
                                        {
                                            If (LEqual (And (Arg6, 0xFF000000), Zero))
                                            {
                                                Store (Local0, MFNO)
                                                Store (Arg2, MBF1)
                                                FLNK (0xFF, Arg1)
                                                Store (MFNO, Local1)
                                                Store (ShiftLeft (Local1, 0x08), Index (RETP, Zero))
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_2, 0x02))
                                        {
                                            Or (Or (Arg3, Arg4), Arg5, Local1)
                                            If (LEqual (Local1, Zero))
                                            {
                                                If (LEqual (And (Arg6, 0xFF000000), Zero))
                                                {
                                                    Store (Local0, MFNO)
                                                    Store (Arg2, MBF1)
                                                    FLNK (0xFF, Arg1)
                                                    Store (MFNO, Local1)
                                                    Store (ShiftLeft (Local1, 0x08), Index (RETP, Zero))
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_2, 0x03))
                                            {
                                                If (LEqual (And (Arg6, 0xFF000000), Zero))
                                                {
                                                    Store (Local0, MFNO)
                                                    Store (Arg2, MBF1)
                                                    Store (Arg3, MBF2)
                                                    Store (Arg4, MBF3)
                                                    Store (Arg5, MBF4)
                                                    FLNK (0xFF, Arg1)
                                                    Store (Local7, Index (RETP, Zero))
                                                }
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_2, 0x04))
                                                {
                                                    If (LEqual (And (Arg6, 0xFF000000), Zero))
                                                    {
                                                        Store (Local0, MFNO)
                                                        Store (Arg2, MBF1)
                                                        Store (Arg3, MBF2)
                                                        Store (Arg4, MBF3)
                                                        Store (Arg5, MBF4)
                                                        FLNK (0xFF, Arg1)
                                                        Store (Local7, Index (RETP, Zero))
                                                    }
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_2, 0x05))
                                                    {
                                                        If (LEqual (And (Arg6, 0xFF000000), Zero))
                                                        {
                                                            Store (Local0, MFNO)
                                                            Store (Arg2, MBF1)
                                                            Store (Arg3, MBF2)
                                                            Store (Arg4, MBF3)
                                                            Store (Arg5, MBF4)
                                                            FLNK (0xFF, Arg1)
                                                            Store (Local7, Index (RETP, Zero))
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_2, 0x06))
                                                        {
                                                            Or (Or (Arg3, Arg4), Arg5, Local1)
                                                            If (LEqual (Local1, Zero))
                                                            {
                                                                If (LEqual (And (Arg6, 0xFF000000), Zero))
                                                                {
                                                                    If (LEqual (And (Arg2, 0xFFFFFF00), Zero))
                                                                    {
                                                                        Store (Local0, MFNO)
                                                                        Store (Arg2, MBF1)
                                                                        FLNK (0xFF, Arg1)
                                                                        Store (Local7, Index (RETP, Zero))
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    Break
                                }
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x18))
                                {
                                    Or (Arg4, Arg5, Local0)
                                    If (LEqual (Local0, Zero))
                                    {
                                        If (LAnd (LOr (LEqual (Arg3, One), LEqual (Arg3, Zero)), 
                                            LLessEqual (Arg2, 0x31)))
                                        {
                                            Store (Arg3, PLRM)
                                            Store (Arg2, PLDN)
                                            FLNK (0xFF, 0x44)
                                            If (LEqual (Arg3, Zero))
                                            {
                                                Store (PLD1, Index (RETP, 0x03))
                                                Store (PLD2, Index (RETP, 0x04))
                                            }
                                            Else
                                            {
                                                Store (TLDM, Index (RETP, 0x02))
                                                Store (PLRV, Index (RETP, 0x03))
                                            }

                                            Store (Zero, Index (RETP, Zero))
                                        }
                                        Else
                                        {
                                            Store (0x8300, Index (RETP, Zero))
                                        }
                                    }
                                    Else
                                    {
                                        Store (0x8300, Index (RETP, Zero))
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x19))
                                    {
                                        Or (Arg2, Arg3, Local0)
                                        If (LEqual (Local0, Zero))
                                        {
                                            If (LAnd (LEqual (Arg4, 0x61B25C03), LEqual (Arg5, 0x459CC1EB)))
                                            {
                                                FLNK (0xFF, 0x45)
                                                Store (Zero, Index (RETP, Zero))
                                            }
                                            Else
                                            {
                                                Store (0x8300, Index (RETP, Zero))
                                            }
                                        }
                                        Else
                                        {
                                            Store (0x8300, Index (RETP, Zero))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Break
            }
        }

        Name (PTST, 0xFF)
        Method (GRPC, 6, Serialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            Store (RINC (CAGD, Zero), Local7)
            Store (RINC (CAGD, One), Local6)
            Store (RINC (CAGD, 0x03), Local5)
            While (One)
            {
                Store (ToInteger (Arg0), _T_0)
                If (LEqual (_T_0, Zero))
                {
                    If (LEqual (PTST, 0xFF))
                    {
                        Store (FLNK (Arg1, 0x0F), PTST)
                    }

                    Store (PTST, Index (RETP, 0x02))
                    Store (Local6, Index (RETP, 0x04))
                    Store (Local7, Index (RETP, Zero))
                }
                Else
                {
                    If (LEqual (_T_0, One))
                    {
                        If (LEqual (And (Arg2, 0xFFFE), Zero))
                        {
                            Store (Arg2, PTST)
                            FLNK (Arg1, Arg2)
                            Store (Local7, Index (RETP, Zero))
                        }
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            Store (One, Local0)
                            If (LEqual (HKEM, One))
                            {
                                Store (0x03, Local0)
                            }

                            If (LEqual (HSEM, One))
                            {
                                Add (Local0, 0x08, Local0)
                            }

                            If (LEqual (FKMS, 0xFF))
                            {
                                Sleep (0x0A)
                                If (LEqual (And (\_SB.PCI0.LPC0.ECDB, 0x40), 0x40))
                                {
                                    Store (One, FKMS)
                                }
                                Else
                                {
                                    Store (Zero, FKMS)
                                }
                            }

                            If (LEqual (FKMS, One))
                            {
                                Add (Local0, 0x10, Local0)
                            }

                            Sleep (0x0A)
                            If (LEqual (And (\_SB.PCI0.LPC0.ECDB, 0x80), 0x80))
                            {
                                Store (Local6, Index (RETP, 0x03))
                            }

                            Store (Local0, Index (RETP, 0x02))
                            Store (Local7, Index (RETP, Zero))
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x03))
                            {
                                Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                If (LEqual (Local0, Zero))
                                {
                                    Store (RESV, Index (RETP, 0x02))
                                    Store (Local7, Index (RETP, Zero))
                                }
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    Or (Or (Arg2, Arg4), Arg5, Local0)
                                    If (LEqual (Local0, Zero))
                                    {
                                        If (LEqual (Arg3, One))
                                        {
                                            If (LNotEqual (And (\_SB.PCI0.LPC0.EC93, 0x22), Zero))
                                            {
                                                Add (ShiftLeft (And (\_SB.PCI0.LPC0.EC93, 0x08), 0x06), ShiftRight (And (
                                                    \_SB.PCI0.LPC0.EC93, 0x10), 0x04), Local3)
                                                Store (Local3, Index (RETP, 0x02))
                                                Store (Local7, Index (RETP, Zero))
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (Arg3, 0xFFFF))
                                            {
                                                And (\_SB.PCI0.LPC0.EC92, 0x80, Local0)
                                                ShiftRight (\_SB.PCI0.LPC0.EC92, 0x07, Index (RETP, 0x02))
                                                Store (Local7, Index (RETP, Zero))
                                            }
                                            Else
                                            {
                                                If (LEqual (Arg3, 0xFFFE))
                                                {
                                                    Store (\_SB.PCI0.LPC0.RFED, Index (RETP, 0x02))
                                                    Store (Local7, Index (RETP, Zero))
                                                }
                                            }
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x05))
                                    {
                                        Store (0x21, Index (RETP, 0x03))
                                        Store (Local7, Index (RETP, Zero))
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x06))
                                        {
                                            Store (Zero, Local0)
                                            Store (FLNK (Arg1, 0xFF), Local0)
                                            Store (Local0, Index (RETP, 0x02))
                                            Store (Local6, Index (RETP, 0x03))
                                            Store (Local7, Index (RETP, Zero))
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x07))
                                            {
                                                If (LEqual (Arg2, 0x03))
                                                {
                                                    Store (Zero, Index (RETP, 0x03))
                                                    ShiftLeft (FLNK (Arg1, 0xFF), 0x04, Local0)
                                                    Store (And (Local0, 0x10), Index (RETP, 0x02))
                                                    If (LEqual (And (\_SB.PCI0.VGA.DFP1, One), One))
                                                    {
                                                        Store (And (Local0, 0x10), Index (RETP, 0x03))
                                                    }

                                                    Store (Local7, Index (RETP, Zero))
                                                }
                                                Else
                                                {
                                                    If (LEqual (Arg2, 0x07))
                                                    {
                                                        ShiftLeft (FLNK (0x1F, 0xFF), 0x05, Local3)
                                                        FLNK (0x9B, 0xFF)
                                                        ShiftRight (And (SWB0, 0xFF00), 0x06, Local4)
                                                        Store (Local7, Index (RETP, Zero))
                                                        ShiftRight (Local3, 0x04, Local3)
                                                        Store (Local3, Index (RETP, 0x02))
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (Arg2, 0x08))
                                                        {
                                                            Store (FLNK (0x1F, 0xFF), Local3)
                                                            FLNK (0x9B, 0xFF)
                                                            ShiftRight (And (SWB0, 0xFF00), 0x08, Local4)
                                                            Store (Local7, Index (RETP, Zero))
                                                            Store (Zero, Local0)
                                                            Store (Zero, Index (RETP, 0x02))
                                                            If (LEqual (And (Local3, Local4), One))
                                                            {
                                                                If (LEqual (And (\_SB.PCI0.VGA.DFP1, One), One))
                                                                {
                                                                    Or (One, Local0, Local0)
                                                                }

                                                                Store (Local0, Index (RETP, 0x02))
                                                            }
                                                            Else
                                                            {
                                                                If (LAnd (LEqual (Local3, One), LEqual (And (\_SB.PCI0.VGA.DFP1, One), 
                                                                    One)))
                                                                {
                                                                    Store (One, Index (RETP, 0x02))
                                                                }
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (Arg2, 0x09))
                                                            {
                                                                Store (Local7, Index (RETP, Zero))
                                                                Store (One, Index (RETP, 0x02))
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (Arg2, 0x0A))
                                                                {
                                                                    Store (Local7, Index (RETP, Zero))
                                                                    Store (Zero, Index (RETP, 0x02))
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08))
                                                {
                                                    If (LEqual (And (Arg2, One), One))
                                                    {
                                                        Store (And (ShiftRight (Arg2, One), One), Local0)
                                                        Store (Local0, HKEM)
                                                        \_SB.WREC (0xDB, 0x10, 0x04, Local0)
                                                        Store (And (ShiftRight (Arg2, 0x03), One), Local0)
                                                        Store (Local0, HSEM)
                                                        \_SB.WREC (0xDB, 0x20, 0x05, Local0)
                                                        Store (And (ShiftRight (Arg2, 0x04), One), Local0)
                                                        Store (Local0, FKMS)
                                                        \_SB.WREC (0xDB, 0x40, 0x06, Local0)
                                                        If (LEqual (And (Arg3, 0xFFFFFFFE), Zero))
                                                        {
                                                            \_SB.WREC (0xDB, 0x80, 0x07, Arg3)
                                                            Store (Local7, Index (RETP, Zero))
                                                        }
                                                        Else
                                                        {
                                                            Store (Local5, Index (RETP, Zero))
                                                        }
                                                    }
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x09))
                                                    {
                                                        Or (Arg4, Arg5, Local0)
                                                        If (LEqual (Local0, Zero))
                                                        {
                                                            If (LEqual (Arg3, 0x0200))
                                                            {
                                                                If (LNotEqual (FLNK (Arg1, Arg2), 0xFF))
                                                                {
                                                                    Store (Local7, Index (RETP, Zero))
                                                                }
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (Arg3, 0xFFFF))
                                                                {
                                                                    If (LEqual (And (Arg2, 0xFFFE), Zero))
                                                                    {
                                                                        Add (Arg2, 0x9300, Local0)
                                                                        FLNK (One, Local0)
                                                                        Store (Local7, Index (RETP, Zero))
                                                                    }
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (Arg3, 0xFFFE))
                                                                    {
                                                                        If (LEqual (And (Arg2, 0xFFFE), Zero))
                                                                        {
                                                                            If (LEqual (Arg2, Zero))
                                                                            {
                                                                                Store (Zero, \_SB.PCI0.LPC0.RFED)
                                                                            }
                                                                            Else
                                                                            {
                                                                                If (LEqual (Arg2, One))
                                                                                {
                                                                                    Store (One, \_SB.PCI0.LPC0.RFED)
                                                                                }
                                                                            }

                                                                            Store (Local7, Index (RETP, Zero))
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x0A))
                                                        {
                                                            If (LEqual (Arg3, One))
                                                            {
                                                                If (LEqual (And (Arg2, 0xFFFC), Zero))
                                                                {
                                                                    If (LEqual (And (Arg2, 0x03), 0x02))
                                                                    {
                                                                        Store (0x07, Local0)
                                                                    }
                                                                    Else
                                                                    {
                                                                        ShiftLeft (Arg2, One, Local0)
                                                                        Add (Local0, One, Local0)
                                                                    }

                                                                    FLNK (Arg1, Local0)
                                                                    Store (Local7, Index (RETP, Zero))
                                                                }
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x0B))
                                                            {
                                                                If (LEqual (And (Arg2, 0xFFFE), Zero))
                                                                {
                                                                    FLNK (Arg1, Arg2)
                                                                    Store (Local7, Index (RETP, Zero))
                                                                }
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x0C))
                                                                {
                                                                    If (LEqual (Arg2, Zero))
                                                                    {
                                                                        If (LEqual (And (Arg3, 0xFFFE), Zero))
                                                                        {
                                                                            Store (Local7, Index (RETP, Zero))
                                                                        }
                                                                    }
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (_T_0, 0x0F))
                                                                    {
                                                                        Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                                                        If (LEqual (Local0, Zero))
                                                                        {
                                                                            Store (ShiftRight (RINC (CAGD, 0x07), 0x10), Index (RETP, 0x02
                                                                                ))
                                                                            Store (And (RINC (CAGD, 0x07), 0xFFFF), Index (RETP, 0x03
                                                                                ))
                                                                            Store (Local7, Index (RETP, Zero))
                                                                        }
                                                                    }
                                                                    Else
                                                                    {
                                                                        If (LEqual (_T_0, 0x10))
                                                                        {
                                                                            If (LNotEqual (UCSP, Zero))
                                                                            {
                                                                                Store (RINC (CAGD, 0x0C), Index (RETP, Zero))
                                                                                If (LNotEqual (USAC, Zero))
                                                                                {
                                                                                    Store (Local7, Index (RETP, Zero))
                                                                                    Store (RINC (CAGD, 0x12), Local1)
                                                                                    Add (Local1, Local1, Local2)
                                                                                    Add (Local1, Local2, Local4)
                                                                                    Add (Local1, One, Local3)
                                                                                    If (LEqual (Arg5, Local7))
                                                                                    {
                                                                                        FLNK (Arg1, 0xE0)
                                                                                        Store (RINC (CAGD, 0x0E), Index (RETP, One))
                                                                                        If (LEqual (And (USC1, One), Zero))
                                                                                        {
                                                                                            And (USC1, 0xFFFFFFC1, USC1)
                                                                                        }

                                                                                        Store (USC1, Index (RETP, 0x02))
                                                                                        Add (0x01000000, 0x29, Index (RETP, 0x03))
                                                                                        Store (0x01000000, Index (RETP, 0x04))
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If (LEqual (Arg5, Local4))
                                                                                        {
                                                                                            Store (Local6, Index (RETP, Zero))
                                                                                            Store (Local7, Index (RETP, One))
                                                                                            Store (CDPM, Index (RETP, 0x02))
                                                                                            Store (Local6, Index (RETP, 0x04))
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If (LEqual (Arg5, Local1))
                                                                                            {
                                                                                                Store (RINC (CAGD, 0x0D), Index (RETP, One))
                                                                                                Store (Local6, Index (RETP, 0x02))
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                If (LEqual (Arg5, Local2))
                                                                                                {
                                                                                                    FLNK (Arg1, 0xE2)
                                                                                                    Store (RINC (CAGD, 0x0F), Index (RETP, One))
                                                                                                    Store (USC2, Index (RETP, 0x02))
                                                                                                    Store (RINC (CAGD, 0x10), Index (RETP, 0x03))
                                                                                                    Store (RINC (CAGD, 0x11), Index (RETP, 0x04))
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    If (LEqual (And (Arg5, Local1), Local1))
                                                                                                    {
                                                                                                        If (LEqual (Arg5, Local3))
                                                                                                        {
                                                                                                            Store (RINC (CAGD, 0x0E), Index (RETP, One))
                                                                                                            Store (Local7, Index (RETP, 0x02))
                                                                                                            Add (0x01000000, 0x29, Index (RETP, 0x02))
                                                                                                        }
                                                                                                        Else
                                                                                                        {
                                                                                                            Store (Local5, Index (RETP, Zero))
                                                                                                        }
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        Store (Local5, Index (RETP, Zero))
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        Else
                                                                        {
                                                                            If (LEqual (_T_0, 0x11))
                                                                            {
                                                                                If (LNotEqual (UCSP, Zero))
                                                                                {
                                                                                    Store (RINC (CAGD, 0x0C), Index (RETP, Zero))
                                                                                    If (LNotEqual (USAC, Zero))
                                                                                    {
                                                                                        Store (Local5, Index (RETP, Zero))
                                                                                        If (LEqual (Arg5, Zero))
                                                                                        {
                                                                                            XOr (Ones, 0x29, Local0)
                                                                                            XOr (Local0, 0x01000000, Local1)
                                                                                            And (Arg2, 0x01000000, Local0)
                                                                                            If (LAnd (LEqual (And (Arg2, Local1), Zero), LNotEqual (
                                                                                                Local0, Zero)))
                                                                                            {
                                                                                                And (Arg2, 0x3F, Local0)
                                                                                                If (LAnd (LEqual (And (Local0, One), Zero), LNotEqual (
                                                                                                    Local0, Zero)))
                                                                                                {
                                                                                                    Store (One, Local0)
                                                                                                }

                                                                                                If (LNotEqual (Local0, One))
                                                                                                {
                                                                                                    Store (Arg2, USC1)
                                                                                                    FLNK (Arg1, 0xE1)
                                                                                                    Store (Local7, Index (RETP, Zero))
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If (LEqual (Arg5, 0x0300))
                                                                                            {
                                                                                                Or (Or (And (Arg2, 0xFFFFFFFE), Arg3), Arg4, Local0)
                                                                                                If (LEqual (Local0, Zero))
                                                                                                {
                                                                                                    Store (Arg2, CDPM)
                                                                                                    FLNK (0xFF, 0x43)
                                                                                                    Store (Local6, Index (RETP, Zero))
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    Store (Local5, Index (RETP, Zero))
                                                                                                }
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                If (LEqual (Arg5, 0x0200))
                                                                                                {
                                                                                                    If (LEqual (And (Arg2, 0xFF80FFFA), Zero))
                                                                                                    {
                                                                                                        And (Arg2, 0x05, Local0)
                                                                                                        If (LOr (LEqual (Local0, One), LEqual (Local0, 0x04)))
                                                                                                        {
                                                                                                            ShiftRight (And (Arg2, 0x00FF0000), 0x10, Local0)
                                                                                                            If (LLessEqual (Local0, 0x64))
                                                                                                            {
                                                                                                                Store (Arg2, USC2)
                                                                                                                FLNK (Arg1, 0xE3)
                                                                                                                Store (Local7, Index (RETP, Zero))
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            Else
                                                                            {
                                                                                If (LEqual (_T_0, 0x16))
                                                                                {
                                                                                    Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                                                                    If (LEqual (Local0, Zero))
                                                                                    {
                                                                                        FLNK (Arg1, 0xF1)
                                                                                        If (LNotEqual (SWB0, Ones))
                                                                                        {
                                                                                            Store (SWB0, Local0)
                                                                                        }

                                                                                        Store (0x8005, Index (RETP, One))
                                                                                        Store (Local0, Index (RETP, 0x02))
                                                                                        Store (0xFFFE, Index (RETP, 0x03))
                                                                                        Store (Local7, Index (RETP, Zero))
                                                                                    }
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If (LEqual (_T_0, 0x17))
                                                                                    {
                                                                                        Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                                                                        If (LEqual (Local0, Zero))
                                                                                        {
                                                                                            FLNK (Arg1, 0xF2)
                                                                                            If (LNotEqual (SWB0, Ones))
                                                                                            {
                                                                                                Store (SWB0, Local0)
                                                                                            }

                                                                                            Store (0x8004, Index (RETP, One))
                                                                                            Store (Local0, Index (RETP, 0x02))
                                                                                            Store (0x0FFF, Index (RETP, 0x03))
                                                                                            Store (One, Index (RETP, 0x04))
                                                                                            Store (Local7, Index (RETP, Zero))
                                                                                        }
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If (LEqual (_T_0, 0x18))
                                                                                        {
                                                                                            Or (Or (Arg3, Arg4), Arg5, Local0)
                                                                                            If (LEqual (Local0, Zero))
                                                                                            {
                                                                                                Store (Arg2, SWB1)
                                                                                                FLNK (Arg1, 0xF3)
                                                                                                Store (Local7, Index (RETP, Zero))
                                                                                            }
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If (LEqual (_T_0, 0x19))
                                                                                            {
                                                                                                Or (Or (Arg3, Arg4), Arg5, Local0)
                                                                                                If (LEqual (Local0, Zero))
                                                                                                {
                                                                                                    Store (Arg2, SWB1)
                                                                                                    FLNK (Arg1, 0xF4)
                                                                                                    Store (Local7, Index (RETP, Zero))
                                                                                                }
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                If (LEqual (_T_0, 0x1C))
                                                                                                {
                                                                                                    Or (Or (Arg2, Arg4), Arg5, Local0)
                                                                                                    If (LEqual (Local0, Zero))
                                                                                                    {
                                                                                                        If (LEqual (And (Arg3, 0xFFFE), Zero))
                                                                                                        {
                                                                                                            If (LEqual (Arg3, Zero))
                                                                                                            {
                                                                                                                Add (\_SB.PCI0.LPC0.FCBT, ShiftLeft (\_SB.PCI0.LPC0.BCS0, One), Local1)
                                                                                                                Add (Local1, ShiftLeft (\_SB.PCI0.LPC0.BCSX, 0x02), Local1)
                                                                                                                Add (Local1, And (ShiftLeft (\_SB.PCI0.LPC0.EC92, 0x04), 0x80), Local1)
                                                                                                                Store (Local1, Index (RETP, 0x02))
                                                                                                            }
                                                                                                            Else
                                                                                                            {
                                                                                                                Store (\_SB.PCI0.LPC0.TCBC, Index (RETP, 0x02))
                                                                                                                Store (Local6, Index (RETP, 0x04))
                                                                                                            }

                                                                                                            Store (Local7, Index (RETP, Zero))
                                                                                                        }
                                                                                                        Else
                                                                                                        {
                                                                                                            Store (Local5, Index (RETP, Zero))
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    If (LEqual (_T_0, 0x1D))
                                                                                                    {
                                                                                                        Or (Arg4, Arg5, Local0)
                                                                                                        If (LEqual (Local0, Zero))
                                                                                                        {
                                                                                                            Store (Local5, Index (RETP, Zero))
                                                                                                            If (LEqual (And (Arg3, 0xFFFE), Zero))
                                                                                                            {
                                                                                                                If (LEqual (Arg3, Zero))
                                                                                                                {
                                                                                                                    Store (Local7, Index (RETP, Zero))
                                                                                                                    If (LEqual (Arg2, Zero))
                                                                                                                    {
                                                                                                                        Store (Local7, \_SB.PCI0.LPC0.FCBT)
                                                                                                                        Store (Local7, \_SB.PCI0.LPC0.BCS0)
                                                                                                                        Store (Local7, \_SB.PCI0.LPC0.BCSX)
                                                                                                                    }
                                                                                                                    Else
                                                                                                                    {
                                                                                                                        If (LEqual (Arg2, 0x10))
                                                                                                                        {
                                                                                                                            Store (Local6, \_SB.PCI0.LPC0.FCBT)
                                                                                                                        }
                                                                                                                        Else
                                                                                                                        {
                                                                                                                            If (LEqual (Arg2, 0x11))
                                                                                                                            {
                                                                                                                                Store (Local7, \_SB.PCI0.LPC0.FCBT)
                                                                                                                            }
                                                                                                                            Else
                                                                                                                            {
                                                                                                                                If (LEqual (Arg2, 0x20))
                                                                                                                                {
                                                                                                                                    Store (Local6, \_SB.PCI0.LPC0.BCS0)
                                                                                                                                }
                                                                                                                                Else
                                                                                                                                {
                                                                                                                                    If (LEqual (Arg2, 0x21))
                                                                                                                                    {
                                                                                                                                        Store (Local7, \_SB.PCI0.LPC0.BCS0)
                                                                                                                                    }
                                                                                                                                    Else
                                                                                                                                    {
                                                                                                                                        If (LEqual (Arg2, 0x40))
                                                                                                                                        {
                                                                                                                                            Store (Local6, \_SB.PCI0.LPC0.BCSX)
                                                                                                                                        }
                                                                                                                                        Else
                                                                                                                                        {
                                                                                                                                            If (LEqual (Arg2, 0x41))
                                                                                                                                            {
                                                                                                                                                Store (Local7, \_SB.PCI0.LPC0.BCSX)
                                                                                                                                            }
                                                                                                                                            Else
                                                                                                                                            {
                                                                                                                                                Store (Local5, Index (RETP, Zero))
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                Else
                                                                                                                {
                                                                                                                    And (Arg2, 0xFFFF, Local1)
                                                                                                                    ShiftRight (And (Arg2, 0xFFFF0000), 0x10, Local2)
                                                                                                                    If (LAnd (LLess (Local1, 0x05A1), LLess (Local2, 0x05A1)))
                                                                                                                    {
                                                                                                                        Store (Arg2, \_SB.PCI0.LPC0.TCBC)
                                                                                                                        Store (Local6, \_SB.PCI0.LPC0.TMUD)
                                                                                                                        Store (Local7, Index (RETP, Zero))
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        If (LEqual (_T_0, 0x1E))
                                                                                                        {
                                                                                                            Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                                                                                            If (LEqual (Local0, Zero))
                                                                                                            {
                                                                                                                FLNK (0xFF, Arg1)
                                                                                                                Store (HYBT, Index (RETP, 0x02))
                                                                                                                Store (Local7, Index (RETP, Zero))
                                                                                                            }
                                                                                                        }
                                                                                                        Else
                                                                                                        {
                                                                                                            If (LEqual (_T_0, 0x1F))
                                                                                                            {
                                                                                                                Or (Arg4, Arg5, Local0)
                                                                                                                If (LEqual (Local0, Zero))
                                                                                                                {
                                                                                                                    Store (Local5, Index (RETP, Zero))
                                                                                                                    If (LEqual (And (Arg2, 0xFFFE), Zero))
                                                                                                                    {
                                                                                                                        If (LLessEqual (Arg3, 0x02))
                                                                                                                        {
                                                                                                                            Add (Arg1, Arg2, Local0)
                                                                                                                            Store (Arg3, SKEY)
                                                                                                                            FLNK (0xFF, Local0)
                                                                                                                            Store (Local7, Index (RETP, Zero))
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            Else
                                                                                                            {
                                                                                                                If (LEqual (_T_0, 0x20))
                                                                                                                {
                                                                                                                    Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                                                                                                    If (LEqual (Local0, Zero))
                                                                                                                    {
                                                                                                                        If (LNotEqual (FKRG, Zero))
                                                                                                                        {
                                                                                                                            Store (Local6, Index (RETP, 0x04))
                                                                                                                        }
                                                                                                                        Else
                                                                                                                        {
                                                                                                                            Store (Local7, Index (RETP, 0x04))
                                                                                                                        }

                                                                                                                        FLNK (0xFF, Arg1)
                                                                                                                        Store (HFMF, Index (RETP, 0x02))
                                                                                                                        Store (Local7, Index (RETP, One))
                                                                                                                        Store (Local6, Index (RETP, Zero))
                                                                                                                    }
                                                                                                                }
                                                                                                                Else
                                                                                                                {
                                                                                                                    If (LEqual (_T_0, 0x21))
                                                                                                                    {
                                                                                                                        Or (Or (Arg3, Arg4), Arg5, Local0)
                                                                                                                        If (LEqual (Local0, Zero))
                                                                                                                        {
                                                                                                                            If (LEqual (And (Arg2, 0xFFFE), Zero))
                                                                                                                            {
                                                                                                                                Store (Arg2, HFMF)
                                                                                                                                FLNK (0xFF, Arg1)
                                                                                                                                Store (Local6, Index (RETP, Zero))
                                                                                                                            }
                                                                                                                            Else
                                                                                                                            {
                                                                                                                                Store (Local5, Index (RETP, Zero))
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Break
            }
        }

        Method (VFBF, 0, Serialized)
        {
            If (LEqual (HSFN, Zero))
            {
                FLNK (0xFF, 0x41)
            }
        }

        Method (BDCK, 1, Serialized)
        {
            Name (BBUF, Buffer (0x08)
            {
                 0x01, 0x09, 0x02, 0x03, 0x05, 0x0F, 0x0F, 0x0F
            })
            Store (Arg0, Local0)
            And (HSP3, 0x0F, Local1)
            If (LEqual (Local1, 0x04))
            {
                Store (0x0F, Index (BBUF, 0x04))
            }

            Store (Zero, Local2)
            While (LLess (Local2, 0x08))
            {
                And (Local0, 0x0F, Local3)
                ShiftRight (Local0, 0x04, Local0)
                If (LEqual (Local3, Zero))
                {
                    Return (Zero)
                }

                If (LLess (Local2, Local1))
                {
                    If (LEqual (Local3, 0x0F))
                    {
                        Return (Zero)
                    }
                }

                Store (Zero, Local4)
                Store (Zero, Local5)
                While (LLess (Local4, 0x08))
                {
                    If (LEqual (Local3, DerefOf (Index (BBUF, Local4))))
                    {
                        Store (Zero, Index (BBUF, Local4))
                        Store (One, Local5)
                        Break
                    }

                    Increment (Local4)
                }

                If (LEqual (Local5, Zero))
                {
                    Return (Zero)
                }

                Increment (Local2)
            }

            Return (One)
        }

        Method (GRPD, 6, Serialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            Store (RINC (CAGD, Zero), Local7)
            Store (RINC (CAGD, One), Local6)
            Store (RINC (CAGD, 0x03), Local5)
            While (One)
            {
                Store (ToInteger (Arg0), _T_0)
                If (LEqual (_T_0, Zero))
                {
                    Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                    If (LEqual (Local0, Zero))
                    {
                        VFBF ()
                        And (HSP0, 0x0F, Index (RETP, 0x02))
                        Store (Local7, Index (RETP, 0x04))
                        Store (Local7, Index (RETP, One))
                        Store (Local7, Index (RETP, Zero))
                    }
                }
                Else
                {
                    If (LEqual (_T_0, One))
                    {
                        Or (Or (Arg3, Arg4), Arg5, Local0)
                        If (LEqual (Local0, Zero))
                        {
                            If (LEqual (And (Arg2, 0xFFFE), Zero))
                            {
                                VFBF ()
                                Store (One, HSFN)
                                Or (Arg2, 0xF0, HSP0)
                                Store (Local7, Index (RETP, Zero))
                            }
                            Else
                            {
                                Store (Local5, Index (RETP, Zero))
                            }
                        }
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                            If (LEqual (Local0, Zero))
                            {
                                VFBF ()
                                If (LNotEqual (And (ILAN, 0xF0), 0xF0))
                                {
                                    And (HSP1, 0x0F, ILAN)
                                    Store (ILAN, Index (RETP, 0x02))
                                }
                                Else
                                {
                                    And (ILAN, 0x0F, Index (RETP, 0x02))
                                }

                                Store (Local6, Index (RETP, 0x04))
                                Store (Local7, Index (RETP, One))
                                Store (Local6, Index (RETP, Zero))
                            }
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x03))
                            {
                                Or (Or (Arg3, Arg4), Arg5, Local0)
                                If (LEqual (Local0, Zero))
                                {
                                    If (LEqual (And (Arg2, 0xFFFE), Zero))
                                    {
                                        VFBF ()
                                        Or (Arg2, 0xF0, ILAN)
                                        Store (Local6, Index (RETP, Zero))
                                    }
                                    Else
                                    {
                                        Store (Local5, Index (RETP, Zero))
                                    }
                                }
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                    If (LEqual (Local0, Zero))
                                    {
                                        VFBF ()
                                        And (HSP2, 0x0F, Local1)
                                        ShiftLeft (Local1, 0x03, Index (RETP, 0x02))
                                        Store (Local7, Index (RETP, 0x04))
                                        Store (0x08, Index (RETP, 0x03))
                                        Store (0x800A, Index (RETP, One))
                                        Store (Local6, Index (RETP, Zero))
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x05))
                                    {
                                        Or (Or (Arg3, Arg4), Arg5, Local0)
                                        If (LEqual (Local0, Zero))
                                        {
                                            If (LEqual (And (Arg2, 0xFFF7), Zero))
                                            {
                                                VFBF ()
                                                Store (One, HSFN)
                                                ShiftRight (Arg2, 0x03, Local1)
                                                Or (Local1, 0xF0, HSP2)
                                                Store (Local6, Index (RETP, Zero))
                                            }
                                            Else
                                            {
                                                Store (Local5, Index (RETP, Zero))
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x06))
                                        {
                                            Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                            If (LEqual (Local0, Zero))
                                            {
                                                VFBF ()
                                                Store (HSBD, Index (RETP, 0x02))
                                                And (HSP3, 0x0F, Index (RETP, 0x03))
                                                Store (HSDB, Index (RETP, 0x04))
                                                Store (0x8505, Index (RETP, One))
                                                Store (Local7, Index (RETP, Zero))
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x07))
                                            {
                                                Or (Or (Arg3, Arg4), Arg5, Local0)
                                                If (LEqual (Local0, Zero))
                                                {
                                                    If (BDCK (Arg2))
                                                    {
                                                        VFBF ()
                                                        Store (One, HSFN)
                                                        Or (HSP3, 0xF0, HSP3)
                                                        Store (Arg2, HSBD)
                                                        Store (Local7, Index (RETP, Zero))
                                                    }
                                                    Else
                                                    {
                                                        Store (Local5, Index (RETP, Zero))
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08))
                                                {
                                                    Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                                    If (LEqual (Local0, Zero))
                                                    {
                                                        VFBF ()
                                                        If (LNotEqual (HSP4, 0xFF))
                                                        {
                                                            If (LNotEqual (And (USBT, 0xF0), 0xF0))
                                                            {
                                                                And (HSP4, 0x0F, USBT)
                                                                Store (USBT, Index (RETP, 0x02))
                                                            }
                                                            Else
                                                            {
                                                                And (USBT, 0x0F, Index (RETP, 0x02))
                                                            }

                                                            Store (Local6, Index (RETP, 0x04))
                                                            Store (Local7, Index (RETP, One))
                                                            Store (Local6, Index (RETP, Zero))
                                                        }
                                                    }
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x09))
                                                    {
                                                        Or (Or (Arg3, Arg4), Arg5, Local0)
                                                        If (LEqual (Local0, Zero))
                                                        {
                                                            If (LEqual (And (Arg2, 0xFFFE), Zero))
                                                            {
                                                                VFBF ()
                                                                If (LNotEqual (HSP4, 0xFF))
                                                                {
                                                                    Or (Arg2, 0xF0, USBT)
                                                                    Store (Local6, Index (RETP, Zero))
                                                                }
                                                            }
                                                            Else
                                                            {
                                                                Store (Local5, Index (RETP, Zero))
                                                            }
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x0A))
                                                        {
                                                            Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                                            If (LEqual (Local0, Zero))
                                                            {
                                                                VFBF ()
                                                                And (HSP5, 0x0F, Index (RETP, 0x02))
                                                                Store (Local7, Index (RETP, 0x04))
                                                                Store (Local7, Index (RETP, One))
                                                                Store (Local6, Index (RETP, Zero))
                                                                If (LEqual (HSS0, One))
                                                                {
                                                                    Store (0x03, Index (RETP, Zero))
                                                                }
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x0B))
                                                            {
                                                                Or (Or (Arg3, Arg4), Arg5, Local0)
                                                                If (LEqual (Local0, Zero))
                                                                {
                                                                    If (LEqual (And (Arg2, 0xFFFE), Zero))
                                                                    {
                                                                        If (LEqual (HSS0, One))
                                                                        {
                                                                            Store (0x8400, Index (RETP, Zero))
                                                                        }
                                                                        Else
                                                                        {
                                                                            VFBF ()
                                                                            Store (One, HSFN)
                                                                            Or (Arg2, 0xF0, HSP5)
                                                                            Store (Local6, Index (RETP, Zero))
                                                                        }
                                                                    }
                                                                    Else
                                                                    {
                                                                        Store (Local5, Index (RETP, Zero))
                                                                    }
                                                                }
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x0C))
                                                                {
                                                                    Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                                                    If (LEqual (Local0, Zero))
                                                                    {
                                                                        VFBF ()
                                                                        If (LNotEqual (HSP6, 0xFF))
                                                                        {
                                                                            And (HSP6, 0x0F, Local1)
                                                                            If (LEqual (And (Local1, 0x0E), Zero))
                                                                            {
                                                                                Store (0x3290, Index (RETP, 0x02))
                                                                                If (LNotEqual (Local1, Zero))
                                                                                {
                                                                                    Store (0x1290, Index (RETP, 0x02))
                                                                                }
                                                                            }
                                                                            Else
                                                                            {
                                                                                Store (0x3291, Index (RETP, 0x02))
                                                                                If (LNotEqual (ShiftRight (Local1, One), One))
                                                                                {
                                                                                    Store (0x3294, Index (RETP, 0x02))
                                                                                }
                                                                            }

                                                                            Store (0x3290, Index (RETP, 0x04))
                                                                            Store (0x3290, Local2)
                                                                            Store (FLNK (0x9B, 0xFF), Local3)
                                                                            ShiftRight (And (SWB0, 0xFF00), 0x08, Local4)
                                                                            If (LNotEqual (Local4, Zero))
                                                                            {
                                                                                Or (Local2, One, Local2)
                                                                            }

                                                                            If (LEqual (Local3, One))
                                                                            {
                                                                                Or (Local2, 0x04, Local2)
                                                                            }

                                                                            Store (Local2, Index (RETP, 0x03))
                                                                            Store (0x8200, Index (RETP, One))
                                                                            Store (Local6, Index (RETP, Zero))
                                                                        }
                                                                    }
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (_T_0, 0x0D))
                                                                    {
                                                                        Or (Or (Arg3, Arg4), Arg5, Local0)
                                                                        If (LEqual (Local0, Zero))
                                                                        {
                                                                            If (LOr (LEqual (Arg2, 0x1290), LEqual (Arg2, 0x3290)))
                                                                            {
                                                                                VFBF ()
                                                                                If (LNotEqual (HSP4, 0xFF))
                                                                                {
                                                                                    Store (One, HSFN)
                                                                                    Store (0xF0, HSP6)
                                                                                    If (LEqual (Arg2, 0x1290))
                                                                                    {
                                                                                        Store (0xF1, HSP6)
                                                                                    }

                                                                                    Store (Local6, Index (RETP, Zero))
                                                                                }
                                                                            }
                                                                            Else
                                                                            {
                                                                                If (LOr (LEqual (Arg2, 0x3291), LEqual (Arg2, 0x3294)))
                                                                                {
                                                                                    VFBF ()
                                                                                    If (LNotEqual (HSP4, 0xFF))
                                                                                    {
                                                                                        Store (One, HSFN)
                                                                                        Store (Local6, Index (RETP, Zero))
                                                                                        If (LEqual (Arg2, 0x3291))
                                                                                        {
                                                                                            Store (FLNK (0x9B, 0xFF), Local3)
                                                                                            ShiftRight (And (SWB0, 0xFF00), 0x08, Local4)
                                                                                            If (LNotEqual (Local4, Zero))
                                                                                            {
                                                                                                Store (0xF2, HSP6)
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                Store (Local5, Index (RETP, Zero))
                                                                                            }
                                                                                        }

                                                                                        If (LEqual (Arg2, 0x3294))
                                                                                        {
                                                                                            Store (FLNK (0x1F, 0xFF), Local3)
                                                                                            If (LEqual (Local3, One))
                                                                                            {
                                                                                                Store (0xF8, HSP6)
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                Store (Local5, Index (RETP, Zero))
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                Else
                                                                                {
                                                                                    Store (Local5, Index (RETP, Zero))
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    Else
                                                                    {
                                                                        If (LEqual (_T_0, 0x0E))
                                                                        {
                                                                            Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                                                            If (LEqual (Local0, Zero))
                                                                            {
                                                                                VFBF ()
                                                                                And (HSP7, 0x0F, Index (RETP, 0x02))
                                                                                Store (Local7, Index (RETP, 0x04))
                                                                                Store (Local7, Index (RETP, One))
                                                                                Store (Local6, Index (RETP, Zero))
                                                                            }
                                                                        }
                                                                        Else
                                                                        {
                                                                            If (LEqual (_T_0, 0x0F))
                                                                            {
                                                                                Or (Or (Arg3, Arg4), Arg5, Local0)
                                                                                If (LEqual (Local0, Zero))
                                                                                {
                                                                                    If (LEqual (And (Arg2, 0xFFFE), Zero))
                                                                                    {
                                                                                        VFBF ()
                                                                                        Store (One, HSFN)
                                                                                        Or (Arg2, 0xF0, HSP7)
                                                                                        Store (Local6, Index (RETP, Zero))
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        Store (Local5, Index (RETP, Zero))
                                                                                    }
                                                                                }
                                                                            }
                                                                            Else
                                                                            {
                                                                                If (LEqual (_T_0, 0x10))
                                                                                {
                                                                                    Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                                                                    If (LEqual (Local0, Zero))
                                                                                    {
                                                                                        VFBF ()
                                                                                        And (HSP8, 0x0F, Index (RETP, 0x02))
                                                                                        Store (Local6, Index (RETP, 0x04))
                                                                                        Store (Local7, Index (RETP, One))
                                                                                        Store (Local6, Index (RETP, Zero))
                                                                                    }
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If (LEqual (_T_0, 0x12))
                                                                                    {
                                                                                        Or (Or (Arg3, Arg4), Arg5, Local0)
                                                                                        If (LEqual (Local0, Zero))
                                                                                        {
                                                                                            If (LEqual (Arg2, 0x0800))
                                                                                            {
                                                                                                VFBF ()
                                                                                                And (HSP9, 0x0F, Local1)
                                                                                                Or (Local1, 0x0800, Index (RETP, 0x02))
                                                                                                Store (0x0800, Index (RETP, 0x04))
                                                                                                Store (0x8700, Index (RETP, One))
                                                                                                Store (Local7, Index (RETP, Zero))
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If (LEqual (_T_0, 0x13))
                                                                                        {
                                                                                            Or (Or (Arg3, Arg4), Arg5, Local0)
                                                                                            If (LEqual (Local0, Zero))
                                                                                            {
                                                                                                If (LEqual (And (Arg2, 0xFFFE), 0x0800))
                                                                                                {
                                                                                                    VFBF ()
                                                                                                    Store (One, HSFN)
                                                                                                    And (Arg2, One, Local1)
                                                                                                    Or (Local1, 0xF0, HSP9)
                                                                                                    Store (Local7, Index (RETP, Zero))
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    Store (Local5, Index (RETP, Zero))
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If (LEqual (_T_0, 0x14)) {}
                                                                                            Else
                                                                                            {
                                                                                                If (LEqual (_T_0, 0x15)) {}
                                                                                                Else
                                                                                                {
                                                                                                    If (LEqual (_T_0, 0x16))
                                                                                                    {
                                                                                                        Or (Or (Or (Arg2, Arg3), Arg4), Arg5, Local0)
                                                                                                        If (LEqual (Local0, Zero))
                                                                                                        {
                                                                                                            VFBF ()
                                                                                                            And (HSPB, 0x0F, Index (RETP, 0x02))
                                                                                                            Store (Local7, Index (RETP, 0x04))
                                                                                                            Store (Local7, Index (RETP, One))
                                                                                                            Store (Local6, Index (RETP, Zero))
                                                                                                        }
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        If (LEqual (_T_0, 0x17))
                                                                                                        {
                                                                                                            Or (Or (Arg3, Arg4), Arg5, Local0)
                                                                                                            If (LEqual (Local0, Zero))
                                                                                                            {
                                                                                                                If (LEqual (And (Arg2, 0xFFFE), Zero))
                                                                                                                {
                                                                                                                    VFBF ()
                                                                                                                    Store (HSFN, Local1)
                                                                                                                    Store (0x8C, HSSS)
                                                                                                                    Store (0x02, HSFN)
                                                                                                                    FLNK (0xFF, 0x41)
                                                                                                                    If (LEqual (HSSS, Zero))
                                                                                                                    {
                                                                                                                        Store (One, HSFN)
                                                                                                                        Or (Arg2, 0xF0, HSPB)
                                                                                                                        Store (Local6, Index (RETP, Zero))
                                                                                                                    }
                                                                                                                    Else
                                                                                                                    {
                                                                                                                        Store (Local1, HSFN)
                                                                                                                        ShiftLeft (HSSS, 0x08, Index (RETP, Zero))
                                                                                                                    }
                                                                                                                }
                                                                                                                Else
                                                                                                                {
                                                                                                                    Store (Local5, Index (RETP, Zero))
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        Else
                                                                                                        {
                                                                                                            If (LEqual (_T_0, 0x18))
                                                                                                            {
                                                                                                                Or (Arg4, Arg5, Local0)
                                                                                                                If (LEqual (Local0, Zero))
                                                                                                                {
                                                                                                                    If (LEqual (And (Arg2, 0xFFFC), Zero))
                                                                                                                    {
                                                                                                                        Store (Local5, Index (RETP, Zero))
                                                                                                                        If (LEqual (Arg2, Zero))
                                                                                                                        {
                                                                                                                            Store (Arg3, LHDR)
                                                                                                                            Store (Zero, LFUN)
                                                                                                                            FLNK (0xFF, Arg1)
                                                                                                                            Store (Local7, Index (RETP, Zero))
                                                                                                                        }
                                                                                                                        Else
                                                                                                                        {
                                                                                                                            If (LEqual (Arg3, Zero))
                                                                                                                            {
                                                                                                                                If (LEqual (Arg2, One))
                                                                                                                                {
                                                                                                                                    Store (LBSZ, Index (RETP, 0x02))
                                                                                                                                    Store (LRES, Index (RETP, 0x03))
                                                                                                                                }
                                                                                                                                Else
                                                                                                                                {
                                                                                                                                    If (LEqual (Arg2, 0x02))
                                                                                                                                    {
                                                                                                                                        Store (LADR, Index (RETP, 0x02))
                                                                                                                                    }
                                                                                                                                    Else
                                                                                                                                    {
                                                                                                                                        If (LEqual (Arg2, 0x03))
                                                                                                                                        {
                                                                                                                                            Store (LHDR, Index (RETP, One))
                                                                                                                                            Store (One, Index (RETP, 0x02))
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                Store (Local7, Index (RETP, Zero))
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    Else
                                                                                                                    {
                                                                                                                        Store (Local5, Index (RETP, Zero))
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            Else
                                                                                                            {
                                                                                                                If (LEqual (_T_0, 0x19))
                                                                                                                {
                                                                                                                    Or (Arg4, Arg5, Local0)
                                                                                                                    If (LEqual (Local0, Zero))
                                                                                                                    {
                                                                                                                        If (LEqual (Arg2, Zero))
                                                                                                                        {
                                                                                                                            Store (Arg3, LHDR)
                                                                                                                            Store (LBSZ, Local1)
                                                                                                                            Store (Local1, LFUN)
                                                                                                                            While (LNotEqual (Local1, Zero))
                                                                                                                            {
                                                                                                                                FLNK (0xFF, Arg1)
                                                                                                                                Decrement (Local1)
                                                                                                                                If (LEqual (LFUN, Zero))
                                                                                                                                {
                                                                                                                                    Store (Zero, Local1)
                                                                                                                                }

                                                                                                                                Stall (0x50)
                                                                                                                            }

                                                                                                                            Store (Local7, Index (RETP, Zero))
                                                                                                                        }
                                                                                                                        Else
                                                                                                                        {
                                                                                                                            Store (Local5, Index (RETP, Zero))
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Break
            }
        }

        Device (\_SB.VALZ)
        {
            Name (_HID, "TOS1900")  // _HID: Hardware ID
            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Return ("VALZeneral")
            }

            Method (ENAB, 0, NotSerialized)
            {
                Acquire (MUTS, 0xFFFF)
                If (LEqual (TSBK, Zero))
                {
                    FLNK (0x14, Zero)
                }

                Store (One, TSBK)
                Release (MUTS)
                If (LNotEqual (CECC, Zero))
                {
                    Notify (\_SB.VALZ, 0x80)
                }
            }

            Method (SMDW, 5, Serialized)
            {
                Store (0x8400, Local0)
                Or (Arg2, Arg3, Local1)
                If (LAnd (LEqual (Local1, Zero), LLessEqual (SizeOf (Arg4), 0x40)))
                {
                    Subtract (Not (RINC (CAGD, One)), 0x02, Local4)
                    Subtract (RINC (CAGD, 0x0A), 0x02, Local2)
                    Add (Local2, 0x05, Local3)
                    Store (Local4, ITLK)
                    Store (Arg0, DMIS)
                    Store (Arg1, TPNO)
                    FLNK (0xFF, Local2)
                    If (LNotEqual (ITLK, Local4))
                    {
                        Increment (Local4)
                        Store (Local3, APMC)
                        Store (Arg0, DMIS)
                        Store (Arg1, TPNO)
                        Store (Arg4, WDMI)
                        FLNK (0xFF, Local2)
                        If (LNotEqual (ITLK, Local4))
                        {
                            Store (Local3, APMC)
                            ShiftRight (And (DMIS, 0x00FF0000), 0x08, Local0)
                        }
                    }

                    Store (Zero, DMIS)
                    Store (Zero, WDMI)
                }

                Return (Local0)
            }

            Method (HMB1, 0, NotSerialized)
            {
                Name (RETB, Buffer (0x1C)
                {
                     0x00
                })
                Name (HBT1, Package (0x06)
                {
                    Buffer (0x1C)
                    {
                         0x00
                    }, 

                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                CKIF ()
                If (And (\_SB.PCI0.LPC0.EC94, One))
                {
                    Acquire (MUTS, 0xFFFF)
                    If (BTCG)
                    {
                        Store (One, F0CM)
                        FLNK (0xFF, Zero)
                        Store (Zero, BTCG)
                    }

                    Store (JFNK, RETB)
                    Store (RETB, Index (HBT1, Zero))
                    Store (CYCC, Index (HBT1, One))
                    Release (MUTS)
                }

                Return (HBT1)
            }

            Method (HMB2, 0, NotSerialized)
            {
                Return (Package (0x06)
                {
                    Buffer (0x1C)
                    {
                         0x00
                    }, 

                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
            }

            Method (INFO, 0, NotSerialized)
            {
                Acquire (MUTS, 0xFFFF)
                Store (Zero, Local0)
                If (LNotEqual (CECC, Zero))
                {
                    FLNK (0xFF, 0x03)
                    If (LNotEqual (CECE, Zero))
                    {
                        Release (MUTS)
                        Return (CECE)
                    }
                    Else
                    {
                        FLNK (0xFF, 0x04)
                    }
                }

                If (LAnd (LEqual (KYB0, Zero), LNotEqual (\_SB.PCI0.LPC0.EVCT, Zero)))
                {
                    FLNK (0x11, \_SB.PCI0.LPC0.EVCT)
                }

                If (LNotEqual (KYB0, Zero))
                {
                    Store (KYBF, Local0)
                    CopyObject (KYBA, SWBF)
                    CopyObject (SWBF, KYBB)
                    Store (Zero, SWBF)
                    If (LEqual (Local0, 0xFE))
                    {
                        Store (Zero, Local0)
                    }

                    If (LEqual (And (Local0, 0xF0), 0x90))
                    {
                        Add (Local0, 0x0B00, Local0)
                    }

                    Add (Local0, 0x0100, Local0)
                }

                Release (MUTS)
                Return (Local0)
            }

            Method (SPFC, 6, NotSerialized)
            {
                CKIF ()
                Add (ShiftLeft (PARG (Arg0), 0x10), And (PARG (Arg1), 0xFFFF
                    ), Local2)
                Store (SRCH (CAGA, LENA, Local2), Local6)
                If (LNotEqual (Local6, Ones))
                {
                    Store (DerefOf (Index (FNKC, Local6)), Local5)
                    Return (GRPA (Local6, Local5, PARG (Arg2), PARG (Arg3), PARG (Arg4), 
                        PARG (Arg5)))
                }
                Else
                {
                    Acquire (MUTS, 0xFFFF)
                    Store (RINC (CAGD, 0x02), Index (RETP, Zero))
                    Store (RINC (CAGD, Zero), Local0)
                    Store (Local0, Index (RETP, One))
                    Store (Local0, Index (RETP, 0x02))
                    Store (Local0, Index (RETP, 0x03))
                    Store (Local0, Index (RETP, 0x04))
                    Store (Local0, Index (RETP, 0x05))
                    Store (SRCH (CAGB, LENB, Local2), Local6)
                    If (LNotEqual (Local6, Ones))
                    {
                        Store (DerefOf (Index (FNKC, Add (Local6, LENA))), Local5)
                        GRPB (Local6, Local5, PARG (Arg2), PARG (Arg3), PARG (Arg4), PARG (
                            Arg5), PARG (Arg1))
                    }
                    Else
                    {
                        Store (SRCH (CAGC, LENC, Local2), Local6)
                        If (LNotEqual (Local6, Ones))
                        {
                            Store (DerefOf (Index (FNKC, Add (Add (Local6, LENA), LENB
                                ))), Local5)
                            GRPC (Local6, Local5, PARG (Arg2), PARG (Arg3), PARG (Arg4), PARG (
                                Arg5))
                        }
                        Else
                        {
                            If (LGreaterEqual (OSYS, 0x07DC))
                            {
                                Store (SRCH (CAGE, LENE, Local2), Local6)
                            }
                            Else
                            {
                                If (LOr (LEqual (Local2, 0xFE000092), LEqual (Local2, 0xFF000092)))
                                {
                                    Store (SRCH (CAGE, LENE, Local2), Local6)
                                }
                            }

                            If (LNotEqual (Local6, Ones))
                            {
                                Store (DerefOf (Index (FNKC, Add (Add (Add (Local6, LENA), 
                                    LENB), LENC))), Local5)
                                GRPD (Local6, Local5, PARG (Arg2), PARG (Arg3), PARG (Arg4), PARG (
                                    Arg5))
                            }
                            Else
                            {
                                And (Local2, 0xFFFF0000, Local2)
                                If (LEqual (RINC (CAGD, 0x08), Local2))
                                {
                                    If (LNotEqual (USAC, Zero))
                                    {
                                        Store (RINC (CAGD, 0x0B), Index (RETP, Zero))
                                    }
                                    Else
                                    {
                                        Store (RINC (CAGD, 0x0A), Index (RETP, Zero))
                                        Store (One, USAC)
                                    }
                                }
                                Else
                                {
                                    If (LEqual (RINC (CAGD, 0x09), Local2))
                                    {
                                        If (LEqual (USAC, Zero))
                                        {
                                            Store (RINC (CAGD, 0x0C), Index (RETP, Zero))
                                        }
                                        Else
                                        {
                                            Store (RINC (CAGD, 0x0A), Index (RETP, Zero))
                                            Store (Zero, USAC)
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Release (MUTS)
                    Return (RETP)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LLess (OSYS, 0x07D6))
                {
                    Return (Zero)
                }
                Else
                {
                    If (LGreaterEqual (OSYS, 0x07DC))
                    {
                        CKIF ()
                    }

                    Return (0x0B)
                }
            }
        }

        Method (TWAK, 1, NotSerialized)
        {
            WFNK (Arg0)
        }

        Method (TPTS, 1, NotSerialized)
        {
            SFNK (Arg0)
        }

        Method (SPS0, 0, NotSerialized)
        {
            \_SB.WREC (0xDA, 0x03, Zero, 0x02)
            \_SB.WREC (0xDA, 0x0C, 0x02, 0x02)
            \_SB.WREC (0xDA, 0x30, 0x04, 0x02)
            \_SB.WREC (0xDA, 0xC0, 0x06, 0x02)
            \_SB.WREC (0xE3, 0xC0, 0x06, 0x02)
            Acquire (MUTS, 0xFFFF)
            FLNK (0xFF, 0x31)
            Release (MUTS)
        }

        Method (SPS3, 0, NotSerialized)
        {
            \_SB.PCI0.LPC0.CLRL ()
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (WMID)
        {
            Name (_HID, "PNP0C14")  // _HID: Hardware ID
            Name (_UID, "ITFS")  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LLess (OSYS, 0x07D9))
                {
                    Return (Zero)
                }

                Return (0x0B)
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */   0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,
                /* 0008 */   0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,
                /* 0010 */   0x43, 0x41, 0x01, 0x00, 0x32, 0x63, 0x13, 0x8A,
                /* 0018 */   0xBC, 0x23, 0x85, 0x45, 0xA1, 0x59, 0x14, 0x79,
                /* 0020 */   0x3C, 0xAA, 0x29, 0xFC, 0x54, 0x49, 0x01, 0x02
            })
            Name (FWBF, Package (0x02)
            {
                Buffer (0x20)
                {
                     0x00
                }, 

                Zero
            })
            Name (FBSB, Package (0x02)
            {
                Buffer (0x0200)
                {
                     0x00
                }, 

                Zero
            })
            Name (TFWB, Package (0x02)
            {
                Buffer (0x18)
                {
                     0x00
                }, 

                Zero
            })
            Name (CCTI, Zero)
            Name (FWLC, 0x02)
            Method (WCTI, 1, NotSerialized)
            {
                If (LEqual (Arg0, Zero))
                {
                    If (LEqual (CCTI, Zero)) {}
                    Else
                    {
                        Store (Ones, ITLK)
                        FLNK (0xFF, 0x42)
                        Store (ITLK, FWLC)
                        If (LEqual (FWLC, One))
                        {
                            Store (0xFFFFFFFE, ITLK)
                            FLNK (0xFF, 0x42)
                            Store (0x02, FWLC)
                        }
                    }
                }
                Else
                {
                    If (LNotEqual (CCTI, Zero)) {}
                }

                Store (Arg0, CCTI)
            }

            Method (WQTI, 1, NotSerialized)
            {
            }

            Method (WSTI, 2, NotSerialized)
            {
            }

            Name (TMPS, Buffer (0x0400)
            {
                 0x00
            })
            Name (MSTR, Buffer (0x80)
            {
                 0x00
            })
            Name (CHAR, Package (0x10)
            {
                "0", 
                "1", 
                "2", 
                "3", 
                "4", 
                "5", 
                "6", 
                "7", 
                "8", 
                "9", 
                "A", 
                "B", 
                "C", 
                "D", 
                "E", 
                "F"
            })
            Method (PNPC, 4, Serialized)
            {
                Store ("DMIX", DMIS)
                Store (Arg0, DMIF)
                Store (Arg1, WDMI)
                Store (Arg2, TPNO)
                Store (Arg3, STNO)
                Store (0x47, APMC)
                If (LEqual (Arg3, Zero))
                {
                    CopyObject (WDMI, TMPS)
                }
                Else
                {
                    CopyObject (WDMI, MSTR)
                }
            }

            Method (G1BD, 2, NotSerialized)
            {
                CreateByteField (Arg0, Arg1, R1BD)
                Return (R1BD)
            }

            Method (WMTI, 3, Serialized)
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                While (One)
                {
                    Store (ToInteger (Arg1), _T_0)
                    If (LEqual (_T_0, One))
                    {
                        Name (RETS, Package (0x0C)
                        {
                            "Copyright (c) 2012, INVENTEC Corporation. All Rights Reserved.", 
                            "1.0.0.0", 
                            "ARION_AB", 
                            "", 
                            "", 
                            "", 
                            "", 
                            "", 
                            "", 
                            "", 
                            "", 
                            ""
                        })
                        PNPC (0x51, Zero, Zero, Zero)
                        ToDecimalString (DerefOf (Index (TMPS, 0x1A)), Local0)
                        ToDecimalString (DerefOf (Index (TMPS, 0x1B)), Local1)
                        Concatenate (Local0, ".", Local2)
                        Concatenate (Local2, Local1, Local3)
                        Store (Local3, Index (RETS, 0x04))
                        PNPC (0x51, One, One, One)
                        Store (ToString (MSTR, Ones), Index (RETS, 0x06))
                        PNPC (0x51, Zero, Zero, 0x02)
                        Store (ToString (MSTR, Ones), Index (RETS, 0x03))
                        PNPC (0x51, Zero, Zero, 0x03)
                        Store (ToString (MSTR, Ones), Index (RETS, 0x05))
                        PNPC (0x51, One, One, 0x02)
                        Store (ToString (MSTR, Ones), Index (RETS, 0x07))
                        PNPC (0x51, One, One, 0x03)
                        Store (ToString (MSTR, Ones), Index (RETS, 0x08))
                        PNPC (0x51, One, One, 0x04)
                        Store (ToString (MSTR, Ones), Index (RETS, 0x09))
                        PNPC (0x51, One, One, Zero)
                        Store ("", Local1)
                        Store (0x0C, Local2)
                        While (LLess (Local2, 0x1C))
                        {
                            Store (DerefOf (Index (TMPS, Local2)), Local0)
                            ShiftRight (Local0, 0x04, Local0)
                            Store (DerefOf (Index (CHAR, Local0)), Local3)
                            Concatenate (Local1, Local3, Local1)
                            Store (DerefOf (Index (TMPS, Local2)), Local0)
                            And (Local0, 0x0F, Local0)
                            Store (DerefOf (Index (CHAR, Local0)), Local3)
                            Concatenate (Local1, Local3, Local1)
                            Increment (Local2)
                        }

                        Store (Local1, Index (RETS, 0x0A))
                        PNPC (0x51, One, 0x0B, One)
                        Store (ToString (MSTR, Ones), Index (RETS, 0x0B))
                        Return (RETS)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            Store (Ones, ITLK)
                            FLNK (0xFF, 0x42)
                            Store (ITLK, FWLC)
                            Store (FWLC, Local0)
                            Return (Local0)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x03))
                            {
                                Store (Arg2, WDMI)
                                Store (Zero, ITLK)
                                FLNK (0xFF, 0x42)
                                If (LGreaterEqual (ITLK, 0x10))
                                {
                                    Store (Zero, Local0)
                                    While (LLess (Local0, 0x20))
                                    {
                                        Store (Zero, Index (DerefOf (Index (FWBF, Zero)), Local0))
                                        Increment (Local0)
                                    }

                                    Store (Zero, Index (FWBF, One))
                                }
                                Else
                                {
                                    Store (0xFF, Index (FWBF, One))
                                }

                                Return (FWBF)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    Name (TBUF, Buffer (0x24)
                                    {
                                         0x00
                                    })
                                    CopyObject (Arg2, TBUF)
                                    Store (One, ITLK)
                                    FLNK (0xFF, 0x42)
                                    If (LLess (ITLK, 0x10))
                                    {
                                        Store (Zero, Local0)
                                        While (LLess (Local0, 0x20))
                                        {
                                            Store (0xFF, Index (DerefOf (Index (FWBF, Zero)), Local0))
                                            Increment (Local0)
                                        }

                                        Store (0xFF, Index (FWBF, One))
                                        Return (FWBF)
                                    }

                                    CreateDWordField (Arg2, 0x20, FKNO)
                                    Store (FKNO, Index (FWBF, One))
                                    Store (Zero, Local0)
                                    Store (DerefOf (Index (TBUF, Local0)), Local1)
                                    While (LLess (Local0, 0x20))
                                    {
                                        Increment (Local0)
                                        Store (DerefOf (Index (TBUF, Local0)), Local2)
                                        Store (Local1, Index (TBUF, Local0))
                                        Store (Local2, Local1)
                                    }

                                    And (FKNO, 0xFF, Index (TBUF, Zero))
                                    Store ("FNKX", DMIS)
                                    If (LEqual (And (FKNO, 0xFF00), 0x0100))
                                    {
                                        Store (DerefOf (Index (TBUF, Zero)), APMD)
                                        Store (0xE3, APMC)
                                        Store (APMD, Index (FWBF, One))
                                    }
                                    Else
                                    {
                                        Store (\_SB.FWEX.FWES (TBUF), Index (FWBF, Zero))
                                        Store (LCMD, Index (FWBF, One))
                                    }

                                    Store ("    ", DMIS)
                                    Return (FWBF)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x05))
                                    {
                                        Store (Arg2, WDMI)
                                        Store (Zero, ITLK)
                                        FLNK (0xFF, 0x42)
                                        If (LGreaterEqual (ITLK, 0x10))
                                        {
                                            Store ("DMIX", DMIS)
                                            Store (0x50, DMIF)
                                            Store (0x47, APMC)
                                            CopyObject (WDMI, TMPS)
                                            Store (Zero, Local0)
                                            While (LLess (Local0, 0x0200))
                                            {
                                                Store (DerefOf (Index (TMPS, Local0)), Index (DerefOf (Index (FBSB, 
                                                    Zero)), Local0))
                                                Increment (Local0)
                                            }

                                            Store (DMIS, Index (FBSB, One))
                                        }
                                        Else
                                        {
                                            Store (Ones, Index (FBSB, One))
                                        }

                                        Return (FBSB)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x06))
                                        {
                                            Name (SBUF, Buffer (0x0204)
                                            {
                                                 0x00
                                            })
                                            CopyObject (Arg2, SBUF)
                                            Store (One, ITLK)
                                            FLNK (0xFF, 0x42)
                                            If (LLess (ITLK, 0x10))
                                            {
                                                Store (Ones, Index (FBSB, One))
                                                Return (FBSB)
                                            }

                                            Store (Zero, Local0)
                                            While (LLess (Local0, 0x0200))
                                            {
                                                Store (DerefOf (Index (SBUF, Local0)), Local1)
                                                Store (Local1, Index (DerefOf (Index (FBSB, Zero)), Local0))
                                                Increment (Local0)
                                            }

                                            CreateDWordField (Arg2, 0x0200, ACNO)
                                            Store (ACNO, Index (FBSB, One))
                                            Store (And (ACNO, 0xFF), Local3)
                                            If (LEqual (Local3, 0x51))
                                            {
                                                PNPC (0x51, DerefOf (Index (SBUF, 0x0201)), DerefOf (Index (SBUF, 
                                                    0x0202)), DerefOf (Index (SBUF, 0x0203)))
                                                If (LEqual (DerefOf (Index (SBUF, Zero)), Zero))
                                                {
                                                    Store (Zero, Local0)
                                                    While (LLess (Local0, 0x0200))
                                                    {
                                                        Store (DerefOf (Index (TMPS, Local0)), Index (DerefOf (Index (FBSB, 
                                                            Zero)), Local0))
                                                        Increment (Local0)
                                                    }
                                                }
                                                Else
                                                {
                                                    Store (Zero, Local0)
                                                    While (LLess (Local0, 0x80))
                                                    {
                                                        Store (DerefOf (Index (MSTR, Local0)), Index (DerefOf (Index (FBSB, 
                                                            Zero)), Local0))
                                                        Increment (Local0)
                                                    }
                                                }

                                                Store (DMIS, Index (FBSB, One))
                                            }
                                            Else
                                            {
                                                If (LEqual (Local3, 0x52))
                                                {
                                                    Store ("DMIX", DMIS)
                                                    Store (0x52, DMIF)
                                                    Store (Zero, WDMI)
                                                    Store (Zero, TPNO)
                                                    Store (Zero, STNO)
                                                    CopyObject (SBUF, WDMI)
                                                    Store (0x47, APMC)
                                                    CopyObject (WDMI, MSTR)
                                                    Store (DMIS, Index (FBSB, One))
                                                }
                                                Else
                                                {
                                                    Add (Local3, 0x00820100, Index (FBSB, One))
                                                }
                                            }

                                            Return (FBSB)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x07))
                                            {
                                                Store (Arg2, WDMI)
                                                Store (Zero, ITLK)
                                                FLNK (0xFF, 0x42)
                                                If (LGreaterEqual (ITLK, 0x10))
                                                {
                                                    Store (Zero, Local0)
                                                    While (LLess (Local0, 0x18))
                                                    {
                                                        Store (Zero, Index (DerefOf (Index (TFWB, Zero)), Local0))
                                                        Increment (Local0)
                                                    }
                                                }
                                                Else
                                                {
                                                    Store (Ones, Index (TFWB, One))
                                                }

                                                Return (TFWB)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08))
                                                {
                                                    Name (TTBF, Buffer (0x1C)
                                                    {
                                                         0x00
                                                    })
                                                    Name (AG00, Buffer (0x04)
                                                    {
                                                         0x00, 0x00, 0x00, 0x00
                                                    })
                                                    Name (AG01, Buffer (0x04)
                                                    {
                                                         0x00, 0x00, 0x00, 0x00
                                                    })
                                                    Name (AG02, Buffer (0x04)
                                                    {
                                                         0x00, 0x00, 0x00, 0x00
                                                    })
                                                    Name (AG03, Buffer (0x04)
                                                    {
                                                         0x00, 0x00, 0x00, 0x00
                                                    })
                                                    Name (AG04, Buffer (0x04)
                                                    {
                                                         0x00, 0x00, 0x00, 0x00
                                                    })
                                                    Name (AG05, Buffer (0x04)
                                                    {
                                                         0x00, 0x00, 0x00, 0x00
                                                    })
                                                    Store (G1BD (Arg2, Zero), Index (AG00, Zero))
                                                    Store (G1BD (Arg2, One), Index (AG00, One))
                                                    Store (G1BD (Arg2, 0x02), Index (AG00, 0x02))
                                                    Store (G1BD (Arg2, 0x03), Index (AG00, 0x03))
                                                    Store (G1BD (Arg2, 0x04), Index (AG01, Zero))
                                                    Store (G1BD (Arg2, 0x05), Index (AG01, One))
                                                    Store (G1BD (Arg2, 0x06), Index (AG01, 0x02))
                                                    Store (G1BD (Arg2, 0x07), Index (AG01, 0x03))
                                                    Store (G1BD (Arg2, 0x08), Index (AG02, Zero))
                                                    Store (G1BD (Arg2, 0x09), Index (AG02, One))
                                                    Store (G1BD (Arg2, 0x0A), Index (AG02, 0x02))
                                                    Store (G1BD (Arg2, 0x0B), Index (AG02, 0x03))
                                                    Store (G1BD (Arg2, 0x0C), Index (AG03, Zero))
                                                    Store (G1BD (Arg2, 0x0D), Index (AG03, One))
                                                    Store (G1BD (Arg2, 0x0E), Index (AG03, 0x02))
                                                    Store (G1BD (Arg2, 0x0F), Index (AG03, 0x03))
                                                    Store (G1BD (Arg2, 0x10), Index (AG04, Zero))
                                                    Store (G1BD (Arg2, 0x11), Index (AG04, One))
                                                    Store (G1BD (Arg2, 0x12), Index (AG04, 0x02))
                                                    Store (G1BD (Arg2, 0x13), Index (AG04, 0x03))
                                                    Store (G1BD (Arg2, 0x14), Index (AG05, Zero))
                                                    Store (G1BD (Arg2, 0x15), Index (AG05, One))
                                                    Store (G1BD (Arg2, 0x16), Index (AG05, 0x02))
                                                    Store (G1BD (Arg2, 0x17), Index (AG05, 0x03))
                                                    Store (One, ITLK)
                                                    FLNK (0xFF, 0x42)
                                                    If (LLess (ITLK, 0x10))
                                                    {
                                                        Store (Zero, Local0)
                                                        While (LLess (Local0, 0x18))
                                                        {
                                                            Store (0xFF, Index (DerefOf (Index (TFWB, Zero)), Local0))
                                                            Increment (Local0)
                                                        }

                                                        Store (Ones, Index (TFWB, One))
                                                        Return (TFWB)
                                                    }

                                                    CreateDWordField (Arg2, 0x18, TFWS)
                                                    Store (TFWS, Index (TFWB, One))
                                                    Store (\_SB.VALZ.SPFC (AG00, AG01, AG02, AG03, AG04, AG05), Local1)
                                                    Store (Zero, Local0)
                                                    Store (Zero, Local3)
                                                    While (LLess (Local0, 0x06))
                                                    {
                                                        Store (DerefOf (Index (Local1, Local0)), Local2)
                                                        Store (Zero, Local5)
                                                        While (LLess (Local5, 0x04))
                                                        {
                                                            And (Local2, 0xFF, Local4)
                                                            ShiftRight (Local2, 0x08, Local2)
                                                            Store (Local4, Index (DerefOf (Index (TFWB, Zero)), Local3))
                                                            Increment (Local3)
                                                            Increment (Local5)
                                                        }

                                                        Increment (Local0)
                                                    }

                                                    Store (One, Index (TFWB, One))
                                                    Return (TFWB)
                                                }
                                                Else
                                                {
                                                    Return (Zero)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
            }

            Name (WQCA, Buffer (0x0A00)
            {
                /* 0000 */   0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,
                /* 0008 */   0xF0, 0x09, 0x00, 0x00, 0x4C, 0x3D, 0x00, 0x00,
                /* 0010 */   0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,
                /* 0018 */   0x18, 0xC4, 0x9D, 0x00, 0x01, 0x06, 0x18, 0x42,
                /* 0020 */   0x10, 0x0B, 0x10, 0x12, 0xA1, 0x83, 0x42, 0x04,
                /* 0028 */   0x12, 0x4B, 0xA4, 0xD8, 0x36, 0x60, 0x30, 0x12,
                /* 0030 */   0x40, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x18, 0x68,
                /* 0038 */   0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,
                /* 0040 */   0xF5, 0xEF, 0x0F, 0x51, 0x1A, 0x14, 0x25, 0xB0,
                /* 0048 */   0x10, 0x08, 0xC9, 0x14, 0xE0, 0x5B, 0x80, 0x63,
                /* 0050 */   0x01, 0x86, 0x05, 0xC8, 0x16, 0x60, 0x19, 0x8A,
                /* 0058 */   0xA0, 0x76, 0x2A, 0x40, 0xAE, 0x00, 0x61, 0x02,
                /* 0060 */   0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x12, 0x05,
                /* 0068 */   0x1A, 0x25, 0x06, 0x42, 0x12, 0x61, 0xE5, 0x1C,
                /* 0070 */   0x5B, 0xCA, 0x05, 0x98, 0x16, 0x20, 0x5C, 0x80,
                /* 0078 */   0x74, 0x0C, 0x8D, 0xA0, 0x6E, 0x30, 0x49, 0x15,
                /* 0080 */   0x20, 0x1A, 0x46, 0x68, 0x05, 0xC1, 0x69, 0x10,
                /* 0088 */   0x47, 0x11, 0x25, 0x0C, 0xC3, 0x33, 0x66, 0xA0,
                /* 0090 */   0x70, 0x41, 0x22, 0x19, 0x26, 0xE8, 0x09, 0x04,
                /* 0098 */   0x09, 0xD3, 0x3C, 0x84, 0x70, 0xC2, 0xB4, 0x8D,
                /* 00A0 */   0x23, 0x3C, 0x6B, 0x86, 0xD5, 0x2C, 0xE2, 0x84,
                /* 00A8 */   0x3D, 0x0B, 0x8E, 0x69, 0x98, 0x50, 0xAD, 0x0F,
                /* 00B0 */   0x41, 0x20, 0x31, 0xA2, 0xC4, 0xAD, 0x6B, 0x2C,
                /* 00B8 */   0x1A, 0xC8, 0x51, 0x61, 0x64, 0x40, 0xC8, 0x33,
                /* 00C0 */   0x9C, 0x90, 0x4B, 0x06, 0x22, 0xEE, 0x87, 0x27,
                /* 00C8 */   0x71, 0x33, 0x93, 0x45, 0x08, 0x39, 0x14, 0xA0,
                /* 00D0 */   0x10, 0x43, 0xB6, 0x60, 0xA4, 0x4D, 0x80, 0x31,
                /* 00D8 */   0x04, 0xA1, 0x1C, 0x66, 0x8C, 0x43, 0x89, 0x1A,
                /* 00E0 */   0x25, 0x5A, 0x84, 0x60, 0x81, 0xA2, 0xC4, 0x8C,
                /* 00E8 */   0x10, 0xB9, 0x32, 0x70, 0x79, 0x43, 0x12, 0x44,
                /* 00F0 */   0x6B, 0x90, 0x02, 0x89, 0xD1, 0xFE, 0x80, 0xD9,
                /* 00F8 */   0x42, 0xF4, 0x17, 0xB0, 0x94, 0x83, 0x80, 0x46,
                /* 0100 */   0xC3, 0xCF, 0x00, 0x09, 0x4A, 0x01, 0xD1, 0x31,
                /* 0108 */   0xA0, 0x4E, 0x01, 0x5A, 0x61, 0x85, 0x71, 0xBE,
                /* 0110 */   0x31, 0xCE, 0x20, 0x81, 0x63, 0x9F, 0x0C, 0xA8,
                /* 0118 */   0x28, 0x08, 0x39, 0x00, 0xA6, 0xB0, 0x3E, 0x12,
                /* 0120 */   0x9C, 0xE6, 0x91, 0x9D, 0xD3, 0x79, 0x1A, 0x22,
                /* 0128 */   0xFA, 0xB9, 0xF9, 0x90, 0xE0, 0x91, 0x3E, 0x1C,
                /* 0130 */   0x60, 0xC6, 0xE8, 0x91, 0x1A, 0xF0, 0x18, 0xD9,
                /* 0138 */   0xE9, 0xC0, 0xFF, 0x7F, 0x40, 0xBC, 0xF7, 0xEB,
                /* 0140 */   0x00, 0x19, 0xBE, 0x01, 0xD9, 0x09, 0xE1, 0xC1,
                /* 0148 */   0x00, 0x2C, 0x3E, 0xD1, 0x74, 0x50, 0x38, 0x87,
                /* 0150 */   0x10, 0xE7, 0x11, 0xE8, 0xE0, 0xCF, 0x38, 0xC8,
                /* 0158 */   0x5B, 0x00, 0x06, 0x22, 0x81, 0x4F, 0x0B, 0x0F,
                /* 0160 */   0x0E, 0xD8, 0x49, 0x1E, 0x5A, 0xE0, 0xE3, 0x6C,
                /* 0168 */   0x56, 0x80, 0xD0, 0x81, 0x8A, 0xE0, 0x9D, 0x80,
                /* 0170 */   0x9D, 0x0D, 0x7C, 0x19, 0x08, 0x49, 0x46, 0x8D,
                /* 0178 */   0x1E, 0x90, 0x87, 0x5A, 0x23, 0xB6, 0xFC, 0x0E,
                /* 0180 */   0x5B, 0xB3, 0x30, 0xF2, 0x01, 0xF1, 0xC8, 0xC3,
                /* 0188 */   0x06, 0x95, 0x82, 0x61, 0x03, 0x85, 0x49, 0x1C,
                /* 0190 */   0x36, 0x58, 0x26, 0x73, 0xA0, 0x27, 0xF7, 0xB8,
                /* 0198 */   0x71, 0x10, 0x27, 0x87, 0x1F, 0x34, 0x18, 0x25,
                /* 01A0 */   0x0C, 0x1A, 0x3D, 0x2C, 0x8F, 0x23, 0x82, 0x0D,
                /* 01A8 */   0x8E, 0x81, 0x8C, 0x18, 0x5C, 0x80, 0x1E, 0xA9,
                /* 01B0 */   0xFF, 0xFF, 0x23, 0x06, 0x8E, 0x73, 0x8C, 0x14,
                /* 01B8 */   0xE5, 0x30, 0x1E, 0x45, 0xD8, 0x2C, 0x1E, 0x32,
                /* 01C0 */   0xCE, 0xE4, 0xA4, 0x9E, 0x5A, 0xD8, 0xA9, 0x01,
                /* 01C8 */   0x38, 0x5C, 0x45, 0x4E, 0xC5, 0xA8, 0x4F, 0x0D,
                /* 01D0 */   0xE0, 0x3E, 0xE7, 0x78, 0xD0, 0xC0, 0x73, 0x70,
                /* 01D8 */   0xFC, 0xD4, 0x00, 0x1C, 0x44, 0x1C, 0x5F, 0xA0,
                /* 01E0 */   0x80, 0x1E, 0xCD, 0x69, 0xE0, 0x03, 0x8F, 0x19,
                /* 01E8 */   0xDA, 0xFF, 0x7F, 0xCC, 0x70, 0x40, 0x3D, 0x66,
                /* 01F0 */   0xF0, 0x0B, 0x1C, 0x33, 0x68, 0x8E, 0x39, 0x1E,
                /* 01F8 */   0x32, 0x70, 0x38, 0x36, 0xC0, 0x51, 0x3A, 0x0B,
                /* 0200 */   0x9D, 0xA7, 0x7C, 0x77, 0x32, 0xC6, 0x91, 0xB2,
                /* 0208 */   0x81, 0xF9, 0xD8, 0x00, 0x2E, 0x0D, 0xC7, 0x06,
                /* 0210 */   0xA0, 0x3A, 0x38, 0xEC, 0x2C, 0x4E, 0x0E, 0x33,
                /* 0218 */   0x68, 0x30, 0x46, 0x07, 0x46, 0x9D, 0x5D, 0xF8,
                /* 0220 */   0xC5, 0xC8, 0xE7, 0x1F, 0x63, 0x24, 0x18, 0x75,
                /* 0228 */   0xC4, 0xF4, 0xFF, 0x3F, 0x62, 0x70, 0x78, 0x18,
                /* 0230 */   0x31, 0x50, 0x38, 0xB7, 0xE1, 0x46, 0x0C, 0x77,
                /* 0238 */   0x64, 0xB8, 0xD1, 0x02, 0x17, 0xE4, 0xA3, 0x05,
                /* 0240 */   0xDB, 0x10, 0x3C, 0x5A, 0xE0, 0x3B, 0x32, 0x8F,
                /* 0248 */   0x16, 0xB8, 0xDC, 0x42, 0x8E, 0x16, 0x0C, 0xFF,
                /* 0250 */   0xFF, 0xD1, 0xE2, 0x4C, 0x8C, 0x16, 0x28, 0x8F,
                /* 0258 */   0xCC, 0xA3, 0x05, 0x2E, 0x57, 0xB1, 0xA3, 0x05,
                /* 0260 */   0x9B, 0x8A, 0xD1, 0x02, 0xE5, 0x91, 0x79, 0xB4,
                /* 0268 */   0xC0, 0xC5, 0xEA, 0x68, 0x41, 0x37, 0x46, 0x8F,
                /* 0270 */   0x92, 0xFF, 0xFF, 0x47, 0x0B, 0x3C, 0x47, 0xE6,
                /* 0278 */   0xD1, 0x02, 0x97, 0xC3, 0xE4, 0xD1, 0x82, 0x0D,
                /* 0280 */   0xDE, 0xA3, 0x05, 0xBE, 0x23, 0xF3, 0x68, 0xC1,
                /* 0288 */   0x27, 0x0F, 0x18, 0x3D, 0x5C, 0x4F, 0x21, 0x42,
                /* 0290 */   0xF0, 0x57, 0xD2, 0x37, 0xC5, 0xD7, 0x87, 0xE7,
                /* 0298 */   0x07, 0x5F, 0x78, 0x0D, 0x1E, 0xE5, 0x45, 0xD7,
                /* 02A0 */   0x73, 0x78, 0xCD, 0x65, 0x04, 0x16, 0x39, 0x30,
                /* 02A8 */   0x34, 0x3C, 0x3F, 0x0C, 0x46, 0x3F, 0x9A, 0x73,
                /* 02B0 */   0x89, 0x7C, 0x34, 0x51, 0x4E, 0xE1, 0x70, 0x7C,
                /* 02B8 */   0x24, 0x8E, 0xF0, 0xAC, 0x1B, 0xE2, 0xFF, 0xFF,
                /* 02C0 */   0x5A, 0x68, 0x84, 0x23, 0x8A, 0x72, 0xAE, 0x67,
                /* 02C8 */   0xEF, 0x63, 0x32, 0x1F, 0x10, 0x79, 0xF5, 0x19,
                /* 02D0 */   0xD6, 0xE7, 0x30, 0x45, 0x7F, 0x08, 0x50, 0x18,
                /* 02D8 */   0x1F, 0x99, 0x81, 0x53, 0x98, 0x23, 0x33, 0xD0,
                /* 02E0 */   0xBA, 0x27, 0xC4, 0x38, 0xF0, 0x58, 0xBE, 0x22,
                /* 02E8 */   0xF8, 0xB8, 0xCC, 0x31, 0x42, 0x85, 0xC4, 0x1C,
                /* 02F0 */   0x40, 0x4F, 0xEC, 0xC9, 0x99, 0x9D, 0x15, 0x3C,
                /* 02F8 */   0x99, 0xE7, 0x5B, 0x76, 0x66, 0x06, 0xC7, 0x45,
                /* 0300 */   0xD9, 0xE7, 0xE4, 0x03, 0x78, 0x49, 0x7E, 0x0B,
                /* 0308 */   0xF0, 0x29, 0xF9, 0x99, 0xD9, 0x38, 0xAF, 0xCB,
                /* 0310 */   0x3E, 0x33, 0xB3, 0x71, 0x3E, 0x33, 0x1B, 0xE3,
                /* 0318 */   0x7D, 0x39, 0x66, 0xAC, 0x28, 0x9D, 0xA1, 0x08,
                /* 0320 */   0x35, 0x68, 0x8C, 0x37, 0x66, 0xA3, 0x04, 0x8A,
                /* 0328 */   0x10, 0xED, 0x99, 0x99, 0x87, 0x79, 0xD6, 0xEA,
                /* 0330 */   0x1C, 0x60, 0x19, 0x27, 0x01, 0x19, 0x79, 0x53,
                /* 0338 */   0xF8, 0xB8, 0x81, 0xC2, 0x7F, 0x57, 0x38, 0x2F,
                /* 0340 */   0x8F, 0xF3, 0x89, 0x99, 0x1D, 0xEB, 0x7C, 0x62,
                /* 0348 */   0x06, 0x0E, 0xFF, 0xFF, 0xE3, 0x06, 0x70, 0x19,
                /* 0350 */   0x19, 0xEE, 0xE0, 0xE0, 0x71, 0x71, 0x78, 0x9F,
                /* 0358 */   0x16, 0x5E, 0x27, 0x8A, 0x1D, 0x13, 0x95, 0x75,
                /* 0360 */   0xEA, 0x80, 0x7E, 0x11, 0xF0, 0x99, 0xC0, 0xD3,
                /* 0368 */   0x7E, 0xDA, 0x65, 0x4E, 0x0E, 0x9A, 0xE8, 0x29,
                /* 0370 */   0x3C, 0xC2, 0x7A, 0x36, 0xEC, 0x9C, 0xF1, 0xBC,
                /* 0378 */   0xC1, 0xE2, 0x1E, 0x98, 0x81, 0xEE, 0xD1, 0x04,
                /* 0380 */   0x37, 0x6A, 0xB8, 0x63, 0x83, 0x73, 0x6A, 0x81,
                /* 0388 */   0x3F, 0x60, 0x7E, 0x77, 0x30, 0x81, 0x87, 0xEC,
                /* 0390 */   0x53, 0x0B, 0xFC, 0x13, 0x86, 0x91, 0x5E, 0x08,
                /* 0398 */   0x5E, 0xC7, 0x8D, 0xF0, 0x32, 0xCE, 0x0E, 0x2D,
                /* 03A0 */   0xE0, 0xF8, 0xFF, 0x1F, 0x5A, 0x00, 0x4E, 0xCC,
                /* 03A8 */   0xE9, 0x11, 0xE0, 0xA1, 0x05, 0xAC, 0x57, 0x83,
                /* 03B0 */   0xF3, 0x7B, 0x08, 0xE8, 0x6D, 0x88, 0x02, 0x79,
                /* 03B8 */   0x0B, 0xA8, 0xED, 0xB2, 0x22, 0xA4, 0x17, 0x81,
                /* 03C0 */   0x47, 0x16, 0x1F, 0x5A, 0x8C, 0xF9, 0xB6, 0x62,
                /* 03C8 */   0x94, 0xF3, 0x08, 0xF4, 0x70, 0x10, 0xCA, 0xB0,
                /* 03D0 */   0x87, 0x19, 0x30, 0x64, 0x90, 0x18, 0x06, 0x7F,
                /* 03D8 */   0x58, 0x88, 0x15, 0xC9, 0x87, 0x16, 0x60, 0xFA,
                /* 03E0 */   0xFF, 0x3F, 0xB4, 0x00, 0xFF, 0x37, 0x89, 0x0F,
                /* 03E8 */   0x2D, 0x00, 0xA7, 0x4E, 0x18, 0x3E, 0xB4, 0x80,
                /* 03F0 */   0xE3, 0xFF, 0x7F, 0x68, 0x01, 0xB7, 0xCC, 0xC7,
                /* 03F8 */   0xAB, 0x09, 0x24, 0xF8, 0x54, 0x20, 0x61, 0x30,
                /* 0400 */   0xA8, 0x43, 0x0B, 0x70, 0x8A, 0x73, 0x68, 0x01,
                /* 0408 */   0xEA, 0xA3, 0x78, 0x37, 0x39, 0xC0, 0x97, 0x16,
                /* 0410 */   0x78, 0x27, 0x37, 0x30, 0x1C, 0x0F, 0x1E, 0xDD,
                /* 0418 */   0x7C, 0x0C, 0x78, 0x3C, 0x78, 0x69, 0x39, 0x85,
                /* 0420 */   0xB7, 0x95, 0x10, 0x67, 0xF9, 0x28, 0xE0, 0x53,
                /* 0428 */   0x8B, 0x2F, 0x2F, 0x9E, 0xC2, 0x93, 0x9B, 0x11,
                /* 0430 */   0xDE, 0x0D, 0x62, 0xBD, 0xBC, 0xF8, 0xDE, 0x66,
                /* 0438 */   0xC4, 0x13, 0x0D, 0xF4, 0xD2, 0x12, 0xC3, 0xB7,
                /* 0440 */   0x17, 0x43, 0x3D, 0xB5, 0xB0, 0xA0, 0x6F, 0x72,
                /* 0448 */   0x7D, 0x05, 0x7C, 0x6A, 0x81, 0x83, 0x7F, 0x5A,
                /* 0450 */   0xC7, 0xF3, 0x0E, 0xE1, 0x53, 0x0B, 0x98, 0xFE,
                /* 0458 */   0xFF, 0xA7, 0x16, 0xE0, 0x3B, 0x32, 0xDC, 0xA9,
                /* 0460 */   0x05, 0xDE, 0x01, 0xC2, 0xA7, 0x16, 0x70, 0x8D,
                /* 0468 */   0x19, 0xE6, 0xF0, 0x8F, 0x19, 0x7C, 0x67, 0x16,
                /* 0470 */   0xE0, 0x30, 0x66, 0xB0, 0x8D, 0x8C, 0x8D, 0x19,
                /* 0478 */   0x18, 0x9E, 0x5F, 0xD8, 0x98, 0xF1, 0xFF, 0xFF,
                /* 0480 */   0x31, 0xC3, 0x05, 0xF4, 0x98, 0x81, 0xED, 0xC8,
                /* 0488 */   0xD8, 0x98, 0x81, 0xE1, 0xA5, 0xE4, 0x98, 0xC1,
                /* 0490 */   0x37, 0x1E, 0x8F, 0x19, 0xD8, 0x8E, 0x8C, 0x8D,
                /* 0498 */   0x19, 0xF8, 0xFD, 0xFF, 0x87, 0x72, 0x56, 0x1E,
                /* 04A0 */   0x33, 0xD8, 0x8E, 0x61, 0x1E, 0x33, 0xB0, 0x1D,
                /* 04A8 */   0x19, 0x1B, 0x33, 0x30, 0xBC, 0x0A, 0x1D, 0x33,
                /* 04B0 */   0xF8, 0x40, 0x3D, 0x66, 0x60, 0x3B, 0x32, 0x36,
                /* 04B8 */   0x66, 0xE0, 0xF1, 0xFF, 0x8F, 0x0F, 0xA1, 0x43,
                /* 04C0 */   0x20, 0x0E, 0xD8, 0xF7, 0xB1, 0x03, 0x35, 0x44,
                /* 04C8 */   0xD0, 0xD7, 0x43, 0x13, 0x0C, 0x7B, 0x06, 0x04,
                /* 04D0 */   0xD5, 0xBF, 0x4A, 0x83, 0x06, 0x02, 0x07, 0x3D,
                /* 04D8 */   0xDC, 0xA0, 0xE1, 0x0E, 0x0D, 0x7F, 0x04, 0x04,
                /* 04E0 */   0xDF, 0xE9, 0x10, 0x77, 0x04, 0x84, 0x77, 0x5E,
                /* 04E8 */   0x63, 0x43, 0x78, 0x06, 0x04, 0x7E, 0x22, 0x1E,
                /* 04F0 */   0x09, 0x3E, 0xAD, 0xFA, 0x5C, 0x21, 0xA1, 0x2F,
                /* 04F8 */   0x01, 0x0A, 0xE3, 0x83, 0x84, 0xCF, 0x80, 0x70,
                /* 0500 */   0x25, 0xC1, 0xA1, 0x46, 0xE8, 0xB1, 0x3F, 0x8D,
                /* 0508 */   0x1E, 0xE9, 0x59, 0x1F, 0x88, 0x27, 0xFF, 0x20,
                /* 0510 */   0x01, 0xE3, 0x78, 0xE0, 0x69, 0x9D, 0x92, 0xB5,
                /* 0518 */   0x9F, 0xEC, 0xC8, 0xFF, 0x7F, 0x8E, 0xEC, 0x8C,
                /* 0520 */   0xC0, 0xD1, 0xF8, 0xC9, 0x10, 0xAC, 0xF2, 0x8F,
                /* 0528 */   0x07, 0xA0, 0x99, 0xF5, 0x6B, 0x21, 0xE6, 0x7C,
                /* 0530 */   0x60, 0xCC, 0x43, 0x7A, 0x17, 0x34, 0xDE, 0xEB,
                /* 0538 */   0xA0, 0x51, 0x8F, 0xCA, 0xC7, 0x04, 0x9F, 0x07,
                /* 0540 */   0x7D, 0x2E, 0x34, 0xCE, 0x71, 0x9D, 0x7C, 0xA4,
                /* 0548 */   0x47, 0x08, 0xDF, 0x08, 0xE1, 0x9C, 0x08, 0xC1,
                /* 0550 */   0x70, 0x23, 0x66, 0xC7, 0x85, 0x07, 0xC2, 0x10,
                /* 0558 */   0xEF, 0x0B, 0xBE, 0x09, 0x86, 0x08, 0xF2, 0x92,
                /* 0560 */   0xF0, 0x44, 0xC8, 0x2E, 0x21, 0x01, 0x43, 0x44,
                /* 0568 */   0x09, 0x69, 0x90, 0xC7, 0x62, 0x83, 0xC4, 0x7A,
                /* 0570 */   0x1E, 0x8C, 0x12, 0xF2, 0xB5, 0xD8, 0x08, 0x8F,
                /* 0578 */   0xC5, 0x3E, 0x32, 0x84, 0x79, 0x22, 0x64, 0xE1,
                /* 0580 */   0x4E, 0x9A, 0x34, 0xD2, 0x68, 0x50, 0x07, 0x06,
                /* 0588 */   0x1F, 0x0D, 0x7C, 0x2C, 0x78, 0x90, 0xF4, 0xB1,
                /* 0590 */   0xC2, 0x20, 0xC7, 0xE5, 0x43, 0xC3, 0x33, 0x81,
                /* 0598 */   0x47, 0xC6, 0xB0, 0x1E, 0x40, 0xD8, 0x21, 0x01,
                /* 05A0 */   0xEF, 0x1A, 0x50, 0xB7, 0x83, 0xE7, 0x0E, 0x58,
                /* 05A8 */   0xE7, 0x0F, 0xFC, 0x49, 0x03, 0xFE, 0x78, 0x7C,
                /* 05B0 */   0x18, 0xF0, 0x7C, 0x4E, 0xF8, 0xA9, 0x80, 0x0F,
                /* 05B8 */   0x82, 0x1F, 0x54, 0xF8, 0x89, 0x96, 0x1F, 0x15,
                /* 05C0 */   0x8E, 0xE3, 0xFF, 0x9F, 0xC0, 0xC7, 0x17, 0x1F,
                /* 05C8 */   0xF7, 0xC0, 0x31, 0x1E, 0xF8, 0x8A, 0x0F, 0x1A,
                /* 05D0 */   0xE4, 0xE2, 0xE0, 0xF9, 0xFA, 0xE4, 0x81, 0x3D,
                /* 05D8 */   0x88, 0xC0, 0x9B, 0xC0, 0x89, 0xD7, 0x3A, 0x02,
                /* 05E0 */   0x1D, 0x6E, 0xD9, 0x49, 0xE0, 0x51, 0x21, 0xCA,
                /* 05E8 */   0x73, 0x82, 0xEF, 0x15, 0x3E, 0x27, 0xF0, 0xB3,
                /* 05F0 */   0x08, 0xF0, 0x88, 0x44, 0xAF, 0x21, 0x58, 0xFA,
                /* 05F8 */   0x5A, 0x65, 0xE3, 0xC0, 0x44, 0x07, 0xE1, 0x10,
                /* 0600 */   0x87, 0x04, 0x8D, 0xE0, 0x85, 0xE0, 0xF8, 0x3D,
                /* 0608 */   0x99, 0xB8, 0x4F, 0x08, 0x3E, 0x47, 0x3C, 0x17,
                /* 0610 */   0x33, 0xE1, 0x70, 0x3A, 0x78, 0x1A, 0xC2, 0x92,
                /* 0618 */   0x29, 0x74, 0xD0, 0xF5, 0x80, 0x0C, 0x67, 0x89,
                /* 0620 */   0x70, 0x14, 0xC4, 0x07, 0x00, 0x9F, 0x81, 0x6C,
                /* 0628 */   0xE3, 0x5C, 0x8D, 0x9E, 0xE5, 0xDB, 0x86, 0xA7,
                /* 0630 */   0x71, 0x14, 0xB8, 0xA8, 0x47, 0x23, 0x7A, 0x64,
                /* 0638 */   0xC0, 0xE3, 0x3D, 0x5D, 0x3C, 0x39, 0x78, 0x1E,
                /* 0640 */   0x9E, 0xE4, 0x13, 0x0F, 0x78, 0x86, 0x87, 0xD9,
                /* 0648 */   0xE4, 0x99, 0xF0, 0xCB, 0x87, 0x2F, 0x20, 0xC6,
                /* 0650 */   0xE4, 0x87, 0x27, 0x18, 0xA8, 0x27, 0x91, 0xC0,
                /* 0658 */   0xFF, 0xFF, 0x21, 0x92, 0x63, 0x02, 0xF4, 0x11,
                /* 0660 */   0xBC, 0x26, 0x54, 0x3D, 0x11, 0xDD, 0x1E, 0xAC,
                /* 0668 */   0xEE, 0x18, 0x4C, 0x26, 0x73, 0x38, 0x6C, 0x96,
                /* 0670 */   0x18, 0x81, 0x67, 0x05, 0x50, 0x00, 0xF9, 0x6A,
                /* 0678 */   0x60, 0xA5, 0xC7, 0x03, 0x3A, 0x91, 0x10, 0x61,
                /* 0680 */   0xA2, 0x19, 0x1E, 0x73, 0x96, 0xF2, 0x09, 0x8B,
                /* 0688 */   0x0F, 0x8E, 0x0F, 0xD8, 0x07, 0x1B, 0x86, 0x7D,
                /* 0690 */   0x46, 0x6F, 0xC5, 0x9E, 0xCC, 0x5B, 0xC5, 0xF3,
                /* 0698 */   0x2D, 0x06, 0xD6, 0x47, 0x00, 0x0E, 0x6B, 0xB4,
                /* 06A0 */   0xB0, 0x47, 0xFE, 0x48, 0xE1, 0xEB, 0x88, 0xEF,
                /* 06A8 */   0x2E, 0x0C, 0xD6, 0x07, 0x11, 0x70, 0x9C, 0x39,
                /* 06B0 */   0x7C, 0x1C, 0x00, 0x87, 0xC7, 0x29, 0x91, 0x39,
                /* 06B8 */   0x3C, 0x10, 0x80, 0x47, 0xEE, 0x69, 0x02, 0x2D,
                /* 06C0 */   0x7A, 0x79, 0xC2, 0x7D, 0x8F, 0xF2, 0x04, 0xCE,
                /* 06C8 */   0xFA, 0x15, 0x0B, 0x2B, 0xF4, 0x34, 0x81, 0x3A,
                /* 06D0 */   0x47, 0x58, 0xE0, 0x69, 0x02, 0x25, 0x09, 0x8E,
                /* 06D8 */   0x82, 0xF8, 0x34, 0xE1, 0xA3, 0xBE, 0x0F, 0x68,
                /* 06E0 */   0xB8, 0x71, 0xF8, 0x14, 0x70, 0x5C, 0x1E, 0xC3,
                /* 06E8 */   0x19, 0x1D, 0xCF, 0x03, 0xC1, 0xB1, 0xFB, 0x08,
                /* 06F0 */   0xC2, 0x82, 0x1D, 0x27, 0xA0, 0xFC, 0xFF, 0x8F,
                /* 06F8 */   0x13, 0xF8, 0x23, 0x02, 0x6E, 0xC0, 0x70, 0x47,
                /* 0700 */   0x02, 0xEF, 0x28, 0x01, 0xF7, 0x60, 0x06, 0xBE,
                /* 0708 */   0x53, 0x04, 0xF0, 0x08, 0x7C, 0xC0, 0xA3, 0xA7,
                /* 0710 */   0x08, 0xF0, 0x1C, 0x03, 0x7C, 0x8A, 0x00, 0x2E,
                /* 0718 */   0x87, 0x3D, 0xF8, 0xA7, 0x01, 0xF0, 0x1C, 0x1E,
                /* 0720 */   0xF8, 0x6D, 0xC2, 0x87, 0x07, 0x9C, 0xB6, 0x55,
                /* 0728 */   0xEA, 0x1C, 0x81, 0xD3, 0xB8, 0x40, 0x81, 0x1E,
                /* 0730 */   0xF9, 0xA9, 0xFB, 0xB8, 0xCF, 0xEE, 0x3C, 0xBE,
                /* 0738 */   0x78, 0x99, 0xA0, 0x2E, 0x38, 0x1D, 0x20, 0x3C,
                /* 0740 */   0x52, 0x2B, 0xA2, 0xD0, 0xFF, 0x5F, 0xCB, 0x39,
                /* 0748 */   0x02, 0x95, 0xFE, 0x34, 0x41, 0x41, 0x0C, 0xE8,
                /* 0750 */   0x68, 0x07, 0x2D, 0x34, 0x8C, 0x5D, 0x9E, 0xAD,
                /* 0758 */   0x68, 0x98, 0x33, 0x04, 0x1D, 0x8C, 0xC7, 0xC9,
                /* 0760 */   0xCF, 0x76, 0xBE, 0x20, 0x18, 0xD7, 0x67, 0x05,
                /* 0768 */   0xDC, 0x28, 0xE1, 0x0E, 0x82, 0xAB, 0x39, 0x17,
                /* 0770 */   0xA0, 0x86, 0xE0, 0xE3, 0x03, 0xE6, 0x8E, 0xF4,
                /* 0778 */   0xB2, 0x05, 0x2E, 0x7D, 0xA7, 0x07, 0x90, 0xDF,
                /* 0780 */   0x09, 0x11, 0xB3, 0x46, 0xDD, 0x59, 0x3D, 0x6B,
                /* 0788 */   0x83, 0x78, 0xD6, 0xBE, 0xAD, 0xF9, 0xA6, 0x84,
                /* 0790 */   0xBB, 0x24, 0x78, 0x0E, 0xEF, 0x75, 0xBE, 0xAA,
                /* 0798 */   0x99, 0x60, 0x84, 0x9B, 0x1A, 0xB4, 0x9B, 0x08,
                /* 07A0 */   0xEE, 0xE6, 0x01, 0xEF, 0xB2, 0x42, 0xEE, 0x44,
                /* 07A8 */   0x20, 0x3B, 0x2A, 0xB0, 0x73, 0x25, 0xF6, 0xFA,
                /* 07B0 */   0x01, 0xAE, 0xFF, 0xFF, 0xF5, 0x03, 0xF6, 0x3D,
                /* 07B8 */   0xC6, 0xD7, 0x0F, 0x70, 0x41, 0xFA, 0xFA, 0x01,
                /* 07C0 */   0x5C, 0x2F, 0xA8, 0xB8, 0x9B, 0x04, 0xDC, 0x99,
                /* 07C8 */   0xFB, 0xCC, 0x81, 0x57, 0x7B, 0xFB, 0x40, 0xAB,
                /* 07D0 */   0xBE, 0x7D, 0x20, 0x86, 0xE9, 0x7B, 0xA5, 0xA7,
                /* 07D8 */   0xF4, 0x12, 0xF1, 0x96, 0xC3, 0x94, 0xDE, 0x3E,
                /* 07E0 */   0x50, 0xF7, 0x10, 0x2B, 0x3B, 0x38, 0xA0, 0x2E,
                /* 07E8 */   0x20, 0x86, 0x33, 0x88, 0x01, 0x1D, 0xF4, 0xE0,
                /* 07F0 */   0x00, 0xFD, 0x46, 0xC4, 0xAF, 0x1F, 0xF0, 0xEE,
                /* 07F8 */   0xCC, 0xE0, 0x19, 0x05, 0xEE, 0xFE, 0x01, 0xF3,
                /* 0800 */   0xDA, 0xF0, 0x0E, 0x01, 0xFB, 0xFF, 0x7F, 0x87,
                /* 0808 */   0x00, 0xC3, 0x25, 0x04, 0x58, 0x08, 0x99, 0x3C,
                /* 0810 */   0x2A, 0xFA, 0x55, 0x83, 0x82, 0x78, 0xF2, 0x8E,
                /* 0818 */   0x75, 0xFC, 0x83, 0x72, 0x90, 0x62, 0x23, 0xC5,
                /* 0820 */   0x5D, 0x43, 0x00, 0xFB, 0xA7, 0x3E, 0x7E, 0x0D,
                /* 0828 */   0x01, 0x3E, 0xFF, 0xFF, 0x6B, 0x08, 0x70, 0x38,
                /* 0830 */   0x7C, 0xE0, 0x0F, 0x55, 0x70, 0x0E, 0xAA, 0xEC,
                /* 0838 */   0x50, 0x05, 0x30, 0xF2, 0xFF, 0x7F, 0xFB, 0x00,
                /* 0840 */   0x3E, 0x47, 0x05, 0x76, 0xFB, 0x00, 0x3C, 0xC0,
                /* 0848 */   0xF2, 0xDB, 0x07, 0xE0, 0x63, 0xE6, 0x3E, 0x54,
                /* 0850 */   0x81, 0xE3, 0x0E, 0xC0, 0x0E, 0x55, 0xC0, 0xED,
                /* 0858 */   0xFF, 0x7F, 0xA8, 0x02, 0xEC, 0xDC, 0x21, 0xE0,
                /* 0860 */   0x1C, 0xAA, 0x00, 0xEF, 0xD7, 0x10, 0x60, 0xF5,
                /* 0868 */   0xFF, 0xBF, 0x86, 0x80, 0xF7, 0x96, 0xE0, 0x6B,
                /* 0870 */   0x08, 0xE0, 0xE5, 0xF0, 0x81, 0x57, 0x78, 0x0D,
                /* 0878 */   0x41, 0x1D, 0x0A, 0xAC, 0xF3, 0xA5, 0xA0, 0x2B,
                /* 0880 */   0xB0, 0xC7, 0x79, 0x72, 0x4F, 0x55, 0x70, 0x94,
                /* 0888 */   0xDD, 0x43, 0x50, 0x9A, 0x4E, 0x55, 0x80, 0xDE,
                /* 0890 */   0xFF, 0xFF, 0x05, 0x04, 0xCC, 0x32, 0x66, 0x8D,
                /* 0898 */   0x0A, 0x3E, 0x6B, 0x0A, 0xE2, 0x59, 0x3B, 0xD4,
                /* 08A0 */   0x69, 0x06, 0x7A, 0x88, 0xEB, 0x07, 0xE8, 0x45,
                /* 08A8 */   0x5E, 0x3F, 0x40, 0x76, 0x56, 0xC0, 0xDC, 0x3F,
                /* 08B0 */   0x80, 0xD7, 0x45, 0x1E, 0x7C, 0x1E, 0x2E, 0xF2,
                /* 08B8 */   0x80, 0x88, 0xFF, 0xFF, 0x55, 0x02, 0x3B, 0x75,
                /* 08C0 */   0x7E, 0xEA, 0xC0, 0xAB, 0xBE, 0x80, 0xA0, 0xB5,
                /* 08C8 */   0x5F, 0x40, 0x90, 0x07, 0x2B, 0x18, 0x6A, 0x2F,
                /* 08D0 */   0x20, 0xA8, 0xBB, 0x88, 0xB5, 0x9D, 0x1D, 0x50,
                /* 08D8 */   0x6A, 0x0E, 0x56, 0x14, 0xC4, 0x80, 0x8E, 0x7A,
                /* 08E0 */   0x76, 0x80, 0x7E, 0x11, 0xF1, 0xC1, 0x0A, 0x98,
                /* 08E8 */   0x8E, 0xF2, 0x35, 0x02, 0x38, 0x5C, 0x44, 0x80,
                /* 08F0 */   0x85, 0x94, 0xD9, 0xA3, 0xC2, 0x5F, 0x37, 0x28,
                /* 08F8 */   0x88, 0x67, 0xEF, 0xDB, 0x99, 0x4F, 0x56, 0xE0,
                /* 0900 */   0xB8, 0x8A, 0xC0, 0xFF, 0xFF, 0x5F, 0x45, 0x00,
                /* 0908 */   0xBF, 0xE0, 0xBE, 0x8A, 0x00, 0x6E, 0xCE, 0x56,
                /* 0910 */   0x10, 0x6C, 0xFA, 0xD4, 0x68, 0xD4, 0xAA, 0x41,
                /* 0918 */   0x99, 0x1A, 0x65, 0x1A, 0xD4, 0xEA, 0x53, 0xA9,
                /* 0920 */   0x31, 0x63, 0xD6, 0xA0, 0x24, 0xFB, 0xB1, 0xA0,
                /* 0928 */   0xB1, 0x5A, 0x3E, 0x85, 0x40, 0x1C, 0xE0, 0xCF,
                /* 0930 */   0x21, 0x10, 0x07, 0x59, 0xB2, 0x40, 0x1C, 0xE6,
                /* 0938 */   0x83, 0x21, 0x10, 0x87, 0xFA, 0xC5, 0x08, 0xC4,
                /* 0940 */   0x71, 0x16, 0x24, 0x40, 0x62, 0x02, 0x84, 0x45,
                /* 0948 */   0x50, 0x01, 0xC2, 0xC4, 0x2F, 0x4F, 0x20, 0x96,
                /* 0950 */   0xBD, 0x3C, 0x81, 0x58, 0xF0, 0x03, 0x42, 0xFF,
                /* 0958 */   0x7F, 0x10, 0x4B, 0x7F, 0x14, 0x08, 0x84, 0x18,
                /* 0960 */   0x01, 0xA6, 0x6F, 0x08, 0x81, 0x10, 0x2B, 0x03,
                /* 0968 */   0xA1, 0x4B, 0x14, 0x88, 0x23, 0x99, 0x01, 0x61,
                /* 0970 */   0xC1, 0xFE, 0x1F, 0x02, 0x71, 0x3C, 0x37, 0x20,
                /* 0978 */   0x2C, 0xE4, 0x03, 0x42, 0x20, 0x8E, 0x6A, 0x07,
                /* 0980 */   0x84, 0xC5, 0xD4, 0x03, 0x4A, 0x0D, 0x81, 0x30,
                /* 0988 */   0x59, 0x8A, 0x40, 0x58, 0x68, 0x47, 0x10, 0x37,
                /* 0990 */   0xA2, 0x3B, 0x4A, 0x49, 0x40, 0x4C, 0xA8, 0x26,
                /* 0998 */   0x20, 0x26, 0x1B, 0x44, 0x40, 0x0E, 0x21, 0x0A,
                /* 09A0 */   0x88, 0x25, 0x02, 0x11, 0x90, 0xB5, 0x9B, 0x02,
                /* 09A8 */   0x62, 0x49, 0x40, 0x04, 0xE4, 0x8C, 0xAE, 0x80,
                /* 09B0 */   0x58, 0x60, 0x10, 0x01, 0x39, 0xE8, 0x33, 0x41,
                /* 09B8 */   0x40, 0x8E, 0x0D, 0x22, 0x20, 0x8B, 0xF1, 0x05,
                /* 09C0 */   0xC4, 0x94, 0x81, 0x08, 0xC8, 0x1A, 0x1E, 0x62,
                /* 09C8 */   0x02, 0xB2, 0x22, 0x10, 0x01, 0x59, 0xAB, 0x32,
                /* 09D0 */   0x20, 0x26, 0x1C, 0x44, 0x03, 0x26, 0xCE, 0x80,
                /* 09D8 */   0x98, 0x7C, 0x10, 0x01, 0x39, 0xD6, 0x5B, 0x40,
                /* 09E0 */   0x40, 0xCE, 0x08, 0x22, 0x20, 0xA7, 0xD1, 0x06,
                /* 09E8 */   0xC4, 0xB2, 0x81, 0x08, 0xC8, 0xD9, 0xC5, 0x01,
                /* 09F0 */   0x31, 0x21, 0xE6, 0x80, 0x98, 0x84, 0xC7, 0x46,
                /* 09F8 */   0x20, 0x22, 0x08, 0x44, 0x40, 0xFE, 0xFF, 0x03
            })
        }
    }

    Scope (\_SB.PCI0.LPC0)
    {
        Device (ADP0)
        {
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                \_SB
            })
            Name (_HID, "ACPI0003")  // _HID: Hardware ID
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                If (ECOK)
                {
                    And (ShiftRight (EC92, 0x03), One, Local0)
                    If (Local0)
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                \_SB
            })
            Name (BIF1, Package (0x0D)
            {
                Zero, 
                0x10CC, 
                0x10CC, 
                One, 
                0x3A98, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "PA3478U-1BAS/BRS", 
                "0000", 
                "Li-ion", 
                ""
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (ECOK)
                {
                    If (And (EC94, One))
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (BST1, Package (0x04)
            {
                One, 
                0x0A90, 
                0x1000, 
                0x23A0
            })
            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                If (ECOK)
                {
                    Store (ECAE, Local0)
                    Store (ECAF, Local5)
                    ShiftLeft (Local5, 0x08, Local5)
                    Add (Local0, Local5, Local0)
                    Store (Local0, Index (BIF1, 0x04))
                    Store (Local0, Local2)
                    Store (ECAA, Local0)
                    Store (ECAB, Local5)
                    ShiftLeft (Local5, 0x08, Local5)
                    Add (Local0, Local5, Local0)
                    Multiply (Local0, Local2, Local0)
                    Divide (Local0, 0x03E8, Local3, Local0)
                    Store (Local0, Index (BIF1, 0x02))
                    Store (ECAC, Local1)
                    Store (ECAD, Local5)
                    ShiftLeft (Local5, 0x08, Local5)
                    Add (Local1, Local5, Local1)
                    Multiply (Local1, Local2, Local1)
                    Divide (Local1, 0x03E8, Local3, Local1)
                    Store (Local1, Index (BIF1, One))
                    Store (Local0, Index (BIF1, 0x08))
                    Concatenate (BCM1, BCM2, Local0)
                    Store (Local0, Index (BIF1, 0x09))
                    Store (ECB9, Local0)
                    Store (ECBA, Local5)
                    ShiftLeft (Local5, 0x08, Local5)
                    Add (Local0, Local5, Local0)
                    Store (ITOS (Local0), Local1)
                    Store (Local1, Index (BIF1, 0x0A))
                }
                Else
                {
                    Store (Ones, Index (BIF1, One))
                    Store (Ones, Index (BIF1, 0x04))
                }

                Return (BIF1)
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                If (ECOK)
                {
                    And (ShiftRight (EC94, 0x04), One, Local1)
                    And (EC95, One, Local0)
                    ShiftLeft (Local1, One, Local2)
                    Or (Local0, Local2, Local3)
                    Store (ECC6, Local2)
                    Multiply (Local2, 0x0100, Local1)
                    Store (ECC5, Local0)
                    Add (Local1, Local0, Local1)
                    Add (ECAE, ShiftLeft (ECAF, 0x08), Local4)
                    Multiply (Local1, Local4, Local1)
                    Divide (Local1, 0x03E8, Local0, Local1)
                    Store (Local1, Index (BST1, One))
                    Store (ECA4, Local0)
                    If (LLess (Local0, 0x0F))
                    {
                        Or (Local3, 0x04, Local3)
                    }

                    If (LEqual (CTEG, One))
                    {
                        Or (Local3, 0x04, Local3)
                    }

                    Store (Local3, Index (BST1, Zero))
                    Store (DerefOf (Index (BIF1, 0x02)), Local1)
                    Multiply (Local1, Local0, Local2)
                    Divide (Local2, 0x64, Local3, Local2)
                    Add (Local2, One, Local2)
                    Store (Local2, Index (BST1, 0x02))
                    Store (DerefOf (Index (BIF1, 0x04)), Local3)
                    Store (Local3, Index (BST1, 0x03))
                }
                Else
                {
                    Store (One, Index (BST1, Zero))
                    Store (Ones, Index (BST1, One))
                    Store (Ones, Index (BST1, 0x02))
                    Store (Ones, Index (BST1, 0x03))
                }

                Return (BST1)
            }
        }

        Method (ITOS, 1, NotSerialized)
        {
            Store ("", Local0)
            Store (0x04, Local1)
            While (Local1)
            {
                Decrement (Local1)
                And (ShiftRight (Arg0, ShiftLeft (Local1, 0x02)), 0x0F, Local4)
                Store (DerefOf (Index (CHAR, Local4)), Local2)
                Concatenate (Local0, Local2, Local5)
                Store (Local5, Local0)
            }

            Return (Local0)
        }

        Name (CHAR, Package (0x10)
        {
            "0", 
            "1", 
            "2", 
            "3", 
            "4", 
            "5", 
            "6", 
            "7", 
            "8", 
            "9", 
            "A", 
            "B", 
            "C", 
            "D", 
            "E", 
            "F"
        })
        Device (BT)
        {
            Name (_HID, "TOS6205")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                And (ShiftRight (EC93, 0x05), One, Local2)
                Store (Zero, Local0)
                If (Local2)
                {
                    Store (0x0F, Local0)
                }

                Return (Local0)
            }

            Method (BTST, 0, NotSerialized)
            {
                Sleep (0x32)
                Store (Zero, Local0)
                If (LEqual (And (EC93, 0x20), 0x20))
                {
                    And (EC93, 0xC0, Local0)
                    If (LEqual (And (EC93, 0x10), 0x10))
                    {
                        Add (Local0, One, Local0)
                    }
                }

                Return (Local0)
            }

            Method (AUSB, 0, NotSerialized)
            {
            }

            Method (DUSB, 0, NotSerialized)
            {
                Acquire (MUTS, 0xFFFF)
                FLNK (0x16, 0xFC)
                Release (MUTS)
                \_SB.WREC (0x93, 0x80, 0x07, Zero)
                \_SB.WREC (0x93, 0x40, 0x06, Zero)
                Sleep (0x96)
            }

            Method (BTPO, 0, NotSerialized)
            {
                Store (\_SB.RDEC (0x93, 0x20, 0x05), Local2)
                If (Local2)
                {
                    Store (\_SB.RDEC (0x93, 0x10, 0x04), Local3)
                    If (Local3)
                    {
                        Acquire (MUTS, 0xFFFF)
                        FLNK (0x16, 0xFA)
                        Release (MUTS)
                        \_SB.WREC (0x93, 0x80, 0x07, One)
                        \_SB.WREC (0x93, 0x40, 0x06, One)
                    }
                }
            }

            Method (BTPF, 0, NotSerialized)
            {
                If (ECOK)
                {
                    Store (\_SB.RDEC (0x93, 0x20, 0x05), Local2)
                    If (Local2)
                    {
                        Sleep (0xFA)
                    }
                }
            }
        }

        Name (ECOK, One)
        Method (PWCG, 0, NotSerialized)
        {
            Notify (\_SB.PCI0.LPC0.ADP0, Zero)
            Sleep (0x32)
            \_SB.PCI0.LPC0.BAT0._BST ()
            Sleep (0x64)
            Notify (\_SB.PCI0.LPC0.BAT0, 0x80)
            Sleep (0x32)
            \_SB.PCI0.LPC0.BAT0._BIF ()
            Sleep (0x64)
            Notify (\_SB.PCI0.LPC0.BAT0, 0x81)
        }

        Method (INEV, 1, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            Store (Arg0, CECI)
            FLNK (0xFF, 0x05)
            Release (MUTS)
            If (TSBK)
            {
                Notify (\_SB.VALZ, 0x80)
            }
        }

        Name (LEGA, Package (0x0A)
        {
            0x14, 
            0x13, 
            0x19, 
            0x59, 
            0x11, 
            0x31, 
            0x40, 
            0x41, 
            0xE6, 
            0x18
        })
        Method (LGPA, 1, Serialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            While (One)
            {
                Store (ToInteger (Arg0), _T_0)
                If (LEqual (_T_0, Zero))
                {
                    Notify (\_SB.LID0, 0x80)
                }
                Else
                {
                    If (LEqual (_T_0, One))
                    {
                        PWCG ()
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            Store (One, BTCG)
                            PWCG ()
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x03))
                            {
                                If (LEqual (\_SB.RDEC (0x93, 0x08, 0x03), Zero))
                                {
                                    Acquire (MUTS, 0xFFFF)
                                    FLNK (0x16, One)
                                    Release (MUTS)
                                    If (LEqual (\_SB.RDEC (0x93, 0x20, 0x05), One))
                                    {
                                        If (LEqual (\_SB.RDEC (0x93, 0x10, 0x04), One))
                                        {
                                            \_SB.WREC (0x93, 0x80, 0x07, One)
                                            \_SB.WREC (0x93, 0x40, 0x06, One)
                                            Acquire (MUTS, 0xFFFF)
                                            FLNK (0x16, 0xFA)
                                            Release (MUTS)
                                            Notify (\_SB.PCI0.LPC0.BT, Zero)
                                        }
                                    }
                                }
                                Else
                                {
                                    Acquire (MUTS, 0xFFFF)
                                    FLNK (0x16, Zero)
                                    Release (MUTS)
                                    If (LEqual (\_SB.RDEC (0x93, 0x20, 0x05), One))
                                    {
                                        \_SB.WREC (0x93, 0x80, 0x07, Zero)
                                        \_SB.WREC (0x93, 0x40, 0x06, Zero)
                                        Acquire (MUTS, 0xFFFF)
                                        FLNK (0x16, 0xFC)
                                        Release (MUTS)
                                        Notify (\_SB.PCI0.LPC0.BT, Zero)
                                    }
                                }
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04)) {}
                                Else
                                {
                                    If (LEqual (_T_0, 0x05))
                                    {
                                        ILEV (0x41)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x06))
                                        {
                                            Store (CLMT, Local0)
                                            If (LEqual (Local0, Zero))
                                            {
                                                Store (Zero, CLMM)
                                            }

                                            If (LEqual (Local0, One))
                                            {
                                                Store (Zero, CLMM)
                                            }

                                            If (LEqual (Local0, 0x02))
                                            {
                                                Store (One, CLMM)
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x07))
                                            {
                                                And (CPUS, 0x80, Local0)
                                                And (CPUS, 0x7F, Local1)
                                                If (LEqual (Local0, Zero))
                                                {
                                                    If (LEqual (THRF, Zero))
                                                    {
                                                        Store (CPUL, ACPS)
                                                    }
                                                    Else
                                                    {
                                                        Decrement (Local1)
                                                        Store (Local1, ACPS)
                                                    }
                                                }

                                                Notify (\_PR.C000, 0x80)
                                                Sleep (0x64)
                                                Notify (\_PR.C001, 0x80)
                                                Sleep (0x64)
                                                Notify (\_PR.C002, 0x80)
                                                Sleep (0x64)
                                                Notify (\_PR.C003, 0x80)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08))
                                                {
                                                    IDEV (0x0A, 0x14)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x09))
                                                    {
                                                        If (LNot (LOr (LLess (OSYS, 0x07D6), LEqual (OSYS, 0x07D8))))
                                                        {
                                                            Notify (\_SB.VALZ, 0x8E)
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x0100)) {}
                                                        Else
                                                        {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Break
            }
        }

        Name (LEGB, Package (0x0F)
        {
            0x20, 
            0x21, 
            0x82, 
            0x83, 
            0x84, 
            0x87, 
            0x85, 
            0x86, 
            0xE0, 
            0xE1, 
            0xE2, 
            0xE3, 
            0x72, 
            0xE7, 
            0xE8
        })
        Method (LGPB, 1, Serialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            While (One)
            {
                Store (ToInteger (Arg0), _T_0)
                If (LEqual (_T_0, 0x02))
                {
                    If (TSBK)
                    {
                        If (LEqual (And (EVTC, 0x02), 0x02))
                        {
                            INEV (0x19B2)
                        }
                    }
                }
                Else
                {
                    If (LEqual (_T_0, 0x03))
                    {
                        If (TSBK)
                        {
                            If (LEqual (And (EVTC, 0x02), 0x02))
                            {
                                INEV (0x19B3)
                            }
                        }
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x04))
                        {
                            If (TSBK)
                            {
                                INEV (0x0401)
                            }
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x05))
                            {
                                If (LNotEqual (SYBZ, 0x03))
                                {
                                    Acquire (MUTM, 0xFFFF)
                                    CKSM ()
                                    Release (MUTM)
                                }
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x06))
                                {
                                    If (TSBK)
                                    {
                                        If (LEqual (And (\_SB.PCI0.LPC0.EVTC, 0x08), 0x08))
                                        {
                                            Store (\_SB.PCI0.LPC0.CPTV, \OVET)
                                            INEV (0x19B6)
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x07))
                                    {
                                        If (TSBK)
                                        {
                                            If (LEqual (And (\_SB.PCI0.LPC0.EVTC, 0x08), 0x08))
                                            {
                                                Store (\_SB.PCI0.LPC0.CCLV, \BLET)
                                                INEV (0x19B7)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x0D))
                                        {
                                            IDEV (0x08, 0xE8)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x0E))
                                            {
                                                FLNK (0xFF, Zero)
                                                FLNK (0xFF, 0x30)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x0100)) {}
                                                Else
                                                {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Break
            }
        }

        Name (LEGC, Package (0x0B)
        {
            0x51, 
            0x50, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x25, 
            0x26, 
            0x63, 
            0x64
        })
        Method (LGPC, 1, Serialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            While (One)
            {
                Store (ToInteger (Arg0), _T_0)
                If (LEqual (_T_0, 0x07)) {}
                Else
                {
                    If (LEqual (_T_0, 0x08)) {}
                    Else
                    {
                        If (LEqual (_T_0, 0x09))
                        {
                            If (LOr (LEqual (VGAN, Zero), LEqual (VGAN, 0x03)))
                            {
                                Notify (\_SB.PCI0.VGA.LCD, 0x87)
                            }
                            Else
                            {
                                Notify (\_SB.PCI0.VGA.LCD, 0x87)
                            }
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x0A))
                            {
                                If (LOr (LEqual (VGAN, Zero), LEqual (VGAN, 0x03)))
                                {
                                    Notify (\_SB.PCI0.VGA.LCD, 0x86)
                                }
                                Else
                                {
                                    Notify (\_SB.PCI0.VGA.LCD, 0x86)
                                }
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x0100)) {}
                                Else
                                {
                                }
                            }
                        }
                    }
                }

                Break
            }
        }

        Name (LEGD, Package (0x06)
        {
            0x60, 
            0x66, 
            0x28, 
            0x29, 
            0xE4, 
            0xE5
        })
        Method (LGPD, 1, Serialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            While (One)
            {
                Store (ToInteger (Arg0), _T_0)
                If (LEqual (_T_0, Zero))
                {
                    If (LLess (OSYS, 0x07D6))
                    {
                        Notify (\_SB.FWEX, 0x80)
                    }
                    Else
                    {
                        If (TSBK)
                        {
                            Notify (\_SB.VALZ, 0x80)
                        }
                        Else
                        {
                            If (LNotEqual (EVCT, Zero))
                            {
                                Acquire (MUTS, 0xFFFF)
                                FLNK (0x11, EVCT)
                                Store (And (KYB0, 0xFF), Local0)
                                Store (Zero, KYB0)
                                Release (MUTS)
                            }
                        }
                    }
                }
                Else
                {
                    If (LEqual (_T_0, One))
                    {
                        If (LEqual (PTST, 0xFF))
                        {
                            Store (FLNK (0x15, 0x0F), PTST)
                        }

                        Subtract (One, PTST, PTST)
                        FLNK (0x15, PTST)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            If (LEqual (And (EC93, 0x30), 0x30))
                            {
                                \_SB.WREC (0x93, 0x80, 0x07, One)
                                \_SB.WREC (0x93, 0x40, 0x06, One)
                            }

                            Notify (\_SB.PCI0.LPC0.BT, Zero)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x03))
                            {
                                If (LEqual (And (EC93, 0x30), 0x30))
                                {
                                    \_SB.WREC (0x93, 0x80, 0x07, Zero)
                                    \_SB.WREC (0x93, 0x40, 0x06, Zero)
                                }

                                Notify (\_SB.PCI0.LPC0.BT, Zero)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    IDEV (0x0258, 0xE5)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x05))
                                    {
                                        Acquire (MUTS, 0xFFFF)
                                        Store (0x02, F0CM)
                                        FLNK (0xFF, Zero)
                                        Release (MUTS)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x0100)) {}
                                        Else
                                        {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Break
            }
        }

        OperationRegion (WNBD, SystemMemory, 0xFF700100, 0x0100)
        Field (WNBD, ByteAcc, Lock, Preserve)
        {
            Offset (0x02), 
            LRPM,   8, 
            HRPM,   8, 
            RCPU,   8, 
            EVCT,   8, 
            U3DP,   8, 
            Offset (0x08), 
                ,   4, 
                ,   1, 
            EIDL,   1, 
            GE2S,   1, 
            LDWK,   1, 
            Offset (0x0A), 
            VGAT,   8, 
            THRF,   3, 
            Offset (0x0D), 
                ,   3, 
            BLFM,   1, 
            Offset (0x11), 
            BCM1,   40, 
            Offset (0x17), 
            FKST,   2, 
            Offset (0x18), 
            Offset (0x40), 
            EC92,   8, 
            EC93,   8, 
            EC94,   8, 
            EC95,   8, 
            EC96,   8, 
            EC99,   8, 
            EC9A,   8, 
            EC9C,   8, 
            EC9D,   8, 
            EC9E,   8, 
            EC9F,   8, 
            ECA0,   8, 
            ECA2,   8, 
            ECA3,   8, 
            ECA4,   8, 
            ECA5,   8, 
            ECA7,   8, 
            ECA8,   8, 
            ECA9,   8, 
            ECAA,   8, 
            ECAB,   8, 
            ECAC,   8, 
            ECAD,   8, 
            ECAE,   8, 
            ECAF,   8, 
            ECB6,   8, 
            ECB8,   8, 
            ECB9,   8, 
            ECBA,   8, 
            ECBD,   8, 
            ECBE,   8, 
            ECBF,   8, 
            ECC0,   8, 
            ECC1,   8, 
            ECC2,   8, 
            ECC5,   8, 
            ECC6,   8, 
            ECC8,   8, 
            ECC9,   8, 
            ECCA,   8, 
            ECCB,   8, 
            ECD7,   8, 
            ECDB,   8, 
            ECDF,   8, 
            ECE2,   8, 
            ECE3,   8, 
            Offset (0x6F), 
            HDS0,   16, 
            HDS1,   16, 
            HDST,   16, 
            HDSS,   8, 
            BCM2,   64, 
            PHC1,   32, 
            PHC2,   32, 
            BATI,   8, 
            PHC3,   32, 
            PHC4,   32, 
            PWMS,   8, 
            B1VT,   16, 
            B1CC,   16, 
            B1TP,   8, 
            MFAN,   16, 
            EVTC,   4, 
            Offset (0x98), 
            ADVT,   8, 
            ACCA,   8, 
            ACCR,   16, 
            CPTV,   8, 
            CCLV,   8, 
            HSRL,   8, 
            BSS1,   8, 
            BSS2,   8, 
                ,   1, 
            FBFG,   4, 
            FBS3,   1, 
            Offset (0xA6), 
            EWRB,   32, 
            ERDB,   32, 
            LIDW,   8, 
            Offset (0xB0), 
            BCV1,   16, 
            BCV2,   32, 
            Offset (0xB8), 
            EEV0,   8, 
            EEV1,   8, 
            EEV2,   8, 
            EEV3,   8, 
            EEV4,   8, 
            EEV5,   8, 
            EEV6,   8, 
            EEV7,   8, 
            Offset (0xC1), 
            SCRI,   1, 
            Offset (0xC2), 
            CLMM,   1, 
            Offset (0xC4), 
                ,   1, 
                ,   2, 
            RFED,   1, 
            Offset (0xDB), 
            FCBT,   1, 
            BCS0,   1, 
            BCSX,   1, 
            Offset (0xDC), 
            TCBC,   32, 
            TMUD,   1, 
            Offset (0xE1), 
            CTEG,   1, 
            Offset (0xF6), 
            BCV0,   16, 
            Offset (0xFE), 
            OVLA,   1
        }

        Mutex (MUTL, 0x00)
        Name (LEVC, Zero)
        Name (LEVB, Buffer (0x08)
        {
             0x00
        })
        Name (LINI, Zero)
        Name (TI3S, Zero)
        Name (TIMC, Zero)
        Name (SLEC, Zero)
        Name (SLEV, Buffer (0x08)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        })
        Name (SLEN, Package (0x08)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (\OVET, 0x66)
        Name (\BLET, 0x5D)
        Method (LREG, 0, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            If (LEqual (LINI, Zero))
            {
                Store (One, LINI)
                If (LGreater (OSYS, 0x07D5))
                {
                    \_SB.WREC (0xDB, One, Zero, One)
                    FLNK (0x14, One)
                    Store (One, HKEM)
                    \_SB.WREC (0xDB, 0x10, 0x04, One)
                    Store (One, HSEM)
                    \_SB.WREC (0xDB, 0x20, 0x05, One)
                    If (LNotEqual (EVCT, Zero))
                    {
                        FLNK (0x11, EVCT)
                        Store (And (KYB0, 0xFF), HSWK)
                        Store (Zero, KYB0)
                    }

                    FLNK (0x10, One)
                    FLNK (0x15, 0xFF)
                }
                Else
                {
                    \_SB.WREC (0xDB, One, Zero, Zero)
                    FLNK (0x15, 0xFF)
                }
            }

            Release (MUTS)
            \_SB.WREC (0xDA, 0x03, Zero, Zero)
            \_SB.WREC (0xDA, 0x0C, 0x02, Zero)
            \_SB.WREC (0xDA, 0x30, 0x04, Zero)
        }

        Method (CLBF, 1, Serialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            While (One)
            {
                Store (ToInteger (Arg0), _T_0)
                If (LEqual (_T_0, Zero))
                {
                    Store (Zero, EEV0)
                }
                Else
                {
                    If (LEqual (_T_0, One))
                    {
                        Store (Zero, EEV1)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            Store (Zero, EEV2)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x03))
                            {
                                Store (Zero, EEV3)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    Store (Zero, EEV4)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x05))
                                    {
                                        Store (Zero, EEV5)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x06))
                                        {
                                            Store (Zero, EEV6)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x07))
                                            {
                                                Store (Zero, EEV7)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Break
            }
        }

        Method (CKEV, 0, Serialized)
        {
            Name (TMPB, Buffer (0x08)
            {
                 0x00
            })
            Acquire (MUTL, 0xFFFF)
            If (LEqual (LEVC, Zero))
            {
                Store (EEV0, Index (TMPB, Zero))
                Store (EEV1, Index (TMPB, One))
                Store (EEV2, Index (TMPB, 0x02))
                Store (EEV3, Index (TMPB, 0x03))
                Store (EEV4, Index (TMPB, 0x04))
                Store (EEV5, Index (TMPB, 0x05))
                Store (EEV6, Index (TMPB, 0x06))
                Store (EEV7, Index (TMPB, 0x07))
                Store (Zero, Local0)
                While (LLess (Local0, 0x08))
                {
                    Store (DerefOf (Index (TMPB, Local0)), Local1)
                    If (LNotEqual (Local1, Zero))
                    {
                        Store (Local1, Index (LEVB, LEVC))
                        Increment (LEVC)
                        CLBF (Local0)
                    }

                    Increment (Local0)
                }
            }

            Store (LEVC, Local2)
            Release (MUTL)
            Return (Local2)
        }

        Method (GEVT, 0, NotSerialized)
        {
            Acquire (MUTL, 0xFFFF)
            Store (Zero, Local0)
            If (LNotEqual (LEVC, Zero))
            {
                Decrement (LEVC)
                Store (DerefOf (Index (LEVB, LEVC)), Local0)
                Store (Zero, Index (LEVB, LEVC))
            }

            Release (MUTL)
            Return (Local0)
        }

        Method (ECLV, 0, NotSerialized)
        {
            While (LAnd (LOr (LNotEqual (CKEV (), Zero), LNotEqual (SLEC, 
                Zero)), LLess (TI3S, 0x78)))
            {
                Store (One, Local1)
                While (LNotEqual (Local1, Zero))
                {
                    Store (GEVT (), Local1)
                    LEVN (Local1)
                    Add (TIMC, 0x19, TIMC)
                    If (LAnd (LNotEqual (SLEC, Zero), LEqual (Local1, Zero)))
                    {
                        If (LEqual (TIMC, 0x19))
                        {
                            Sleep (0x64)
                            Store (0x64, TIMC)
                            Add (TI3S, 0x04, TI3S)
                        }
                        Else
                        {
                            Sleep (0x19)
                            Increment (TI3S)
                        }
                    }

                    If (LEqual (TIMC, 0x64))
                    {
                        Store (Zero, TIMC)
                        If (LNotEqual (SLEC, Zero))
                        {
                            Store (0x08, Local0)
                            While (Local0)
                            {
                                Decrement (Local0)
                                Store (DerefOf (Index (SLEN, Local0)), Local3)
                                If (LNotEqual (Local3, Zero))
                                {
                                    Decrement (Local3)
                                    Store (Local3, Index (SLEN, Local0))
                                    If (LEqual (Local3, Zero))
                                    {
                                        Store (One, Local1)
                                        Store (DerefOf (Index (SLEV, Local0)), Local2)
                                        Store (Zero, Index (SLEV, Local0))
                                        ILEV (Local2)
                                        Decrement (SLEC)
                                    }
                                }
                            }
                        }
                    }
                }
            }

            If (LGreaterEqual (TI3S, 0x78))
            {
                Store (Zero, TI3S)
                If (LEqual (EEV0, Zero))
                {
                    Store (0xFF, EEV0)
                }
            }
        }

        Method (IDEV, 2, Serialized)
        {
            If (LLess (SLEC, 0x08))
            {
                Store (0x08, Local0)
                While (Local0)
                {
                    Decrement (Local0)
                    If (LEqual (DerefOf (Index (SLEN, Local0)), Zero))
                    {
                        Break
                    }
                }

                Store (Arg1, Index (SLEV, Local0))
                Store (Arg0, Local2)
                If (LGreaterEqual (Arg0, 0x14))
                {
                    Divide (Arg0, 0x14, Local2, Local1)
                    Subtract (Arg0, Local1, Local2)
                }

                Store (Local2, Index (SLEN, Local0))
                Increment (SLEC)
                Return (One)
            }

            Return (Zero)
        }

        Method (CLRL, 0, Serialized)
        {
            Store (Zero, SLEC)
            Store (Zero, TIMC)
            Store (0x08, Local0)
            While (Local0)
            {
                Decrement (Local0)
                Store (Zero, Index (SLEV, Local0))
                Store (Zero, Index (SLEN, Local0))
            }
        }

        Method (ILEV, 1, NotSerialized)
        {
            Acquire (MUTL, 0xFFFF)
            If (LEqual (EEV0, Zero))
            {
                Store (0xFF, EEV0)
            }

            If (LLess (LEVC, 0x08))
            {
                Store (Arg0, Index (LEVB, LEVC))
                Increment (LEVC)
            }

            Release (MUTL)
        }

        Method (LEVN, 1, NotSerialized)
        {
            If (LNotEqual (Arg0, Zero))
            {
                Store (Arg0, P80H)
                Sleep (0x14)
                Store (Match (LEGA, MEQ, Arg0, MTR, Zero, Zero), Local6)
                If (LNotEqual (Local6, Ones))
                {
                    LGPA (Local6)
                }
                Else
                {
                    Store (Match (LEGB, MEQ, Arg0, MTR, Zero, Zero), Local6)
                    If (LNotEqual (Local6, Ones))
                    {
                        LGPB (Local6)
                    }
                    Else
                    {
                        Store (Match (LEGC, MEQ, Arg0, MTR, Zero, Zero), Local6)
                        If (LNotEqual (Local6, Ones))
                        {
                            LGPC (Local6)
                        }
                        Else
                        {
                            Store (Match (LEGD, MEQ, Arg0, MTR, Zero, Zero), Local6)
                            If (LNotEqual (Local6, Ones))
                            {
                                LGPD (Local6)
                            }
                        }
                    }
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                \_SB.PCI0.LPC0.ECLV ()
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("ssdt2.aml", "SSDT", 1, "TOSINV", "TOSINV00", 0x00000001)
{

    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)
    External (_SB_.ACPS, IntObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x06)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000BC2, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000672, 
                0x0000095F, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000076C, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000546, 
                0x000005FA, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000004F3, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000003CF, 
                0x00000004, 
                0x00000004, 
                0x00000005, 
                0x00000005
            }
        })
        Name (XPSS, Package (0x06)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000BC2, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x00000672, 
                0x0000095F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x0000076C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x00000546, 
                0x000005FA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x000004F3, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x000003CF, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000004
            }
        })
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_SB.ACPS)
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x06)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000BC2, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000672, 
                0x0000095F, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000076C, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000546, 
                0x000005FA, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000004F3, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000003CF, 
                0x00000004, 
                0x00000004, 
                0x00000005, 
                0x00000005
            }
        })
        Name (XPSS, Package (0x06)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000BC2, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x00000672, 
                0x0000095F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x0000076C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x00000546, 
                0x000005FA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x000004F3, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x000003CF, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000004
            }
        })
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_SB.ACPS)
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x06)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000BC2, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000672, 
                0x0000095F, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000076C, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000546, 
                0x000005FA, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000004F3, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000003CF, 
                0x00000004, 
                0x00000004, 
                0x00000005, 
                0x00000005
            }
        })
        Name (XPSS, Package (0x06)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000BC2, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x00000672, 
                0x0000095F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x0000076C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x00000546, 
                0x000005FA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x000004F3, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x000003CF, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000004
            }
        })
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_SB.ACPS)
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x06)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000BC2, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000672, 
                0x0000095F, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000076C, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000546, 
                0x000005FA, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x000004F3, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000003CF, 
                0x00000004, 
                0x00000004, 
                0x00000005, 
                0x00000005
            }
        })
        Name (XPSS, Package (0x06)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000BC2, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x00000672, 
                0x0000095F, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x0000076C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x00000546, 
                0x000005FA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000004B0, 
                0x000004F3, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }, 

            Package (0x08)
            {
                0x000003E8, 
                0x000003CF, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000004
            }
        })
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilites
        {
            Return (\_SB.ACPS)
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
    }
}



SSDT3
-----
DefinitionBlock ("ssdt3.aml", "SSDT", 2, "TOSINV", "TOSINV00", 0x00000002)
{
    /*
     * iASL Warning: There were 1 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     */
    External (_SB_.ALIC, MethodObj)    // Warning: Unresolved Method, guessing 6 arguments (may be incorrect, see warning above)


    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100) {})
        Name (ADAT, Buffer (0x0200)
        {
            /* 0000 */   0x03, 0x7E, 0x76, 0x7E, 0x20, 0x00, 0x00, 0x01,
            /* 0008 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0010 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0018 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0020 */   0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,
            /* 0028 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0030 */   0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x01, 0x01,
            /* 0038 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x01,
            /* 0040 */   0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0048 */   0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01,
            /* 0050 */   0x01, 0x05, 0x05, 0x02, 0x00, 0x02, 0x03, 0x00,
            /* 0058 */   0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x01, 0x01,
            /* 0060 */   0x00, 0x00, 0x00, 0x02, 0x02, 0x06, 0x06, 0x03,
            /* 0068 */   0x03, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0070 */   0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,
            /* 0078 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0080 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0088 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0090 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0098 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00A0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00A8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00B0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00B8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00C0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00C8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00D0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00D8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00E0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00E8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00F0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00F8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0100 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0108 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0110 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0118 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0120 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0128 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0130 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0138 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0140 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0148 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0150 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0158 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0160 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0168 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0170 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0178 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0180 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0188 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0190 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0198 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01A0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01A8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01B0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01B8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01C0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01C8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01D0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01D8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01E0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01E8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01F0 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01F8 */   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        })
        Method (ALIB, 2, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Store (Buffer (0x0100) {}, Local0)
                CreateWordField (Local0, 0x00, A023)
                Store (0x08, A023)
                CreateWordField (Local0, 0x02, A024)
                Store (0x01, A024)
                CreateDWordField (Local0, 0x04, A025)
                If (LGreater (DerefOf (Index (\_SB.ADAT, 0x00)), 0x00))
                {
                    Store (0x0F, A025)
                    Return (Local0)
                }
                Else
                {
                    Store (0x01, A025)
                    Return (Local0)
                }
            }

            If (LEqual (Arg0, 0x01))
            {
                Store (DerefOf (Index (Arg1, 0x02)), Local0)
                Return (A026 (Local0))
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (A027 (Arg1))
            }

            If (LEqual (Arg0, 0x03))
            {
                Store (DerefOf (Index (Arg1, 0x02)), Local0)
                Return (A028 (Local0))
            }

            If (LEqual (Arg0, 0x06))
            {
                Store (DerefOf (Index (Arg1, 0x04)), Local0)
                Store (DerefOf (Index (Arg1, 0x02)), Local1)
                Return (A031 (Local0, Local1))
            }

            If (LEqual (Arg0, 0x0A))
            {
                Store (DerefOf (Index (Arg1, 0x02)), Local0)
                Return (A032 (Local0))
            }

            If (LEqual (Arg0, 0x0B))
            {
                Store (DerefOf (Index (Arg1, 0x02)), Local0)
                Store (DerefOf (Index (Arg1, 0x03)), Local1)
                Store (DerefOf (Index (Arg1, 0x04)), Local2)
                Or (ShiftLeft (DerefOf (Index (Arg1, 0x05)), 0x08), Local2, 
                    Local2)
                Or (ShiftLeft (DerefOf (Index (Arg1, 0x06)), 0x10), Local2, 
                    Local2)
                Or (ShiftLeft (DerefOf (Index (Arg1, 0x07)), 0x18), Local2, 
                    Local2)
                Store (DerefOf (Index (Arg1, 0x08)), Local3)
                Or (ShiftLeft (DerefOf (Index (Arg1, 0x09)), 0x08), Local3, 
                    Local3)
                Or (ShiftLeft (DerefOf (Index (Arg1, 0x0A)), 0x10), Local3, 
                    Local3)
                Or (ShiftLeft (DerefOf (Index (Arg1, 0x0B)), 0x18), Local3, 
                    Local3)
                Store (DerefOf (Index (Arg1, 0x0C)), Local4)
                Or (ShiftLeft (DerefOf (Index (Arg1, 0x0D)), 0x08), Local4, 
                    Local4)
                Or (ShiftLeft (DerefOf (Index (Arg1, 0x0E)), 0x10), Local4, 
                    Local4)
                Or (ShiftLeft (DerefOf (Index (Arg1, 0x0F)), 0x18), Local4, 
                    Local4)
                Return (A033 (Local0, Local1, Local2, Local3, Local4))
            }

            Return (0x00)
        }

        Method (A031, 2, NotSerialized)
        {
            Store (0x00, Local0)
            While (LLess (Local0, 0x05))
            {
                Store (A094 (Local0, Arg1), Local1)
                If (LEqual (Local1, 0x01))
                {
                    Store (A095 (Local0, Arg0), Local1)
                    Break
                }

                Increment (Local0)
            }

            Store (Buffer (0x0A) {}, Local7)
            CreateWordField (Local7, 0x00, A023)
            CreateByteField (Local7, 0x02, A034)
            CreateByteField (Local7, 0x03, A096)
            Store (0x04, A023)
            Store (0x00, A034)
            Store (Local1, A096)
            Return (Local7)
        }

        Method (A094, 2, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Return (\_SB.AWR0.ABR0.A087 (Arg1))
            }

            If (LEqual (Arg0, 0x01))
            {
                Return (\_SB.AWR0.ABR1.A087 (Arg1))
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (\_SB.AWR0.ABR2.A087 (Arg1))
            }

            If (LEqual (Arg0, 0x03))
            {
                Return (\_SB.AWR0.ABR3.A087 (Arg1))
            }

            If (LEqual (Arg0, 0x04))
            {
                Return (\_SB.AWR0.ABR4.A087 (Arg1))
            }
        }

        Method (A095, 2, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Return (\_SB.AWR0.ABR0.A088 (Arg1))
            }

            If (LEqual (Arg0, 0x01))
            {
                Return (\_SB.AWR0.ABR1.A088 (Arg1))
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (\_SB.AWR0.ABR2.A088 (Arg1))
            }

            If (LEqual (Arg0, 0x03))
            {
                Return (\_SB.AWR0.ABR3.A088 (Arg1))
            }

            If (LEqual (Arg0, 0x04))
            {
                Return (\_SB.AWR0.ABR4.A088 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A026, 1, NotSerialized)
        {
            If (LEqual (AD00, Arg0))
            {
                Return (0x00)
            }

            Store (Arg0, AD00)
            A011 ()
        }

        Method (A032, 1, NotSerialized)
        {
            Store (Arg0, DK00)
            A017 ()
        }

        Method (A033, 5, NotSerialized)
        {
            A018 (Arg0, Arg1, Arg2, Arg3, Arg4)
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A027, 1, NotSerialized)
        {
            Store (Buffer (0x0100) {}, Local7)
            CreateWordField (Local7, 0x00, A023)
            Store (0x03, A023)
            CreateByteField (Local7, 0x02, A034)
            Store (0x01, A034)
            If (LEqual (DerefOf (Index (\_SB.ADAT, 0x00)), 0x01))
            {
                Store (0x02, A034)
                Return (Local7)
            }

            If (LEqual (DerefOf (Index (\_SB.ADAT, 0x00)), 0x00))
            {
                Store (0x01, A034)
                Return (Local7)
            }

            A035 (Arg0)
            If (LNotEqual (AP05, 0x01))
            {
                Return (Local7)
            }

            A036 ()
            Store (0x02, A034)
            Return (Local7)
        }

        Method (A012, 0, NotSerialized)
        {
            If (LLessEqual (DerefOf (Index (\_SB.ADAT, 0x00)), 0x01))
            {
                Return (0x00)
            }

            If (LNotEqual (AP05, 0x01))
            {
                Return (0x00)
            }

            A036 ()
        }

        Method (A037, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x03))
            {
                Store (0x00, AP01)
            }
        }

        Method (A010, 1, NotSerialized)
        {
            Store (0x01, AP10)
        }

        Method (A028, 1, NotSerialized)
        {
            Store (Arg0, AP05)
            If (LLessEqual (DerefOf (Index (\_SB.ADAT, 0x00)), 0x01))
            {
                Return (0x00)
            }

            Store (AP0B, Local1)
            If (LEqual (AP05, 0x00))
            {
                Store (0x00, Local0)
                While (LLess (Local0, 0x05))
                {
                    A038 (Local0)
                    Increment (Local0)
                }

                Store (0x00, AP0B)
            }

            A036 ()
            Store (Local1, AP0B)
            Store (Buffer (0x0100) {}, Local7)
            Store (0x03, Index (Local7, 0x00))
            Store (0x00, Index (Local7, 0x01))
            Store (0x00, Index (Local7, 0x02))
            Return (Local7)
        }

        Method (A039, 0, NotSerialized)
        {
            If (LNotEqual (AP0B, 0xFF))
            {
                Return (AP0B)
            }

            Return (AD00)
        }

        Method (A035, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Store (0x00, Local0)
            While (LLess (Local0, 0x05))
            {
                If (LEqual (A040 (Local0, AP06), 0x01))
                {
                    If (LEqual (And (AP07, AP08), 0x01))
                    {
                        Store (A041 (Local0), Local1)
                        A042 (Local0, Local1)
                    }
                    Else
                    {
                        A042 (Local0, AP0A)
                    }

                    Break
                }

                Increment (Local0)
            }
        }

        Method (A043, 0, NotSerialized)
        {
            Store (0x01, AP02)
            Store (0x00, Local0)
            While (LLess (Local0, 0x05))
            {
                Store (A044 (Local0), Local1)
                If (LGreater (Local1, AP02))
                {
                    Store (Local1, AP02)
                }

                Increment (Local0)
            }
        }

        Method (A045, 0, NotSerialized)
        {
            Store (0x00, AP03)
            Store (0x00, Local0)
            While (LLess (Local0, 0x05))
            {
                Store (A046 (Local0), Local1)
                If (LGreater (Local1, AP03))
                {
                    Store (Local1, AP03)
                }

                Increment (Local0)
            }
        }

        Method (A036, 0, NotSerialized)
        {
            A045 ()
            A043 ()
            If (LNotEqual (AP02, AP01))
            {
                A019 (AP02, AP01)
            }

            If (LGreater (AP02, AP01))
            {
                \_SB.A047 (AP02)
                Store (AP02, AP01)
            }

            Store (0x00, Local0)
            While (LLess (Local0, 0x05))
            {
                Store (A044 (Local0), Local1)
                Store (A048 (Local0), Local2)
                If (LNotEqual (Local1, Local2))
                {
                    A049 (Local0, Local1)
                }
                Else
                {
                    If (LEqual (AP10, 0x01))
                    {
                        A049 (Local0, Local1)
                    }
                }

                Increment (Local0)
            }

            If (LLess (AP02, AP01))
            {
                \_SB.A047 (AP02)
                Store (AP02, AP01)
            }
            Else
            {
                If (LEqual (AP10, 0x01))
                {
                    \_SB.A047 (AP02)
                    Store (AP02, AP01)
                }
            }

            Store (0x00, AP10)
        }

        Method (A049, 2, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Return (\_SB.AWR0.ABR0.A050 (Arg1))
            }

            If (LEqual (Arg0, 0x01))
            {
                Return (\_SB.AWR0.ABR1.A050 (Arg1))
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (\_SB.AWR0.ABR2.A050 (Arg1))
            }

            If (LEqual (Arg0, 0x03))
            {
                Return (\_SB.AWR0.ABR3.A050 (Arg1))
            }

            If (LEqual (Arg0, 0x04))
            {
                Return (\_SB.AWR0.ABR4.A050 (Arg1))
            }
        }

        Method (A048, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Return (\_SB.AWR0.ABR0.A051 ())
            }

            If (LEqual (Arg0, 0x01))
            {
                Return (\_SB.AWR0.ABR1.A051 ())
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (\_SB.AWR0.ABR2.A051 ())
            }

            If (LEqual (Arg0, 0x03))
            {
                Return (\_SB.AWR0.ABR3.A051 ())
            }

            If (LEqual (Arg0, 0x04))
            {
                Return (\_SB.AWR0.ABR4.A051 ())
            }
        }

        Method (A044, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Return (\_SB.AWR0.ABR0.A052 ())
            }

            If (LEqual (Arg0, 0x01))
            {
                Return (\_SB.AWR0.ABR1.A052 ())
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (\_SB.AWR0.ABR2.A052 ())
            }

            If (LEqual (Arg0, 0x03))
            {
                Return (\_SB.AWR0.ABR3.A052 ())
            }

            If (LEqual (Arg0, 0x04))
            {
                Return (\_SB.AWR0.ABR4.A052 ())
            }
        }

        Method (A046, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Return (\_SB.AWR0.ABR0.A053 ())
            }

            If (LEqual (Arg0, 0x01))
            {
                Return (\_SB.AWR0.ABR1.A053 ())
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (\_SB.AWR0.ABR2.A053 ())
            }

            If (LEqual (Arg0, 0x03))
            {
                Return (\_SB.AWR0.ABR3.A053 ())
            }

            If (LEqual (Arg0, 0x04))
            {
                Return (\_SB.AWR0.ABR4.A053 ())
            }
        }

        Method (A041, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Return (\_SB.AWR0.ABR0.A054 ())
            }

            If (LEqual (Arg0, 0x01))
            {
                Return (\_SB.AWR0.ABR1.A054 ())
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (\_SB.AWR0.ABR2.A054 ())
            }

            If (LEqual (Arg0, 0x03))
            {
                Return (\_SB.AWR0.ABR3.A054 ())
            }

            If (LEqual (Arg0, 0x04))
            {
                Return (\_SB.AWR0.ABR4.A054 ())
            }
        }

        Method (A042, 2, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Return (\_SB.AWR0.ABR0.A055 (Arg1))
            }

            If (LEqual (Arg0, 0x01))
            {
                Return (\_SB.AWR0.ABR1.A055 (Arg1))
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (\_SB.AWR0.ABR2.A055 (Arg1))
            }

            If (LEqual (Arg0, 0x03))
            {
                Return (\_SB.AWR0.ABR3.A055 (Arg1))
            }

            If (LEqual (Arg0, 0x04))
            {
                Return (\_SB.AWR0.ABR4.A055 (Arg1))
            }
        }

        Method (A040, 2, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Return (\_SB.AWR0.ABR0.A056 (Arg1))
            }

            If (LEqual (Arg0, 0x01))
            {
                Return (\_SB.AWR0.ABR1.A056 (Arg1))
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (\_SB.AWR0.ABR2.A056 (Arg1))
            }

            If (LEqual (Arg0, 0x03))
            {
                Return (\_SB.AWR0.ABR3.A056 (Arg1))
            }

            If (LEqual (Arg0, 0x04))
            {
                Return (\_SB.AWR0.ABR4.A056 (Arg1))
            }
        }

        Method (A038, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Return (\_SB.AWR0.ABR0.A057 ())
            }

            If (LEqual (Arg0, 0x01))
            {
                Return (\_SB.AWR0.ABR1.A057 ())
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (\_SB.AWR0.ABR2.A057 ())
            }

            If (LEqual (Arg0, 0x03))
            {
                Return (\_SB.AWR0.ABR3.A057 ())
            }

            If (LEqual (Arg0, 0x04))
            {
                Return (\_SB.AWR0.ABR4.A057 ())
            }
        }

        OperationRegion (A116, SystemMemory, Add (AGRB, 0x000C2000), 0x1000)
        Field (A116, ByteAcc, NoLock, Preserve)
        {
            Offset (0x1B4), 
                ,   25, 
            A117,   1
        }

        OperationRegion (A118, SystemMemory, Add (AGRB, 0x000C3000), 0x1000)
        Field (A118, ByteAcc, NoLock, Preserve)
        {
            Offset (0xDC), 
                ,   19, 
            A022,   7, 
            Offset (0x1FC), 
            A008,   1
        }

        OperationRegion (A119, SystemMemory, Add (AGRB, 0x000C4000), 0x1000)
        Field (A119, ByteAcc, NoLock, Preserve)
        {
            Offset (0x124), 
                ,   22, 
            A120,   1, 
            A121,   4, 
            Offset (0x128), 
                ,   5, 
            A122,   7, 
            Offset (0x210), 
            Offset (0x211), 
            A123,   3, 
                ,   3, 
            A124,   2
        }

        OperationRegion (A125, SystemMemory, Add (AGRB, 0x000C5000), 0x1000)
        Field (A125, ByteAcc, NoLock, Preserve)
        {
            Offset (0x170), 
                ,   14, 
            A126,   1
        }

        OperationRegion (A101, SystemMemory, AGRB, 0x1000)
        Field (A101, ByteAcc, NoLock, Preserve)
        {
            Offset (0x60), 
            A102,   32, 
            Offset (0xB8), 
            A103,   32, 
            Offset (0xC8), 
            A104,   32, 
            Offset (0xF8), 
            A105,   32
        }

        BankField (A101, A104, 0x00210001, DWordAcc, NoLock, Preserve)
        {
            Offset (0x6C), 
            A106,   1
        }

        BankField (A101, A103, 0xC2100000, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A107,   1, 
            A108,   16
        }

        BankField (A101, A103, 0xC2100004, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A109,   1, 
            A110,   1
        }

        BankField (A101, A103, 0xC210003C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A111,   32
        }

        BankField (A101, A103, 0x0003F818, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            Offset (0xBD), 
            A112,   1
        }

        BankField (A101, A105, 0x00, DWordAcc, NoLock, Preserve)
        {
            Offset (0xFC), 
                ,   4, 
            A113,   1
        }

        OperationRegion (A114, SystemMemory, Add (AGRB, 0x8000), 0x1000)
        Field (A114, DWordAcc, NoLock, Preserve)
        {
            A115,   32
        }

        Method (A047, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x01))
            {
                Store (DerefOf (Index (\_SB.ADAT, 0x01)), Local0)
            }

            If (LEqual (Arg0, 0x02))
            {
                Store (DerefOf (Index (\_SB.ADAT, 0x02)), Local0)
            }

            If (LGreater (Local0, 0xF7))
            {
                Store (0xF7, Local0)
            }

            Store (Multiply (0x0271, Add (Subtract (0xF7, Local0, Local1), 0x01)
                ), Local2)
            Divide (Multiply (Local2, 0x04, Local2), 0x64, Local3, Local4)
            A016 (0x3A, Local4)
        }

        Method (A091, 3, NotSerialized)
        {
        }

        Method (A016, 2, Serialized)
        {
            While (LNotEqual (A110, 0x01)) {}
            Store (Arg1, A111)
            Store (Arg0, A108)
            Not (A107, A107)
            While (LNotEqual (A109, 0x01)) {}
            While (LNotEqual (A110, 0x01)) {}
            Store (A111, Local0)
            Return (Local0)
        }

        Method (A060, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x01))
            {
                Store (0x00, A106)
            }
            Else
            {
                Store (0x01, A106)
            }
        }

        Method (A006, 1, NotSerialized)
        {
            Store (A126, Local0)
            If (LEqual (A117, 0x00))
            {
                If (LEqual (Arg0, 0x00))
                {
                    Store (0x01, A126)
                }
                Else
                {
                    Store (0x00, A126)
                }
            }

            Return (Local0)
        }

        Name (A127, 0x00)
        Name (A128, 0x00)
        Method (A005, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                If (LEqual (A127, 0x00))
                {
                    Store (0x01, A127)
                    Store (A112, A128)
                }

                A016 (0x60, 0x0801)
                While (LNotEqual (A117, 0x00))
                {
                    A016 (0x60, 0x0801)
                }
            }
            Else
            {
                If (LEqual (A127, 0x01))
                {
                    If (LEqual (A128, 0x01))
                    {
                        If (LEqual (A112, 0x00))
                        {
                            A016 (0x5F, 0x01)
                        }
                    }
                }
            }
        }

        Method (A009, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x01))
            {
                A016 (0x66, 0x00)
            }
            Else
            {
                A016 (0x66, 0x01)
            }
        }

        Method (A007, 1, NotSerialized)
        {
            Store (A113, Local0)
            If (LEqual (Arg0, 0x00))
            {
                Store (0x00, A113)
            }
            Else
            {
                Store (0x01, A113)
            }

            Return (Local0)
        }

        OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            A097,   8, 
            A098,   8
        }

        IndexField (A097, A098, ByteAcc, NoLock, Preserve)
        {
            Offset (0xE0), 
            A099,   32
        }

        OperationRegion (ACFG, SystemIO, A099, 0x08)
        Field (ACFG, DWordAcc, NoLock, Preserve)
        {
            A100,   32
        }

        BankField (ACFG, A100, 0x80000068, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            A067,   2
        }

        Name (ABSM, 0x00)
        Method (A064, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Store (A067, ABSM)
                Store (0x00, A067)
            }
            Else
            {
                Store (ABSM, A067)
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Name (WRBS, 0x0130)
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A080, SystemMemory, Add (AGRB, Or (ShiftLeft (DerefOf (Index (\_SB.ADAT, Add (AB12, 
                    0x0D))), 0x0F), ShiftLeft (DerefOf (Index (\_SB.ADAT, Add (AB12, 
                    0x0E))), 0x0C))), 0x1000)
                Field (A080, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A067,   2, 
                        ,   2, 
                    A081,   1, 
                    A068,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A069,   1, 
                    Offset (0x88), 
                    A079,   4, 
                        ,   1, 
                    A076,   1, 
                    Offset (0xE0), 
                    A082,   32
                }

                BankField (A080, A082, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A063,   1
                }

                BankField (A080, A082, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A078,   1
                }

                BankField (A080, A082, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A074,   1, 
                    A075,   1, 
                        ,   11, 
                    A070,   2, 
                        ,   14, 
                    A077,   1
                }

                BankField (A080, A082, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A062,   6
                }

                OperationRegion (A083, SystemMemory, AGRB, 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A084,   32
                }

                BankField (A083, A084, Or (ShiftLeft (^WRBS, 0x10), Add (0x0800, Multiply (0x0100, 
                    DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0B)))))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A085,   1
                }

                BankField (A083, A084, Or (ShiftLeft (^WRBS, 0x10), 0x8029), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A086,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x00))), AB00)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x01))), AB0E)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x02))), AB01)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x03))), AB02)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x04))), AB03)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x05))), AB04)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x06))), AB05)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x07))), AB06)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x08))), AB07)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x09))), AB08)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0A))), AB09)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0B))), AB0A)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0C))), AB0B)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0D))), AB0C)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0E))), AB0D)
                }

                Method (A058, 0, NotSerialized)
                {
                    Store (A039 (), Local0)
                    If (LEqual (Local0, 0x01))
                    {
                        Return (AB01)
                    }

                    If (LEqual (Local0, 0x00))
                    {
                        Return (AB0E)
                    }
                }

                Method (A053, 0, NotSerialized)
                {
                    If (LNotEqual (AB10, 0x00))
                    {
                        If (LEqual (AB10, 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    If (LNotEqual (AB05, 0x00))
                    {
                        Return (AB05)
                    }

                    If (LGreater (AB10, 0x01))
                    {
                        Return (Subtract (AB10, 0x01))
                    }

                    Return (0x00)
                }

                Method (A052, 0, NotSerialized)
                {
                    If (LEqual (\_SB.AP05, 0x00))
                    {
                        If (LNotEqual (AB05, 0x00))
                        {
                            Return (AB05)
                        }

                        Return (AB0E)
                    }

                    Store (A059 (), Local0)
                    If (LNotEqual (Local0, 0x00))
                    {
                        If (LGreater (Local0, AB00))
                        {
                            Return (AB00)
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Store (A058 (), Local0)
                    If (LNotEqual (\_SB.AP03, 0x00))
                    {
                        If (LLess (\_SB.AP03, Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A051, 0, NotSerialized)
                {
                    Return (AB02)
                }

                Method (A054, 0, NotSerialized)
                {
                    Return (AB00)
                }

                Method (A050, 1, NotSerialized)
                {
                    Store (Arg0, AB02)
                    If (LEqual (AB03, 0x01))
                    {
                        \_SB.A060 (0x01)
                    }

                    A061 (Arg0)
                    If (LGreaterEqual (A062, 0x10))
                    {
                        If (LNotEqual (AB10, 0x00))
                        {
                            Store (0x00, A063)
                        }
                        Else
                        {
                            Store (0x01, A063)
                        }

                        If (LEqual (AB03, 0x01))
                        {
                            \_SB.A064 (0x00)
                        }
                        Else
                        {
                            A065 (0x00)
                        }

                        Name (A066, 0x00)
                        Store (A067, A066)
                        Store (0x00, A067)
                        Store (0x01, Local0)
                        While (Local0)
                        {
                            Store (0x01, A068)
                            Sleep (0x1E)
                            While (LEqual (A069, 0x01))
                            {
                                Sleep (0x0A)
                            }

                            If (LEqual (Arg0, 0x01))
                            {
                                If (LEqual (A070, 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        Store (A066, A067)
                        If (LEqual (AB03, 0x01))
                        {
                            \_SB.A064 (0x01)
                        }
                        Else
                        {
                            A065 (0x01)
                        }
                    }

                    If (LEqual (AB03, 0x01))
                    {
                        \_SB.A060 (0x00)
                    }
                }

                Method (A055, 1, NotSerialized)
                {
                    Store (Arg0, AB10)
                }

                Method (A056, 1, NotSerialized)
                {
                    ShiftRight (Arg0, 0x08, Local0)
                    If (LAnd (LGreaterEqual (Local0, A071), LLessEqual (Local0, A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Or (AB0D, ShiftLeft (AB0C, 0x03), Local0)
                    If (LEqual (Arg0, Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A057, 0, NotSerialized)
                {
                    Store (0x00, AB10)
                }

                Method (A061, 1, NotSerialized)
                {
                    If (LGreaterEqual (Arg0, 0x02))
                    {
                        Store (0x01, A074)
                        Store (0x00, A075)
                    }

                    If (LGreaterEqual (Arg0, 0x03))
                    {
                        Store (0x01, A074)
                        Store (0x01, A075)
                    }

                    If (LEqual (Arg0, 0x01))
                    {
                        Store (0x01, A076)
                        Store (0x00, A074)
                        Store (0x00, A075)
                        Store (0x00, A077)
                        If (LEqual (AB04, 0x01))
                        {
                            Store (0x01, A078)
                        }
                    }
                    Else
                    {
                        Store (0x00, A076)
                        Store (0x01, A077)
                        Store (0x00, A078)
                    }

                    Store (Arg0, A079)
                }

                Method (A093, 2, NotSerialized)
                {
                    If (LEqual (A089 (Arg0, 0x00), 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Store (A089 (Arg0, 0x34), Local0)
                    While (0x01)
                    {
                        Store (A089 (Arg0, And (Local0, 0xFF)), Local1)
                        If (LEqual (And (Local1, 0xFF), Arg1))
                        {
                            Return (And (Local0, 0xFF))
                        }

                        And (ShiftRight (Local1, 0x08), 0xFF, Local0)
                        If (LEqual (Local0, 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A065, 1, NotSerialized)
                {
                    Store (0x00, Local0)
                    If (LNotEqual (A089 (Local0, 0x00), 0xFFFFFFFF))
                    {
                        And (A089 (Local0, 0x08), 0x80, Local1)
                        If (LEqual (Local1, 0x80))
                        {
                            Store (0x07, Local7)
                        }
                        Else
                        {
                            Store (0x00, Local7)
                        }

                        While (LLessEqual (Local0, Local7))
                        {
                            Store (A093 (Local0, 0x10), Local1)
                            If (LEqual (Local1, 0x00))
                            {
                                Increment (Local0)
                                Continue
                            }

                            If (LEqual (Arg0, 0x00))
                            {
                                Store (A089 (Local0, Add (Local1, 0x10)), Local2)
                                A090 (Local0, Add (Local1, 0x10), And (Local2, Not (0x03
                                    )))
                                Store (Local2, Index (AESP, Local0))
                            }
                            Else
                            {
                                Store (DerefOf (Index (AESP, Local0)), Local2)
                                A090 (Local0, Add (Local1, 0x10), Local2)
                            }

                            Increment (Local0)
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A090, 3, Serialized)
                {
                    Add (AGRB, ShiftLeft (A071, 0x14), Local0)
                    Add (Local0, ShiftLeft (Arg0, 0x0C), Local0)
                    Add (Local0, Arg1, Local0)
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Store (Arg2, ADRR)
                }

                Method (A089, 2, Serialized)
                {
                    Add (AGRB, ShiftLeft (A071, 0x14), Local0)
                    Add (Local0, ShiftLeft (Arg0, 0x0C), Local0)
                    Add (Local0, Arg1, Local0)
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR)
                }

                Method (A087, 1, NotSerialized)
                {
                    If (LNotEqual (AB0B, 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A088, 1, NotSerialized)
                {
                    Name (A066, 0x00)
                    Store (A067, A066)
                    Store (0x00, A067)
                    If (LEqual (Arg0, 0x01))
                    {
                        Store (0x00, A081)
                        Store (0x01, Local0)
                    }
                    Else
                    {
                        Store (A089 (0x00, 0x04), Local0)
                        If (LNotEqual (Local0, 0xFFFFFFFF))
                        {
                            A090 (0x00, 0x04, And (Local0, Not (0x04)))
                            Store (A089 (0x01, 0x04), Local0)
                            If (LNotEqual (Local0, 0xFFFFFFFF))
                            {
                                A090 (0x01, 0x04, And (Local0, Not (0x04)))
                            }
                        }

                        Store (0x01, A081)
                        Store (0x05, Local0)
                    }

                    While (LNotEqual (Local0, 0x08))
                    {
                        If (LEqual (Local0, 0x01))
                        {
                            If (LGreater (AB0E, 0x01))
                            {
                                Store (AB0E, AB05)
                                A036 ()
                            }

                            \_SB.A091 (0x01, AB06, AB07)
                            A092 (0x01)
                            Store (0x00, A085)
                            Store (0x03, Local0)
                        }

                        If (LEqual (Local0, 0x03))
                        {
                            Store (0x00, Local1)
                            Store (0x00, Local2)
                            While (LLess (Local1, 0x3C))
                            {
                                If (LGreater (A062, 0x04))
                                {
                                    Store (0x01, Local2)
                                    Break
                                }

                                Sleep (0x01)
                                Increment (Local1)
                            }

                            If (LEqual (Local2, 0x01))
                            {
                                Store (0x04, Local0)
                            }
                            Else
                            {
                                Store (0x05, Local0)
                            }
                        }

                        If (LEqual (Local0, 0x04))
                        {
                            Store (0x00, Local1)
                            Store (0x00, Local2)
                            While (LLess (Local1, 0x50))
                            {
                                If (LAnd (LGreaterEqual (A062, 0x10), LLessEqual (A062, 0x13)))
                                {
                                    Store (0x01, Local2)
                                    Break
                                }

                                Sleep (0x01)
                                Increment (Local1)
                            }

                            If (LEqual (Local2, 0x01))
                            {
                                Store (0x07, Local0)
                            }
                            Else
                            {
                                If (LEqual (AB04, 0x01))
                                {
                                    Store (0x05, Local0)
                                }
                                Else
                                {
                                    Store (0x06, Local0)
                                }
                            }
                        }

                        If (LEqual (Local0, 0x06))
                        {
                            Store (0x01, AB04)
                            Store (0x01, AB05)
                            A061 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Or (ShiftLeft (AB0C, 0x03), AB0D, Local1)
                                \_SB.ALIC (Local1, 0x00, Sleep (0x02), \_SB.ALIC (Local1, 0x01, Store (0x03, 
                                    Local0), Continue, Store (0x05, Local0), If (LEqual (Local0, 0x05))
                                        {
                                            A089 (0x00, 0x00)
                                            Store (0x01, A085)
                                            A092 (0x00)
                                            \_SB.A091 (0x00, AB06, AB07)
                                            Store (0x00, AB05)
                                            Store (0x00, AB04)
                                            Store (0x00, AB10)
                                            Store (0x00, Local2)
                                            Store (0x08, Local0)
                                        }), If (LEqual (Local0, 0x07))
                                    {
                                        Store (0x01, Local2)
                                        Store (0x08, Local0)
                                    }, If (LEqual (AB04, 0x00))
                                    {
                                        Store (0x00, AB05)
                                    })
                            }
                        }
                    }

                    If (LOr (LGreater (AB0E, 0x01), LEqual (AP05, 0x01)))
                    {
                        If (LGreater (DerefOf (Index (\_SB.ADAT, 0x00)), 0x01))
                        {
                            A036 ()
                        }
                    }

                    Store (A066, A067)
                    Return (Local2)
                }

                Method (A092, 1, NotSerialized)
                {
                    If (LGreater (AB06, AB07))
                    {
                        Subtract (AB06, AB07, Local0)
                    }
                    Else
                    {
                        Subtract (AB07, AB06, Local0)
                    }

                    Increment (Local0)
                    ShiftLeft (0x01, Local0, Local0)
                    Decrement (Local0)
                    ShiftLeft (Local0, AB08, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (A086, Local0, A086)
                    }
                    Else
                    {
                        And (A086, Not (Local0), A086)
                    }
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A080, SystemMemory, Add (AGRB, Or (ShiftLeft (DerefOf (Index (\_SB.ADAT, Add (AB12, 
                    0x0D))), 0x0F), ShiftLeft (DerefOf (Index (\_SB.ADAT, Add (AB12, 
                    0x0E))), 0x0C))), 0x1000)
                Field (A080, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A067,   2, 
                        ,   2, 
                    A081,   1, 
                    A068,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A069,   1, 
                    Offset (0x88), 
                    A079,   4, 
                        ,   1, 
                    A076,   1, 
                    Offset (0xE0), 
                    A082,   32
                }

                BankField (A080, A082, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A063,   1
                }

                BankField (A080, A082, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A078,   1
                }

                BankField (A080, A082, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A074,   1, 
                    A075,   1, 
                        ,   11, 
                    A070,   2, 
                        ,   14, 
                    A077,   1
                }

                BankField (A080, A082, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A062,   6
                }

                OperationRegion (A083, SystemMemory, AGRB, 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A084,   32
                }

                BankField (A083, A084, Or (ShiftLeft (^WRBS, 0x10), Add (0x0800, Multiply (0x0100, 
                    DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0B)))))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A085,   1
                }

                BankField (A083, A084, Or (ShiftLeft (^WRBS, 0x10), 0x8029), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A086,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x00))), AB00)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x01))), AB0E)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x02))), AB01)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x03))), AB02)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x04))), AB03)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x05))), AB04)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x06))), AB05)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x07))), AB06)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x08))), AB07)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x09))), AB08)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0A))), AB09)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0B))), AB0A)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0C))), AB0B)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0D))), AB0C)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0E))), AB0D)
                }

                Method (A058, 0, NotSerialized)
                {
                    Store (A039 (), Local0)
                    If (LEqual (Local0, 0x01))
                    {
                        Return (AB01)
                    }

                    If (LEqual (Local0, 0x00))
                    {
                        Return (AB0E)
                    }
                }

                Method (A053, 0, NotSerialized)
                {
                    If (LNotEqual (AB10, 0x00))
                    {
                        If (LEqual (AB10, 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    If (LNotEqual (AB05, 0x00))
                    {
                        Return (AB05)
                    }

                    If (LGreater (AB10, 0x01))
                    {
                        Return (Subtract (AB10, 0x01))
                    }

                    Return (0x00)
                }

                Method (A052, 0, NotSerialized)
                {
                    If (LEqual (\_SB.AP05, 0x00))
                    {
                        If (LNotEqual (AB05, 0x00))
                        {
                            Return (AB05)
                        }

                        Return (AB0E)
                    }

                    Store (A059 (), Local0)
                    If (LNotEqual (Local0, 0x00))
                    {
                        If (LGreater (Local0, AB00))
                        {
                            Return (AB00)
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Store (A058 (), Local0)
                    If (LNotEqual (\_SB.AP03, 0x00))
                    {
                        If (LLess (\_SB.AP03, Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A051, 0, NotSerialized)
                {
                    Return (AB02)
                }

                Method (A054, 0, NotSerialized)
                {
                    Return (AB00)
                }

                Method (A050, 1, NotSerialized)
                {
                    Store (Arg0, AB02)
                    If (LEqual (AB03, 0x01))
                    {
                        \_SB.A060 (0x01)
                    }

                    A061 (Arg0)
                    If (LGreaterEqual (A062, 0x10))
                    {
                        If (LNotEqual (AB10, 0x00))
                        {
                            Store (0x00, A063)
                        }
                        Else
                        {
                            Store (0x01, A063)
                        }

                        If (LEqual (AB03, 0x01))
                        {
                            \_SB.A064 (0x00)
                        }
                        Else
                        {
                            A065 (0x00)
                        }

                        Name (A066, 0x00)
                        Store (A067, A066)
                        Store (0x00, A067)
                        Store (0x01, Local0)
                        While (Local0)
                        {
                            Store (0x01, A068)
                            Sleep (0x1E)
                            While (LEqual (A069, 0x01))
                            {
                                Sleep (0x0A)
                            }

                            If (LEqual (Arg0, 0x01))
                            {
                                If (LEqual (A070, 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        Store (A066, A067)
                        If (LEqual (AB03, 0x01))
                        {
                            \_SB.A064 (0x01)
                        }
                        Else
                        {
                            A065 (0x01)
                        }
                    }

                    If (LEqual (AB03, 0x01))
                    {
                        \_SB.A060 (0x00)
                    }
                }

                Method (A055, 1, NotSerialized)
                {
                    Store (Arg0, AB10)
                }

                Method (A056, 1, NotSerialized)
                {
                    ShiftRight (Arg0, 0x08, Local0)
                    If (LAnd (LGreaterEqual (Local0, A071), LLessEqual (Local0, A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Or (AB0D, ShiftLeft (AB0C, 0x03), Local0)
                    If (LEqual (Arg0, Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A057, 0, NotSerialized)
                {
                    Store (0x00, AB10)
                }

                Method (A061, 1, NotSerialized)
                {
                    If (LGreaterEqual (Arg0, 0x02))
                    {
                        Store (0x01, A074)
                        Store (0x00, A075)
                    }

                    If (LGreaterEqual (Arg0, 0x03))
                    {
                        Store (0x01, A074)
                        Store (0x01, A075)
                    }

                    If (LEqual (Arg0, 0x01))
                    {
                        Store (0x01, A076)
                        Store (0x00, A074)
                        Store (0x00, A075)
                        Store (0x00, A077)
                        If (LEqual (AB04, 0x01))
                        {
                            Store (0x01, A078)
                        }
                    }
                    Else
                    {
                        Store (0x00, A076)
                        Store (0x01, A077)
                        Store (0x00, A078)
                    }

                    Store (Arg0, A079)
                }

                Method (A093, 2, NotSerialized)
                {
                    If (LEqual (A089 (Arg0, 0x00), 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Store (A089 (Arg0, 0x34), Local0)
                    While (0x01)
                    {
                        Store (A089 (Arg0, And (Local0, 0xFF)), Local1)
                        If (LEqual (And (Local1, 0xFF), Arg1))
                        {
                            Return (And (Local0, 0xFF))
                        }

                        And (ShiftRight (Local1, 0x08), 0xFF, Local0)
                        If (LEqual (Local0, 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A065, 1, NotSerialized)
                {
                    Store (0x00, Local0)
                    If (LNotEqual (A089 (Local0, 0x00), 0xFFFFFFFF))
                    {
                        And (A089 (Local0, 0x08), 0x80, Local1)
                        If (LEqual (Local1, 0x80))
                        {
                            Store (0x07, Local7)
                        }
                        Else
                        {
                            Store (0x00, Local7)
                        }

                        While (LLessEqual (Local0, Local7))
                        {
                            Store (A093 (Local0, 0x10), Local1)
                            If (LEqual (Local1, 0x00))
                            {
                                Increment (Local0)
                                Continue
                            }

                            If (LEqual (Arg0, 0x00))
                            {
                                Store (A089 (Local0, Add (Local1, 0x10)), Local2)
                                A090 (Local0, Add (Local1, 0x10), And (Local2, Not (0x03
                                    )))
                                Store (Local2, Index (AESP, Local0))
                            }
                            Else
                            {
                                Store (DerefOf (Index (AESP, Local0)), Local2)
                                A090 (Local0, Add (Local1, 0x10), Local2)
                            }

                            Increment (Local0)
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A090, 3, Serialized)
                {
                    Add (AGRB, ShiftLeft (A071, 0x14), Local0)
                    Add (Local0, ShiftLeft (Arg0, 0x0C), Local0)
                    Add (Local0, Arg1, Local0)
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Store (Arg2, ADRR)
                }

                Method (A089, 2, Serialized)
                {
                    Add (AGRB, ShiftLeft (A071, 0x14), Local0)
                    Add (Local0, ShiftLeft (Arg0, 0x0C), Local0)
                    Add (Local0, Arg1, Local0)
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR)
                }

                Method (A087, 1, NotSerialized)
                {
                    If (LNotEqual (AB0B, 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A088, 1, NotSerialized)
                {
                    Name (A066, 0x00)
                    Store (A067, A066)
                    Store (0x00, A067)
                    If (LEqual (Arg0, 0x01))
                    {
                        Store (0x00, A081)
                        Store (0x01, Local0)
                    }
                    Else
                    {
                        Store (A089 (0x00, 0x04), Local0)
                        If (LNotEqual (Local0, 0xFFFFFFFF))
                        {
                            A090 (0x00, 0x04, And (Local0, Not (0x04)))
                            Store (A089 (0x01, 0x04), Local0)
                            If (LNotEqual (Local0, 0xFFFFFFFF))
                            {
                                A090 (0x01, 0x04, And (Local0, Not (0x04)))
                            }
                        }

                        Store (0x01, A081)
                        Store (0x05, Local0)
                    }

                    While (LNotEqual (Local0, 0x08))
                    {
                        If (LEqual (Local0, 0x01))
                        {
                            If (LGreater (AB0E, 0x01))
                            {
                                Store (AB0E, AB05)
                                A036 ()
                            }

                            \_SB.A091 (0x01, AB06, AB07)
                            A092 (0x01)
                            Store (0x00, A085)
                            Store (0x03, Local0)
                        }

                        If (LEqual (Local0, 0x03))
                        {
                            Store (0x00, Local1)
                            Store (0x00, Local2)
                            While (LLess (Local1, 0x3C))
                            {
                                If (LGreater (A062, 0x04))
                                {
                                    Store (0x01, Local2)
                                    Break
                                }

                                Sleep (0x01)
                                Increment (Local1)
                            }

                            If (LEqual (Local2, 0x01))
                            {
                                Store (0x04, Local0)
                            }
                            Else
                            {
                                Store (0x05, Local0)
                            }
                        }

                        If (LEqual (Local0, 0x04))
                        {
                            Store (0x00, Local1)
                            Store (0x00, Local2)
                            While (LLess (Local1, 0x50))
                            {
                                If (LAnd (LGreaterEqual (A062, 0x10), LLessEqual (A062, 0x13)))
                                {
                                    Store (0x01, Local2)
                                    Break
                                }

                                Sleep (0x01)
                                Increment (Local1)
                            }

                            If (LEqual (Local2, 0x01))
                            {
                                Store (0x07, Local0)
                            }
                            Else
                            {
                                If (LEqual (AB04, 0x01))
                                {
                                    Store (0x05, Local0)
                                }
                                Else
                                {
                                    Store (0x06, Local0)
                                }
                            }
                        }

                        If (LEqual (Local0, 0x06))
                        {
                            Store (0x01, AB04)
                            Store (0x01, AB05)
                            A061 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Or (ShiftLeft (AB0C, 0x03), AB0D, Local1)
                                \_SB.ALIC (Local1, 0x00, Sleep (0x02), \_SB.ALIC (Local1, 0x01, Store (0x03, 
                                    Local0), Continue, Store (0x05, Local0), If (LEqual (Local0, 0x05))
                                        {
                                            A089 (0x00, 0x00)
                                            Store (0x01, A085)
                                            A092 (0x00)
                                            \_SB.A091 (0x00, AB06, AB07)
                                            Store (0x00, AB05)
                                            Store (0x00, AB04)
                                            Store (0x00, AB10)
                                            Store (0x00, Local2)
                                            Store (0x08, Local0)
                                        }), If (LEqual (Local0, 0x07))
                                    {
                                        Store (0x01, Local2)
                                        Store (0x08, Local0)
                                    }, If (LEqual (AB04, 0x00))
                                    {
                                        Store (0x00, AB05)
                                    })
                            }
                        }
                    }

                    If (LOr (LGreater (AB0E, 0x01), LEqual (AP05, 0x01)))
                    {
                        If (LGreater (DerefOf (Index (\_SB.ADAT, 0x00)), 0x01))
                        {
                            A036 ()
                        }
                    }

                    Store (A066, A067)
                    Return (Local2)
                }

                Method (A092, 1, NotSerialized)
                {
                    If (LGreater (AB06, AB07))
                    {
                        Subtract (AB06, AB07, Local0)
                    }
                    Else
                    {
                        Subtract (AB07, AB06, Local0)
                    }

                    Increment (Local0)
                    ShiftLeft (0x01, Local0, Local0)
                    Decrement (Local0)
                    ShiftLeft (Local0, AB08, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (A086, Local0, A086)
                    }
                    Else
                    {
                        And (A086, Not (Local0), A086)
                    }
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A080, SystemMemory, Add (AGRB, Or (ShiftLeft (DerefOf (Index (\_SB.ADAT, Add (AB12, 
                    0x0D))), 0x0F), ShiftLeft (DerefOf (Index (\_SB.ADAT, Add (AB12, 
                    0x0E))), 0x0C))), 0x1000)
                Field (A080, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A067,   2, 
                        ,   2, 
                    A081,   1, 
                    A068,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A069,   1, 
                    Offset (0x88), 
                    A079,   4, 
                        ,   1, 
                    A076,   1, 
                    Offset (0xE0), 
                    A082,   32
                }

                BankField (A080, A082, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A063,   1
                }

                BankField (A080, A082, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A078,   1
                }

                BankField (A080, A082, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A074,   1, 
                    A075,   1, 
                        ,   11, 
                    A070,   2, 
                        ,   14, 
                    A077,   1
                }

                BankField (A080, A082, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A062,   6
                }

                OperationRegion (A083, SystemMemory, AGRB, 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A084,   32
                }

                BankField (A083, A084, Or (ShiftLeft (^WRBS, 0x10), Add (0x0800, Multiply (0x0100, 
                    DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0B)))))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A085,   1
                }

                BankField (A083, A084, Or (ShiftLeft (^WRBS, 0x10), 0x8029), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A086,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x00))), AB00)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x01))), AB0E)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x02))), AB01)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x03))), AB02)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x04))), AB03)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x05))), AB04)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x06))), AB05)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x07))), AB06)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x08))), AB07)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x09))), AB08)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0A))), AB09)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0B))), AB0A)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0C))), AB0B)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0D))), AB0C)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0E))), AB0D)
                }

                Method (A058, 0, NotSerialized)
                {
                    Store (A039 (), Local0)
                    If (LEqual (Local0, 0x01))
                    {
                        Return (AB01)
                    }

                    If (LEqual (Local0, 0x00))
                    {
                        Return (AB0E)
                    }
                }

                Method (A053, 0, NotSerialized)
                {
                    If (LNotEqual (AB10, 0x00))
                    {
                        If (LEqual (AB10, 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    If (LNotEqual (AB05, 0x00))
                    {
                        Return (AB05)
                    }

                    If (LGreater (AB10, 0x01))
                    {
                        Return (Subtract (AB10, 0x01))
                    }

                    Return (0x00)
                }

                Method (A052, 0, NotSerialized)
                {
                    If (LEqual (\_SB.AP05, 0x00))
                    {
                        If (LNotEqual (AB05, 0x00))
                        {
                            Return (AB05)
                        }

                        Return (AB0E)
                    }

                    Store (A059 (), Local0)
                    If (LNotEqual (Local0, 0x00))
                    {
                        If (LGreater (Local0, AB00))
                        {
                            Return (AB00)
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Store (A058 (), Local0)
                    If (LNotEqual (\_SB.AP03, 0x00))
                    {
                        If (LLess (\_SB.AP03, Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A051, 0, NotSerialized)
                {
                    Return (AB02)
                }

                Method (A054, 0, NotSerialized)
                {
                    Return (AB00)
                }

                Method (A050, 1, NotSerialized)
                {
                    Store (Arg0, AB02)
                    If (LEqual (AB03, 0x01))
                    {
                        \_SB.A060 (0x01)
                    }

                    A061 (Arg0)
                    If (LGreaterEqual (A062, 0x10))
                    {
                        If (LNotEqual (AB10, 0x00))
                        {
                            Store (0x00, A063)
                        }
                        Else
                        {
                            Store (0x01, A063)
                        }

                        If (LEqual (AB03, 0x01))
                        {
                            \_SB.A064 (0x00)
                        }
                        Else
                        {
                            A065 (0x00)
                        }

                        Name (A066, 0x00)
                        Store (A067, A066)
                        Store (0x00, A067)
                        Store (0x01, Local0)
                        While (Local0)
                        {
                            Store (0x01, A068)
                            Sleep (0x1E)
                            While (LEqual (A069, 0x01))
                            {
                                Sleep (0x0A)
                            }

                            If (LEqual (Arg0, 0x01))
                            {
                                If (LEqual (A070, 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        Store (A066, A067)
                        If (LEqual (AB03, 0x01))
                        {
                            \_SB.A064 (0x01)
                        }
                        Else
                        {
                            A065 (0x01)
                        }
                    }

                    If (LEqual (AB03, 0x01))
                    {
                        \_SB.A060 (0x00)
                    }
                }

                Method (A055, 1, NotSerialized)
                {
                    Store (Arg0, AB10)
                }

                Method (A056, 1, NotSerialized)
                {
                    ShiftRight (Arg0, 0x08, Local0)
                    If (LAnd (LGreaterEqual (Local0, A071), LLessEqual (Local0, A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Or (AB0D, ShiftLeft (AB0C, 0x03), Local0)
                    If (LEqual (Arg0, Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A057, 0, NotSerialized)
                {
                    Store (0x00, AB10)
                }

                Method (A061, 1, NotSerialized)
                {
                    If (LGreaterEqual (Arg0, 0x02))
                    {
                        Store (0x01, A074)
                        Store (0x00, A075)
                    }

                    If (LGreaterEqual (Arg0, 0x03))
                    {
                        Store (0x01, A074)
                        Store (0x01, A075)
                    }

                    If (LEqual (Arg0, 0x01))
                    {
                        Store (0x01, A076)
                        Store (0x00, A074)
                        Store (0x00, A075)
                        Store (0x00, A077)
                        If (LEqual (AB04, 0x01))
                        {
                            Store (0x01, A078)
                        }
                    }
                    Else
                    {
                        Store (0x00, A076)
                        Store (0x01, A077)
                        Store (0x00, A078)
                    }

                    Store (Arg0, A079)
                }

                Method (A093, 2, NotSerialized)
                {
                    If (LEqual (A089 (Arg0, 0x00), 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Store (A089 (Arg0, 0x34), Local0)
                    While (0x01)
                    {
                        Store (A089 (Arg0, And (Local0, 0xFF)), Local1)
                        If (LEqual (And (Local1, 0xFF), Arg1))
                        {
                            Return (And (Local0, 0xFF))
                        }

                        And (ShiftRight (Local1, 0x08), 0xFF, Local0)
                        If (LEqual (Local0, 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A065, 1, NotSerialized)
                {
                    Store (0x00, Local0)
                    If (LNotEqual (A089 (Local0, 0x00), 0xFFFFFFFF))
                    {
                        And (A089 (Local0, 0x08), 0x80, Local1)
                        If (LEqual (Local1, 0x80))
                        {
                            Store (0x07, Local7)
                        }
                        Else
                        {
                            Store (0x00, Local7)
                        }

                        While (LLessEqual (Local0, Local7))
                        {
                            Store (A093 (Local0, 0x10), Local1)
                            If (LEqual (Local1, 0x00))
                            {
                                Increment (Local0)
                                Continue
                            }

                            If (LEqual (Arg0, 0x00))
                            {
                                Store (A089 (Local0, Add (Local1, 0x10)), Local2)
                                A090 (Local0, Add (Local1, 0x10), And (Local2, Not (0x03
                                    )))
                                Store (Local2, Index (AESP, Local0))
                            }
                            Else
                            {
                                Store (DerefOf (Index (AESP, Local0)), Local2)
                                A090 (Local0, Add (Local1, 0x10), Local2)
                            }

                            Increment (Local0)
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A090, 3, Serialized)
                {
                    Add (AGRB, ShiftLeft (A071, 0x14), Local0)
                    Add (Local0, ShiftLeft (Arg0, 0x0C), Local0)
                    Add (Local0, Arg1, Local0)
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Store (Arg2, ADRR)
                }

                Method (A089, 2, Serialized)
                {
                    Add (AGRB, ShiftLeft (A071, 0x14), Local0)
                    Add (Local0, ShiftLeft (Arg0, 0x0C), Local0)
                    Add (Local0, Arg1, Local0)
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR)
                }

                Method (A087, 1, NotSerialized)
                {
                    If (LNotEqual (AB0B, 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A088, 1, NotSerialized)
                {
                    Name (A066, 0x00)
                    Store (A067, A066)
                    Store (0x00, A067)
                    If (LEqual (Arg0, 0x01))
                    {
                        Store (0x00, A081)
                        Store (0x01, Local0)
                    }
                    Else
                    {
                        Store (A089 (0x00, 0x04), Local0)
                        If (LNotEqual (Local0, 0xFFFFFFFF))
                        {
                            A090 (0x00, 0x04, And (Local0, Not (0x04)))
                            Store (A089 (0x01, 0x04), Local0)
                            If (LNotEqual (Local0, 0xFFFFFFFF))
                            {
                                A090 (0x01, 0x04, And (Local0, Not (0x04)))
                            }
                        }

                        Store (0x01, A081)
                        Store (0x05, Local0)
                    }

                    While (LNotEqual (Local0, 0x08))
                    {
                        If (LEqual (Local0, 0x01))
                        {
                            If (LGreater (AB0E, 0x01))
                            {
                                Store (AB0E, AB05)
                                A036 ()
                            }

                            \_SB.A091 (0x01, AB06, AB07)
                            A092 (0x01)
                            Store (0x00, A085)
                            Store (0x03, Local0)
                        }

                        If (LEqual (Local0, 0x03))
                        {
                            Store (0x00, Local1)
                            Store (0x00, Local2)
                            While (LLess (Local1, 0x3C))
                            {
                                If (LGreater (A062, 0x04))
                                {
                                    Store (0x01, Local2)
                                    Break
                                }

                                Sleep (0x01)
                                Increment (Local1)
                            }

                            If (LEqual (Local2, 0x01))
                            {
                                Store (0x04, Local0)
                            }
                            Else
                            {
                                Store (0x05, Local0)
                            }
                        }

                        If (LEqual (Local0, 0x04))
                        {
                            Store (0x00, Local1)
                            Store (0x00, Local2)
                            While (LLess (Local1, 0x50))
                            {
                                If (LAnd (LGreaterEqual (A062, 0x10), LLessEqual (A062, 0x13)))
                                {
                                    Store (0x01, Local2)
                                    Break
                                }

                                Sleep (0x01)
                                Increment (Local1)
                            }

                            If (LEqual (Local2, 0x01))
                            {
                                Store (0x07, Local0)
                            }
                            Else
                            {
                                If (LEqual (AB04, 0x01))
                                {
                                    Store (0x05, Local0)
                                }
                                Else
                                {
                                    Store (0x06, Local0)
                                }
                            }
                        }

                        If (LEqual (Local0, 0x06))
                        {
                            Store (0x01, AB04)
                            Store (0x01, AB05)
                            A061 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Or (ShiftLeft (AB0C, 0x03), AB0D, Local1)
                                \_SB.ALIC (Local1, 0x00, Sleep (0x02), \_SB.ALIC (Local1, 0x01, Store (0x03, 
                                    Local0), Continue, Store (0x05, Local0), If (LEqual (Local0, 0x05))
                                        {
                                            A089 (0x00, 0x00)
                                            Store (0x01, A085)
                                            A092 (0x00)
                                            \_SB.A091 (0x00, AB06, AB07)
                                            Store (0x00, AB05)
                                            Store (0x00, AB04)
                                            Store (0x00, AB10)
                                            Store (0x00, Local2)
                                            Store (0x08, Local0)
                                        }), If (LEqual (Local0, 0x07))
                                    {
                                        Store (0x01, Local2)
                                        Store (0x08, Local0)
                                    }, If (LEqual (AB04, 0x00))
                                    {
                                        Store (0x00, AB05)
                                    })
                            }
                        }
                    }

                    If (LOr (LGreater (AB0E, 0x01), LEqual (AP05, 0x01)))
                    {
                        If (LGreater (DerefOf (Index (\_SB.ADAT, 0x00)), 0x01))
                        {
                            A036 ()
                        }
                    }

                    Store (A066, A067)
                    Return (Local2)
                }

                Method (A092, 1, NotSerialized)
                {
                    If (LGreater (AB06, AB07))
                    {
                        Subtract (AB06, AB07, Local0)
                    }
                    Else
                    {
                        Subtract (AB07, AB06, Local0)
                    }

                    Increment (Local0)
                    ShiftLeft (0x01, Local0, Local0)
                    Decrement (Local0)
                    ShiftLeft (Local0, AB08, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (A086, Local0, A086)
                    }
                    Else
                    {
                        And (A086, Not (Local0), A086)
                    }
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A080, SystemMemory, Add (AGRB, Or (ShiftLeft (DerefOf (Index (\_SB.ADAT, Add (AB12, 
                    0x0D))), 0x0F), ShiftLeft (DerefOf (Index (\_SB.ADAT, Add (AB12, 
                    0x0E))), 0x0C))), 0x1000)
                Field (A080, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A067,   2, 
                        ,   2, 
                    A081,   1, 
                    A068,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A069,   1, 
                    Offset (0x88), 
                    A079,   4, 
                        ,   1, 
                    A076,   1, 
                    Offset (0xE0), 
                    A082,   32
                }

                BankField (A080, A082, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A063,   1
                }

                BankField (A080, A082, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A078,   1
                }

                BankField (A080, A082, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A074,   1, 
                    A075,   1, 
                        ,   11, 
                    A070,   2, 
                        ,   14, 
                    A077,   1
                }

                BankField (A080, A082, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A062,   6
                }

                OperationRegion (A083, SystemMemory, AGRB, 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A084,   32
                }

                BankField (A083, A084, Or (ShiftLeft (^WRBS, 0x10), Add (0x0800, Multiply (0x0100, 
                    DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0B)))))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A085,   1
                }

                BankField (A083, A084, Or (ShiftLeft (^WRBS, 0x10), 0x8029), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A086,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x00))), AB00)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x01))), AB0E)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x02))), AB01)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x03))), AB02)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x04))), AB03)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x05))), AB04)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x06))), AB05)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x07))), AB06)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x08))), AB07)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x09))), AB08)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0A))), AB09)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0B))), AB0A)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0C))), AB0B)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0D))), AB0C)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0E))), AB0D)
                }

                Method (A058, 0, NotSerialized)
                {
                    Store (A039 (), Local0)
                    If (LEqual (Local0, 0x01))
                    {
                        Return (AB01)
                    }

                    If (LEqual (Local0, 0x00))
                    {
                        Return (AB0E)
                    }
                }

                Method (A053, 0, NotSerialized)
                {
                    If (LNotEqual (AB10, 0x00))
                    {
                        If (LEqual (AB10, 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    If (LNotEqual (AB05, 0x00))
                    {
                        Return (AB05)
                    }

                    If (LGreater (AB10, 0x01))
                    {
                        Return (Subtract (AB10, 0x01))
                    }

                    Return (0x00)
                }

                Method (A052, 0, NotSerialized)
                {
                    If (LEqual (\_SB.AP05, 0x00))
                    {
                        If (LNotEqual (AB05, 0x00))
                        {
                            Return (AB05)
                        }

                        Return (AB0E)
                    }

                    Store (A059 (), Local0)
                    If (LNotEqual (Local0, 0x00))
                    {
                        If (LGreater (Local0, AB00))
                        {
                            Return (AB00)
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Store (A058 (), Local0)
                    If (LNotEqual (\_SB.AP03, 0x00))
                    {
                        If (LLess (\_SB.AP03, Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A051, 0, NotSerialized)
                {
                    Return (AB02)
                }

                Method (A054, 0, NotSerialized)
                {
                    Return (AB00)
                }

                Method (A050, 1, NotSerialized)
                {
                    Store (Arg0, AB02)
                    If (LEqual (AB03, 0x01))
                    {
                        \_SB.A060 (0x01)
                    }

                    A061 (Arg0)
                    If (LGreaterEqual (A062, 0x10))
                    {
                        If (LNotEqual (AB10, 0x00))
                        {
                            Store (0x00, A063)
                        }
                        Else
                        {
                            Store (0x01, A063)
                        }

                        If (LEqual (AB03, 0x01))
                        {
                            \_SB.A064 (0x00)
                        }
                        Else
                        {
                            A065 (0x00)
                        }

                        Name (A066, 0x00)
                        Store (A067, A066)
                        Store (0x00, A067)
                        Store (0x01, Local0)
                        While (Local0)
                        {
                            Store (0x01, A068)
                            Sleep (0x1E)
                            While (LEqual (A069, 0x01))
                            {
                                Sleep (0x0A)
                            }

                            If (LEqual (Arg0, 0x01))
                            {
                                If (LEqual (A070, 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        Store (A066, A067)
                        If (LEqual (AB03, 0x01))
                        {
                            \_SB.A064 (0x01)
                        }
                        Else
                        {
                            A065 (0x01)
                        }
                    }

                    If (LEqual (AB03, 0x01))
                    {
                        \_SB.A060 (0x00)
                    }
                }

                Method (A055, 1, NotSerialized)
                {
                    Store (Arg0, AB10)
                }

                Method (A056, 1, NotSerialized)
                {
                    ShiftRight (Arg0, 0x08, Local0)
                    If (LAnd (LGreaterEqual (Local0, A071), LLessEqual (Local0, A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Or (AB0D, ShiftLeft (AB0C, 0x03), Local0)
                    If (LEqual (Arg0, Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A057, 0, NotSerialized)
                {
                    Store (0x00, AB10)
                }

                Method (A061, 1, NotSerialized)
                {
                    If (LGreaterEqual (Arg0, 0x02))
                    {
                        Store (0x01, A074)
                        Store (0x00, A075)
                    }

                    If (LGreaterEqual (Arg0, 0x03))
                    {
                        Store (0x01, A074)
                        Store (0x01, A075)
                    }

                    If (LEqual (Arg0, 0x01))
                    {
                        Store (0x01, A076)
                        Store (0x00, A074)
                        Store (0x00, A075)
                        Store (0x00, A077)
                        If (LEqual (AB04, 0x01))
                        {
                            Store (0x01, A078)
                        }
                    }
                    Else
                    {
                        Store (0x00, A076)
                        Store (0x01, A077)
                        Store (0x00, A078)
                    }

                    Store (Arg0, A079)
                }

                Method (A093, 2, NotSerialized)
                {
                    If (LEqual (A089 (Arg0, 0x00), 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Store (A089 (Arg0, 0x34), Local0)
                    While (0x01)
                    {
                        Store (A089 (Arg0, And (Local0, 0xFF)), Local1)
                        If (LEqual (And (Local1, 0xFF), Arg1))
                        {
                            Return (And (Local0, 0xFF))
                        }

                        And (ShiftRight (Local1, 0x08), 0xFF, Local0)
                        If (LEqual (Local0, 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A065, 1, NotSerialized)
                {
                    Store (0x00, Local0)
                    If (LNotEqual (A089 (Local0, 0x00), 0xFFFFFFFF))
                    {
                        And (A089 (Local0, 0x08), 0x80, Local1)
                        If (LEqual (Local1, 0x80))
                        {
                            Store (0x07, Local7)
                        }
                        Else
                        {
                            Store (0x00, Local7)
                        }

                        While (LLessEqual (Local0, Local7))
                        {
                            Store (A093 (Local0, 0x10), Local1)
                            If (LEqual (Local1, 0x00))
                            {
                                Increment (Local0)
                                Continue
                            }

                            If (LEqual (Arg0, 0x00))
                            {
                                Store (A089 (Local0, Add (Local1, 0x10)), Local2)
                                A090 (Local0, Add (Local1, 0x10), And (Local2, Not (0x03
                                    )))
                                Store (Local2, Index (AESP, Local0))
                            }
                            Else
                            {
                                Store (DerefOf (Index (AESP, Local0)), Local2)
                                A090 (Local0, Add (Local1, 0x10), Local2)
                            }

                            Increment (Local0)
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A090, 3, Serialized)
                {
                    Add (AGRB, ShiftLeft (A071, 0x14), Local0)
                    Add (Local0, ShiftLeft (Arg0, 0x0C), Local0)
                    Add (Local0, Arg1, Local0)
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Store (Arg2, ADRR)
                }

                Method (A089, 2, Serialized)
                {
                    Add (AGRB, ShiftLeft (A071, 0x14), Local0)
                    Add (Local0, ShiftLeft (Arg0, 0x0C), Local0)
                    Add (Local0, Arg1, Local0)
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR)
                }

                Method (A087, 1, NotSerialized)
                {
                    If (LNotEqual (AB0B, 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A088, 1, NotSerialized)
                {
                    Name (A066, 0x00)
                    Store (A067, A066)
                    Store (0x00, A067)
                    If (LEqual (Arg0, 0x01))
                    {
                        Store (0x00, A081)
                        Store (0x01, Local0)
                    }
                    Else
                    {
                        Store (A089 (0x00, 0x04), Local0)
                        If (LNotEqual (Local0, 0xFFFFFFFF))
                        {
                            A090 (0x00, 0x04, And (Local0, Not (0x04)))
                            Store (A089 (0x01, 0x04), Local0)
                            If (LNotEqual (Local0, 0xFFFFFFFF))
                            {
                                A090 (0x01, 0x04, And (Local0, Not (0x04)))
                            }
                        }

                        Store (0x01, A081)
                        Store (0x05, Local0)
                    }

                    While (LNotEqual (Local0, 0x08))
                    {
                        If (LEqual (Local0, 0x01))
                        {
                            If (LGreater (AB0E, 0x01))
                            {
                                Store (AB0E, AB05)
                                A036 ()
                            }

                            \_SB.A091 (0x01, AB06, AB07)
                            A092 (0x01)
                            Store (0x00, A085)
                            Store (0x03, Local0)
                        }

                        If (LEqual (Local0, 0x03))
                        {
                            Store (0x00, Local1)
                            Store (0x00, Local2)
                            While (LLess (Local1, 0x3C))
                            {
                                If (LGreater (A062, 0x04))
                                {
                                    Store (0x01, Local2)
                                    Break
                                }

                                Sleep (0x01)
                                Increment (Local1)
                            }

                            If (LEqual (Local2, 0x01))
                            {
                                Store (0x04, Local0)
                            }
                            Else
                            {
                                Store (0x05, Local0)
                            }
                        }

                        If (LEqual (Local0, 0x04))
                        {
                            Store (0x00, Local1)
                            Store (0x00, Local2)
                            While (LLess (Local1, 0x50))
                            {
                                If (LAnd (LGreaterEqual (A062, 0x10), LLessEqual (A062, 0x13)))
                                {
                                    Store (0x01, Local2)
                                    Break
                                }

                                Sleep (0x01)
                                Increment (Local1)
                            }

                            If (LEqual (Local2, 0x01))
                            {
                                Store (0x07, Local0)
                            }
                            Else
                            {
                                If (LEqual (AB04, 0x01))
                                {
                                    Store (0x05, Local0)
                                }
                                Else
                                {
                                    Store (0x06, Local0)
                                }
                            }
                        }

                        If (LEqual (Local0, 0x06))
                        {
                            Store (0x01, AB04)
                            Store (0x01, AB05)
                            A061 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Or (ShiftLeft (AB0C, 0x03), AB0D, Local1)
                                \_SB.ALIC (Local1, 0x00, Sleep (0x02), \_SB.ALIC (Local1, 0x01, Store (0x03, 
                                    Local0), Continue, Store (0x05, Local0), If (LEqual (Local0, 0x05))
                                        {
                                            A089 (0x00, 0x00)
                                            Store (0x01, A085)
                                            A092 (0x00)
                                            \_SB.A091 (0x00, AB06, AB07)
                                            Store (0x00, AB05)
                                            Store (0x00, AB04)
                                            Store (0x00, AB10)
                                            Store (0x00, Local2)
                                            Store (0x08, Local0)
                                        }), If (LEqual (Local0, 0x07))
                                    {
                                        Store (0x01, Local2)
                                        Store (0x08, Local0)
                                    }, If (LEqual (AB04, 0x00))
                                    {
                                        Store (0x00, AB05)
                                    })
                            }
                        }
                    }

                    If (LOr (LGreater (AB0E, 0x01), LEqual (AP05, 0x01)))
                    {
                        If (LGreater (DerefOf (Index (\_SB.ADAT, 0x00)), 0x01))
                        {
                            A036 ()
                        }
                    }

                    Store (A066, A067)
                    Return (Local2)
                }

                Method (A092, 1, NotSerialized)
                {
                    If (LGreater (AB06, AB07))
                    {
                        Subtract (AB06, AB07, Local0)
                    }
                    Else
                    {
                        Subtract (AB07, AB06, Local0)
                    }

                    Increment (Local0)
                    ShiftLeft (0x01, Local0, Local0)
                    Decrement (Local0)
                    ShiftLeft (Local0, AB08, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (A086, Local0, A086)
                    }
                    Else
                    {
                        And (A086, Not (Local0), A086)
                    }
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A080, SystemMemory, Add (AGRB, Or (ShiftLeft (DerefOf (Index (\_SB.ADAT, Add (AB12, 
                    0x0D))), 0x0F), ShiftLeft (DerefOf (Index (\_SB.ADAT, Add (AB12, 
                    0x0E))), 0x0C))), 0x1000)
                Field (A080, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A067,   2, 
                        ,   2, 
                    A081,   1, 
                    A068,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A069,   1, 
                    Offset (0x88), 
                    A079,   4, 
                        ,   1, 
                    A076,   1, 
                    Offset (0xE0), 
                    A082,   32
                }

                BankField (A080, A082, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A063,   1
                }

                BankField (A080, A082, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A078,   1
                }

                BankField (A080, A082, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A074,   1, 
                    A075,   1, 
                        ,   11, 
                    A070,   2, 
                        ,   14, 
                    A077,   1
                }

                BankField (A080, A082, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A062,   6
                }

                OperationRegion (A083, SystemMemory, AGRB, 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A084,   32
                }

                BankField (A083, A084, Or (ShiftLeft (^WRBS, 0x10), Add (0x0800, Multiply (0x0100, 
                    DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0B)))))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A085,   1
                }

                BankField (A083, A084, Or (ShiftLeft (^WRBS, 0x10), 0x8029), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A086,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x00))), AB00)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x01))), AB0E)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x02))), AB01)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x03))), AB02)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x04))), AB03)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x05))), AB04)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x06))), AB05)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x07))), AB06)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x08))), AB07)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x09))), AB08)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0A))), AB09)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0B))), AB0A)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0C))), AB0B)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0D))), AB0C)
                    Store (DerefOf (Index (\_SB.ADAT, Add (AB12, 0x0E))), AB0D)
                }

                Method (A058, 0, NotSerialized)
                {
                    Store (A039 (), Local0)
                    If (LEqual (Local0, 0x01))
                    {
                        Return (AB01)
                    }

                    If (LEqual (Local0, 0x00))
                    {
                        Return (AB0E)
                    }
                }

                Method (A053, 0, NotSerialized)
                {
                    If (LNotEqual (AB10, 0x00))
                    {
                        If (LEqual (AB10, 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    If (LNotEqual (AB05, 0x00))
                    {
                        Return (AB05)
                    }

                    If (LGreater (AB10, 0x01))
                    {
                        Return (Subtract (AB10, 0x01))
                    }

                    Return (0x00)
                }

                Method (A052, 0, NotSerialized)
                {
                    If (LEqual (\_SB.AP05, 0x00))
                    {
                        If (LNotEqual (AB05, 0x00))
                        {
                            Return (AB05)
                        }

                        Return (AB0E)
                    }

                    Store (A059 (), Local0)
                    If (LNotEqual (Local0, 0x00))
                    {
                        If (LGreater (Local0, AB00))
                        {
                            Return (AB00)
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Store (A058 (), Local0)
                    If (LNotEqual (\_SB.AP03, 0x00))
                    {
                        If (LLess (\_SB.AP03, Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A051, 0, NotSerialized)
                {
                    Return (AB02)
                }

                Method (A054, 0, NotSerialized)
                {
                    Return (AB00)
                }

                Method (A050, 1, NotSerialized)
                {
                    Store (Arg0, AB02)
                    If (LEqual (AB03, 0x01))
                    {
                        \_SB.A060 (0x01)
                    }

                    A061 (Arg0)
                    If (LGreaterEqual (A062, 0x10))
                    {
                        If (LNotEqual (AB10, 0x00))
                        {
                            Store (0x00, A063)
                        }
                        Else
                        {
                            Store (0x01, A063)
                        }

                        If (LEqual (AB03, 0x01))
                        {
                            \_SB.A064 (0x00)
                        }
                        Else
                        {
                            A065 (0x00)
                        }

                        Name (A066, 0x00)
                        Store (A067, A066)
                        Store (0x00, A067)
                        Store (0x01, Local0)
                        While (Local0)
                        {
                            Store (0x01, A068)
                            Sleep (0x1E)
                            While (LEqual (A069, 0x01))
                            {
                                Sleep (0x0A)
                            }

                            If (LEqual (Arg0, 0x01))
                            {
                                If (LEqual (A070, 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        Store (A066, A067)
                        If (LEqual (AB03, 0x01))
                        {
                            \_SB.A064 (0x01)
                        }
                        Else
                        {
                            A065 (0x01)
                        }
                    }

                    If (LEqual (AB03, 0x01))
                    {
                        \_SB.A060 (0x00)
                    }
                }

                Method (A055, 1, NotSerialized)
                {
                    Store (Arg0, AB10)
                }

                Method (A056, 1, NotSerialized)
                {
                    ShiftRight (Arg0, 0x08, Local0)
                    If (LAnd (LGreaterEqual (Local0, A071), LLessEqual (Local0, A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Or (AB0D, ShiftLeft (AB0C, 0x03), Local0)
                    If (LEqual (Arg0, Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A057, 0, NotSerialized)
                {
                    Store (0x00, AB10)
                }

                Method (A061, 1, NotSerialized)
                {
                    If (LGreaterEqual (Arg0, 0x02))
                    {
                        Store (0x01, A074)
                        Store (0x00, A075)
                    }

                    If (LGreaterEqual (Arg0, 0x03))
                    {
                        Store (0x01, A074)
                        Store (0x01, A075)
                    }

                    If (LEqual (Arg0, 0x01))
                    {
                        Store (0x01, A076)
                        Store (0x00, A074)
                        Store (0x00, A075)
                        Store (0x00, A077)
                        If (LEqual (AB04, 0x01))
                        {
                            Store (0x01, A078)
                        }
                    }
                    Else
                    {
                        Store (0x00, A076)
                        Store (0x01, A077)
                        Store (0x00, A078)
                    }

                    Store (Arg0, A079)
                }

                Method (A093, 2, NotSerialized)
                {
                    If (LEqual (A089 (Arg0, 0x00), 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Store (A089 (Arg0, 0x34), Local0)
                    While (0x01)
                    {
                        Store (A089 (Arg0, And (Local0, 0xFF)), Local1)
                        If (LEqual (And (Local1, 0xFF), Arg1))
                        {
                            Return (And (Local0, 0xFF))
                        }

                        And (ShiftRight (Local1, 0x08), 0xFF, Local0)
                        If (LEqual (Local0, 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A065, 1, NotSerialized)
                {
                    Store (0x00, Local0)
                    If (LNotEqual (A089 (Local0, 0x00), 0xFFFFFFFF))
                    {
                        And (A089 (Local0, 0x08), 0x80, Local1)
                        If (LEqual (Local1, 0x80))
                        {
                            Store (0x07, Local7)
                        }
                        Else
                        {
                            Store (0x00, Local7)
                        }

                        While (LLessEqual (Local0, Local7))
                        {
                            Store (A093 (Local0, 0x10), Local1)
                            If (LEqual (Local1, 0x00))
                            {
                                Increment (Local0)
                                Continue
                            }

                            If (LEqual (Arg0, 0x00))
                            {
                                Store (A089 (Local0, Add (Local1, 0x10)), Local2)
                                A090 (Local0, Add (Local1, 0x10), And (Local2, Not (0x03
                                    )))
                                Store (Local2, Index (AESP, Local0))
                            }
                            Else
                            {
                                Store (DerefOf (Index (AESP, Local0)), Local2)
                                A090 (Local0, Add (Local1, 0x10), Local2)
                            }

                            Increment (Local0)
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A090, 3, Serialized)
                {
                    Add (AGRB, ShiftLeft (A071, 0x14), Local0)
                    Add (Local0, ShiftLeft (Arg0, 0x0C), Local0)
                    Add (Local0, Arg1, Local0)
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Store (Arg2, ADRR)
                }

                Method (A089, 2, Serialized)
                {
                    Add (AGRB, ShiftLeft (A071, 0x14), Local0)
                    Add (Local0, ShiftLeft (Arg0, 0x0C), Local0)
                    Add (Local0, Arg1, Local0)
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR)
                }

                Method (A087, 1, NotSerialized)
                {
                    If (LNotEqual (AB0B, 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A088, 1, NotSerialized)
                {
                    Name (A066, 0x00)
                    Store (A067, A066)
                    Store (0x00, A067)
                    If (LEqual (Arg0, 0x01))
                    {
                        Store (0x00, A081)
                        Store (0x01, Local0)
                    }
                    Else
                    {
                        Store (A089 (0x00, 0x04), Local0)
                        If (LNotEqual (Local0, 0xFFFFFFFF))
                        {
                            A090 (0x00, 0x04, And (Local0, Not (0x04)))
                            Store (A089 (0x01, 0x04), Local0)
                            If (LNotEqual (Local0, 0xFFFFFFFF))
                            {
                                A090 (0x01, 0x04, And (Local0, Not (0x04)))
                            }
                        }

                        Store (0x01, A081)
                        Store (0x05, Local0)
                    }

                    While (LNotEqual (Local0, 0x08))
                    {
                        If (LEqual (Local0, 0x01))
                        {
                            If (LGreater (AB0E, 0x01))
                            {
                                Store (AB0E, AB05)
                                A036 ()
                            }

                            \_SB.A091 (0x01, AB06, AB07)
                            A092 (0x01)
                            Store (0x00, A085)
                            Store (0x03, Local0)
                        }

                        If (LEqual (Local0, 0x03))
                        {
                            Store (0x00, Local1)
                            Store (0x00, Local2)
                            While (LLess (Local1, 0x3C))
                            {
                                If (LGreater (A062, 0x04))
                                {
                                    Store (0x01, Local2)
                                    Break
                                }

                                Sleep (0x01)
                                Increment (Local1)
                            }

                            If (LEqual (Local2, 0x01))
                            {
                                Store (0x04, Local0)
                            }
                            Else
                            {
                                Store (0x05, Local0)
                            }
                        }

                        If (LEqual (Local0, 0x04))
                        {
                            Store (0x00, Local1)
                            Store (0x00, Local2)
                            While (LLess (Local1, 0x50))
                            {
                                If (LAnd (LGreaterEqual (A062, 0x10), LLessEqual (A062, 0x13)))
                                {
                                    Store (0x01, Local2)
                                    Break
                                }

                                Sleep (0x01)
                                Increment (Local1)
                            }

                            If (LEqual (Local2, 0x01))
                            {
                                Store (0x07, Local0)
                            }
                            Else
                            {
                                If (LEqual (AB04, 0x01))
                                {
                                    Store (0x05, Local0)
                                }
                                Else
                                {
                                    Store (0x06, Local0)
                                }
                            }
                        }

                        If (LEqual (Local0, 0x06))
                        {
                            Store (0x01, AB04)
                            Store (0x01, AB05)
                            A061 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Or (ShiftLeft (AB0C, 0x03), AB0D, Local1)
                                \_SB.ALIC (Local1, 0x00, Sleep (0x02), \_SB.ALIC (Local1, 0x01, Store (0x03, 
                                    Local0), Continue, Store (0x05, Local0), If (LEqual (Local0, 0x05))
                                        {
                                            A089 (0x00, 0x00)
                                            Store (0x01, A085)
                                            A092 (0x00)
                                            \_SB.A091 (0x00, AB06, AB07)
                                            Store (0x00, AB05)
                                            Store (0x00, AB04)
                                            Store (0x00, AB10)
                                            Store (0x00, Local2)
                                            Store (0x08, Local0)
                                        }), If (LEqual (Local0, 0x07))
                                    {
                                        Store (0x01, Local2)
                                        Store (0x08, Local0)
                                    }, If (LEqual (AB04, 0x00))
                                    {
                                        Store (0x00, AB05)
                                    })
                            }
                        }
                    }

                    If (LOr (LGreater (AB0E, 0x01), LEqual (AP05, 0x01)))
                    {
                        If (LGreater (DerefOf (Index (\_SB.ADAT, 0x00)), 0x01))
                        {
                            A036 ()
                        }
                    }

                    Store (A066, A067)
                    Return (Local2)
                }

                Method (A092, 1, NotSerialized)
                {
                    If (LGreater (AB06, AB07))
                    {
                        Subtract (AB06, AB07, Local0)
                    }
                    Else
                    {
                        Subtract (AB07, AB06, Local0)
                    }

                    Increment (Local0)
                    ShiftLeft (0x01, Local0, Local0)
                    Decrement (Local0)
                    ShiftLeft (Local0, AB08, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (A086, Local0, A086)
                    }
                    Else
                    {
                        And (A086, Not (Local0), A086)
                    }
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x01)
        Name (A003, 0x00)
        Name (A004, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x03))
            {
                A005 (0x00)
                Store (A006 (0x00), A003)
            }

            Store (A007 (0x00), A004)
        }

        Method (AWAK, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x03))
            {
                If (LEqual (A004, 0x01))
                {
                    A007 (0x01)
                }
                Else
                {
                    A007 (0x00)
                }

                Store (A008, Local0)
                Store (DerefOf (Index (\_SB.ADAT, 0x07)), Local1)
                If (LAnd (LEqual (Local0, 0x01), LEqual (Local1, 0x01)))
                {
                    A009 (DK00)
                }

                If (LEqual (A003, 0x00))
                {
                    A006 (0x01)
                }
                Else
                {
                    A006 (0x00)
                }
            }

            If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
            {
                A010 (Arg0)
            }

            A011 ()
        }

        Method (A011, 0, NotSerialized)
        {
            A012 ()
            A013 (AP01, AD00)
            A014 (AD00)
            A015 (AD00)
            If (LEqual (AD00, 0x00))
            {
                A016 (0x5E, 0x00)
            }
            Else
            {
                A016 (0x5E, 0x01)
            }
        }

        Method (A017, 0, NotSerialized)
        {
            Store (A008, Local0)
            Store (DerefOf (Index (\_SB.ADAT, 0x07)), Local1)
            If (LAnd (LEqual (Local0, 0x01), LEqual (Local1, 0x01)))
            {
                A009 (DK00)
            }
        }

        Method (A018, 5, NotSerialized)
        {
            Store (Arg0, Local0)
            Store (Arg2, Local2)
            Store (Arg3, Local3)
            If (LEqual (Arg1, 0x00))
            {
                Multiply (Arg4, Local2, Local2)
                Divide (Local2, 0x03E8, Local1, Local2)
                Multiply (Arg4, Local3, Local3)
                Divide (Local3, 0x03E8, Local1, Local3)
            }

            Divide (Local2, 0x05, Local1, Local2)
            Divide (Local3, 0x05, Local1, Local3)
            Or (ShiftLeft (Local2, 0x02), Local0, Local0)
            Or (ShiftLeft (Local3, 0x11), Local0, Local0)
            A016 (0x5D, Local0)
        }

        Method (A019, 2, NotSerialized)
        {
            A013 (Arg0, AD00)
        }

        Name (A020, 0x00)
        Name (A021, 0x00)
        Method (A014, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x00))
            {
                Store (0x0F, A022)
            }
            Else
            {
                Store (0x04, A022)
            }
        }

        Method (A015, 1, NotSerialized)
        {
        }

        Method (A013, 2, NotSerialized)
        {
            If (LEqual (Arg1, 0x00)) {}
            Else
            {
                If (LEqual (Arg0, 0x01)) {}
                Else
                {
                }
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("ssdt4.aml", "SSDT", 1, "TOSINV", "TOSINV00", 0x00000001)
{
    /*
     * iASL Warning: There were 4 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     */
    External (M035, MethodObj)    // Warning: Unresolved Method, guessing 6 arguments (may be incorrect, see warning above)
    External (M036, MethodObj)    // Warning: Unresolved Method, guessing 6 arguments (may be incorrect, see warning above)
    External (M049, MethodObj)    // Warning: Unresolved Method, guessing 6 arguments (may be incorrect, see warning above)
    External (M135, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)

    External (M034)
    External (M045, IntObj)
    External (M128)
    External (OGNS, OpRegionObj)
    External (PSMI, OpRegionObj)

    Scope (\_SB)
    {
        Field (PSMI, ByteAcc, NoLock, Preserve)
        {
            A1MC,   8, 
            A1MD,   8
        }

        Field (OGNS, AnyAcc, Lock, Preserve)
        {
            Offset (0x14), 
            Offset (0x15), 
            Offset (0x16), 
            Offset (0x17), 
            E1RO,   8, 
            E1RM,   8, 
            E1RS,   8, 
            E1RD,   8, 
            Offset (0x1E), 
            T1BK,   1, 
            S1AT,   1, 
            D1IR,   1, 
            D1TN,   2, 
                ,   1, 
                ,   1, 
            I1CC,   1, 
            Offset (0x20), 
            L1MD,   8, 
            S1CF,   8, 
            S1B0,   32, 
            Offset (0x2A), 
            Offset (0x2E), 
            Offset (0x32), 
            Offset (0x36), 
            Offset (0x3A), 
            Offset (0x3E), 
            Offset (0x42), 
            Offset (0x46), 
            Offset (0x62), 
            I1C0,   8, 
            I1C1,   8, 
            I1C2,   8
        }
    }

    Device (AS34)
    {
        Name (_HID, "ASD0001")  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (M045)
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (M156, One)
        Name (M137, Buffer (0x08)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        })
        Name (M143, Zero)
        Name (M144, Zero)
        Name (M145, Zero)
        Name (M146, Zero)
        Name (M147, Zero)
        Name (M138, Zero)
        Name (M139, Zero)
        Name (M140, Zero)
        Name (M141, Zero)
        Name (M142, Zero)
        Name (M148, Zero)
        Name (M149, Zero)
        Name (M150, Zero)
        Name (M151, Zero)
        Name (M152, Zero)
        Method (RD1C, 3, Serialized)
        {
            Store (Arg0, \_SB.E1RO)
            Store (Arg1, \_SB.E1RM)
            Store (Arg2, \_SB.E1RS)
            FLNK (0xFF, 0x0E)
            Store (\_SB.E1RD, Local0)
            Return (Local0)
        }

        Method (WR1C, 4, Serialized)
        {
            Store (Arg0, \_SB.E1RO)
            Store (Arg1, \_SB.E1RM)
            Store (Arg2, \_SB.E1RS)
            Store (Arg3, \_SB.E1RD)
            FLNK (0xFF, 0x0F)
        }

        Method (FLNK, 2, Serialized)
        {
            If (LEqual (\_SB.I1CC, Zero))
            {
                Add (\_SB.I1C2, 0x03, \_SB.I1C2)
                Decrement (\_SB.I1C1)
                Subtract (\_SB.I1C0, 0x0B, \_SB.I1C0)
                Store (One, \_SB.I1CC)
            }

            If (LEqual (Arg0, 0xFF))
            {
                Store (Arg1, \_SB.S1CF)
            }
            Else
            {
                Store (Arg1, \_SB.S1B0)
            }

            Store (Arg0, \_SB.L1MD)
            Store (0xFF, \_SB.A1MD)
            Store (0xE3, \_SB.A1MC)
            Return (And (\_SB.S1B0, 0xFF))
        }

        Method (M153, 2, NotSerialized)
        {
            Store (0x1F, Local0)
            If (LEqual (Match (Package (0x04)
                        {
                            0x04, 
                            0x06, 
                            0x09, 
                            0x0B
                        }, MEQ, Arg1, MTR, Zero, Zero), Ones))
            {
                Store (0x1E, Local0)
            }

            If (LEqual (Match (Package (0x01)
                        {
                            0x02
                        }, MEQ, Arg1, MTR, Zero, Zero), Ones))
            {
                If (Mod (Arg0, 0x04))
                {
                    Store (0x1C, Local0)
                }
                Else
                {
                    Store (0x1D, Local0)
                }
            }

            Return (Local0)
        }

        Method (M155, 1, NotSerialized)
        {
            Add (Arg0, M143, Local0)
            Divide (Local0, 0x3C, M148, Local0)
            Add (Local0, M144, Local0)
            Divide (Local0, 0x18, M149, Local0)
            Add (Local0, M145, Local0)
            Store (Zero, Local1)
            While (LGreater (Local0, M153 (M147, M146)))
            {
                Subtract (Local0, M153 (M147, M146), Local0)
                Increment (Local1)
            }

            Store (Local0, M150)
            Store (Local1, Local0)
            Add (Local0, M146, Local0)
            Store (Zero, Local1)
            While (LGreater (Local0, 0x0C))
            {
                Subtract (Local0, 0x0C, Local0)
                Increment (Local1)
            }

            Store (Local0, M151)
            Add (Local1, M147, M152)
        }

        Method (M154, 5, NotSerialized)
        {
            Store (Zero, Local7)
            Store (Zero, Local2)
            If (LOr (LGreater (Arg3, 0x0C), LLessEqual (Arg3, Zero)))
            {
                Store (0x00010000, Local7)
            }

            If (LOr (LGreater (Arg2, M153 (Arg4, Arg3)), LLessEqual (Arg2, 
                Zero)))
            {
                Store (0x00010000, Local7)
            }

            If (LGreaterEqual (Arg1, 0x18))
            {
                Store (0x00010000, Local7)
            }

            If (LGreaterEqual (Arg0, 0x3C))
            {
                Store (0x00010000, Local7)
            }

            Store (M143, Local0)
            Store (Arg0, Local1)
            If (LLess (Local1, Local0))
            {
                Add (Local1, 0x3C, Local1)
                Increment (Local2)
            }

            Add (Subtract (Local1, Local0), Local7, Local7)
            Store (M144, Local0)
            Store (Arg1, Local1)
            If (Local2)
            {
                Store (Zero, Local2)
                If (LEqual (Local1, Zero))
                {
                    Add (Local1, 0x18, Local1)
                    Increment (Local2)
                }

                Decrement (Local1)
            }

            If (LLess (Local1, Local0))
            {
                Add (Local1, 0x18, Local1)
                Increment (Local2)
            }

            Add (Multiply (Subtract (Local1, Local0), 0x3C), Local7, Local7)
            Store (M145, Local0)
            Store (Arg2, Local1)
            If (Local2)
            {
                Store (Zero, Local2)
                If (LLessEqual (Local1, One))
                {
                    Add (Local1, M153 (M147, M146), Local1)
                    Increment (Local2)
                }

                Decrement (Local1)
            }

            If (LLess (Local1, Local0))
            {
                Add (Local1, M153 (M147, M146), Local1)
                Increment (Local2)
            }

            Add (Multiply (Subtract (Local1, Local0), 0x05A0), Local7, Local7)
            Store (M146, Local0)
            Store (Arg3, Local1)
            If (Local2)
            {
                Store (Zero, Local2)
                If (LLessEqual (Local1, One))
                {
                    Add (Local1, 0x0C, Local1)
                    Increment (Local2)
                }

                Increment (Local0)
            }

            If (LLess (Local1, Local0))
            {
                Add (Local1, 0x0C, Local1)
                Increment (Local2)
            }

            While (LGreater (Local1, Local0))
            {
                Add (Local7, Multiply (M153 (M147, Local0), 0x05A0), Local7)
                Increment (Local0)
            }

            Store (M147, Local0)
            Store (Arg4, Local1)
            If (Local2)
            {
                Store (Zero, Local2)
                If (LLessEqual (Local1, Zero))
                {
                    Store (One, Local2)
                }

                Decrement (Local1)
            }

            If (LOr (LNotEqual (Local1, Local0), Local2))
            {
                Store (0x00010000, Local7)
            }

            Return (Local7)
        }

        Method (ASCM, 2, NotSerialized)
        {
            Store (M049 (M135 (0x13, Local6), If (LEqual (M049 (M128, 0x6B, 
                One, If (M156)
                                {
                                    Store (Zero, M156)
                                    WR1C (0xEE, 0xFF, Zero, Zero)
                                }, CreateField (M137, 0x20, 0x06, MIN4), 
                                        CreateField (M137, 0x26, 0x05, HOR4)), CreateField (M137, 0x2B, 0x05, DAY4))) {}, CreateField (
                                        M137, 0x30, 0x04, MON4), CreateField (M137, 0x34, 0x07, YER4), CreateField (M137, 
                                        0x20, 0x14, RMI4), CreateBitField (M137, 0x3B, REL4)), CreateBitField (M137, 0x3D, ERR4))
            CreateBitField (M137, 0x3E, EXP4)
            CreateBitField (M137, 0x3F, ENA4)
            Store (Zero, Local7)
            If (LEqual (Arg0, Zero))
            {
                Store (FromBCD (M034, 0x09))
                M147
                Store (FromBCD (M034, 0x08))
                M146
                Store (FromBCD (M034, 0x07))
                M145
                Store (FromBCD (M034, 0x04))
                M144
                Store (FromBCD (M034, 0x02))
                M143
                Store (Arg1, M137)
                If (ENA4)
                {
                    If (REL4)
                    {
                        Store (ToInteger (RMI4), Local7)
                        M155 (Local7)
                        Store (M148, M138)
                        Store (M149, M139)
                        Store (M150, M140)
                        Store (M151, M141)
                        Store (M152, M142)
                    }
                    Else
                    {
                        Store (ToInteger (MIN4), M138)
                        Store (ToInteger (HOR4), M139)
                        Store (ToInteger (DAY4), M140)
                        Store (ToInteger (MON4), M141)
                        Store (ToInteger (YER4), M142)
                        Store (M154 (M138, M139, M140, M141, M142), Local7)
                    }
                }

                If (LEqual (M049 (M128, 0x6B, One, If (LAnd (ENA4, LAnd (
                    LGreaterEqual (0xFFFF, Local7), LGreaterEqual (Local7, One))))
                            {
                                WR1C (0xEA, 0xFF, Zero, And (Local7, 0xFF))
                                WR1C (0xEB, 0xFF, Zero, And (ShiftRight (Local7, 0x08), 0xFF
                                    ))
                                Store (Zero, ERR4)
                            }, Else
                            {
                                WR1C (0xEA, 0xFF, Zero, Zero)
                                WR1C (0xEB, 0xFF, Zero, Zero)
                                Store (One, ERR4)
                            }, If (LEqual (M049 (M128, 0x6B, 0x02, Add (
                                    Multiply (M049 (M135 (0x10, 0x0100), Zero, M049 (M135 (0x11, Local0), If (
                                    LAnd (ENA4, LAnd (LGreaterEqual (0xFFFF, Local7), LGreaterEqual (Local7, One))))
                                                        {
                                                            Store (One, Local1)
                                                            Store (ToBCD (M138), Local2)
                                                            Store (ToBCD (M139), Local3)
                                                            Store (ToBCD (M140), Local4)
                                                            Store (Zero, ERR4)
                                                        }, Else
                                                        {
                                                            Store (Zero, Local1)
                                                            Store (Zero, Local2)
                                                            Store (Zero, Local3)
                                                            Store (Zero, Local4)
                                                            Store (One, ERR4)
                                                        }, Store (M035 (Add (Local0, 0x08), Local5, 
                                                                Or (And (Local5, 0xFE), Local1, Local1), M036 (Add (Local0, 0x08
                                                                ), Local1, M036 (Add (Local0, 0x09), Local2, M036 (Add (Local0, 
                                                                0x0A), Local3, M036 (Add (Local0, 0x0B), Local4, If (And (
                                                                M035 (Add (Local0, 0x08), One, Zero, M036 (Add (Local0, Zero
                                                                ), 0x34, M036 (Add (Local0, One), 0x33, M036 (Add (Local0, 
                                                                0x02), 0x53, M036 (Add (Local0, 0x03), 0x41, Else
                                                                                                            {
                                                                                                                M036 (Add (Local0, Zero), Zero, M036 (Add (Local0, One
                                                                                                                    ), Zero, M036 (Add (Local0, 0x02), Zero, M036 (Add (Local0, 
                                                                                                                    0x03), Zero, If (LEqual (Arg0, One))
                                                                                                                                {
                                                                                                                                    If (LEqual (M049 (M128, 0x6B, 0x02, Add (Multiply (M049 (M135 (
                                                                                                                                        0x10, 0x0100), Zero, M049 (M135 (0x11, Local0), If (LAnd (LEqual (M035 (
                                                                                                                                        Add (Local0, 0x03), 0x41, LAnd (LEqual (M035 (Add (Local0, 0x02
                                                                                                                                        ), 0x53, LEqual (M035 (Add (Local0, One), 0x33, And (M035 (
                                                                                                                                        Add (Local0, 0x08), 0x02, Local0, ShiftRight (Local0, One, EXP4), Else
                                                                                                                                                                                                            {
                                                                                                                                                                                                                Store (Zero, EXP4)
                                                                                                                                                                                                            }, If (LEqual (M049 (M128, 0x6B, One, Store (
                                                                                                                                                                                                                    RD1C (0xEE, 0xFF, Zero), Local0), And (Local0, One, EXP4), Return (M137)))) {}))))))))))) {}))))))) {}
                                                                                                                                }))))
                                                                                                            }))))))) {}))))))))))))) {}))) {}
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("ssdt5.aml", "SSDT", 1, "TOSINV", "TOSINV00", 0x00000001)
{
    /*
     * iASL Warning: There were 9 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     */
    External (M000, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (M011, MethodObj)    // Warning: Unresolved Method, guessing 4 arguments (may be incorrect, see warning above)
    External (M012, MethodObj)    // Warning: Unresolved Method, guessing 5 arguments (may be incorrect, see warning above)
    External (M013, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (M029, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (M032, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (M049, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)
    External (M111, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (M114, MethodObj)    // Warning: Unresolved Method, guessing 5 arguments (may be incorrect, see warning above)

    External (_SB_.PCI0.GPP2)
    External (_SB_.PCI0.GPP3)
    External (_SB_.PCI0.M125)
    External (_SB_.PCI0.M126)
    External (_SB_.PCI0.M130)
    External (M084)
    External (M113, IntObj)
    External (M122, IntObj)
    External (M128)
    External (M131, IntObj)
    External (M132)

    Scope (\_GPE)
    {
        Method (M129, 0, NotSerialized)
        {
            Store (M049 (M132, 0x10), Local0)
            Store (M049 (M132, 0x11), Local1)
            Store (M049 (M132, 0x12), Local2)
            Store (M049 (M132, 0x13), Local3)
            If (M029 (Local2, M032 (Local2, Zero, M000 (0x0F04, M114 (Local0, 
                Local1, Zero, M000 (0x0F05, Else
                                    {
                                        M032 (Local2, One, Store (M113, Local3), Local4, If (Local4)
                                            {
                                                M000 (0x0204, M114 (Local0, Local1, One, M000 (0x0205, If (CondRefOf (
                                                    \_SB.PCI0.M130))
                                                            {
                                                                Notify (\_SB.PCI0.M130, Zero)
                                                            })))
                                            })
                                    })))))) {}
        }

        Name (M127, Zero)
        Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Store (Zero, Local7)
            Store (M131, Local0)
            If (Local0)
            {
                Store (M049 (M131, 0x10), Local0)
                Store (M049 (M131, 0x11), Local1)
                Add (M084, Add (Multiply (Local0, 0x0100), Local1), Local1)
                M012 (Local1, 0x08, Zero, 0x08, M127)
            }

            XOr (M127, One, M127)
            Store (M122, Local1)
            Store (M049 (M128, 0x6C), Local2)
            If (LAnd (Local1, Local2))
            {
                If (M127)
                {
                    M000 (0x4401, M111 (M013 (M122, 0x15, Zero, 0x08, Zero, M111 (
                        M013 (M122, 0x17, Zero, 0x08, Zero, If (LEqual (Local2, 0x02))
                                        {
                                            Store (M011 (M122, 0x10, Zero, 0x05), Local0)
                                            Store (M011 (M122, 0x10, 0x05, 0x03), Local1)
                                            If (LOr (Local0, Local1))
                                            {
                                                M114 (Local0, Local1, Zero, Or (Local7, One, Local7), Store (M011 (
                                                    M122, 0x11, Zero, 0x05), Local0))
                                            }

                                            Store (M011 (M122, 0x11, 0x05, 0x03), Local1)
                                            If (LOr (Local0, Local1))
                                            {
                                                M114 (Local0, Local1, Zero, Or (Local7, 0x02, Local7), Store (M011 (
                                                    M122, 0x12, Zero, 0x05), Local0))
                                            }

                                            Store (M011 (M122, 0x12, 0x05, 0x03), Local1)
                                            If (LOr (Local0, Local1))
                                            {
                                                M114 (Local0, Local1, Zero, Or (Local7, 0x04, Local7), Store (M011 (
                                                    M122, 0x13, Zero, 0x05), Local0))
                                            }

                                            Store (M011 (M122, 0x13, 0x05, 0x03), Local1)
                                            If (LOr (Local0, Local1))
                                            {
                                                M114 (Local0, Local1, Zero, Or (Local7, 0x08, Local7), M111 (M013 (
                                                    M122, 0x16, Zero, 0x08, Zero, M000 (0x4402, Else
                                                                {
                                                                    M000 (0x4403, If (LEqual (Local2, 0x02))
                                                                        {
                                                                            M111 (M013 (M122, 0x16, Zero, 0x08, One, Sleep (0x64), Sleep (
                                                                                0x64)), Store (M011 (M122, 0x10, Zero, 0x05), Local0), Store (M011 (M122, 
                                                                                0x10, 0x05, 0x03), Local1), If (LOr (Local0, Local1))
                                                                                {
                                                                                    M114 (Local0, Local1, One, Or (Local7, One, Local7), Store (M011 (
                                                                                        M122, 0x11, Zero, 0x05), Local0))
                                                                                }, Store (M011 (M122, 0x11, 0x05, 0x03), 
                                                                                        Local1), If (LOr (Local0, Local1))
                                                                                {
                                                                                    M114 (Local0, Local1, One, Or (Local7, 0x02, Local7), Store (M011 (
                                                                                        M122, 0x12, Zero, 0x05), Local0))
                                                                                }, Store (M011 (M122, 0x12, 0x05, 0x03), 
                                                                                        Local1))
                                                                            If (LOr (Local0, Local1))
                                                                            {
                                                                                M114 (Local0, Local1, One, Or (Local7, 0x04, Local7), Store (M011 (
                                                                                    M122, 0x13, Zero, 0x05), Local0))
                                                                            }

                                                                            Store (M011 (M122, 0x13, 0x05, 0x03), Local1)
                                                                            If (LOr (Local0, Local1))
                                                                            {
                                                                                M114 (Local0, Local1, One, Or (Local7, 0x08, Local7), M000 (0x4404, 
                                                                                    M111 (M013 (M122, 0x15, Zero, 0x08, One, M111 (M013 (M122, 0x17, 
                                                                                    Zero, 0x08, One, If (And (Local7, One))
                                                                                                        {
                                                                                                            If (CondRefOf (\_SB.PCI0.GPP2))
                                                                                                            {
                                                                                                                Notify (\_SB.PCI0.GPP2, Zero)
                                                                                                            }
                                                                                                        }, If (And (Local7, 0x02))
                                                                                                        {
                                                                                                            If (CondRefOf (\_SB.PCI0.GPP3))
                                                                                                            {
                                                                                                                Notify (\_SB.PCI0.GPP3, Zero)
                                                                                                            }
                                                                                                        }), If (And (Local7, 0x04))
                                                                                                    {
                                                                                                        If (CondRefOf (\_SB.PCI0.M125))
                                                                                                        {
                                                                                                            Notify (\_SB.PCI0.M125, Zero)
                                                                                                        }
                                                                                                    }, If (And (Local7, 0x08))
                                                                                                    {
                                                                                                        If (CondRefOf (\_SB.PCI0.M126))
                                                                                                        {
                                                                                                            Notify (\_SB.PCI0.M126, Zero)
                                                                                                        }
                                                                                                    })))))
                                                                            }
                                                                        })
                                                                }))))
                                            }
                                        })))))
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("ssdt6.aml", "SSDT", 1, "TOSINV", "TOSINV00", 0x00000001)
{
    /*
     * iASL Warning: There were 26 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     */
    External (_SB_.ALIB, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)
    External (_SB_.PCI0.GFX_.VGA_.AFN0, MethodObj)    // Warning: Unresolved Method, guessing 0 arguments (may be incorrect, see warning above)
    External (_SB_.PCI0.GFX_.VGA_.AFN1, MethodObj)    // Warning: Unresolved Method, guessing 1 arguments (may be incorrect, see warning above)
    External (_SB_.PCI0.GFX_.VGA_.AFN2, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)
    External (_SB_.PCI0.GFX_.VGA_.AFN3, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)
    External (_SB_.PCI0.GFX_.VGA_.AFN4, MethodObj)    // Warning: Unresolved Method, guessing 1 arguments (may be incorrect, see warning above)
    External (_SB_.PCI0.GFX_.VGA_.AFN5, MethodObj)    // Warning: Unresolved Method, guessing 0 arguments (may be incorrect, see warning above)
    External (_SB_.PCI0.GFX_.VGA_.AFN6, MethodObj)    // Warning: Unresolved Method, guessing 0 arguments (may be incorrect, see warning above)
    External (_SB_.PCI0.GFX_.VGA_.AFN7, MethodObj)    // Warning: Unresolved Method, guessing 1 arguments (may be incorrect, see warning above)
    External (_SB_.PCI0.GFX_.VGA_.AFN8, MethodObj)    // Warning: Unresolved Method, guessing 0 arguments (may be incorrect, see warning above)
    External (M000, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (M019, MethodObj)    // Warning: Unresolved Method, guessing 4 arguments (may be incorrect, see warning above)
    External (M020, MethodObj)    // Warning: Unresolved Method, guessing 5 arguments (may be incorrect, see warning above)
    External (M021, MethodObj)    // Warning: Unresolved Method, guessing 4 arguments (may be incorrect, see warning above)
    External (M023, MethodObj)    // Warning: Unresolved Method, guessing 3 arguments (may be incorrect, see warning above)
    External (M024, MethodObj)    // Warning: Unresolved Method, guessing 3 arguments (may be incorrect, see warning above)
    External (M026, MethodObj)    // Warning: Unresolved Method, guessing 3 arguments (may be incorrect, see warning above)
    External (M049, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)
    External (M093, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)
    External (M094, MethodObj)    // Warning: Unresolved Method, guessing 3 arguments (may be incorrect, see warning above)
    External (M095, MethodObj)    // Warning: Unresolved Method, guessing 4 arguments (may be incorrect, see warning above)
    External (M106, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)
    External (M111, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (M112, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (M113, MethodObj)    // Warning: Unresolved Method, guessing 5 arguments (may be incorrect, see warning above)
    External (M133, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)

    External (_SB_.PCI0.VGA_, DeviceObj)
    External (M025)
    External (M087)
    External (M090, IntObj)
    External (M091, IntObj)
    External (M098, IntObj)
    External (M099, IntObj)
    External (M100, IntObj)
    External (M101, IntObj)
    External (M102, IntObj)
    External (M103, IntObj)
    External (M104, IntObj)
    External (M105, IntObj)
    External (PNID)

    Scope (\_SB.PCI0.VGA)
    {
        Name (ATIB, Buffer (0x0100) {})
        Name (MIDT, Buffer (0x09)
        {
            /* 0000 */   0x20, 0x16, 0x16, 0x16, 0x14, 0x11, 0x11, 0x11,
            /* 0008 */   0x0C
        })
        Name (ABRT, Buffer (0x0100)
        {
            /* 0000 */   0x0C, 0x00, 0x00, 0x00, 0x00, 0x50, 0x32, 0x0F,
            /* 0008 */   0xFF, 0x01, 0x01, 0x10
        })
        Method (ATIF, 2, Serialized)
        {
            If (LEqual (Arg0, Zero))
            {
                Return (AF00 ())
            }

            If (LEqual (Arg0, One))
            {
                Return (AF01 ())
            }

            If (LEqual (Arg0, 0x02))
            {
                Return (AF02 ())
            }

            If (LEqual (Arg0, 0x03))
            {
                Return (AF03 (DerefOf (Index (Arg1, 0x02)), DerefOf (Index (Arg1, 
                    0x04))))
            }

            If (LEqual (Arg0, 0x04))
            {
                Return (AF04 ())
            }

            If (LEqual (Arg0, 0x0F))
            {
                Return (AF15 ())
            }

            If (LEqual (Arg0, 0x10))
            {
                Return (AF16 ())
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                Store (Zero, M157)
                Store (Zero, M158)
                Store (Zero, M159)
                Store (Zero, M160)
                Return (ATIB)
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            Store (0x0C, M157)
            Store (One, M158)
            Store (M101, M159)
            Store (M102, M160)
            Return (ATIB)
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            And (M103, 0xFF000000, Local0)
            And (M103, 0x03, Local1)
            If (LEqual (Local1, 0x02))
            {
                Store (0x0B, M157)
                Store (0x03, M161)
                Store (Local1, M162)
                Store (Local0, M163)
            }
            Else
            {
                Store (0x0A, M157)
                Store (0x03, M161)
                Store (M103, M162)
            }

            Return (ATIB)
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            Store (0x0D, M157)
            Store (M164, M174)
            If (M165)
            {
                Store (Zero, M165)
            }

            If (M166)
            {
                Store (M210, M175)
                Store (Zero, M210)
                Store (Zero, M166)
            }

            If (M167)
            {
                Store (M211, M176)
                Store (M212, M177)
                Store (Zero, M211)
                Store (Zero, M212)
                Store (Zero, M167)
            }

            If (M168)
            {
                Store (M213, M178)
                Store (M214, M179)
                Store (Zero, M213)
                Store (Zero, M214)
                Store (Zero, M168)
            }

            If (M169)
            {
                Store (M215, M180)
                Store (Zero, M169)
            }

            If (M171)
            {
                Store (Zero, M171)
            }

            If (M172)
            {
                Store (Zero, M172)
            }

            If (M173)
            {
                Store (Zero, M173)
            }

            Return (ATIB)
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            Store (Arg0, M182)
            Store (Arg1, M183)
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00
            })
            Name (M187, Zero)
            Store (M049 (M133 (0xBF, M187, Store (Zero, Local1), While (LLess (
                Local1, M187))
                        {
                            Store (M049 (M133 (Add (0xC0, Local1), Local2, Store (Local2, 
                                Index (M186, Local1)), Increment (Local1), Store (M182, Local1), And (Local1, 
                                0x8B, Local1), Store (M183, Local2)), Store (Zero, Local0)), While (LLess (Local0, 
                                M187))
                                {
                                    Store (DerefOf (Index (M186, Local0)), Local3)
                                    If (LEqual (Local3, Local1))
                                    {
                                        Store (Local0, M185)
                                        Store (M187, Local0)
                                    }
                                    Else
                                    {
                                        Increment (Local0)
                                    }
                                })
                        }, Store (M185, Local0), While (LLess (Local0, M187))
                        {
                            Increment (Local0)
                            If (LEqual (Local0, M187))
                            {
                                Store (Zero, Local0)
                            }

                            Store (DerefOf (Index (M186, Local0)), Local3)
                            If (LEqual (And (Local3, Local2), Local3))
                            {
                                Store (Local0, M184)
                                Store (M187, Local0)
                            }
                        }, If (LEqual (M184, M187))
                        {
                            Store (Zero, M182)
                        }), Else
                    {
                        Store (M184, Local0)
                        Store (DerefOf (Index (M186, Local0)), Local3)
                        And (M182, 0xFFFFFFF4, M182)
                        Or (M182, Local3, M182)
                    }), Store (0x04, M157))
            Return (ATIB)
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            Store (0x03, M157)
            Store (Zero, Local1)
            Store (Local1, M188)
            Return (ATIB)
        }

        Method (AF15, 0, NotSerialized)
        {
            Store (M104, ATIB)
            Return (ATIB)
        }

        Method (AF16, 0, NotSerialized)
        {
            Store (DerefOf (Index (MIDT, PNID)), Local0)
            Store (Local0, Index (ABRT, 0x07))
            Add (Local0, One, Local1)
            Store (Local1, Index (ABRT, 0x0B))
            Return (ABRT)
        }

        Method (AFN0, 0, Serialized)
        {
            If (And (M101, One))
            {
                CreateBitField (M164, Zero, M165)
                Store (One, M165)
                Notify (VGA, 0x81)
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If (And (M101, 0x02))
            {
                Store (Arg0, Local0)
                Store (Local0, M210)
                CreateBitField (M164, One, M166)
                Store (One, M166)
                Notify (VGA, 0x81)
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If (And (M101, 0x04))
            {
                Store (Arg0, Local0)
                Store (Local0, M212)
                Store (Arg1, Local0)
                Store (And (Local0, 0x03, Local0), M211)
                CreateBitField (M164, 0x02, M167)
                Store (One, M167)
                Notify (VGA, 0x81)
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If (And (M101, 0x08))
            {
                Store (Arg0, Local0)
                Store (Local0, M214)
                Store (Arg1, Local0)
                Store (And (Local0, 0x03, Local0), M213)
                CreateBitField (M164, 0x03, M168)
                Store (One, M168)
                Notify (VGA, 0x81)
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If (And (M101, 0x10))
            {
                Store (Arg0, Local0)
                Store (M215, Local1)
                Store (Local0, M215)
                If (LEqual (Local0, Local1)) {}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    Store (One, M169)
                    Notify (VGA, 0x81)
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If (And (M101, 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                Store (One, M170)
                Notify (VGA, 0x81)
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If (And (M101, 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                Store (One, M171)
                Notify (VGA, 0x81)
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If (And (M101, 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                Store (One, M172)
                CreateByteField (ATIB, 0x0C, M181)
                Store (Arg0, M181)
                Notify (VGA, 0x81)
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If (And (M101, 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                Store (One, M173)
                Notify (VGA, 0x81)
            }
        }

        Name (M189, Buffer (0x0100) {})
        Name (M190, Ones)
        Name (M191, Ones)
        Method (ATPX, 2, Serialized)
        {
            If (LEqual (Arg0, Zero))
            {
                Return (PX00 ())
            }

            If (LEqual (Arg0, One))
            {
                Return (PX01 ())
            }

            If (LEqual (Arg0, 0x02))
            {
                PX02 (DerefOf (Index (Arg1, 0x02)))
                Return (M189)
            }

            If (LEqual (Arg0, 0x03))
            {
                PX03 (DerefOf (Index (Arg1, 0x02)))
                Return (M189)
            }

            If (LEqual (Arg0, 0x04))
            {
                PX04 (DerefOf (Index (Arg1, 0x02)))
                Return (M189)
            }

            If (LEqual (Arg0, 0x08))
            {
                Return (PX08 ())
            }

            If (LEqual (Arg0, 0x09))
            {
                Return (PX09 ())
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            Store (Zero, M157)
            Store (Zero, M158)
            Store (Zero, M160)
            Return (M189)
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            Store (0x08, M157)
            Store (One, M158)
            Store (M098, M160)
            If (M098)
            {
                Store (0x7FFFFFFF, Local5)
                Or (Local5, 0x80000000, Local5)
                Store (M019 (M095 (M094 (M093 (0x2C, Local0), Store (M019 (M095 (
                    M094 (Add (M093 (One, Zero), 0x2C, Local1), If (LNotEqual (Local0, 
                    Local5))
                                                {
                                                    Store (Local0, M190)
                                                }, If (LNotEqual (Local1, Local5))
                                                {
                                                    Store (Local1, M191)
                                                }), Return (M189))))))))
            }
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            Store (0x0A, M157)
            Store (0x1FFF, M161)
            Store (M099, M162)
            Return (M189)
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            Store (0x03, M157)
            And (Arg0, One, M192)
            Store (Buffer (0x05) {}, Local7)
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            Store (0x05, M197)
            Store (Zero, M198)
            Store (M091, M199)
            Store (M090, M200)
            Name (HPOK, Zero)
            Store (M049 (M133 (0x11, Local0, Store (M113 (Local0, Local6, M023 (
                Zero, M091, M090), If (LAnd (M192, Local6))
                                {
                                    M000 (0x11E2, M112 (Local0, Zero, M111 (Local0, One, Sleep (0x0A), 
                                        M112 (Local0, 0x02, M112 (Local0, One, M000 (0x12E2, Store (Zero, HPOK), 
                                        Sleep (0x14), Store (One, M201), Store (\_SB.ALIB (0x06, Local7), Local6), Store (
                                        Zero, Local2), While (LLess (Local2, 0x0F))
                                                            {
                                                                M023 (Zero, M091, M090)
                                                                Store (One, Local4)
                                                                Store (0xC8, Local5)
                                                                While (LAnd (Local4, Local5))
                                                                {
                                                                    Store (M021 (Zero, M091, M090, 0xA5), Local0)
                                                                    And (Local0, 0x7F, Local0)
                                                                    If (LAnd (LGreaterEqual (Local0, 0x10), LNotEqual (Local0, 0x7F)))
                                                                    {
                                                                        Store (Zero, Local4)
                                                                    }
                                                                    Else
                                                                    {
                                                                        Sleep (0x05)
                                                                        Decrement (Local5)
                                                                    }
                                                                }

                                                                If (LNot (Local4))
                                                                {
                                                                    Store (M024 (Zero, M091, M090), Local5)
                                                                    If (Local5)
                                                                    {
                                                                        M026 (Zero, M091, M090)
                                                                        Sleep (0x05)
                                                                        Increment (Local2)
                                                                    }
                                                                    Else
                                                                    {
                                                                        Store (Zero, Local0)
                                                                        If (LEqual (M025, Zero))
                                                                        {
                                                                            M091
                                                                            M090
                                                                            Ones
                                                                            Store (One, Local0)
                                                                        }

                                                                        If (Local0)
                                                                        {
                                                                            M111 (M049 (M133 (0x17, One, M111 (M049 (M133 (0x18, One, 
                                                                                Store (One, HPOK), Store (0x10, Local2), Else
                                                                                                    {
                                                                                                        Store (Zero, HPOK)
                                                                                                        Store (0x10, Local2)
                                                                                                    }, Else
                                                                                                    {
                                                                                                        Store (0x10, Local2)
                                                                                                    }, If (LNot (HPOK))
                                                                                                    {
                                                                                                        M000 (0x13E2, Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (
                                                                                                            0x0A), Store (One, Local4)), Store (0x05, Local5), While (LAnd (Local4, Local5))
                                                                                                                        {
                                                                                                                            Store (M021 (Zero, M091, M090, 0xA5), Local0)
                                                                                                                            And (Local0, 0x7F, Local0)
                                                                                                                            If (LOr (LLessEqual (Local0, 0x04), LEqual (Local0, 0x1F)))
                                                                                                                            {
                                                                                                                                Store (Zero, Local4)
                                                                                                                            }
                                                                                                                            Else
                                                                                                                            {
                                                                                                                                Store (M019 (M095 (M094 (M093 (Zero, Local0), Sleep (0x05), Decrement (
                                                                                                                                    Local5)), Store (Zero, M201), \_SB.ALIB (0x06, Local7), M000 (0x14E2, Else
                                                                                                                                                {
                                                                                                                                                    M000 (0x02E2, Store (Zero, M201), \_SB.ALIB (0x06, Local7), M000 (0x03E2, 
                                                                                                                                                        M111 (M049 (M133 (0x17, Zero, M111 (M049 (M133 (0x18, Zero, M112 (
                                                                                                                                                        Local0, Zero, Sleep (0x0A), M111 (Local0, Zero, M023 (Zero, M091, M090), 
                                                                                                                                                        Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Store (One, 
                                                                                                                                                        Local4)), Store (0x05, Local5), While (LAnd (Local4, Local5))
                                                                                                                                                                                                        {
                                                                                                                                                                                                            Store (M021 (Zero, M091, M090, 0xA5), Local0)
                                                                                                                                                                                                            And (Local0, 0x7F, Local0)
                                                                                                                                                                                                            If (LOr (LLessEqual (Local0, 0x04), LEqual (Local0, 0x1F)))
                                                                                                                                                                                                            {
                                                                                                                                                                                                                Store (Zero, Local4)
                                                                                                                                                                                                            }
                                                                                                                                                                                                            Else
                                                                                                                                                                                                            {
                                                                                                                                                                                                                Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x05), Decrement (
                                                                                                                                                                                                                    Local5)), Store (0x02, HPOK), M000 (0x04E2, If (HPOK)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    Store (0x7FFFFFFF, Local5)
                                                                                                                                                                                                                                    Or (Local5, 0x80000000, Local5)
                                                                                                                                                                                                                                    Store (M019 (M095 (M094 (M093 (Zero, Local0), If (LAnd (LEqual (
                                                                                                                                                                                                                                        HPOK, One), LNotEqual (Local0, Local5)))
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        M020 (M095 (M094 (M093 (0x4C, M190), Sleep (0x0A), If (
                                                                                                                                                                                                                                                            LNotEqual (M191, Local5))
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                        M020 (M095 (M094 (Add (M093 (One, Zero), 0x4C, M191), Sleep (
                                                                                                                                                                                                                                                                            0x0A))))
                                                                                                                                                                                                                                                                    })))
                                                                                                                                                                                                                                                    }))))
                                                                                                                                                                                                                                }))))
                                                                                                                                                                                                            }
                                                                                                                                                                                                        })))))))))))))
                                                                                                                                                }))))
                                                                                                                            }
                                                                                                                        }))))
                                                                                                    }))))))
                                                                        }
                                                                    }
                                                                }
                                                            }))))))
                                })))))
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            Store (0x04, M157)
            And (Arg0, One, M195)
            If (M195)
            {
                M111 (M049 (M133 (0x17, One, Else
                            {
                                M111 (M049 (M133 (0x17, Zero)))
                            })))
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            Store (0x04, M157)
            And (Arg0, One, M196)
            If (M196)
            {
                M111 (M049 (M133 (0x18, One, Else
                            {
                                M111 (M049 (M133 (0x18, Zero)))
                            })))
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Store (M049 (M133 (0x19, Local0, Store (Local0, M193), Store (0x05, 
                M157), Multiply (Local0, M157, Local0), Store (Zero, Local1), While (LLess (Local1, 
                Local0))
                        {
                            Store (M049 (M133 (Add (0x1A, Local1), Local2, Store (Local2, 
                                Index (M189, Add (0x04, Local1))), Increment (Local1), Return (M189))))
                        })))
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Store (M049 (M133 (0x7E, Local0, Store (Local0, M193), Store (0x03, 
                M157), Multiply (Local0, M157, Local0), Store (Zero, Local1), While (LLess (Local1, 
                Local0))
                        {
                            Store (M049 (M133 (Add (0x7F, Local1), Local2, Store (Local2, 
                                Index (M189, Add (0x04, Local1))), Increment (Local1), Return (M189))))
                        })))
        }

        Name (M207, Buffer (0xFF) {})
        Name (M208, Buffer (0x03) {})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If (LEqual (Arg0, Zero))
            {
                ATC0 ()
            }

            If (LEqual (Arg0, One))
            {
                ATC1 ()
            }

            If (LEqual (Arg0, 0x02))
            {
                ATC2 (Arg1)
            }

            If (LEqual (Arg0, 0x03))
            {
                ATC3 ()
            }

            If (LEqual (Arg0, 0x04))
            {
                ATC4 (Arg1)
            }

            Return (M207)
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            Store (0x08, M157)
            Store (One, M158)
            Store (0x0F, M160)
            Store (\_SB.ALIB (Zero, M208), M207)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            Store (0x0A, M157)
            Store (One, M161)
            Store (M100, M162)
            Store (M049 (M133 (0x15, Local0, If (And (Local0, 0x80))
                        {
                            Store (And (Local0, One), M204)
                        }, Else
                        {
                            If (And (Local0, 0x7F))
                            {
                                Store (M113 (Local0, M204, Store (M204, M203)))
                            }
                        })))
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            Store (0x03, M157)
            Store (One, M205)
            Store (\_SB.ALIB (0x02, Arg0), M207)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            Store (0x03, M157)
            Store (One, M205)
            Store (0x03, M197)
            Store (One, M206)
            Store (\_SB.ALIB (0x03, M208), M207)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            Store (0x03, M157)
            Store (One, M209)
            Store (\_SB.ALIB (0x04, Arg0), M207)
        }

        Name (M202, Buffer (0xFF00)
        {
             0x00
        })
        Method (XTRM, 2, Serialized)
        {
            Add (Arg0, Arg1, Local0)
            Store (M105, Local4)
            If (LGreater (Local4, 0xFF00))
            {
                Store (0xFF00, Local4)
            }

            If (LLessEqual (Local0, Local4))
            {
                Multiply (Arg1, 0x08, Local1)
                Multiply (Arg0, 0x08, Local2)
                Store (M106 (M202, CreateField (M202, Local2, Local1, TEMP)), Name (RETB, Buffer (
                    Arg1) {}))
                Store (TEMP, RETB)
                Return (RETB)
            }
            Else
            {
                If (LLess (Arg0, Local4))
                {
                    Subtract (M105, Arg0, Local3)
                    Multiply (Local3, 0x08, Local1)
                    Multiply (Arg0, 0x08, Local2)
                    Store (M106 (M202, CreateField (M202, Local2, Local1, TEM)), Name (RETC, Buffer (
                        Local3) {}))
                    Store (TEM, RETC)
                    Return (RETC)
                }
                Else
                {
                    Name (RETD, Buffer (One) {})
                    Return (RETD)
                }
            }
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If (LEqual (M087, Zero))
        {
            \_SB.PCI0.VGA.AFN0 ()
        }

        If (LEqual (M087, One))
        {
            \_SB.PCI0.GFX.VGA.AFN0 ()
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If (LEqual (M087, Zero))
        {
            \_SB.PCI0.VGA.AFN1 (Arg0)
        }

        If (LEqual (M087, One))
        {
            \_SB.PCI0.GFX.VGA.AFN1 (Arg0)
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If (LEqual (M087, Zero))
        {
            \_SB.PCI0.VGA.AFN2 (Arg0, Arg1)
        }

        If (LEqual (M087, One))
        {
            \_SB.PCI0.GFX.VGA.AFN2 (Arg0, Arg1)
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If (LEqual (M087, Zero))
        {
            \_SB.PCI0.VGA.AFN3 (Arg0, Arg1)
        }

        If (LEqual (M087, One))
        {
            \_SB.PCI0.GFX.VGA.AFN3 (Arg0, Arg1)
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If (LEqual (M087, Zero))
        {
            \_SB.PCI0.VGA.AFN4 (Arg0)
        }

        If (LEqual (M087, One))
        {
            \_SB.PCI0.GFX.VGA.AFN4 (Arg0)
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If (LEqual (M087, Zero))
        {
            \_SB.PCI0.VGA.AFN5 ()
        }

        If (LEqual (M087, One))
        {
            \_SB.PCI0.GFX.VGA.AFN5 ()
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If (LEqual (M087, Zero))
        {
            \_SB.PCI0.VGA.AFN6 ()
        }

        If (LEqual (M087, One))
        {
            \_SB.PCI0.GFX.VGA.AFN6 ()
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If (LEqual (M087, Zero))
        {
            \_SB.PCI0.VGA.AFN7 (Arg0)
        }

        If (LEqual (M087, One))
        {
            \_SB.PCI0.GFX.VGA.AFN7 (Arg0)
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If (LEqual (M087, Zero))
        {
            \_SB.PCI0.VGA.AFN8 ()
        }

        If (LEqual (M087, One))
        {
            \_SB.PCI0.GFX.VGA.AFN8 ()
        }
    }
}



SSDT7
-----
DefinitionBlock ("ssdt7.aml", "SSDT", 1, "TOSINV", "TOSINV00", 0x00000001)
{
    /*
     * iASL Warning: There were 5 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     */
    External (AFN3, MethodObj)    // Warning: Unresolved Method, guessing 6 arguments (may be incorrect, see warning above)
    External (M029, MethodObj)    // Warning: Unresolved Method, guessing 6 arguments (may be incorrect, see warning above)
    External (M031, MethodObj)    // Warning: Unresolved Method, guessing 1 arguments (may be incorrect, see warning above)
    External (M032, MethodObj)    // Warning: Unresolved Method, guessing 3 arguments (may be incorrect, see warning above)
    External (M049, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)

    External (M133)

    Scope (\_GPE)
    {
        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Store (M049 (M133, 0x12), Local0)
            Store (M049 (M133, 0x13), Local1)
            If (M031 (Local0))
            {
                If (M029 (Local0, AFN3 (Zero, 0x02, M032 (Local0, XOr (M029 (
                    Local0, One, Zero, Else
                                        {
                                            If (LNot (M029 (Local0, AFN3 (Local1, 0x02, M032 (Local0, XOr (
                                                M029 (Local0, One, Zero))))))) {}
                                        })))))) {}
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("ssdt8.aml", "SSDT", 1, "TOSINV", "TOSINV00", 0x00000001)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     */
    External (_SB_.ALIB, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)
    External (M039, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)

    External (M038, IntObj)
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0x9FBA9018, 0x0001008A)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M086,   24, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x11), 
        M087,   1, 
            ,   1, 
        Offset (0x14), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   522240, 
        Offset (0x10056), 
        M107,   64, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32
    }

    Method (M000, 1, Serialized)
    {
        Store (Arg0, Local0)
        OperationRegion (VARM, SystemIO, 0x80, 0x02)
        Field (VARM, WordAcc, NoLock, Preserve)
        {
            VARR,   16
        }

        Store (Local0, VARR)
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Add (M083, ShiftLeft (Arg0, 0x14), Local0)
        Add (Local0, ShiftLeft (Arg1, 0x0F), Local0)
        Add (Local0, ShiftLeft (Arg2, 0x0C), Local0)
        Add (0xE0, Local0, Local0)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Store (VAR2, Local0)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Add (M083, ShiftLeft (Arg0, 0x14), Local0)
        Add (Local0, ShiftLeft (Arg1, 0x0F), Local0)
        Add (Local0, ShiftLeft (Arg2, 0x0C), Local0)
        Add (0xE0, Local0, Local0)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Store (Arg4, VAR2)
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Store (M019 (Arg0, Arg1, Arg2, 0x0128), Local0)
        If (And (Local0, 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Store (M021 (Arg0, Arg1, Arg2, 0xA2), Local0)
        And (Local0, 0xFFFFFFF8, Local0)
        ShiftRight (Local0, 0x04, Local1)
        And (Local1, 0x07, Local1)
        Or (Local0, Local1, Local0)
        Or (Local0, 0x0100, Local0)
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Store (M019 (Arg0, Arg1, Arg2, 0x68), Local0)
        And (Local0, 0xFFFFFFDF, Local0)
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Or (Local0, 0x20, Local0)
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Store (0x64, Local1)
        Store (One, Local2)
        While (LAnd (Local1, Local2))
        {
            Sleep (One)
            Store (M019 (Arg0, Arg1, Arg2, 0x68), Local3)
            If (And (Local3, 0x08000000))
            {
                Decrement (Local1)
            }
            Else
            {
                Store (Zero, Local2)
            }
        }

        And (Local0, 0xFFFFFFDF, Local0)
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (LNot (Local2))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M009, 1, Serialized)
    {
        ShiftRight (Arg0, 0x08, Local0)
        And (Arg0, 0xFF, Local1)
        Store (Zero, Local2)
        If (LEqual (Local0, Zero))
        {
            If (LEqual (M085, 0x02))
            {
                Store (M011 (Add (M084, 0x1502), Multiply (Local1, 0x04), 
                    Zero, One), Local2)
            }
            Else
            {
                Store (M011 (Add (M084, 0x0100), Local1, 0x07, One), Local2)
            }
        }
        Else
        {
            If (LEqual (Local0, One))
            {
                Store (M038, Local1)
                Local2
            }
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        ShiftRight (Arg0, 0x08, Local0)
        And (Arg0, 0xFF, Local1)
        If (LEqual (Local0, Zero))
        {
            If (LEqual (M085, 0x02))
            {
                M012 (Add (M084, 0x1502), Multiply (Local1, 0x04), 0x06, 
                    0x02, Or (0x02, Arg1))
            }
            Else
            {
                M012 (Add (M084, 0x0100), Local1, 0x06, One, Arg1)
            }
        }
        Else
        {
            If (LEqual (Local0, One))
            {
                M039 (Local1, Arg1)
            }
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */   0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,
        /* 0008 */   0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,
        /* 0010 */   0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09
    })
    Method (M029, 1, Serialized)
    {
        If (LEqual (M085, 0x02))
        {
            Return (M011 (Add (M084, 0x1502), Multiply (DerefOf (Index (M037, 
                Arg0)), 0x04), Zero, One))
        }
        Else
        {
            Return (M011 (Add (M084, 0x0160), Arg0, 0x07, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Store (M011 (Add (M084, 0x0240), Arg0, Zero, 0x05), Local0)
        Return (M011 (Add (M084, 0x0208), Divide (Local0, 0x08, 
            ), And (Local0, 0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Store (M011 (Add (M084, 0x0240), Arg0, Zero, 0x05), Local0)
        M012 (Add (M084, 0x0208), Divide (Local0, 0x08, ), 
            And (Local0, 0x07), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Add (Arg0, Arg1, Local0)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Store (VARR, Local1)
        Store (0x7FFFFFFF, Local5)
        Or (Local5, 0x80000000, Local5)
        And (ShiftRight (Local1, Arg2), ShiftRight (Local5, Subtract (0x20, Arg3
            )), Local2)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Add (Arg0, Arg1, Local0)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Store (VARR, Local1)
        Store (0x7FFFFFFF, Local5)
        Or (Local5, 0x80000000, Local5)
        Add (Arg2, Arg3, Local2)
        Subtract (0x20, Local2, Local2)
        ShiftRight (And (ShiftLeft (Local5, Local2), Local5), Local2, Local2)
        ShiftLeft (ShiftRight (Local2, Arg2), Arg2, Local2)
        ShiftLeft (Arg4, Arg2, Local3)
        Or (And (Local1, XOr (Local5, Local2)), Local3, Local4)
        Store (Local4, VARR)
    }

    Method (M011, 4, Serialized)
    {
        Add (Arg0, Arg1, Local0)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Store (VARR, Local1)
        And (ShiftRight (Local1, Arg2), ShiftRight (0xFF, Subtract (0x08, Arg3
            )), Local2)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Add (Arg0, Arg1, Local0)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Store (VARR, Local1)
        Add (Arg2, Arg3, Local2)
        Subtract (0x08, Local2, Local2)
        ShiftRight (And (ShiftLeft (0xFF, Local2), 0xFF), Local2, Local2)
        ShiftLeft (ShiftRight (Local2, Arg2), Arg2, Local2)
        ShiftLeft (Arg4, Arg2, Local3)
        Or (And (Local1, XOr (0xFF, Local2)), Local3, Local4)
        Store (Local4, VARR)
    }

    Method (M017, 6, Serialized)
    {
        Store (M083, Local0)
        Add (ShiftLeft (Arg0, 0x14), Local0, Local0)
        Add (ShiftLeft (Arg1, 0x0F), Local0, Local0)
        Add (ShiftLeft (Arg2, 0x0C), Local0, Local0)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Store (M083, Local0)
        Add (ShiftLeft (Arg0, 0x14), Local0, Local0)
        Add (ShiftLeft (Arg1, 0x0F), Local0, Local0)
        Add (ShiftLeft (Arg2, 0x0C), Local0, Local0)
        M014 (Local0, Arg3, Arg4, Arg5, Arg6)
    }

    Method (M033, 3, Serialized)
    {
        Store (Zero, Local0)
        Store (M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08), Local1)
        While (LNotEqual (Local1, Zero))
        {
            Store (M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08), Local2)
            If (LOr (LEqual (Local2, Zero), LEqual (Local2, 0xFF)))
            {
                Break
            }

            If (LEqual (Local2, 0x10))
            {
                Store (M017 (Arg0, Arg1, Arg2, Add (Local1, 0x0C), 0x0A, 
                    0x02), Local0)
                Break
            }

            Store (M017 (Arg0, Arg1, Arg2, Add (Local1, One), Zero, 
                0x08), Local1)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Store (Zero, Local0)
        Store (M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08), Local1)
        While (LNotEqual (Local1, Zero))
        {
            Store (M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08), Local2)
            If (LOr (LEqual (Local2, Zero), LEqual (Local2, 0xFF)))
            {
                Break
            }

            If (LEqual (Local2, 0x10))
            {
                Store (M017 (Arg0, Arg1, Arg2, Add (Local1, 0x10), Zero, 
                    0x02), Local0)
                Break
            }

            Store (M017 (Arg0, Arg1, Arg2, Add (Local1, One), Zero, 
                0x08), Local1)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Store (Zero, Local0)
        Store (M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08), Local1)
        While (LAnd (LNotEqual (Local1, Zero), LLess (Local1, 0xFF)))
        {
            Store (M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08), Local2)
            If (LOr (LEqual (Local2, Zero), LEqual (Local2, 0xFF)))
            {
                Break
            }

            If (LEqual (Local2, 0x10))
            {
                M018 (Arg0, Arg1, Arg2, Add (Local1, 0x10), Zero, 0x02, 
                    Arg3)
                Break
            }

            Store (M017 (Arg0, Arg1, Arg2, Add (Local1, One), Zero, 
                0x08), Local1)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 (Add (M084, 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 (Add (M084, 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 (Add (M084, 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Store (Zero, Local0)
        If (LEqual (Arg0, 0x15))
        {
            Store (One, Local0)
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        ShiftLeft (Arg0, 0x05, Local0)
        Add (Local0, Arg1, Local1)
        ShiftLeft (Local1, 0x18, Local2)
        Add (Local2, Arg2, Local3)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Store (VAR2, Local0)
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        Store (Arg0, Local0)
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Store (Arg1, VAR2)
    }

    Method (M006, 3, Serialized)
    {
        And (M004 (Arg0), Arg1, Local0)
        Or (Local0, Arg2, Local1)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If (LEqual (Arg0, Zero))
        {
            If (LEqual (Arg1, Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If (LEqual (Arg1, One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If (LEqual (Arg1, 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If (LEqual (Arg1, 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If (LEqual (Arg0, One))
        {
            If (LEqual (Arg1, Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If (LEqual (Arg1, One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If (LEqual (Arg1, 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If (LEqual (Arg1, 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If (LEqual (Arg0, Zero))
        {
            M008 (Arg1)
            Store (M004 (M003 (0x03, Arg1, 0xA5)), Local0)
            And (Local0, 0xFF, Local0)
            Store (0x01F4, Local1)
            While (LAnd (LGreater (Local1, Zero), LNotEqual (Local0, 0x10)))
            {
                Store (M004 (M003 (0x03, Arg1, 0xA5)), Local0)
                And (Local0, 0xFF, Local0)
                Decrement (Local1)
                Sleep (One)
            }

            If (LNotEqual (Local0, 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Store (M019 (Zero, 0x15, Arg0, 0x88), Local0)
        Or (And (Local0, 0xFFFFFFF0), 0x02, Local1)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Store (M019 (Zero, 0x15, Arg0, 0x88), Local0)
        Or (And (Local0, 0xFFFFFFF0), One, Local1)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If (LNotEqual (Arg0, Zero))
        {
            Store (M110, Local0)
            If (Local0)
            {
                Add (Local0, 0x10, Local0)
                Store (Zero, Local1)
                Store (One, Local2)
                While (LAnd (LNotEqual (Local2, 0xFF), LNotEqual (Local2, Zero)))
                {
                    Store (M013 (Add (Local0, Local1), Zero, Zero, 0x08), Local2)
                    Store (M013 (Add (Local0, Local1), One, Zero, 0x08), Local3)
                    If (LAnd (LEqual (Local2, Arg0), LEqual (Local3, Arg1)))
                    {
                        Store (M013 (Add (Local0, Local1), 0x02, Zero, 0x08), Local4)
                        If (LEqual (Local4, Zero))
                        {
                            Store (M013 (Add (Local0, Local1), 0x03, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x03, 0x10, 0x08), Local6)
                            M010 (Local5, Local6)
                        }

                        If (LEqual (Local4, One))
                        {
                            Store (M013 (Add (Local0, Local1), 0x03, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x03, 0x10, 0x08), Local6)
                            While (LNotEqual (M009 (Local5), Local6)) {}
                        }

                        If (LEqual (Local4, 0x02))
                        {
                            Store (M013 (Add (Local0, Local1), 0x03, Zero, 0x20), Local5)
                            Sleep (Divide (Add (Local5, 0x03E7), 0x03E8, ))
                        }
                    }

                    Add (Local1, 0x08, Local1)
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If (LNotEqual (Arg0, Zero))
        {
            Store (M109, Local0)
            If (Local0)
            {
                Add (Local0, 0x10, Local0)
                Store (Zero, Local1)
                Store (One, Local2)
                While (LAnd (LNotEqual (Local2, 0xFF), LNotEqual (Local2, Zero)))
                {
                    Store (M013 (Add (Local0, Local1), Zero, Zero, 0x08), Local2)
                    Store (M013 (Add (Local0, Local1), One, Zero, 0x08), Local3)
                    If (LAnd (LEqual (Local2, Arg0), LEqual (Local3, Arg1)))
                    {
                        If (LLess (Local3, 0x02))
                        {
                            Store (M013 (Add (Local0, Local1), 0x02, Zero, 0x08), Local4)
                            If (LEqual (Local4, Zero))
                            {
                                Store (M013 (Add (Local0, Local1), 0x03, Zero, 0x10), Local5)
                                Store (M013 (Add (Local0, Local1), 0x03, 0x10, 0x08), Local6)
                                M010 (Local5, Local6)
                            }
                        }

                        If (LEqual (Local3, 0x02))
                        {
                            Store (M013 (Add (Local0, Local1), 0x03, Zero, 0x20), Local5)
                            Sleep (Divide (Add (Local5, 0x03E7), 0x03E8, ))
                        }
                    }

                    Add (Local1, 0x08, Local1)
                }
            }
        }
    }

    Method (M113, 1, Serialized)
    {
        If (LNotEqual (Arg0, Zero))
        {
            Store (M108, Local0)
            Store (One, Local7)
            If (Local0)
            {
                Add (Local0, 0x10, Local0)
                Store (Zero, Local1)
                Store (One, Local2)
                While (LAnd (LNotEqual (Local2, 0xFF), LNotEqual (Local2, Zero)))
                {
                    Store (M013 (Add (Local0, Local1), Zero, Zero, 0x08), Local2)
                    If (LEqual (Local2, Arg0))
                    {
                        Store (0xFF, Local2)
                        Store (M013 (Add (Local0, Local1), One, Zero, 0x08), Local3)
                        If (LEqual (Local3, Zero))
                        {
                            Store (M013 (Add (Local0, Local1), 0x02, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x04, Zero, 0x08), Local6)
                            Store (LEqual (M009 (Local5), Local6), Local7)
                        }

                        If (LEqual (Local3, One))
                        {
                            Store (M013 (Add (Local0, Local1), 0x02, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x04, Zero, 0x08), Local6)
                            Store (LEqual (M009 (Local5), Local6), Local7)
                            Store (M013 (Add (Local0, Local1), 0x05, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x07, Zero, 0x08), Local6)
                            And (Local7, LEqual (M009 (Local5), Local6), Local7)
                        }

                        If (LEqual (Local3, 0x02))
                        {
                            Store (M013 (Add (Local0, Local1), 0x02, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x04, Zero, 0x08), Local6)
                            Store (LEqual (M009 (Local5), Local6), Local7)
                            Store (M013 (Add (Local0, Local1), 0x05, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x07, Zero, 0x08), Local6)
                            And (Local7, LEqual (M009 (Local5), Local6), Local7)
                            Store (M013 (Add (Local0, Local1), 0x08, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x0A, Zero, 0x08), Local6)
                            And (Local7, LEqual (M009 (Local5), Local6), Local7)
                        }

                        If (LEqual (Local3, 0x03))
                        {
                            Store (M013 (Add (Local0, Local1), 0x02, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x04, Zero, 0x08), Local6)
                            Store (LEqual (M009 (Local5), Local6), Local7)
                            Store (M013 (Add (Local0, Local1), 0x05, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x07, Zero, 0x08), Local6)
                            Or (Local7, LEqual (M009 (Local5), Local6), Local7)
                        }

                        If (LEqual (Local3, 0x04))
                        {
                            Store (M013 (Add (Local0, Local1), 0x02, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x04, Zero, 0x08), Local6)
                            Store (LEqual (M009 (Local5), Local6), Local7)
                            Store (M013 (Add (Local0, Local1), 0x05, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x07, Zero, 0x08), Local6)
                            Or (Local7, LEqual (M009 (Local5), Local6), Local7)
                            Store (M013 (Add (Local0, Local1), 0x08, Zero, 0x10), Local5)
                            Store (M013 (Add (Local0, Local1), 0x0A, Zero, 0x08), Local6)
                            Or (Local7, LEqual (M009 (Local5), Local6), Local7)
                        }
                    }
                    Else
                    {
                        Add (Local1, 0x0B, Local1)
                    }
                }
            }
        }
        Else
        {
            Store (Zero, Local7)
        }

        If (Local7)
        {
            Store (One, Local7)
        }

        Return (Local7)
    }

    Method (M114, 3, Serialized)
    {
        Store (Zero, Local7)
        If (LNot (M001 (Arg0, Arg1)))
        {
            Name (M115, Buffer (0x05) {})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            Store (0x05, M116)
            Store (Zero, M119)
            Store (Arg0, M118)
            Store (Arg1, M117)
            If (LEqual (Arg2, Zero))
            {
                Store (Zero, M120)
                \_SB.ALIB (0x06, M115)
            }
            Else
            {
                Store (One, M120)
                \_SB.ALIB (0x06, M115)
                Store (M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08), Local0)
                If (LAnd (LNotEqual (Local0, Zero), LNotEqual (Local0, 0xFF)))
                {
                    Store (M019 (Local0, Zero, Zero, Zero), Local1)
                    Store (0x7FFFFFFF, Local2)
                    Or (Local2, 0x80000000, Local2)
                    If (LAnd (LNotEqual (Local1, Zero), LNotEqual (Local1, Local2)))
                    {
                        Store (One, Local7)
                    }
                }
            }
        }
        Else
        {
            If (LEqual (Arg2, Zero))
            {
                M002 (One, Arg1)
            }
            Else
            {
                M002 (Zero, Arg1)
                Store (M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08), Local0)
                If (LAnd (LNotEqual (Local0, Zero), LNotEqual (Local0, 0xFF)))
                {
                    Store (M019 (Local0, Zero, Zero, Zero), Local1)
                    Store (0x7FFFFFFF, Local2)
                    Or (Local2, 0x80000000, Local2)
                    If (LAnd (LNotEqual (Local1, Zero), LNotEqual (Local1, Local2)))
                    {
                        Store (One, Local7)
                    }
                }
            }
        }

        Return (Local7)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Store (Zero, Local0)
        If (LEqual (M047, Ones))
        {
            Store (Zero, M047)
            Store (Zero, M046)
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    Store (One, M046)
                }

                If (\_OSI ("Windows 2013"))
                {
                    Store (One, M046)
                }

                If (\_OSI ("Linux"))
                {
                    Store (0x02, M046)
                }
            }
        }

        If (LEqual (M046, One))
        {
            Store (One, Local0)
        }

        Return (Local0)
    }

    Method (M044, 0, Serialized)
    {
        M045 ()
        Store (Zero, Local0)
        If (LEqual (M046, 0x02))
        {
            Store (One, Local0)
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Store (Zero, Local0)
        If (LNotEqual (Arg0, Zero))
        {
            Store (M011 (Arg0, Arg1, Zero, 0x08), Local0)
        }

        Return (Local0)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM)
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }
}



SSDT9
-----
DefinitionBlock ("ssdt9.aml", "SSDT", 1, "TOSINV", "TOSINV00", 0x00000001)
{
    /*
     * iASL Warning: There were 14 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     */
    External (M000, MethodObj)    // Warning: Unresolved Method, guessing 1 arguments (may be incorrect, see warning above)
    External (M013, MethodObj)    // Warning: Unresolved Method, guessing 4 arguments (may be incorrect, see warning above)
    External (M014, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (M017, MethodObj)    // Warning: Unresolved Method, guessing 6 arguments (may be incorrect, see warning above)
    External (M018, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (M019, MethodObj)    // Warning: Unresolved Method, guessing 4 arguments (may be incorrect, see warning above)
    External (M029, MethodObj)    // Warning: Unresolved Method, guessing 3 arguments (may be incorrect, see warning above)
    External (M031, MethodObj)    // Warning: Unresolved Method, guessing 3 arguments (may be incorrect, see warning above)
    External (M032, MethodObj)    // Warning: Unresolved Method, guessing 7 arguments (may be incorrect, see warning above)
    External (M044, MethodObj)    // Warning: Unresolved Method, guessing 1 arguments (may be incorrect, see warning above)
    External (M045, MethodObj)    // Warning: Unresolved Method, guessing 1 arguments (may be incorrect, see warning above)
    External (M049, MethodObj)    // Warning: Unresolved Method, guessing 3 arguments (may be incorrect, see warning above)
    External (M111, MethodObj)    // Warning: Unresolved Method, guessing 4 arguments (may be incorrect, see warning above)
    External (M134, MethodObj)    // Warning: Unresolved Method, guessing 2 arguments (may be incorrect, see warning above)

    External (_ADR, IntObj)
    External (_SB_.PCI0.SATA, DeviceObj)
    External (M128)

    Scope (\_SB.PCI0.SATA)
    {
        Name (M048, One)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If (LEqual (XCMP (Arg0, Buffer (0x10)
                        {
                            /* 0000 */   0x9B, 0x14, 0xDB, 0xE4, 0xFE, 0xFC, 0x5B, 0x42,
                            /* 0008 */   0xA6, 0xD8, 0x92, 0x35, 0x7D, 0x78, 0xFC, 0x7F
                        }), One))
            {
                If (LEqual (Arg2, Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03
                    })
                }
                Else
                {
                    If (LEqual (Arg2, One))
                    {
                        Name (ADDR, Package (0x01)
                        {
                            0x0001FFFF
                        })
                        Store (Add (Multiply (M049 (M134 (0x15, 0x00010000), Zero, 0xFFFF), Zero, 
                            Index (ADDR, Zero)), Return (Package (0x01)
                                {
                                    ADDR
                                }), Else
                                {
                                    If (LEqual (Arg2, 0x02))
                                    {
                                        Store (DerefOf (Index (Arg3, Zero)), Local0)
                                        If (LOr (LEqual (Local0, Add (Multiply (M049 (M134 (0x15, 0x00010000), 
                                            Zero, 0xFFFF), Zero, LEqual (Local0, Ones)), Store (DerefOf (Index (Arg3, One
                                            )), Local1), If (LEqual (Local1, Zero))
                                                        {
                                                            STPT (Zero)
                                                            Return (Zero)
                                                        })), Else
                                                {
                                                    If (LEqual (Local1, One))
                                                    {
                                                        If (M045 (\_SB.PCI0.SATA.ODD8._PS0 ())) {}
                                                        Else
                                                        {
                                                            If (M044 (\_SB.PCI0.SATA.ODDL._PS0 ())) {}
                                                            Else
                                                            {
                                                                \_SB.PCI0.SATA.ODDZ._PS0 ()
                                                            }
                                                        }

                                                        Return (Zero)
                                                    }
                                                })) {}
                                    }
                                }), Return (One))
                    }
                }
            }
        }

        Method (XCMP, 2, NotSerialized)
        {
            If (LNotEqual (0x10, SizeOf (Arg0)))
            {
                Return (Zero)
            }

            If (LNotEqual (0x10, SizeOf (Arg1)))
            {
                Return (Zero)
            }

            Store (Zero, Local0)
            While (LLess (Local0, 0x10))
            {
                If (LNotEqual (DerefOf (Index (Arg0, Local0)), DerefOf (Index (
                    Arg1, Local0))))
                {
                    Return (Zero)
                }

                Increment (Local0)
            }

            Return (One)
        }

        Method (STDV, 0, Serialized)
        {
            Store (_ADR, Local0)
            Return (ShiftRight (Local0, 0x10))
        }

        Method (STFN, 0, Serialized)
        {
            Store (_ADR, Local0)
            Return (And (Local0, 0xFFFF))
        }

        Method (PBAA, 0, Serialized)
        {
            Store (M019 (Zero, STDV (), STFN (), 0x24), Local0)
            If (LEqual (Local0, Ones))
            {
                Store (Zero, Local0)
            }

            Return (Local0)
        }

        Method (STPT, 1, Serialized)
        {
            M018 (Zero, STDV (), STFN (), 0x42, M049 (M134 (0x15, One), XOr (
                Arg0, One)))
        }

        Method (STPP, 1, Serialized)
        {
            M018 (Zero, STDV (), STFN (), 0x42, M049 (M134 (0x15, One), XOr (
                Arg0, One), If (LEqual (M017 (Zero, STDV (), STFN (), 0x0A, Zero, 
                0x10), 0x0106))
                    {
                        If (LNotEqual (PBAA (), Zero))
                        {
                            M018 (Zero, STDV (), STFN (), 0x40, Zero, One, One)
                            M014 (PBAA (), 0x0C, M049 (M134 (0x15, One), Arg0, Store (M017 (
                                Zero, STDV (), STFN (), 0x42, Zero, 0x06), Local0)), If (LEqual (Local0, 0x3F))
                                {
                                    M014 (PBAA (), 0x0C, Zero, One, One, Else
                                        {
                                            If (LAnd (M017 (Zero, STDV (), STFN (), 0x42, Zero, One), XOr (
                                                And (Local0, 0x3E), 0x3E)))
                                            {
                                                M014 (PBAA (), 0x0C, Zero, One, Zero, Store (M013 (PBAA (), 0x0C, 
                                                    Zero, 0x06), Local1), Store (Zero, Local2))
                                            }
                                        }, While (Local1)
                                        {
                                            If (And (Local1, One))
                                            {
                                                Increment (Local2)
                                            }

                                            ShiftRight (Local1, One, Local1)
                                        })
                                }, M014 (PBAA (), Zero, Zero, 0x05, Decrement (
                                                Local2), M018 (Zero, STDV (), STFN (), 0x40, Zero, One, Zero)))
                        }
                    }))
        }

        Method (STPM, 0, Serialized)
        {
            Store (Zero, Local1)
            If (LNotEqual (PBAA (), Zero))
            {
                Store (Add (0x0118, Multiply (0x80, M049 (M134 (0x15, Zero), Zero, 
                    Local0), Store (M013 (PBAA (), Local0, Zero, One), Local0)), Return (Local1)))
            }
        }

        Method (STPR, 0, Serialized)
        {
            If (LEqual (M017 (Zero, STDV (), STFN (), 0x0A, Zero, 0x10), 0x0106))
            {
                If (LNotEqual (PBAA (), Zero))
                {
                    Store (Add (0x0118, Multiply (0x80, M049 (M134 (0x15, Zero), Zero, 
                        Local0), M014), PBAA), Local0)
                    Zero
                    One
                    Zero
                    Sleep (One)
                    Store (Add (0x012C, Multiply (0x80, M049 (M134 (0x15, Zero), Zero, 
                        Local0), M014), PBAA), Local0)
                    Zero
                    0x04
                    One
                    Sleep (0x02)
                    M014 (PBAA (), Local0, Zero, 0x04, Zero)
                }
            }
        }

        Device (PRT2)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (And (M049 (M128, 0x67, One), Zero, Return (Zero))) {}
                Else
                {
                    Return (0x0F)
                }
            }

            Device (ODD)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (M049 (M134 (0x15)))
                }

                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }
            }
        }

        Device (ODD8)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If (LAnd (LOr (M045 (M044 (And (M049 (M128, 0x67, One), 
                    Zero, Return (Add (Multiply (M049 (M134 (0x15, 0x00010000), Zero, 0xFFFF), Zero, 
                    Else
                                                {
                                                    Return (M049 (M134 (0x15)))
                                                }))))))))) {}
            }

            Name (ODPS, Zero)
            Name (ODDB, Zero)
            Name (WDSW, One)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (LNotEqual (PBAA (), Zero))
                {
                    If (LNotEqual (M013 (PBAA (), Add (0x0129, Multiply (M049 (M134 (
                        0x15, 0x80), Zero, Zero), Zero, 0x04)), Store (One, ODDB)))) {}
                }
            }

            Method (ZSTA, 0, NotSerialized)
            {
                If (And (M049 (M128, 0x67, One), Zero, If (And (M049 (
                    M128, 0x67, 0x02), Zero, If (M029 (M049 (M134 (0x12, Return (Zero)), 
                    Else
                                            {
                                                If (And (M049 (M128, 0x67, 0x04), Zero, Store (One, ODDB))) {}
                                                Return (0x0F)
                                            }, Else
                                            {
                                                If (And (M049 (M128, 0x67, 0x04), Zero, Store (One, ODDB))) {}
                                                Return (0x0F)
                                            }), Else
                                        {
                                            Return (Zero)
                                        })) {})) {})) {}
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                If (M048)
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If (LNot (LAnd (And (M049 (M128, 0x67, 0x02), Zero, M029), 
                    M049 (M134 (0x12, M000 (0xDF00)), If (And (M049 (M128, 0x67, One), 
                    Zero, If (LOr (LEqual (ODDB, One), LAnd (LEqual (ODDB, Zero), 
                    LNotEqual (STPM (), Zero))))
                                        {
                                            STPT (One)
                                            Sleep (0x28)
                                            M111 (M049 (M134 (0x10, One), Store (One, M048), Sleep (0x28)), 
                                                Store (One, ODDB), Store (Zero, ODPS))
                                        })) {})))) {}
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                M000 (0xDF03)
                If (And (M049 (M128, 0x67, One), Zero, If (LEqual (WDSW, 
                    One))
                        {
                            Sleep (0x28)
                            M111 (M049 (M134 (0x10, Zero), Store (Zero, M048), Sleep (0x28)), 
                                STPT (Zero), M032 (M049 (M134 (0x11, XOr (M029 (M049 (M134 (0x11, 
                                One), Zero, Store (One, ODDB)), Store (0x03, ODPS)))))))
                        })) {}
            }

            Method (XEJ0, 1, NotSerialized)
            {
                _PS3 ()
                STPP (Zero)
            }

            Device (ODD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (One)
                }

                Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device
                {
                    M111 (M049 (M134 (0x10, Zero), Store (Zero, M048)))
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (M045 (Return (ZSTA ()))) {}
                Else
                {
                    Return (Zero)
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0)
                {
                    Store (One, WDSW)
                }
                Else
                {
                    Store (Zero, WDSW)
                }
            }

            Name (ZPRW, Package (0x02)
            {
                0x11, 
                0x03
            })
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (LNot (M045 (Store (M049 (M134 (0x13, Index (ZPRW, Zero
                    )), Return (ZPRW)))))) {}
            }
        }

        Device (ODDZ)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If (LAnd (LOr (M045 (M044 (And (M049 (M128, 0x67, One), 
                    Zero, Return (Add (Multiply (M049 (M134 (0x15, 0x00010000), Zero, 0xFFFF), Zero, 
                    Else
                                                {
                                                    Return (M049 (M134 (0x15)))
                                                }))))))))) {}
            }

            Name (ODPS, Zero)
            Name (ODDB, Zero)
            Name (WDSW, One)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (LNotEqual (PBAA (), Zero))
                {
                    If (LNotEqual (M013 (PBAA (), Add (0x0129, Multiply (M049 (M134 (
                        0x15, 0x80), Zero, Zero), Zero, 0x04)), Store (One, ODDB)))) {}
                }
            }

            Method (ZSTA, 0, NotSerialized)
            {
                If (And (M049 (M128, 0x67, One), Zero, If (And (M049 (
                    M128, 0x67, 0x02), Zero, If (M029 (M049 (M134 (0x12, Return (Zero)), 
                    Else
                                            {
                                                If (And (M049 (M128, 0x67, 0x04), Zero, Store (One, ODDB))) {}
                                                Return (0x0F)
                                            }, Else
                                            {
                                                If (And (M049 (M128, 0x67, 0x04), Zero, Store (One, ODDB))) {}
                                                Return (0x0F)
                                            }), Else
                                        {
                                            Return (Zero)
                                        })) {})) {})) {}
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                If (M048)
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If (LNot (LAnd (And (M049 (M128, 0x67, 0x02), Zero, M029), 
                    M049 (M134 (0x12, M000 (0xDF00)), If (And (M049 (M128, 0x67, One), 
                    Zero, If (LOr (LEqual (ODDB, One), LAnd (LEqual (ODDB, Zero), 
                    LNotEqual (STPM (), Zero))))
                                        {
                                            STPT (One)
                                            Sleep (0x28)
                                            M111 (M049 (M134 (0x10, One), Store (One, M048), Sleep (0x28)), 
                                                Store (One, ODDB), Store (Zero, ODPS))
                                        })) {})))) {}
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                M000 (0xDF03)
                If (And (M049 (M128, 0x67, One), Zero, If (LEqual (WDSW, 
                    One))
                        {
                            Sleep (0x28)
                            M111 (M049 (M134 (0x10, Zero), Store (Zero, M048), Sleep (0x28)), 
                                STPT (Zero), M032 (M049 (M134 (0x11, XOr (M029 (M049 (M134 (0x11, 
                                One), Zero, Store (One, ODDB)), Store (0x03, ODPS)))))))
                        })) {}
            }

            Method (XEJ0, 1, NotSerialized)
            {
                _PS3 ()
                STPP (Zero)
            }

            Device (ODD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (One)
                }

                Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device
                {
                    M111 (M049 (M134 (0x10, Zero), Store (Zero, M048)))
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LNot (LOr (M045 (M044 (Return (ZSTA ()))), Else
                            {
                                Return (Zero)
                            }))) {}
            }
        }

        Device (ODDL)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If (LAnd (LOr (M045 (M044 (And (M049 (M128, 0x67, One), 
                    Zero, Return (Add (Multiply (M049 (M134 (0x15, 0x00010000), Zero, 0xFFFF), Zero, 
                    Else
                                                {
                                                    Return (M049 (M134 (0x15)))
                                                }))))))))) {}
            }

            Name (ODPS, Zero)
            Name (ODDB, Zero)
            Name (WDSW, One)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (LNotEqual (PBAA (), Zero))
                {
                    If (LNotEqual (M013 (PBAA (), Add (0x0129, Multiply (M049 (M134 (
                        0x15, 0x80), Zero, Zero), Zero, 0x04)), Store (One, ODDB)))) {}
                }
            }

            Method (ZSTA, 0, NotSerialized)
            {
                If (And (M049 (M128, 0x67, One), Zero, If (And (M049 (
                    M128, 0x67, 0x02), Zero, If (M029 (M049 (M134 (0x12, Return (Zero)), 
                    Else
                                            {
                                                If (And (M049 (M128, 0x67, 0x04), Zero, Store (One, ODDB))) {}
                                                Return (0x0F)
                                            }, Else
                                            {
                                                If (And (M049 (M128, 0x67, 0x04), Zero, Store (One, ODDB))) {}
                                                Return (0x0F)
                                            }), Else
                                        {
                                            Return (Zero)
                                        })) {})) {})) {}
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                If (M048)
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If (LNot (LAnd (And (M049 (M128, 0x67, 0x02), Zero, M029), 
                    M049 (M134 (0x12, M000 (0xDF00)), If (And (M049 (M128, 0x67, One), 
                    Zero, If (LOr (LEqual (ODDB, One), LAnd (LEqual (ODDB, Zero), 
                    LNotEqual (STPM (), Zero))))
                                        {
                                            STPT (One)
                                            Sleep (0x28)
                                            M111 (M049 (M134 (0x10, One), Store (One, M048), Sleep (0x28)), 
                                                Store (One, ODDB), Store (Zero, ODPS))
                                        })) {})))) {}
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                M000 (0xDF03)
                If (And (M049 (M128, 0x67, One), Zero, If (LEqual (WDSW, 
                    One))
                        {
                            Sleep (0x28)
                            M111 (M049 (M134 (0x10, Zero), Store (Zero, M048), Sleep (0x28)), 
                                STPT (Zero), M032 (M049 (M134 (0x11, XOr (M029 (M049 (M134 (0x11, 
                                One), Zero, Store (One, ODDB)), Store (0x03, ODPS)))))))
                        })) {}
            }

            Method (XEJ0, 1, NotSerialized)
            {
                _PS3 ()
                STPP (Zero)
            }

            Device (ODD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (One)
                }

                Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device
                {
                    M111 (M049 (M134 (0x10, Zero), Store (Zero, M048)))
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (M044 (Return (ZSTA ()))) {}
                Else
                {
                    Return (Zero)
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0)
                {
                    Store (One, WDSW)
                }
                Else
                {
                    Store (Zero, WDSW)
                }
            }
        }
    }

    Scope (\_GPE)
    {
        Method (_L11, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If (LAnd (And (M049 (M128, 0x67, One), Zero, LEqual (M029 (
                M049 (M134 (0x12, Zero), If (M031 (M049 (M134 (0x11, Sleep (0x14)), 
                If (M029 (M049 (M134 (0x11, If (And (M049 (M128, 0x67, 0x10), 
                Zero, \_SB.PCI0.SATA.STPR)) {}), If (M045 (Notify (\_SB.PCI0.SATA.ODD8, 0x02))) {}, Else
                                                            {
                                                                If (M044 (Notify (\_SB.PCI0.SATA.ODDL, 0x02))) {}
                                                                Else
                                                                {
                                                                    Notify (\_SB.PCI0.SATA.ODDZ, 0x80)
                                                                }
                                                            }), Sleep (0x01F4), M000 (0xDF15))) {}, Else
                                                {
                                                    Sleep (0x14)
                                                    If (LNot (M029 (M049 (M134 (0x11, If (M045 (Notify (\_SB.PCI0.SATA.ODD8, 
                                                        0x02))) {}), Else
                                                                    {
                                                                        If (M044 (Notify (\_SB.PCI0.SATA.ODDL, 0x02))) {}
                                                                        Else
                                                                        {
                                                                            Notify (\_SB.PCI0.SATA.ODDZ, 0x80)
                                                                        }
                                                                    }, Sleep (0x01F4)), M000 (0xDF14), M032 (M049 (M134 (
                                                                                0x11, XOr (M029 (M049 (M134 (0x11, One), Zero))))))))) {}
                                                }))) {})))))) {}
        }

        Method (XL10, 0, NotSerialized)
        {
            Sleep (0xC8)
            If (M031 (M049 (M134 (0x12, If (M029 (M049 (M134 (0x12, 
                M000 (0xDF17)), M111 (M049 (M134 (0x10, Zero), Store (Zero, \_SB.PCI0.SATA.M048), Sleep (
                0x28)), \_SB.PCI0.SATA.STPP (Zero), If (M045 (Store (0x03, \_SB.PCI0.SATA.ODD8.ODPS))) {}, Else
                                            {
                                                If (M044 (Store (0x03, \_SB.PCI0.SATA.ODDL.ODPS))) {}
                                                Else
                                                {
                                                    Store (0x03, \_SB.PCI0.SATA.ODDZ.ODPS)
                                                }
                                            }), M032 (M049 (M134 (0x12, XOr (M029 (M049 (
                                                        M134 (0x12, One), Zero, Else
                                                                {
                                                                    Sleep (0x14)
                                                                    If (LNot (M029 (M049 (M134 (0x12, M000 (0xDF16)), \_SB.PCI0.SATA.STPP (One), 
                                                                        Sleep (0x28)), M111 (M049 (M134 (0x10, One), Store (One, \_SB.PCI0.SATA.M048), Sleep (
                                                                        0x28)), If (M045 (Store (Zero, \_SB.PCI0.SATA.ODD8.ODPS))) {}, Else
                                                                                    {
                                                                                        If (M044 (Store (Zero, \_SB.PCI0.SATA.ODDL.ODPS))) {}
                                                                                        Else
                                                                                        {
                                                                                            Store (Zero, \_SB.PCI0.SATA.ODDZ.ODPS)
                                                                                        }
                                                                                    }, M032 (M049 (M134 (0x12, XOr (M029 (M049 (
                                                                                                M134 (0x12, One), Zero, Sleep (0x28)), If (And (M049 (M128, 0x67, 
                                                                                                One), Zero, If (M045 (Notify (\_SB.PCI0.SATA.ODD8, One))) {}))
                                                                                                        {
                                                                                                            Else
                                                                                                            {
                                                                                                                If (M044 (Notify (\_SB.PCI0.SATA.ODDL, One))) {}
                                                                                                                Else
                                                                                                                {
                                                                                                                    Notify (\_SB.PCI0.SATA.ODDZ, One)
                                                                                                                    Notify (\_SB.PCI0.SATA.ODDZ, 0x81)
                                                                                                                }
                                                                                                            }
                                                                                                        }, Else
                                                                                                        {
                                                                                                            Notify (\_SB.PCI0.SATA.PRT2, One)
                                                                                                            If (LNot (LOr (M045 (M044 (Notify (\_SB.PCI0.SATA.PRT2, 0x81)))))) {}
                                                                                                        }))))))))) {}
                                                                }))))))))) {})))) {}
        }
    }
}



UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000236
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : AC
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036  16]              UUID Identifier : 9D4BF935-A674-4710-BA02-BF0AA1758C7B
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 566 (0x236)

  0000: 55 45 46 49 36 02 00 00 01 AC 54 4F 53 49 4E 56  UEFI6.....TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 35 F9 4B 9D 74 A6 10 47 BA 02 BF 0A  ....5.K.t..G....
  0030: A1 75 8C 7B 36 00 24 42 56 44 54 24 00 00 00 24  .u.{6.$BVDT$...$
  0040: 00 00 00 24 31 2E 33 30 00 00 00 00 00 00 00 00  ...$1.30........
  0050: 00 00 00 00 00 00 00 00 00 00 00 00 24 41 52 49  ............$ARI
  0060: 4F 4E 5F 41 42 00 00 00 00 00 00 00 00 00 00 00  ON_AB...........
  0070: 00 00 00 00 00 00 24 43 43 42 2E 30 33 2E 37 34  ......$CCB.03.74
  0080: 2E 31 30 00 00 00 00 00 00 00 00 00 00 00 00 00  .10.............
  0090: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  ................
  00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  00C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  00D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  00E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  00F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0160: FF FF FF FF FF 24 42 4D 45 24 00 4E 72 00 00 02  .....$BME$.Nr...
  0170: 00 00 24 00 40 72 00 30 0B 00 00 24 01 00 00 00  ..$.@r.0...$....
  0180: 00 00 00 02 00 24 5F 4D 53 43 5F 56 45 52 3D 00  .....$_MSC_VER=.
  0190: 00 24 52 44 41 54 45 14 08 14 72 01 00 00 24 45  .$RDATE...r...$E
  01A0: 4E 44 4F 46 42 56 44 54 FF FF FF FF FF FF FF FF  NDOFBVDT........
  01B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  01C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  01D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  01E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  01F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  0230: FF FF FF FF FF FF                                ......


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000EC84
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 56
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000


**** Unknown ACPI table type [VFCT]


Raw Table Data: Length 60548 (0xEC84)

  0000: 56 46 43 54 84 EC 00 00 01 56 54 4F 53 49 4E 56  VFCT.....VTOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  TOSINV00....ACPI
  0020: 00 00 04 00 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  ....2..]...I....
  0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  ..y.L...........
  0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0050: 01 00 00 00 00 00 00 00 02 10 50 98 00 00 00 00  ..........P.....
  0060: 01 00 00 00 00 EC 00 00 55 AA 76 E9 11 02 00 00  ........U.v.....
  0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0080: C4 01 00 00 00 00 49 42 4D 66 BC A1 00 00 00 00  ......IBMf......
  0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  ........ 7612955
  00A0: 32 30 00 00 00 00 00 00 09 02 00 00 00 00 00 00  20..............
  00B0: 9E 01 00 00 00 00 00 00 30 31 2F 30 37 2F 31 34  ........01/07/14
  00C0: 2C 31 31 3A 33 38 3A 34 34 00 00 00 E9 06 03 00  ,11:38:44.......
  00D0: E9 15 03 00 00 00 80 00 00 00 00 00 00 00 00 00  ................
  00E0: 00 00 00 00 00 00 00 00 31 31 33 2D 43 36 39 33  ........113-C693
  00F0: 30 30 2D 31 30 30 00 47 4F 44 41 56 41 52 49 00  00-100.GODAVARI.
  0100: 50 43 49 5F 45 58 50 52 45 53 53 00 44 44 52 33  PCI_EXPRESS.DDR3
  0110: 00 0D 0A 41 4D 44 20 46 75 73 69 6F 6E 20 47 6F  ...AMD Fusion Go
  0120: 64 61 76 61 72 69 20 47 65 6E 65 72 69 63 20 56  davari Generic V
  0130: 42 49 4F 53 20 20 20 20 20 20 20 20 20 20 20 20  BIOS            
  0140: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                  
  0150: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 0D                 .
  0160: 0A 00 0D 0A 20 0D 0A 00 28 43 29 20 31 39 38 38  .... ...(C) 1988
  0170: 2D 32 30 31 30 2C 20 41 64 76 61 6E 63 65 64 20  -2010, Advanced 
  0180: 4D 69 63 72 6F 20 44 65 76 69 63 65 73 2C 20 49  Micro Devices, I
  0190: 6E 63 2E 00 41 54 4F 4D 42 49 4F 53 42 4B 2D 41  nc..ATOMBIOSBK-A
  01A0: 4D 44 20 56 45 52 30 31 35 2E 30 34 32 2E 30 30  MD VER015.042.00
  01B0: 30 2E 30 30 32 2E 30 30 30 30 30 30 00 4D 75 6C  0.002.000000.Mul
  01C0: 6C 69 6E 73 47 65 6E 65 72 00 39 39 34 30 38 30  linsGener.994080
  01D0: 2E 62 00 32 38 32 35 37 38 20 20 00 20 20 20 20  .b.282578  .    
  01E0: 20 20 20 20 00 41 4D 44 5F 47 6F 64 61 76 61 72      .AMD_Godavar
  01F0: 69 5F 67 65 6E 65 72 69 63 5C 63 6F 6E 66 69 67  i_generic\config
  0200: 2E 68 00 00 00 90 24 00 01 01 41 54 4F 4D 00 C0  .h....$...ATOM..
  0210: 11 03 55 01 E9 01 A9 00 44 03 00 00 00 00 02 10  ..U.....D.......
  0220: 02 10 C4 01 84 A6 2A A7 A0 00 00 00 50 43 49 52  ......*.....PCIR
  0230: 02 10 50 98 00 00 18 00 00 00 00 03 76 00 2A 0F  ..P.........v.*.
  0240: 00 80 00 00 41 4D 44 20 41 54 4F 4D 42 49 4F 53  ....AMD ATOMBIOS
  0250: 00 15 0D 98 3E 00 00 00 00 00 00 00 00 00 00 00  ....>...........
  0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0270: 00 56 1E 0E 1F E8 EC 34 81 4D 50 00 20 1F 5E 1E  .V.....4.MP. .^.
  0280: 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E  .fPfQfRfSfUfVfW.
  0290: 1F A3 B2 01 8C 0E A6 01 E8 98 3C E8 74 3A 32 D2  ..........<.t:2.
  02A0: 89 16 B4 01 A1 B2 01 66 C1 C0 10 A1 A6 01 E8 62  .......f.......b
  02B0: 06 E8 B3 06 E8 DF 05 E8 0B 08 E8 74 04 E8 A4 34  ...........t...4
  02C0: F7 45 50 00 20 75 0C E8 49 00 E8 73 66 E8 E5 05  .EP. u..I..sf...
  02D0: E8 D2 66 E8 B9 00 B4 80 E8 6C 3A 8A C7 66 C1 E0  ..f......l:..f..
  02E0: 10 8A E3 B0 14 66 50 BB 08 10 E8 E5 3B A8 01 66  .....fP.....;..f
  02F0: 58 74 02 B0 20 66 A3 BC A1 E8 68 05 E8 72 06 E8  Xt.. f....h..r..
  0300: 54 3C 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  T<f_f^f]f[fZfYfX
  0310: 07 1F CB 2E 8B 1E A6 01 83 3E 23 03 00 75 04 89  .........>#..u..
  0320: 1E 21 03 1E 2E 8E 1E 19 03 9C FA 66 C7 06 08 01  .!.........f....
  0330: 65 F0 00 F0 C7 06 40 00 44 03 89 1E 42 00 C7 06  e.....@.D...B...
  0340: B4 01 44 03 89 1E B6 01 C7 06 7C 00 AB 6E 89 1E  ..D.......|..n..
  0350: 7E 00 C7 06 0C 01 BE 72 89 1E 0E 01 C7 06 A8 04  ~......r........
  0360: 9E 68 89 1E AA 04 2E 8E 1E 21 03 8B C3 A3 A0 68  .h.......!.....h
  0370: A3 B0 68 A3 C2 68 9D 1F C3 50 4D 49 44 44 03 4C  ..h..h...PMIDD.L
  0380: 55 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00 BB  U...............
  0390: 00 10 E8 3D 3B 66 C1 E8 10 A3 CA 01 BB 0B 10 E8  ...=;f..........
  03A0: 30 3B 8D 3E 9E 01 66 89 45 18 C3 00 E8 84 3B E8  0;.>..f.E.....;.
  03B0: 6A 03 75 1B 2E 3A 26 C0 01 75 05 E8 47 00 EB 11  j.u..:&..u..G...
  03C0: 80 FC 4F 75 05 E8 CA 50 EB 07 E8 6D 58 EB 02 B4  ..Ou...P...mX...
  03D0: 01 E8 82 3B CF E8 5B 3B E8 41 03 75 05 E8 25 00  ...;..[;.A.u..%.
  03E0: EB 02 B4 01 E8 6F 3B CB E8 48 3B E8 2E 03 75 0F  .....o;..H;...u.
  03F0: 80 FC 4F 75 05 E8 9A 50 EB 07 E8 3D 58 EB 02 B4  ..Ou...P...=X...
  0400: 01 E8 52 3B CB 1E 06 66 50 66 51 66 52 66 53 66  ..R;...fPfQfRfSf
  0410: 55 66 56 66 57 0E 1F 3C 00 75 2C 8A D1 C1 E9 08  UfVfW..<.u,.....
  0420: BE 60 1C E8 ED 1B E8 CD 0B BE 60 1C E8 58 05 0F  .`........`..X..
  0430: 84 A2 02 66 BB 60 1C 00 1C E8 36 1E BE 00 1C 32  ...f.`....6....2
  0440: C0 E8 CE 05 E9 96 02 3C 04 75 23 BB 0B 10 E8 81  .......<.u#.....
  0450: 3A 8D 36 A7 00 8A 3C 80 EF 30 B3 02 8B EC 89 5E  :.6...<..0.....^
  0460: 0C 89 46 04 66 C1 E8 10 89 46 00 E9 6F 02 3C 05  ..F.f....F..o.<.
  0470: 75 18 E8 97 04 E8 9A 38 8B EC 89 56 10 89 46 00  u......8...V..F.
  0480: 66 C1 E8 10 89 46 04 E9 53 02 3C 06 75 39 E8 89  f....F..S.<.u9..
  0490: 04 66 D1 E0 8B EC 89 46 14 BB 02 10 E8 33 3A 88  .f.....F.....3:.
  04A0: 46 18 E8 9B 04 66 0B C0 0F 84 29 02 66 89 46 0C  F....f....).f.F.
  04B0: BB 06 10 E8 1C 3A 33 C0 66 89 46 00 2E 8B 16 CA  .....:3.f.F.....
  04C0: 01 89 56 10 E9 16 02 3C 0B 75 24 0A DB 75 11 B9  ..V....<.u$..u..
  04D0: 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 FD 01  ........^..N....
  04E0: 8A C7 E8 2D 02 E8 99 13 0F 84 E9 01 E9 EE 01 3C  ...-...........<
  04F0: 17 75 2F E8 70 09 74 06 E8 F5 11 E8 F1 1D E8 F5  .u/.p.t.........
  0500: 0A E8 70 13 33 C9 50 24 03 0A C8 58 80 E4 03 C0  ..p.3.P$...X....
  0510: E4 04 0A CC 66 C1 E8 10 0A E8 8B EC 89 4E 14 E9  ....f........N..
  0520: BB 01 3C 18 75 6D 0A FF 75 18 E8 68 08 8B EC 89  ..<.um..u..h....
  0530: 46 0C 66 C1 E8 10 89 46 14 E8 00 0C 89 4E 10 E9  F.f....F.....N..
  0540: 9B 01 80 FF 0F 74 0E 23 C9 0F 84 88 01 E8 BD 08  .....t.#........
  0550: E8 13 09 75 2D BB 00 1C E8 9E 39 66 0B C0 0F 84  ...u-.....9f....
  0560: 73 01 E8 91 0A 0B C9 0F 84 6A 01 BE 00 1C E8 16  s........j......
  0570: 04 0F 84 60 01 BE 00 1C B0 40 E8 95 04 E8 15 08  ...`.....@......
  0580: EB 09 E8 77 09 E8 D7 1D E8 63 09 8B EC 89 46 0C  ...w.....c....F.
  0590: E9 4A 01 3C 19 75 09 E8 F5 08 E8 C9 1D E9 3D 01  .J.<.u........=.
  05A0: 3C 82 75 50 80 FB 01 75 0E 8B EC BE E4 06 89 76  <.uP...u.......v
  05B0: 00 8C 4E 10 E9 26 01 80 FB 05 75 19 0A FF 75 0B  ..N..&....u...u.
  05C0: E8 F3 05 8B EC 89 46 14 E9 12 01 E8 AE 05 0F 84  ......F.........
  05D0: FB 00 E9 08 01 80 FB 07 0F 85 F1 00 0A FF 75 0B  ..............u.
  05E0: E8 DE 07 8B EC 88 46 14 E9 F2 00 BE 00 1C E8 37  ......F........7
  05F0: 06 E9 E9 00 3C 8E 75 15 80 FF 01 74 0A 80 FF 02  ....<.u....t....
  0600: 0F 85 C9 00 80 C1 02 E8 12 06 E9 D0 00 3C 8F 0F  .............<..
  0610: 85 BA 00 80 FF 00 75 0B E8 92 08 8B EC 88 4E 14  ......u.......N.
  0620: E9 BA 00 80 FF 02 75 09 80 F1 01 E8 52 08 E9 AC  ......u.....R...
  0630: 00 80 FF 03 75 11 32 DB E8 E3 02 74 02 B3 01 8B  ....u.2....t....
  0640: EC 88 5E 0C E9 96 00 80 FF 05 75 06 E8 F1 08 E9  ..^.......u.....
  0650: 8B 00 80 FF 07 75 0A E8 F4 08 8B EC 88 5E 0C EB  .....u.......^..
  0660: 7C 80 FF 0F 75 02 EB 65 80 FF 10 75 02 EB 5E 80  |...u..e...u..^.
  0670: FF 11 75 08 E8 7E 00 E8 DE 1C EB 61 80 FF 14 75  ..u..~.....a...u
  0680: 02 EB 5A 80 FF 17 75 08 E8 66 02 E8 E6 1C EB 4D  ..Z...u..f.....M
  0690: 80 FF 83 75 02 EB 46 80 FF 85 75 0B E8 A1 08 E8  ...u..F...u.....
  06A0: 53 00 E8 AC 1C EB 36 80 FF 89 75 15 8B D1 8B DA  S.....6...u.....
  06B0: 50 E8 0D 04 8B C8 58 8B EC 89 5E 0C 89 4E 14 EB  P.....X...^..N..
  06C0: 1C 80 FF 94 75 07 8B EC 88 5E 0C EB 10 8B EC C6  ....u....^......
  06D0: 46 19 02 EB 0F 8B EC C6 46 19 01 EB 07 32 E4 8B  F.......F....2..
  06E0: EC 88 66 19 66 5F 66 5E 66 5D 66 5B 66 5A 66 59  ..f.f_f^f]f[fZfY
  06F0: 66 58 07 1F C3 E8 6E 07 75 17 33 C9 E8 4F 08 0A  fX....n.u.3..O..
  0700: DB 75 02 B1 02 33 D2 E8 03 07 B0 18 B7 0F E8 F4  .u...3..........
  0710: FC C3 51 8A C8 B8 01 00 D3 E0 59 C3 50 32 C0 53  ..Q.......Y.P2.S
  0720: BB 15 10 E8 AC 37 5B 3C FF 74 04 24 03 0A C0 58  .....7[<.t.$...X
  0730: C3 E8 B3 00 E8 88 09 F7 C1 02 00 74 0E 06 0E 07  ...........t....
  0740: 8D 3E E4 06 B8 02 00 E8 2C 08 07 C3 00 00 00 00  .>......,.......
  0750: 07 00 08 08 08 00 00 00 00 00 00 00 00 00 00 00  ................
  0760: 00 00 00 00 00 00 00 00 00 00 00 00 80 FB 01 75  ...............u
  0770: 04 E8 16 00 C3 80 FB 02 75 04 E8 5F 00 C3 80 FB  ........u.._....
  0780: 1B 75 04 E8 62 00 C3 0C 01 C3 56 51 8A C1 BE CF  .u..b.....VQ....
  0790: 07 E8 8F 00 8A F8 B8 08 4E B3 01 B1 01 E8 C6 06  ........N.......
  07A0: 75 02 32 C9 CD 15 59 3D 00 4E 75 2C 33 C0 33 D2  u.2...Y=.Nu,3.3.
  07B0: F6 C3 01 74 02 0C 02 F6 C3 02 74 02 0C 01 F6 C3  ...t......t.....
  07C0: 40 74 03 80 CA 01 81 E3 88 00 0B C3 8B D9 23 D8  @t............#.
  07D0: 74 06 8B C8 24 00 5E C3 0C 01 5E C3 B8 08 4E B3  t...$.^...^...N.
  07E0: 02 CD 15 3D 00 4E C3 C3 06 57 56 57 66 33 DB 8B  ...=.N...WVWf3..
  07F0: DF 66 33 C9 0E 59 66 C1 E1 04 66 03 CB BB 1B 00  .f3..Yf...f.....
  0800: B8 08 4E CD 15 5E 3D 00 4E 75 14 B9 20 00 66 26  ..N..^=.Nu.. .f&
  0810: 8B 05 66 89 04 83 C6 04 83 C7 04 E2 F1 33 C0 5E  ..f..........3.^
  0820: 5F 07 C3 51 B9 08 00 D0 E8 73 03 2E 0A 2C 46 FE  _..Q.....s...,F.
  0830: C9 75 F4 8A C5 59 C3 02 01 04 08 20 10 40 80 00  .u...Y..... .@..
  0840: 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42 E4 61  PQ...C.3.B...B.a
  0850: 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8 9F 30 E6 61  .....a.......0.a
  0860: 59 58 C3 00 1E 56 0E 1F 80 3E 02 00 80 76 05 C6  YX...V...>...v..
  0870: 06 02 00 80 8A 0E 02 00 C1 E1 09 FC C6 06 21 00  ..............!.
  0880: 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4 FE C4 88 26  .3.2...........&
  0890: 21 00 5E 1F C3 00 E8 A0 1A 75 05 8A C3 E8 5B 2F  !.^......u....[/
  08A0: E8 47 2F 75 03 E8 2B 31 E8 86 2F E8 54 2F E8 8A  .G/u..+1../.T/..
  08B0: 2C E8 3C 0E C3 32 C0 E8 BC 30 75 0C E8 CF 2F 0A  ,.<..2...0u.../.
  08C0: C0 74 03 B0 02 C3 B0 01 C3 66 51 8A CB 66 C1 E1  .t.......fQ..f..
  08D0: 1A BB 00 00 E8 CE 2A 66 25 FF FF FF E3 66 0B C1  ......*f%....f..
  08E0: E8 CC 2A 66 59 C3 BB 00 00 E8 B9 2A 66 C1 E8 1A  ..*fY......*f...
  08F0: C3 66 51 8A CB 66 C1 E1 1D BB 00 00 E8 A6 2A 66  .fQ..f........*f
  0900: 25 1F FF FF FF 66 0B C1 E8 A4 2A C3 BB 01 00 E8  %....f....*.....
  0910: 93 2A C3 BB 01 00 E8 96 2A C3 E8 6E 30 C3 66 50  .*......*..n0.fP
  0920: 53 BB 06 00 E8 7E 2A F6 C4 01 5B 66 58 C3 50 B8  S....~*...[fX.P.
  0930: 28 06 E8 FC 04 58 C3 50 B8 08 06 E8 F3 04 58 C3  (....X.P......X.
  0940: 53 BB 04 00 E8 72 2A 24 06 3C 04 75 10 BB 05 00  S....r*$.<.u....
  0950: E8 66 2A 66 0B C0 74 05 66 33 C0 EB 08 BB 04 00  .f*f..t.f3......
  0960: E8 56 2A 33 C0 5B C3 E8 F9 2F BB 0A 00 E8 3F 2A  .V*3.[.../....?*
  0970: C3 BB 0A 00 E8 2E 2A 66 8B C8 E8 E6 2F BB 0A 00  ......*f..../...
  0980: 66 2B C1 E8 29 2A C3 E8 29 00 0B C9 74 22 E8 DA  f+..)*..)...t"..
  0990: 07 E8 E7 18 66 51 66 8B C8 BB 07 00 E8 06 2A 66  ....fQf.......*f
  09A0: 25 00 FE 00 00 66 0B C1 E8 04 2A 66 59 0C 01 C3  %....f....*fY...
  09B0: 32 C0 C3 E8 45 04 0B C9 75 2C E8 7F 07 E8 73 19  2...E...u,....s.
  09C0: 75 12 8B D1 8B CB E8 60 2B 23 C2 74 07 E8 62 2B  u......`+#.t..b+
  09D0: 33 D2 EB 0F E8 65 07 E8 3D 19 74 07 33 D2 E8 48  3....e..=.t.3..H
  09E0: 2B 8B C8 E8 27 04 0B D1 E8 51 07 23 CA 66 C1 E6  +...'....Q.#.f..
  09F0: 10 33 F6 E8 A1 0C 74 15 E8 D8 0D 85 C1 74 F4 51  .3....t......t.Q
  0A00: E8 41 14 59 75 ED E8 CA 0D 33 C8 EB E6 66 C1 EE  .A.Yu....3...f..
  0A10: 10 C3 A8 10 75 5A E8 74 18 66 C1 E6 10 33 F6 E8  ....uZ.t.f...3..
  0A20: 75 0C 74 24 E8 45 0C 74 0B E8 EC 0D 24 03 3C 03  u.t$.E.t....$.<.
  0A30: 75 ED EB 0A E8 E1 0D A8 01 74 E4 E8 76 08 E8 17  u........t..v...
  0A40: 1A B5 00 E8 D9 0D EB D7 E8 7F 01 32 C9 33 F6 E8  ...........2.3..
  0A50: 89 0C E8 8D 19 E8 12 2E FE C1 38 C1 72 F1 66 C1  ..........8.r.f.
  0A60: EE 10 E8 21 18 A8 20 75 57 A8 40 75 03 E8 B9 1F  ...!.. uW.@u....
  0A70: E8 08 18 0A C0 75 19 32 C9 33 F6 E8 5D 0C 0B F6  .....u.2.3..]...
  0A80: 74 05 B5 01 E8 57 20 E8 E0 2D FE C1 38 C1 72 EB  t....W ..-..8.r.
  0A90: 33 F6 E8 F7 0B 74 26 E8 5E 0D E8 8A 28 75 14 E8  3....t&.^...(u..
  0AA0: AC 04 0A DB 74 0D E8 0B 08 E8 AC 19 B5 00 E8 6E  ....t..........n
  0AB0: 0D EB DF E8 84 19 B5 01 E8 64 0D EB D5 E8 17 01  .........d......
  0AC0: C3 E8 65 2A C3 E8 27 18 33 C9 33 D2 E8 3E 03 66  ..e*..'.3.3..>.f
  0AD0: 33 D2 66 33 C0 E8 7F 0D E8 53 00 33 F6 E8 B7 0B  3.f3.....S.3....
  0AE0: 74 10 E8 13 0D E8 3B 28 74 03 E8 E3 19 E8 10 1A  t.....;(t.......
  0AF0: EB EB E8 2D 18 74 02 B3 01 E8 E2 02 E8 F4 2C E8  ...-.t........,.
  0B00: 27 2A 0B C0 C3 E8 E8 0B E8 E4 17 66 33 C0 66 BA  '*.........f3.f.
  0B10: 00 F0 00 F0 E8 8D 02 51 B1 01 E8 63 03 59 33 F6  .......Q...c.Y3.
  0B20: E8 74 0B 74 05 E8 A8 19 EB F6 E8 0C 1F C3 B8 02  .t.t............
  0B30: 00 E8 45 0B 74 1D B1 07 E8 76 25 E8 77 0D A8 04  ..E.t....v%.w...
  0B40: 75 12 E8 57 31 83 3D 00 75 0A E8 DC 29 83 E0 FD  u..W1.=.u...)...
  0B50: E8 DF 29 C3 66 BA FF FF FB FF 66 B8 00 00 04 00  ..).f.....f.....
  0B60: E8 F4 0C E8 75 0F B1 FF E8 11 00 E8 95 30 8A C8  ....u........0..
  0B70: BB 04 00 E8 2F 28 8A E1 E8 34 28 C3 E8 44 28 74  ..../(...4(..D(t
  0B80: 34 38 E1 76 04 8A CC EB 06 38 C1 73 02 8A C8 BB  48.v.....8.s....
  0B90: 02 00 E8 10 28 8A E1 E8 15 28 BB 02 00 E8 05 28  ....(....(.....(
  0BA0: 66 C1 E8 18 A8 20 75 08 B1 04 E8 04 25 0C 01 C3  f.... u.....%...
  0BB0: E8 C8 17 0C 01 C3 51 E8 09 28 74 0C 8A CC BB 02  ......Q..(t.....
  0BC0: 00 E8 E1 27 8A C4 8A E1 59 C3 33 F6 E8 BD 0A 74  ...'....Y.3....t
  0BD0: 05 E8 F0 17 EB F6 C3 33 F6 E8 B0 0A 74 05 E8 F2  .......3....t...
  0BE0: 17 EB F6 C3 E8 8F 2D 75 1B 80 F9 01 75 17 33 F6  ......-u....u.3.
  0BF0: E8 99 0A 74 0C 51 E8 41 18 B5 01 E8 21 0C 59 EB  ...t.Q.A....!.Y.
  0C00: EF E8 D3 FF C3 E8 C2 FF 33 F6 E8 7F 0A 74 0C 51  ........3....t.Q
  0C10: E8 BD 18 B5 00 E8 07 0C 59 EB EF C3 B8 02 00 E8  ........Y.......
  0C20: 57 0A 74 03 E8 8A 24 C3 8A D9 E8 B1 01 E8 36 02  W.t...$.......6.
  0C30: 75 17 8B FE B8 02 00 E8 3F 0A 74 10 E8 2D 0A 74  u.......?.t..-.t
  0C40: 0B E8 98 07 E8 2A 1F EB 03 E8 36 17 C3 53 56 E8  .....*....6..SV.
  0C50: 14 02 74 05 E8 5F 1E EB 24 E8 40 16 8B C8 66 C1  ..t.._..$.@...f.
  0C60: E8 10 8B D0 E8 14 16 0A C0 75 0A 81 F9 40 01 77  .........u...@.w
  0C70: 0C D1 E1 EB 08 81 FA F0 00 77 02 D1 E2 5E 5B C3  .........w...^[.
  0C80: E8 33 1E 8B C8 66 C1 E8 10 8B D0 C3 8A C3 24 80  .3...f........$.
  0C90: E8 FA 15 32 C9 B5 10 E8 D5 1D E8 CD 2B FE C1 38  ...2........+..8
  0CA0: C1 72 F2 C3 E8 73 15 3B C1 7C 3A 8B C1 E8 B3 15  .r...s.;.|:.....
  0CB0: E8 50 1F 8B C8 51 E8 E3 15 E8 A7 15 59 E8 43 1F  .P...Q......Y.C.
  0CC0: 3B C8 72 02 8B C1 8D 5C 04 E8 B0 31 32 C9 B5 0F  ;.r....\...12...
  0CD0: E8 9C 1D E8 94 2B FE C1 38 C1 72 F2 8D 5C 04 E8  .....+..8.r..\..
  0CE0: 17 32 0B C0 C3 33 C0 C3 52 E8 9C 00 8A C2 8B D1  .2...3..R.......
  0CF0: 66 C1 E2 10 8A D0 32 C0 B9 00 02 E8 E4 1E 66 C1  f.....2.......f.
  0D00: EA 10 8B CA 5A E8 80 00 E8 EE 31 66 C1 E8 02 0A  ....Z.....1f....
  0D10: F6 75 04 66 C1 E8 02 67 26 88 07 66 C1 E8 0A 67  .u.f...g&..f...g
  0D20: 26 88 47 01 66 C1 E8 0A 67 26 88 47 02 66 83 C7  &.G.f...g&.G.f..
  0D30: 04 83 C3 04 E2 D2 C3 51 E8 4D 00 53 67 26 8A 47  .......Q.M.Sg&.G
  0D40: 02 66 C1 E0 0A 67 26 8A 47 01 66 C1 E0 0A 67 26  .f...g&.G.f...g&
  0D50: 8A 07 66 C1 E0 02 0A F6 75 04 66 C1 E0 02 E8 03  ..f.....u.f.....
  0D60: 31 66 83 C7 04 83 C3 04 E2 D2 5B 59 8A C2 8B D1  1f........[Y....
  0D70: 66 C1 E2 10 8A D0 B9 00 03 53 E8 65 1E 5B E8 E9  f........S.e.[..
  0D80: 2A FE C1 38 C1 72 F2 C3 BB 00 18 33 C0 8A C2 C1  *..8.r.....3....
  0D90: E0 02 03 D8 C3 53 BB 03 00 E8 09 26 66 25 FF 0F  .....S.....&f%..
  0DA0: FF 0F 5B C3 53 66 50 66 51 66 8B C8 BB 03 00 E8  ..[.SfPfQf......
  0DB0: F3 25 66 23 C2 66 0B C1 E8 F4 25 66 59 66 58 5B  .%f#.f....%fYfX[
  0DC0: C3 53 66 50 BB 06 00 E8 DB 25 8A DC 66 58 8A C3  .SfP.....%..fX..
  0DD0: 80 E3 20 D0 EB 24 10 C0 E8 04 0A C3 5B C3 B8 2C  .. ..$......[..,
  0DE0: 06 F6 C3 01 75 03 B8 0C 06 E8 45 00 B8 2D 06 F6  ....u.....E..-..
  0DF0: C3 10 75 03 B8 0D 06 E8 37 00 C3 BB 05 00 E8 A4  ..u.....7.......
  0E00: 25 25 FF 0F 8B C8 66 C1 E0 10 8B D0 C3 E8 19 27  %%....f........'
  0E10: 23 C8 81 E2 15 01 23 D1 66 C1 E2 10 8B D1 BB 05  #.....#.f.......
  0E20: 00 E8 81 25 66 25 00 F0 EA FE 66 0B C2 E8 7F 25  ...%f%....f....%
  0E30: C3 66 50 53 51 66 52 66 33 D2 33 DB 8A DC 8A E8  .fPSQfRf3.3.....
  0E40: 8A C8 80 E1 1F 66 BA 01 00 00 00 66 D3 E2 E8 54  .....f.....f...T
  0E50: 25 66 0B C2 F6 C5 20 75 03 66 33 C2 E8 50 25 66  %f.... u.f3..P%f
  0E60: 5A 59 5B 66 58 C3 66 50 53 BB 06 00 E8 36 25 A8  ZY[fX.fPS....6%.
  0E70: 10 75 09 BB F0 16 E8 80 30 3D 5A A5 5B 66 58 C3  .u......0=Z.[fX.
  0E80: B8 04 06 80 F1 01 C0 E1 05 0A C1 E8 A3 FF C3 53  ...............S
  0E90: 66 50 BB F8 16 E8 61 30 8A C1 E8 C7 2F 66 58 5B  fP....a0..../fX[
  0EA0: C3 53 BB F8 16 E8 51 30 83 E0 01 5B C3 BB 06 00  .S....Q0...[....
  0EB0: E8 F2 24 8A C8 80 E1 10 D0 E9 A8 20 74 05 80 C9  ..$........ t...
  0EC0: 30 EB 03 80 C9 20 BB 02 00 E8 D9 24 66 C1 E8 1E  0.... .....$f...
  0ED0: 0A C8 BB 06 00 E8 CD 24 66 C1 E8 18 24 20 D0 E0  .......$f...$ ..
  0EE0: 0A C8 C3 66 50 E8 AD FE A9 EA 0E 66 58 C3 BB 06  ...fP......fX...
  0EF0: 00 E8 B1 24 66 C1 E8 10 25 FF 0F C3 BB 06 00 E8  ...$f...%.......
  0F00: A3 24 66 25 FF FF 00 F0 66 C1 E2 10 66 0B C2 E8  .$f%....f...f...
  0F10: 9D 24 C3 53 66 50 BB 07 00 E8 89 24 F6 C4 01 66  .$.SfP.....$...f
  0F20: 58 B0 06 74 02 B0 08 5B C3 53 BB 07 00 E8 75 24  X..t...[.S....u$
  0F30: 80 E4 FE 80 FD 06 74 03 80 CC 01 E8 71 24 5B C3  ......t.....q$[.
  0F40: 53 B8 06 06 C0 E3 05 0A C3 E8 E5 FE 5B C3 66 50  S...........[.fP
  0F50: E8 DA 13 75 03 E8 E8 FF BB 06 00 E8 47 24 24 40  ...u........G$$@
  0F60: C0 E8 06 8A D8 66 58 C3 53 B8 27 06 C0 E3 05 0A  .....fX.S.'.....
  0F70: C3 E8 BD FE 5B C3 57 66 50 66 33 C0 B9 08 00 FC  ....[.WfPf3.....
  0F80: F3 66 AB 66 58 5F E8 B3 01 0B C0 75 09 E8 1D 07  .f.fX_.....u....
  0F90: 74 3C 85 C1 74 F7 E8 E0 06 8D 9C 6A 01 E8 59 2F  t<..t......j..Y/
  0FA0: 26 89 05 8D 9C 6E 01 E8 4F 2F 26 89 45 02 8D 9C  &....n..O/&.E...
  0FB0: B5 02 E8 44 2F 02 C0 04 04 26 88 45 06 26 88 45  ...D/....&.E.&.E
  0FC0: 07 26 88 45 08 B0 07 26 88 45 04 0A C0 C3 32 C0  .&.E...&.E....2.
  0FD0: C3 B3 81 E8 04 2D 75 04 83 C8 01 C3 33 C0 C3 66  .....-u.....3..f
  0FE0: 50 53 51 52 56 57 E8 7D FE 74 03 E8 02 07 5F 5E  PSQRVW.}.t...._^
  0FF0: 5A 59 5B 66 58 C3 33 C9 E8 7B 29 0F 85 AE 00 66  ZY[fX.3..{)....f
  1000: BA FC FC 0C FF 66 33 C0 E8 4C 08 33 F6 E8 87 06  .....f3..L.3....
  1010: 74 7E E8 BE 07 A9 C8 0E 74 57 E8 98 08 A8 04 74  t~......tW.....t
  1020: 38 B8 11 00 E8 ED 06 74 2B 8D 5C 28 E8 AE 09 3C  8......t+.\(...<
  1030: 02 74 21 3C 01 74 11 56 8B F7 E8 0E 15 E8 93 07  .t!<.t.V........
  1040: E8 7C 00 5E 85 C1 74 0C E8 63 00 56 8B F7 E8 B8  .|.^..t..c.V....
  1050: 00 5E EB B9 E8 B2 00 EB B4 A8 08 75 F7 B8 11 00  .^.........u....
  1060: E8 B1 06 74 A8 E8 46 00 56 8B F7 E8 DD 14 5E EB  ...t..F.V.....^.
  1070: 9C A9 11 00 74 97 B8 C8 0E E8 98 06 75 8F E8 34  ....t.......u..4
  1080: 08 A8 02 74 05 E8 81 00 EB 83 E8 BE 14 E9 7D FF  ...t..........}.
  1090: E8 2C 00 75 03 E8 A4 00 33 F6 E8 FA 05 74 0E E8  .,.u....3....t..
  10A0: 31 07 85 C1 74 F4 51 E8 46 09 59 EB ED C3 8D 5D  1...t.Q.F.Y....]
  10B0: 28 66 C1 E3 10 8D 5C 28 B9 49 00 E8 03 28 C3 66  (f....\(.I...(.f
  10C0: 50 53 52 56 33 C9 33 D2 8D 36 98 10 E8 A5 07 A8  PSRV3.3..6......
  10D0: 03 74 03 83 CA 01 66 C1 E8 10 8A 0C 80 F9 FF 74  .t....f........t
  10E0: 15 66 A9 01 00 00 00 74 07 BB 01 00 D3 E3 0B D3  .f.....t........
  10F0: 66 D1 E8 46 EB E4 8B CA 0B C9 5E 5A 5B 66 58 C3  f..F......^Z[fX.
  1100: 03 07 01 05 06 09 0A 0B FF 66 50 53 51 E8 C3 06  .........fPSQ...
  1110: 0F BC D8 81 C3 C8 10 8A 0F 66 B8 01 00 00 00 66  .........f.....f
  1120: D3 E0 66 BA FF FF FF FF E8 2C 07 59 5B 66 58 C3  ..f......,.Y[fX.
  1130: 01 12 0B 10 09 13 14 11 0C 15 16 17 50 53 52 E8  ............PSR.
  1140: 7D FF 75 13 B9 01 00 E8 DF 23 23 C8 75 19 33 C0  }.u......##.u.3.
  1150: E8 5A 05 8B C8 EB 10 83 F9 02 74 0B E8 EF FD 80  .Z........t.....
  1160: FB 01 75 03 83 E1 FD 5A 5B 58 C3 56 83 EC 04 8B  ..u....Z[X.V....
  1170: EC 66 33 C0 66 89 46 00 66 BA 00 F0 00 F0 E8 23  .f3.f.F.f......#
  1180: FC 66 C1 E6 10 E8 25 05 0B C0 74 1E 85 C1 74 F5  .f....%...t...t.
  1190: 55 E8 56 00 5D 74 04 33 C8 EB EA E8 AA 06 66 3B  U.V.]t.3......f;
  11A0: 56 00 76 E1 66 89 56 00 EB DB E8 E8 FB 74 07 66  V.v.f.V......t.f
  11B0: 8B 46 00 E8 05 00 83 C4 04 5E C3 33 F6 66 50 E8  .F.......^.3.fP.
  11C0: CA 04 66 58 8D 9C D8 02 E8 99 2C 66 8B D0 E8 C4  ..fX......,f....
  11D0: FB E8 42 1A 8D 9C 1C 03 E8 1E 2D 38 D0 74 0A 8A  ..B.......-8.t..
  11E0: C2 E8 80 2C B0 02 E8 4E 06 C3 50 51 E8 8A 04 32  ...,...N..PQ...2
  11F0: C0 E8 43 06 E8 FF 03 E8 BA 00 8D 9C 40 03 E8 F8  ..C.........@...
  1200: 2C 38 E8 74 0A 8A C5 E8 5A 2C B0 02 E8 28 06 E8  ,8.t....Z,...(..
  1210: 3B 01 75 7F E8 96 01 75 7A E8 B7 00 74 75 E8 02  ;.u....uz...tu..
  1220: 01 74 70 8D 9C 4C 01 E8 CF 2C 8B C8 8B D3 8D 9C  .tp..L...,......
  1230: 00 03 E8 C4 2C 3B C1 74 05 B0 02 E8 F9 05 E8 A9  ....,;.t........
  1240: 0B 8D 9C 00 03 E8 CA 19 8D 9C D8 02 E8 15 2C 66  ..............,f
  1250: C1 CE 10 8B FE 66 C1 CE 10 E8 80 01 E8 CB 01 E8  .....f..........
  1260: 7A 05 8A E9 8D 9C DC 02 32 C9 E8 3B 2C E8 63 05  z.......2..;,.c.
  1270: 66 25 FF 0F 00 00 E8 DF 04 80 F9 01 75 04 66 C1  f%..........u.f.
  1280: E0 10 59 58 66 BA FF FF FF FF 66 33 D0 E8 14 FB  ..YXf.....f3....
  1290: 33 D2 C3 E8 05 00 0C 01 59 58 C3 8D 9C 4C 03 E8  3.......YX...L..
  12A0: 57 2C 8A C4 E8 BD 2B 8D 9C D4 02 E8 4B 2C 8A C4  W,....+.....K,..
  12B0: E8 B1 2B C3 53 66 50 8D 9C 4C 03 E8 3B 2C 8A E0  ..+.SfP..L..;,..
  12C0: E8 A1 2B 8D 9C D4 02 E8 2F 2C 8A E0 E8 95 2B 66  ..+...../,....+f
  12D0: 58 5B C3 56 83 EC 06 8B EC E8 9C 04 89 56 00 E8  X[.V.........V..
  12E0: A0 1C 89 5E 02 E8 10 05 89 56 04 33 F6 E8 9C 03  ...^.....V.3....
  12F0: 74 27 E8 83 04 3B 56 00 74 1B E8 FB 04 E8 34 20  t'...;V.t.....4 
  1300: 74 08 8B 56 04 E8 2C 20 75 E3 E8 6B 04 E8 72 1C  t..V.., u..k..r.
  1310: 3B 5E 02 75 D8 33 DB EB 03 80 CB 01 83 C4 06 0A  ;^.u.3..........
  1320: DB 5E C3 E8 52 04 E8 0D 04 8A DD E8 A9 1C 8B C1  .^..R...........
  1330: 80 FD FF 74 0A E8 20 04 80 F9 00 74 02 8A C4 8A  ...t.. ....t....
  1340: E8 8D 9C 3C 03 32 C9 E8 5E 2B 0B DB C3 83 EC 08  ...<.2..^+......
  1350: 8B EC E8 23 04 E8 DE 03 E8 96 1B 56 8A 6E 00 E8  ...#.......V.n..
  1360: 36 00 0B F6 5E 74 14 F6 46 01 01 75 0E 83 C5 02  6...^t..F..u....
  1370: FE C9 0A C9 75 E5 80 CB 01 EB 17 8D 9C 4C 03 E8  ....u........L..
  1380: 77 2B 38 C5 74 0A 8A C5 E8 D9 2A B0 02 E8 A7 04  w+8.t.....*.....
  1390: 32 DB 83 C4 08 0A DB C3 51 33 F6 E8 EE 02 0B F6  2.......Q3......
  13A0: 74 07 E8 37 04 38 E9 75 F2 0B F6 59 C3 33 C9 56  t..7.8.u...Y.3.V
  13B0: E8 28 03 0B F6 5E 74 0C FE C1 E8 AD 24 38 C1 75  .(...^t.....$8.u
  13C0: EE 0C 01 C3 8D 9C D4 02 E8 2E 2B 38 C8 74 0A 8A  ..........+8.t..
  13D0: C1 E8 90 2A B0 02 E8 5E 04 32 C0 C3 E8 0A 00 8D  ...*...^.2......
  13E0: 9C D0 02 32 C9 E8 C0 2A C3 B5 00 8D 1D E8 09 2B  ...2...*.......+
  13F0: 66 8B D0 8D 9C 02 03 E8 FF 2A 0B C0 74 2B 51 8B  f........*..t+Q.
  1400: C8 8D 9C 06 03 E8 F1 2A 66 C1 E0 10 8B C1 59 66  .......*f.....Yf
  1410: 3B C2 75 04 B5 00 EB 11 B5 02 E8 DB 03 E8 07 1F  ;.u.............
  1420: 75 07 E8 9C F9 75 02 B5 01 C3 E8 87 03 8D 9C 40  u....u.........@
  1430: 03 B1 03 E8 72 2A E8 2A 07 8D 9C 40 03 B1 02 E8  ....r*.*...@....
  1440: 66 2A E8 F1 02 80 FD 00 75 0E E8 85 00 E8 B5 00  f*......u.......
  1450: E8 EE 00 E8 D4 03 EB 38 E8 AA 03 E8 CC 03 66 52  .......8......fR
  1460: E8 20 03 0B D2 74 07 E8 57 1B 66 5A EB 22 E8 87  . ...t..W.fZ."..
  1470: 03 E8 E3 1E 66 5A 51 E8 BC 02 80 FD 02 59 75 10  ....fZQ......Yu.
  1480: B5 04 66 81 FA 74 40 00 00 76 05 B5 08 66 D1 EA  ..f..t@..v...f..
  1490: 8D 9C 54 03 66 8B C2 E8 CA 29 8D 9C 40 03 E8 58  ..T.f....)..@..X
  14A0: 2A 8A E5 E8 BE 29 E8 1D 01 8D 9C 48 03 32 C9 E8  *....).....H.2..
  14B0: F6 29 E8 C3 02 E8 7E 02 E8 09 1B 8D 9C 58 03 32  .)....~......X.2
  14C0: C9 E8 E4 29 E8 B1 02 E8 6C 02 8D 9C 60 03 E8 65  ...)....l...`..e
  14D0: 1A C3 53 8D 9C 29 01 E8 1F 2A 66 33 D2 0A C0 75  ..S..)...*f3...u
  14E0: 05 BA 48 3F 5B C3 8A D0 66 B8 8C 0A 00 00 F7 E2  ..H?[...f.......
  14F0: 66 8B F8 E8 82 02 B3 00 E8 75 19 66 3B D7 76 03  f........u.f;.v.
  1500: 66 8B D7 5B C3 B7 01 53 8D 9C 42 03 E8 EA 29 8A  f..[...S..B...).
  1510: C8 5B 66 52 E8 83 00 E8 EB 02 66 3B D1 66 5A 76  .[fR......f;.fZv
  1520: 09 D0 E7 E8 07 00 38 EF 72 DD 8A EF C3 53 8D 9C  ......8.r....S..
  1530: 2A 01 E8 C4 29 24 0F 8A E8 0A ED 75 02 B5 01 5B  *...)$.....u...[
  1540: C3 51 83 EC 08 8B EC 66 C7 46 00 48 3F 78 69 66  .Q.....f.F.H?xif
  1550: C7 46 04 F0 D2 00 00 E8 29 02 0B D2 74 03 E8 7F  .F......)...t...
  1560: 1A 8A FD 53 8D 9C 42 03 E8 8E 29 8A C8 5B E8 61  ...S..B...)..[.a
  1570: FF 66 33 C0 8B 46 00 66 3B C2 73 19 66 8B D0 E8  .f3..F.f;.s.f...
  1580: 18 00 E8 80 02 66 3B D1 72 05 83 C5 02 EB D4 66  .....f;.r......f
  1590: 33 D2 8B 56 00 83 C4 08 59 C3 66 52 52 32 ED 83  3..V....Y.fRR2..
  15A0: C1 02 B8 06 00 F7 E1 66 33 C9 8B C8 5A 51 66 33  .......f3...ZQf3
  15B0: C0 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59 66 F7 F1  .....f..f...Yf..
  15C0: 66 8B C8 66 5A C3 E8 BA 01 0B D2 74 0B E8 16 00  f..fZ......t....
  15D0: 0A ED 75 11 E8 FC 18 C3 B5 00 E8 1B 02 E8 43 1D  ..u...........C.
  15E0: 75 03 E8 01 00 C3 B5 00 8D 9C 31 01 E8 0A 29 A8  u.........1...).
  15F0: 01 74 02 B5 01 C3 53 E8 89 01 66 C1 E2 10 E8 77  .t....S...f....w
  1600: 01 8D 9C B8 02 E8 F1 28 8A E8 E8 95 18 8A EB 5B  .......(.......[
  1610: C3 57 53 53 E8 DF FF E8 5E 01 5B E8 73 19 74 49  .WSS....^.[.s.tI
  1620: 80 FD 00 75 24 53 E8 A9 FE E8 37 05 8A CD E8 FC  ...u$S....7.....
  1630: FE 8A FD E8 64 FF 5B E8 BF 28 66 25 FF FF 00 00  ....d.[..(f%....
  1640: 66 3B C8 73 21 32 DB EB 20 80 FD 02 75 18 53 E8  f;.s!2.. ...u.S.
  1650: A6 01 E8 DF 1C 5B 74 0E 8D 1D E8 9C 28 3D 74 40  .....[t.....(=t@
  1660: 76 04 32 DB EB 03 80 CB 01 5B 5F C3 53 E8 63 01  v.2......[_.S.c.
  1670: 8B D8 E8 20 F7 85 C3 5B C3 53 8B F0 E8 AA 1E 23  ... ...[.S.....#
  1680: F0 74 07 8B C6 E8 4B 1D 8B F3 5B C3 E8 08 00 74  .t....K...[....t
  1690: 05 E8 D8 FF 74 F6 C3 33 C0 0B F6 74 03 E8 33 01  ....t..3...t..3.
  16A0: 33 F6 E8 08 00 74 03 E8 CF FF 0B F6 C3 57 53 E8  3....t.......WS.
  16B0: DD 20 0B C0 74 09 8B 1D 83 C7 02 3B C3 75 F7 8B  . ..t......;.u..
  16C0: 1D 83 FB FF 74 0E 83 C7 02 E8 5D 1E 85 D8 74 EF  ....t.....]...t.
  16D0: 8B C3 EB 02 33 C0 0B C0 5B 5F C3 51 33 F6 8A E9  ....3...[_.Q3...
  16E0: E8 A9 FF 74 07 E8 70 00 38 E9 75 F4 0B F6 59 C3  ...t..p.8.u...Y.
  16F0: 33 C0 E8 B8 FF 74 13 E8 7F FF 8B DE B9 FB 00 E8  3....t..........
  1700: 7A 21 83 C6 08 E8 A4 1D EB E8 BB F0 16 B8 5A A5  z!............Z.
  1710: E8 69 27 C3 56 51 E8 DF 00 8B CA 8B FE 33 F6 E8  .i'.VQ.......3..
  1720: 75 FF 74 0B 3B FE 74 F7 E8 CD 00 3B D1 75 F0 8B  u.t.;.t....;.u..
  1730: FE 0B FF 59 5E C3 53 66 50 8D 9C 40 03 E8 B9 27  ...Y^.SfP..@...'
  1740: 8A E8 66 58 5B C3 8D 9C 69 03 E8 AC 27 C3 8D 9C  ..fX[...i...'...
  1750: 64 03 E8 A4 27 0B C0 C3 53 66 50 8D 9C D4 02 E8  d...'...SfP.....
  1760: 97 27 8A C8 66 58 5B C3 53 66 50 8D 9C D5 02 E8  .'..fX[.SfP.....
  1770: 87 27 8A C8 66 58 5B C3 53 8D 5C 14 E8 7A 27 8B  .'..fX[.S.\..z'.
  1780: D0 5B C3 53 66 50 8D 5C 16 E8 6D 27 8B D0 66 58  .[.SfP.\..m'..fX
  1790: 5B C3 53 66 50 8D 9C 50 03 E8 5D 27 66 8B D0 66  [.SfP..P..]'f..f
  17A0: 58 5B C3 53 66 50 8D 9C 54 03 E8 4C 27 66 8B D0  X[.SfP..T..L'f..
  17B0: 66 58 5B C3 53 66 50 8D 5C 10 E8 3C 27 8B C8 66  fX[.SfP.\..<'..f
  17C0: 58 5B C3 66 50 53 8D 9C 41 03 E8 2C 27 5B 8A D8  X[.fPS..A..,'[..
  17D0: 66 58 C3 53 8D 5C 08 E8 1F 27 5B C3 53 50 8D 9C  fX.S.\...'[.SP..
  17E0: 4C 03 E8 14 27 8A C8 58 5B C3 53 50 8D 9C 4D 03  L...'..X[.SP..M.
  17F0: E8 06 27 8A C8 58 5B C3 53 50 8D 5C 0C E8 F9 26  ..'..X[.SP.\...&
  1800: 8B D0 58 5B C3 53 66 50 8D 9C 00 03 E8 EA 26 66  ..X[.SfP......&f
  1810: 33 D2 8B D0 66 58 5B C3 8D 5C 04 E8 DB 26 C3 51  3...fX[..\...&.Q
  1820: 8D 5C 04 32 C9 E8 80 26 59 C3 8D 9C 50 03 E8 C8  .\.2...&Y...P...
  1830: 26 8B C2 E8 2E 26 C3 53 51 8A E8 E8 DA FF 24 FD  &....&.SQ.....$.
  1840: 0A E8 E8 DA FF 59 5B C3 66 50 8D 9C D8 02 E8 A8  .....Y[.fP......
  1850: 26 66 8B D0 66 58 C3 53 66 50 66 51 66 8B C8 BB  &f..fX.SfPfQf...
  1860: 00 00 E8 40 1B 66 23 C2 66 0B C1 E8 41 1B 66 59  ...@.f#.f...A.fY
  1870: 66 58 5B C3 BB 00 00 E8 2B 1B 66 25 03 03 FF 00  fX[.....+.f%....
  1880: C3 57 0B C0 75 10 33 F6 E8 0C FE 74 26 E8 25 00  .W..u.3....t&.%.
  1890: A8 04 74 F4 EB 13 8B C8 E8 8E 1C 23 C1 74 14 E8  ..t........#.t..
  18A0: D7 FD E8 10 00 A8 04 74 0A 5F 8D 5C 28 E8 8B 05  .......t._.\(...
  18B0: 0B F6 C3 5F C3 E8 FC FE 0A C9 74 72 E8 39 FF E8  ..._......tr.9..
  18C0: 6E 1A 74 30 0A ED 74 10 8A CD B5 02 E8 78 1F B1  n.t0..t......x..
  18D0: 02 8D 9C 48 01 E8 D0 25 E8 92 02 A8 04 74 15 8D  ...H...%.....t..
  18E0: 5C 28 E8 A1 00 74 0D E8 0E FF E8 3A 1A 74 3F 80  \(...t.....:.t?.
  18F0: FD 02 74 3A 8D 5C 28 E8 83 00 E8 62 0C 33 C9 50  ..t:.\(....b.3.P
  1900: 8D 9C 28 01 E8 F2 25 66 0B C0 74 03 B9 00 08 58  ..(...%f..t....X
  1910: 0A C0 75 13 8D 5C 28 E8 8A 00 75 0B 80 CD 02 E8  ..u..\(...u.....
  1920: 64 00 74 03 80 CD 04 8D 9C 48 01 E8 7A 25 E8 C7  d.t......H..z%..
  1930: FE E8 F3 19 75 43 E8 E5 22 0B FF 74 3C 66 2E 81  ....uC.."..t<f..
  1940: 3D 00 FF FF FF 74 0F 06 0E 07 8D 5C 28 E8 EB 04  =....t.....\(...
  1950: 07 E8 EB 09 75 23 8D 5C 28 56 8B F7 B9 20 00 53  ....u#.\(V... .S
  1960: E8 77 1F 5B 5E E8 1E 00 74 0F 33 C9 8D 9C 48 01  .w.[^...t.3...H.
  1970: E8 4D 25 80 CD 06 E8 2F 25 E8 F1 01 C3 51 B9 49  .M%..../%....Q.I
  1980: 00 E8 F8 1E 59 C3 51 E8 1A 00 75 14 E8 AF 01 3C  ....Y.Q...u....<
  1990: 01 75 0D B9 20 00 E8 27 00 75 05 80 C9 01 EB 02  .u.. ..'.u......
  19A0: 33 C9 59 C3 53 E8 51 25 66 3D 00 FF FF FF 75 0E  3.Y.S.Q%f=....u.
  19B0: 83 C3 04 E8 43 25 66 3D FF FF FF 00 75 00 5B C3  ....C%f=....u.[.
  19C0: 50 52 32 D2 E8 32 25 02 D0 02 D4 66 C1 E8 10 02  PR2..2%....f....
  19D0: D0 02 D4 83 C3 04 E2 EC 0A D2 5A 58 C3 53 83 C3  ..........ZX.S..
  19E0: 14 E8 15 25 A8 80 74 04 B0 02 EB 02 B0 01 5B C3  ...%..t.......[.
  19F0: 8D 9C 4C 01 E8 1F 01 E8 73 01 B5 13 A8 08 75 0C  ..L.....s.....u.
  1A00: E8 F5 FD 8A EA 80 FD 13 75 02 B5 03 8D 9C B8 02  ........u.......
  1A10: 66 33 C0 8A C5 E8 4C 24 E8 B8 FD A9 11 00 74 37  f3....L$......t7
  1A20: B5 01 E8 22 01 E8 45 01 A8 04 75 17 55 BD 00 00  ..."..E...u.U...
  1A30: B8 61 40 E8 F0 02 B8 45 40 E8 EA 02 5D B5 02 E8  .a@....E@...]...
  1A40: 8A 00 C3 E8 2F 01 B5 02 8D 5C 28 E8 DD 00 75 02  ..../....\(...u.
  1A50: B5 01 E8 77 00 EB 67 A9 C8 0E 74 3E E8 0E 01 A8  ...w..g...t>....
  1A60: 08 74 08 8D 5C 28 E8 B4 00 74 B5 B5 02 E8 D7 00  .t..\(...t......
  1A70: E8 FA 00 A8 04 74 0B 8D 5C 28 E8 F8 00 E8 F8 02  .....t..\(......
  1A80: EB 0A 8D 9C 68 01 B8 3C 6A E8 7A 05 E8 D4 00 80  ....h..<j.z.....
  1A90: FD 00 75 37 B5 02 E8 C0 00 C3 A9 22 00 74 2C B5  ..u7.......".t,.
  1AA0: 04 E8 A3 00 8D 9C 68 01 56 E8 F0 21 8B F7 E8 58  ......h.V..!...X
  1AB0: 03 5E E8 98 21 E8 A1 00 8D 5C 28 E8 BE 21 8D 9C  .^..!....\(..!..
  1AC0: 68 01 E8 4F 03 66 8B D1 E8 EB 07 C3 8D 9C B4 02  h..O.f..........
  1AD0: B1 02 E8 D3 23 B5 02 E8 7F 00 C3 8D 9C 4C 01 E8  ....#........L..
  1AE0: 34 00 E8 88 00 A8 04 74 23 8D 5C 28 E8 86 00 E8  4......t#.\(....
  1AF0: AA 21 8D 9C 68 01 06 0E 07 B9 07 00 E8 E7 1D 07  .!..h...........
  1B00: E8 60 00 E8 F2 FC 8D 5C 28 E8 9B 21 8D 5C 28 E8  .`.....\(..!.\(.
  1B10: 4A 21 E8 DB FE C3 B9 61 00 E8 60 1D C3 53 81 C3  J!.....a..`..S..
  1B20: 05 01 E8 D4 23 24 06 3C 02 5B C3 E8 10 00 3D 01  ....#$.<.[....=.
  1B30: 04 75 0A 53 83 C3 18 E8 BF 23 5B A8 01 C3 53 83  .u.S.....#[...S.
  1B40: C3 12 E8 B4 23 5B C3 8D 9C B4 02 32 C9 E8 58 23  ....#[.....2..X#
  1B50: C3 8D 9C B4 02 E8 A1 23 C3 8D 9C B4 02 B1 01 E8  .......#........
  1B60: 46 23 C3 8D 9C B4 02 B1 01 E8 54 23 C3 8D 9C 48  F#........T#...H
  1B70: 01 E8 85 23 C3 55 57 51 B9 08 00 BD 00 00 BB 08  ...#.UWQ........
  1B80: 00 2B D9 D1 E3 8D 58 4E E8 6E 23 E8 98 01 E2 EE  .+....XN.n#.....
  1B90: 8D 5C 4B E8 63 23 B9 04 00 8B D0 BF 9A 1B 85 55  .\K.c#.........U
  1BA0: 06 74 17 66 8B 05 8D 9A F4 01 E8 B7 22 8B 45 04  .t.f........".E.
  1BB0: 8D 9A F8 01 E8 C5 22 83 C5 08 83 C7 08 E2 DF 8D  ......".........
  1BC0: 7C 5E B9 04 00 33 ED 8B DF E8 2D 23 0B C0 74 09  |^...3....-#..t.
  1BD0: E8 12 01 E8 4C 00 83 C5 1C 83 C7 12 E2 E9 32 ED  ....L.........2.
  1BE0: E8 76 FF 8D 5C 28 E8 55 FF 3D 01 04 75 10 83 C3  .v..\(.U.=..u...
  1BF0: 14 E8 05 23 24 70 C0 E8 04 8A E8 E8 5B FF 59 5F  ...#$p......[.Y_
  1C00: 5D C3 20 03 58 02 3C 00 01 00 00 04 00 03 3C 00  ]. .X.<.......<.
  1C10: 00 08 00 05 00 04 4B 00 00 01 80 02 E0 01 3C 00  ......K.......<.
  1C20: 20 00 51 8D 1D E8 D1 22 8D 9A 68 01 E8 4D 22 8D   .Q...."..h..M".
  1C30: 5D 02 E8 C4 22 8D 9A 6A 01 E8 89 00 8D 5D 05 E8  ]..."..j.....]..
  1C40: B7 22 8D 9A 6E 01 E8 7C 00 8D 5D 08 E8 AA 22 8B  ."..n..|..]...".
  1C50: C8 8A DC 66 C1 C8 10 8A D0 80 E2 0F 8A F0 C0 EE  ...f............
  1C60: 04 8A EC C0 E5 06 8A FC C0 E7 04 80 E7 03 80 E4  ................
  1C70: 0F C0 E4 04 0A D4 80 E2 3F 80 E4 C0 C0 EC 02 0A  ........?.......
  1C80: F4 8B C3 8D 9A 74 01 E8 F2 21 8D 9A 72 01 8B C1  .....t...!..r...
  1C90: E8 E9 21 8D 9A 76 01 33 C0 8A C6 E8 DE 21 8D 9A  ..!..v.3.....!..
  1CA0: 78 01 33 C0 8A C2 E8 D3 21 8D 5D 0C E8 4A 22 8D  x.3.....!.]..J".
  1CB0: 9A 7A 01 E8 0F 00 8D 5D 0F E8 3D 22 8D 9A 7E 01  .z.....]..="..~.
  1CC0: E8 B9 21 59 C3 8B C8 8A D4 66 C1 C8 10 8A F0 80  ..!Y.....f......
  1CD0: E6 0F 8A E8 C0 ED 04 8B C1 E8 A0 21 83 C3 02 8B  ...........!....
  1CE0: C2 E8 98 21 C3 8D 5D 11 E8 0E 22 8A E0 BA 06 02  ...!..]...".....
  1CF0: C0 E8 07 74 03 80 CA 80 8A C4 C0 E8 03 24 03 3C  ...t.........$.<
  1D00: 02 75 03 80 CA 40 3C 03 75 12 8A C4 D0 E8 A8 01  .u...@<.u.......
  1D10: 74 03 80 E2 FD A8 02 74 03 80 E2 FB 8B C2 8D 9A  t......t........
  1D20: 80 01 E8 57 21 C3 3C 01 74 3D 8B D0 0F B6 C6 24  ...W!.<.t=.....$
  1D30: 3F 04 3C 8D 9A F8 01 E8 42 21 0F B6 C2 83 C0 1F  ?.<.....B!......
  1D40: C1 E0 03 8D 9A F4 01 E8 32 21 0F B6 DE C1 EB 06  ........2!......
  1D50: C1 E3 02 2E F7 A7 02 1D 2E F7 B7 00 1D 8D 9A F6  ................
  1D60: 01 E8 18 21 83 C5 08 C3 01 00 01 00 04 00 03 00  ...!............
  1D70: 05 00 04 00 10 00 09 00 57 8D 9C 68 01 8B FB 8B  ........W..h....
  1D80: DF E8 90 00 0B C9 74 44 8D 5D 18 E8 6B 21 A8 80  ......tD.]..k!..
  1D90: 74 0D 8B DF 56 8D 36 66 1D E8 6D 00 5E EB 28 66  t...V.6f..m.^.(f
  1DA0: 8B D1 E8 11 05 8D 9C A6 00 E8 4D 21 3C 01 75 17  ..........M!<.u.
  1DB0: 66 81 F9 80 07 38 04 74 09 66 81 F9 00 05 D0 02  f....8.t.f......
  1DC0: 75 05 B5 03 E8 80 FD 83 C7 1C EB B3 5F C3 8C 0A  u..........._...
  1DD0: D0 02 8A 00 E0 01 2D 00 10 00 3E 00 09 00 06 00  ......-...>.....
  1DE0: 00 00 00 00 00 00 06 00 00 00 50 53 51 B9 07 00  ..........PSQ...
  1DF0: 53 8B DA E8 03 21 83 F8 00 5B 74 09 66 C1 E3 10  S....!...[t.f...
  1E00: 8B DA E8 BC 1A 59 5B 58 C3 51 53 B9 07 00 E8 C9  .....Y[X.QS.....
  1E10: 1A 5B 59 C3 66 50 53 83 C3 06 E8 DC 20 5B 8B C8  .[Y.fPS..... [..
  1E20: 66 C1 E1 10 53 83 C3 02 E8 CE 20 8B C8 5B 66 58  f...S..... ..[fX
  1E30: C3 8D 9C 48 01 32 C9 E8 6E 20 C3 57 B9 20 00 E8  ...H.2..n .W. ..
  1E40: A4 1A 5F C3 E8 0A FD 3C 01 75 71 8D 9C B6 02 E8  .._....<.uq.....
  1E50: A7 20 A8 02 0F 84 89 00 66 C1 CE 10 E8 1C 04 66  . ......f......f
  1E60: C1 CE 10 0A C0 75 26 8D 9C 4C 01 66 B8 C4 09 00  .....u&..L.f....
  1E70: 00 E8 F0 1F 8D 9C 4C 01 E8 96 F7 0F 85 88 00 8D  ......L.........
  1E80: 9C 4C 01 B8 3C 6A E8 7D 01 0C 01 EB 7A 8D 9C 68  .L..<j.}....z..h
  1E90: 01 B0 00 E8 36 01 75 07 B0 00 E8 DF 00 74 68 8D  ....6.u......th.
  1EA0: 9C 68 01 B0 01 E8 24 01 75 52 B0 01 E8 B0 00 75  .h....$.uR.....u
  1EB0: 56 B0 00 E8 A9 00 EB 4F 0B F6 EB 4B 3C 04 74 21  V......O...K<.t!
  1EC0: 3C 03 74 1D 66 C1 CE 10 E8 B0 03 66 C1 CE 10 0A  <.t.f......f....
  1ED0: C0 74 07 B0 01 E8 A4 00 75 2D B0 00 E8 9D 00 75  .t......u-.....u
  1EE0: 26 8D BC 68 01 8D 1D E8 0F 20 0B C0 74 19 8B DF  &..h..... ..t...
  1EF0: B0 00 E8 D7 00 75 05 83 C7 1C EB E9 8B D3 8D 9C  .....u..........
  1F00: 4C 01 E8 E5 FE 0B F6 C3 57 53 51 E8 A8 18 3B 55  L.......WSQ...;U
  1F10: 02 75 18 66 C1 CA 10 8B DA 66 C1 CA 10 3B 5D 06  .u.f.....f...;].
  1F20: 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 DE  u...t.:E.t......
  1F30: 33 D2 EB 02 8B D7 0B D2 59 5B 5F C3 51 66 52 E8  3.......Y[_.QfR.
  1F40: 74 18 3A 65 1A 75 09 0A C0 74 0E 3A 45 1B 74 09  t.:e.u...t.:E.t.
  1F50: 83 C7 1C E2 ED 33 FF EB 00 0B FF 66 5A 59 C3 51  .....3.....fZY.Q
  1F60: E8 53 18 56 8D 9C 4C 01 8B F7 E8 9C FE 5E E8 5B  .S.V..L......^.[
  1F70: 00 75 07 83 C7 1C E2 EB 33 FF 59 C3 8D BC F4 01  .u......3.Y.....
  1F80: 8A C8 8D 1D E8 72 1F 0B C0 74 40 66 50 E8 C1 FB  .....r...t@fP...
  1F90: 3C 01 66 58 74 05 3D 40 06 73 2B 66 8B D0 8D 5D  <.fXt.=@.s+f...]
  1FA0: 04 E8 55 1F E8 61 FF 74 1D 8D 9C 4C 01 56 8B F2  ..U..a.t...L.V..
  1FB0: E8 56 FE 5E 53 8D 9C 62 01 33 C0 E8 BE 1E 5B 8A  .V.^S..b.3....[.
  1FC0: C1 E8 08 00 75 05 83 C7 08 EB B7 C3 66 51 50 53  ....u.......fQPS
  1FD0: 66 C1 CE 10 8B DE 66 C1 CE 10 E8 1C 1F 5B 66 8B  f.....f......[f.
  1FE0: D0 E8 30 FE 58 3C 01 75 0A 66 3B CA 75 13 E8 20  ..0.X<.u.f;.u.. 
  1FF0: F6 75 10 3B CA 72 0A 66 3B CA 72 05 E8 12 F6 75  .u.;.r.f;.r....u
  2000: 02 32 C0 66 59 C3 56 57 E8 31 FF 8B F7 E8 F9 FD  .2.fY.VW.1......
  2010: 5F 5E C3 66 50 53 66 51 52 57 56 51 8B DE B9 08  _^.fPSfQRWVQ....
  2020: 00 E8 58 18 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2  ..X.Y.\...f.....
  2030: E8 31 1E F6 C2 03 75 24 8B C1 24 7F BF F6 20 80  .1....u$..$... .
  2040: 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66 B9  =.....:.u.f.E.f.
  2050: 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01 74  ...............t
  2060: 25 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A CC 8A D0  %...p.....3.....
  2070: 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1 E0  ..u..\.f%....f..
  2080: 08 E8 E0 1D EB B2 8A E1 8A CA 80 E1 0C C0 E9 02  ................
  2090: 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC 75  ..........pr*..u
  20A0: 73 25 80 EC 70 8A C4 32 E4 50 E8 32 02 8B D8 58  s%..p..2.P.2...X
  20B0: 38 D8 72 05 33 C0 E9 9C 00 E8 2A 02 E8 3A 1E 0B  8.r.3.....*..:..
  20C0: C0 0F 84 90 00 EB 1B 32 C0 E8 70 FE 0F 84 85 00  .......2..p.....
  20D0: 8D 5C 16 8B 05 E8 A4 1D 8B 45 06 66 C1 E0 10 8B  .\.......E.f....
  20E0: 45 02 50 E8 1D 0B 66 C1 E1 10 8B C8 58 8D 1C E8  E.P...f.....X...
  20F0: 72 1D 66 50 8D 5C 04 66 8B C1 E8 67 1D 66 58 66  r.fP.\.f...g.fXf
  2100: C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50 8D  ...f......f..fP.
  2110: 5C 06 E8 E4 1D 8B C8 66 58 66 D3 E0 66 C1 E8 10  \......fXf..f...
  2120: 40 8D 5C 14 E8 55 1D BF 56 21 83 F9 01 74 11 BF  @.\..U..V!...t..
  2130: 5E 21 81 F9 01 01 74 08 BF 66 21 83 F9 02 75 15  ^!....t..f!...u.
  2140: 8D 5C 0C 66 8B 05 E8 1B 1D 8D 5C 10 66 8B 45 04  .\.f......\.f.E.
  2150: E8 11 1D 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00 40  .....^_ZfY[fX..@
  2160: 01 90 01 01 40 01 90 01 02 80 02 90 01 03 80 02  ....@...........
  2170: 90 01 04 40 01 90 01 05 40 01 90 01 06 80 02 90  ...@....@.......
  2180: 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80 02 90 01  ....^..@........
  2190: 0F 80 02 5E 01 10 80 02 5E 01 11 80 02 E0 01 12  ...^....^.......
  21A0: 80 02 E0 01 13 80 02 90 01 23 20 04 90 01 32 20  .........# ...2 
  21B0: 04 B0 02 33 20 04 C0 02 62 80 02 E0 01 FF 05 0A  ...3 ...b.......
  21C0: 05 05 05 00 00 00 05 0B 06 05 05 00 00 00 08 10  ................
  21D0: 08 08 08 00 00 00 56 E8 35 1A 80 E4 01 3B 04 74  ......V.5....;.t
  21E0: 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E  ......3....D...^
  21F0: C3 57 53 50 E8 18 1A 83 E9 0F E8 E2 00 83 F8 05  .WSP............
  2200: 76 03 B8 05 00 03 C8 D1 E0 03 C8 FB A5 83 C6 02  v...............
  2210: E2 FA B8 FF FF AB 58 5B 5F C3 66 53 51 66 52 E8  ......X[_.fSQfR.
  2220: 41 00 E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8 00  A..w.f...f...f..
  2230: 00 00 01 66 D3 E8 66 33 D2 66 F7 F3 E8 C4 09 66  ...f..f3.f.....f
  2240: 5A 59 66 5B C3 53 66 50 BB 07 00 E8 57 11 0A C0  ZYf[.SfP....W...
  2250: 66 58 5B C3 53 66 50 BB 07 00 E8 48 11 A8 01 66  fX[.SfP....H...f
  2260: 58 5B C3 53 66 50 8D 5C 06 E8 8D 1C 8A C8 66 58  X[.SfP.\......fX
  2270: 5B C3 51 B9 08 00 E8 48 16 59 C3 53 8D 5C 08 E8  [.Q....H.Y.S.\..
  2280: 77 1C 24 03 5B C3 8D 5C 09 E8 6D 1C C3 51 53 B1  w.$.[..\..m..QS.
  2290: 01 8A E8 8D 5C 08 E8 0F 1C 5B 59 C3 53 8D 1C E8  ....\....[Y.S...
  22A0: 57 1C 5B C3 53 8D 5C 04 E8 4E 1C 5B C3 53 8D 5C  W.[.S.\..N.[.S.\
  22B0: 16 E8 45 1C 5B C3 53 66 52 33 C0 E8 4A FC 66 5A  ..E.[.SfR3..J.fZ
  22C0: 75 1B E8 34 00 74 16 E8 15 00 40 83 F8 05 73 0D  u..4.t....@...s.
  22D0: E8 91 1B 48 E8 0F 00 66 8B C2 E8 87 1B 5B C3 BB  ...H...f.....[..
  22E0: 00 1E E8 14 1C C3 BB 08 1E C1 E0 03 03 D8 C3 BB  ................
  22F0: 00 1E B9 32 00 E8 84 15 C3 51 E8 E2 FF 0B C0 74  ...2.....Q.....t
  2300: 12 8B C8 BB 08 1E E8 F0 1B 66 3B C2 74 07 83 C3  .........f;.t...
  2310: 08 E2 F3 0B DB 59 C3 B3 01 E8 BE 19 75 03 E8 4B  .....Y......u..K
  2320: E4 C3 B3 02 E8 B3 19 75 03 E8 40 E4 C3 B3 0E E8  .......u..@.....
  2330: 3A E4 C3 B3 89 E8 34 E4 C3 B3 1C E8 2E E4 C3 B3  :.....4.........
  2340: 1B E8 28 E4 C3 E8 E9 EA 51 B9 0B 01 E8 F8 14 59  ..(.....Q......Y
  2350: C3 B8 22 06 E8 EE FF C3 B8 3F 06 E8 E7 FF C3 B8  .."......?......
  2360: 20 06 E8 E0 FF C3 B8 2E 06 E8 D9 FF C3 B8 2A 06   .............*.
  2370: E8 D2 FF C3 B8 3C 06 E8 CB FF C3 B8 3E 06 E8 C4  .....<......>...
  2380: FF C3 B8 21 06 E8 BD FF C3 00 C3 00 00 00 00 00  ...!............
  2390: 00 00 00 00 00 00 00 00 00 00 00 66 50 66 52 0F  ...........fPfR.
  23A0: 31 66 A3 27 23 66 89 16 23 23 66 5A 66 58 C3 66  1f.'#f..##fZfX.f
  23B0: 50 66 52 0F 31 66 A3 2F 23 66 89 16 2B 23 66 5A  PfR.1f./#f..+#fZ
  23C0: 66 58 C3 00 BB 20 DF E8 B3 3D E8 8B F3 B5 01 E8  fX... ...=......
  23D0: 38 07 C3 BB 00 DF E8 A4 3D E8 7C F3 B5 00 E8 29  8.......=.|....)
  23E0: 07 C3 80 F9 00 75 0A E8 86 14 8A C8 B5 02 E8 28  .....u.........(
  23F0: 08 0B F6 74 29 E8 60 F3 B5 01 E8 21 07 56 33 F6  ...t).`....!.V3.
  2400: B5 00 E8 6A 06 5E B5 01 E8 D1 F3 E8 0B 08 E8 C4  ...j.^..........
  2410: 08 E8 44 F3 8D 9C 00 03 E8 0A 07 E8 53 07 66 C1  ..D.........S.f.
  2420: CE 10 B5 01 E8 48 06 E8 5C FE A8 40 75 07 32 C0  .....H..\..@u.2.
  2430: B5 01 E8 AD 07 66 C1 CE 10 C3 E8 1B F3 B5 01 E8  .....f..........
  2440: A3 06 B5 00 E8 D7 06 E8 3A 07 B1 0F E8 BC 0B B1  ........:.......
  2450: 10 E8 B7 0B E8 26 00 C3 E8 75 00 E8 0A F3 B5 00  .....&...u......
  2460: E8 82 06 B5 00 E8 B6 06 E8 7F F3 E8 02 14 38 C1  ..............8.
  2470: 74 0A 80 F9 08 74 05 B5 03 E8 9D 07 C3 53 66 50  t....t.......SfP
  2480: BB 02 00 E8 1F 0F 66 A9 00 00 01 00 66 58 5B 75  ......f.....fX[u
  2490: 3E E8 EF F2 0B D2 74 0C E8 7D F3 3C 01 74 05 B1  >.....t..}.<.t..
  24A0: 0F E8 A1 0B B1 0C E8 75 00 B1 01 E8 03 0C E8 85  .......u........
  24B0: F2 80 FD 00 75 0D E8 FA 01 B1 0D E8 4D 0B B1 03  ....u.......M...
  24C0: E8 5B 00 E8 BD F2 0B D2 74 05 B1 01 E8 76 0B C3  .[......t....v..
  24D0: E8 B0 F2 0B D2 74 05 B1 00 E8 69 0B B1 02 E8 3D  .....t....i....=
  24E0: 00 E8 34 F3 A8 01 74 0D E8 4B F2 80 FD 00 75 05  ..4...t..K....u.
  24F0: B0 02 E8 26 04 B1 00 E8 B7 0B B1 0D E8 1F 00 C3  ...&............
  2500: B1 07 E8 AC 0B E8 7B F2 0B D2 75 0C E8 E9 F2 E8  ......{...u.....
  2510: 11 0E 75 09 E8 D1 0C C3 B1 07 E8 28 0B C3 E8 D7  ..u........(....
  2520: F2 E8 FF 0D 75 24 51 E8 87 0B 59 80 F9 0C 75 1A  ....u$Q...Y...u.
  2530: 33 D2 56 83 C6 08 E8 28 0E 5E 0A C0 75 0C B9 0A  3.V....(.^..u...
  2540: 00 E8 B9 13 42 83 FA 1E 75 E8 C3 E8 35 F2 0B D2  ....B...u...5...
  2550: 74 06 B1 12 E8 EE 0A C3 E8 1D F2 E8 8D 0A C3 56  t..............V
  2560: 83 C6 08 E8 9C 0D 5E E8 19 F2 0B D2 74 03 E8 71  ......^.....t..q
  2570: 09 80 FD 01 0F 84 D1 00 80 FD 02 0F 85 F2 00 B1  ................
  2580: 0C E8 9A FF 56 83 C6 08 E8 D6 0D 5E 0A C0 0F 84  ....V......^....
  2590: DF 00 E8 DF 00 0A DB 0F 85 D6 00 8D 9C 35 01 E8  .............5..
  25A0: 57 19 A8 01 74 03 E8 7F 03 E8 D7 F1 0B D2 74 05  W...t.........t.
  25B0: B1 14 E8 90 0A 66 33 C9 E8 F9 F1 66 BA 50 01 40  .....f3....f.P.@
  25C0: 50 66 C1 C9 10 8A C1 66 C1 C9 10 E8 8D 0C 0F 85  Pf.....f........
  25D0: 9F 00 66 BA 50 01 50 4F 52 E8 A7 F1 80 FA 22 5A  ..f.P.POR....."Z
  25E0: 74 0D 8D 9C 2D 01 E8 10 19 24 06 3C 02 75 02 B6  t...-....$.<.u..
  25F0: 02 8D 5C 28 66 C1 C9 10 03 D9 66 C1 C9 10 E8 5A  ..\(f.....f....Z
  2600: 0C 75 6E 8A DF 32 FF 66 C1 C9 10 03 CB 66 C1 C9  .un..2.f.....f..
  2610: 10 66 BA 50 01 10 30 33 DB E8 3F 0C 75 53 66 C1  .f.P..03..?.uSf.
  2620: C9 10 8B C1 66 C1 C9 10 0B C0 74 45 83 F8 10 75  ....f.....tE...u
  2630: 0F 8D 5C 28 E8 C2 18 66 0B C0 0F 85 7D FF EB 31  ..\(...f....}..1
  2640: 3D 80 00 0F 82 74 FF EB 25 E8 68 F1 8A E9 B1 A0  =....t..%.h.....
  2650: BA 00 80 BF 32 00 8D 5C 28 E8 D4 0B 80 FF 01 74  ....2..\(......t
  2660: 0D B1 A2 8D 5C 28 E8 C7 0B 80 FF 01 75 03 B0 00  ....\(......u...
  2670: C3 B0 01 C3 E8 2B 00 74 0C B0 01 E8 9D 02 75 21  .....+.t......u!
  2680: E8 1F 00 75 1C 66 BA 0C 00 90 43 8D 9C 30 01 E8  ...u.f....C..0..
  2690: C9 0B 66 BA 20 00 90 41 8D 9C 34 01 E8 BC 0B 33  ..f. ..A..4....3
  26A0: DB C3 E8 0F F1 66 BA 00 00 90 47 8D 9C 28 01 E8  .....f....G..(..
  26B0: A9 0B C3 E8 62 F1 3C 01 75 0E E8 ED 02 80 FD 01  ....b.<.u.......
  26C0: 75 06 B5 02 E8 12 03 C3 8D 9C AC 03 B9 10 00 E8  u...............
  26D0: AA 11 B0 01 E8 44 02 74 08 B5 04 E8 11 03 E9 19  .....D.t........
  26E0: 01 B1 08 E8 25 09 E8 66 02 B1 09 E8 1D 09 E8 AC  ....%..f........
  26F0: 01 8D 9C B8 03 66 33 C0 E8 69 17 E8 47 01 B9 90  .....f3..i..G...
  2700: 01 E8 EE 11 B0 01 E8 F7 01 B5 02 E8 D5 02 E8 5B  ...............[
  2710: 01 E8 E7 02 E8 C7 01 B5 03 E8 C7 02 33 C9 E8 E7  ............3...
  2720: 00 F6 C5 01 75 2E B5 02 E8 B8 02 E8 07 01 F6 C5  ....u...........
  2730: 04 74 08 B5 01 E8 B7 02 E9 BF 00 8A FD 80 E7 03  .t..............
  2740: E8 CF 00 80 E3 03 38 FB 75 07 E8 33 01 0F 84 A9  ......8.u..3....
  2750: 00 E8 54 01 FE C1 E8 6A F0 38 D9 75 C1 8D 9C AC  ..T....j.8.u....
  2760: 03 E8 95 17 3C 03 74 05 E8 DA 00 EB A1 8D 9C B0  ....<.t.........
  2770: 03 66 33 C0 E8 ED 16 8D 9C 2A 01 E8 7B 17 A8 40  .f3......*..{..@
  2780: 74 0C B1 13 E8 84 08 B0 03 E8 74 01 EB 0A B1 0A  t.........t.....
  2790: E8 78 08 B0 02 E8 68 01 B5 04 E8 46 02 E8 CC 00  .x....h....F....
  27A0: E8 58 02 E8 38 01 B5 05 E8 38 02 33 C9 E8 58 00  .X..8....8.3..X.
  27B0: 80 FD 07 75 05 E8 73 00 75 27 51 B5 04 E8 23 02  ...u..s.u'Q...#.
  27C0: 59 F6 C5 01 75 07 B5 03 E8 24 02 EB 2D E8 65 00  Y...u....$..-.e.
  27D0: 8A D5 E8 D3 00 E8 5D 00 38 EA 75 05 E8 A1 00 74  ......].8.u....t
  27E0: 19 FE C1 E8 DD EF 38 D9 75 C3 8D 9C AC 03 E8 08  ......8.u.......
  27F0: 17 3C 04 75 05 E8 4D 00 EB A3 B0 00 E8 01 01 B1  .<.u..M.........
  2800: 0B E8 07 08 E8 A3 01 C3 8D 9C C0 03 E8 0F 00 8A  ................
  2810: E8 C3 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8  ..S.......[...Q.
  2820: D7 16 C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8  .......$.Y......
  2830: C7 16 A8 01 C3 8D 9C B8 03 E8 84 16 C3 8D 9C B8  ................
  2840: 03 E8 64 16 C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02  ..d..3.3....8.v.
  2850: 8A D5 FE C1 E8 6C EF 38 D9 72 EE 33 C9 8A EA 8D  .....l.8.r.3....
  2860: 9C 5C 03 E8 42 16 B1 0B E8 46 08 C3 E8 45 EF 8D  .\..B....F...E..
  2870: 9C B8 03 E8 83 16 66 BA 03 01 80 83 E8 DC 09 C3  ......f.........
  2880: 51 53 8D 9C B0 03 E8 37 16 FE C5 E8 1A 16 80 FD  QS.....7........
  2890: 06 72 07 B5 02 E8 57 01 33 C9 5B 59 C3 66 33 C0  .r....W.3.[Y.f3.
  28A0: 8D 9C B0 03 E8 BD 15 C3 32 ED E8 65 FF 80 E3 0C  ........2..e....
  28B0: C0 EB 02 B7 03 2A FB C0 E3 03 8A EB 80 FB 18 72  .....*.........r
  28C0: 03 80 CD 20 E8 4B FF 80 E3 03 38 FB 72 02 8A DF  ... .K....8.r...
  28D0: 80 FB 03 75 03 80 CD 04 0A EB E8 60 FF C3 E8 D3  ...u.......`....
  28E0: EE 8D 9C C0 03 66 BA 02 02 90 45 E8 6D 09 C3 E8  .....f....E.m...
  28F0: C2 EE 66 BA 00 01 90 42 8D 9C B4 03 E8 5C 09 C3  ..f....B.....\..
  2900: E8 B1 EE 66 BA 02 01 80 50 E8 4F 09 C3 E8 93 EE  ...f....P.O.....
  2910: 8B C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 96 EE 66 BA  ..f3..........f.
  2920: 00 06 80 50 E8 34 09 C3 E8 89 EE 66 BA 11 01 80  ...P.4.....f....
  2930: 50 B0 04 E8 25 09 C3 E8 7A EE 66 BA 00 06 90 40  P...%...z.f....@
  2940: 8D 9C C8 03 E8 14 09 8D 9C C8 03 E8 AB 15 C3 E8  ................
  2950: BB FF E8 6E EE 8A E3 80 CC 80 50 E8 56 EE 58 66  ...n......P.V.Xf
  2960: BA 00 01 80 61 E8 F3 08 33 C9 E8 E1 ED 0B C0 74  ....a...3......t
  2970: 02 B5 10 8D 9C BC 03 E8 2E 15 8A C5 E8 35 EE 66  .............5.f
  2980: BA 07 01 80 50 E8 D3 08 E8 6D EE E8 99 09 75 19  ....P....m....u.
  2990: 8D 9C 48 03 E8 62 15 0A C0 74 0E E8 16 EE 66 BA  ..H..b...t....f.
  29A0: 0A 01 80 50 B0 01 E8 B2 08 C3 E8 42 FF E8 2E FF  ...P.......B....
  29B0: E8 84 FF 3C 01 75 1C E8 71 FE 74 17 33 C9 E8 47  ...<.u..q.t.3..G
  29C0: FE 80 FD 07 75 0D FE C1 E8 F8 ED 38 D9 75 EF B5  ....u......8.u..
  29D0: 01 EB 02 B5 00 E8 01 00 C3 8D 9C AE 03 B1 02 E8  ................
  29E0: C6 14 C3 51 8D 9C AC 03 32 C9 E8 BB 14 59 C3 51  ...Q....2....Y.Q
  29F0: 8D 9C AC 03 B1 01 E8 AF 14 59 C3 8D 9C 32 01 E8  .........Y...2..
  2A00: F7 14 0A C0 75 15 B9 64 00 8D 9C AC 03 E8 E9 14  ....u..d........
  2A10: 3C 02 74 03 B9 90 01 E8 D8 0E C3 32 E4 B1 04 33  <.t........2...3
  2A20: D2 F6 E1 8B C8 E8 D5 0E C3 51 8D 5C 14 E8 C9 14  .........Q.\....
  2A30: 66 C1 E0 10 E8 88 01 59 C3 33 C9 E8 2C 0E 38 C1  f......Y.3..,.8.
  2A40: 73 05 B5 00 E8 A5 00 B5 00 E8 99 00 FE C1 E8 1C  s...............
  2A50: 0E 38 C1 72 E6 32 C9 8A E9 E8 14 0E 38 C1 74 05  .8.r.2......8.t.
  2A60: B5 03 E8 B4 01 FE C1 E8 FD 0D 38 C1 72 E9 C3 83  ..........8.r...
  2A70: EC 0C 8B EC 0B F6 74 29 E8 21 F8 66 C1 C8 10 80  ......t).!.f....
  2A80: FD 10 75 06 8D 5C 18 E8 6F 14 66 89 46 00 8D 5C  ..u..\..o.f.F..\
  2A90: 04 E8 65 14 66 89 46 04 8D 5C 08 E8 5B 14 88 46  ..e.f.F..\..[..F
  2AA0: 0A 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00 E8  ..N...f......+..
  2AB0: 17 0D 83 C4 0C C3 33 DB 83 EC 08 8B EC 89 5E 00  ......3.......^.
  2AC0: 8C D0 66 C1 E0 10 8B C4 BB 01 00 E8 FB 0C 8B EC  ..f.............
  2AD0: 8B 4E 00 8B 56 02 66 8B 46 04 83 C4 08 C3 BB 25  .N..V.f.F......%
  2AE0: 00 E8 0F 00 C3 BB 23 00 E8 08 00 C3 BB 0D 00 E8  ......#.........
  2AF0: 01 00 C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0  .........N...f..
  2B00: 10 8B C4 E8 C3 0C 83 C4 04 C3 BB 22 00 E8 E3 FF  ..........."....
  2B10: 80 FD 01 74 08 B5 01 BB 06 00 E8 D6 FF C3 BB 2C  ...t...........,
  2B20: 00 E8 CF FF C3 E8 D1 13 66 A9 00 00 FF FF 74 40  ........f.....t@
  2B30: 83 EC 18 8B EC 55 51 B9 04 00 83 C3 02 E8 B9 13  .....UQ.........
  2B40: 66 89 46 00 83 C5 04 83 C3 04 E2 F1 83 C3 04 E8  f.F.............
  2B50: A7 13 66 C1 C8 10 66 89 46 00 59 5D 88 4E 14 8C  ..f...f.F.Y].N..
  2B60: D0 66 C1 E0 10 8B C4 BB 31 00 E8 5C 0C 83 C4 18  .f......1..\....
  2B70: C3 E8 E4 EB 8D 9C D0 02 E8 7E 13 8A E8 BB 21 00  .........~....!.
  2B80: E8 70 FF C3 8D 9C 3C 03 E8 6E 13 8A F8 E8 A6 EB  .p....<..n......
  2B90: 8A DD E8 C3 EB E8 60 EC E8 8C 07 75 02 B3 01 83  ......`....u....
  2BA0: EC 04 8B EC 88 4E 00 88 7E 01 88 5E 02 8C D0 66  .....N..~..^...f
  2BB0: C1 E0 10 8B C4 BB 2A 00 E8 0E 0C 83 C4 04 C3 83  ......*.........
  2BC0: EC 04 8B EC C7 46 00 00 00 66 C1 E8 0D 89 46 02  .....F...f....F.
  2BD0: 8C D0 66 C1 E0 10 8B C4 BB 35 00 E8 EB 0B 83 C4  ..f......5......
  2BE0: 04 C3 83 EC 08 8B EC 89 4E 00 66 89 56 02 89 5E  ........N.f.V..^
  2BF0: 06 8C D0 66 C1 E0 10 8B C4 BB 2D 00 E8 CA 0B 83  ...f......-.....
  2C00: C4 08 C3 3D C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24  ...=..v.......?$
  2C10: C0 C3 E8 28 0C C3 32 D2 C3 66 33 FF 66 33 DB 66  ...(..2..f3.f3.f
  2C20: 33 C0 8A C1 66 BA 00 00 00 FF 80 FD 03 74 7A 80  3...f........tz.
  2C30: FD 02 75 07 E8 11 EC 33 DB EB 6E E8 E6 00 53 8D  ..u....3..n...S.
  2C40: 9C E4 02 66 8B C7 E8 1B 12 5B E8 41 01 66 8B C3  ...f.....[.A.f..
  2C50: 66 53 8D 9C E8 02 E8 0B 12 8D 9C EC 02 66 8B C7  fS...........f..
  2C60: E8 01 12 66 5B 51 53 33 D2 80 F9 08 73 08 E8 EF  ...f[QS3....s...
  2C70: 01 74 03 80 CE 10 8D 9C 02 03 E8 7C 12 0B C0 75  .t.........|...u
  2C80: 03 80 CE 03 E8 AF EA 8A D5 66 C1 E2 10 E8 E8 EA  .........f......
  2C90: 8A F2 8A D1 66 8B C2 E8 6B EB 66 C1 E2 08 E8 B7  ....f...k.f.....
  2CA0: EA 8A D1 66 C1 CA 08 5B 59 83 EC 14 8B EC 66 89  ...f...[Y.....f.
  2CB0: 46 08 66 89 5E 04 66 89 7E 0C 66 89 56 00 BB 0C  F.f.^.f.~.f.V...
  2CC0: 00 8C D0 66 C1 E0 10 8B C4 E8 FD 0A 8B EC 8A 5E  ...f...........^
  2CD0: 0B 83 C4 14 C3 E8 04 EB E8 95 0B 38 C1 74 44 C0  ...........8.tD.
  2CE0: E1 02 E8 81 01 74 03 80 C9 01 83 EC 08 8B EC C6  .....t..........
  2CF0: 46 03 00 88 4E 02 E8 67 01 75 17 E8 50 EA 74 12  F...N..g.u..P.t.
  2D00: E8 F6 00 C7 46 00 00 00 89 56 04 89 5E 06 C6 46  ....F....V..^..F
  2D10: 03 01 8C D0 66 C1 E0 10 8B C4 BB 41 00 E8 A9 0A  ....f......A....
  2D20: 83 C4 08 C3 83 EC 08 8B EC 51 E8 09 EA 88 6E 03  .........Q....n.
  2D30: E8 5F EA 89 56 00 E8 3F EA 88 56 02 E8 44 EA 88  ._..V..?..V..D..
  2D40: 56 05 80 FD 10 75 05 E8 67 04 EB 26 33 D2 E8 FD  V....u..g..&3...
  2D50: E9 74 03 80 CA 10 E8 6A EA 80 FB 04 76 03 80 CA  .t.....j....v...
  2D60: 40 8D 9C 58 03 E8 91 11 A8 02 74 03 80 CA 20 88  @..X......t... .
  2D70: 56 04 59 8C D0 66 C1 E0 10 8B C4 BB 11 00 E8 48  V.Y..f.........H
  2D80: 0A 8B EC 66 8B 7E 00 8B 5E 04 83 C4 08 C3 66 50  ...f.~..^.....fP
  2D90: 66 51 52 8A CF 0A FF 75 0B E8 F5 0A 66 33 D2 66  fQR....u....f3.f
  2DA0: F7 F7 8A C8 8A EB 0A ED 75 03 E8 EB 0A 51 66 33  ........u....Qf3
  2DB0: C0 8A C5 32 ED F7 E1 59 66 C1 E1 10 8A EF 66 F7  ...2...Yf.....f.
  2DC0: E7 66 BB E8 03 00 00 66 F7 E3 66 BB 30 00 00 00  .f.....f..f.0...
  2DD0: 66 33 D2 66 F7 F3 66 33 D2 66 BB A0 86 01 00 66  f3.f..f3.f.....f
  2DE0: F7 F3 66 8B D9 8B D8 66 B8 0A 00 00 00 66 F7 E2  ..f....f.....f..
  2DF0: 66 8B F8 5A 66 59 66 58 C3 51 66 33 C9 8D 9C E8  f..ZfYfX.Qf3....
  2E00: 02 E8 F5 10 8B C8 66 C1 E8 18 66 33 FF 8B F8 E8  ......f...f3....
  2E10: 3C E9 66 25 FF FF 00 00 66 F7 E1 B9 E8 03 33 D2  <.f%....f.....3.
  2E20: F7 F1 8B C8 8D 9C 66 03 E8 CE 10 66 25 FF FF 00  ......f....f%...
  2E30: 00 66 F7 E1 66 F7 E7 66 C1 E0 0C E8 28 00 74 03  .f..f..f....(.t.
  2E40: 66 D1 E0 66 BB F0 49 02 00 66 33 D2 66 F7 F3 8B  f..f..I..f3.f...
  2E50: D8 8B C1 B9 0A 00 33 D2 F7 F1 8A F2 8A D0 59 C3  ......3.......Y.
  2E60: E8 E3 E8 A8 02 C3 66 50 E8 DB E8 A8 01 66 58 C3  ......fP.....fX.
  2E70: 53 51 66 50 B9 A0 8C 80 FB 00 75 1C B9 90 7E E8  SQfP......u...~.
  2E80: D5 08 83 E3 03 80 FB 03 75 0E E8 B0 09 66 3D 50  ........u....f=P
  2E90: C3 00 00 72 03 B9 F0 D2 66 33 D2 8B D1 66 58 59  ...r....f3...fXY
  2EA0: 5B C3 66 52 B3 10 80 FA 14 74 25 B3 0F 80 FA 15  [.fR.....t%.....
  2EB0: 74 1E B3 00 66 F7 C2 00 00 FF FF 75 13 80 FD 13  t...f......u....
  2EC0: 74 0E 80 FD 14 74 09 B3 01 80 FD 0E 74 02 B3 02  t....t......t...
  2ED0: 66 5A C3 B5 11 80 FA 23 74 07 80 FA 22 74 02 B5  fZ.....#t..."t..
  2EE0: 00 C3 B5 02 80 FA 23 74 07 80 FA 22 74 02 B3 01  ......#t..."t...
  2EF0: C3 32 C9 B3 04 80 FD 00 75 0F B3 02 E8 74 09 74  .2......u....t.t
  2F00: 08 C7 46 00 0A 01 B1 01 C3 57 55 E8 A6 02 74 23  ..F......WU...t#
  2F10: 53 8B 5D 02 E8 96 08 03 FB 5B 80 3D FF 74 14 84  S.]......[.=.t..
  2F20: 5D 01 74 0A 8B 05 89 46 00 83 C5 02 FE C1 83 C7  ].t....F........
  2F30: 02 EB E7 5D 5F C3 57 56 8B F3 8D 5C 04 66 33 C0  ...]_.WV...\.f3.
  2F40: E8 21 0F 80 FD 00 75 04 B0 07 EB 07 80 FD 01 75  .!....u........u
  2F50: 23 B0 06 E8 45 09 33 DB 0B FF 74 23 8D 5C 04 66  #...E.3...t#.\.f
  2F60: 8B 45 04 E8 FE 0E 83 C3 04 66 8B 45 08 E8 F4 0E  .E.......f.E....
  2F70: 8B DE EB 0B 66 33 C0 8D 5C 08 E8 E7 0E 8B DE 5E  ....f3..\......^
  2F80: 5F C3 8B DA B7 22 80 FE 21 74 02 B7 21 C3 0C 01  _...."..!t..!...
  2F90: C3 80 FA 15 74 28 E8 60 0F 66 C1 E8 10 0B C0 74  ....t(.`.f.....t
  2FA0: 1A 53 83 C3 06 E8 51 0F 5B 3D E0 01 72 0D 53 83  .S....Q.[=..r.S.
  2FB0: C3 18 E8 44 0F 5B A9 10 00 74 03 32 C0 C3 0C 01  ...D.[...t.2....
  2FC0: C3 B5 0C C3 32 ED BB 02 00 E8 D9 03 66 C1 E8 18  ....2.......f...
  2FD0: A8 10 74 02 B5 02 C3 57 E8 D9 01 8B 4D 06 5F C3  ..t....W....M._.
  2FE0: 80 FA 22 75 05 C7 46 00 78 69 C3 80 FA 15 75 1A  .."u..F.xi....u.
  2FF0: 83 EC 0C 8B EC C6 46 02 00 8C D0 66 C1 E0 10 8B  ......F....f....
  3000: C4 BB 15 00 E8 C2 07 83 C4 0C C3 E8 BD 01 80 FD  ................
  3010: FF 74 31 C0 E5 04 83 EC 08 8B EC 88 4E 03 88 6E  .t1.........N..n
  3020: 02 E8 53 00 80 F9 10 75 0A 8D 9C 48 03 E8 C9 0E  ..S....u...H....
  3030: 88 46 04 8C D0 66 C1 E0 10 8B C4 BB 04 00 E8 88  .F...f..........
  3040: 07 83 C4 08 C3 83 EC 10 8B EC 88 4E 03 E8 33 E7  ...........N..3.
  3050: 81 E2 00 07 FE CE C0 E6 04 88 76 02 E8 18 00 E8  ..........v.....
  3060: A3 E7 89 56 00 8C D0 66 C1 E0 10 8B C4 BB 32 00  ...V...f......2.
  3070: E8 56 07 83 C4 10 C3 32 ED E8 27 E7 81 FA 48 3F  .V.....2..'...H?
  3080: 74 1A B5 01 81 FA 78 69 74 12 B5 02 81 FA F0 D2  t.....xit.......
  3090: 74 0A B5 03 81 FA 90 7E 74 02 32 ED 08 6E 02 8D  t......~t.2..n..
  30A0: 9C 40 03 E8 53 0E 66 89 46 04 E8 E5 E6 89 56 00  .@..S.f.F.....V.
  30B0: C3 80 F9 05 74 05 80 F9 06 75 1A E8 C5 E6 0B D2  ....t....u......
  30C0: 74 04 E8 80 FF C3 0B F6 74 44 E8 2B E7 E8 53 02  t.......tD.+..S.
  30D0: 75 03 E8 28 01 80 F9 04 74 34 E8 9B E6 80 FA 15  u..(....t4......
  30E0: 75 07 B5 01 BB 18 00 EB 0B 80 FA 14 75 20 E8 C0  u...........u ..
  30F0: 00 BB 08 00 83 EC 08 8B EC 88 6E 02 88 4E 03 8C  ..........n..N..
  3100: D0 66 C1 E0 10 8B C4 E8 BF 06 83 C4 08 C3 83 EC  .f..............
  3110: 0C 8B EC 80 F9 04 75 0A 88 4E 03 32 C0 88 46 02  ......u..N.2..F.
  3120: EB 7D 32 C0 80 EE 21 80 FA 1E 74 15 B0 02 80 FA  .}2...!...t.....
  3130: 20 74 0E B0 04 80 FA 21 74 07 B0 06 80 FA 25 75   t.....!t.....%u
  3140: 6C 02 C6 88 46 02 88 4E 03 E8 AC E6 88 56 05 8D  l...F..N.....V..
  3150: 9C 5C 03 E8 A3 0D 88 46 09 E8 58 E6 C0 E5 04 8D  .\.....F..X.....
  3160: 9C 58 03 E8 93 0D 24 02 0A E8 E8 6F E6 80 F9 02  .X....$....o....
  3170: 77 07 C0 E1 02 0A E9 EB 03 80 CD 0C 88 6E 07 E8  w............n..
  3180: 10 E6 89 56 00 E8 3B E6 88 5E 04 E8 A8 E5 88 6E  ...V..;..^.....n
  3190: 06 51 E8 36 00 8A CD B0 01 D2 E0 59 88 46 08 8C  .Q.6.......Y.F..
  31A0: D0 66 C1 E0 10 8B C4 BB 4C 00 E8 1C 06 83 C4 0C  .f......L.......
  31B0: C3 32 ED C3 E8 F6 05 03 7D 04 83 3D FF 74 0B 3B  .2......}..=.t.;
  31C0: 15 74 05 83 C7 0A EB F2 0B FF C3 8D 9C 3C 03 E8  .t...........<..
  31D0: 27 0D 32 ED 3C 03 74 0C 3C 09 72 09 3C 0E 77 05  '.2.<.t.<.r.<.w.
  31E0: 2C 08 8A E8 C3 B5 FF C3 83 EC 08 8C D0 66 C1 E0  ,............f..
  31F0: 10 8B C4 BB 4B 00 E8 D0 05 83 C4 08 C3 52 51 E8  ....K........RQ.
  3200: B2 E5 66 BA 0A 01 90 40 8D 9C BF 03 E8 4C 00 8D  ..f....@.....L..
  3210: 9C BF 03 E8 E3 0C 0C 80 59 51 80 F9 05 74 02 24  ........YQ...t.$
  3220: 7F E8 90 E5 66 BA 0A 01 80 50 E8 2E 00 59 5A C3  ....f....P...YZ.
  3230: 83 EC 08 8B EC 89 7E 00 89 5E 02 89 56 04 89 4E  ......~..^..V..N
  3240: 06 8C D0 66 C1 E0 10 8B C4 BB 36 00 E8 7A 05 8B  ...f......6..z..
  3250: EC 8B 5E 02 8A 7E 01 83 C4 08 C3 56 33 F6 66 F7  ..^..~.....V3.f.
  3260: C2 00 00 80 00 75 0A 50 33 C0 8A C6 8B F0 32 F6  .....u.P3.....2.
  3270: 58 53 BB 04 3E E8 EC 0B 66 8B C2 BB 00 3E E8 E3  XS..>...f....>..
  3280: 0B 5B 66 F7 C2 00 00 10 00 75 02 33 DB 8B D3 66  .[f......u.3...f
  3290: C1 E2 10 BA 00 3E 83 EC 08 8B EC 66 89 56 00 88  .....>.....f.V..
  32A0: 4E 04 8A C5 FE C8 88 46 07 C6 46 05 00 C6 46 06  N......F..F...F.
  32B0: 00 8C D0 66 C1 E0 10 8B C4 BB 4E 00 E8 0A 05 8B  ...f......N.....
  32C0: EC 8A 5E 05 8A 7E 06 83 C4 08 0A DB 74 32 51 B9  ..^..~......t2Q.
  32D0: 90 01 80 FB 20 74 05 80 FB 80 75 13 B9 0A 00 8B  .... t....u.....
  32E0: C6 0A C0 74 0A B9 90 01 3C 01 74 03 B9 E8 03 E8  ...t....<.t.....
  32F0: 00 06 59 8B C6 FE C4 8B F0 80 FC 06 76 98 0A DB  ..Y.........v...
  3300: 5E C3 8D 5C 04 E8 F1 0B 8B D0 B5 02 E8 14 00 74  ^..\...........t
  3310: 11 B5 01 80 FA 13 75 0A E8 61 00 80 FA 13 75 02  ......u..a....u.
  3320: B5 02 C3 80 FA 14 C3 E8 F9 FF 74 03 80 FA 0E C3  ..........t.....
  3330: 80 FA 05 C3 80 FA 02 74 03 80 FA 04 C3 80 FA 01  .......t........
  3340: 74 03 80 FA 02 C3 80 FA 02 75 03 B2 01 C3 80 FA  t........u......
  3350: 04 75 03 B2 03 C3 C3 B5 08 E8 D8 FF 74 02 B5 04  .u..........t...
  3360: C3 8D 5C 09 E8 92 0B 8A C8 0A C9 75 03 32 C0 C3  ..\........u.2..
  3370: B5 02 E8 D2 04 8A C5 24 02 D0 E8 C3 8D 5C 08 E8  .......$.....\..
  3380: 77 0B 8A D0 B6 01 83 EC 08 8B EC 89 56 02 8C D0  w...........V...
  3390: 66 C1 E0 10 8B C4 BB 4F 00 E8 2D 04 8B EC 8A 56  f......O..-....V
  33A0: 04 83 C4 08 C3 53 81 C3 C9 05 E8 25 0B 5B C3 53  .....S.....%.[.S
  33B0: 81 C3 C9 05 E8 76 0A 5B C3 53 81 C3 00 10 E8 11  .....v.[.S......
  33C0: 0B 5B C3 57 E8 9D 03 8A 45 2D B4 FF F7 45 50 20  .[.W....E-...EP 
  33D0: 00 5F C3 50 56 0F BC D8 8D 36 7A 33 E8 B3 05 5E  ._.PV....6z3...^
  33E0: 58 C3 00 20 00 24 00 00 00 28 00 2C 00 30 00 34  X.. .$...(.,.0.4
  33F0: 00 38 00 00 00 3C 00 40 00 44 53 56 51 8B F7 B3  .8...<.@.DSVQ...
  3400: 00 E8 30 00 0B F6 74 16 49 0B C9 75 04 33 FF EB  ..0...t.I..u.3..
  3410: 0D 8B DF 03 7D 02 3B F3 74 04 E2 F5 33 FF 0B FF  ....}.;.t...3...
  3420: 59 5E 5B C3 0E 00 00 00 0A 00 06 00 08 00 0C 00  Y^[.............
  3430: 0E 00 10 00 56 8D 36 BC 33 E8 56 05 E8 2E 03 03  ....V.6.3.V.....
  3440: DE 8B 3F 0B FF 74 0B 03 FE 33 C9 8A 0D 83 C7 04  ..?..t...3......
  3450: 0B FF 5E C3 51 56 53 C1 EB 0C E8 D7 FF 5B 75 04  ..^.QVS......[u.
  3460: 33 FF EB 0B 3B 1D 74 07 83 C7 08 E2 F7 33 FF 0B  3...;.t......3..
  3470: FF 5E 59 C3 57 E8 DC FF 75 04 33 DB 5F C3 E8 02  .^Y.W...u.3._...
  3480: 00 5F C3 52 51 8B 5D 04 0B DB 74 1B 56 E8 DD 02  ._.RQ.]...t.V...
  3490: 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74 08 3A 07 74  ..^3..O..?.t.:.t
  34A0: 06 03 D9 EB F0 33 DB 0B DB 59 5A C3 50 8D 1C E8  .....3...YZ.P...
  34B0: B2 09 8B D8 E8 72 00 23 C3 74 6C 33 FF E8 3A FF  .....r.#.tl3..:.
  34C0: 0B FF 74 63 39 05 75 F5 66 33 C0 8B 45 08 8B 4D  ..tc9.u.f3..E..M
  34D0: 02 83 F9 0A 74 18 8B 4D 0A 8B D1 81 E2 00 70 80  ....t..M......p.
  34E0: FE 20 75 0A 66 C1 C8 10 8B C1 66 C1 C8 10 8D 5C  . u.f.....f....\
  34F0: 0C E8 70 09 66 33 C0 8B 45 04 8D 5C 04 E8 64 09  ..p.f3..E..\..d.
  3500: 33 C9 8B D8 50 B0 01 E8 6A FF 58 74 0F 8A 4F 02  3...P...j.Xt..O.
  3510: 8B D8 B0 02 E8 5D FF 74 03 8A 6F 02 8D 5C 08 66  .....].t..o..\.f
  3520: 33 C0 8B C1 E8 3D 09 58 C3 56 E8 40 02 8B 44 04  3....=.X.V.@..D.
  3530: 5E C3 56 E8 37 02 89 44 04 5E C3 E8 5D 02 8B F7  ^.V.7..D.^..]...
  3540: 03 74 56 BB 00 30 B9 23 00 E8 8E 03 E8 01 00 C3  .tV..0.#........
  3550: 33 FF 33 F6 33 C9 8B FE E8 9F FE 0F 84 AA 00 8B  3.3.3...........
  3560: F7 8B 54 04 80 FA 15 74 04 0B 0C EB E9 8B DA E8  ..T....t........
  3570: E2 FE E8 D4 00 0B C8 89 04 0B C0 75 10 89 44 04  ...........u..D.
  3580: 89 05 83 7C 02 0A 74 36 89 44 0A EB 31 E8 02 01  ...|..t6.D..1...
  3590: 89 44 04 89 05 83 7C 02 0A 74 06 E8 BC 00 89 44  .D....|..t.....D
  35A0: 0A F7 04 11 00 74 11 8B 44 04 E8 95 00 75 09 33  .....t..D....u.3
  35B0: C0 89 05 E8 B0 00 EB 06 E8 AB 00 E8 55 01 8B 5C  ............U..\
  35C0: 08 B8 00 11 66 C1 E0 10 8B 44 04 E8 62 00 E8 5D  ....f....D..b..]
  35D0: 01 8B 5C 08 E8 39 00 E8 56 00 74 12 8B D8 8B 44  ..\..9..V.t....D
  35E0: 08 66 C1 E0 10 8B 44 04 E8 43 01 E8 25 01 8B 5C  .f....D..C..%..\
  35F0: 04 0B DB 0F 84 5F FF 8B 44 08 E8 33 00 66 C1 E0  ....._..D..3.f..
  3600: 10 33 C0 E8 28 01 E9 4D FF E8 61 01 89 4C 04 C3  .3..(..M..a..L..
  3610: 51 53 E8 C2 00 83 C3 0C E8 DE 08 8B C8 5B B0 14  QS...........[..
  3620: E8 51 FE 74 09 F6 C1 01 74 04 83 67 02 FD 59 C3  .Q.t....t..g..Y.
  3630: 53 83 7C 02 0A 74 09 8B 5C 0A 0B DB 74 02 8B C3  S.|..t..\...t...
  3640: 5B C3 3C 01 74 02 3C 02 C3 53 E8 8A 00 E8 A9 08  [.<.t.<..S......
  3650: 5B C3 E8 F4 FF 66 C1 E8 10 C3 53 E8 79 00 83 C3  [....f....S.y...
  3660: 08 E8 95 08 5B C3 57 B0 04 E8 17 FE C6 47 02 01  ....[.W......G..
  3670: 8B 05 E8 CD FF 75 0D F7 04 11 00 74 07 C6 47 02  .....u.....t..G.
  3680: 02 83 C3 08 8B 04 89 47 08 E8 C6 FF 66 89 47 04  .......G....f.G.
  3690: 5F C3 53 57 52 E8 3F 00 83 C3 04 E8 5B 08 8B D0  _.SWR.?.....[...
  36A0: E8 91 FC 75 14 8B 5C 08 8B D3 E8 D5 F8 E8 A4 FD  ...u..\.........
  36B0: 75 07 8B D0 E8 8F FC 8B C2 5A 5F 5B C3 E8 D2 FF  u........Z_[....
  36C0: 66 C1 E8 10 B4 11 E8 25 00 C3 E8 C5 FF 66 C1 E8  f......%.....f..
  36D0: 18 B4 10 E8 18 00 C3 51 52 33 C9 8A CE 80 E1 07  .......QR3......
  36E0: 49 B8 10 00 F7 E1 BB 14 30 03 D8 5A 59 C3 57 53  I.......0..ZY.WS
  36F0: 51 3C FF 75 04 33 C0 EB 16 33 C9 8A C8 8A C4 BB  Q<.u.3...3......
  3700: 03 71 E8 4F FD E8 7B FD 83 C3 02 03 D9 8A 07 59  .q.O..{........Y
  3710: 5B 5F C3 B0 01 E8 6B FD 74 13 E8 A0 FF 88 47 02  [_....k.t.....G.
  3720: B0 02 E8 5E FD 74 06 E8 A0 FF 88 47 02 C3 E8 23  ...^.t.....G...#
  3730: FD 74 23 56 8B 5D 02 E8 33 00 03 DE 5E 0B C0 74  .t#V.]..3...^..t
  3740: 07 C6 47 03 01 89 47 04 66 C1 E8 10 0B C0 74 06  ..G...G.f.....t.
  3750: C6 07 01 89 47 01 C3 8B DA B0 14 E8 16 FD 74 03  ....G.........t.
  3760: 8B 5F 02 C3 BF BE 01 8B 3D 8B 7D 0C C3 BE BE 01  ._......=.}.....
  3770: 8B 34 8B 74 30 C3 1E 0E 1F BF BE 01 8B 3D 8B 7D  .4.t0........=.}
  3780: 0E 83 C7 04 1F C3 BE BE 01 8B 34 8B 74 10 C3 BF  ..........4.t...
  3790: BE 01 8B 3D 8B 7D 26 83 C7 04 C3 BF BE 01 8B 3D  ...=.}&........=
  37A0: 8B 7D 40 C3 BE BE 01 8B 34 8B 74 1A C3 BF BE 01  .}@.....4.t.....
  37B0: 8B 3D 8B 7D 3A C3 BF BE 01 8B 3D 8B 7D 0A 83 C7  .=.}:.....=.}...
  37C0: 04 B9 08 00 C3 E8 01 00 CB 83 EC 06 8B EC 89 46  ...............F
  37D0: 00 66 33 C0 C6 46 04 00 89 46 02 06 52 8A D3 8B  .f3..F...F..R...
  37E0: C5 E8 E3 19 5A 07 83 C4 06 C3 E8 77 FF F7 45 50  ....Z......w..EP
  37F0: 01 00 C3 E8 6E FF 83 4D 50 01 C3 E8 66 FF 88 45  ....n..MP...f..E
  3800: 58 C3 83 EC 14 8B EC 66 89 5E 00 66 89 4E 04 8C  X......f.^.f.N..
  3810: D0 66 C1 E0 10 8B C4 BB 00 00 E8 AC FF 83 C4 14  .f..............
  3820: E8 78 01 BB 04 00 E8 7C FB 66 C1 E8 10 E8 CB FF  .x.....|.f......
  3830: C3 E8 30 FF 66 8B 5D 08 66 8B 4D 0C C3 57 E8 23  ..0.f.].f.M..W.#
  3840: FF 66 8B 45 28 5F C3 83 EC 04 8B EC 89 4E 00 8C  .f.E(_.......N..
  3850: D0 66 C1 E0 10 8B C4 BB 38 00 E8 6C FF 8B EC 8A  .f......8..l....
  3860: 6E 02 83 C4 04 C3 C3 B0 02 C3 B0 02 C3 B0 02 C3  n...............
  3870: B0 08 C3 E8 EE FE 8B 45 56 0B C0 C3 53 66 50 66  .......EV...SfPf
  3880: 33 C0 E8 DF 05 83 C3 04 E2 F8 66 58 5B C3 32 C0  3.........fX[.2.
  3890: C3 66 B8 C0 D4 01 00 C3 B5 01 C3 53 BF BE 01 8B  .f.........S....
  38A0: 3D 8B 7D 38 0B FF 74 15 8B 1D 03 DF 83 C7 04 3A  =.}8..t........:
  38B0: 45 08 74 09 83 C7 0C 3B FB 72 F4 33 FF 0B FF 5B  E.t....;.r.3...[
  38C0: C3 FC E8 34 06 66 C1 CB 10 E8 98 05 66 C1 CB 10  ...4.f......f...
  38D0: 66 81 C3 04 00 04 00 E2 E9 C3 FC 66 AD E8 84 05  f..........f....
  38E0: 83 C3 04 E2 F6 C3 FC E8 0F 06 66 AB 83 C3 04 E2  ..........f.....
  38F0: F6 C3 66 50 B8 64 00 E8 10 00 66 58 C3 66 50 B8  ..fP.d....fX.fP.
  3900: 50 C3 D1 E1 E8 03 00 66 58 C3 52 F7 E1 8B CA E8  P......fX.R.....
  3910: 00 04 66 53 8B D9 66 C1 E3 10 8B D8 66 B8 04 C4  ..fS..f.....f...
  3920: 00 00 B2 00 66 EF B2 04 66 33 C0 66 EF 66 B8 08  ....f...f3.f.f..
  3930: C4 00 00 B2 00 66 EF B2 04 66 ED 33 C9 66 03 D8  .....f...f.3.f..
  3940: 73 0A 66 ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B  s.f.f.....u.f.f;
  3950: C3 73 0C 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66  .s.f...;.r.....f
  3960: 5B 5A C3 BB 02 31 E8 69 05 66 33 D2 66 BB 64 00  [Z...1.i.f3.f.d.
  3970: 00 00 66 F7 F3 C3 66 50 53 BB 07 00 E8 26 FA 25  ..f...fPS....&.%
  3980: 00 02 35 00 02 0B C0 5B 66 58 C3 BB 0A 15 E8 41  ..5....[fX.....A
  3990: 05 C3 32 FF D1 E3 03 F3 8B 1C C3 E8 ED FF 66 3D  ..2...........f=
  39A0: 00 08 00 00 76 06 BB 0C 15 E8 26 05 66 C1 E0 0A  ....v.....&.f...
  39B0: 66 83 E8 20 E8 ED FD 66 89 44 04 C7 44 08 20 00  f.. ...f.D..D. .
  39C0: C3 56 1E 0E 1F E8 DC FD 66 8B 44 04 66 C1 E0 0A  .V......f.D.f...
  39D0: 1F 5E C3 E8 C5 FF BB 00 7C 06 E8 BE FD 0E 07 BB  .^......|.......
  39E0: 00 7C E8 14 05 66 3B 05 75 19 B9 80 00 FC E8 F5  .|...f;.u.......
  39F0: FE BB 00 7E BF BE 01 8B 3D 8B 7D 22 B9 80 00 FC  ...~....=.}"....
  3A00: E8 E3 FE E8 5E FD 8B F7 E8 90 FD 66 8B 45 08 66  ....^......f.E.f
  3A10: 0B C0 74 04 66 89 44 14 66 8B 45 04 66 0B C0 74  ..t.f.D.f.E.f..t
  3A20: 04 66 89 44 08 66 8B 45 0C 66 89 44 0C 8B DF 83  .f.D.f.E.f.D....
  3A30: C3 28 B9 04 00 66 8B 47 04 66 0B C0 75 0F 83 EB  .(...f.G.f..u...
  3A40: 08 E2 F2 66 C7 44 28 F0 D2 00 00 EB 63 66 89 44  ...f.D(.....cf.D
  3A50: 28 8A 07 80 7D 03 08 72 57 8B DF 81 C3 D4 00 B9  (...}..rW.......
  3A60: 05 00 3A 47 04 74 07 83 C3 08 E2 F6 EB 42 66 33  ..:G.t.......Bf3
  3A70: C0 8A 47 06 66 33 D2 66 BB 71 02 00 00 66 F7 E3  ..G.f3.f.q...f..
  3A80: 66 BA 78 5D 02 00 66 2B D0 66 8B C2 66 33 D2 66  f.x]..f+.f..f3.f
  3A90: BB 64 00 00 00 66 F7 F3 89 44 2E 8B 45 3C 0B C0  .d...f...D..E<..
  3AA0: 74 0E 89 44 52 3D 10 27 72 06 B8 88 13 89 44 4C  t..DR=.'r.....DL
  3AB0: 57 03 7D 56 8A 85 86 00 5F 88 44 3C B8 DF FF 21  W.}V...._.D<...!
  3AC0: 44 50 8B 45 40 0B C0 74 14 83 4C 50 20 80 BD 3F  DP.E@..t..LP ..?
  3AD0: 01 00 74 09 50 8A 85 3F 01 88 44 2D 58 E8 A6 FC  ..t.P..?..D-X...
  3AE0: 0B F6 74 03 89 44 32 E8 9C FC 0B F6 74 70 8B 45  ..t..D2.....tp.E
  3AF0: 58 0B C0 74 08 89 44 22 B0 02 08 44 30 8B 85 34  X..t..D"...D0..4
  3B00: 01 0B C0 74 03 89 44 40 F6 85 36 01 08 74 24 80  ...t..D@..6..t$.
  3B10: 64 28 FD F6 85 36 01 01 74 04 80 4C 28 02 80 64  d(...6..t..L(..d
  3B20: 28 8F F6 85 36 01 04 75 06 80 4C 28 10 EB 04 80  (...6..u..L(....
  3B30: 4C 28 20 F6 45 34 01 75 05 C7 44 20 00 00 57 03  L( .E4.u..D ..W.
  3B40: 7D 56 8A 85 87 00 88 44 42 5F B9 07 00 8D 9D 38  }V.....DB_.....8
  3B50: 01 8A 07 0A C0 74 03 88 44 34 43 46 E2 F3 57 8B  .....t..D4CF..W.
  3B60: 9D 10 01 0B DB 74 1C B0 09 E8 2F FD 74 05 89 5D  .....t..../.t..]
  3B70: 04 EB 10 B0 07 E8 23 FD 89 5D 04 B0 0B E8 1B FD  ......#..]......
  3B80: 89 5D 04 5F 8D 9D 18 01 B0 05 E8 52 00 8D 9D 1C  .]._.......R....
  3B90: 01 B0 04 E8 49 00 8D 9D 14 01 B0 06 E8 40 00 BB  ....I........@..
  3BA0: 04 71 B0 09 E8 CD F8 74 0C 57 03 7D 56 8A 85 85  .q.....t.W.}V...
  3BB0: 00 88 47 04 5F 80 7D 03 07 72 22 8A 45 5C 0A C0  ..G._.}..r".E\..
  3BC0: 74 1B B9 28 00 8D 36 A9 00 83 C6 02 8D 5D 5C 8A  t..(..6......]\.
  3BD0: 07 0A C0 75 02 B0 20 88 04 43 46 E2 F2 07 C3 57  ...u.. ..CF....W
  3BE0: E8 B8 FC 74 13 8B 07 0B C0 74 0D 89 45 04 8B 47  ...t.....t..E..G
  3BF0: 02 0B C0 74 03 89 45 06 5F C3 57 E8 66 FB 8B 45  ...t..E._.W.f..E
  3C00: 52 5F C3 56 E8 7F FB 8B 4C 22 8A 44 29 5E C3 BE  R_.V....L".D)^..
  3C10: BE 01 8B 34 8B 74 1E 83 C6 04 B9 29 00 C3 E8 7A  ...4.t.....)...z
  3C20: FB F6 45 34 01 75 03 33 FF C3 56 53 33 FF E8 55  ..E4.u.3..VS3..U
  3C30: FB 8B 5C 20 0B DB 74 12 03 F3 80 3C 04 75 0B 80  ..\ ..t....<.u..
  3C40: 7C 01 80 72 05 8B FE 83 C7 02 5B 5E C3 56 E8 35  |..r......[^.V.5
  3C50: FB 8A 6C 28 80 E5 70 C0 ED 04 5E C3 56 E8 26 FB  ..l(..p...^.V.&.
  3C60: 53 81 C3 09 01 E8 91 02 8A E8 5B 53 81 C3 00 01  S.........[S....
  3C70: E8 86 02 5B 8A C5 66 89 44 3C 5E C3 56 E8 06 FB  ...[..f.D<^.V...
  3C80: 66 8B 44 3C 53 81 C3 00 01 E8 D8 01 5B 53 81 C3  f.D<S.......[S..
  3C90: 08 01 B1 01 8A E8 E8 0F 02 5B 5E C3 56 E8 E6 FA  .........[^.V...
  3CA0: 8B FE 83 C7 04 5E C3 56 E8 DB FA 8A 44 28 80 FD  .....^.V....D(..
  3CB0: 00 74 0E 24 8F C0 E5 04 0A C5 80 FD 20 75 02 0C  .t.$........ u..
  3CC0: 02 24 FE 81 7C 04 34 21 76 02 0C 01 88 44 28 E8  .$..|.4!v....D(.
  3CD0: 51 F6 75 04 80 4C 30 01 5E C3 57 E8 BD FA 8A 45  Q.u..L0.^.W....E
  3CE0: 34 5F 80 FB 02 75 07 A8 04 75 1B 0C 01 C3 80 FB  4_...u...u......
  3CF0: 01 75 07 A8 02 75 0F 0C 01 C3 80 FB 81 75 07 A8  .u...u.......u..
  3D00: 08 75 03 0C 01 C3 32 C0 C3 E8 8F FA 66 8B 45 38  .u....2.....f.E8
  3D10: C3 00 66 50 8C C8 3D 00 C0 75 10 BA C3 03 EC 8A  ..fP..=..u......
  3D20: F0 0A F6 74 06 B2 4C 66 ED EB 17 53 2E 8B 1E B2  ...t..Lf...S....
  3D30: 01 B2 20 E8 DD 00 A8 01 75 05 B2 14 E8 D4 00 8A  .. .....u.......
  3D40: F4 5B 32 D2 66 58 C3 2E 8B 1E B2 01 C3 0B C9 75  .[2.fX.........u
  3D50: 1A 4B 74 16 43 3B DA 77 09 8B C8 8B C2 2B D2 F7  .Kt.C;.w.....+..
  3D60: F3 91 F7 F3 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75  ........+..;.r.u
  3D70: 10 3B D8 77 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00  .;.w.+...+.+....
  3D80: C3 2B C9 2B DB 93 87 CA C3 55 56 2B F6 8B EE 03  .+.+.....UV+....
  3D90: DB 13 C9 72 11 45 3B CA 72 F5 77 04 3B D8 76 EF  ...r.E;.r.w.;.v.
  3DA0: F8 13 F6 4D 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72  ...Mx ....+....r
  3DB0: F0 03 F6 4D 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1  ...Mx.........s.
  3DC0: EB DF 03 C3 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D  ............3.^]
  3DD0: C3 93 50 92 0B C0 74 02 F7 E2 91 0B C0 74 04 F7  ..P...t......t..
  3DE0: E3 03 C8 58 F7 E3 03 D1 C3 52 66 50 B4 80 8A C7  ...X.....RfP....
  3DF0: 66 C1 E0 10 8A E3 8A C2 24 FC BA F8 0C 66 EF 66  f.......$....f.f
  3E00: 58 5A C3 52 BA FC 0C 66 ED 5A C3 52 BA FC 0C 66  XZ.R...f.Z.R...f
  3E10: EF 5A C3 E8 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3  .Z..1...........
  3E20: E8 24 FF 9C FA E8 C1 FF E8 E0 FF 9D C3 52 66 53  .$...........RfS
  3E30: 66 50 E8 06 00 66 58 66 5B 5A C3 66 C1 E3 10 66  fP...fXf[Z.f...f
  3E40: C1 EB 0E E8 CC FE E8 4C 01 C3 66 50 66 C1 E3 10  .......L..fPf...
  3E50: 66 C1 EB 10 E8 6A FB 66 03 D8 66 81 CB 00 00 00  f....j.f..f.....
  3E60: 80 66 58 C3 52 66 53 E8 04 00 66 5B 5A C3 66 50  .fX.RfS...f[Z.fP
  3E70: E8 9F FE E8 D4 FF E8 1C 01 66 58 C3 52 51 66 53  .........fX.RQfS
  3E80: 66 50 8A CB 80 E3 FC 80 E1 03 C0 E1 03 E8 82 FE  fP..............
  3E90: E8 B7 FF E8 E6 00 66 D3 C8 58 50 66 D3 C0 E8 F4  ......f..XPf....
  3EA0: 00 66 58 66 5B 59 5A C3 66 50 51 C0 E1 03 E8 48  .fXf[YZ.fPQ....H
  3EB0: 00 66 D3 C8 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3  .f....f.....YfX.
  3EC0: 66 50 51 C0 E1 03 E8 30 00 66 D3 C8 59 8A E8 66  fPQ....0.f..Y..f
  3ED0: 58 C3 E8 54 00 C3 E8 39 FE 66 C1 E3 10 66 C1 EB  X..T...9.f...f..
  3EE0: 0E E8 98 00 C3 52 66 53 E8 04 00 66 5B 5A C3 E8  .....RfS...f[Z..
  3EF0: 20 FE E8 55 FF E8 84 00 C3 51 66 52 8A EB 8A CB   ..U.....QfR....
  3F00: 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9 00 74  ...............t
  3F10: 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66 92 66  .f...........f.f
  3F20: 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8 A7 FF 66  .....fZY.RfS...f
  3F30: 5B 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56  [Z.fPURfP...V..V
  3F40: 08 E8 CE FD 33 C0 B2 18 EF B2 00 66 ED 66 89 46  ....3......f.f.F
  3F50: 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8 B3 FD B2  .fXZ].fPUR......
  3F60: 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66 8B 46  .f.F.f..V..V.f.F
  3F70: 04 66 89 46 08 5A 5D 66 58 66 58 C3 66 81 FB FF  .f.F.Z]fXfX.f...
  3F80: 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF  ...w.....f....f.
  3F90: B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3  ..f..f......w...
  3FA0: EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3  ..f...f.f...f...
  3FB0: C3 C3 C3 C3 C3 C3 C3 C3 C3 55 8B EC 53 51 8B F0  .........U..SQ..
  3FC0: 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC 59 5B  &.\.&.L..(..f.Y[
  3FD0: 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14 00 59  ].SQ..&.\$3....Y
  3FE0: 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26 8B 4C  [.U..SQ..&.\.&.L
  3FF0: 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E FE 8C  ...RVW.......N..
  4000: D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20 00 2B  ...&.|&.E.2.. .+
  4010: C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D  ...............M
  4020: 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7 D0 F7  .2..............
  4030: D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26 8B 7C  .&!D.&!|.....&.|
  4040: 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66 C7 46  &.M.2.. .+...f.F
  4050: FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2 F8 8A  ........n..^....
  4060: 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1 D8 E2  M.2....V........
  4070: FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06 D1 E0  .#F.#V..M.2.....
  4080: D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F 5E 5A  ....&.D.&.T.._^Z
  4090: C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F 26 8A  .U..SQRWP..&..&.
  40A0: 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06  E.2.. .+........
  40B0: D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46 F7 00  .......M..N..F..
  40C0: 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26 09 47  ...N.........&.G
  40D0: 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53 51 52  .&....f._Z...SQR
  40E0: 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01 32 ED  W......&.w&.L.2.
  40F0: B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06 D1 EA  . .+............
  4100: D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B C6 E3  ....&..&.M.2....
  4110: 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 1C 26  ...........&!G.&
  4120: 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E C2 26  !W._...SV......&
  4130: 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A 44 01  .w&.<.ts.<.uX.D.
  4140: 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75 46 8A  2.&....uL&;G.uF.
  4150: 04 6B F0 03 8A 84 7C A4 26 01 47 26 8C D0 8E C0  .k....|.&.G&....
  4160: 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B F0 03  &.w&.<.t...2.k..
  4170: 8B C3 FF 94 7A A4 26 8B 77 26 8A 04 32 E4 EB D1  ....z.&.w&..2...
  4180: 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47 1C 26  .D.&)G&&.G&&.G.&
  4190: 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B F0 03  .w...&.w&..2.k..
  41A0: 8A 84 7C A4 26 01 47 26 E9 80 FF 33 C0 33 F6 8B  ..|.&.G&...3.3..
  41B0: D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26 8B 54  .^[.SQRV...w5&.T
  41C0: 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26 8B 47  .&.W.&.G.....&.G
  41D0: 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E C1 26   3.&.G.&.T.....&
  41E0: F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75 22 26  .G/.....&..4.u"&
  41F0: 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26 D1 57  .w.&.w.u.&.g.&.W
  4200: 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 E4 11 E9 E1  .&.g.&.W........
  4210: 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47 1C 26  .&.G42.....&.G.&
  4220: 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B D8 8D  .W.........SV...
  4230: 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37 26 8B  w5&.D.2....&.7&.
  4240: 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04 26 89  4..&.G.&._.&..&.
  4250: 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77 35 8E  \.^[.SRV.....w5.
  4260: C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02 32 F6  .&.T...@s!&.w.2.
  4270: C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26 8B 47  ...&.t...&.W.&.G
  4280: 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41 75 12  .&..&.D......Au.
  4290: 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89 57 12  &.G.&.W.&.G.&.W.
  42A0: EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57 0A 26  .h..@u.&.G.&.W.&
  42B0: 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A 26 8B  .G.&.W..Q..Bu.&.
  42C0: 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26 8A 47  G.&.G".B..Cu.&.G
  42D0: 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B 57 08  .&.G3.3..Fu.&.W.
  42E0: 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C 80 FA  &.G.&.W.&.G.....
  42F0: 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80 FA 48  Gu.&.G.&.G$....H
  4300: 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3 53 56  u.&.G.&.G ^Z[.SV
  4310: 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47 14 26  ...w5&.D.2.&.G.&
  4320: C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B 77 02  .G...^[.SV..&.w.
  4330: 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7 47 16  &.t...2.&.G.&.G.
  4340: 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53 56 8B  ..&._.&.G.^[.SV.
  4350: D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77 14 26  .&.w.&.t..4&.w.&
  4360: C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02 5E 5B  .G...&._.&.G..^[
  4370: C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B 04 8B  .SV..&.w.&.t....
  4380: 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02 26 83  t.&.G.&.w.&._.&.
  4390: 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF 8B F3  G..^[.SRV...p...
  43A0: 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8  &.G.&.W.........
  43B0: 26 01 47 14 26 11 54 16 8B C3 E8 96 10 E9 4A FF  &.G.&.T.......J.
  43C0: 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53 8B D8  S..&._.&.G.[.S..
  43D0: 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B D8 E8  &._.&.G..[.SV...
  43E0: 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14 26 11  k...&.W 3.&.W.&.
  43F0: 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4 06 3D  D.....&.G.2....=
  4400: 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47 2E 32  ..u.2.3.^[.&.G.2
  4410: C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00 75 08  ....=..t.&..4.u.
  4420: 8B C3 E8 9A 0F 5E 5B C3 26 8A 47 34 32 E4 26 89  .....^[.&.G42.&.
  4430: 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E 5B C3  G.&.G........^[.
  4440: 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26 8B 1F  S.....&.G....&..
  4450: 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3 64 44  &....&..&.W.[.dD
  4460: 59 44 6F 44 BE 44 75 44 8D 44 A7 44 B2 44 B8 44  YDoD.DuD.D.D.D.D
  4470: 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83 7F 16  SQV.........&...
  4480: 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02 26 8B  .u"&...@s.&.w.&.
  4490: 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07 26 8B  _....&.D...&..&.
  44A0: 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83 C6 C0  W..{.&.w.&.G....
  44B0: 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF A4 F6  ...uq...wl......
  44C0: 43 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B 47 0C  C&.G.&.W..T.&.G.
  44D0: 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26 8A 4F  &.W..I.&.G".K&.O
  44E0: 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2 E2 FA  32....3.........
  44F0: 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00 33 D2  ...+.&.O32....3.
  4500: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11 05 26  ...............&
  4510: 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24 EB 08  .G.&.W....&.G$..
  4520: 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53 56 8B  &.G ..3.3....SV.
  4530: D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A D1 EA  ......&.G.&.W...
  4540: D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16 8B C3  ......&.G.&.T...
  4550: E8 81 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B D8 E8  ...^[.3.3..SV...
  4560: EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54 02 5E  ..&.w.&.w"...T.^
  4570: 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26 8B 47  [.S..&.G+....&.G
  4580: 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B 01 E8  .&.W.[.S..&.G+..
  4590: BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2 FD EB  ....S..&.G+.....
  45A0: DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03 80 E3  .S....5&._......
  45B0: 07 32 FF 03 DB FF 97 0A A4 5B C3 53 52 56 8B D8  .2.......[.SRV..
  45C0: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 26 A4  &.G,2.........&.
  45D0: 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4 8B F0  &.G.&.W.&.G-2...
  45E0: 03 F0 8B C3 FF 94 3E A4 26 89 47 04 26 89 57 06  ......>.&.G.&.W.
  45F0: E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1  ...SQV..&.O+2...
  4600: 8A 8C 6E A4 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6  ..n...&.o.&._...
  4610: 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 4E A4 8B  &.O+2........N..
  4620: B4 50 A4 26 21 4F 04 26 21 77 06 26 8A 4F 2A 32  .P.&!O.&!w.&.O*2
  4630: ED 8B F1 8A 8C 76 A4 E3 0A 26 D1 67 04 26 D1 57  .....v...&.g.&.W
  4640: 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F 14 26  ...&.O.&.w.&.O.&
  4650: 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C D0 8E  .w....SQRVW.....
  4660: C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A  .&.G+2......&.G*
  4670: 8B F8 8A 8D 76 A4 32 ED 8B 84 4E A4 8B 94 50 A4  ....v.2...N...P.
  4680: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 14  ............&!G.
  4690: 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C 76 A4  &!W.&.G*2.....v.
  46A0: 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A  2...&.o.&._...&.
  46B0: 47 2B 8B F0 C1 E6 02 8B 84 4E A4 8B 94 50 A4 26  G+.......N...P.&
  46C0: 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B F0 8A  !G.&!W.&.G*2....
  46D0: 8C 76 A4 32 ED E3 0A 26 D1 67 08 26 D1 57 0A E2  .v.2...&.g.&.W..
  46E0: F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09 57  .&.G.&.W.&.G.&.W
  46F0: 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A 4F 2B  ._^ZY[.SQV..&.O+
  4700: 32 ED 8B F1 8A 8C 6E A4 E3 0A 26 D1 6F 06 26 D1  2.....n...&.o.&.
  4710: 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B  _...&.O+2.......
  4720: 8C 4E A4 8B B4 50 A4 26 21 4F 04 26 21 77 06 26  .N...P.&!O.&!w.&
  4730: 8A 4F 2A 32 ED 8B F1 8A 8C 76 A4 E3 0A 26 D1 6F  .O*2.....v...&.o
  4740: 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1  .&._...&.O+2....
  4750: E6 02 8B 8C 4E A4 8B B4 50 A4 26 21 4F 08 26 21  ....N...P.&!O.&!
  4760: 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0 26 80  w....QRW......&.
  4770: 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03 F0 8B  .+.t.&.G,2......
  4780: C3 FF 94 26 A4 26 89 47 08 26 89 57 0A EB 10 26  ...&.&.G.&.W...&
  4790: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 32 A4 26  .G,2.........2.&
  47A0: 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 3E A4 26  .G-2.........>.&
  47B0: 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F 2B 00  .G.&.W.....&..+.
  47C0: 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47  tJ&.G+2......&.G
  47D0: 2A 8B F8 8A 8D 76 A4 32 ED 8B 84 4E A4 8B 94 50  *....v.2...N...P
  47E0: A4 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  .............&!G
  47F0: 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04 26 8B  .&!W......&.G.&.
  4800: 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B 57 04  W.&.G.&.W...&.W.
  4810: 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A 47 2C  &.G.&.W.&.G.&.G,
  4820: 32 E4 8B F0 03 F0 8B C3 FF 94 1A A4 5F 5A 59 C3  2..........._ZY.
  4830: 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B F0 8A  SQRVW..&.G*2....
  4840: 8C 76 A4 32 ED E3 0A 26 D1 67 04 26 D1 57 06 E2  .v.2...&.g.&.W..
  4850: F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02  .....&.G+2......
  4860: 26 8A 47 2A 8B F8 8A 8D 76 A4 32 ED 8B 84 4E A4  &.G*....v.2...N.
  4870: 8B 94 50 A4 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2  ..P.............
  4880: 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B 57 06  &.G.&.W.&.G.&.W.
  4890: 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC 51 52  &!G.&!W..V.U..QR
  48A0: 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  P..&.G,2........
  48B0: 94 26 A4 26 89 47 08 26 89 57 0A 26 8A 47 2B 88  .&.&.G.&.W.&.G+.
  48C0: 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57 06 26  F......&.G.&.W.&
  48D0: 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 3E A4 26  .O-2.........>.&
  48E0: 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46 FA 32  .G.&.W....D..F.2
  48F0: E4 8B F0 8A 8C 6E A4 E3 0A 26 D1 6F 16 26 D1 5F  .....n...&.o.&._
  4900: 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02 8B 84  ...&.W+2........
  4910: 4E A4 8B 94 50 A4 26 21 47 14 26 21 57 16 26 8A  N...P.&!G.&!W.&.
  4920: 47 2A 32 E4 8B F0 8A 8C 76 A4 32 ED E3 0A 26 D1  G*2.....v.2...&.
  4930: 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B 57 16  g.&.W...&.G.&.W.
  4940: 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4 8B F0  &.G.&.W.&.G,2...
  4950: 03 F0 8B C3 FF 94 1A A4 8D 66 FC 5A 59 5D C3 51  .........f.ZY].Q
  4960: 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A 8C 6E  ...V.&.O+2.....n
  4970: A4 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B C3 E8  ...&.o.&._......
  4980: AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94  ..&.O,2.........
  4990: 1A A4 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC 26 8B  ..Y...."....U.&.
  49A0: 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A 26 8A  G.&.w.&.G.&.w.&.
  49B0: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 1A A4 C3 53  G,2............S
  49C0: 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47 04 26  V........(.&.G.&
  49D0: 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47 2C 32  .w.&1G.&1w.&.G,2
  49E0: E4 8B F0 03 F0 8B C3 FF 94 1A A4 5E 5B C3 53 51  ...........^[.SQ
  49F0: 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F 04 E3  V..........&.O..
  4A00: 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8 46 FC  .&.g.&.W......F.
  4A10: 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94 1A A4  &.O,2...........
  4A20: 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3 E8 C2  ^Y[.SQV.........
  4A30: FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2  .&.O...&.o.&._..
  4A40: F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB 8B F3  ...R...r........
  4A50: 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11 54 0A  &.G.&.W.&.G.&.T.
  4A60: 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03 F0 8B  .....&.G,2......
  4A70: C3 FF 94 1A A4 5A C3 52 8B D8 E8 3E FB 8B C3 E8  .....Z.R...>....
  4A80: 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29 47 08  q...&.G.&.W.&)G.
  4A90: 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B C6 E8  &.T...QR........
  4AA0: 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B  U.&.D.&.T.&.\.&.
  4AB0: 4C 06 E8 1C F3 26 89 44 0C 26 89 54 0E 5A 59 C3  L....&.D.&.T.ZY.
  4AC0: 51 52 57 8B F0 E8 F3 FA 8B C6 E8 2A FC 26 8B 44  QRW........*.&.D
  4AD0: 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 6D F2  .&.T.&.\.&.L..m.
  4AE0: 26 89 44 0C 26 89 54 0E 8C D7 8E C7 26 8B 44 08  &.D.&.T.....&.D.
  4AF0: 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 4E F2 26  &.T.&.\.&.L..N.&
  4B00: 89 5C 10 26 89 4C 12 E9 22 FD 51 52 8B D8 E8 AA  .\.&.L..".QR....
  4B10: FA 8B C3 E8 E1 FB 8C D1 8E C1 26 8B 47 08 26 8B  ..........&.G.&.
  4B20: 57 0A 26 3B 57 06 75 0E 26 3B 47 04 75 08 26 C6  W.&;W.u.&;G.u.&.
  4B30: 47 30 01 5A 59 C3 8B D0 26 8B 47 0A 26 3B 47 06  G0.ZY...&.G.&;G.
  4B40: 72 08 75 0A 26 3B 57 04 73 04 33 C0 EB 03 B8 02  r.u.&;W.s.3.....
  4B50: 00 26 88 47 30 5A 59 C3 51 52 57 8B D8 26 8A 47  .&.G0ZY.QRW..&.G
  4B60: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 26 A4 26 89 47  ,2.........&.&.G
  4B70: 08 26 89 57 0A 8C D0 8E C0 26 8A 47 2B 32 E4 8B  .&.W.....&.G+2..
  4B80: F0 C1 E6 02 8B F8 8A 8D 6E A4 32 ED 8B 84 4E A4  ........n.2...N.
  4B90: 8B 94 50 A4 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2  ..P.............
  4BA0: 26 21 47 08 26 21 57 0A E9 71 FC 55 8B EC 51 52  &!G.&!W..q.U..QR
  4BB0: 57 83 EC 06 8B D8 26 8A 47 2B 32 E4 8B F0 C1 E6  W.....&.G+2.....
  4BC0: 02 8B F8 8A 8D 6E A4 32 ED 8B 84 4E A4 89 46 F4  .....n.2...N..F.
  4BD0: 8B 84 50 A4 89 46 F6 E3 08 D1 66 F4 D1 56 F6 E2  ..P..F....f..V..
  4BE0: F8 8B 7E F4 8B 46 F6 89 46 F8 26 8A 47 2C 32 E4  ..~..F..F.&.G,2.
  4BF0: 8B F0 03 F0 8B C3 FF 94 26 A4 26 89 47 08 26 89  ........&.&.G.&.
  4C00: 57 0A 8B C3 E8 6B F9 26 89 47 04 26 89 57 06 8B  W....k.&.G.&.W..
  4C10: C7 F7 D0 8B 56 F6 F7 D2 26 23 47 08 26 23 57 0A  ....V...&#G.&#W.
  4C20: 26 89 47 14 26 89 57 16 26 21 7F 08 8B 46 F6 26  &.G.&.W.&!...F.&
  4C30: 21 47 0A 8C D1 8D 77 35 8E C1 26 80 3C 19 73 12  !G....w5..&.<.s.
  4C40: 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6  &.O...&.g.&.W...
  4C50: EB 10 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08  ..&.O...&.o.&._.
  4C60: E2 F6 26 21 7F 08 8B 46 F8 26 21 47 0A 26 8B 57  ..&!...F.&!G.&.W
  4C70: 14 26 8B 47 16 26 09 57 08 26 09 47 0A 26 8A 47  .&.G.&.W.&.G.&.G
  4C80: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 1A A4 8D 66 FA  ,2............f.
  4C90: 5F E9 C7 FC 52 8B D8 E8 21 F9 8B C3 E8 58 FA 26  _...R...!....X.&
  4CA0: 8B 47 08 26 8B 57 0A 26 85 57 06 75 06 26 85 47  .G.&.W.&.W.u.&.G
  4CB0: 04 74 05 B8 03 00 EB 03 B8 01 00 26 88 47 30 5A  .t.........&.G0Z
  4CC0: C3 53 51 52 56 8B D8 26 8A 4F 2D 32 ED 8B F1 03  .SQRV..&.O-2....
  4CD0: F1 FF 94 3E A4 26 89 47 04 26 89 57 06 26 8A 47  ...>.&.G.&.W.&.G
  4CE0: 2B 32 E4 8B F0 8A 8C 6E A4 E3 0A 26 D1 6F 06 26  +2.....n...&.o.&
  4CF0: D1 5F 04 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84  ._...&.G+.......
  4D00: 4E A4 8B 94 50 A4 26 21 47 04 26 21 57 06 E9 E1  N...P.&!G.&!W...
  4D10: F9 52 8B D8 E8 AA FF 26 8B 47 04 26 8B 57 06 26  .R.....&.G.&.W.&
  4D20: 89 47 18 26 89 57 1A 5A C3 51 52 8B D8 E8 91 FF  .G.&.W.Z.QR.....
  4D30: 8C D0 8E C0 26 8B 77 02 26 8B 74 02 81 3C 5A 5A  ....&.w.&.t..<ZZ
  4D40: 74 5B 26 8B 77 02 26 8B 74 02 80 3C 63 75 E1 26  t[&.w.&.t..<cu.&
  4D50: 8B 77 02 26 FF 44 02 8B C3 E8 45 F8 26 89 47 08  .w.&.D....E.&.G.
  4D60: 26 89 57 0A 8B C3 E8 1E F8 26 89 47 14 26 89 57  &.W......&.G.&.W
  4D70: 16 8C D1 8E C1 26 8B 57 04 26 8B 47 06 26 3B 47  .....&.W.&.G.&;G
  4D80: 0A 75 AD 26 3B 57 08 75 A7 26 8B 77 02 26 8B 04  .u.&;W.u.&.w.&..
  4D90: 26 03 47 14 8B DE 26 89 47 02 5A 59 C3 26 8B 5F  &.G...&.G.ZY.&._
  4DA0: 02 26 83 47 02 02 5A 59 C3 52 57 8B D8 8C D0 8E  .&.G..ZY.RW.....
  4DB0: C0 26 8B 77 02 26 8B 74 02 8A 54 01 84 D2 75 08  .&.w.&.t..T...u.
  4DC0: 26 C7 47 22 00 00 EB 2F 80 FA FF 75 14 26 8B 77  &.G".../...u.&.w
  4DD0: 02 26 8B 3F 26 8B 34 26 2B 75 02 26 89 77 22 EB  .&.?&.4&+u.&.w".
  4DE0: 16 26 8B 07 E8 C7 03 8B F0 8A C2 32 E4 03 C0 03  .&.........2....
  4DF0: F0 8B 04 26 89 47 22 26 8B 5F 02 26 83 47 02 02  ...&.G"&._.&.G..
  4E00: 5F 5A C3 8B D8 26 80 67 2F F9 26 8B 77 02 26 8B  _Z...&.g/.&.w.&.
  4E10: 74 02 8A 44 01 26 88 47 34 26 8B 5F 02 26 83 47  t..D.&.G4&._.&.G
  4E20: 02 03 C3 8B D8 26 8B 77 02 26 8B 74 02 8B 74 01  .....&.w.&.t..t.
  4E30: 26 89 77 20 EB E3 53 8B D8 26 8A 47 2C 32 E4 24  &.w ..S..&.G,2.$
  4E40: 03 26 80 67 2F F9 C1 E0 09 26 09 47 2E E9 73 F5  .&.g/....&.G..s.
  4E50: 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26  ..&.w.&.t..D.2.&
  4E60: 89 47 04 26 C7 47 06 00 00 8B C3 E8 24 05 26 8B  .G.&.G......$.&.
  4E70: 5F 02 26 83 47 02 02 C3 8B D8 26 8B 77 02 26 8B  _.&.G.....&.w.&.
  4E80: 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00  t..D.2.&.G.&.G..
  4E90: 00 8B C3 E8 EC 04 EB D6 53 56 8B D8 26 8B 77 02  ........SV..&.w.
  4EA0: 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47  &.t..D.2.&.G.&.G
  4EB0: 06 00 00 8B C3 E8 EA 04 E9 AA F4 53 56 8B D8 26  ...........SV..&
  4EC0: 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04  .w.&.t..D.2.&.G.
  4ED0: 26 C7 47 06 00 00 8B C3 E8 D4 04 E9 87 F4 53 56  &.G...........SV
  4EE0: 8B D8 26 8B 77 02 8B DE 26 8B 5F 02 8B 5F 01 83  ..&.w...&._.._..
  4EF0: C3 03 26 01 5C 02 5E 5B C3 51 52 8B D8 26 8B 77  ..&.\.^[.QR..&.w
  4F00: 02 26 83 44 02 02 26 8B 07 E8 84 02 8B C8 26 8B  .&.D..&.......&.
  4F10: 77 28 8A 44 01 32 E4 03 C0 8B F1 03 F0 83 3C 00  w(.D.2........<.
  4F20: 74 4F 26 8B 77 28 8A 54 01 32 F6 8B C3 E8 94 02  tO&.w(.T.2......
  4F30: 26 88 47 31 26 8B 77 02 26 8B 34 8B 44 04 C1 E8  &.G1&.w.&.4.D...
  4F40: 08 32 E4 24 7F C1 E8 02 32 E4 24 1F 26 80 67 2F  .2.$....2.$.&.g/
  4F50: 07 C1 E0 0B 26 09 47 2E 26 8B 37 26 8B 47 2E C1  ....&.G.&.7&.G..
  4F60: E8 0B C1 E0 02 26 01 04 26 C6 47 32 01 26 89 4F  .....&..&.G2.&.O
  4F70: 28 5A 59 C3 53 8B D8 26 C6 47 32 82 5B C3 57 8B  (ZY.S..&.G2.[.W.
  4F80: D8 8C D6 8E C6 26 80 7F 2C 05 74 0A 26 8A 47 2C  .....&..,.t.&.G,
  4F90: 26 3A 47 30 75 1E 26 8B 77 02 26 8B 74 02 26 8B  &:G0u.&.w.&.t.&.
  4FA0: 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89  ..&.=.t...&._.&.
  4FB0: 77 02 5F C3 26 8B 5F 02 26 83 47 02 03 5F C3 53  w._.&._.&.G.._.S
  4FC0: 56 57 8B D8 8C D6 8E C6 26 80 7F 30 01 74 0A 26  VW......&..0.t.&
  4FD0: 8A 47 30 26 3A 47 2C 75 20 26 8B 77 02 26 8B 74  .G0&:G,u &.w.&.t
  4FE0: 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F  .&...&.=.t...&._
  4FF0: 02 26 89 77 02 5F 5E 5B C3 26 8B 5F 02 26 83 47  .&.w._^[.&._.&.G
  5000: 02 03 EB F1 53 56 57 8B D8 8C D0 8E C0 26 80 7F  ....SVW......&..
  5010: 30 01 74 E5 EB C3 55 8B EC 53 51 52 57 50 8B D8  0.t...U..SQRWP..
  5020: 8C D1 8E C1 26 8B 77 02 26 8B 74 02 8A 04 3C 80  ....&.w.&.t...<.
  5030: 0F 86 D0 00 26 8B 3F 26 8B 77 28 26 8B 55 02 8B  ....&.?&.w(&.U..
  5040: 74 01 03 F2 89 76 F6 26 C6 47 3D 00 26 8B 77 28  t....v.&.G=.&.w(
  5050: F6 44 02 80 74 16 8B 76 F6 8A 24 26 88 67 35 02  .D..t..v..$&.g5.
  5060: C0 0C 01 FF 46 F6 26 FE 47 3D EB 04 80 46 F7 80  ....F.&.G=...F..
  5070: 26 8B 77 02 26 83 44 02 03 3C 80 74 49 A8 80 74  &.w.&.D..<.tI..t
  5080: 17 26 8A 67 3D 8A D4 32 F6 FE C4 26 88 67 3D 8B  .&.g=..2...&.g=.
  5090: F3 03 F2 8B 7E F6 EB 21 26 8B 77 02 26 8B 7C 02  ....~..!&.w.&.|.
  50A0: 8D 55 01 26 89 54 02 26 8A 57 3D 8A CA 32 ED FE  .U.&.T.&.W=..2..
  50B0: C2 26 88 57 3D 8B F3 03 F1 8A 25 26 88 64 35 02  .&.W=.....%&.d5.
  50C0: C0 FF 46 F6 EB B3 26 8A 47 35 8A D0 32 F6 8B F2  ..F...&.G5..2...
  50D0: C1 E6 02 8A A4 9B A4 26 88 67 3D 8D 77 35 26 8A  .......&.g=.w5&.
  50E0: 64 01 80 E4 07 26 88 67 2D 8D 77 35 26 8A 64 01  d....&.g-.w5&.d.
  50F0: C0 EC 03 80 E4 07 26 88 67 2B 8D 77 35 26 8A 64  ......&.g+.w5&.d
  5100: 01 E9 6B 00 26 C6 47 3D 00 8C D7 8E C7 26 80 7F  ..k.&.G=.....&..
  5110: 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26 8B  =.s &.w.&.W=2.&.
  5120: 74 02 03 F2 8B FB 03 FA 8A 24 26 88 65 35 26 FE  t........$&.e5&.
  5130: 47 3D EB D5 26 8B 77 02 8A D0 32 F6 8B FA C1 E7  G=..&.w...2.....
  5140: 02 8A 95 9B A4 26 01 54 02 26 8B 77 28 8A 64 01  .....&.T.&.w(.d.
  5150: 80 E4 07 26 88 67 2D 26 8B 77 28 8A 64 01 C0 EC  ...&.g-&.w(.d...
  5160: 03 80 E4 07 26 88 67 2B 26 8B 77 28 8A 64 01 C0  ....&.g+&.w(.d..
  5170: EC 06 26 88 67 2A 8A D0 32 F6 8B F2 C1 E6 02 8A  ..&.g*..2.......
  5180: A4 9A A4 26 88 67 2C 8D 66 F8 5F 5A 59 5B 5D C3  ...&.g,.f._ZY[].
  5190: 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B  SV..&.w....tH...
  51A0: D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3 53 56  ..t........^[.SV
  51B0: 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B D8 8B  ..&.w....tH.....
  51C0: 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51 56 57  t .......U..SQVW
  51D0: 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89 46 E0  ..@...F.......F.
  51E0: 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46 DE 04  &.E.._....^..F..
  51F0: 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8 C4 FF  ......F.2..F....
  5200: 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00 0F 84  ..2....^....?...
  5210: 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7 46 D8  e..F..f...F...F.
  5220: 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00 00 C6  ..f.F......F....
  5230: 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9 8A C2  F....<......V...
  5240: 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75 26 8B  2....^....?.tu&.
  5250: 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83 C1 09  E......G.2......
  5260: 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0 50 E2  2.......t...3.P.
  5270: FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0 08 26  ......F...tA...&
  5280: 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8 26 8B  .G...2....^...&.
  5290: 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26 8B 07  E....^.&...^.&..
  52A0: 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26 89 77  ...&.G..^..v.&.w
  52B0: 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6 46 EA  ..^..^..F.....F.
  52C0: 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8 10 0F  ....F...F.2.....
  52D0: 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F 8F 83  ....f..F.2......
  52E0: 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E E0 8B  ....^...&._..^..
  52F0: 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA 10 8B  ^.&._..?[uJ.F...
  5300: 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B 1F 8B  ^.&._..^..^.&...
  5310: 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 03 E1  G.2......2......
  5320: 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B 47 04  .^..^...t.&...G.
  5330: C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B 5E B8  ...2.$........^.
  5340: 26 29 07 EB 91 8D 46 B8 E8 CB FC 8A D0 8D 46 B8  &)....F.......F.
  5350: E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF 97 98  .....2.....F....
  5360: A4 E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E EA 10  ..r..~.......~..
  5370: 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E E9 0B  t..F...2..f._^..
  5380: FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 63 E5 59  ..SQ..&.O.2..c.Y
  5390: 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 5E E5 59  [.SQ..&.O.2..^.Y
  53A0: 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B C3 53  [.S..&.G.2...[.S
  53B0: 51 8B D8 26 8A 4F 04 32 ED E8 CE CF 59 5B C3 53  Q..&.O.2....Y[.S
  53C0: 57 8B D8 26 8B 5F 14 E8 0C EB 8B D0 66 C1 E8 10  W..&._......f...
  53D0: 92 5F 5B C3 53 57 8B D8 26 8B 47 14 26 8B 57 16  ._[.SW..&.G.&.W.
  53E0: 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 E8 FF EA  ....f...........
  53F0: EB D8 53 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92  ..SRW..&.G.&.W..
  5400: 66 C1 E0 10 8B C2 26 8B 5F 14 E8 2E EA 5F 5A 5B  f.....&._...._Z[
  5410: C3 53 52 8B D8 26 8B 47 1C 26 8B 57 1E 92 66 C1  .SR..&.G.&.W..f.
  5420: E0 10 8B C2 26 8B 5F 26 8B 5F 01 E8 0D EA 5A 5B  ....&._&._....Z[
  5430: C3 53 52 56 8B F0 26 8B 5C 26 8B 5F 01 E8 96 EA  .SRV..&.\&._....
  5440: 8B D0 66 C1 E8 10 92 26 89 44 1C 26 89 54 1E 5E  ..f....&.D.&.T.^
  5450: 5A 5B C3 53 51 52 57 8B D8 26 8B 47 08 26 8B 57  Z[.SQRW..&.G.&.W
  5460: 0A 92 66 C1 E0 10 8B C2 8B C8 26 8B 47 14 26 8B  ..f.......&.G.&.
  5470: 57 16 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 8B  W.....f.........
  5480: C1 E8 EA E9 5F 5A 59 5B C3 8B D0 66 C1 E8 10 92  ...._ZY[...f....
  5490: C3 00 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  ....fPfQfRfSfUfV
  54A0: 66 57 0E 1F 0A C0 75 06 E8 4F 01 E9 F0 00 3C 01  fW....u..O....<.
  54B0: 75 06 E8 7F 01 E9 E6 00 3C 02 75 06 E8 B3 02 E9  u.......<.u.....
  54C0: DC 00 3C 03 75 0B E8 03 04 8B EC 89 5E 0C E9 CD  ..<.u.......^...
  54D0: 00 3C 04 75 0B E8 12 04 8B EC 89 5E 0C E9 BE 00  .<.u.......^....
  54E0: 3C 05 75 0B E8 3D 05 8B EC 89 56 10 E9 AF 00 3C  <.u..=....V....<
  54F0: 06 75 11 E8 BA 04 8B EC 89 5E 0C 89 4E 14 89 56  .u.......^..N..V
  5500: 10 E9 9A 00 3C 07 75 11 E8 AC 05 8B EC 88 7E 0D  ....<.u.......~.
  5510: 89 4E 14 89 56 10 E9 85 00 3C 08 75 0A E8 EE 04  .N..V....<.u....
  5520: 8B EC 88 7E 0D EB 77 3C 09 75 05 E8 E7 05 EB 6E  ...~..w<.u.....n
  5530: 3C 0A 75 10 E8 2F 06 8B EC 89 4E 14 89 7E 00 8C  <.u../....N..~..
  5540: 46 1C EB 5A 3C 0B 75 0B E8 29 06 8B EC 66 89 4E  F..Z<.u..)...f.N
  5550: 14 EB 4B 3C 10 75 0A E8 28 06 8B EC 89 5E 0C EB  ..K<.u..(....^..
  5560: 3D 3C 11 75 0D E8 54 06 8B EC 89 5E 0C 89 4E 14  =<.u..T....^..N.
  5570: EB 2C 3C 14 75 11 E8 7F 06 8B EC 89 5E 0C 89 4E  .,<.u.......^..N
  5580: 14 66 89 56 10 EB 17 3C 15 75 11 E8 8A 06 8B EC  .f.V...<.u......
  5590: 89 5E 0C EB 09 EB 07 B8 4F 01 EB 02 32 C0 8B EC  .^......O...2...
  55A0: 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  .F.f_f^f]f[fZfYf
  55B0: 58 07 1F C3 50 1E 2E 8E 1E 21 03 8C D8 A3 A0 68  X...P....!.....h
  55C0: A3 B0 68 A3 C2 68 2E 8E 1E 19 03 A3 AA 04 1F 58  ..h..h.........X
  55D0: CB 00 30 31 2E 30 30 00 56 45 53 41 00 03 DC 01  ..01.00.VESA....
  55E0: 00 00 01 00 00 00 00 00 00 00 00 01 2A 0F 00 01  ............*...
  55F0: 00 00 8F 00 00 00 6A 55 00 00 B9 3F 00 8B DF 83  ......jU...?....
  5600: C7 04 FC 66 33 C0 F3 66 AB 8B FB BE 70 55 B9 22  ...f3..f....pU."
  5610: 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F  ......O..G..O..O
  5620: 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F E8 C2 CB B0  ..O ..".........
  5630: 4F 32 E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB  O2..VQW...f3..f.
  5640: 5F 59 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45  _Y.........E...E
  5650: 04 40 00 C7 45 06 40 00 C6 45 1B 04 C6 45 18 01  .@..E.@..E...E..
  5660: C6 45 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17  .E...E..f.E>....
  5670: 8E DB E8 CB B2 66 0B C0 0F 84 EE 00 06 1F 66 89  .....f........f.
  5680: 45 28 8C C8 66 C1 E0 10 B8 19 5A 66 89 45 0C 81  E(..f.....Zf.E..
  5690: F9 FF 81 0F 84 CF 00 80 E5 03 B2 01 53 8E DB BE  ............S...
  56A0: 80 1C E8 6E C9 5B 06 1F 0F 84 BE 00 53 E8 EC CB  ...n.[......S...
  56B0: 66 89 45 12 C7 45 16 08 10 8D 5C 0C E8 3A E8 66  f.E..E....\..:.f
  56C0: 89 45 1F 66 89 45 36 8D 5C 10 E8 2C E8 66 89 45  .E.f.E6.\..,.f.E
  56D0: 23 66 89 45 3A 8D 5C 08 E8 1E E8 0A C0 75 04 5B  #f.E:.\......u.[
  56E0: E9 87 00 E8 B6 CB 66 C1 E8 10 3D 58 02 74 0D 3D  ......f...=X.t.=
  56F0: 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E  ^.t.w..E.....E..
  5700: E8 60 CB 80 F9 00 74 04 C6 45 1B 06 2E A1 1B 03  .`....t..E......
  5710: 89 45 08 8D 5C 04 E8 E0 E7 66 8B C8 66 C1 E9 10  .E..\....f..f...
  5720: D3 E0 89 45 10 89 45 32 B0 08 D2 E0 88 45 19 8D  ...E..E2.....E..
  5730: 5C 14 E8 C4 E7 5B 3D 00 01 77 2F 53 8B D8 B8 00  \....[=..w/S....
  5740: 01 33 D2 F7 F3 5B FE C8 88 45 1D 88 45 35 88 45  .3...[...E..E5.E
  5750: 34 8E DB 57 53 BE 80 1C E8 58 B2 5B 5F 0B C9 75  4..WS....X.[_..u
  5760: 05 06 1F 83 25 FE 32 E4 EB 02 B4 03 B0 4F 8E DB  ....%.2......O..
  5770: 5E C3 81 FB FF 81 0F 84 83 00 0A FF 75 04 8B C3  ^...........u...
  5780: EB 21 F6 C7 08 75 7C 8B CB B2 01 BE 20 1C E8 82  .!...u|..... ...
  5790: C8 74 70 E8 E5 CA 0A C0 75 0E 66 C1 E8 10 80 E7  .tp.....u.f.....
  57A0: 80 0A C7 E8 CD 04 EB 55 E8 BB B6 74 05 E8 55 B3  .......U...t..U.
  57B0: EB 19 E8 1C B8 A9 01 00 74 11 E8 02 B9 F7 C1 02  ........t.......
  57C0: 00 74 08 E8 88 B7 80 FB 01 75 03 E8 28 B8 BE 20  .t.......u..(.. 
  57D0: 1C E8 B3 B1 74 2D E8 A5 00 E8 2C 00 66 BB 20 1C  ....t-....,.f. .
  57E0: 00 1C E8 8D CA BE 00 1C E8 90 CA 66 C1 E8 10 8B  ...........f....
  57F0: D8 32 C0 F6 C7 80 74 02 B0 40 E8 15 B2 B0 4F 32  .2....t..@....O2
  5800: E4 EB 04 B0 4F B4 03 C3 56 06 33 C0 8E C0 BE 20  ....O...V.3.... 
  5810: 1C E8 88 CA 8B C8 66 C1 E8 10 8B D0 C1 E9 03 26  ......f........&
  5820: 89 0E 4A 04 C1 EA 04 FE CA 26 88 16 84 04 26 C6  ..J......&....&.
  5830: 06 51 04 00 26 C6 06 50 04 00 26 C6 06 49 04 62  .Q..&..P..&..I.b
  5840: 26 C7 06 4C 04 00 A0 26 C6 06 85 04 10 26 C7 06  &..L...&.....&..
  5850: 0C 01 BE 72 8C C8 26 A3 0E 01 07 5E C3 01 0F 00  ...r..&....^....
  5860: 0A 00 00 00 00 00 40 05 0F FF 00 01 02 03 04 05  ......@.........
  5870: 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 FC BA  ................
  5880: C4 03 B8 00 01 EF B9 04 00 B4 01 BE F5 57 AC 86  .............W..
  5890: E0 EF 8A E0 FE C4 E2 F6 B8 00 03 EF B9 09 00 BA  ................
  58A0: CE 03 32 E4 BE F9 57 8A C4 EE AC 42 EE 4A FE C4  ..2...W....B.J..
  58B0: E2 F5 BA DA 03 EC B9 14 00 BA C0 03 32 E4 BE 02  ............2...
  58C0: 58 8A C4 EE AC EE FE C4 E2 F7 C3 00 BE 00 1C E8  X...............
  58D0: A9 C9 66 C1 E8 10 8B D8 E8 79 C9 75 05 E8 65 C9  ..f......y.u..e.
  58E0: 75 04 B8 4F 00 C3 B8 4F 03 C3 83 E1 0F 0F 84 BB  u..O...O........
  58F0: 00 0A D2 75 0C B8 00 1C E8 3F 03 83 C3 11 E9 A6  ...u.....?......
  5900: 00 80 FA 01 75 33 8B FB BB C9 05 B9 08 00 FC E8  ....u3..........
  5910: C0 E5 66 AB 43 E2 F8 66 C1 E7 10 66 C1 EF 10 B9  ..f.C..f...f....
  5920: 00 01 BA 00 01 0E 1F E8 BE B3 06 1F B8 01 1C B9  ................
  5930: 07 00 8B DF E8 03 03 EB 6E 80 FA 02 75 6E 8B F3  ........n...un..
  5940: 06 1F FC BB C9 05 B9 08 00 66 AD E8 DF E4 43 E2  .........f....C.
  5950: F8 06 56 0E 1F BB D0 05 E8 77 E5 8A D0 80 E2 03  ..V......w......
  5960: 66 C1 E8 10 8B C8 BE 00 1C E8 A7 C6 BB CE 05 E8  f...............
  5970: 60 E5 8B C8 66 C1 E8 10 8B D0 B0 18 B7 01 E8 84  `...f...........
  5980: AA 5B 07 53 81 C3 00 04 B8 02 1C B9 07 00 E8 A9  .[.S............
  5990: 02 5E 8B FE 66 C1 E7 10 66 C1 EF 10 B9 00 01 BA  .^..f...f.......
  59A0: 00 01 0E 1F E8 90 B3 B0 4F 32 E4 C3 32 C0 C3 00  ........O2..2...
  59B0: E8 A1 C8 74 53 BE 00 1C 80 FB 00 74 18 80 FB 01  ...tS......t....
  59C0: 75 05 E8 DF C8 EB 1D 80 FB 02 75 10 8B C1 E8 92  u.........u.....
  59D0: C8 D3 E8 8B C8 E8 CC B2 74 2E EB 08 80 FB 03 75  ........t......u
  59E0: 24 E8 36 C8 E8 7C C8 8B D8 D3 E3 50 33 C0 BA 00  $.6..|.....P3...
  59F0: 01 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0 58 8B  .;.w..........X.
  5A00: C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00 0A DB  ..O..2...O......
  5A10: 75 07 8A EF E8 12 B5 EB 05 E8 F7 B4 8A F8 B0 4F  u..............O
  5A20: 32 E4 C3 00 E8 2D C8 74 2C BE 00 1C E8 4C C8 66  2....-.t,....L.f
  5A30: C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E 00 EB  .....@u...u.....
  5A40: 0F 80 FF 01 75 14 BB 13 00 E8 86 E4 D1 E8 8B D0  ....u...........
  5A50: B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52 53 66  .O2...O...2..RSf
  5A60: 50 81 E2 FF 00 D1 E2 8B C2 40 66 C1 E0 10 8B C2  P........@f.....
  5A70: BB 13 00 E8 B7 E3 BB 12 00 E8 B1 E3 66 58 5B 5A  ............fX[Z
  5A80: C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  ....fPfQfRfSfUfV
  5A90: 66 57 0E 1F E8 9C E4 E8 8A FF E8 B9 E4 8B EC 89  fW..............
  5AA0: 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66  V..F.f_f^f]f[fZf
  5AB0: 59 66 58 07 1F 9D CB E8 9A C7 74 54 F6 C3 7F 75  YfX.......tT...u
  5AC0: 38 53 BE 00 1C E8 DC C7 F7 E2 66 C1 E2 10 8B D0  8S........f.....
  5AD0: 66 81 E1 FF FF 00 00 66 03 D1 E8 86 C7 80 E2 FC  f......f........
  5AE0: 66 D3 E2 66 81 E2 FF FF FF 00 8D 5C 18 66 8B C2  f..f.......\.f..
  5AF0: E8 71 E3 5B E8 95 B1 EB 0F 80 FB 82 74 C3 80 FB  .q.[........t...
  5B00: 01 75 0A E8 7A B1 32 FF B0 4F 32 E4 C3 32 C0 C3  .u..z.2..O2..2..
  5B10: B0 4F B4 03 C3 E8 3C C7 74 47 80 FF 20 74 08 66  .O....<.tG.. t.f
  5B20: C1 E7 10 66 C1 EF 10 81 F9 00 01 77 31 0A DB 74  ...f.......w1..t
  5B30: 05 80 FB 80 75 10 32 F6 E8 D8 B3 3C 06 74 02 B6  ....u.2....<.t..
  5B40: 01 E8 F3 B1 EB 13 80 FB 01 75 13 32 F6 E8 C3 B3  .........u.2....
  5B50: 3C 06 74 02 B6 01 E8 8F B1 B0 4F 32 E4 C3 32 C0  <.t.......O2..2.
  5B60: C3 B0 4F B4 03 C3 0E 07 BF B4 A1 2E 8B 0E B2 A1  ..O.............
  5B70: B8 4F 00 C3 0A DB 75 02 EB 03 32 C0 C3 B0 4F B4  .O....u...2...O.
  5B80: 03 C3 0A DB 75 06 B7 04 B3 10 EB 27 80 FB 01 75  ....u......'...u
  5B90: 15 53 B1 01 0A FF 74 02 B1 00 E8 F2 B2 E8 3F B4  .S....t.......?.
  5BA0: E8 41 B0 5B EB 0D 80 FB 02 75 0D E8 F3 B2 8A F8  .A.[.....u......
  5BB0: C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 80 FB 01 75  ....O2...O.....u
  5BC0: 09 33 C0 E8 B0 B3 74 2B EB 24 80 FB 07 75 24 0A  .3....t+.$...u$.
  5BD0: FF 75 0E B0 82 E8 2D A8 0A C9 74 12 B9 03 03 EB  .u....-...t.....
  5BE0: 0D 0B C9 B1 00 74 02 B1 03 B0 82 E8 17 A8 B0 4F  .....t.........O
  5BF0: 32 E4 C3 B0 4F B4 03 C3 EB 00 80 FB 91 75 14 B0  2...O........u..
  5C00: 05 0A C9 74 02 B0 06 8A C8 E8 10 B0 EB 00 B0 4F  ...t...........O
  5C10: 32 E4 C3 B0 4F B4 03 C3 80 E3 01 0A DB 75 05 BB  2...O........u..
  5C20: 02 01 EB 0C 33 C0 53 E8 B5 B3 E8 54 BC 5B 74 05  ....3.S....T.[t.
  5C30: B0 4F 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD  .O2...O......r..
  5C40: 42 C3 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  B...fPfQfRfSfUfV
  5C50: 66 57 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94  fW..P.......X...
  5C60: 1C 5C 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  .\f_f^f]f[fZfYfX
  5C70: 07 1F C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF  .....P.......X..
  5C80: 94 1C 5C C3 56 5C E2 97 FB 97 18 98 64 5D 1B 8F  ..\.V\......d]..
  5C90: 4D 8F C0 8F 43 90 D1 91 D5 91 DE 94 AF 95 32 96  M...C.........2.
  5CA0: 99 96 34 98 96 98 3F 9B 7D 5F BF 9F 0A 5C 0A 5C  ..4...?.}_...\.\
  5CB0: 0A 5C 0A 5C 0A 5C 0A 5C 8F A0 59 84 AD 85 2E 8E  .\.\.\.\..Y.....
  5CC0: 1E 19 03 80 26 87 04 F3 50 8A E0 80 E4 7F E8 DF  ....&...P.......
  5CD0: 01 3B D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26  .;.u.X........0&
  5CE0: F6 47 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09  .G..t.... ..uI..
  5CF0: EB 06 A8 01 74 41 B5 0B 53 E8 1F 44 0A FF 5B 75  ....tA..S..D..[u
  5D00: 0B 80 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87  ..&........+X...
  5D10: 04 08 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7  ...&.........c..
  5D20: 06 85 04 08 00 C6 06 84 04 18 C7 06 0C 01 AB 6A  ...............j
  5D30: 8C 0E 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04  .....B..&.......
  5D40: 58 53 50 0E 1F 33 C9 8A C8 B2 08 BE 40 1C E8 C2  XSP..3......@...
  5D50: C2 E8 12 B1 74 05 E8 AC AD EB 19 E8 73 B2 A9 01  ....t.......s...
  5D60: 00 74 11 E8 59 B3 F7 C1 02 00 74 08 E8 DF B1 80  .t..Y.....t.....
  5D70: FB 01 75 03 E8 7F B2 BE 40 1C E8 0A AC 58 5B 0F  ..u.....@....X[.
  5D80: 84 53 FF 2E 8E 1E 19 03 0E 07 E8 74 2B 0E 1F 53  .S.........t+..S
  5D90: 66 BB 40 1C 00 1C E8 D9 C4 BE 00 1C B0 20 E8 71  f.@.......... .q
  5DA0: AC 5B 2E 8E 1E 19 03 0E 07 E8 7D 30 E8 24 00 E8  .[........}0.$..
  5DB0: 89 3F E8 D1 01 E8 8E 01 E8 17 41 0E 1F BE 00 1C  .?........A.....
  5DC0: B0 10 E8 4D AC E8 58 30 E8 50 30 C3 8B EC C6 46  ...M..X0.P0....F
  5DD0: 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00 E8  ..../........R..
  5DE0: 04 0C C3 53 83 C3 0A 8B 16 63 04 B9 19 00 B8 11  ...S.....c......
  5DF0: 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80 C2  0.2.&.'.C....[..
  5E00: 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9 04 00 B0  .2...S..........
  5E10: 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43 FE C0 E2  .&.'<.u... .C...
  5E20: F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8 00 03 EF  .[&.G...........
  5E30: C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09 01 75 02  .....#...&.G..u.
  5E40: B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC B9 04 00  .......t........
  5E50: B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26 8A 04 EE  .......t....&...
  5E60: 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00 32 E4 B2  F.....S......2..
  5E70: C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4 8A C4 EE  ......&...C.....
  5E80: 32 C0 EE 1E 06 E8 AA 2F 0B ED 74 09 1F 1E B9 10  2....../..t.....
  5E90: 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37 B9 09 00  ...F...[.S..7...
  5EA0: 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B C3  2....&.'.C....[.
  5EB0: BB 5E 61 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00 C3  .^a......}......
  5EC0: 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10 75 20 A0  3.....<J.....u .
  5ED0: 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C 06 74 1C  ..$.<.~$<.t <.t.
  5EE0: 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 C0 04 C3 B0  <.t..@..........
  5EF0: 40 D0 EC F6 E4 03 D8 81 C3 C0 05 C3 B0 40 F6 E4  @............@..
  5F00: 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10 75 05 81  ......u......u..
  5F10: C3 C0 01 C3 81 C3 40 06 C3 BF BD 5E BE DE 5E 33  ......@....^..^3
  5F20: C9 E8 4E 00 C3 04 00 01 05 40 01 06 80 01 0D 40  ..N......@.....@
  5F30: 03 0E 80 03 0F 40 04 10 80 04 11 80 06 12 C0 06  .....@..........
  5F40: 13 00 07 62 00 02 53 8A 1E 49 04 80 FB 07 7F 10  ...b..S..I......
  5F50: 32 FF D1 E3 2E 8B 87 FA 5E A2 65 04 88 26 66 04  2.......^.e..&f.
  5F60: 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E 30 1E 3F  [.,0(0-0)0*0.0.?
  5F70: 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6 C3 83 C7  )0.8%u...].3....
  5F80: 03 3B FE 75 ED C3 1E 06 2E 8E 1E 19 03 F6 06 87  .;.u............
  5F90: 04 80 75 49 83 3E 4C 04 00 74 42 A0 49 04 B9 00  ..uI.>L..tB.I...
  5FA0: 20 2E 8B 3E 1F 03 26 F6 47 33 01 75 0E 26 F6 47   ..>..&.G3.u.&.G
  5FB0: 09 01 75 1B 2E 8B 3E 1D 03 EB 14 3C 06 7E 0B 2E  ..u...>....<.~..
  5FC0: 8B 3E 1B 03 26 8A 67 37 B5 40 66 33 C0 EB 06 66  .>..&.g7.@f3...f
  5FD0: B8 20 07 20 07 8E C7 66 33 FF F3 66 AB 80 26 87  . . ...f3..f..&.
  5FE0: 04 7F 07 1F C3 2E 8E 1E 19 03 80 FB 10 75 03 E9  .............u..
  5FF0: 9D 01 80 FB 20 75 03 E9 BE 01 80 FB 32 75 1F BA  .... u......2u..
  6000: CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9 16 01 FE  ....u...........
  6010: C8 0F 85 16 01 EC 24 FD B2 C2 EE E9 07 01 80 FB  ......$.........
  6020: 35 75 4B 3C 80 75 08 80 0E 89 04 40 E9 F6 00 F6  5uK<.u.....@....
  6030: 06 89 04 40 0F 84 F3 00 0A C0 0F 84 ED 00 FE C8  ...@............
  6040: 75 06 E8 FB 08 E9 DD 00 F6 06 89 04 40 0F 84 DA  u...........@...
  6050: 00 FE C8 75 0C E8 B0 23 32 C0 BA C3 03 EE E9 C4  ...u...#2.......
  6060: 00 FE C8 0F 85 C4 00 E8 F2 23 B0 01 EB EC 80 FB  .........#......
  6070: 30 74 03 E9 96 00 50 E8 A1 40 8A EF BA CC 03 EC  0t....P..@......
  6080: 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED  ..X..u0.....u...
  6090: 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00  u....$0<0u......
  60A0: A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F  ...$0<0u....&..o
  60B0: 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F  ......6<.uA.&..o
  60C0: B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30  .....u......$0<0
  60D0: 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24  t.....t........$
  60E0: 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88  0<0u.....t......
  60F0: 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B  ...........)<.u+
  6100: 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75  .&..o.........1u
  6110: 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05  ...t.<.u........
  6120: 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75  .&......F.....3u
  6130: 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5  .<.t.<.u..&.....
  6140: 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07  .........4u.<.u.
  6150: 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01  .&.....<.u......
  6160: EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB  .....6u&. .<.t..
  6170: 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA  ..<.t...........
  6180: C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3  .....B."........
  6190: 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04  .........u......
  61A0: 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E  ......%.......^.
  61B0: 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00 46 89  .N..F.........F.
  61C0: 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00 02 63  ......(........c
  61D0: 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00  -'(.+...........
  61E0: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06  ................
  61F0: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  ................
  6200: 00 00 10 0E 00 FF 28 18 08 00 08 09 03 00 02 63  ......(........c
  6210: 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00  -'(.+...........
  6220: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06  ................
  6230: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  ................
  6240: 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63  ......P........c
  6250: 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00  _OP.U...........
  6260: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06  ...(............
  6270: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  ................
  6280: 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63  ......P........c
  6290: 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00  _OP.U...........
  62A0: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06  ...(............
  62B0: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  ................
  62C0: 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63  ......(...@....c
  62D0: 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00  -'(.+...........
  62E0: 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06  ................
  62F0: 07 10 11 12 13 14 15 16 17 01 00 03 00 00 00 00  ................
  6300: 00 00 30 0F 00 FF 28 18 08 00 40 09 03 00 02 63  ..0...(...@....c
  6310: 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00  -'(.+...........
  6320: 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06  ................
  6330: 07 10 11 12 13 14 15 16 17 01 00 03 00 00 00 00  ................
  6340: 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63  ..0...P...@....c
  6350: 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00  _OP.T...........
  6360: 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17  ...(............
  6370: 17 17 17 17 17 17 17 17 17 01 00 01 00 00 00 00  ................
  6380: 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6  ......P.........
  6390: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  _OP.U....M......
  63A0: 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08  ..](.c..........
  63B0: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  ................
  63C0: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3  ......P.........
  63D0: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  _OP.T..>.@......
  63E0: EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06  ...P............
  63F0: 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00  ................
  6400: 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18  ..@..........(..
  6410: 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20  -2 $8?......... 
  6420: 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C  $(-28?..........
  6430: 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25  %/83.*%')*,#..#%
  6440: 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33  '*,+*))-27;97423
  6450: 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35  4551,'/023443325
  6460: 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05  8:=<:98899:741..
  6470: 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11  ................
  6480: 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14  ................
  6490: 16 18 1A 19 18 17 16 17 17 17 18 15 14 11 15 15  ................
  64A0: 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19  ................
  64B0: 19 19 1A 18 17 16 02 03 04 05 07 06 06 05 05 07  ................
  64C0: 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09  ................
  64D0: 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D  ................
  64E0: 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D  ................
  64F0: 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00  ................
  6500: 00 00 00 00 00 00 28 18 08 00 20 09 0F 00 06 63  ......(... ....c
  6510: 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00  -'(.+...........
  6520: 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06  ................
  6530: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  ................
  6540: 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63  ......P...@....c
  6550: 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00  _OP.T...........
  6560: 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06  ...(............
  6570: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  ................
  6580: 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07  ............%(..
  6590: 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13  . ..(,..%*..26..
  65A0: 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D  ',. 49...$..,0..
  65B0: 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18  !&...3..+0.$8=..
  65C0: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  -2 $8?..........
  65D0: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  ........-2 $8?..
  65E0: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  -2 $8?..........
  65F0: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  ........-2 $8?..
  6600: 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2  -2 $8?P.........
  6610: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  _OP.T....@......
  6620: 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00  ..](.c..........
  6630: 00 00 08 00 00 00 18 00 00 0B 00 05 00 00 00 00  ................
  6640: 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3  ......P.........
  6650: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  _OP.T....@......
  6660: 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14  ..](.c..........
  6670: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  .89:;<=>?.......
  6680: 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3  ......(.........
  6690: 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00  -'(.+....M......
  66A0: 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14  ..]..c..........
  66B0: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  .89:;<=>?.......
  66C0: 00 00 10 0E 00 FF 28 18 0E 00 08 09 03 00 02 A3  ......(.........
  66D0: 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00  -'(.+....M......
  66E0: 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14  ..]..c..........
  66F0: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  .89:;<=>?.......
  6700: 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3  ......P.........
  6710: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  _OP.U....M......
  6720: 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14  ..](.c..........
  6730: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  .89:;<=>?.......
  6740: 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3  ......P.........
  6750: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  _OP.U....M......
  6760: 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14  ..](.c..........
  6770: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  .89:;<=>?.......
  6780: 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67  ......(........g
  6790: 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00  -'(.+....O......
  67A0: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14  ................
  67B0: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  .89:;<=>?.......
  67C0: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67  ......P........g
  67D0: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  _OP.U....O......
  67E0: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14  ...(............
  67F0: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  .89:;<=>?.......
  6800: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66  ......P........f
  6810: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  _OP.U....O......
  6820: 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08  ...(............
  6830: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  ................
  6840: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3  ......P.........
  6850: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  _OP.T..>.@......
  6860: EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F  ...(......??????
  6870: 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00  ?????????.......
  6880: 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3  ......P.........
  6890: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  _OP.T..>.@......
  68A0: EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14  ...(............
  68B0: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  .89:;<=>?.......
  68C0: 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63  ......(... ....c
  68D0: 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00  _OP.T....A......
  68E0: 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06  ...(@...........
  68F0: 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00  .........A......
  6900: 00 00 40 05 0F FF 5E 61 00 C0 00 00 00 00 00 00  ..@...^a........
  6910: 00 00 00 00 00 00 BE 68 00 C0 00 00 00 00 00 00  .......h........
  6920: 00 00 00 00 00 00 1A 00 8D A1 00 C0 00 00 00 00  ................
  6930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  6940: 1E E8 10 00 2E 8E 1E 19 03 E8 2F 38 E8 06 38 E8  ........../8..8.
  6950: B5 1A 1F C3 2E 8E 1E 19 03 C7 06 87 04 60 F9 C6  .............`..
  6960: 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01  .........$......
  6970: E8 6B 1F A0 89 04 80 26 10 04 CF 80 0E 10 04 20  .k.....&....... 
  6980: C7 06 63 04 D4 03 0E 1F E8 46 A6 A9 01 00 74 11  ..c......F....t.
  6990: E8 2C A7 F7 C1 02 00 74 08 E8 B2 A5 80 FB 01 75  .,.....t.......u
  69A0: 03 E8 52 A6 C3 1E 2E 8E 1E 19 03 0E 07 3C 01 75  ..R..........<.u
  69B0: 15 B8 01 13 BB 07 00 8B 16 50 04 BD A9 00 B9 28  .........P.....(
  69C0: 00 E8 AF F2 EB 1E B8 01 13 BB 84 00 8B 16 50 04  ..............P.
  69D0: BD FA 00 B9 06 00 E8 9A F2 E8 64 9E B9 E8 03 E8  ..........d.....
  69E0: 1B CF EB F5 1F C3 F6 06 89 04 08 74 01 C3 53 BA  ...........t..S.
  69F0: C8 03 EC B0 FF B2 C6 EE B2 C8 80 3E 63 04 B4 75  ...........>c..u
  6A00: 2F BE 5F 6A B9 40 00 33 DB 9C FA 8A C3 EE 8B FB  /._j.@.3........
  6A10: C1 EF 03 83 E7 03 03 FE 2E 8A 05 42 EE 2E 8A 45  ...........B...E
  6A20: 04 EE 2E 8A 45 08 EE FE C3 4A E2 DF 9D E9 85 00  ....E....J......
  6A30: 26 8A 47 2B F6 06 89 04 06 74 31 B9 F8 00 BF 9E  &.G+.....t1.....
  6A40: 63 3C 08 74 11 B9 40 00 BF 1E 65 3C 38 74 07 3C  c<.t..@...e<8t.<
  6A50: 3F 74 03 BF 5E 65 33 DB 9C FA 8A C3 EE 2E 8A 01  ?t..^e3.........
  6A60: 42 EE EE EE FE C3 4A E2 F1 9D EB 49 3C 08 74 25  B.....J....I<.t%
  6A70: 3C 38 74 2E 3C 3F 74 2A B9 08 00 33 DB 51 E8 F5  <8t.<?t*...3.Q..
  6A80: CC B9 08 00 F7 C3 10 00 74 03 83 C7 18 E8 67 00  ........t.....g.
  6A90: 59 E2 EA EB 20 E8 DE CC B9 00 01 33 DB E8 57 00  Y... ......3..W.
  6AA0: EB 13 B9 40 00 33 DB 51 E8 28 00 8A C3 E8 70 30  ...@.3.Q.(....p0
  6AB0: FE C3 59 E2 F2 5B C3 00 2A 00 2A 00 2A 00 2A 15  ..Y..[..*.*.*.*.
  6AC0: 3F 15 3F 15 3F 15 3F 00 2A 00 3F 00 2A 00 3F 00  ?.?.?.?.*.?.*.?.
  6AD0: 2A 00 3F 8B FB C1 EF 02 83 E7 0F 2E 8A B5 4F 6A  *.?...........Oj
  6AE0: 8B FB D1 EF 83 E7 0F 2E 8A AD 4F 6A 8B FB 83 E7  ..........Oj....
  6AF0: 0F 2E 8A 8D 4F 6A C3 9C 8A C3 FA EE 2E 8A 05 42  ....Oj.........B
  6B00: EE 47 2E 8A 05 EE 47 2E 8A 05 EE 47 FE C3 4A E2  .G....G....G..J.
  6B10: E7 9D C3 00 00 00 00 00 00 00 00 7E 81 A5 81 BD  ...........~....
  6B20: 99 81 7E 7C FE D6 BA C6 FE 7C 00 C6 EE FE FE 7C  ..~|.....|.....|
  6B30: 38 10 00 10 38 7C FE 7C 38 10 00 10 38 10 EE EE  8...8|.|8...8...
  6B40: 10 38 00 38 7C FE FE 6C 10 38 00 00 18 3C 7E 3C  .8.8|..l.8...<~<
  6B50: 18 00 00 FF E7 C3 81 C3 E7 FF FF 00 18 3C 66 66  .............<ff
  6B60: 3C 18 00 FF E7 C3 99 99 C3 E7 FF 1E 0E 1E 36 78  <.............6x
  6B70: CC CC 78 7E C3 C3 7E 18 7E 18 18 1E 1A 1E 18 18  ..x~..~.~.......
  6B80: 70 F0 60 3E 3E 36 36 F6 66 1E 0C DB 3C 66 E7 66  p.`>>66.f...<f.f
  6B90: 3C DB 00 80 C0 F0 F8 F0 C0 80 00 02 06 1E 3E 1E  <.............>.
  6BA0: 06 02 00 18 3C 7E 18 7E 3C 18 00 66 66 66 66 66  ....<~.~<..fffff
  6BB0: 00 66 00 7F DB 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C  .f...{;....<f8ll
  6BC0: 38 CC 78 00 00 00 00 FE FE FE 00 18 3C 7E 18 7E  8.x.........<~.~
  6BD0: 3C 18 7E 18 3C 7E 18 18 18 18 00 18 18 18 18 7E  <.~.<~.........~
  6BE0: 3C 18 00 00 18 1C FE 1C 18 00 00 00 30 70 FE 70  <...........0p.p
  6BF0: 30 00 00 00 00 C0 C0 C0 FE 00 00 00 24 66 FF 66  0...........$f.f
  6C00: 24 00 00 00 10 38 7C 7C FE 00 00 00 FE 7C 7C 38  $....8||.....||8
  6C10: 10 00 00 00 00 00 00 00 00 00 00 18 3C 3C 18 18  ............<<..
  6C20: 00 18 00 6C 6C 6C 00 00 00 00 00 6C 6C FE 6C FE  ...lll.....ll.l.
  6C30: 6C 6C 00 18 7E C0 7C 06 FC 18 00 00 C6 0C 18 30  ll..~.|........0
  6C40: 60 C6 00 38 6C 38 76 CC CC 76 00 18 18 30 00 00  `..8l8v..v...0..
  6C50: 00 00 00 18 30 60 60 60 30 18 00 60 30 18 18 18  ....0```0..`0...
  6C60: 30 60 00 00 EE 7C FE 7C EE 00 00 00 18 18 7E 18  0`...|.|......~.
  6C70: 18 00 00 00 00 00 00 18 18 30 00 00 00 00 FE 00  .........0......
  6C80: 00 00 00 00 00 00 00 00 38 38 00 06 0C 18 30 60  ........88....0`
  6C90: C0 80 00 7C C6 CE DE F6 E6 7C 00 18 78 18 18 18  ...|.....|..x...
  6CA0: 18 7E 00 7C C6 0C 18 30 66 FE 00 7C C6 06 3C 06  .~.|...0f..|..<.
  6CB0: C6 7C 00 0C 1C 3C 6C FE 0C 0C 00 FE C0 FC 06 06  .|...<l.........
  6CC0: C6 7C 00 7C C6 C0 FC C6 C6 7C 00 FE C6 06 0C 18  .|.|.....|......
  6CD0: 18 18 00 7C C6 C6 7C C6 C6 7C 00 7C C6 C6 7E 06  ...|..|..|.|..~.
  6CE0: C6 7C 00 00 1C 1C 00 00 1C 1C 00 00 18 18 00 00  .|..............
  6CF0: 18 18 30 0C 18 30 60 30 18 0C 00 00 00 FE 00 00  ..0..0`0........
  6D00: FE 00 00 60 30 18 0C 18 30 60 00 7C C6 06 0C 18  ...`0...0`.|....
  6D10: 00 18 00 7C C6 C6 DE DC C0 7E 00 38 6C C6 C6 FE  ...|.....~.8l...
  6D20: C6 C6 00 FC 66 66 7C 66 66 FC 00 3C 66 C0 C0 C0  ....ff|ff..<f...
  6D30: 66 3C 00 F8 6C 66 66 66 6C F8 00 FE C2 C0 F8 C0  f<..lfffl.......
  6D40: C2 FE 00 FE 62 60 7C 60 60 F0 00 7C C6 C0 C0 DE  ....b`|``..|....
  6D50: C6 7C 00 C6 C6 C6 FE C6 C6 C6 00 3C 18 18 18 18  .|.........<....
  6D60: 18 3C 00 3C 18 18 18 D8 D8 70 00 C6 CC D8 F0 D8  .<.<.....p......
  6D70: CC C6 00 F0 60 60 60 60 62 FE 00 C6 EE FE D6 D6  ....````b.......
  6D80: C6 C6 00 C6 E6 E6 F6 DE CE C6 00 7C C6 C6 C6 C6  ...........|....
  6D90: C6 7C 00 FC 66 66 7C 60 60 F0 00 7C C6 C6 C6 C6  .|..ff|``..|....
  6DA0: D6 7C 06 FC C6 C6 FC D8 CC C6 00 7C C6 C0 7C 06  .|.........|..|.
  6DB0: C6 7C 00 7E 5A 18 18 18 18 3C 00 C6 C6 C6 C6 C6  .|.~Z....<......
  6DC0: C6 7C 00 C6 C6 C6 C6 6C 38 10 00 C6 C6 D6 D6 FE  .|.....l8.......
  6DD0: EE C6 00 C6 6C 38 38 38 6C C6 00 66 66 66 3C 18  ....l888l..fff<.
  6DE0: 18 3C 00 FE 86 0C 18 30 62 FE 00 7C 60 60 60 60  .<.....0b..|````
  6DF0: 60 7C 00 C0 60 30 18 0C 06 02 00 7C 0C 0C 0C 0C  `|..`0.....|....
  6E00: 0C 7C 00 10 38 6C C6 00 00 00 00 00 00 00 00 00  .|..8l..........
  6E10: 00 00 FF 30 30 18 00 00 00 00 00 00 00 78 0C 7C  ...00........x.|
  6E20: CC 7E 00 E0 60 7C 66 66 66 FC 00 00 00 7C C6 C0  .~..`|fff....|..
  6E30: C6 7C 00 1C 0C 7C CC CC CC 7E 00 00 00 7C C6 FE  .|...|...~...|..
  6E40: C0 7C 00 1C 36 30 FC 30 30 78 00 00 00 76 CE C6  .|..60.00x...v..
  6E50: 7E 06 7C E0 60 7C 66 66 66 E6 00 18 00 38 18 18  ~.|.`|fff....8..
  6E60: 18 3C 00 0C 00 1C 0C 0C 0C CC 78 E0 60 66 6C 78  .<........x.`flx
  6E70: 6C E6 00 18 18 18 18 18 18 1C 00 00 00 6C FE D6  l............l..
  6E80: D6 C6 00 00 00 DC 66 66 66 66 00 00 00 7C C6 C6  ......ffff...|..
  6E90: C6 7C 00 00 00 DC 66 66 7C 60 F0 00 00 76 CC CC  .|....ff|`...v..
  6EA0: 7C 0C 1E 00 00 DC 66 60 60 F0 00 00 00 7C C0 7C  |.....f``....|.|
  6EB0: 06 7C 00 30 30 FC 30 30 36 1C 00 00 00 CC CC CC  .|.00.006.......
  6EC0: CC 76 00 00 00 C6 C6 6C 38 10 00 00 00 C6 C6 D6  .v.....l8.......
  6ED0: FE 6C 00 00 00 C6 6C 38 6C C6 00 00 00 C6 C6 CE  .l....l8l.......
  6EE0: 76 06 7C 00 00 FC 98 30 64 FC 00 0E 18 18 70 18  v.|....0d.....p.
  6EF0: 18 0E 00 18 18 18 00 18 18 18 00 70 18 18 0E 18  ...........p....
  6F00: 18 70 00 76 DC 00 00 00 00 00 00 00 10 38 38 6C  .p.v.........88l
  6F10: 6C FE 00 3C 66 C0 66 3C 18 CC 78 00 C6 00 C6 C6  l..<f.f<..x.....
  6F20: CE 76 00 0E 00 7C C6 FE C0 7C 00 7C C6 78 0C 7C  .v...|...|.|.x.|
  6F30: CC 7E 00 C6 00 78 0C 7C CC 7E 00 E0 00 78 0C 7C  .~...x.|.~...x.|
  6F40: CC 7E 00 38 38 78 0C 7C CC 7E 00 00 00 7C C0 7C  .~.88x.|.~...|.|
  6F50: 18 6C 38 7C C6 7C C6 FE C0 7C 00 C6 00 7C C6 FE  .l8|.|...|...|..
  6F60: C0 7C 00 E0 00 7C C6 FE C0 7C 00 66 00 38 18 18  .|...|...|.f.8..
  6F70: 18 3C 00 7C C6 38 18 18 18 3C 00 00 00 38 18 18  .<.|.8...<...8..
  6F80: 18 3C 00 C6 38 6C C6 FE C6 C6 00 38 38 00 7C C6  .<..8l.....88.|.
  6F90: FE C6 00 0E 00 FE C0 F8 C0 FE 00 00 00 6C 9A 7E  .............l.~
  6FA0: D8 6E 00 7E D8 D8 FE D8 D8 DE 00 7C C6 00 7C C6  .n.~.......|..|.
  6FB0: C6 7C 00 00 C6 00 7C C6 C6 7C 00 00 E0 00 7C C6  .|....|..|....|.
  6FC0: C6 7C 00 7C C6 00 C6 C6 CE 76 00 00 E0 00 C6 C6  .|.|.....v......
  6FD0: CE 76 00 18 00 3C 18 18 18 3C 00 C6 38 6C C6 C6  .v...<...<..8l..
  6FE0: 6C 38 00 C6 00 C6 C6 C6 C6 7C 00 00 18 7E D8 D8  l8.......|...~..
  6FF0: 7E 18 00 38 6C 60 F0 66 F6 6C 00 C3 66 3C 7E 18  ~..8l`.f.l..f<~.
  7000: 3C 18 00 3E 63 38 0E 63 3E 00 1C 00 3E 61 3C 86  <..>c8.c>...>a<.
  7010: 7C 00 1C 0E 00 78 0C 7C CC 7E 00 1C 00 38 18 18  |....x.|.~...8..
  7020: 18 3C 00 00 0E 00 7C C6 C6 7C 00 00 0E 00 CC CC  .<....|..|......
  7030: DC 76 00 00 FC 00 BC 66 66 E6 00 FE 00 C6 E6 F6  .v.....ff.......
  7040: CE C6 00 3E 00 3E 60 67 63 3D 00 3E 00 76 CE C6  ...>.>`gc=.>.v..
  7050: 7E 06 7C 18 00 18 30 60 66 3C 00 00 00 00 7C 60  ~.|...0`f<....|`
  7060: 60 00 00 00 00 00 7C 0C 0C 00 00 C0 CC D8 30 7C  `.....|.......0|
  7070: 36 0C 3E C0 CC D8 30 6C 3C 7E 0C 18 00 18 18 3C  6.>...0l<~.....<
  7080: 3C 18 00 00 36 6C D8 6C 36 00 00 00 D8 6C 36 6C  <...6l.l6....l6l
  7090: D8 00 00 22 88 22 88 22 88 22 88 55 AA 55 AA 55  ...".".".".U.U.U
  70A0: AA 55 AA DD 77 DD 77 DD 77 DD 77 18 18 18 18 18  .U..w.w.w.w.....
  70B0: 18 18 18 18 18 18 18 F8 18 18 18 18 18 F8 18 F8  ................
  70C0: 18 18 18 36 36 36 36 F6 36 36 36 00 00 00 00 FE  ...6666.666.....
  70D0: 36 36 36 00 00 F8 18 F8 18 18 18 36 36 F6 06 F6  666........66...
  70E0: 36 36 36 36 36 36 36 36 36 36 36 00 00 FE 06 F6  66666666666.....
  70F0: 36 36 36 36 36 F6 06 FE 00 00 00 36 36 36 36 FE  66666......6666.
  7100: 00 00 00 18 18 F8 18 F8 00 00 00 00 00 00 00 F8  ................
  7110: 18 18 18 18 18 18 18 1F 00 00 00 18 18 18 18 FF  ................
  7120: 00 00 00 00 00 00 00 FF 18 18 18 18 18 18 18 1F  ................
  7130: 18 18 18 00 00 00 00 FF 00 00 00 18 18 18 18 FF  ................
  7140: 18 18 18 18 18 1F 18 1F 18 18 18 36 36 36 36 37  ...........66667
  7150: 36 36 36 36 36 37 30 3F 00 00 00 00 00 3F 30 37  6666670?.....?07
  7160: 36 36 36 36 36 F7 00 FF 00 00 00 00 00 FF 00 F7  66666...........
  7170: 36 36 36 36 36 37 30 37 36 36 36 00 00 FF 00 FF  66666707666.....
  7180: 00 00 00 36 36 F7 00 F7 36 36 36 18 18 FF 00 FF  ...66...666.....
  7190: 00 00 00 36 36 36 36 FF 00 00 00 00 00 FF 00 FF  ...6666.........
  71A0: 18 18 18 00 00 00 00 FF 36 36 36 36 36 36 36 3F  ........6666666?
  71B0: 00 00 00 18 18 1F 18 1F 00 00 00 00 00 1F 18 1F  ................
  71C0: 18 18 18 00 00 00 00 3F 36 36 36 36 36 36 36 FF  .......?6666666.
  71D0: 36 36 36 18 18 FF 18 FF 18 18 18 18 18 18 18 F8  666.............
  71E0: 00 00 00 00 00 00 00 1F 18 18 18 FF FF FF FF FF  ................
  71F0: FF FF FF 00 00 00 00 FF FF FF FF F0 F0 F0 F0 F0  ................
  7200: F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF 00  ................
  7210: 00 00 00 00 00 66 DC D8 DC 66 00 00 78 CC F8 CC  .....f...f..x...
  7220: C6 CC 00 00 FE 62 60 60 60 E0 00 00 FE 6C 6C 6C  .....b```....lll
  7230: 6C 6C 00 FE C6 60 30 60 C6 FE 00 00 7E D8 CC CC  ll...`0`....~...
  7240: D8 70 00 00 66 66 66 66 7C C0 00 00 76 DC 18 18  .p..ffff|...v...
  7250: 18 38 00 FE 38 6C C6 6C 38 FE 00 38 6C C6 FE C6  .8..8l.l8..8l...
  7260: 6C 38 00 38 6C C6 C6 6C 6C EE 00 3E 60 38 66 C6  l8.8l..ll..>`8f.
  7270: CC 78 00 00 00 7E DB DB 7E 00 00 06 7C DE F6 E6  .x...~..~...|...
  7280: 7C C0 00 38 60 C0 F8 C0 60 38 00 7C C6 C6 C6 C6  |..8`...`8.|....
  7290: C6 C6 00 00 FE 00 FE 00 FE 00 00 18 18 7E 18 18  .............~..
  72A0: 00 7E 00 30 18 0C 18 30 00 7E 00 0C 18 30 18 0C  .~.0...0.~...0..
  72B0: 00 7E 00 0C 1E 18 18 18 18 18 18 18 18 18 18 18  .~..............
  72C0: 78 30 00 00 00 18 00 7E 00 18 00 00 76 DC 00 76  x0.....~....v..v
  72D0: DC 00 00 7C C6 C6 7C 00 00 00 00 00 00 00 18 18  ...|..|.........
  72E0: 00 00 00 00 00 00 00 18 00 00 00 1F 18 18 18 F8  ................
  72F0: 38 18 00 D8 6C 6C 6C 00 00 00 00 70 D8 30 F8 00  8...lll....p.0..
  7300: 00 00 00 00 00 7C 7C 7C 7C 00 00 00 00 00 00 00  .....||||.......
  7310: 00 00 00 1D 00 00 00 00 24 66 FF 66 24 00 00 00  ........$f.f$...
  7320: 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00  ................
  7330: 00 00 00 00 00 00 00 00 7E 81 A5 81 81 BD 99 81  ........~.......
  7340: 81 7E 00 00 00 00 00 00 7C FE FE D6 FE FE BA C6  .~......|.......
  7350: FE 7C 00 00 00 00 00 00 00 6C EE FE FE FE FE 7C  .|.......l.....|
  7360: 38 10 00 00 00 00 00 00 00 10 38 7C FE 7C 38 10  8.........8|.|8.
  7370: 00 00 00 00 00 00 00 00 00 10 38 38 10 6C EE 6C  ..........88.l.l
  7380: 10 38 00 00 00 00 00 00 10 38 7C 7C FE FE FE 6C  .8.......8||...l
  7390: 10 38 00 00 00 00 00 00 00 00 00 18 3C 3C 3C 18  .8..........<<<.
  73A0: 00 00 00 00 00 00 FF FF FF FF FF E7 C3 C3 C3 E7  ................
  73B0: FF FF FF FF FF FF 00 00 00 00 18 3C 66 66 66 3C  ...........<fff<
  73C0: 18 00 00 00 00 00 FF FF FF FF E7 C3 99 99 99 C3  ................
  73D0: E7 FF FF FF FF FF 00 00 1E 0E 1E 36 78 CC CC CC  ...........6x...
  73E0: CC 78 00 00 00 00 00 00 3C 66 66 66 3C 18 7E 18  .x......<fff<.~.
  73F0: 18 18 00 00 00 00 00 00 1E 1A 1E 18 18 18 18 78  ...............x
  7400: F8 70 00 00 00 00 00 00 3E 36 3E 36 36 76 F6 66  .p......>6>66v.f
  7410: 0E 1E 0C 00 00 00 00 00 18 DB 7E 3C 66 66 3C 7E  ..........~<ff<~
  7420: DB 18 00 00 00 00 00 00 00 80 E0 F0 FC FE FC F0  ................
  7430: E0 80 00 00 00 00 00 00 00 02 0E 3E 7E FE 7E 3E  ...........>~.~>
  7440: 0E 02 00 00 00 00 00 00 18 3C 7E 18 18 18 18 7E  .........<~....~
  7450: 3C 18 00 00 00 00 00 00 66 66 66 66 66 66 66 00  <.......fffffff.
  7460: 66 66 00 00 00 00 00 00 7F DB DB DB DB 7B 1B 1B  ff...........{..
  7470: 1B 1B 00 00 00 00 00 00 7C C6 C6 60 7C F6 DE 7C  ........|..`|..|
  7480: 0C C6 C6 7C 00 00 00 00 00 00 00 00 00 00 FE FE  ...|............
  7490: FE FE 00 00 00 00 00 00 18 3C 7E 18 18 18 7E 3C  .........<~...~<
  74A0: 18 7E 00 00 00 00 00 00 18 3C 7E 18 18 18 18 18  .~.......<~.....
  74B0: 18 18 00 00 00 00 00 00 18 18 18 18 18 18 18 7E  ...............~
  74C0: 3C 18 00 00 00 00 00 00 00 00 00 0C 0E FF 0E 0C  <...............
  74D0: 00 00 00 00 00 00 00 00 00 00 00 30 70 FE 70 30  ...........0p.p0
  74E0: 00 00 00 00 00 00 00 00 00 00 00 00 C0 C0 C0 FE  ................
  74F0: 00 00 00 00 00 00 00 00 00 00 00 24 66 FF 66 24  ...........$f.f$
  7500: 00 00 00 00 00 00 00 00 00 10 38 38 38 7C 7C FE  ..........888||.
  7510: FE 00 00 00 00 00 00 00 00 FE FE 7C 7C 7C 38 38  ...........|||88
  7520: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  7530: 00 00 00 00 00 00 00 00 18 3C 3C 3C 3C 18 18 00  .........<<<<...
  7540: 18 18 00 00 00 00 00 36 36 36 36 14 00 00 00 00  .......6666.....
  7550: 00 00 00 00 00 00 00 00 6C 6C 6C FE 6C 6C FE 6C  ........lll.ll.l
  7560: 6C 6C 00 00 00 00 00 00 18 18 7C C6 C0 78 3C 06  ll........|..x<.
  7570: C6 7C 18 18 00 00 00 00 00 00 00 62 66 0C 18 30  .|.........bf..0
  7580: 66 C6 00 00 00 00 00 00 38 6C 38 30 76 7E CC CC  f.......8l80v~..
  7590: CC 76 00 00 00 00 00 0C 0C 0C 18 00 00 00 00 00  .v..............
  75A0: 00 00 00 00 00 00 00 00 0C 18 30 30 30 30 30 30  ..........000000
  75B0: 18 0C 00 00 00 00 00 00 30 18 0C 0C 0C 0C 0C 0C  ........0.......
  75C0: 18 30 00 00 00 00 00 00 00 00 00 6C 38 FE 38 6C  .0.........l8.8l
  75D0: 00 00 00 00 00 00 00 00 00 00 00 18 18 7E 18 18  .............~..
  75E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0C  ................
  75F0: 0C 0C 18 00 00 00 00 00 00 00 00 00 00 FE 00 00  ................
  7600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  7610: 18 18 00 00 00 00 00 00 00 00 02 06 0C 18 30 60  ..............0`
  7620: C0 80 00 00 00 00 00 00 7C C6 C6 CE DE F6 E6 C6  ........|.......
  7630: C6 7C 00 00 00 00 00 00 18 78 18 18 18 18 18 18  .|.......x......
  7640: 18 7E 00 00 00 00 00 00 7C C6 C6 06 0C 18 30 60  .~......|.....0`
  7650: C6 FE 00 00 00 00 00 00 7C C6 06 06 3C 06 06 06  ........|...<...
  7660: C6 7C 00 00 00 00 00 00 0C 1C 3C 6C CC CC FE 0C  .|........<l....
  7670: 0C 1E 00 00 00 00 00 00 FE C0 C0 C0 FC 06 06 06  ................
  7680: C6 7C 00 00 00 00 00 00 7C C6 C0 C0 FC C6 C6 C6  .|......|.......
  7690: C6 7C 00 00 00 00 00 00 FE C6 06 0C 18 30 30 30  .|...........000
  76A0: 30 30 00 00 00 00 00 00 7C C6 C6 C6 7C C6 C6 C6  00......|...|...
  76B0: C6 7C 00 00 00 00 00 00 7C C6 C6 C6 C6 7E 06 06  .|......|....~..
  76C0: C6 7C 00 00 00 00 00 00 00 00 00 0C 0C 00 00 0C  .|..............
  76D0: 0C 00 00 00 00 00 00 00 00 00 00 0C 0C 00 00 0C  ................
  76E0: 0C 0C 18 00 00 00 00 00 00 0C 18 30 60 C0 60 30  ...........0`.`0
  76F0: 18 0C 00 00 00 00 00 00 00 00 00 00 FE 00 FE 00  ................
  7700: 00 00 00 00 00 00 00 00 00 60 30 18 0C 06 0C 18  .........`0.....
  7710: 30 60 00 00 00 00 00 00 7C C6 C6 0C 18 18 18 00  0`......|.......
  7720: 18 18 00 00 00 00 00 00 7C C6 C6 C6 DE DE DE DC  ........|.......
  7730: C0 7E 00 00 00 00 00 00 38 6C C6 C6 C6 FE C6 C6  .~......8l......
  7740: C6 C6 00 00 00 00 00 00 FC 66 66 66 7C 66 66 66  .........fff|fff
  7750: 66 FC 00 00 00 00 00 00 3C 66 C2 C0 C0 C0 C0 C2  f.......<f......
  7760: 66 3C 00 00 00 00 00 00 F8 6C 66 66 66 66 66 66  f<.......lffffff
  7770: 6C F8 00 00 00 00 00 00 FE 66 60 64 7C 64 60 60  l........f`d|d``
  7780: 66 FE 00 00 00 00 00 00 FE 66 60 64 7C 64 60 60  f........f`d|d``
  7790: 60 F0 00 00 00 00 00 00 7C C6 C6 C0 C0 C0 CE C6  `.......|.......
  77A0: C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 FE C6 C6 C6  .|..............
  77B0: C6 C6 00 00 00 00 00 00 3C 18 18 18 18 18 18 18  ........<.......
  77C0: 18 3C 00 00 00 00 00 00 3C 18 18 18 18 18 18 D8  .<......<.......
  77D0: D8 70 00 00 00 00 00 00 C6 C6 CC D8 F0 F0 D8 CC  .p..............
  77E0: C6 C6 00 00 00 00 00 00 F0 60 60 60 60 60 60 62  .........``````b
  77F0: 66 FE 00 00 00 00 00 00 C6 C6 EE EE FE D6 D6 D6  f...............
  7800: C6 C6 00 00 00 00 00 00 C6 C6 E6 E6 F6 DE CE CE  ................
  7810: C6 C6 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6  ........|.......
  7820: C6 7C 00 00 00 00 00 00 FC 66 66 66 66 7C 60 60  .|.......ffff|``
  7830: 60 F0 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 D6  `.......|.......
  7840: D6 7C 06 00 00 00 00 00 FC 66 66 66 7C 78 6C 66  .|.......fff|xlf
  7850: 66 E6 00 00 00 00 00 00 7C C6 C0 C0 70 1C 06 06  f.......|...p...
  7860: C6 7C 00 00 00 00 00 00 7E 5A 18 18 18 18 18 18  .|......~Z......
  7870: 18 3C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6  .<..............
  7880: C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C  .|.............l
  7890: 38 10 00 00 00 00 00 00 C6 C6 C6 D6 D6 D6 FE EE  8...............
  78A0: C6 C6 00 00 00 00 00 00 C6 C6 C6 6C 38 38 6C C6  ...........l88l.
  78B0: C6 C6 00 00 00 00 00 00 66 66 66 66 66 3C 18 18  ........fffff<..
  78C0: 18 3C 00 00 00 00 00 00 FE C6 86 0C 18 30 60 C2  .<...........0`.
  78D0: C6 FE 00 00 00 00 00 00 7C 60 60 60 60 60 60 60  ........|```````
  78E0: 60 7C 00 00 00 00 00 00 00 00 80 C0 60 30 18 0C  `|..........`0..
  78F0: 06 02 00 00 00 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C  ........|.......
  7900: 0C 7C 00 00 00 00 00 10 38 6C C6 00 00 00 00 00  .|......8l......
  7910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  7920: 00 00 00 FF 00 00 00 18 18 18 0C 00 00 00 00 00  ................
  7930: 00 00 00 00 00 00 00 00 00 00 00 78 0C 7C CC CC  ...........x.|..
  7940: DC 76 00 00 00 00 00 00 E0 60 60 7C 66 66 66 66  .v.......``|ffff
  7950: 66 FC 00 00 00 00 00 00 00 00 00 7C C6 C0 C0 C0  f..........|....
  7960: C6 7C 00 00 00 00 00 00 1C 0C 0C 7C CC CC CC CC  .|.........|....
  7970: CC 7E 00 00 00 00 00 00 00 00 00 7C C6 C6 FE C0  .~.........|....
  7980: C6 7C 00 00 00 00 00 00 1C 36 30 30 FC 30 30 30  .|.......600.000
  7990: 30 78 00 00 00 00 00 00 00 00 00 76 CE C6 C6 CE  0x.........v....
  79A0: 76 06 C6 7C 00 00 00 00 E0 60 60 7C 66 66 66 66  v..|.....``|ffff
  79B0: 66 E6 00 00 00 00 00 00 18 18 00 38 18 18 18 18  f..........8....
  79C0: 18 3C 00 00 00 00 00 00 0C 0C 00 1C 0C 0C 0C 0C  .<..............
  79D0: 0C CC CC 78 00 00 00 00 E0 60 60 66 66 6C 78 6C  ...x.....``fflxl
  79E0: 66 E6 00 00 00 00 00 00 18 18 18 18 18 18 18 18  f...............
  79F0: 18 1C 00 00 00 00 00 00 00 00 00 6C FE D6 D6 C6  ...........l....
  7A00: C6 C6 00 00 00 00 00 00 00 00 00 DC 66 66 66 66  ............ffff
  7A10: 66 66 00 00 00 00 00 00 00 00 00 7C C6 C6 C6 C6  ff.........|....
  7A20: C6 7C 00 00 00 00 00 00 00 00 00 DC 66 66 66 66  .|..........ffff
  7A30: 7C 60 60 F0 00 00 00 00 00 00 00 76 CC CC CC CC  |``........v....
  7A40: 7C 0C 0C 1E 00 00 00 00 00 00 00 DC 66 60 60 60  |...........f```
  7A50: 60 F0 00 00 00 00 00 00 00 00 00 7C C6 C0 7C 06  `..........|..|.
  7A60: C6 7C 00 00 00 00 00 00 30 30 30 FC 30 30 30 30  .|......000.0000
  7A70: 36 1C 00 00 00 00 00 00 00 00 00 CC CC CC CC CC  6...............
  7A80: CC 76 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6 6C  .v.............l
  7A90: 38 10 00 00 00 00 00 00 00 00 00 C6 C6 D6 D6 D6  8...............
  7AA0: FE 6C 00 00 00 00 00 00 00 00 00 C6 C6 6C 38 6C  .l...........l8l
  7AB0: C6 C6 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6 CE  ................
  7AC0: 76 06 C6 7C 00 00 00 00 00 00 00 FE 86 0C 18 30  v..|...........0
  7AD0: 62 FE 00 00 00 00 00 00 0E 18 18 18 70 18 18 18  b...........p...
  7AE0: 18 0E 00 00 00 00 00 00 18 18 18 18 00 18 18 18  ................
  7AF0: 18 18 00 00 00 00 00 00 70 18 18 18 0E 18 18 18  ........p.......
  7B00: 18 70 00 00 00 00 00 00 76 DC 00 00 00 00 00 00  .p......v.......
  7B10: 00 00 00 00 00 00 00 00 00 00 00 10 38 38 6C 6C  ............88ll
  7B20: FE 00 00 00 00 00 00 00 3C 66 C0 C0 C0 C6 66 3C  ........<f....f<
  7B30: 18 0C CC 38 00 00 00 00 C6 00 00 C6 C6 C6 C6 C6  ...8............
  7B40: CE 76 00 00 00 00 00 0C 18 30 00 7C C6 C6 FE C0  .v.......0.|....
  7B50: C6 7C 00 00 00 00 00 30 78 CC 00 78 0C 7C CC CC  .|.....0x..x.|..
  7B60: DC 76 00 00 00 00 00 00 CC 00 00 78 0C 7C CC CC  .v.........x.|..
  7B70: DC 76 00 00 00 00 00 60 30 18 00 78 0C 7C CC CC  .v.....`0..x.|..
  7B80: DC 76 00 00 00 00 00 38 6C 38 00 78 0C 7C CC CC  .v.....8l8.x.|..
  7B90: DC 76 00 00 00 00 00 00 00 00 7C C6 C0 C0 C6 7C  .v........|....|
  7BA0: 18 0C 6C 38 00 00 00 30 78 CC 00 7C C6 C6 FE C0  ..l8...0x..|....
  7BB0: C6 7C 00 00 00 00 00 00 CC 00 00 7C C6 C6 FE C0  .|.........|....
  7BC0: C6 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 FE C0  .|.....0...|....
  7BD0: C6 7C 00 00 00 00 00 00 66 00 00 38 18 18 18 18  .|......f..8....
  7BE0: 18 3C 00 00 00 00 00 18 3C 66 00 38 18 18 18 18  .<......<f.8....
  7BF0: 18 3C 00 00 00 00 00 00 00 00 00 38 18 18 18 18  .<.........8....
  7C00: 18 3C 00 00 00 00 00 C6 00 38 6C C6 C6 C6 FE C6  .<.......8l.....
  7C10: C6 C6 00 00 00 00 38 6C 38 00 38 6C C6 C6 FE C6  ......8l8.8l....
  7C20: C6 C6 00 00 00 00 0C 18 30 00 FE 60 60 7C 60 60  ........0..``|``
  7C30: 60 FE 00 00 00 00 00 00 00 00 66 DB 1B 7F D8 D8  `.........f.....
  7C40: DF 76 00 00 00 00 00 00 7E D8 D8 D8 D8 FE D8 D8  .v......~.......
  7C50: D8 DE 00 00 00 00 00 30 78 CC 00 7C C6 C6 C6 C6  .......0x..|....
  7C60: C6 7C 00 00 00 00 00 00 C6 00 00 7C C6 C6 C6 C6  .|.........|....
  7C70: C6 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 C6 C6  .|.....0...|....
  7C80: C6 7C 00 00 00 00 00 30 78 CC 00 C6 C6 C6 C6 C6  .|.....0x.......
  7C90: CE 76 00 00 00 00 00 60 30 18 00 C6 C6 C6 C6 C6  .v.....`0.......
  7CA0: CE 76 00 00 00 00 00 18 00 3C 18 18 18 18 18 18  .v.......<......
  7CB0: 18 3C 00 00 00 00 00 C6 00 7C C6 C6 C6 C6 C6 C6  .<.......|......
  7CC0: C6 7C 00 00 00 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6  .|..............
  7CD0: C6 7C 00 00 00 00 00 00 18 18 7C C6 C0 C0 C6 7C  .|........|....|
  7CE0: 18 18 00 00 00 00 00 38 6C 60 60 F0 60 60 60 66  .......8l``.```f
  7CF0: F6 6C 00 00 00 00 00 66 66 66 66 3C 18 7E 18 3C  .l.....ffff<.~.<
  7D00: 18 18 00 00 00 00 00 00 3E 63 63 30 1C 06 63 63  ........>cc0..cc
  7D10: 3E 00 1C 00 00 00 00 00 00 00 00 3E 63 38 0E 63  >..........>c8.c
  7D20: 3E 00 1C 00 00 00 00 0C 18 30 00 78 0C 7C CC CC  >........0.x.|..
  7D30: DC 76 00 00 00 00 00 0C 18 30 00 38 18 18 18 18  .v.......0.8....
  7D40: 18 3C 00 00 00 00 00 0C 18 30 00 7C C6 C6 C6 C6  .<.......0.|....
  7D50: C6 7C 00 00 00 00 00 18 30 60 00 CC CC CC CC CC  .|......0`......
  7D60: DC 76 00 00 00 00 00 00 76 DC 00 BC 66 66 66 66  .v......v...ffff
  7D70: 66 E6 00 00 00 00 00 76 DC 00 C6 C6 E6 F6 DE CE  f......v........
  7D80: C6 C6 00 00 00 00 00 21 1E 00 1E 33 60 60 67 63  .......!...3``gc
  7D90: 33 1D 00 00 00 00 00 42 3C 00 3B 66 66 66 3E 06  3......B<.;fff>.
  7DA0: 66 3C 00 00 00 00 00 00 30 30 00 30 30 30 60 C6  f<......00.000`.
  7DB0: C6 7C 00 00 00 00 00 00 00 00 00 00 00 7E 60 60  .|...........~``
  7DC0: 60 00 00 00 00 00 00 00 00 00 00 00 00 7E 06 06  `............~..
  7DD0: 06 00 00 00 00 00 00 60 60 62 66 6C 18 30 60 DC  .......``bfl.0`.
  7DE0: 36 0C 18 3E 00 00 00 60 60 62 66 6C 18 36 6E DE  6..>...``bfl.6n.
  7DF0: 36 7E 06 06 00 00 00 00 18 18 00 18 18 3C 3C 3C  6~...........<<<
  7E00: 3C 18 00 00 00 00 00 00 00 00 00 36 6C D8 6C 36  <..........6l.l6
  7E10: 00 00 00 00 00 00 00 00 00 00 00 D8 6C 36 6C D8  ............l6l.
  7E20: 00 00 00 00 00 00 11 44 11 44 11 44 11 44 11 44  .......D.D.D.D.D
  7E30: 11 44 11 44 11 44 AA 55 AA 55 AA 55 AA 55 AA 55  .D.D.D.U.U.U.U.U
  7E40: AA 55 AA 55 AA 55 DD 77 DD 77 DD 77 DD 77 DD 77  .U.U.U.w.w.w.w.w
  7E50: DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18  .w.w.w..........
  7E60: 18 18 18 18 18 18 18 18 18 18 18 18 18 F8 18 18  ................
  7E70: 18 18 18 18 18 18 18 18 18 18 18 F8 18 F8 18 18  ................
  7E80: 18 18 18 18 18 18 36 36 36 36 36 36 36 F6 36 36  ......6666666.66
  7E90: 36 36 36 36 36 36 00 00 00 00 00 00 00 FE 36 36  666666........66
  7EA0: 36 36 36 36 36 36 00 00 00 00 00 F8 18 F8 18 18  666666..........
  7EB0: 18 18 18 18 18 18 36 36 36 36 36 F6 06 F6 36 36  ......66666...66
  7EC0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  6666666666666666
  7ED0: 36 36 36 36 36 36 00 00 00 00 00 FE 06 F6 36 36  666666........66
  7EE0: 36 36 36 36 36 36 36 36 36 36 36 F6 06 FE 00 00  66666666666.....
  7EF0: 00 00 00 00 00 00 36 36 36 36 36 36 36 FE 00 00  ......6666666...
  7F00: 00 00 00 00 00 00 18 18 18 18 18 F8 18 F8 00 00  ................
  7F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 F8 18 18  ................
  7F20: 18 18 18 18 18 18 18 18 18 18 18 18 18 1F 00 00  ................
  7F30: 00 00 00 00 00 00 18 18 18 18 18 18 18 FF 00 00  ................
  7F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 18 18  ................
  7F50: 18 18 18 18 18 18 18 18 18 18 18 18 18 1F 18 18  ................
  7F60: 18 18 18 18 18 18 00 00 00 00 00 00 00 FF 00 00  ................
  7F70: 00 00 00 00 00 00 18 18 18 18 18 18 18 FF 18 18  ................
  7F80: 18 18 18 18 18 18 18 18 18 18 18 1F 18 1F 18 18  ................
  7F90: 18 18 18 18 18 18 36 36 36 36 36 36 36 37 36 36  ......6666666766
  7FA0: 36 36 36 36 36 36 36 36 36 36 36 37 30 3F 00 00  6666666666670?..
  7FB0: 00 00 00 00 00 00 00 00 00 00 00 3F 30 37 36 36  ...........?0766
  7FC0: 36 36 36 36 36 36 36 36 36 36 36 F7 00 FF 00 00  66666666666.....
  7FD0: 00 00 00 00 00 00 00 00 00 00 00 FF 00 F7 36 36  ..............66
  7FE0: 36 36 36 36 36 36 36 36 36 36 36 37 30 37 36 36  6666666666670766
  7FF0: 36 36 36 36 36 36 00 00 00 00 00 FF 00 FF 00 00  666666..........
  8000: 00 00 00 00 00 00 36 36 36 36 36 F7 00 F7 36 36  ......66666...66
  8010: 36 36 36 36 36 36 18 18 18 18 18 FF 00 FF 00 00  666666..........
  8020: 00 00 00 00 00 00 36 36 36 36 36 36 36 FF 00 00  ......6666666...
  8030: 00 00 00 00 00 00 00 00 00 00 00 FF 00 FF 18 18  ................
  8040: 18 18 18 18 18 18 00 00 00 00 00 00 00 FF 36 36  ..............66
  8050: 36 36 36 36 36 36 36 36 36 36 36 36 36 3F 00 00  6666666666666?..
  8060: 00 00 00 00 00 00 18 18 18 18 18 1F 18 1F 00 00  ................
  8070: 00 00 00 00 00 00 00 00 00 00 00 1F 18 1F 18 18  ................
  8080: 18 18 18 18 18 18 00 00 00 00 00 00 00 3F 36 36  .............?66
  8090: 36 36 36 36 36 36 36 36 36 36 36 36 36 FF 36 36  6666666666666.66
  80A0: 36 36 36 36 36 36 18 18 18 18 18 FF 18 FF 18 18  666666..........
  80B0: 18 18 18 18 18 18 18 18 18 18 18 18 18 F8 00 00  ................
  80C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 18  ................
  80D0: 18 18 18 18 18 18 FF FF FF FF FF FF FF FF FF FF  ................
  80E0: FF FF FF FF FF FF 00 00 00 00 00 00 00 00 FF FF  ................
  80F0: FF FF FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  ................
  8100: F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  ................
  8110: 0F 0F 0F 0F 0F 0F FF FF FF FF FF FF FF FF 00 00  ................
  8120: 00 00 00 00 00 00 00 00 00 00 76 DC D8 D8 D8 D8  ..........v.....
  8130: DC 76 00 00 00 00 00 00 78 CC CC D8 FC C6 C6 C6  .v......x.......
  8140: C6 CC 00 00 00 00 00 00 FE 66 62 60 60 60 60 60  .........fb`````
  8150: 60 60 00 00 00 00 00 00 00 00 00 FE 6C 6C 6C 6C  ``..........llll
  8160: 6C 6C 00 00 00 00 00 00 FE C6 62 30 18 18 30 62  ll........b0..0b
  8170: C6 FE 00 00 00 00 00 00 00 00 00 7E D8 CC CC CC  ...........~....
  8180: D8 70 00 00 00 00 00 00 00 00 66 66 66 66 66 7C  .p........fffff|
  8190: 60 C0 80 00 00 00 00 00 00 00 00 76 DC 18 18 18  `..........v....
  81A0: 18 18 00 00 00 00 00 00 FE 38 38 6C C6 C6 6C 38  .........88l..l8
  81B0: 38 FE 00 00 00 00 00 00 00 38 6C C6 C6 FE C6 C6  8........8l.....
  81C0: 6C 38 00 00 00 00 00 00 38 6C C6 C6 C6 C6 6C 6C  l8......8l....ll
  81D0: 6C EE 00 00 00 00 00 00 3E 60 60 3C 66 C6 C6 C6  l.......>``<f...
  81E0: CC 78 00 00 00 00 00 00 00 00 00 7E DB DB DB 7E  .x.........~...~
  81F0: 00 00 00 00 00 00 00 00 02 06 7C CE DE F6 F6 7C  ..........|....|
  8200: 60 C0 00 00 00 00 00 00 00 1C 30 60 60 7C 60 60  `.........0``|``
  8210: 30 1C 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6  0.......|.......
  8220: C6 C6 00 00 00 00 00 00 00 00 FE 00 00 FE 00 00  ................
  8230: FE 00 00 00 00 00 00 00 00 00 18 18 7E 18 18 00  ............~...
  8240: 00 7E 00 00 00 00 00 00 30 18 0C 06 0C 18 30 00  .~......0.....0.
  8250: 00 7E 00 00 00 00 00 00 0C 18 30 60 30 18 0C 00  .~........0`0...
  8260: 00 7E 00 00 00 00 00 00 00 00 0C 1E 1A 18 18 18  .~..............
  8270: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  ................
  8280: 58 78 30 00 00 00 00 00 00 00 18 18 00 7E 00 18  Xx0..........~..
  8290: 18 00 00 00 00 00 00 00 00 00 00 00 76 DC 00 76  ............v..v
  82A0: DC 00 00 00 00 00 00 00 78 CC CC 78 00 00 00 00  ........x..x....
  82B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 18 00  ................
  82C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18 00  ................
  82D0: 00 00 00 00 00 00 00 00 1F 18 18 18 18 18 D8 D8  ................
  82E0: 78 38 18 00 00 00 00 00 D8 6C 6C 6C 6C 6C 00 00  x8.......lllll..
  82F0: 00 00 00 00 00 00 00 00 70 D8 18 30 60 F8 00 00  ........p..0`...
  8300: 00 00 00 00 00 00 00 00 00 00 00 7E 7E 7E 7E 7E  ...........~~~~~
  8310: 7E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ~...............
  8320: 00 00 00 00 00 00 1D 00 00 00 00 00 24 66 FF 66  ............$f.f
  8330: 24 00 00 00 00 00 00 2F 00 00 00 01 03 06 0C 18  $....../........
  8340: 30 60 C0 80 00 00 00 00 30 00 00 7E C3 C3 C3 DB  0`......0..~....
  8350: DB C3 C3 C3 7E 00 00 00 00 4D 00 00 C3 C3 E7 FF  ....~....M......
  8360: FF DB DB C3 C3 C3 00 00 00 00 54 00 00 FF 99 18  ..........T.....
  8370: 18 18 18 18 18 18 3C 00 00 00 00 56 00 00 C3 C3  ......<....V....
  8380: C3 C3 C3 C3 C3 66 3C 18 00 00 00 00 57 00 00 C3  .....f<.....W...
  8390: C3 C3 C3 DB DB DB DB FF 66 00 00 00 00 58 00 00  ........f....X..
  83A0: C3 C3 C3 66 3C 3C 66 C3 C3 C3 00 00 00 00 59 00  ...f<<f.......Y.
  83B0: 00 C3 C3 C3 C3 66 3C 18 18 18 3C 00 00 00 00 5C  .....f<...<....\
  83C0: 00 00 00 80 C0 60 30 18 0C 06 03 01 00 00 00 00  .....`0.........
  83D0: 6D 00 00 00 00 00 66 FF DB DB DB C3 C3 00 00 00  m.....f.........
  83E0: 00 76 00 00 00 00 00 C3 C3 C3 C3 66 3C 18 00 00  .v.........f<...
  83F0: 00 00 77 00 00 00 00 00 C3 C3 DB DB DB FF 66 00  ..w...........f.
  8400: 00 00 00 00 00 BE 72 C3 8B FA A0 10 04 24 30 AA  ......r......$0.
  8410: B9 1E 00 BE 49 04 F3 A4 B1 07 BE 84 04 F3 A4 B1  ....I...........
  8420: 04 BE A8 04 F3 A4 9C FA B1 04 BE 14 00 F3 A4 B1  ................
  8430: 04 BE 74 00 F3 A4 B1 04 BE 7C 00 F3 A4 B1 04 BE  ..t......|......
  8440: 0C 01 F3 A4 C4 3E 08 01 89 3E B4 01 8C 06 B6 01  .....>...>......
  8450: C7 06 08 01 D2 5B 8C 0E 0A 01 9D C3 8B F2 8C C2  .....[..........
  8460: 8E DA 33 D2 8E C2 26 8A 26 10 04 80 E4 CF AC 0A  ..3...&.&.......
  8470: C4 26 A2 10 04 B9 1E 00 BF 49 04 F3 A4 B1 07 BF  .&.......I......
  8480: 84 04 F3 A4 B1 04 BF A8 04 F3 A4 9C FA B1 04 BF  ................
  8490: 14 00 F3 A4 B1 04 BF 74 00 F3 A4 B1 04 BF 7C 00  .......t......|.
  84A0: F3 A4 B1 04 BF 0C 01 F3 A4 06 1F B1 04 BE B4 01  ................
  84B0: BF 08 01 F3 A4 C7 06 B4 01 D2 5B 8C 0E B6 01 9D  ..........[.....
  84C0: C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00 F3 AA  ...t..F.W2..@...
  84D0: 5F BB 7D A1 26 89 1D 26 8C 4D 02 2E 8E 1E 19 03  _.}.&..&.M......
  84E0: 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26 88 05  W.I..........&..
  84F0: 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22 A1 85  FG.._.....&.E"..
  8500: 04 26 89 45 23 57 E8 12 1C 5F 26 88 5D 25 26 88  .&.E#W..._&.]%&.
  8510: 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13 7F 1D  }&..I....t......
  8520: 32 FF D1 E3 2E 8A 87 55 A1 32 E4 0A C0 74 01 40  2......U.2...t.@
  8530: 26 89 45 27 2E 8A 87 56 A1 26 88 45 29 A1 85 04  &.E'...V.&.E)...
  8540: 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2  ..........=..~..
  8550: 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D  .=^.~...=..~...=
  8560: E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4 24 01  ..~.&.U*.&....$.
  8570: C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0 89 04  ................
  8580: 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC 24 08  $.........0.B.$.
  8590: C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26 88 45  .......&.E-..&.E
  85A0: 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE  1.w...2.........
  85B0: 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03 80 CA  ;.t4&.w.....t...
  85C0: 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08 26 C5  .&.w.....t....&.
  85D0: 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77 10 8C  w.....t....&.w..
  85E0: D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32 B0 03  ...t......&.U2..
  85F0: BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0  ................
  8600: EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B 8B EC  .....%....&.E+..
  8610: C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE C8 74  .F.....t...t6..t
  8620: 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01 74 03  V...F.... ....t.
  8630: 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04 74 03  ..`...t...:...t.
  8640: 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E C6 46  .....?......F..F
  8650: 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8 85 00  ....... ...t....
  8660: F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01  ...t.......t....
  8670: 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 16 15 E8  ...F......t.....
  8680: 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74 03 E8  %....t.......t..
  8690: 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3  .......B....J...
  86A0: E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA 8A C4  .k.......2......
  86B0: EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA B0 20  .B....J........ 
  86C0: EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A 25 EF  ..&....GF...&.%.
  86D0: 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE  G..........&..G.
  86E0: C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26 89 07  .......QW..+.&..
  86F0: 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41 B2 CE  ......&.D.&.TA..
  8700: EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA EC 26  .&.D....&.D....&
  8710: 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04 00 B4  .D....&.........
  8720: 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54  ..p.&........&.T
  8730: 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE E8 5F  A2.....[.&.D..._
  8740: FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44 02 EE  ...2.....I.&.D..
  8750: 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26 89 47  _Y..`......+.&.G
  8760: 02 51 57 2E 8E 1E 19 03 A0 10 04 24 30 AA BE 49  .QW........$0..I
  8770: 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04  ................
  8780: B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00 B1 04  ............t...
  8790: F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4  ...|............
  87A0: 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7  _Y..:....&.?....
  87B0: 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0 01 B9  Q...............
  87C0: 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8  .....G..&.D.....
  87D0: 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00 EF B1  ...&...&.TA.....
  87E0: 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06 26 8A  .2....&.D.....&.
  87F0: 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE B1 09  D.....2..... ...
  8800: 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C  2......&.D..Y...
  8810: FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E 19 03 26 8A  .&......Q.....&.
  8820: 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04 B9 1E  ..&.......G.I...
  8830: 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8 04 B1  ................
  8840: 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74 00 B1  ..~.......v..t..
  8850: 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1  ..n..|....f.....
  8860: 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3 26 89  ..^.Y.......+.&.
  8870: 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA  G.......4.B.&...
  8880: C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45 02 83  ...&.E.PJJ.&.E..
  8890: C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2 FC 58  .....B2..BB....X
  88A0: 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2  J.....&.w....l..
  88B0: C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44 02 EE  ..4.&......&.D..
  88C0: 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26 8A 04  VBB...2..B...&..
  88D0: EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3 BA CC  .F..^..&.D......
  88E0: 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2 C0 86  ..$.............
  88F0: C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0 20 EE  .............. .
  8900: C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26 87 04  .P......&....&..
  8910: 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75 17 3C  $...<.~.&.G3.u.<
  8920: 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26 F6 47  #t.<2t.<3t...&.G
  8930: 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80 0E 87  ..u....&I.......
  8940: 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87 04 FD  ..&.G..t....&...
  8950: 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04 00 B9  ..c...N.....b...
  8960: 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A  ...P.....3....&.
  8970: 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26 8A 47  .2..J.&.G....&.G
  8980: 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47 14 86  ....&.G..L.&.G..
  8990: C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6  ..`.X.R2.3......
  89A0: C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E  .)u.2.3.....Z...
  89B0: 60 2E 8E 1E 19 03 2E 83 0E 23 03 00 75 6E 80 3E  `........#..un.>
  89C0: 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04 32 FF  ...tg.......b.2.
  89D0: D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32 F6 8A  ......P..>b.P2..
  89E0: 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF  ...2.AQ..J.2....
  89F0: F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8 3A D2  ..)u=QR..P....:.
  8A00: 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4 29 75  ..u.. 3.2.....)u
  8A10: 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77 FF 32  .Z..Y....Y...w.2
  8A20: C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F 07 CF  ....X..P....a...
  8A30: 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02 32 C0  ZYY....R*.8.}.2.
  8A40: 2E 8E 06 1B 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8  .....Z..........
  8A50: 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00 8B D1  ............m...
  8A60: 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32  2...........Ku.2
  8A70: E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04 0A DB  ..W..S..b...u...
  8A80: 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01 8A C3  t..5.[..+.......
  8A90: 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6  2....2.+...t**..
  8AA0: 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F  &....R... ......
  8AB0: EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48  .Z.............H
  8AC0: 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03 B0 05  u...............
  8AD0: EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42 EB 00  .B.$....J....B..
  8AE0: EC 4A 9D C3 1E 2E 8E 1E 19 03 8B 16 63 04 80 C2  .J..........c...
  8AF0: 06 1F C3 1E 2E 8E 1E 19 03 8B 16 63 04 1F C3 50  ...........c...P
  8B00: BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE  ........u...X...
  8B10: FF 80 C2 06 C3 1E 2E 8E 1E 19 03 80 3E 49 04 03  ............>I..
  8B20: 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01 74 05  t..>I..t..>I..t.
  8B30: 80 3E 49 04 00 1F C3 50 2E 8E 06 1D 03 A0 10 04  .>I....P........
  8B40: 24 30 3C 30 74 05 2E 8E 06 1F 03 58 0B C0 74 03  $0<0t......X..t.
  8B50: E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32 ED 8B  .....N.....+.2..
  8B60: 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A  .J..............
  8B70: DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B  .u...8.~........
  8B80: C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F E8 1B  ......:.J.t.....
  8B90: 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8  .....@..........
  8BA0: 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A CE 2A  ....+.......S..*
  8BB0: CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B CA F3  .2.2.+.+........
  8BC0: A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA F3 AB  .......u.X. ....
  8BD0: 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2  ....u..S..*.t...
  8BE0: 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B  ....X...... ....
  8BF0: D8 E8 2E 00 2E 8E 1E 1F 03 8A C3 22 DF D3 E3 A8  ..........."....
  8C00: 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C  .t.0.....4".....
  8C10: C3 8A FC E8 0C 00 2E 8E 1E 1F 03 8A 04 D2 E8 22  ..............."
  8C20: C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1  ...(.....t......
  8C30: C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0  ................
  8C40: E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3  ................
  8C50: FC 8A D8 2E 8E 06 1F 03 8B C1 E8 86 00 75 02 8A  .............u..
  8C60: DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 1F 03 8A  ....$...........
  8C70: C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6 F0 00  ....m.u.........
  8C80: 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C  ....+.......*..,
  8C90: 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B  Q..VW..........+
  8CA0: F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3 A5 13  .+.... ... .....
  8CB0: C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7  ..._^....Y......
  8CC0: 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81  ..W..........+..
  8CD0: C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB  .. ........_....
  8CE0: 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3 76 02  u.........+.8.v.
  8CF0: 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50 00 80  2.Q......Y2..P..
  8D00: 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0  >I..t...........
  8D10: B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1 E3 8B  .P.....RS..2....
  8D20: 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03  .P....P...L...[.
  8D30: C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2  .[Z.R...J...2...
  8D40: D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 F4 8C 8B E8  ..Z.............
  8D50: C1 ED 04 83 E5 0F 2E 8A 86 F4 8C C3 00 03 0C 0F  ................
  8D60: 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B 04 86  03<?........&...
  8D70: E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02  .......t........
  8D80: 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86 E0 EF  u..V.E...c......
  8D90: 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A 04 C1  ......R.....&J..
  8DA0: E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B  ..2...Z.S..2....
  8DB0: 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32 F6 52  .P......[.R..2.R
  8DC0: 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A DB 74  ...&...&J.Z....t
  8DD0: 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A  ...L...u.Z.R...J
  8DE0: 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B  ...2.......N....
  8DF0: C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9  ......Z....&J...
  8E00: C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C  .......t...2..&L
  8E10: 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3  ................
  8E20: E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0  ...... .......2.
  8E30: EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF C3 53  ...>..&.}......S
  8E40: B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E  ................
  8E50: AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74 0D B0  ....U......<.t..
  8E60: 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7  ..v.<Ut.2.[.....
  8E70: EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE 8A 36  ..........[....6
  8E80: 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8  ......t%..*.....
  8E90: 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3  R2........+.Q...
  8EA0: A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A DD EB  .+.+.Y..Z.......
  8EB0: F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02  ...........2....
  8EC0: 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75  ......+.....+.Nu
  8ED0: F7 C3 2E 8E 1E 19 03 89 0E 60 04 8A C5 24 60 A8  .........`...$`.
  8EE0: 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01 0F 85   t..............
  8EF0: 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01 C3 F6  ...>I..t....t...
  8F00: 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A D6 FE  ....t..B..6.....
  8F10: CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE C9 EB  .8.~...td.......
  8F20: 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED  \8.tX.....|.....
  8F30: FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A E4 75  ...I...~D..*...u
  8F40: 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A C1 38  .8.t8..8.t2....8
  8F50: F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80 FC 03  .~....~.........
  8F60: 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9 FE C9  }.....8.t.......
  8F70: 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8  ..*.............
  8F80: 05 FE C3 2E 8E 1E 19 03 A2 62 04 32 E4 8B F0 F7  .........b.2....
  8F90: 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80 3E 49  &L..N....z.t..>I
  8FA0: 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50  ..w............P
  8FB0: 04 E8 27 FE C3 2E 8E 1E 19 03 8A 26 49 04 E8 84  ..'........&I...
  8FC0: 92 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74 0B 80  .t...P.....H.t..
  8FD0: FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3 80 FC  ..t.w..w........
  8FE0: 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA  .|.t...N........
  8FF0: 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A  ..J.R.&........Z
  9000: E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7  .....0......g...
  9010: 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B  .R..J.....&.....
  9020: F7 03 F0 5A E8 55 FE C3 2E 8E 1E 19 03 8A 26 49  ...Z.U........&I
  9030: 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80 FC 03  ....t....t.w@...
  9040: 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A  ...S............
  9050: C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52  ........+>J....R
  9060: F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A  .&...&J......+.Z
  9070: 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80 FC 13  ..J.............
  9080: 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4  |.t.............
  9090: E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD  ...R..J..&....+.
  90A0: 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E 19 03  ..+.Z...........
  90B0: 2E 8E 06 1F 03 E8 5D FA 74 11 80 3E 49 04 07 7C  ......].t..>I..|
  90C0: 18 2E 8E 06 1D 03 74 03 E9 B1 00 E8 49 FC 8B D8  ......t.....I...
  90D0: 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B  &.....F...P.....
  90E0: F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75 1F B9  ....+....>I..u..
  90F0: 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20 88 46  ..&...F.E&... .F
  9100: 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6  .E..P...........
  9110: B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81 EE B0  ....V.... .O....
  9120: 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E  .....+..>..2....
  9130: 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B F5 8B  u.&.}..u........
  9140: CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74 23 FE  ....t.GVW.._^t#.
  9150: C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE CC 74  ......t.G..u...t
  9160: 0F 2E 8E 1E 19 03 C4 3E 7C 00 B0 80 B2 80 EB CB  .......>|.......
  9170: 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E 49 04  2........F...>I.
  9180: 13 7C 05 75 02 EB 5A C3 2E 8E 06 1B 03 E8 18 FC  .|.u..Z.........
  9190: 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9 05 00  ......+.........
  91A0: BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04 60 75  ....>I..r.....`u
  91B0: 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF B8 05  .......u........
  91C0: 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88 46 00  .....Q..&.....F.
  91D0: 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2 E9 44  E.6J...X....2..D
  91E0: FF 2E 8E 06 1B 03 A1 50 04 8B D0 32 F6 52 8A C4  .......P...2.R..
  91F0: 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B  2..&J..&..Z.....
  9200: 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03  ...+...S.>J.O...
  9210: C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A C0 74  ......2.&......t
  9220: 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B 75 E3  ....F...f.E..Ku.
  9230: 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD 01 00  [...2....3......
  9240: 2E 8E 1E 19 03 2E 8E 06 1F 03 8A 26 49 04 E8 C4  ...........&I...
  9250: F8 74 0F 2E 8E 06 1D 03 80 FC 07 74 05 7C 3D E9  .t.........t.|=.
  9260: 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87 50 04  ........2.....P.
  9270: 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A  ...J...2........
  9280: DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA 8B C6  .t....L.....u...
  9290: 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06  ..u.....G...P...
  92A0: 1F 03 A1 50 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A  ...P.......P..&J
  92B0: 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00 EB 04  ...X..t.$..6|...
  92C0: C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06  .6....2.........
  92D0: 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A  ti.....U........
  92E0: F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55 FA 23  ...P.....u'..U.#
  92F0: C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E  ....N.#.&......N
  9300: FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72 00 E2  ..u......>.X.r..
  9310: D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25 FA 23  ......#.&1...%.#
  9320: C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83 EE 08  .&1.. ..P..u....
  9330: 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04  ..>.X.I......P..
  9340: F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00 20 83  ...t..&0..&0.. .
  9350: C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58 E8 20  .P.........?.X. 
  9360: 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7 4F FE  .......&......O.
  9370: CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00 E2 BD  ........?.X.....
  9380: C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3 8A 16  ...8.r.2........
  9390: 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06 51 04  ......2...f...Q.
  93A0: F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA 68 00  ..f...J...du..h.
  93B0: 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03 BA B0  ..Zu..`.....u...
  93C0: 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04 66 03  .R..f...f...P.f.
  93D0: F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00 FF 66  .f.....f.......f
  93E0: C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50 C5 06  ...Z..J....P.P..
  93F0: 0C 01 03 F0 2E 8E 06 1B 03 58 57 51 50 9C FC 8B  .........XWQP...
  9400: CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A  ..;..........s..
  9410: C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2 E2 9D  .&..fG..u.f.....
  9420: 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32 C0 8B  XY_.....8.r.Q2..
  9430: CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06  .I.......Y+.....
  9440: 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8  R3...f.....f....
  9450: F3 8D 74 16 38 E0 74 12 0F B6 D0 E8 FF C5 8A E0  ..t.8.t.........
  9460: 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13  f.....f...Z.....
  9470: 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8 01 00  |.......b.......
  9480: C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53 8A DF  ....u.......PS..
  9490: 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 1B 03 E8 07  2.....P.[.......
  94A0: F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A 04 56  .......X2.R.6J.V
  94B0: 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83 7C FE  .&...6.....u..|.
  94C0: 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75  .u...F.........u
  94D0: 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0 57 51  m......ZXPRJ..WQ
  94E0: 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38  QW..2......_G..8
  94F0: D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0  .v.2...I..G..Y..
  9500: 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B  Y_........[KZQW.
  9510: CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B  ..&.%....._G+.B;
  9520: D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD  .v.3...I..G..Y..
  9530: BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE  ................
  9540: B8 03 18 EF EB BC 2E 8E 1E 19 03 80 3E 63 04 B4  ............>c..
  9550: 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1  t.......u..B....
  9560: F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04 E0 08  ...u.......&f...
  9570: 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2  &f..-...f... ...
  9580: EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01 74 02  ....t..f.$....t.
  9590: 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00 C3 E8  . .f.$......S...
  95A0: 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3 10 07  ~..SP...........
  95B0: 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3 0B ED  ...`.t......,...
  95C0: 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04 26 88  t.&.........t.&.
  95D0: 5D 10 58 5B C3 8A E0 1E 2E 8E 1E 19 03 80 3E 49  ].X[..........>I
  95E0: 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8  .3............0.
  95F0: C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A C4 EE  ................
  9600: 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80 C3 02  .....t.G&.......
  9610: E2 EB B0 20 EE 9D C3 2E 8E 1E 19 03 8A 26 49 04  ... .........&I.
  9620: E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3  ...t....w.t.....
  9630: 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA CE 03  ...|.tL.........
  9640: B0 08 EF 2E 8E 1E 1B 03 F6 C3 80 75 1C B2 C4 B8  ...........u....
  9650: 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88  ....%.......%...
  9660: 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2 C4 B0  %...............
  9670: 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 03 00  .....%...%......
  9680: EF EB E1 50 2E 8E 06 1B 03 A1 4A 04 C1 E0 03 F7  ...P......J.....
  9690: E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E 19 03 8A  .....X&.........
  96A0: 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74 08 E8  &I..o.t....w.t..
  96B0: 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74 29 C3  _....F.....|.t).
  96C0: E8 35 F7 8A CC 2E 8E 1E 1B 03 BA CE 03 32 FF B8  .5...........2..
  96D0: 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01 FE CC  .......".t......
  96E0: 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2  }....~...J......
  96F0: 03 C1 8B F8 2E 8E 1E 1B 03 8A 05 8B EC 88 46 1A  ..............F.
  9700: C3 2E 8E 1E 19 03 8A 3E 62 04 8A CF D0 E1 32 ED  .......>b.....2.
  9710: BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E  .P.......I.<.vJ.
  9720: 8E 06 1F 03 E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A  .......u3..J....
  9730: C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A  ...........N....
  9740: C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B 16 63  ....A..8.sY....c
  9750: 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E 06 1D  ................
  9760: 03 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C  ....t....u.2...<
  9770: 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6 89 14  .u.:6..u........
  9780: E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3  ...u.........L..
  9790: 3C 07 75 04 E8 A9 70 C3 3C 08 75 83 0A D2 74 DE  <.u...p.<.u...t.
  97A0: FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04 74 06  ....2.2.+.:6..t.
  97B0: FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E 8A E5  ..........c.....
  97C0: EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02 50 8B  ......+.+.&.e.P.
  97D0: 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8  >N..............
  97E0: 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4  ......X. .......
  97F0: 0A E8 46 C4 FE C2 3A 16 4A 04 74 03 89 14 C3 32  ..F...:.J.t....2
  9800: FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB ED 89  .2...:6..t......
  9810: 14 2E 8E 06 1F 03 E8 FC F2 74 0E 2E 8E 06 1D 03  .........t......
  9820: 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5 8B F9  ...t.2..........
  9830: D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A  ..O..J...3..6...
  9840: 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E 19 03 F6  .J......p.......
  9850: 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC C6 46  ....t..B..v....F
  9860: 1B 00 C3 2E 8E 1E 19 03 8A DF 32 FF D1 E3 89 97  ..........2.....
  9870: 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C F5 C3  P...8.b.u....\..
  9880: 2E 8E 1E 19 03 8A DF 32 FF D1 E3 8B 97 50 04 8B  .......2.....P..
  9890: 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E 1E 19  .`....N..V......
  98A0: 03 A0 87 04 24 80 0A 06 49 04 8A 26 4A 04 F6 06  ....$...I..&J...
  98B0: 87 04 08 75 2D E8 5D F2 74 07 80 3E 49 04 07 7F  ...u-.].t..>I...
  98C0: 21 51 8A CC 8A 2E 84 04 BE 8D 98 81 FE 96 98 74  !Q.............t
  98D0: 10 2E 3B 0C 74 05 83 C6 03 EB F0 24 80 2E 0A 44  ..;.t......$...D
  98E0: 02 59 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E 89 4E  .Y.>b....F..^..N
  98F0: 16 89 56 12 C3 84 18 23 84 2B 33 84 2A 32 2E 8E  ..V....#.+3.*2..
  9900: 1E 19 03 3C 04 7F 1B 50 52 BA CC 03 EC A8 01 5A  ...<...PR......Z
  9910: 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63 04 B4  Xt..>c..t...>c..
  9920: 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF A6 C9  u.<.s.2.........
  9930: 98 01 99 21 99 33 99 68 99 B2 98 B2 98 B2 98 8D  ...!.3.h........
  9940: 99 A5 99 A9 99 B2 98 B2 98 B2 98 B2 98 B2 98 B2  ................
  9950: 98 D7 99 B2 98 DB 99 F6 99 B2 98 35 9A B2 98 43  ...........5...C
  9960: 9A 5E 9A 65 9A 71 9A 95 9A 80 3E 49 04 13 74 15  .^.e.q....>I..t.
  9970: E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED 74 07 8A C7  ........p...t...
  9980: 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7 E8 44  2.&............D
  9990: FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49 04 13  ...t.&.}....>I..
  99A0: 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9 11 00  t........t......
  99B0: F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0 9C FA  .......2........
  99C0: 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 07 FC EB B5  ................
  99D0: 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB F0 24  ...w..C....0...$
  99E0: F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80 0E 65  ..&e.....t.....e
  99F0: 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB F0 8B  . ..............
  9A00: C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3 11 EB  ... ....N..x....
  9A10: E4 8B FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A C4 9C  .........2......
  9A20: FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2 EE 9C  ..B.&....J..G...
  9A30: FA B0 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB 5A E8  ....B..&......Z.
  9A40: CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D 01 26  .....Q..&.5&.m.&
  9A50: 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3 0A DB  .M.......CY.....
  9A60: 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F F6 C7  u.......0.n.$...
  9A70: 01 74 02 0C 80 B4 30 E8 70 EE EB 1D FE CB 75 1C  .t....0.p.....u.
  9A80: E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75 03 C0  ......0.P....u..
  9A90: E7 02 B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A C3 E8  ...4...Q........
  9AA0: D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51 8B C3  .....N..v....Q..
  9AB0: E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02 83 C7  ...&.5&.m.&.M...
  9AC0: 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA C6 03  .CY.............
  9AD0: EC 32 E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0 B0 34  .2....F...?....4
  9AE0: E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3 01 A8 80 75  .......0.......u
  9AF0: 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51 8B C3  .........^...Q..
  9B00: E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2 EE C3  .s..*....R.CY...
  9B10: F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39 00 C3  .....t.......9..
  9B20: F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E 00 C3  .....t..........
  9B30: 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6 E1 59  P....P.;..P....Y
  9B40: 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02 FE C0  ..Y...d....2|...
  9B50: 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53 8B DA  ......X.R.9.ZS..
  9B60: BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A C1 EE  ......B.........
  9B70: 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42 42 EC  .[....S......BB.
  9B80: 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC 8A C8  ................
  9B90: 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC A8 08  ...[.PQ.........
  9BA0: 75 02 E2 F9 59 58 C3 2E 8E 1E 19 03 8B F8 24 0F  u...YX........$.
  9BB0: 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF A5 59  ...............Y
  9BC0: 9B 61 9B 76 9B 14 9C 70 9C 3C 03 74 08 3C 04 7F  .a.v...p.<.t.<..
  9BD0: 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3 3C 04  ..............<.
  9BE0: 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 EB EE 8A  w.PSPR..c.......
  9BF0: E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0 12 E8  .......@t.......
  9C00: D8 EE 40 A3 85 04 B0 09 E8 CF EE A8 80 74 04 D1  ..@..........t..
  9C10: 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA E0 01  ........=..s....
  9C20: 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA 5E 01  =..s....=|.s..^.
  9C30: 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58 C6 06  =J.s........ZX..
  9C40: 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0 74 0E  ....].[X..2...t.
  9C50: B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10 8A CB  ..<.t...<.t.....
  9C60: 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01 01 87  .........~......
  9C70: 1E 85 04 53 E8 5B F2 5B E8 8D 02 C3 0A C0 74 11  ...S.[.[......t.
  9C80: FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8 74 40  ..t...t8..t<..t@
  9C90: C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0 FE CA  ...|...~........
  9CA0: 0A DB 74 07 32 FF 2E 8A 97 54 9C 89 0E 85 04 88  ..t.2....T......
  9CB0: 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D 18 2A  ...............*
  9CC0: E8 42 03 B9 0E 00 EB D6 BD AB 6A B9 08 00 EB CA  .B........j.....
  9CD0: BD BE 72 B9 10 00 EB C2 0A C0 75 BD 8B 0E 85 04  ..r.......u.....
  9CE0: 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10 0A FF  .......w5...w...
  9CF0: 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20 80 FF  u...|..&..... ..
  9D00: 02 75 0B 8C CD 8E C5 2E 8B 2E 9D 83 EB 10 0E 07  .u..............
  9D10: 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF C7 9C 8B C5  ..2.............
  9D20: 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E C3 BE  ...N..V..F..F...
  9D30: 72 AB 6A AB 6E AB 72 BE 72 BE 82 53 06 8A 26 49  r.j.n.r.r..S..&I
  9D40: 04 E8 6C C1 26 8A 47 02 26 8A 67 33 F6 C4 01 74  ..l.&.G.&.g3...t
  9D50: 22 BD BE 72 3C 10 7D 0E E8 AA 02 8C 06 0E 01 3C  "..r<.}........<
  9D60: 0E 7D 07 BD AB 6A 8C 0E 0E 01 89 2E 0C 01 E8 18  .}...j..........
  9D70: 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74 0D 7F  ..-..<.}...<.t..
  9D80: 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6 47 05  ...<.t......&.G.
  9D90: 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8 02 02  .t......2.......
  9DA0: 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00 EF B8  .[..............
  9DB0: 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF 8B D6  ................
  9DC0: 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9 00 01  ..P$...t"..3....
  9DD0: 3C 04 75 07 B7 10 BD BE 72 EB 10 FE C8 75 07 B7  <.u.....r....u..
  9DE0: 0E E8 21 02 EB 05 B7 08 BD AB 6A E8 35 00 58 A8  ..!.......j.5.X.
  9DF0: 80 74 08 E8 ED 70 75 03 E8 76 01 BA C4 03 B8 02  .t...pu..v......
  9E00: 03 EF B8 04 02 EF B2 CC EC A8 01 B8 06 0E 75 02  ..............u.
  9E10: B4 0A B2 CE 50 EC 58 EF B0 04 EE 32 C0 EE B8 05  ....P.X....2....
  9E20: 10 EF C3 FC 0B C9 75 01 C3 80 FF 0E 75 0A 26 83  ......u.....u.&.
  9E30: 7E FE 10 75 03 80 CD 80 1E 06 1F 2E 8E 06 1B 03  ~..u............
  9E40: 8B FA C1 E7 05 B0 40 53 80 E3 03 F6 E3 5B F6 C3  ......@S.....[..
  9E50: 04 74 02 04 20 86 E0 8B D0 03 FA 8B F5 E3 28 32  .t.. .........(2
  9E60: C0 86 FB 32 FF 51 F6 C5 80 74 01 46 8B CB F3 A4  ...2.Q...t.F....
  9E70: 83 FB 20 74 07 B9 20 00 2B CB F3 AA 59 F6 C5 80  .. t.. .+...Y...
  9E80: 74 01 46 FE C9 75 DE 1F C3 8A 26 49 04 50 06 57  t.F..u....&I.P.W
  9E90: C4 3E A8 04 26 C4 7D 0C 8C C5 0B EF 74 30 8B EF  .>..&.}.....t0..
  9EA0: 83 C7 07 26 8A 05 3C FF 74 24 38 E0 74 03 47 EB  ...&..<.t$8.t.G.
  9EB0: F2 8B FD 26 8A 05 FE C8 A2 84 04 26 8B 45 01 A3  ...&.......&.E..
  9EC0: 85 04 26 C4 7D 03 89 3E 0C 01 8C 06 0E 01 5F 07  ..&.}..>......_.
  9ED0: 58 C3 26 F6 47 33 01 74 01 C3 C4 1E A8 04 26 C4  X.&.G3.t......&.
  9EE0: 5F 08 8C C0 0B C3 74 1F BF 0B 00 26 8A 01 3C FF  _.....t....&..<.
  9EF0: 74 15 47 38 06 49 04 75 F2 26 8A 07 32 E4 87 06  t.G8.I.u.&..2...
  9F00: 85 04 8B D8 E8 01 00 C3 8B 16 63 04 8A 26 85 04  ..........c..&..
  9F10: FE CC 80 E4 1F 9C FA 80 FA D4 74 0B B0 14 EE 42  ..........t....B
  9F20: EC 24 E0 0A C4 EE 4A B0 09 EE 42 EC 24 E0 0A C4  .$....J...B.$...
  9F30: EE 9D 8A C8 8B C3 8A 16 85 04 F6 F2 80 3E 84 04  .............>..
  9F40: FF 75 07 A2 84 04 FE 0E 84 04 F6 E2 F6 C1 80 74  .u.............t
  9F50: 02 D1 E0 48 8A E0 B0 12 8B 16 63 04 EF A0 4A 04  ...H......c...J.
  9F60: 8A 26 84 04 FE C4 F6 E4 D1 E0 05 00 01 A3 4C 04  .&............L.
  9F70: C3 1E 32 FF 8A DC BE BE 82 80 FB 10 74 0A BE AB  ..2.........t...
  9F80: 72 80 FB 0E 74 02 1F C3 0E 1F 8B 3C 0B FF 74 10  r...t......<..t.
  9F90: 81 E7 FF 00 46 C1 E7 05 03 FA 8B CB F3 A4 EB EA  ....F...........
  9FA0: 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D  ...&I.P.W.>..&.}
  9FB0: 08 8C C5 0B EF 74 4A 8B EF 83 C7 0B 26 8A 05 3C  .....tJ.....&..<
  9FC0: FF 74 3E 38 E0 74 03 47 EB F2 8B FD 26 8A 3D 26  .t>8.t.G....&.=&
  9FD0: 8A 5D 01 26 8B 4D 02 26 8B 55 04 26 8A 45 0A 3C  .].&.M.&.U.&.E.<
  9FE0: FF 74 02 FE C8 50 A0 84 04 FE C0 F6 26 85 04 A3  .t...P......&...
  9FF0: 85 04 58 A2 84 04 26 C4 7D 06 8B EF 32 C0 E8 A2  ..X...&.}...2...
  A000: FD 5F 07 58 C3 50 53 51 52 2E A1 23 03 0B C0 74  ._.X.PSQR..#...t
  A010: 09 2E 8B 2E 9D 83 0E 07 EB 08 B8 30 11 B7 02 E8  ...........0....
  A020: 18 BC 5A 59 5B 58 C3 3C 04 7C 01 C3 E3 FD 53 2E  ..ZY[X.<.|....S.
  A030: 8E 1E 19 03 86 FB 32 FF D1 E3 8B FB 81 C7 50 04  ......2.......P.
  A040: 8B 35 5B 89 15 56 8B F0 51 53 26 8A 46 00 45 3C  .5[..V..QS&.F.E<
  A050: 0D 7F 1F 75 04 32 D2 EB 40 3C 0A 74 32 3C 07 75  ...u.2..@<.t2<.u
  A060: 05 E8 DC 67 EB 62 3C 08 75 08 0A D2 74 5A FE CA  ...g.b<.u...tZ..
  A070: EB 27 F7 C6 02 00 74 05 26 8A 5E 00 45 B9 01 00  .'....t.&.^.E...
  A080: B4 09 E8 B5 BB FE C2 3A 16 4A 04 72 0C 32 D2 89  .......:.J.r.2..
  A090: 15 3A 36 84 04 73 06 FE C6 89 15 EB 2B 50 E8 74  .:6..s......+P.t
  A0A0: EA 75 08 B8 00 08 E8 91 BB EB 09 80 3E 49 04 07  .u..........>I..
  A0B0: 74 F1 32 E4 86 3E 62 04 53 8A FC 55 E8 25 00 5D  t.2..>b.S..U.%.]
  A0C0: 5B 86 3E 62 04 58 8B 15 5B 59 E2 15 5A F7 C6 01  [.>b.X..[Y..Z...
  A0D0: 00 75 02 89 15 8B 05 3A 3E 62 04 75 03 E8 FB EC  .u.....:>b.u....
  A0E0: C3 E9 64 FF 33 C9 8A 36 84 04 8A 16 4A 04 FE CA  ..d.3..6....J...
  A0F0: B8 01 06 E8 44 BB C3 2E 8E 1E 19 03 0A C0 75 0D  ....D.........u.
  A100: E8 18 00 8B EC 89 5E 0E C6 46 1A 1A C3 3C 01 75  ......^..F...<.u
  A110: 09 E8 41 00 8B EC C6 46 1A 1A C3 A0 8A 04 BF 8D  ..A....F........
  A120: A1 2E 3A 05 72 04 BB FF FF C3 32 E4 D1 E0 03 F8  ..:.r.....2.....
  A130: 2E 8B 5D 04 0A DB 74 05 0A FF 75 04 C3 86 FB C3  ..]...t...u.....
  A140: A0 10 04 24 30 3C 30 74 06 F6 C3 01 75 EF C3 F6  ...$0<0t....u...
  A150: C3 01 74 E9 C3 BF 8D A1 2E 8A 0D 32 C0 83 C7 04  ..t........2....
  A160: 2E 3B 1D 74 12 86 FB 2E 3B 1D 74 0B 83 C7 02 FE  .;.t....;.t.....
  A170: C0 38 C8 7E EB B0 FF A2 8A 04 C3 BB 08 00 F6 06  .8.~............
  A180: 89 04 02 74 0E BB 07 00 BA CC 03 EC A8 01 74 18  ...t..........t.
  A190: BB 08 00 BA B4 03 E8 A6 EC 74 21 B7 01 E8 53 E9  .........t!...S.
  A1A0: 80 FA D4 74 17 86 FB C3 BA D4 03 E8 91 EC 74 0C  ...t..........t.
  A1B0: B7 02 E8 3E E9 80 FA B4 74 02 86 FB C3 0F 08 0F  ...>....t.......
  A1C0: 08 0F 08 0F 08 03 01 03 01 01 01 00 08 01 01 01  ................
  A1D0: 01 01 01 01 01 0F 01 0F 08 0F 04 00 02 0F 02 01  ................
  A1E0: 01 0F 01 FF 01 FF E0 0F 00 00 00 00 07 02 08 FF  ................
  A1F0: 0E 00 00 3F 00 10 01 08 00 00 00 00 01 00 02 02  ...?............
  A200: 01 00 04 04 01 00 05 02 05 00 06 01 06 05 06 00  ................
  A210: 08 01 08 00 07 02 07 06 07 00 55 02 34 00 90 00  ..........U.4...
  A220: D2 00 00 00 00 00 00 00 5F 57 C3 90 50 66 52 E8  ........_W..PfR.
  A230: F4 FF FF FF 81 EF 10 00 00 00 2E 8B 07 66 BA F8  .............f..
  A240: 0C EF 66 BA FC 0C ED 32 C0 66 8B F8 66 5A 58 C3  ..f....2.f..fZX.
  A250: 66 B8 4F 03 66 52 66 56 53 57 50 0A FF 75 44 E8  f.O.fRfVSWP..uD.
  A260: C8 FF FF FF 66 33 F6 66 BB D0 05 E8 00 01 00 00  ....f3.f........
  A270: C1 E8 10 F6 C4 40 75 2B 66 81 E2 FF 00 66 D1 E2  .....@u+f....f..
  A280: 66 8B C2 66 40 C1 E0 10 66 8B C2 66 BB 13 00 E8  f..f@...f..f....
  A290: E8 00 00 00 66 BB 12 00 E8 DF 00 00 00 66 58 32  ....f........fX2
  A2A0: E4 66 50 58 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03  .fPX_[f^fZ..f.O.
  A2B0: 52 51 53 57 66 56 50 8A FB 80 E3 7F 0A DB 75 26  RQSWfVP.......u&
  A2C0: E8 67 FF FF FF C1 E2 10 66 8B D1 C1 E2 02 66 BE  .g......f.....f.
  A2D0: 00 00 E8 C7 00 00 00 66 BE 00 03 E8 BE 00 00 00  .......f........
  A2E0: 66 58 32 E4 66 50 58 66 5E 5F 5B 59 5A C3 66 B8  fX2.fPXf^_[YZ.f.
  A2F0: 4F 03 66 51 57 56 53 52 50 8A FB 80 E3 7F 0A DB  O.fQWVSRP.......
  A300: 75 39 8A DA 57 5A E8 21 FF FF FF 66 33 F6 66 53  u9..WZ.!...f3.fS
  A310: 66 BB D0 05 E8 57 00 00 00 80 E4 01 66 5B 80 E7  f....W......f[..
  A320: FE 0A FC 66 BE 00 00 E8 DE 00 00 00 66 BE 00 03  ...f........f...
  A330: E8 D5 00 00 00 66 58 32 E4 66 50 58 5A 5B 5E 5F  .....fX2.fPXZ[^_
  A340: 66 59 C3 90 53 50 51 F6 C7 80 74 20 66 BB 9C 1B  fY..SPQ...t f...
  A350: E8 1B 00 00 00 A8 01 74 13 66 B9 FF FF 66 BB A3  .......t.f...f..
  A360: 1B E8 0A 00 00 00 A8 01 75 02 E2 F1 59 58 5B C3  ........u...YX[.
  A370: 66 52 E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05  fR......fZ..fR..
  A380: 00 00 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B  ....fZ..f..P3.f.
  A390: C3 66 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 52 E8  .f......f...X.R.
  A3A0: A0 FF FF FF 81 E2 FF FF FF 00 66 BB 04 1A E8 BD  ..........f.....
  A3B0: FF FF FF 25 00 00 00 FF 03 C2 66 25 00 F0 E8 B9  ...%......f%....
  A3C0: FF FF FF 66 BB 05 1A E8 B0 FF FF FF 66 81 E2 FF  ...f........f...
  A3D0: 0F 66 BB 01 1A E8 96 FF FF FF 24 03 8A C8 66 D3  .f........$...f.
  A3E0: EA 66 BB 06 1A E8 86 FF FF FF 66 03 C2 66 BB 0D  .f........f..f..
  A3F0: 1A E8 86 FF FF FF 66 8B C2 24 FC C1 E0 10 66 BB  ......f..$....f.
  A400: 5C 1B E8 75 FF FF FF 5A C3 90 52 66 53 66 51 E8  \..u...Z..RfSfQ.
  A410: 30 FF FF FF 33 C0 8A C3 66 53 66 BB 79 1A E8 59  0...3...fSf.y..Y
  A420: FF FF FF 66 5B 66 49 66 81 E1 FF 00 66 41 32 C0  ...f[fIf....fA2.
  A430: 66 53 66 BB 78 1A E8 41 FF FF FF 66 5B 26 8A 42  fSf.x..A...f[&.B
  A440: 02 C1 E0 0A 26 8A 42 01 C1 E0 0A 26 8A 02 C1 E0  ....&.B....&....
  A450: 02 F6 C7 01 75 03 C1 E0 02 66 53 66 BB 7C 1A E8  ....u....fSf.|..
  A460: 18 FF FF FF 66 5B 83 C2 04 E2 D2 66 59 66 5B 5A  ....f[.....fYf[Z
  A470: C3 00 2C 45 1F 45 1F 45 1F 45 0A 45 0A 45 0A 45  ..,E.E.E.E.E.E.E
  A480: 0A 45 4C 41 C3 41 ED 41 2E 43 2D 43 2D 43 73 43  .ELA.A.A.C-C-CsC
  A490: D8 43 08 44 C5 44 EE 44 EE 44 65 43 58 43 58 43  .C.D.D.D.DeCXCXC
  A4A0: 58 43 58 43 58 43 73 43 D8 43 08 44 C5 44 F3 44  XCXCXCsC.C.D.D.D
  A4B0: 39 45 EE 44 EE 44 FF FF FF FF FF FF 00 00 FF FF  9E.D.D..........
  A4C0: 00 00 FF FF 00 00 FF 00 00 00 FF 00 00 00 FF 00  ................
  A4D0: 00 00 FF 00 00 00 00 00 08 10 00 08 10 18 00 08  ................
  A4E0: 10 18 50 3F 01 50 3F 02 C9 53 03 A9 53 03 75 40  ..P?.P?..S..S.u@
  A4F0: 03 29 40 03 51 3F 04 6A 3F 04 7A 3F 04 50 3F 03  .)@.Q?.j?.z?.P?.
  A500: 00 00 00 00 FD 46 00 02 FD 46 01 02 FD 46 02 02  .....F...F...F..
  A510: FD 46 03 02 FD 46 04 02 FD 46 05 02 F7 48 00 02  .F...F...F...H..
  A520: F7 48 01 02 F7 48 02 02 F7 48 03 02 F7 48 04 02  .H...H...H...H..
  A530: F7 48 05 02 2C 49 00 02 2C 49 01 02 2C 49 02 02  .H..,I..,I..,I..
  A540: 2C 49 03 02 2C 49 04 02 2C 49 05 02 43 4B 00 02  ,I..,I..,I..CK..
  A550: 43 4B 01 02 43 4B 02 02 43 4B 03 02 43 4B 04 02  CK..CK..CK..CK..
  A560: 43 4B 05 02 43 4B 00 02 43 4B 01 02 43 4B 02 02  CK..CK..CK..CK..
  A570: 43 4B 03 02 43 4B 04 02 43 4B 05 02 2E 4A 00 02  CK..CK..CK...J..
  A580: 2E 4A 01 02 2E 4A 02 02 2E 4A 03 02 2E 4A 04 02  .J...J...J...J..
  A590: 2E 4A 05 02 58 4A 00 02 58 4A 01 02 58 4A 02 02  .J..XJ..XJ..XJ..
  A5A0: 58 4A 03 02 58 4A 04 02 58 4A 05 02 DB 49 00 02  XJ..XJ..XJ...I..
  A5B0: DB 49 01 02 DB 49 02 02 DB 49 03 02 DB 49 04 02  .I...I...I...I..
  A5C0: DB 49 05 02 0F 4A 00 02 0F 4A 01 02 0F 4A 02 02  .I...J...J...J..
  A5D0: 0F 4A 03 02 0F 4A 04 02 0F 4A 05 02 9B 4D 00 00  .J...J...J...M..
  A5E0: CE 4D 01 00 CE 4D 02 00 BB 4D 00 00 A9 4C 00 02  .M...M...M...L..
  A5F0: A2 4A 00 02 A2 4A 01 02 A2 4A 02 02 A2 4A 03 02  .J...J...J...J..
  A600: A2 4A 04 02 A2 4A 05 02 C1 4C 00 02 16 4F 05 00  .J...J...L...O..
  A610: 16 4F 01 00 16 4F 00 00 16 4F 02 00 57 4F 00 00  .O...O...O..WO..
  A620: 57 4F 02 00 9C 4F 00 00 2C 4C 00 02 2C 4C 01 02  WO...O..,L..,L..
  A630: 2C 4C 02 02 2C 4C 03 02 2C 4C 04 02 2C 4C 05 02  ,L..,L..,L..,L..
  A640: E8 4D 00 00 10 4E 00 00 91 4E 00 00 0C 4F 00 00  .M...N...N...O..
  A650: F0 4A 00 02 F0 4A 01 02 F0 4A 02 02 F0 4A 03 02  .J...J...J...J..
  A660: F0 4A 04 02 F0 4A 05 02 0B 4F 00 01 0B 4F 00 01  .J...J...O...O..
  A670: 33 48 00 02 33 48 01 02 33 48 02 02 33 48 03 02  3H..3H..3H..3H..
  A680: 33 48 04 02 33 48 05 02 30 4E 00 00 0C 4F 00 00  3H..3H..0N...O..
  A690: 0C 4F 00 00 0C 4F 00 00 41 4D 00 00 57 49 00 02  .O...O..AM..WI..
  A6A0: 57 49 01 02 57 49 02 02 57 49 03 02 57 49 04 02  WI..WI..WI..WI..
  A6B0: 57 49 05 02 86 49 00 02 86 49 01 02 86 49 02 02  WI...I...I...I..
  A6C0: 86 49 03 02 86 49 04 02 86 49 05 02 BC 49 00 02  .I...I...I...I..
  A6D0: BC 49 01 02 BC 49 02 02 BC 49 03 02 BC 49 04 02  .I...I...I...I..
  A6E0: BC 49 05 02 53 4E 00 00 76 4E 00 00 A6 00 01 01  .I..SN..vN......
  A6F0: 70 B7 C0 B7 18 B8 00 00 F2 D8 50 B8 00 00 00 00  p.........P.....
  A700: 00 00 82 B8 82 B9 00 00 C4 B9 32 BF 00 00 00 00  ..........2.....
  A710: 00 00 38 D8 00 00 E8 C0 32 C1 A8 C1 00 00 00 00  ..8.....2.......
  A720: 1E C2 00 00 00 00 00 00 16 EB 00 00 00 00 00 00  ................
  A730: 00 00 96 C2 0E C3 82 C3 C0 C3 E0 C4 00 00 00 00  ................
  A740: 0C C5 00 00 26 C5 F2 C5 AE C7 0C C8 00 00 00 00  ....&...........
  A750: E6 C8 6C C9 B8 CA 00 00 00 00 68 D2 8E D3 00 00  ..l.......h.....
  A760: C8 D5 00 00 00 00 00 00 32 D6 00 00 00 00 00 00  ........2.......
  A770: 00 00 06 D7 00 00 C2 D8 00 00 00 00 00 00 D0 C0  ................
  A780: 00 00 7A D7 00 00 BC DA 3A DF 00 00 94 E8 BA EA  ..z.....:.......
  A790: 00 00 4A 00 01 01 00 00 00 00 00 00 74 A7 58 A8  ..J.........t.X.
  A7A0: C4 A8 C8 AB 54 B4 00 00 00 00 9A AC 76 AD 82 AD  ....T.......v...
  A7B0: 9E AD 00 00 46 AE 00 00 3C B4 00 00 00 00 00 00  ....F...<.......
  A7C0: 00 00 46 B0 94 B1 00 00 00 00 C2 B3 02 B4 00 00  ..F.............
  A7D0: 00 00 C2 B1 00 00 00 00 00 00 00 00 E4 00 01 02  ................
  A7E0: 4E 0C 80 02 C0 00 90 01 2D 00 20 00 40 00 01 00  N.......-. .@...
  A7F0: 03 00 00 00 00 00 00 00 02 00 E6 55 D6 09 80 02  ...........U....
  A800: A0 00 E0 01 2D 00 10 00 60 00 0A 00 02 00 00 00  ....-...`.......
  A810: 00 00 08 08 06 00 12 3C A0 0F 20 03 00 01 58 02  .......<.. ...X.
  A820: 1C 00 28 00 80 00 01 00 04 00 00 00 00 00 00 00  ..(.............
  A830: 00 00 6A 3C 64 19 00 04 40 01 00 03 26 00 18 00  ..j<d...@...&...
  A840: 88 00 03 00 06 00 00 00 00 00 00 00 06 00 55 3C  ..............U<
  A850: 30 2A 00 05 08 02 C0 03 28 00 60 00 70 00 01 00  0*......(.`.p...
  A860: 03 00 00 00 00 00 00 00 00 00 E9 3C 30 2A 00 05  ...........<0*..
  A870: 98 01 00 04 2A 00 30 00 70 00 01 00 03 00 00 00  ....*.0.p.......
  A880: 00 00 00 00 00 00 EA 3C 8F 2F 78 05 D0 01 1A 04  .......<./x.....
  A890: 27 00 58 00 90 00 03 00 04 00 00 00 00 00 00 00  '.X.............
  A8A0: 02 00 EB 3C 48 3F 40 06 30 02 B0 04 32 00 40 00  ...<H?@.0...2.@.
  A8B0: C0 00 01 00 03 00 00 00 00 00 00 00 00 00 EC 3C  ...............<
  A8C0: 6C 00 02 02 02 00 2A 0F 20 4E 00 00 80 38 01 00  l.....*. N...8..
  A8D0: 00 00 00 00 40 7E 05 00 00 00 00 00 00 00 00 00  ....@~..........
  A8E0: C0 D4 01 00 00 00 00 00 60 EA 00 00 00 20 5E 03  ........`.... ^.
  A8F0: 20 03 B0 04 00 00 00 00 80 38 01 00 01 00 00 00   ........8......
  A900: 00 00 00 00 00 00 00 00 40 9C A3 02 C0 12 00 00  ........@.......
  A910: 3F 40 C0 12 10 27 10 27 00 00 00 00 00 00 00 00  ?@...'.'........
  A920: 00 00 00 00 00 00 00 00 00 00 00 00 04 03 02 01  ................
  A930: 00 00 00 00 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A  .....*.*..***..*
  A940: 00 2A 2A 15 00 2A 2A 2A 15 15 15 15 15 3F 15 3F  .**..***.....?.?
  A950: 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F  ..???..?.???.???
  A960: 00 00 00 05 05 05 08 08 08 0B 0B 0B 0E 0E 0E 11  ................
  A970: 11 11 14 14 14 18 18 18 1C 1C 1C 20 20 20 24 24  ...........   $$
  A980: 24 28 28 28 2D 2D 2D 32 32 32 38 38 38 3F 3F 3F  $(((---222888???
  A990: 00 00 3F 10 00 3F 1F 00 3F 2F 00 3F 3F 00 3F 3F  ..?..?..?/.??.??
  A9A0: 00 2F 3F 00 1F 3F 00 10 3F 00 00 3F 10 00 3F 1F  ./?..?..?..?..?.
  A9B0: 00 3F 2F 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 00  .?/.??./?..?..?.
  A9C0: 00 3F 00 00 3F 10 00 3F 1F 00 3F 2F 00 3F 3F 00  .?..?..?..?/.??.
  A9D0: 2F 3F 00 1F 3F 00 10 3F 1F 1F 3F 27 1F 3F 2F 1F  /?..?..?..?'.?/.
  A9E0: 3F 37 1F 3F 3F 1F 3F 3F 1F 37 3F 1F 2F 3F 1F 27  ?7.??.??.7?./?.'
  A9F0: 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 37  ?..?'.?/.?7.??.7
  AA00: 3F 1F 2F 3F 1F 27 3F 1F 1F 3F 1F 1F 3F 27 1F 3F  ?./?.'?..?..?'.?
  AA10: 2F 1F 3F 37 1F 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F  /.?7.??.7?./?.'?
  AA20: 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3F 3F  --?1-?6-?:-??-??
  AA30: 2D 3A 3F 2D 36 3F 2D 31 3F 2D 2D 3F 31 2D 3F 36  -:?-6?-1?--?1-?6
  AA40: 2D 3F 3A 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 2D  -?:-??-:?-6?-1?-
  AA50: 2D 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D  -?--?1-?6-?:-??-
  AA60: 3A 3F 2D 36 3F 2D 31 3F 00 00 1C 07 00 1C 0E 00  :?-6?-1?........
  AA70: 1C 15 00 1C 1C 00 1C 1C 00 15 1C 00 0E 1C 00 07  ................
  AA80: 1C 00 00 1C 07 00 1C 0E 00 1C 15 00 1C 1C 00 15  ................
  AA90: 1C 00 0E 1C 00 07 1C 00 00 1C 00 00 1C 07 00 1C  ................
  AAA0: 0E 00 1C 15 00 1C 1C 00 15 1C 00 0E 1C 00 07 1C  ................
  AAB0: 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E 1C 1C  ................
  AAC0: 0E 18 1C 0E 15 1C 0E 11 1C 0E 0E 1C 11 0E 1C 15  ................
  AAD0: 0E 1C 18 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 0E  ................
  AAE0: 0E 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E  ................
  AAF0: 18 1C 0E 15 1C 0E 11 1C 14 14 1C 16 14 1C 18 14  ................
  AB00: 1C 1A 14 1C 1C 14 1C 1C 14 1A 1C 14 18 1C 14 16  ................
  AB10: 1C 14 14 1C 16 14 1C 18 14 1C 1A 14 1C 1C 14 1A  ................
  AB20: 1C 14 18 1C 14 16 1C 14 14 1C 14 14 1C 16 14 1C  ................
  AB30: 18 14 1C 1A 14 1C 1C 14 1A 1C 14 18 1C 14 16 1C  ................
  AB40: 00 00 10 04 00 10 08 00 10 0C 00 10 10 00 10 10  ................
  AB50: 00 0C 10 00 08 10 00 04 10 00 00 10 04 00 10 08  ................
  AB60: 00 10 0C 00 10 10 00 0C 10 00 08 10 00 04 10 00  ................
  AB70: 00 10 00 00 10 04 00 10 08 00 10 0C 00 10 10 00  ................
  AB80: 0C 10 00 08 10 00 04 10 08 08 10 0A 08 10 0C 08  ................
  AB90: 10 0E 08 10 10 08 10 10 08 0E 10 08 0C 10 08 0A  ................
  ABA0: 10 08 08 10 0A 08 10 0C 08 10 0E 08 10 10 08 0E  ................
  ABB0: 10 08 0C 10 08 0A 10 08 08 10 08 08 10 0A 08 10  ................
  ABC0: 0C 08 10 0E 08 10 10 08 0E 10 08 0C 10 08 0A 10  ................
  ABD0: 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B 10 10 0B 10 10  ................
  ABE0: 0B 0F 10 0B 0D 10 0B 0C 10 0B 0B 10 0C 0B 10 0D  ................
  ABF0: 0B 10 0F 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 0B  ................
  AC00: 0B 10 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B 10 10 0B  ................
  AC10: 0F 10 0B 0D 10 0B 0C 10 00 00 00 00 00 00 00 00  ................
  AC20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  AC30: D1 00 01 03 BA 27 40 06 E0 00 84 03 1C 00 30 00  .....'@.......0.
  AC40: 20 00 03 00 05 00 7E 01 D7 00 00 00 06 02 00 3C   .....~........<
  AC50: 00 00 20 00 00 00 00 00 1D 3C 01 06 00 00 00 00  .. ......<......
  AC60: 01 CB D2 00 07 5A 5A 07 7D 00 00 00 01 0A 82 01  .....ZZ.}.......
  AC70: 34 21 00 00 00 00 00 00 00 00 00 00 04 80 00 00  4!..............
  AC80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  AC90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  ACA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  ACB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  ACC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  ACD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  ACE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  ACF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  ................
  AD00: 00 00 DC 00 01 01 4C 19 4E 19 4F 19 4D 19 4C 19  ......L.N.O.M.L.
  AD10: 4E 19 4F 19 4D 19 90 00 00 00 00 08 08 08 08 00  N.O.M...........
  AD20: 00 50 19 52 19 53 19 51 19 50 19 52 19 53 19 51  .P.R.S.Q.P.R.S.Q
  AD30: 19 91 00 00 00 00 08 08 08 08 00 00 54 19 56 19  ............T.V.
  AD40: 57 19 55 19 54 19 56 19 57 19 55 19 92 00 00 00  W.U.T.V.W.U.....
  AD50: 00 08 08 08 08 00 00 58 19 5A 19 5B 19 59 19 58  .......X.Z.[.Y.X
  AD60: 19 5A 19 5B 19 59 19 93 00 00 00 00 08 08 08 08  .Z.[.Y..........
  AD70: 00 00 5C 19 5E 19 5F 19 5D 19 5C 19 5E 19 5F 19  ..\.^._.].\.^._.
  AD80: 5D 19 94 00 00 00 00 08 08 08 08 00 00 60 19 62  ]............`.b
  AD90: 19 63 19 61 19 60 19 62 19 63 19 61 19 95 00 00  .c.a.`.b.c.a....
  ADA0: 00 00 08 08 08 08 00 00 70 19 72 19 73 19 71 19  ........p.r.s.q.
  ADB0: 70 19 72 19 73 19 71 19 96 00 00 00 00 08 08 08  p.r.s.q.........
  ADC0: 08 00 00 70 19 72 19 73 19 71 19 70 19 72 19 73  ...p.r.s.q.p.r.s
  ADD0: 19 71 19 97 00 00 00 00 08 08 08 08 00 00 0C 00  .q..............
  ADE0: 01 05 E0 FF 0F 00 20 00 20 00 1C 00 01 01 6D 19  ...... . .....m.
  ADF0: 00 01 6D 19 08 02 6D 19 10 03 6D 19 18 04 6D 19  ..m...m...m...m.
  AE00: 1A 05 6D 19 1C 06 A8 00 01 01 00 01 02 E6 01 01  ..m.............
  AE10: 02 12 03 01 02 6A 05 01 02 55 07 01 02 EA 10 01  .....j...U......
  AE20: 06 12 11 01 16 12 13 01 06 6A 14 01 16 6A 16 01  .........j...j..
  AE30: 06 55 17 01 16 55 19 01 06 EA 1A 01 16 EA 63 01  .U...U........c.
  AE40: 02 E9 65 01 16 E9 66 01 0A E9 21 01 0A 12 22 01  ..e...f...!...".
  AE50: 0A 6A 23 01 0A 55 24 01 0A EA 43 01 02 EB 45 01  .j#..U$...C...E.
  AE60: 16 EB 46 01 0A EB 73 01 02 EC 75 01 16 EC 76 01  ..F...s...u...v.
  AE70: 0A EC D1 01 02 70 D2 01 16 70 D4 01 0A 70 D7 01  .....p...p...p..
  AE80: 02 71 D8 01 16 71 D9 01 0A 71 E1 01 02 72 E2 01  .q...q...q...r..
  AE90: 16 72 E4 01 0A 72 E7 01 02 73 E8 01 16 73 E9 01  .r...r...s...s..
  AEA0: 0A 73 F3 01 02 74 F5 01 16 74 F6 01 0A 74 A3 01  .s...t...t...t..
  AEB0: 06 01 00 00 00 00 00 42 00 51 00 B3 00 00 00 00  .......B.Q......
  AEC0: 00 42 00 02 00 00 00 13 00 00 80 00 00 00 00 00  .B..............
  AED0: 00 00 00 00 00 00 13 00 00 00 FD 00 00 00 00 00  ................
  AEE0: 00 00 00 00 89 01 00 00 00 00 00 00 00 00 00 00  ................
  AEF0: 03 02 00 00 01 05 01 00 01 02 03 04 01 02 05 06  ................
  AF00: 10 2B 68 00 7E 00 00 00 00 00 00 00 00 00 00 00  .+h.~...........
  AF10: 00 30 75 00 76 00 00 00 00 00 00 00 00 00 00 00  .0u.v...........
  AF20: 00 40 9C 00 72 00 00 00 00 00 00 00 00 00 00 00  .@..r...........
  AF30: 00 F8 C1 00 6E 00 00 00 00 00 00 00 00 00 00 00  ....n...........
  AF40: 00 60 EA 00 64 00 00 00 00 00 00 00 00 00 00 00  .`..d...........
  AF50: 00 2B 68 00 00 00 00 00 00 00 00 00 00 00 00 00  .+h.............
  AF60: 00 03 18 01 00 00 00 00 80 00 00 00 00 00 00 00  ................
  AF70: 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 00  ................
  AF80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  AF90: 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00  ................
  AFA0: 00 00 00 00 00 00 00 00 00 00 00 16 00 00 00 00  ................
  AFB0: 00 00 00 00 00 13 01 3E 01 6E 01 00 00 00 00 00  .......>.n......
  AFC0: 00 00 03 40 9C 00 40 9C 00 59 D8 00 59 D8 00 DC  ...@..@..Y..Y...
  AFD0: 0B 01 DC 0B 01 03 72 00 00 6E 00 01 64 00 02 06  ......r..n..d...
  AFE0: 02 03 02 03 00 02 01 03 00 02 01 03 00 05 30 75  ..............0u
  AFF0: 00 20 4E 00 40 9C 00 30 75 00 F8 C1 00 40 9C 00  . N.@..0u....@..
  B000: 60 EA 00 F8 C1 00 0E 28 01 DC 0B 01 05 7E 00 00  `......(.....~..
  B010: 76 00 01 72 00 02 6E 00 03 64 00 04 00 05 7E 00  v..r..n..d....~.
  B020: 20 4E 00 76 00 30 75 00 72 00 40 9C 00 6E 00 40   N.v.0u.r.@..n.@
  B030: 9C 00 64 00 40 9C 00 05 2B 68 00 7E 00 30 75 00  ..d.@...+h.~.0u.
  B040: 76 00 40 9C 00 72 00 F8 C1 00 6E 00 60 EA 00 64  v.@..r....n.`..d
  B050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B0A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4D 01  ..............M.
  B0B0: 01 03 0B 00 38 00 00 00 BD 00 00 00 12 00 2C 01  ....8.........,.
  B0C0: 03 01 00 00 02 00 0C 00 14 31 00 11 1E 21 00 00  .........1...!..
  B0D0: 08 00 0C 00 0C 31 00 11 1E 22 00 00 01 00 0A 00  .....1..."......
  B0E0: 05 31 00 11 15 21 03 00 00 00 14 31 54 00 5A 00  .1...!.....1T.Z.
  B0F0: 00 00 0C 31 77 00 7D 00 00 00 05 31 9A 00 A0 00  ...1w.}....1....
  B100: 00 00 01 1E 21 00 00 00 04 14 01 00 10 01 00 00  ....!...........
  B110: 02 00 00 00 00 00 00 00 00 00 00 00 01 04 90 00  ................
  B120: 02 04 01 00 FF 01 1E 22 00 00 00 04 14 01 00 10  ......."........
  B130: 02 00 00 08 00 00 00 00 00 00 00 00 00 00 00 01  ................
  B140: 04 91 00 02 04 02 00 FF 01 15 21 00 00 00 04 14  ..........!.....
  B150: 01 00 00 01 00 00 01 00 00 00 00 00 00 00 00 00  ................
  B160: 00 00 01 04 97 00 02 04 FF 00 FF 05 00 00 00 1E  ................
  B170: 21 E9 00 EF 00 00 00 23 22 F4 00 FA 00 00 00 1E  !......#".......
  B180: 22 03 01 09 01 00 00 23 21 0E 01 14 01 00 00 15  "......#!.......
  B190: 21 1D 01 00 00 00 00 01 00 11 01 14 31 14 04 03  !...........1...
  B1A0: 00 FF 01 1E 21 01 15 31 01 04 00 00 02 04 00 00  ....!..1........
  B1B0: FF 01 00 11 01 0C 31 14 04 03 00 FF 01 1E 22 01  ......1.......".
  B1C0: 15 32 01 04 00 00 02 04 00 00 FF 01 00 11 01 05  .2..............
  B1D0: 31 01 04 00 00 02 04 00 00 FF 01 00 00 00 03 71  1..............q
  B1E0: 00 00 38 01 00 00 10 0A 01 02 FF 00 00 00 00 00  ..8.............
  B1F0: 11 0A 90 91 97 00 00 00 00 00 FF 00 2D 00 01 01  ............-...
  B200: 01 03 02 38 00 06 10 00 00 03 38 00 02 39 00 09  ...8......8..9..
  B210: 10 00 01 83 02 38 00 06 10 00 00 03 38 00 08 20  .....8......8.. 
  B220: 00 00 03 39 00 09 26 00 00 00 00 02 01 08 20 4E  ...9..&....... N
  B230: 00 00 40 7E 05 00 80 38 01 00 00 00 00 00 30 75  ..@~...8......0u
  B240: 00 00 01 00 00 00 40 9C 00 00 02 00 00 00 60 EA  ......@.......`.
  B250: 00 00 03 00 00 00 60 EA 00 00 00 00 00 00 00 00  ......`.........
  B260: 00 00 13 00 02 00 00 00 00 00 D2 00 69 01 00 00  ............i...
  B270: 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B280: 74 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00  t...............
  B290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B2A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B2B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B2C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B2D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B2E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B2F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2B 68  ..............+h
  B300: 00 00 00 00 7E 00 30 75 00 00 01 00 76 00 40 9C  ....~.0u....v.@.
  B310: 00 00 02 00 72 00 F8 C1 00 00 03 00 6E 00 60 EA  ....r.......n.`.
  B320: 00 00 04 00 64 00 DC 19 00 00 00 00 00 00 00 00  ....d...........
  B330: 00 00 4C 13 00 00 D0 07 00 00 77 01 00 00 00 00  ..L.......w.....
  B340: 00 00 64 00 10 0E 00 00 00 00 00 00 00 00 00 00  ..d.............
  B350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B360: 00 00 00 00 00 00 00 00 00 20 00 00 00 00 80 38  ......... .....8
  B370: 01 00 14 82 00 00 14 82 00 00 14 82 00 00 1D 01  ................
  B380: 01 0D 80 38 01 00 40 9C 00 00 40 9C 00 00 40 9C  ...8..@...@...@.
  B390: 00 00 76 00 7E 00 FF 00 FF 00 04 00 00 00 8C 00  ..v.~...........
  B3A0: 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B3B0: 00 00 02 00 10 01 14 31 00 00 00 00 E4 00 00 00  .......1........
  B3C0: 00 00 08 00 10 02 0C 31 01 01 00 00 E4 00 00 00  .......1........
  B3D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B3E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B3F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  B410: 00 00 01 00 00 01 05 31 02 02 00 00 E4 00 00 00  .......1........
  B420: 00 00 00 00 01 00 00 00 00 00 40 00 03 01 FF FF  ..........@.....
  B430: FF 00 00 00 E4 0C 04 01 00 00 FF FF FF 00 64 00  ..............d.
  B440: 10 0E 05 01 00 00 FF FF FF 00 64 00 A0 0F 06 01  ..........d.....
  B450: 00 00 FF FF FF 00 77 01 45 0C 07 12 00 00 FF FF  ......w.E.......
  B460: FF 00 77 01 B8 0B 0B 12 00 00 39 00 02 03 14 00  ..w.......9.....
  B470: 00 00 5D 37 00 00 53 02 02 02 00 00 00 00 15 21  ..]7..S........!
  B480: 34 00 18 00 00 FF FF 00 1E 21 34 00 4C 00 03 FF  4........!4.L...
  B490: FF 00 1E 22 34 00 4C 04 09 FF FF 00 FF FF 00 06  ..."4.L.........
  B4A0: 01 06 FF 00 18 00 02 01 02 00 08 00 80 00 00 02  ................
  B4B0: 00 04 00 08 40 00 01 00 10 00 FF FF 1B 03 03 02  ....@...........
  B4C0: 12 01 12 00 46 00 55 02 61 02 00 00 00 00 80 19  ....F.U.a.......
  B4D0: 00 1F 81 19 00 1F 82 19 00 1F 83 19 00 1F 8B 19  ................
  B4E0: 00 10 8F 19 00 10 84 19 08 17 C0 19 00 1F C1 19  ................
  B4F0: 00 1F C2 19 00 1F C3 19 00 1F C6 19 00 1F C7 19  ................
  B500: 00 1F 32 00 FF FF 02 0F 77 77 F0 0F 00 00 00 00  ..2.....ww......
  B510: 00 00 00 00 00 00 00 00 00 00 0E 80 08 08 01 00  ................
  B520: 20 84 C4 06 01 00 81 0A 01 00 01 00 0E 00 02 00   ...............
  B530: 00 00 00 00 00 00 74 40 03 0F 77 77 F0 0F 00 00  ......t@..ww....
  B540: 00 00 00 00 00 00 00 00 00 00 00 00 0E 80 08 08  ................
  B550: 01 00 20 84 C4 06 01 00 81 0A 01 00 01 00 0E 00  .. .............
  B560: 02 00 00 00 00 00 00 00 E4 57 03 0F 77 77 F0 0F  .........W..ww..
  B570: 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 0E 80  ................
  B580: 08 08 01 00 20 84 C4 06 01 00 9F 0A 01 00 01 00  .... ...........
  B590: 0E 00 02 00 00 00 00 00 00 00 FF FF 03 0F 55 55  ..............UU
  B5A0: A0 0A 00 00 00 00 00 00 00 1C 00 00 00 00 00 00  ................
  B5B0: 0E 80 08 08 01 00 20 84 C4 06 01 00 9F 0A 01 00  ...... .........
  B5C0: 01 00 0E 00 02 00 00 00 00 00 00 00 00 00 00 0F  ................
  B5D0: 41 01 80 19 69 00 01 04 10 40 00 00 00 00 00 02  A...i....@......
  B5E0: 08 20 80 00 00 00 50 05 04 10 40 00 01 00 00 A0  . ....P...@.....
  B5F0: 0A 08 20 80 00 02 00 00 F0 0F 10 40 00 01 04 11  .. ........@....
  B600: 11 00 00 20 80 00 02 08 11 11 50 05 40 00 01 04  ... ......P.@...
  B610: 10 11 11 A0 0A 80 00 02 08 20 22 22 00 00 00 01  ......... ""....
  B620: 00 00 00 22 22 50 15 00 00 04 10 40 22 22 50 05  ...""P.....@""P.
  B630: 00 02 08 20 80 33 33 00 00 00 00 81 19 0F 00 FF  ... .33.........
  B640: FF FF FF FF 00 00 00 00 00 00 82 19 2A 00 B9 F6  ............*...
  B650: FA C9 FF 00 00 00 00 06 08 00 00 00 00 00 00 14  ................
  B660: 40 01 05 22 00 00 00 00 04 00 00 00 14 00 00 00  @.."............
  B670: 00 08 00 00 83 19 0F 00 FF FF FF FF FF 80 00 00  ................
  B680: 00 00 00 8B 19 0F 00 FF FF FF FF FF 00 00 00 00  ................
  B690: 00 00 8F 19 0F 00 FF FF FF FF FF 04 80 00 00 00  ................
  B6A0: 00 84 19 0F 00 FF FF FF FF FF 00 08 08 00 00 00  ................
  B6B0: C0 19 0F 00 FF FF FF FF FF 01 00 20 80 00 00 C1  ........... ....
  B6C0: 19 0F 00 FF FF FF FF FF C4 06 01 00 00 00 C2 19  ................
  B6D0: 0F 00 FF FF FF FF FF 81 0A 01 00 00 00 C3 19 21  ...............!
  B6E0: 00 01 04 00 40 00 01 00 0A 00 00 00 10 01 00 01  ....@...........
  B6F0: 00 0C 00 FE FB EF BE FF 01 00 0E 00 00 00 C6 19  ................
  B700: 0F 00 FF FF FF FF FF 02 00 00 00 00 00 00 00 00  ................
  B710: 00 85 19 00 1F 86 19 00 1F 87 19 10 1F 0E 00 48  ...............H
  B720: 3F 00 0F 00 80 28 00 5D 00 12 00 10 00 78 69 00  ?....(.].....xi.
  B730: 0F 00 00 1B 00 5D 00 1A 00 00 00 90 7E 00 0F 68  .....]......~..h
  B740: 66 20 00 5D 00 0A 00 00 00 F0 D2 00 0F 00 00 36  f .]...........6
  B750: 00 5D 00 1A 00 00 00 35 0C 02 0F 00 00 50 00 1D  .].....5.....P..
  B760: 00 85 10 00 C0 6A 18 02 0F 00 00 28 00 1D 00 32  .....j.....(...2
  B770: 10 00 A0 D4 30 02 0F 00 00 14 00 1D 00 0A 10 00  ....0...........
  B780: 80 FF FF 02 0F 00 00 14 00 1D 00 2A 10 00 01 A0  ...........*....
  B790: 0F 03 0F 00 00 50 00 1D 00 85 10 00 C0 4C 1D 03  .....P.......L..
  B7A0: 0F 00 00 14 00 1D 00 0A 10 00 80 74 40 03 0F 00  ...........t@...
  B7B0: 00 14 00 1D 00 0A 10 00 01 E4 57 03 0F 00 00 14  ..........W.....
  B7C0: 00 5D 00 00 10 00 01 FF FF 03 0F 00 00 1E 00 5D  .].............]
  B7D0: 00 11 10 00 02 00 00 00 50 00 01 01 00 08 52 47  ........P.....RG
  B7E0: 52 02 02 65 02 07 52 0D 55 00 02 52 0D 52 23 2C  R..e..R.U..R.R#,
  B7F0: 25 02 01 3D 25 02 02 45 13 00 51 02 52 05 66 04  %..=%..E..Q.R.f.
  B800: 02 8C 02 2E 00 3D 8D 02 00 00 44 3C 00 02 0D 02  .....=....D<....
  B810: 01 00 52 43 02 01 02 00 0E E5 02 08 52 0A 52 4B  ..RC........R.RK
  B820: 0D 65 D0 05 02 50 01 5B 57 00 01 02 00 00 37 00  .e...P.[W.....7.
  B830: 00 52 14 02 08 00 0D 1A 32 08 00 0B 1A 02 88 00  .R......2.......
  B840: 0E 1A 32 88 00 0C 1A 03 00 46 04 1A 09 05 46 FF  ..2......F....F.
  B850: FF FF 00 56 00 40 03 20 40 01 1A 09 25 40 03 75  ...V.@. @...%@.u
  B860: 02 46 40 03 18 40 5C 1B 2D 02 46 40 27 00 46 06  .F@..@\.-.F@'.F.
  B870: 1A 2D 08 40 5C 1B 02 0A 01 41 02 8A 01 40 5B 00  .-.@\....A...@[.
  B880: 37 00 01 01 00 00 37 00 00 01 05 00 0B 29 00 20  7.....7......). 
  B890: 0F 01 05 CC 0B 01 00 00 00 5C 05 D3 0B 10 00 E0  .........\......
  B8A0: FF E0 1B 32 00 66 1E 03 24 41 38 00 09 25 41 3C  ...2.f..$A8..%A<
  B8B0: 5C 22 47 18 C3 41 5B 00 32 00 01 01 00 00 37 00  \"G..A[.2.....7.
  B8C0: 00 54 20 24 15 56 00 41 03 88 41 09 08 01 02 01  .T $.V.A..A.....
  B8D0: 0B 41 01 3A C9 00 41 15 05 41 08 01 02 C4 00 41  .A.:..A..A.....A
  B8E0: 54 20 2B 08 0D 25 24 15 03 5B FF 00 02 01 00 04  T +..%$..[......
  B8F0: 37 00 00 66 0C 03 0C 41 00 00 2D 0A 41 42 2D 0D  7..f...A..-.AB-.
  B900: 42 04 00 3D 24 00 03 00 44 30 00 2D 0D 42 04 00  B..=$...D0.-.B..
  B910: 3E 0A 42 41 44 FB 00 43 19 00 56 00 43 03 A4 41  >.BAD..C..V.C..A
  B920: 02 00 03 F2 41 41 03 0C 41 00 00 3E 0D 41 00 00  ....AA..A..>.A..
  B930: 44 FB 00 3E 0D 41 45 19 49 6B 00 3E E5 41 10 46  D..>.AE.Ik.>.A.F
  B940: 5F 00 1B 3D 41 01 43 6B 00 09 E5 41 03 15 3D 41  _..=A.Ck...A..=A
  B950: 02 2D E5 41 0C 03 3A 43 41 54 00 00 00 33 0D 41  .-.A..:CAT...3.A
  B960: 01 00 01 0A 00 00 41 0D 02 01 00 44 2D 0D 41 02  ......A....D-.A.
  B970: 00 01 0A 00 00 41 03 32 43 41 4B E5 00 01 49 D7  .....A.2CAK...I.
  B980: 00 07 02 01 00 45 2D 0D 41 01 00 01 0A 00 00 41  .....E-.A......A
  B990: 4A 02 01 00 44 44 B9 00 03 29 43 00 0E A2 00 44  J...DD...)C....D
  B9A0: 43 C1 00 03 29 43 00 08 A2 00 45 33 0D 41 03 00  C...)C....E3.A..
  B9B0: 01 0A 00 00 41 03 3A 43 41 07 02 01 00 45 43 FA  ....A.:CA....EC.
  B9C0: 00 0D 02 01 00 44 33 0D 41 01 00 01 0A 00 00 41  .....D3.A......A
  B9D0: 3D A5 00 01 44 F5 00 07 02 01 00 45 43 FA 00 0D  =...D......EC...
  B9E0: 02 01 00 44 5B 55 20 00 5B 00 41 00 01 01 00 04  ...D[U .[.A.....
  B9F0: 02 01 01 00 02 E5 01 02 52 3C 37 00 00 01 05 82  ........R<7.....
  BA00: 00 90 00 50 C0 4A 25 83 00 01 44 13 00 01 05 82  ...P.J%...D.....
  BA10: 00 8C 00 50 C0 01 39 83 00 01 01 05 82 00 90 00  ...P..9.........
  BA20: 50 C0 4A 25 83 00 01 44 30 00 5B 00 6E 05 01 06  P.J%...D0.[.n...
  BA30: 00 00 37 00 00 3D 25 02 08 49 31 02 3D 05 00 00  ..7..=%..I1.=...
  BA40: 00 00 00 44 1E 02 4A 25 07 17 02 44 3E 00 4A 25  ...D..J%...D>.J%
  BA50: 1B 17 02 44 3E 00 4A 25 2F 17 02 44 3E 00 01 25  ...D>.J%/..D>..%
  BA60: 3C 01 81 51 01 07 25 3C 01 FE 54 20 41 18 54 20  <..Q..%<..T A.T 
  BA70: 1F 03 02 01 01 00 02 05 00 20 CB 00 00 4A 25 47  ......... ...J%G
  BA80: 18 10 44 69 00 02 05 00 6E 01 03 00 52 13 02 05  ..Di....n...R...
  BA90: 00 40 9C 00 00 52 3C 3C F9 24 01 00 44 C0 00 4A  .@...R<<.$..D..J
  BAA0: A5 24 01 10 44 73 00 07 25 15 01 FE 03 00 40 24  .$..Ds..%.....@$
  BAB0: 01 03 F9 40 00 3E 25 40 00 49 94 00 03 25 40 68  ...@.>%@.I...%@h
  BAC0: 01 02 24 01 40 4A A5 24 01 10 44 99 00 4A A5 24  ..$.@J.$..D..J.$
  BAD0: 01 08 44 A1 00 4A 25 47 18 10 49 C0 00 02 01 02  ..D..J%G..I.....
  BAE0: 00 02 0D 00 6F 01 52 13 02 01 00 02 55 38 00 20  ....o.R.....U8. 
  BAF0: 05 00 50 C3 00 00 03 02 46 40 20 05 00 05 00 00  ..P.....F@ .....
  BB00: 00 66 1E 56 00 41 03 0C 41 10 01 21 02 40 41 27  .f.V.A..A..!.@A'
  BB10: 05 40 14 00 00 00 33 02 46 40 01 02 42 01 46 01  .@....3.F@..B.F.
  BB20: 02 46 01 46 03 0C 41 10 01 3E 0D 41 00 00 44 24  .F.F..A..>.A..D$
  BB30: 01 01 A5 15 01 01 01 05 13 01 00 0E 27 07 01 02  ............'...
  BB40: 14 01 46 0D 25 15 01 01 4A 65 15 01 02 44 1C 01  ..F.%...Je...D..
  BB50: 55 38 03 56 00 46 01 05 82 00 C8 01 50 C0 03 10  U8.V.F......P...
  BB60: 41 83 00 09 0D 41 80 03 4C 65 41 01 44 66 01 0E  A....A..LeA.Df..
  BB70: E5 03 01 03 0D 46 40 9C 4C 25 41 80 49 58 01 03  .....F@.L%A.IX..
  BB80: 0D 46 30 75 4C 65 41 02 44 7F 01 1B 0D 46 01 43  .F0uLeA.D....F.C
  BB90: 7F 01 01 05 82 00 18 01 50 C0 4A 25 83 00 20 44  ........P.J%.. D
  BBA0: 7F 01 0E E5 03 01 03 0D 46 10 27 4A 25 47 18 10  ........F.'J%G..
  BBB0: 44 C4 01 3D 05 01 40 9C 00 00 46 C4 01 0E E5 03  D..=..@...F.....
  BBC0: 02 66 FF 2D 0D 42 5F 05 3D 04 01 00 00 47 AC 01  .f.-.B_.=....G..
  BBD0: 2D 0D 42 05 00 43 9C 01 02 04 01 00 00 02 24 03  -.B..C........$.
  BBE0: 04 00 3D 02 01 46 49 C4 01 0E E5 03 04 43 D2 01  ..=..FI......C..
  BBF0: 4B E5 03 01 44 D2 01 02 0D 00 6D 01 52 13 02 01  K...D.....m.R...
  BC00: 00 01 52 3C 02 01 02 00 55 38 02 3C 39 24 01 00  ..R<....U8.<9$..
  BC10: 44 FC 01 4A A5 24 01 08 44 E7 01 01 39 24 01 00  D..J.$..D...9$..
  BC20: 4A A5 24 01 08 44 F4 01 4B E5 03 02 44 19 02 02  J.$..D..K...D...
  BC30: 01 02 01 4B E5 03 04 49 19 02 02 A1 00 03 02 0D  ...K...I........
  BC40: 00 6C 01 52 13 02 01 00 02 5B 0D 25 3C 01 01 0D  .l.R.....[.%<...
  BC50: 25 41 18 01 4A 65 41 18 01 44 28 02 5B 4B 05 00  %A..JeA..D(.[K..
  BC60: FF FF FF 00 44 56 02 3D 65 02 24 49 46 02 02 A5  ....DV.=e.$IF...
  BC70: 02 00 3D 25 02 02 46 C1 02 52 24 4B E5 02 01 44  ..=%..F..R$K...D
  BC80: C5 02 3D E5 00 01 46 6E 02 03 01 46 00 02 39 00  ..=...Fn...F..9.
  BC90: 00 55 28 00 52 23 02 02 00 46 3D 25 02 02 44 89  .U(.R#...F=%..D.
  BCA0: 02 3A 14 00 3D 25 02 00 44 89 02 3A 28 00 3D 25  .:..=%..D..:(.=%
  BCB0: 02 01 49 2C 05 54 00 06 17 07 65 04 17 EF 54 00  ..I,.T....e...T.
  BCC0: 05 17 54 00 03 17 07 25 07 17 F7 0D 25 07 17 01  ..T....%....%...
  BCD0: 51 32 07 25 07 17 7F 51 32 0D 25 07 17 02 51 C8  Q2.%...Q2.%...Q.
  BCE0: 4B 05 00 FF FF FF 00 49 C1 02 43 2C 05 03 0A 41  K......I..C,...A
  BCF0: 48 3D E5 00 01 46 F6 02 03 01 46 00 02 39 00 00  H=...F....F..9..
  BD00: 0E 25 00 80 52 14 02 02 00 46 4B E5 02 02 44 F0  .%..R....FK...D.
  BD10: 02 01 05 CC 00 01 03 01 00 43 F6 02 07 4D CC 00  .........C...M..
  BD20: FC FE 4B E5 02 01 44 E7 03 03 0A 48 41 66 FF 2D  ..K...D....HAf.-
  BD30: 0D 42 33 05 3D 0C 01 00 00 47 18 03 2D 0D 42 06  .B3.=....G..-.B.
  BD40: 00 43 08 03 3D A5 02 03 49 43 03 03 01 46 00 56  .C..=...IC...F.V
  BD50: 38 46 3E 05 46 E4 57 00 00 47 43 03 3D 0D 01 1D  8F>.F.W..GC.=...
  BD60: 00 46 43 03 01 05 08 17 44 B9 DE 19 43 49 03 01  .FC.....D...CI..
  BD70: 04 08 17 02 00 01 65 00 17 20 4B E5 02 10 44 5D  ......e.. K...D]
  BD80: 03 01 A5 07 17 00 43 63 03 5C A5 07 17 F8 01 0D  ......Cc.\......
  BD90: 25 0C 17 01 4B E5 02 02 44 7A 03 01 05 02 17 7E  %...K...Dz.....~
  BDA0: 7E 7E 00 43 98 03 01 39 00 17 01 01 89 01 17 01  ~~.C...9........
  BDB0: 07 25 01 17 F0 01 B1 02 17 01 01 39 02 17 03 01  .%.........9....
  BDC0: 71 02 17 01 51 64 54 20 0C 17 07 25 07 17 FD 51  q...QdT ...%...Q
  BDD0: 32 0D 25 07 17 80 50 02 07 25 07 17 FE 51 0A 4A  2.%...P..%...Q.J
  BDE0: A5 07 17 10 44 B1 03 4A A5 07 17 20 44 BB 03 4B  ....D..J... D..K
  BDF0: E5 02 02 49 E2 03 01 31 01 17 03 3D 0D 03 00 00  ...I...1...=....
  BE00: 44 E2 03 01 09 05 17 03 5C A5 05 17 FC 01 0D 25  D.......\......%
  BE10: 07 17 08 3A 00 00 3D E5 00 01 46 2C 05 03 01 46  ...:..=...F,...F
  BE20: 00 56 38 46 56 00 41 03 39 41 02 09 25 41 0C 1B  .V8FV.A.9A..%A..
  BE30: 25 41 01 66 FF 2D 0D 42 57 05 2D 0A 42 41 03 24  %A.f.-.BW.-.BA.$
  BE40: 41 01 00 21 02 46 41 03 24 41 00 00 27 02 40 41  A..!.FA.$A..'.@A
  BE50: 03 05 41 00 E1 F5 05 27 02 41 40 3E 05 40 00 00  ..A....'.A@>.@..
  BE60: 01 00 45 3E 04 03 0D 40 FF FF 02 39 00 00 52 14  ..E>...@...9..R.
  BE70: 01 0A 30 1B 40 3A 00 00 55 00 03 02 39 03 00 14  ..0.@:..U...9...
  BE80: 0D 03 02 3D A5 02 00 49 B3 04 03 09 48 03 21 05  ...=...I....H.!.
  BE90: 46 50 C3 00 00 03 02 46 40 3C 02 41 01 40 49 7D  FP.....F@<.A.@I}
  BEA0: 04 4A 25 40 01 10 49 2C 05 3A 00 00 55 28 00 52  .J%@..I,.:..U(.R
  BEB0: 23 03 09 48 03 07 25 40 01 EF 01 02 41 01 46 66  #..H..%@....A.Ff
  BEC0: 1E 03 0C 41 10 01 3E 0D 41 00 00 49 AB 04 5C 25  ...A..>.A..I..\%
  BED0: 40 01 DF 10 43 2C 05 0D 25 40 01 30 43 2C 05 03  @...C,..%@.0C,..
  BEE0: 09 48 03 03 39 46 02 09 25 46 0C 15 25 46 02 0F  .H..9F..%F..%F..
  BEF0: 25 46 01 02 A1 02 02 2C A5 02 01 3D 25 02 02 49  %F.....,...=%..I
  BF00: D9 04 55 30 02 4B E5 02 01 49 F9 04 3C 31 40 01  ..U0.K...I..<1@.
  BF10: 02 49 F4 04 03 21 48 02 3C 22 38 01 46 44 2C 05  .I...!H.<"8.FD,.
  BF20: 55 28 00 52 23 03 21 48 02 07 25 38 01 FE 03 09  U(.R#.!H..%8....
  BF30: 48 03 01 31 40 01 02 03 21 48 02 01 22 38 01 46  H..1@...!H.."8.F
  BF40: 4B E5 02 02 44 2C 05 3A 00 00 03 21 43 00 0D 22  K...D,.:...!C.."
  BF50: C1 00 44 0D 62 C1 00 44 3A 00 00 5B 7A 3B 00 1D  ..D.b..D:..[z;..
  BF60: 00 44 B5 DE 9D 22 00 44 B6 DE 9D 2D 00 44 B7 DE  .D...".D...-.D..
  BF70: 9D 3B 00 44 65 DE 9D 45 00 44 66 DE 9D FF FF 44  .;.De..E.Df....D
  BF80: 67 DE 9D 01 01 05 04 03 02 02 01 10 27 00 00 0A  g...........'...
  BF90: 30 75 00 00 02 40 9C 00 00 03 9E 01 02 01 00 00  0u...@..........
  BFA0: 37 00 00 3D 65 00 07 44 99 00 56 00 41 03 21 41  7..=e..D..V.A.!A
  BFB0: 00 15 25 41 02 03 0A 48 41 3D 65 00 01 44 8C 00  ..%A...HA=e..D..
  BFC0: 54 20 61 17 3C E5 62 17 30 49 2A 00 03 21 48 00  T a.<.b.0I*..!H.
  BFD0: 01 0D FA 02 02 00 52 14 01 25 BE 1B 02 01 25 91  ......R..%....%.
  BFE0: 1A CC 01 A5 8D 1A 20 0D 25 7D 1A 01 0D 25 34 1B  ...... .%}...%4.
  BFF0: 01 01 25 3A 1B 11 01 0D 33 1B FF 7F 01 05 B3 1B  ..%:....3.......
  C000: 01 01 04 10 0D A5 B6 1B 01 01 05 31 1B 00 08 00  ...........1....
  C010: 04 01 25 C5 1B 04 01 0D 86 1B 04 00 01 0D E7 1B  ..%.............
  C020: 01 00 3A 00 00 5B 54 08 60 17 0D 25 61 17 01 3A  ..:..[T.`..%a..:
  C030: 00 00 5B 01 05 1A 03 86 61 18 06 01 05 1D 03 86  ..[.....a.......
  C040: 61 18 06 01 05 11 03 06 C0 2B 00 5C 05 F6 02 FF  a........+.\....
  C050: 08 FF 9F 04 F4 00 20 01 05 F9 02 61 51 02 00 01  ...... ....aQ...
  C060: 05 14 03 00 90 00 10 01 A5 F8 02 04 5C 65 07 17  ............\e..
  C070: E7 08 5C 65 1B 17 E7 08 0D 65 24 17 01 01 05 3B  ..\e.....e$....;
  C080: 01 30 02 12 00 01 05 30 01 80 BB 10 00 01 8D BA  .0.....0........
  C090: 17 30 00 01 25 B9 17 01 01 05 31 01 3C 00 01 08  .0..%.....1.<...
  C0A0: 01 65 D4 00 02 01 0D FC 00 00 01 01 05 DC 00 13  .e..............
  C0B0: 00 19 00 01 25 E0 00 2F 01 0D D8 00 01 00 01 05  ....%../........
  C0C0: E4 00 44 B7 1E 9D 01 05 DD 00 12 00 19 00 01 25  ..D............%
  C0D0: E1 00 2A 01 0D D9 00 01 00 01 05 E5 00 44 B7 1E  ..*..........D..
  C0E0: 9D 01 05 0A 19 0F 00 00 00 0D E5 CB 05 10 01 05  ................
  C0F0: 38 18 00 00 00 30 54 20 78 17 4A 25 7E 17 01 49  8....0T x.J%~..I
  C100: 60 01 01 05 7D 17 00 20 00 00 01 05 7C 17 FF 10  `...}.. ....|...
  C110: 00 10 0D 25 78 17 01 02 8D 00 00 07 52 18 55 00  ...%x.......R.U.
  C120: 00 52 4E 66 16 03 0C 41 04 00 4C 0D 41 02 00 44  .RNf...A..L.A..D
  C130: 88 00 0D A5 C9 05 04 5B 17 00 01 01 00 00 37 00  .......[......7.
  C140: 00 01 05 82 00 00 00 20 C0 07 A5 83 00 FC 5B 00  ....... ......[.
  C150: 49 00 01 02 00 04 37 00 00 42 21 00 63 6D 1F 00  I.....7..B!.cm..
  C160: 63 6C 22 00 63 6F 25 00 63 6E 28 00 5A 5A 5B 43  cl".co%.cn(.ZZ[C
  C170: 28 00 43 28 00 43 28 00 56 00 41 03 31 41 00 01  (.C(.C(.V.A.1A..
  C180: 02 BD 00 41 56 00 41 03 09 41 00 01 02 B5 00 41  ...AV.A..A.....A
  C190: 3C 25 B6 00 00 44 40 00 5B 00 76 00 01 02 00 04  <%...D@.[.v.....
  C1A0: 66 FF 56 08 47 2D 0D 42 50 00 03 21 47 00 09 25  f.V.G-.BP..!G..%
  C1B0: 47 F0 42 22 47 63 00 37 00 63 40 2A 00 63 80 32  G.B"Gc.7.c@*.c.2
  C1C0: 00 5A 5A 5B 2D 0D 42 1A 00 43 37 00 2D 0D 42 0E  .ZZ[-.B..C7.-.B.
  C1D0: 00 03 21 47 00 09 25 47 07 2D 0A 42 47 2D 0A 42  ..!G..%G.-.BG-.B
  C1E0: 47 03 0C 48 00 00 5B 7A 26 00 00 00 00 03 00 26  G..H..[z&......&
  C1F0: 00 29 00 2C 00 2F 00 32 00 00 02 00 2C 00 2D 00  .).,./.2....,.-.
  C200: 2E 00 2F 00 00 00 01 00 07 00 08 00 0B 00 0C 00  ../.............
  C210: 76 00 01 03 00 04 37 00 00 03 88 41 E4 19 03 00  v.....7....A....
  C220: 46 F5 19 03 10 40 F7 19 0D 25 E4 19 01 54 20 EE  F....@...%...T .
  C230: 19 54 08 F4 19 01 25 F6 19 01 01 A5 F7 19 07 54  .T....%........T
  C240: 20 F5 19 50 05 54 00 F5 19 01 0D F4 19 E6 01 51   ..P.T.........Q
  C250: C8 0D 65 F7 19 01 51 64 03 E0 40 F8 19 09 E5 40  ..e...Qd..@....@
  C260: 0E 54 08 F6 19 01 1A E4 19 41 01 02 F5 19 46 01  .T.......A....F.
  C270: 4A F7 19 40 3E E5 40 00 44 6F 00 03 E5 40 02 5C  J..@>.@.Do...@.\
  C280: 3A C9 05 FC 40 5B 77 00 01 01 00 04 37 00 00 3D  :...@[w.....7..=
  C290: E5 00 01 49 42 00 0D 25 28 01 01 07 25 E4 19 FD  ...IB..%(...%...
  C2A0: 0D 25 E4 19 01 0D 25 F3 19 01 54 20 F5 19 51 14  .%....%...T ..Q.
  C2B0: 54 00 F5 19 51 02 54 08 F4 19 54 00 F3 19 54 00  T...Q.T...T...T.
  C2C0: EC 19 0D 25 E4 19 02 5B 0D 05 F5 19 00 01 01 01  ...%...[........
  C2D0: 0D 25 F5 19 01 07 25 E4 19 FC 54 08 F4 19 0D 0D  .%....%...T.....
  C2E0: F3 19 01 07 54 20 28 01 3D E5 00 07 49 76 00 07  ....T (.=...Iv..
  C2F0: 25 FE 19 FB 01 05 FD 19 02 20 20 00 5B 00 78 00  %........  .[.x.
  C300: 01 01 00 00 37 00 00 52 14 0D A5 51 1B 01 54 20  ....7..R...Q..T 
  C310: 54 1B 0D 25 44 1B 01 54 20 45 1B 42 29 00 63 00  T..%D..T E.B).c.
  C320: 31 00 63 01 39 00 63 02 4D 00 5A 5A 43 70 00 01  1.c.9.c.M.ZZCp..
  C330: 25 45 1B 02 43 3E 00 01 25 45 1B 01 54 20 42 1B  %E..C>..%E..T B.
  C340: 54 00 43 1B 54 00 47 1B 43 70 00 01 0D 43 1B 01  T.C.T.G.Cp...C..
  C350: 01 01 05 47 1B 01 00 01 00 0D 65 48 1B 01 0D 65  ...G......eH...e
  C360: 4B 1B 01 01 0D 53 1B 10 10 01 25 42 1B 01 54 30  K....S....%B..T0
  C370: 51 1B 3A 00 00 5B 74 00 01 01 00 00 37 00 00 4A  Q.:..[t.....7..J
  C380: A5 CB 05 01 44 15 00 02 65 00 01 0E 25 00 80 52  ....D...e...%..R
  C390: 14 03 00 46 CC 00 08 25 00 0F 52 14 54 30 9D 1B  ...F...%..R.T0..
  C3A0: 3C 69 9D 1B 00 44 65 00 01 69 9D 1B 00 3D 65 00  <i...De..i...=e.
  C3B0: 00 44 65 00 4A A5 9C 1B 01 44 65 00 4C 25 46 01  .De.J....De.L%F.
  C3C0: 44 69 00 4A 25 A3 1B 01 49 4D 00 4A 25 A3 1B 01  Di.J%...IM.J%...
  C3D0: 44 55 00 4A 25 A3 1B 01 49 5D 00 3A 00 00 5B 4A  DU.J%...I].:..[J
  C3E0: 25 9D 1B 01 44 69 00 43 65 00 3E 00 01 01 00 00  %...Di.Ce.>.....
  C3F0: 37 00 00 52 14 3D 65 00 01 44 30 00 0D 65 9C 1B  7..R.=e..D0..e..
  C400: 03 07 25 9C 1B FE 4A A5 9C 1B 01 49 1C 00 07 E5  ..%...J....I....
  C410: 7C 1B 7F 54 20 A9 1B 43 3A 00 0D E5 7C 1B 80 0D  |..T ..C:...|...
  C420: 25 9C 1B 01 3A 00 00 5B 20 01 01 03 00 0C 37 00  %...:..[ .....7.
  C430: 00 56 00 40 03 09 40 01 21 05 40 40 42 0F 00 2D  .V.@..@.!.@@B..-
  C440: 01 40 03 27 05 40 0A 00 00 00 21 05 40 30 00 00  .@.'.@....!.@0..
  C450: 00 56 00 41 03 39 41 01 27 02 40 41 27 05 40 E8  .V.A.9A.'.@A'.@.
  C460: 03 00 00 03 02 46 40 3E 05 41 F4 01 00 00 47 50  .....F@>.A....GP
  C470: 00 2D 05 46 01 00 00 00 3D 05 03 00 00 00 00 44  .-.F....=......D
  C480: 84 00 2C 0D 01 01 00 03 05 40 40 42 0F 00 33 01  ..,......@@B..3.
  C490: 40 03 27 05 40 A0 86 01 00 02 A2 03 40 15 05 41  @.'.@.......@..A
  C4A0: 0E 27 05 41 A8 61 00 00 02 0A 03 40 02 F1 03 01  .'.A.a.....@....
  C4B0: 3D A5 02 00 44 A5 00 2D 05 46 E0 01 00 00 03 01  =...D..-.F......
  C4C0: 41 00 56 38 41 27 02 46 41 02 E2 03 40 0E A5 03  A.V8A'.FA...@...
  C4D0: 10 4B E5 02 01 49 18 01 3D 25 02 02 44 C4 00 3A  .K...I..=%..D..:
  C4E0: 14 00 3D 25 02 00 44 C4 00 3A 28 00 03 00 41 07  ..=%..D..:(...A.
  C4F0: 17 5E 05 41 FC FF F8 FF 08 00 01 00 4B E5 02 10  .^.A........K...
  C500: 44 E0 00 5E A5 41 F8 00 3C 02 07 17 41 49 18 01  D..^.A..<...AI..
  C510: 3C 39 00 17 01 49 18 01 3C 89 01 17 01 49 18 01  <9...I..<....I..
  C520: 3C 31 01 17 03 49 18 01 3C 09 05 17 03 49 18 01  <1...I..<....I..
  C530: 3C B1 02 17 01 49 18 01 3C 39 02 17 03 44 1C 01  <....I..<9...D..
  C540: 0E E5 02 01 3A 00 00 5B 2C 00 02 01 00 00 37 00  ....:..[,.....7.
  C550: 00 3C 21 FC 00 00 49 19 00 0D A5 C0 00 01 43 26  .<!...I.......C&
  C560: 00 3C 61 FC 00 00 49 26 00 0D A5 C0 00 02 0D A5  .<a...I&........
  C570: C1 00 01 5B 19 00 01 01 00 08 37 00 00 52 14 01  ...[......7..R..
  C580: 01 5E 1B 00 01 01 5F 1B 01 3A 00 00 5B 00 CC 00  .^...._..:..[...
  C590: 01 02 00 00 37 00 00 42 29 00 63 00 33 00 63 07  ....7..B).c.3.c.
  C5A0: 3B 00 63 03 43 00 63 09 43 00 63 0A 43 00 63 0B  ;.c.C.c.C.c.C.c.
  C5B0: 43 00 63 0C 43 00 63 0D 43 00 63 0E 43 00 5A 5A  C.c.C.c.C.c.C.ZZ
  C5C0: 5B 01 21 E5 19 00 43 B6 00 01 21 59 18 00 43 B6  [.!...C...!Y..C.
  C5D0: 00 02 E1 00 00 55 20 00 3D 65 00 03 44 59 00 02  .....U .=e..DY..
  C5E0: 29 00 00 32 25 00 08 52 14 5C 39 00 1C F8 00 02  )..2%..R.\9.....
  C5F0: 39 00 00 3D A5 00 01 49 B6 00 52 14 54 00 F2 1B  9..=...I..R.T...
  C600: 66 06 03 E4 41 28 00 09 E5 41 70 66 1E 03 04 40  f...A(...Apf...@
  C610: 40 01 3E 05 40 00 00 00 00 44 96 00 01 02 F2 1B  @.>.@....D......
  C620: 40 43 BC 00 3E E5 41 20 46 BC 00 49 AB 00 0D 05  @C..>.A F..I....
  C630: F2 1B 00 F9 00 00 43 BC 00 0D 05 F2 1B 00 A1 00  ......C.........
  C640: 00 43 BC 00 52 14 54 00 F2 1B 54 30 EE 1B 54 00  .C..R.T...T0..T.
  C650: F9 1B 54 00 ED 1B 3A 00 00 5B BB 01 01 04 00 08  ..T...:..[......
  C660: 37 00 00 3D 65 02 01 49 50 01 4B A5 02 03 49 79  7..=e..IP.K...Iy
  C670: 00 02 05 00 00 03 00 05 02 05 01 00 05 02 00 3C  ...............<
  C680: 21 FC 00 02 49 57 00 01 8D C0 00 00 02 51 02 01  !...IW.......Q..
  C690: 05 C6 00 00 00 10 00 01 05 C8 00 00 00 50 00 01  .............P..
  C6A0: 0D C3 00 02 00 54 20 CA 00 01 05 C2 00 00 01 00  .....T .........
  C6B0: 00 0E 25 02 80 52 14 08 25 02 07 56 20 40 4A 65  ..%..R..%..V @Je
  C6C0: CC 00 01 44 73 00 56 08 48 03 25 40 10 56 08 48  ...Ds.V.H.%@.V.H
  C6D0: 43 9F 00 0E 25 02 80 52 14 54 00 CC 00 56 08 48  C...%..R.T...V.H
  C6E0: 08 25 02 07 0D 25 CA 00 01 01 25 C2 00 11 54 00  .%...%....%...T.
  C6F0: C6 00 54 00 C8 00 56 20 40 07 65 D0 05 FE 3D A5  ..T...V @.e...=.
  C700: 01 01 47 B0 00 0D 65 D0 05 01 03 A0 40 C9 00 03  ..G...e.....@...
  C710: 00 46 C4 00 03 02 41 46 2D 00 46 C6 00 2D 00 41  .F....AF-.F..-.A
  C720: C8 00 52 14 01 32 07 1A 40 01 32 08 1A 40 01 02  ..R..2..@.2..@..
  C730: 04 1A 46 01 02 05 1A 41 54 30 C1 1A 54 00 5C 1B  ..F....AT0..T.\.
  C740: 01 01 5D 1B 00 54 08 09 1A 54 08 0A 1A 54 08 0B  ..]..T...T...T..
  C750: 1A 54 08 0C 1A 01 09 0E 1A 00 01 19 0D 1A 00 5C  .T.............\
  C760: 19 01 1A FC F8 01 07 A5 01 1A 0F 01 09 06 1A 01  ................
  C770: 01 25 00 1A 01 0D E5 B3 1B 10 5C A2 B3 1B EF 40  .%........\....@
  C780: 54 20 35 1A 54 20 3C 1A 54 00 CA 1B 54 00 C8 1B  T 5.T <.T...T...
  C790: 54 00 CC 1B 4B A5 02 03 49 4C 01 0E 25 02 80 52  T...K...IL..%..R
  C7A0: 14 0D 25 CC 00 01 3A 00 00 5B 52 14 3D 65 02 00  ..%...:..[R.=e..
  C7B0: 49 6D 01 54 20 00 1A 3A 00 00 3C 21 FC 00 02 49  Im.T ..:..<!...I
  C7C0: 6C 01 54 08 C1 00 5B 3D 65 02 10 44 7A 01 01 09  l.T...[=e..Dz...
  C7D0: 06 1A 01 5B 03 00 40 04 1A 09 05 40 00 00 00 FF  ...[..@....@....
  C7E0: 2D 01 40 00 09 0D 40 00 F0 01 02 04 1A 40 08 0D  -.@...@......@..
  C7F0: 00 FF 0F 56 00 41 03 31 41 01 74 0A 00 41 2C 09  ...V.A.1A.t..A,.
  C800: 01 00 08 25 00 FC 14 05 00 10 01 01 5C 1B 00 01  ...%........\...
  C810: 09 0D 1A 01 5B 00 5D 00 01 01 00 00 37 00 00 52  ....[.].....7..R
  C820: 14 07 65 B6 1B FE 3D 65 00 01 44 37 00 54 30 6E  ..e...=e..D7.T0n
  C830: 1A 54 30 27 1A 54 30 11 1A 54 20 B5 1B 54 20 BD  .T0'.T0..T ..T .
  C840: 1B 4A 25 B6 1B 01 49 2B 00 3A 00 00 5B 0D 25 BD  .J%...I+.:..[.%.
  C850: 1B 01 54 00 9E 1B 07 25 C0 1A F7 3A 00 00 0D 25  ..T....%...:...%
  C860: 32 01 01 4A 25 28 03 07 49 5C 00 01 25 28 03 02  2..J%(..I\..%(..
  C870: 51 14 5B 00 D9 00 01 03 00 00 37 00 00 52 14 54  Q.[.......7..R.T
  C880: 20 78 1A 54 00 80 1A 3D 65 00 01 49 9A 00 4A 25   x.T...=e..I..J%
  C890: 01 1A 03 44 59 00 0D 25 7E 1A 07 01 25 7F 1A 01  ...DY..%~...%...
  C8A0: 51 01 4A 25 7F 1A 02 44 2C 00 54 20 7F 1A 54 08  Q.J%...D,.T ..T.
  C8B0: 81 1A 54 08 82 1A 54 08 83 1A 01 0D 84 1A FF FF  ..T...T.........
  C8C0: 01 0D 85 1A FF FF 01 0D 86 1A FF FF 5B 54 00 79  ............[T.y
  C8D0: 1A 66 05 2D 0D 42 04 00 56 00 41 03 24 40 00 00  .f.-.B..V.A.$@..
  C8E0: 15 05 40 0A 03 24 40 01 00 15 05 40 0A 03 24 40  ..@..$@....@..$@
  C8F0: 02 00 15 05 40 04 01 02 7C 1A 40 2D 0D 42 03 00  ....@...|.@-.B..
  C900: 2D 0D 41 01 00 3E 0D 41 00 01 45 67 00 5B 01 31  -.A..>.A..Eg.[.1
  C910: 79 1A 00 56 00 41 03 19 41 01 3B 02 41 3D 65 00  y..V.A..A.;.A=e.
  C920: 02 49 BC 00 03 00 40 7C 1A 04 02 00 40 43 C5 00  .I....@|....@C..
  C930: 03 03 40 00 01 02 7C 1A 40 2D 05 46 04 00 00 00  ..@...|.@-.F....
  C940: 2D 8D 41 01 00 3E 89 41 01 45 A9 00 5B 00 85 00  -.A..>.A.E..[...
  C950: 01 01 00 04 01 05 82 00 8C 00 50 C0 56 00 40 03  ..........P.V.@.
  C960: 20 40 83 00 66 FF 2D 0D 42 5D 00 3E 0C 40 02 00   @..f.-.B].>.@..
  C970: 47 2D 00 2D 0D 42 08 00 43 1D 00 33 0C 40 04 00  G-.-.B..C..3.@..
  C980: 21 0C 40 06 00 2D 0C 40 00 00 56 18 40 03 02 46  !.@..-.@..V.@..F
  C990: 40 66 1E 02 04 00 08 00 20 05 00 64 00 00 00 27  @f...... ..d...'
  C9A0: 02 40 46 02 02 00 40 5B 7A 28 00 64 00 00 00 00  .@F...@[z(.d....
  C9B0: 00 00 00 FF FF 07 00 01 00 00 00 C8 00 3F 00 08  .............?..
  C9C0: 00 19 00 40 06 5F 00 40 00 32 00 80 0C 7F 00 60  ...@._.@.2.....`
  C9D0: 00 64 00 00 4B 01 02 03 00 18 37 00 00 66 FF 2D  .d..K.....7..f.-
  C9E0: 0D 42 3F 01 55 28 05 2D 09 42 05 2D 09 42 05 03  .B?.U(.-.B.-.B..
  C9F0: 0C 48 00 00 03 09 41 03 2D 19 41 03 3E 0D 41 03  .H....A.-.A.>.A.
  CA00: 00 46 3B 00 5C 8D B3 1B F0 EF 03 00 43 43 00 5C  .F;.\.......CC.\
  CA10: 8D B3 1B F0 FF 04 10 03 09 41 00 2D 19 41 00 33  .........A.-.A.3
  CA20: 0D 41 01 00 01 0A 80 1B 41 54 08 82 1B 01 99 82  .A......AT......
  CA30: 1B 02 03 19 41 00 33 09 41 02 56 18 41 03 B1 41  ....A.3.A.V.A..A
  CA40: 04 33 1A 41 41 01 8A 81 1B 41 03 19 41 00 33 09  .3.AA....A..A.3.
  CA50: 41 02 2D 1A 41 41 2D 09 41 00 4B 25 04 10 44 91  A.-.AA-.A.K%..D.
  CA60: 00 2D 09 41 00 01 0A 81 1B 41 03 21 41 04 09 25  .-.A.....A.!A..%
  CA70: 41 02 1B 25 41 01 01 22 83 1B 41 54 00 5E 1B 01  A..%A.."..AT.^..
  CA80: 31 5E 1B 04 01 B1 5E 1B 04 03 09 41 01 2D 19 41  1^....^....A.-.A
  CA90: 01 33 0D 41 01 00 01 0A 87 1B 41 54 08 8E 1B 01  .3.A......AT....
  CAA0: 99 8E 1B 03 03 19 41 01 33 09 41 03 56 18 41 03  ......A.3.A.V.A.
  CAB0: B9 41 04 33 1A 41 41 01 8A 8D 1B 41 03 19 41 01  .A.3.AA....A..A.
  CAC0: 33 09 41 03 2D 1A 41 41 2D 09 41 01 4B 25 04 20  3.A.-.AA-.A.K%. 
  CAD0: 44 03 01 2D 09 41 01 01 0A 8D 1B 41 03 21 41 04  D..-.A.....A.!A.
  CAE0: 09 25 41 04 1B 25 41 02 01 22 8F 1B 41 54 00 5F  .%A..%A.."..AT._
  CAF0: 1B 01 39 5F 1B 04 01 B9 5F 1B 04 03 21 41 04 09  ..9_...._...!A..
  CB00: 25 41 80 1B 25 41 07 01 22 9E 1B 41 3A 00 00 5B  %A..%A.."..A:..[
  CB10: 7A 0C 00 00 00 00 03 00 26 00 29 00 2C 00 2F 00  z.......&.).,./.
  CB20: AF 07 02 03 08 00 37 00 00 56 00 00 03 09 00 00  ......7..V......
  CB30: 02 0D 00 23 21 4B A5 00 10 44 21 00 02 0D 00 23  ...#!K...D!....#
  CB40: 22 52 49 3E 0D 42 00 00 44 C3 05 03 0C 41 04 00  "RI>.B..D....A..
  CB50: 3E 25 41 00 44 C3 05 3E 25 41 15 44 C3 05 42 39  >%A.D..>%A.D..B9
  CB60: 00 63 07 83 02 63 05 FC 00 63 06 FC 00 63 12 2C  .c...c...c...c.,
  CB70: 02 63 01 5C 00 63 00 76 00 5A 5A 5B 4B A5 00 10  .c.\.c.v.ZZ[K...
  CB80: 44 C3 05 4A A5 CB 05 01 49 76 00 07 E5 1D 19 FE  D..J....Iv......
  CB90: 0D E5 19 19 03 5B 4B A5 00 10 44 C3 05 03 0C 41  .....[K...D....A
  CBA0: 01 00 66 FF 2D 0D 42 93 07 3E 0C 41 00 00 44 99  ..f.-.B..>.A..D.
  CBB0: 00 2D 0D 42 04 00 43 89 00 03 0C 48 02 00 4A 25  .-.B..C....H..J%
  CBC0: 51 1C 01 44 C3 05 03 0D 41 01 00 66 FF 2D 0D 42  Q..D....A..f.-.B
  CBD0: 93 07 4A 62 50 1C 41 49 CD 00 15 25 41 01 2D 0D  ..JbP.AI...%A.-.
  CBE0: 42 04 00 3E 25 41 80 49 B2 00 43 E2 00 03 0C 48  B..>%A.I..C....H
  CBF0: 02 00 54 08 C3 1C 51 C8 0D 25 C4 1C 01 51 32 56  ..T...Q..%...Q2V
  CC00: 08 48 03 25 01 03 03 05 00 01 BC FF 00 43 3E 01  .H.%.........C>.
  CC10: 4C A5 41 02 44 C3 05 50 01 43 E2 00 56 20 01 03  L.A.D..P.C..V ..
  CC20: 05 00 00 F3 FE 01 3D E5 00 05 44 3E 01 03 8D 00  ......=...D>....
  CC30: FE 00 43 3E 01 66 06 03 24 41 28 00 4C 25 41 01  ..C>.f..$A(.L%A.
  CC40: 44 C3 05 03 25 01 01 03 05 00 00 F4 FB 04 3D E5  D...%.........=.
  CC50: 00 05 44 3E 01 03 8D 00 FB 00 43 3E 01 5B 56 28  ..D>......C>.[V(
  CC60: 01 03 99 01 00 3B 05 00 4C 00 00 04 05 00 F0 05  .....;..L.......
  CC70: 80 61 57 00 01 04 0A 01 00 02 21 01 00 02 E9 01  .aW.......!.....
  CC80: 00 02 05 00 00 4C 00 00 55 10 01 52 4E 3D 65 01  .....L..U..RN=e.
  CC90: 00 44 84 01 51 C8 51 C8 2D 65 01 01 3E 65 01 0C  .D..Q.Q.-e..>e..
  CCA0: 45 61 01 5B 56 28 01 3B 05 00 4C 00 00 04 05 00  Ea.[V(.;..L.....
  CCB0: F2 05 90 40 02 05 00 00 4C 04 4C 55 10 01 52 4E  ...@....L.LU..RN
  CCC0: 3D 65 01 00 44 B3 01 2D 65 01 01 3E 65 01 06 45  =e..D..-e..>e..E
  CCD0: 87 01 5B 56 00 41 3B 05 04 4C 00 00 03 A3 41 00  ..[V.A;..L....A.
  CCE0: 3E A5 00 FF 44 06 02 09 B2 41 00 0F BA 41 00 03  >...D....A...A..
  CCF0: 0A 41 00 3B 05 00 4C 00 00 04 05 00 F0 05 80 72  .A.;..L........r
  CD00: 04 02 01 41 56 28 01 02 05 00 00 4C 00 00 55 10  ...AV(.....L..U.
  CD10: 01 52 4E 3D 65 01 00 44 06 02 2D 65 01 01 3E 65  .RN=e..D..-e..>e
  CD20: 01 06 45 E7 01 5B 02 9A 00 01 02 21 00 01 02 79  ..E..[.....!...y
  CD30: 00 01 42 22 01 63 00 15 01 63 01 3D 01 63 02 B8  ..B".c...c.=.c..
  CD40: 02 63 03 F0 00 63 04 CD 02 5A 5A 5B 07 25 C9 05  .c...c...ZZ[.%..
  CD50: FC 56 30 00 3B 05 00 4C 00 00 04 05 00 00 02 90  .V0.;..L........
  CD60: 40 02 21 01 00 02 E9 01 00 02 05 00 00 4C 04 4C  @.!..........L.L
  CD70: 55 10 01 52 4E 3D 65 01 00 44 6C 02 51 C8 51 C8  U..RN=e..Dl.Q.Q.
  CD80: 2D A5 00 01 3E A5 00 06 45 34 02 5B 3B 05 04 4C  -...>...E4.[;..L
  CD90: 00 00 0A 25 00 3F 3F 25 00 00 44 82 02 0D 25 C9  ...%.??%..D...%.
  CDA0: 05 02 5B 56 00 41 03 21 41 00 09 25 41 0F 15 0D  ..[V.A.!A..%A...
  CDB0: 41 01 66 FF 2D 0D 42 C7 05 2D 0A 42 41 03 0C 48  A.f.-.B..-.BA..H
  CDC0: 00 00 07 A5 80 18 FB 56 08 48 03 25 01 02 03 05  .......V.H.%....
  CDD0: 00 00 02 FF 00 43 3E 01 3E A5 41 20 49 DE 02 03  .....C>.>.A I...
  CDE0: 25 01 04 03 05 00 00 03 FF 00 43 3E 01 3E A5 41  %.........C>.>.A
  CDF0: 31 49 DE 02 66 FF 2D 0D 42 CF 06 43 F1 02 66 FF  1I..f.-.B..C..f.
  CE00: 2D 0D 42 D3 05 4B A5 00 10 44 F1 02 2D 0D 42 40  -.B..K...D..-.B@
  CE10: 00 03 05 41 80 4C 00 00 3B 02 41 04 04 00 00 00  ...A.L..;.A.....
  CE20: 2D 0D 42 04 00 2D 05 41 04 00 00 00 3F 05 00 FF  -.B..-.A....?...
  CE30: FF FF FF 49 F8 02 4B A5 00 10 44 5C 05 02 05 01  ...I..K...D\....
  CE40: 06 00 00 00 56 00 41 66 1A 03 0C 41 00 00 2D 0A  ....V.Af...A..-.
  CE50: 41 42 2D 0D 42 04 00 3D 24 01 08 00 44 53 03 2D  AB-.B..=$...DS.-
  CE60: 0D 42 0C 00 3E 0A 42 41 49 37 03 03 0D 41 00 00  .B..>.BAI7...A..
  CE70: 43 2C 04 03 0C 41 04 00 3E 0D 41 00 00 44 2C 04  C,...A..>.A..D,.
  CE80: 02 0C 01 06 00 03 02 46 41 26 05 01 64 00 00 00  .......FA&..d...
  CE90: 03 02 01 40 21 02 46 01 02 02 01 40 21 02 40 46  ...@!.F....@!.@F
  CEA0: 21 05 40 00 04 00 00 27 05 40 7D 01 00 00 03 02  !.@....'.@}.....
  CEB0: 46 40 20 05 01 00 00 08 00 27 05 40 71 02 00 00  F@ ......'.@q...
  CEC0: 21 05 40 10 00 00 00 2D 02 46 40 03 02 41 46 66  !.@....-.F@..AFf
  CED0: 06 55 00 01 02 0C 01 04 00 20 05 01 30 02 00 00  .U....... ..0...
  CEE0: 3D 0D 01 97 06 47 F0 03 1B 05 40 01 3D 0D 01 2F  =....G....@.=../
  CEF0: 0D 47 F0 03 1B 05 40 01 3D 0D 01 5E 1A 47 F0 03  .G....@.=..^.G..
  CF00: 1B 05 40 01 3D 0D 01 BC 34 47 F0 03 1B 05 40 01  ..@.=...4G....@.
  CF10: 03 02 00 40 3B 05 E8 4C 00 00 27 02 41 00 04 A2  ...@;..L..'.A...
  CF20: 00 40 3B 05 EC 4C 00 00 15 05 01 09 27 02 00 01  .@;..L......'...
  CF30: 0F 25 40 80 04 A2 00 40 3B 05 18 4D 00 00 04 A5  .%@....@;..M....
  CF40: 00 00 3B 05 20 4D 00 00 04 A5 00 02 3B 05 F0 4C  ..;. M......;..L
  CF50: 00 00 66 06 03 E4 41 28 00 4C E5 41 01 49 44 04  ..f...A(.L.A.ID.
  CF60: 04 A5 00 00 3B 05 1C 4D 00 00 66 06 03 E4 41 28  ....;..M..f...A(
  CF70: 00 4C E5 41 01 49 5C 04 04 A5 00 3C 3B 05 A4 4C  .L.A.I\....<;..L
  CF80: 00 00 66 06 03 E4 41 28 00 4C E5 41 02 44 7F 04  ..f...A(.L.A.D..
  CF90: 04 A5 00 46 4C E5 41 10 49 7F 04 04 A5 00 4A 3B  ...FL.A.I.....J;
  CFA0: 05 20 4D 00 00 66 06 03 E4 41 28 00 4C E5 41 20  . M..f...A(.L.A 
  CFB0: 49 97 04 10 A5 00 04 66 06 03 24 41 34 00 3B 05  I......f..$A4.;.
  CFC0: C4 4C 00 00 04 A2 00 41 03 24 41 35 00 3B 05 C8  .L.....A.$A5.;..
  CFD0: 4C 00 00 04 A2 00 41 03 24 41 39 00 3B 05 CC 4C  L.....A.$A9.;..L
  CFE0: 00 00 04 A2 00 41 03 24 41 37 00 3B 05 D0 4C 00  .....A.$A7.;..L.
  CFF0: 00 04 A2 00 41 03 24 41 36 00 3B 05 D4 4C 00 00  ....A.$A6.;..L..
  D000: 04 A2 00 41 03 24 41 3A 00 3B 05 D8 4C 00 00 04  ...A.$A:.;..L...
  D010: A2 00 41 03 24 41 38 00 3B 05 DC 4C 00 00 04 A2  ..A.$A8.;..L....
  D020: 00 41 3B 05 A8 4C 00 00 66 1E 03 E4 41 36 01 4C  .A;..L..f...A6.L
  D030: E5 41 02 44 2E 05 04 A5 00 67 04 A5 01 89 04 A5  .A.D.....g......
  D040: 02 AB 04 A5 03 01 04 A5 04 23 04 A5 05 45 3B 05  .........#...E;.
  D050: C0 4C 00 00 66 1E 03 E4 41 36 01 4C E5 41 20 44  .L..f...A6.L.A D
  D060: 4B 05 03 E4 41 37 01 04 BA 00 41 3B 05 08 4D 00  K...A7....A;..M.
  D070: 00 4C E5 41 10 44 5C 05 04 A5 00 80 03 05 00 80  .L.A.D\.........
  D080: 4C 00 00 02 21 01 00 02 E9 01 00 56 00 41 03 0A  L...!......V.A..
  D090: 41 00 3B 02 41 03 03 41 00 3E 05 41 FF FF FF FF  A.;.A..A.>.A....
  D0A0: 44 C2 05 3B 05 00 4C 00 00 04 05 01 F0 05 80 72  D..;..L........r
  D0B0: 04 02 02 41 02 05 00 04 4C 00 00 55 10 01 52 4E  ...A....L..U..RN
  D0C0: 3D 65 01 00 44 B7 05 51 C8 51 C8 2D A5 00 01 3E  =e..D..Q.Q.-...>
  D0D0: A5 00 07 45 6B 05 5B 2D 0D 00 04 00 56 18 00 43  ...Ek.[-....V..C
  D0E0: 6B 05 5B 5B 7A E8 01 00 00 14 00 28 00 40 00 54  k.[[z......(.@.T
  D0F0: 00 68 00 00 05 3D 00 00 1F 01 00 00 BA 00 00 00  .h...=..........
  D100: BB 08 00 00 B1 4B 00 01 73 69 00 01 9F 26 00 00  .....K..si...&..
  D110: 19 33 00 00 89 39 00 01 9E 05 00 01 CB 80 00 00  .3...9..........
  D120: 16 44 00 00 F1 20 00 00 DC 00 00 00 DD 00 00 FF  .D... ..........
  D130: FF FF FF 00 05 3D 00 00 1F 03 00 00 BA 00 00 00  .....=..........
  D140: BB 08 00 00 B1 4B 00 01 73 69 00 01 9F 24 00 00  .....K..si...$..
  D150: 19 33 00 00 89 39 00 00 F8 42 00 00 F9 01 00 00  .3...9...B......
  D160: FA 23 00 00 FB 45 00 00 FC 67 00 00 FD 89 00 00  .#...E...g......
  D170: FE AB 00 00 1D 25 00 01 C3 07 00 01 C2 5A 00 01  .....%.......Z..
  D180: C4 00 00 01 C0 07 00 01 C1 5A 00 01 B1 00 00 01  .........Z......
  D190: BF 7D 00 01 B5 63 00 01 CB 80 00 01 B3 00 00 01  .}...c..........
  D1A0: B2 00 00 00 9F 10 00 01 83 14 00 00 A7 C2 00 01  ................
  D1B0: 71 12 00 01 82 5D 00 01 89 24 00 01 BE 01 00 00  q....]...$......
  D1C0: 8A 53 00 00 0A 01 00 01 D4 10 00 00 F3 40 00 00  .S...........@..
  D1D0: F4 00 00 01 B4 00 00 00 DC 00 00 00 DD 00 00 01  ................
  D1E0: 91 20 00 00 D1 06 00 00 D6 01 00 FF FF FF FF 00  . ..............
  D1F0: 05 3D 00 00 1F 03 00 00 BA 00 00 00 BB 08 00 00  .=..............
  D200: B1 4B 00 01 73 69 00 01 9F 24 00 00 19 33 00 00  .K..si...$...3..
  D210: 89 39 00 00 F8 42 00 00 F9 01 00 00 FA 23 00 00  .9...B.......#..
  D220: FB 45 00 00 FC 67 00 00 FD 89 00 00 FE AB 00 00  .E...g..........
  D230: 1D 25 00 01 C3 07 00 01 C2 5A 00 01 C4 00 00 01  .%.......Z......
  D240: C0 07 00 01 C1 5A 00 01 B1 00 00 01 BF 7D 00 01  .....Z.......}..
  D250: B5 63 00 01 CB 80 00 01 B3 00 00 01 B2 00 00 00  .c..............
  D260: 9F 10 00 01 83 14 00 00 A7 C2 00 01 71 12 00 01  ............q...
  D270: 82 5D 00 01 89 28 00 01 BE 01 00 00 8A 53 00 00  .]...(.......S..
  D280: 0A 01 00 01 D4 10 00 00 F3 40 00 00 F4 00 00 01  .........@......
  D290: B4 00 00 00 DC 00 00 00 DD 00 00 01 91 20 00 00  ............. ..
  D2A0: D1 06 00 00 D6 01 00 01 D2 08 00 01 D3 80 00 FF  ................
  D2B0: FF FF FF 1E 21 00 00 1E 22 00 03 20 21 00 26 20  ....!...".. !.& 
  D2C0: 22 00 29 21 21 00 2C 21 22 00 2F 25 21 00 32 00  ".)!!.,!"./%!.2.
  D2D0: 26 01 01 01 08 04 37 00 00 03 00 41 C4 00 1B 05  &.....7....A....
  D2E0: 41 08 03 E0 41 C9 00 56 00 40 03 09 40 00 15 05  A...A..V.@..@...
  D2F0: 40 05 2D 02 40 41 02 3A 00 40 15 05 40 08 3B 05  @.-.@A.:.@..@.;.
  D300: 00 17 00 00 57 00 00 66 0B 03 05 00 00 17 00 00  ....W..f........
  D310: 1B 05 00 08 2D 02 41 00 03 04 00 04 00 15 05 00  ....-.A.........
  D320: 02 2D 02 41 00 02 7A 00 41 15 05 41 08 03 02 46  .-.A..z.A..A...F
  D330: 41 56 00 00 03 19 00 00 15 05 00 0D 56 00 01 4A  AV..........V..J
  D340: 25 15 31 01 44 93 00 4A 25 3A 31 02 49 93 00 03  %.1.D..J%:1.I...
  D350: 25 01 01 01 05 3A 31 03 00 00 00 4A 25 3A 31 01  %....:1....J%:1.
  D360: 49 8B 00 54 00 63 C0 51 C8 4A E5 A0 21 80 49 97  I..T.c.Q.J..!.I.
  D370: 00 3E 05 00 00 00 00 00 44 FE 00 03 05 41 00 00  .>......D....A..
  D380: 10 00 3E 02 00 41 46 BD 00 03 02 41 00 33 02 00  ..>..AF....A.3..
  D390: 41 01 02 64 C0 46 01 29 65 C0 00 01 02 66 C0 40  A..d.F.)e....f.@
  D3A0: 01 21 67 C0 00 1B 05 40 08 03 E1 40 00 1B 05 41  .!g....@...@...A
  D3B0: 08 2D 02 40 41 15 05 41 08 02 3A 00 40 15 05 40  .-.@A..A..:.@..@
  D3C0: 08 0F 8D 41 20 D0 01 02 E8 C0 41 43 97 00 01 05  ...A .....AC....
  D3D0: 12 00 00 00 01 00 01 05 13 00 00 00 01 00 3E 25  ..............>%
  D3E0: 01 01 49 25 01 01 05 3A 31 01 00 00 00 4A 25 3A  ..I%...:1....J%:
  D3F0: 31 01 49 1D 01 5B 39 02 01 01 00 08 37 00 00 0D  1.I..[9.....7...
  D400: 25 34 18 08 07 25 07 19 FD 56 00 41 03 39 41 01  %4...%...V.A.9A.
  D410: 09 25 41 0F 03 0A 40 42 66 FF 2D 0D 42 19 02 15  .%A...@Bf.-.B...
  D420: 25 41 02 2D 0A 42 41 03 0C 41 00 00 01 02 00 00  %A.-.BA..A......
  D430: 41 07 A5 01 00 FE 54 08 01 00 01 0C 3B 18 02 00  A.....T.....;...
  D440: 03 0A 42 40 03 05 40 C0 5D 00 00 56 00 41 03 21  ..B@..@.]..V.A.!
  D450: 41 00 27 02 40 41 01 8A 37 18 40 01 25 37 18 02  A.'.@A..7.@.%7..
  D460: 01 05 38 18 00 00 00 30 0D 25 35 18 02 01 A9 39  ..8....0.%5....9
  D470: 18 01 4B 25 01 01 49 87 00 54 30 39 18 01 0D 39  ..K%..I..T09...9
  D480: 18 00 31 2B A5 39 18 01 4B 25 01 02 44 9E 00 2B  ..1+.9..K%..D..+
  D490: A5 39 18 01 56 00 41 03 71 41 01 0F E5 41 80 01  .9..V.A.qA...A..
  D4A0: 02 3A 18 41 03 69 41 00 2D A5 41 01 01 02 3A 18  .:.A.iA.-.A...:.
  D4B0: 41 4B 25 01 02 44 CE 00 56 28 41 2D A5 41 01 01  AK%..D..V(A-.A..
  D4C0: 02 3A 18 41 4B 25 01 01 44 EF 00 03 71 41 00 2D  .:.AK%..D...qA.-
  D4D0: A5 41 01 01 02 3A 18 41 03 79 41 00 2D A5 41 01  .A...:.A.yA.-.A.
  D4E0: 01 02 3A 18 41 0D 25 34 18 01 03 A5 41 01 43 C2  ..:.A.%4....A.C.
  D4F0: 01 03 29 40 01 03 65 40 01 03 99 40 00 56 00 41  ..)@..e@...@.V.A
  D500: 03 71 41 01 0F 65 41 01 0F E5 41 80 01 02 3A 18  .qA..eA...A...:.
  D510: 41 01 A5 39 18 04 3D 65 01 04 47 30 01 01 0D 39  A..9..=e..G0...9
  D520: 18 01 13 43 5F 01 01 A2 39 18 40 01 0D 39 18 01  ...C_...9.@..9..
  D530: 31 43 5F 01 07 65 39 18 EF 01 A5 39 18 03 3E 25  1C_..e9....9..>%
  D540: 40 04 46 5F 01 01 A2 39 18 40 31 A5 39 18 01 5C  @.F_...9.@1.9..\
  D550: 65 39 18 FD 20 0D 25 34 18 01 03 A5 41 00 43 C2  e9.. .%4....A.C.
  D560: 01 03 05 41 01 00 00 80 03 AA 41 40 01 02 3A 18  ...A......A@..:.
  D570: 41 3D 65 01 01 49 8A 01 02 A8 00 3A 18 43 01 02  A=e..I.....:.C..
  D580: 56 00 41 03 1A 41 40 3B 02 41 03 28 41 3A 18 03  V.A..A@;.A.(A:..
  D590: 68 41 3A 18 03 A8 41 3A 18 03 E8 41 3A 18 04 02  hA:...A:...A:...
  D5A0: 00 41 56 28 40 2D 8D 40 04 00 3E 25 40 04 47 01  .AV(@-.@..>%@.G.
  D5B0: 02 33 25 40 04 43 3E 01 02 65 00 02 03 0D 41 64  .3%@.C>..e....Ad
  D5C0: 00 33 0D 41 01 00 3E 0D 41 00 00 44 01 02 51 64  .3.A..>.A..D..Qd
  D5D0: 4A 25 36 18 10 44 CB 01 4A 65 36 18 06 49 01 02  J%6..D..Je6..I..
  D5E0: 02 65 00 01 0D 25 35 18 02 3E A5 41 00 44 6B 01  .e...%5..>.A.Dk.
  D5F0: 4B 25 01 01 44 FB 00 0D 25 35 18 02 01 25 34 18  K%..D...%5...%4.
  D600: 02 51 01 54 00 34 18 54 00 3B 18 5B 7A 20 00 4C  .Q.T.4.T.;.[z .L
  D610: 19 01 00 50 19 03 02 54 19 05 04 58 19 42 41 5C  ...P...T...X.BA\
  D620: 19 49 48 60 19 4B 4A 74 19 29 28 70 19 4D 4C 00  .IH`.KJt.)(p.ML.
  D630: 6A 00 02 02 00 04 37 00 00 3D 65 00 01 44 54 00  j.....7..=e..DT.
  D640: 55 30 00 3D 25 00 06 46 50 00 32 25 00 01 20 25  U0.=%..FP.2%.. %
  D650: 00 03 56 08 48 03 22 48 40 0D A5 08 18 01 02 A0  ..V.H."H@.......
  D660: 00 07 18 08 A5 00 03 4A 25 07 18 02 44 4A 00 5C  .......J%...DJ.\
  D670: 0D 08 18 FF FE 01 00 43 50 00 0D 0D 08 18 01 01  .......CP.......
  D680: 3A 00 00 5B 0D 65 CF 05 08 01 05 B5 00 01 00 00  :..[.e..........
  D690: 00 3C 25 B6 00 00 44 61 00 5B D3 00 01 04 00 08  .<%...Da.[......
  D6A0: 08 05 00 FF FF FF 00 66 1E 03 04 46 08 00 03 05  .......f...F....
  D6B0: 40 38 18 00 00 3D 05 00 00 00 00 00 44 5D 00 21  @8...=......D].!
  D6C0: 05 46 64 00 00 00 2D 01 40 00 33 05 40 01 00 00  .Fd...-.@.3.@...
  D6D0: 00 27 01 40 00 3E 05 40 38 18 00 00 45 4C 00 03  .'.@.>.@8...EL..
  D6E0: 05 40 38 18 00 00 3E 05 40 C8 00 00 00 46 5D 00  .@8...>.@....F].
  D6F0: 03 05 40 C8 00 00 00 66 FF 2D 0D 42 BB 00 3E 0C  ..@....f.-.B..>.
  D700: 40 02 00 47 74 00 2D 0D 42 08 00 43 64 00 33 0C  @..Gt.-.B..Cd.3.
  D710: 40 00 00 2D 0C 40 06 00 33 0D 40 01 00 27 0C 40  @..-.@..3.@..'.@
  D720: 06 00 2D 0C 40 04 00 02 E2 00 40 33 0C 40 04 00  ..-.@.....@3.@..
  D730: 21 0C 40 06 00 2D 0C 40 00 00 03 02 41 40 21 05  !.@..-.@....A@!.
  D740: 46 64 00 00 00 27 02 40 41 02 0A 00 40 02 B2 00  Fd...'.@A...@...
  D750: 40 5B 7A 18 00 C8 00 40 06 08 00 19 00 40 06 80  @[z....@.....@..
  D760: 0C 40 00 32 00 80 0C 38 18 60 00 64 00 00 74 00  .@.2...8.`.d..t.
  D770: 01 03 00 08 37 00 00 3A 14 00 4B A5 00 0C 44 20  ....7..:..K...D 
  D780: 00 3A 28 00 4B A5 00 04 49 20 00 3A 00 00 3D E5  .:(.K...I .:..=.
  D790: 00 01 44 3D 00 07 65 04 17 EF 3C 0D 05 17 00 00  ..D=..e...<.....
  D7A0: 49 70 00 07 A5 05 17 FC 43 70 00 4A 65 04 17 10  Ip......Cp.Je...
  D7B0: 49 70 00 07 25 07 17 F7 5C A5 05 17 FC 01 4B A5  Ip..%...\.....K.
  D7C0: 00 01 49 5B 00 0E 65 01 20 0E 65 01 10 01 09 03  ..I[..e. .e.....
  D7D0: 17 00 01 01 04 17 01 50 01 0D 25 07 17 08 3A 00  .......P..%...:.
  D7E0: 00 5B BD 00 02 01 00 04 03 09 40 00 02 0D 00 00  .[........@.....
  D7F0: FF 66 16 03 0A 41 40 1B 0D 41 0C 3E 25 41 02 44  .f...A@..A.>%A.D
  D800: 2F 00 3E 25 41 03 49 B9 00 2D 0C 42 06 00 43 34  /.>%A.I..-.B..C4
  D810: 00 2D 0C 42 0A 00 03 24 41 00 00 3E 25 41 00 44  .-.B...$A..>%A.D
  D820: B9 00 3E 0C 40 04 00 44 54 00 2D 0D 42 08 00 33  ..>.@..DT.-.B..3
  D830: 25 41 01 43 39 00 03 0C 40 06 00 03 0C 41 08 00  %A.C9...@....A..
  D840: 66 16 2D 0A 40 42 3E 0D 41 00 00 44 A7 00 2D 0A  f.-.@B>.A..D..-.
  D850: 42 41 56 00 41 03 24 41 00 00 03 A4 41 01 00 3E  BAV.A.$A....A..>
  D860: 25 41 FF 44 A7 00 3E 25 41 01 49 90 00 02 24 00  %A.D..>%A.I...$.
  D870: 02 00 3E 25 41 02 49 A0 00 02 64 00 02 00 32 65  ..>%A.I...d...2e
  D880: 00 01 2D 1A 42 41 43 73 00 03 0A 42 40 03 0C 41  ..-.BACs...B@..A
  D890: 01 00 3E 0D 41 00 00 44 B9 00 5B 56 08 42 5B 00  ..>.A..D..[V.B[.
  D8A0: 89 00 01 03 00 08 03 99 41 00 03 21 41 01 55 18  ........A..!A.U.
  D8B0: 00 55 08 01 42 32 41 63 14 2A 00 63 1E 3D 00 63  .U..B2Ac.*.c.=.c
  D8C0: 20 3D 00 63 21 3D 00 5A 5A 5B 4C 25 41 01 49 88   =.c!=.ZZ[L%A.I.
  D8D0: 00 4C 25 41 08 49 88 00 14 0D 00 01 5B 3E E5 41  .L%A.I......[>.A
  D8E0: 00 49 4F 00 02 0D 00 10 27 02 0D 01 01 0C 5B 3E  .IO.....'.....[>
  D8F0: E5 41 01 44 75 00 4C 25 41 40 44 88 00 03 05 40  .A.Du.L%A@D....@
  D900: C0 D4 01 00 27 01 40 00 15 25 40 01 02 62 01 40  ....'.@..%@..b.@
  D910: 1A 05 00 01 5B 02 0D 01 01 00 66 06 03 E4 40 28  ....[.....f...@(
  D920: 00 4C E5 40 01 49 5D 00 5B 00 30 00 01 03 00 04  .L.@.I].[.0.....
  D930: 37 00 00 3D 0D 00 01 00 49 2F 00 56 00 41 03 19  7..=....I/.V.A..
  D940: 41 00 15 05 41 02 01 02 A4 00 41 01 0D 94 00 25  A...A.....A....%
  D950: 01 3C 25 95 00 00 44 27 00 5B CA 01 01 04 00 04  .<%...D'.[......
  D960: 37 00 00 03 01 46 01 02 31 01 00 1A 25 01 04 03  7....F..1...%...
  D970: 21 41 01 52 14 02 02 01 46 42 39 00 63 0F 4B 00  !A.R....FB9.c.K.
  D980: 63 08 79 01 63 09 62 01 63 0A 69 01 63 13 71 01  c.y.c.b.c.i.c.q.
  D990: 63 0B 81 01 63 0C 89 01 63 0D 99 01 63 10 B2 01  c...c...c...c...
  D9A0: 5A 5A 43 5E 01 54 00 83 1C 3D 25 01 01 44 0C 01  ZZC^.T...=%..D..
  D9B0: 01 0D 03 1C 1F 00 3D 25 01 00 44 71 00 3D 25 01  ......=%..Dq.=%.
  D9C0: 02 44 FB 00 3D 25 01 05 49 03 01 07 A5 00 1C FE  .D..=%..I.......
  D9D0: 54 08 C1 1C 3D A5 01 00 49 85 00 02 A5 01 02 32  T...=...I......2
  D9E0: A5 01 01 01 F1 C1 1C 01 4A 25 C3 1C 01 49 E3 00  ........J%...I..
  D9F0: 66 FF 2D 0D 42 C2 01 03 31 41 00 09 05 41 03 00  f.-.B...1A...A..
  DA00: 00 00 2D 0A 42 41 2D 0A 42 41 03 0C 41 00 00 07  ..-.BA-.BA..A...
  DA10: 65 C9 1C FE 01 05 CA 1C 00 80 00 00 56 00 40 03  e...........V.@.
  DA20: 09 40 00 21 05 40 00 80 00 00 27 02 40 41 01 02  .@.!.@....'.@A..
  DA30: CB 1C 40 0D E5 CC 1C 10 0D 65 00 1C 04 02 20 01  ..@......e.... .
  DA40: 00 1C 08 25 01 07 52 14 15 2D 46 04 01 AA 9C 1B  ...%..R..-F.....
  DA50: 46 3A 00 00 5B 01 05 83 1C 01 00 00 00 07 0D 7C  F:..[..........|
  DA60: 1C EF FC 43 45 01 01 0D 03 1C 63 00 66 06 03 E4  ...CE.....c.f...
  DA70: 41 28 00 4C E5 41 20 44 36 01 0D 25 8C 1C 01 03  A(.L.A D6..%....
  DA80: E4 41 28 00 4C E5 41 02 44 36 01 0D 25 8C 1C 10  .A(.L.A.D6..%...
  DA90: 4C E5 41 01 44 54 01 0D 65 8C 1C 01 43 4C 01 3D  L.A.DT..e...CL.=
  DAA0: 65 01 04 47 54 01 0D A5 00 1C 01 43 59 01 07 A5  e..GT......CY...
  DAB0: 00 1C FE 0D 65 00 1C 04 3A 00 00 5B 54 20 D1 1C  ....e...:..[T ..
  DAC0: 43 5E 01 01 25 D1 1C 01 43 5E 01 01 25 D1 1C 02  C^..%...C^..%...
  DAD0: 43 5E 01 07 25 C0 1C EF 43 5E 01 0D 25 C0 1C 10  C^..%...C^..%...
  DAE0: 43 5E 01 54 08 C3 1C 51 C8 0D 25 C4 1C 01 51 32  C^.T...Q..%...Q2
  DAF0: 43 5E 01 0D 65 C9 1C 01 51 0A 07 25 C4 1C FE 51  C^..e...Q..%...Q
  DB00: 0A 01 0D C3 1C 01 02 51 C8 43 5E 01 0D 25 D5 1C  .......Q.C^..%..
  DB10: 10 01 21 DE 1C 01 43 5E 01 7A 08 00 48 3F 78 69  ..!...C^.z..H?xi
  DB20: F0 D2 90 7E 7E 04 01 01 04 00 37 00 00 4A A5 C9  ...~~.....7..J..
  DB30: 05 04 44 FA 03 66 06 03 24 00 42 00 3E 25 00 02  ..D..f..$.B.>%..
  DB40: 45 FA 03 02 0D 00 00 FF 03 0D 40 14 31 66 16 2D  E.........@.1f.-
  DB50: 0C 42 06 00 03 24 41 00 00 3E 25 41 00 44 B4 00  .B...$A..>%A.D..
  DB60: 3E 0C 40 04 00 44 50 00 2D 0D 42 08 00 33 25 41  >.@..DP.-.B..3%A
  DB70: 01 43 35 00 03 0C 40 06 00 03 0C 41 08 00 66 16  .C5...@....A..f.
  DB80: 2D 0A 40 42 3E 0D 41 00 00 44 A3 00 2D 0A 42 41  -.@B>.A..D..-.BA
  DB90: 56 00 41 03 24 41 00 00 03 A4 41 01 00 3E 25 41  V.A.$A....A..>%A
  DBA0: FF 44 A3 00 3E 25 41 01 49 8C 00 02 24 00 02 00  .D..>%A.I...$...
  DBB0: 3E 25 41 02 49 9C 00 02 64 00 02 00 32 65 00 01  >%A.I...d...2e..
  DBC0: 2D 1A 42 41 43 6F 00 03 0A 42 40 03 0C 41 01 00  -.BACo...B@..A..
  DBD0: 3E 0D 41 00 00 49 B8 00 56 08 42 5B 42 22 00 63  >.A..I..V.B[B".c
  DBE0: 02 C2 00 5A 5A 5B 3B 05 00 4C 00 00 03 01 00 00  ...ZZ[;..L......
  DBF0: 04 05 00 09 05 90 40 55 00 01 02 21 01 00 02 E9  ......@U...!....
  DC00: 01 00 02 05 00 00 4C 04 4C 52 4E 3D 65 02 00 44  ......L.LRN=e..D
  DC10: FC 00 51 90 2C E5 00 01 3D E5 00 06 45 DE 00 5B  ..Q.,...=...E..[
  DC20: 02 02 00 00 03 E5 40 01 3B 05 04 4C 00 00 3F 25  ......@.;..L..?%
  DC30: 00 04 44 15 01 03 E5 40 02 66 FF 2D 0D 42 3E 04  ..D....@.f.-.B>.
  DC40: 03 05 41 80 4C 00 00 3B 02 41 04 04 00 00 00 2D  ..A.L..;.A.....-
  DC50: 0D 42 04 00 2D 05 41 04 00 00 00 3F 05 00 FF FF  .B..-.A....?....
  DC60: FF FF 49 23 01 66 06 03 24 41 34 00 15 25 41 02  ..I#.f..$A4..%A.
  DC70: 3B 05 80 4C 00 00 04 62 00 41 56 00 41 03 24 41  ;..L...b.AV.A.$A
  DC80: 35 00 3B 05 84 4C 00 00 04 62 00 41 56 00 41 03  5.;..L...b.AV.A.
  DC90: 24 41 39 00 15 0D 41 02 3B 05 88 4C 00 00 04 62  $A9...A.;..L...b
  DCA0: 00 41 56 00 41 03 24 41 3A 00 15 0D 41 02 3B 05  .AV.A.$A:...A.;.
  DCB0: 8C 4C 00 00 04 62 00 41 56 00 41 03 24 41 36 00  .L...b.AV.A.$A6.
  DCC0: 3B 05 90 4C 00 00 04 62 00 41 03 24 41 37 00 15  ;..L...b.A.$A7..
  DCD0: 25 41 02 3B 05 94 4C 00 00 04 62 00 41 56 00 41  %A.;..L...b.AV.A
  DCE0: 03 24 41 38 00 3B 05 98 4C 00 00 04 62 00 41 56  .$A8.;..L...b.AV
  DCF0: 00 41 3E E5 40 01 49 D9 01 0F 25 41 08 66 06 03  .A>.@.I...%A.f..
  DD00: E4 41 28 00 4C E5 41 01 44 EB 01 0F 25 41 80 4C  .A(.L.A.D...%A.L
  DD10: E5 41 02 49 F6 01 0F 25 41 04 4C E5 41 20 44 01  .A.I...%A.L.A D.
  DD20: 02 0F 25 41 01 3B 05 A4 4C 00 00 04 62 00 41 02  ..%A.;..L...b.A.
  DD30: 05 01 06 00 00 00 56 00 41 66 1A 03 0C 41 00 00  ......V.Af...A..
  DD40: 2D 0A 41 42 2D 0D 42 04 00 3D 24 01 08 00 44 40  -.AB-.B..=$...D@
  DD50: 02 2D 0D 42 0C 00 3E 0A 42 41 49 25 02 03 25 41  .-.B..>.BAI%..%A
  DD60: 00 43 8A 03 03 8C 41 04 00 3E 8D 41 00 00 44 39  .C....A..>.A..D9
  DD70: 02 3E E5 40 01 49 C7 02 03 25 41 00 3E 8D 41 17  .>.@.I...%A.>.A.
  DD80: 00 45 34 03 03 25 41 01 3E 8D 41 47 00 45 34 03  .E4..%A.>.AG.E4.
  DD90: 03 25 41 02 3E 8D 41 7C 00 45 34 03 03 25 41 03  .%A.>.A|.E4..%A.
  DDA0: 3E 8D 41 AC 00 45 34 03 03 25 41 04 3E 8D 41 D3  >.A..E4..%A.>.A.
  DDB0: 00 45 34 03 03 25 41 05 3E 8D 41 10 01 45 34 03  .E4..%A.>.A..E4.
  DDC0: 03 25 41 06 3E 8D 41 4B 01 45 34 03 03 25 41 07  .%A.>.AK.E4..%A.
  DDD0: 3E 8D 41 71 01 45 34 03 03 25 41 08 3E 8D 41 AC  >.Aq.E4..%A.>.A.
  DDE0: 01 45 34 03 03 25 41 09 43 34 03 03 02 00 42 66  .E4..%A.C4....Bf
  DDF0: 06 55 00 01 02 0C 01 04 00 66 FF 2D 0D 42 FE 03  .U.......f.-.B..
  DE00: 3D 04 01 00 00 45 EC 02 2D 0D 42 08 00 43 DC 02  =....E..-.B..C..
  DE10: 03 24 41 04 00 3E 8D 41 28 00 45 2B 03 3E 8D 41  .$A..>.A(.E+.>.A
  DE20: 3C 00 45 2E 03 03 24 41 05 00 3E 8D 41 50 00 45  <.E...$A..>.AP.E
  DE30: 2B 03 3E 8D 41 78 00 45 2E 03 03 24 41 06 00 3E  +.>.Ax.E...$A..>
  DE40: 8D 41 78 00 45 2B 03 3E 8D 41 B4 00 45 2E 03 43  .Ax.E+.>.A..E..C
  DE50: 39 02 66 1A 03 02 42 00 3B 05 A0 4C 00 00 04 62  9.f...B.;..L...b
  DE60: 00 41 03 8C 41 06 00 03 25 41 00 3E 8D 41 AB 09  .A..A...%A.>.A..
  DE70: 45 6B 03 03 25 41 20 3E 8D 41 36 10 45 6B 03 03  Ek..%A >.A6.Ek..
  DE80: 25 41 40 3E 8D 41 A8 16 45 6B 03 03 25 41 60 0F  %A@>.A..Ek..%A`.
  DE90: 25 41 80 03 A4 41 09 00 4C A5 41 01 49 8A 03 0F  %A...A..L.A.I...
  DEA0: 25 41 10 3E E5 40 01 44 8A 03 09 25 41 7F 3B 05  %A.>.@.D...%A.;.
  DEB0: 9C 4C 00 00 04 62 00 41 03 05 00 80 4C 00 00 02  .L...b.A....L...
  DEC0: 21 01 00 02 E9 01 00 56 00 41 03 0A 41 00 3B 02  !......V.A..A.;.
  DED0: 41 03 03 41 00 3E 05 41 FF FF FF FF 44 FA 03 3B  A..A.>.A....D..;
  DEE0: 05 00 4C 00 00 04 05 01 F0 03 80 61 04 02 02 41  ..L........a...A
  DEF0: 02 05 00 04 4C 00 00 55 10 01 52 4E 3D 65 01 00  ....L..U..RN=e..
  DF00: 44 EF 03 51 C8 51 C8 2D A5 00 01 3E A5 00 07 45  D..Q.Q.-...>...E
  DF10: A3 03 5B 2D 0D 00 04 00 56 18 00 43 A3 03 5B 7A  ..[-....V..C..[z
  DF20: 80 00 AC 0D 00 00 0D 1A 27 00 94 11 00 00 08 10  ........'.......
  DF30: 18 00 7C 15 00 00 0A 14 1E 00 58 1B 00 00 0D 1A  ..|.......X.....
  DF40: 27 00 28 23 00 00 08 10 18 00 F8 2A 00 00 0A 14  '.(#.......*....
  DF50: 1E 00 4C 36 00 00 0D 1A 27 00 50 46 00 00 08 10  ..L6....'.PF....
  DF60: 18 00 01 1E 00 00 02 5A 00 00 03 00 00 00 04 00  .......Z........
  DF70: 00 00 05 5A 00 00 06 1E 00 00 07 7D 00 00 08 20  ...Z.......}... 
  DF80: 00 00 09 01 00 00 0A 0C 00 00 0B 00 00 00 0C 06  ................
  DF90: 00 00 0E 38 00 00 10 00 00 00 0D 01 00 00 FF FF  ...8............
  DFA0: FF FF 59 09 01 05 08 08 37 00 00 03 01 46 02 56  ..Y.....7....F.V
  DFB0: 18 46 03 B1 46 00 15 1D 46 04 56 00 00 03 31 00  .F..F...F.V...1.
  DFC0: 00 15 0D 00 03 42 39 00 63 07 92 05 63 01 57 00  .....B9.c...c.W.
  DFD0: 63 00 50 04 63 0B E9 05 63 03 BA 07 63 02 29 08  c.P.c...c...c.).
  DFE0: 63 04 4E 08 63 06 9D 07 63 05 97 07 63 0C DE 08  c.N.c...c...c...
  DFF0: 63 0D 01 09 5A 5A 43 8E 05 02 31 02 00 52 14 01  c...ZZC...1..R..
  E000: 62 50 1C 46 01 B1 50 1C 01 03 39 41 01 09 25 41  bP.F..P...9A..%A
  E010: 70 3E 25 41 00 44 7F 00 33 25 41 10 01 E2 50 1C  p>%A.D..3%A...P.
  E020: 41 3D A5 01 05 44 E2 00 3D A5 01 00 44 E2 00 3D  A=...D..=...D..=
  E030: A5 01 01 49 B5 00 02 25 01 04 4A A5 00 1C 01 44  ...I...%..J....D
  E040: AC 00 02 25 01 08 1A 0D 00 01 0E E5 01 02 01 0D  ...%............
  E050: 8D 1C 0F 00 43 04 01 3D 25 01 04 47 C1 00 0D A5  ....C..=%..G....
  E060: 00 1C 01 3D A5 01 03 49 D9 00 3D 0D 00 D0 39 45  ...=...I..=...9E
  E070: D9 00 01 0D 8D 1C 0F 00 43 04 01 01 0D 8D 1C 0F  ........C.......
  E080: 01 43 04 01 02 A5 01 00 0E E5 01 02 03 21 43 01  .C...........!C.
  E090: 03 02 40 44 33 25 40 01 32 25 01 01 01 21 C2 1C  ..@D3%@.2%...!..
  E0A0: 01 01 0A 8D 1C 40 03 1A 48 46 4A 25 86 19 01 49  .....@..HFJ%...I
  E0B0: 8E 05 66 FF 2D 0D 42 2D 09 56 00 40 20 A5 00 08  ..f.-.B-.V.@ ...
  E0C0: 2D 0A 42 40 07 A5 8A 19 FE 03 04 40 00 00 3D A5  -.B@.......@..=.
  E0D0: 01 01 49 3A 01 03 05 40 02 01 00 03 0D 25 8A 19  ..I:...@.....%..
  E0E0: 01 01 02 8E 19 40 01 64 8D 19 04 00 07 A5 8D 19  .....@.d........
  E0F0: FC 0D 64 87 19 05 00 3D 25 01 04 47 70 01 3E 1A  ..d....=%..Gp.>.
  E100: 48 46 49 70 01 2D 0D 48 10 00 0D A5 8A 19 01 43  HFIp.-.H.......C
  E110: 3A 01 03 1A 48 46 3D A5 01 00 44 18 02 66 07 2D  :...HF=...D..f.-
  E120: 0C 42 08 00 02 01 02 00 02 F1 02 01 52 1C 03 1A  .B..........R...
  E130: 48 46 01 04 80 19 04 00 01 04 81 19 08 00 01 04  HF..............
  E140: 82 19 0C 00 01 04 83 19 10 00 01 0C 8B 19 14 00  ................
  E150: 01 0C 8F 19 16 00 01 4C 84 19 18 00 03 0A 48 00  .......L......H.
  E160: 03 04 01 1A 00 09 05 01 FE FF FF 7F 0F 05 01 02  ................
  E170: 00 00 00 01 02 C0 19 01 03 04 01 1E 00 0F 05 01  ................
  E180: 00 00 02 00 01 02 C1 19 01 03 04 01 22 00 0F 05  ............"...
  E190: 01 00 40 00 40 01 02 C2 19 01 03 04 01 26 00 0F  ..@.@........&..
  E1A0: 05 01 00 40 00 00 01 02 C3 19 01 01 04 C6 19 2A  ...@...........*
  E1B0: 00 01 04 C7 19 2E 00 43 1E 02 56 08 46 43 E9 05  .......C..V.FC..
  E1C0: 03 1A 48 46 07 25 84 19 FE 03 0A 48 00 07 25 C0  ..HF.%.....H..%.
  E1D0: 19 FD 07 25 C1 19 FB 03 1A 48 46 07 25 84 19 FD  ...%.....HF.%...
  E1E0: 51 05 03 0A 48 00 07 A5 C1 19 FD 51 03 0D 25 C0  Q...H......Q..%.
  E1F0: 19 01 51 03 07 05 C2 19 FE BF FE BF 51 01 4A A5  ..Q.........Q.J.
  E200: C5 19 80 44 5A 02 4A E5 C5 19 01 49 8E 05 0D E5  ...DZ.J....I....
  E210: C0 19 80 51 03 07 0D C3 19 FE BF 51 01 4A E5 C5  ...Q.......Q.J..
  E220: 19 40 44 79 02 4A E5 C5 19 80 49 8E 05 0D 25 C3  .@Dy.J....I...%.
  E230: 19 01 51 01 4A A5 C5 19 02 44 90 02 4A A5 C5 19  ..Q.J....D..J...
  E240: 04 49 8E 05 0D 05 C2 19 01 00 01 00 51 01 03 1A  .I..........Q...
  E250: 48 46 0D 25 8F 19 04 03 0A 48 00 0D 25 C1 19 04  HF.%.....H..%...
  E260: 03 20 41 C5 19 09 25 41 AA 3E 25 41 AA 49 BE 02  . A...%A.>%A.I..
  E270: 03 1A 48 46 3A 00 00 3D A5 01 01 49 E4 02 56 08  ..HF:..=...I..V.
  E280: 48 0D 25 19 19 01 66 FF 2D 0D 42 3D 09 56 08 41  H.%...f.-.B=.V.A
  E290: 03 39 41 01 09 25 41 0C 2D 0A 42 41 03 0C 46 02  .9A..%A.-.BA..F.
  E2A0: 00 3E 0D 41 0C 00 44 20 03 03 0C 48 00 00 3D A5  .>.A..D ...H..=.
  E2B0: 00 00 46 1B 03 0D 25 06 17 01 43 20 03 0D 25 06  ..F...%...C ..%.
  E2C0: 17 04 66 07 2D 0C 42 0C 00 02 01 02 00 02 F1 02  ..f.-.B.........
  E2D0: 01 52 1C 03 1A 48 46 03 00 40 87 19 03 8C 40 0C  .R...HF..@....@.
  E2E0: 00 5E 0A 40 00 20 46 3D A5 01 01 47 57 03 4B E5  .^.@. F=...GW.K.
  E2F0: 01 02 44 57 03 0F 25 40 02 01 04 85 19 04 00 01  ..DW..%@........
  E300: 02 87 19 40 03 04 41 08 00 5E 25 41 07 07 01 02  ...@..A..^%A....
  E310: 86 19 41 51 0F 07 25 86 19 FD 51 04 01 24 86 19  ..AQ..%...Q..$..
  E320: 08 00 51 04 0D 25 84 19 02 3D 25 01 04 47 93 03  ..Q..%...=%..G..
  E330: 0D 25 94 19 02 3A 00 00 03 31 43 00 03 02 41 44  .%...:...1C...AD
  E340: 01 22 66 01 41 51 05 03 1A 48 46 07 25 84 19 FD  ."f.AQ...HF.%...
  E350: 3D 25 01 04 47 BA 03 07 25 94 19 FD 3A 00 00 03  =%..G...%...:...
  E360: 31 43 00 03 02 41 45 07 22 66 01 41 56 08 48 03  1C...AE."f.AV.H.
  E370: 31 48 00 0D 25 60 01 01 51 01 3A 00 00 54 20 66  1H..%`..Q.:..T f
  E380: 01 51 0A 03 1A 48 46 01 A5 8D 19 10 3D 25 01 04  .Q...HF.....=%..
  E390: 47 F5 03 54 30 9D 19 02 31 02 00 52 14 0D 25 51  G..T0...1..R..%Q
  E3A0: 1C 01 51 0A 03 1A 48 46 0D 25 8D 19 01 51 0A 0D  ..Q...HF.%...Q..
  E3B0: 65 8A 19 10 3D 25 01 04 47 27 04 51 C8 0D 25 9D  e...=%..G'.Q..%.
  E3C0: 19 01 51 0A 0D 65 9A 19 10 3A 00 00 3D A5 01 01  ..Q..e...:..=...
  E3D0: 49 8E 05 4A A5 CB 05 01 44 42 04 5C E5 19 19 FE  I..J....DB.\....
  E3E0: 02 43 8E 05 07 8D 19 19 FD FD 0D 25 19 19 10 43  .C.........%...C
  E3F0: 8E 05 02 31 02 00 52 14 4A 25 51 1C 01 44 8E 05  ...1..R.J%Q..D..
  E400: 03 70 46 00 1C 3C A5 50 1C 01 44 AD 04 3C A5 50  .pF..<.P..D..<.P
  E410: 1C 02 44 7B 04 3C A5 50 1C 03 49 89 04 54 00 51  ..D{.<.P..I..T.Q
  E420: 1C 50 02 07 A5 00 1C FE 43 C2 04 03 31 43 00 4A  .P......C...1C.J
  E430: 62 50 1C 44 44 C2 04 54 08 C3 1C 51 C8 0D 25 C4  bP.DD..T...Q..%.
  E440: 1C 01 51 32 54 20 C0 1C 54 20 D1 1C 43 C2 04 56  ..Q2T ..T ..C..V
  E450: 08 48 07 05 19 19 EF FF FD FD 50 01 3C 65 1A 19  .H........P.<e..
  E460: 09 49 B8 04 03 1A 48 46 07 25 8F 19 FB 54 00 8D  .I....HF.%...T..
  E470: 1C 07 65 8A 19 EF 07 A5 8D 19 8F 54 00 83 19 54  ..e........T...T
  E480: 00 82 19 4C 65 46 01 44 FA 04 07 65 9A 19 EF 07  ...LeF.D...e....
  E490: A5 9D 19 8F 54 00 93 19 54 00 92 19 02 31 02 00  ....T...T....1..
  E4A0: 52 14 54 20 51 1C 54 28 50 1C 56 08 48 03 31 48  R.T Q.T(P.V.H.1H
  E4B0: 00 07 25 60 01 FE 03 1A 48 46 07 25 86 19 07 51  ..%`....HF.%...Q
  E4C0: 0A 07 25 86 19 FE 51 0A 03 0A 48 00 07 25 C0 19  ..%...Q...H..%..
  E4D0: FE 51 01 07 E5 C0 19 7F 51 01 0D 05 C2 19 01 00  .Q......Q.......
  E4E0: 01 00 0D 25 C3 19 01 51 0A 0D 25 C0 19 02 03 1A  ...%...Q..%.....
  E4F0: 48 46 0D 25 84 19 02 51 28 03 0A 48 00 0D A5 C1  HF.%...Q(..H....
  E500: 19 02 51 0A 0D 05 C2 19 00 40 00 40 0D 65 C3 19  ..Q......@.@.e..
  E510: 40 03 1A 48 46 0D 25 84 19 01 4C 65 46 01 44 8E  @..HF.%...LeF.D.
  E520: 05 56 28 46 2D 0D 48 10 00 03 8A 46 48 43 26 05  .V(F-.H....FHC&.
  E530: 3A 00 00 5B 01 0D 1B 19 9F 0F 66 06 3D 65 01 14  :..[......f.=e..
  E540: 49 D0 05 01 05 1C 19 00 00 00 00 01 05 1D 19 7D  I..............}
  E550: 00 00 00 66 06 01 4C 1D 19 39 00 03 24 46 42 00  ...f..L..9..$FB.
  E560: 3E 25 46 00 44 CA 05 01 25 1D 19 00 0D E5 19 19  >%F.D...%.......
  E570: 02 5B 3D 65 01 0E 49 8E 05 01 04 1C 19 34 00 01  .[=e..I......4..
  E580: 04 1D 19 38 00 01 E5 1D 19 01 5B 09 65 46 1B 66  ...8......[.eF.f
  E590: FF 2D 0D 42 4D 09 56 00 40 3E 64 46 00 00 44 10  .-.BM.V.@>dF..D.
  E5A0: 06 2D 25 40 01 2D 0D 42 01 00 3E 25 40 0A 45 F7  .-%@.-.B..>%@.E.
  E5B0: 05 5B 56 08 48 03 22 43 40 03 02 41 44 03 0A 46  .[V.H."C@..AD..F
  E5C0: 41 3D 0D 00 48 3F 44 59 06 15 05 41 0A 3D 0D 00  A=..H?DY...A.=..
  E5D0: 78 69 44 59 06 15 05 41 0A 3D 0D 00 F0 D2 44 59  xiDY...A.=....DY
  E5E0: 06 3D 0D 00 90 7E 49 8F 07 15 05 41 0A 3E 25 40  .=...~I....A.>%@
  E5F0: 02 45 59 06 1B 0D 46 02 43 5C 06 56 08 46 66 07  .EY...F.C\.V.Ff.
  E600: 2D 0C 42 04 00 55 30 01 03 31 43 00 03 22 40 44  -.B..U0..1C.."@D
  E610: 3D A4 01 00 00 49 7E 06 4C 24 40 01 00 49 86 06  =....I~.L$@..I..
  E620: 2D 0C 42 02 00 43 6E 06 54 00 00 00 2D 0D 42 04  -.B..Cn.T...-.B.
  E630: 00 03 04 40 00 00 3E 0D 40 00 00 44 8F 07 2D 8A  ...@..>.@..D..-.
  E640: 40 42 4C 04 41 04 00 49 B8 06 4C 24 46 08 00 49  @BL.A..I..L$F..I
  E650: B8 06 2D 0D 42 09 00 43 A0 06 3E 0D 40 C0 19 48  ..-.B..C..>.@..H
  E660: C7 06 2D 1A 40 46 43 7D 07 2D 0A 40 00 3D E5 00  ..-.@FC}.-.@.=..
  E670: 01 49 7D 07 3E 0D 40 C0 19 44 E2 06 3E 0D 40 C8  .I}.>.@..D..>.@.
  E680: 19 49 02 07 01 0A 00 00 40 03 04 01 09 00 09 05  .I......@.......
  E690: 01 FE FF FF 7F 0F 05 01 02 00 00 00 01 02 01 00  ................
  E6A0: 01 43 88 07 3E 0D 40 C1 19 44 12 07 3E 0D 40 C9  .C..>.@..D..>.@.
  E6B0: 19 49 2B 07 01 0A 00 00 40 03 04 01 09 00 0F 05  .I+.....@.......
  E6C0: 01 00 00 02 00 01 02 01 00 01 43 88 07 3E 0D 40  ..........C..>.@
  E6D0: C2 19 44 3B 07 3E 0D 40 CA 19 49 54 07 01 0A 00  ..D;.>.@..IT....
  E6E0: 00 40 03 04 01 09 00 0F 05 01 00 40 00 40 01 02  .@.........@.@..
  E6F0: 01 00 01 43 88 07 3E 0D 40 C3 19 44 64 07 3E 0D  ...C..>.@..Dd.>.
  E700: 40 CB 19 49 7D 07 01 0A 00 00 40 03 04 01 09 00  @..I}.....@.....
  E710: 0F 05 01 00 40 00 00 01 02 01 00 01 43 88 07 01  ....@.......C...
  E720: 0A 00 00 40 01 04 01 00 09 00 03 1A 42 40 43 8F  ...@........B@C.
  E730: 06 3D E5 00 01 44 1E 02 5B 56 00 41 43 A5 07 03  .=...D..[V.AC...
  E740: 25 41 10 03 65 41 01 3D A5 01 01 44 AD 07 5B 5C  %A..eA.=...D..[\
  E750: 62 8A 19 EF 41 5C 62 9A 19 EF 41 5B 4A A5 CB 05  b...A\b...A[J...
  E760: 01 49 8E 05 4A 25 19 19 01 44 8E 05 4A 25 1A 19  .I..J%...D..J%..
  E770: 10 44 CA 07 4A E5 19 19 02 49 E5 07 4A 25 1A 19  .D..J....I..J%..
  E780: 08 49 8E 05 43 19 08 4A E5 19 19 01 49 8E 05 4A  .I..C..J....I..J
  E790: 25 19 19 10 44 19 08 0D A5 19 19 03 0D 65 19 19  %...D........e..
  E7A0: 03 01 0D 1B 19 00 00 5C 25 19 19 EF 01 4A 25 1A  .......\%....J%.
  E7B0: 19 10 44 0B 08 01 0D 1B 19 9F 0F 07 E5 19 19 FC  ..D.............
  E7C0: 0D E5 1D 19 01 0D 25 19 19 11 5B 66 06 03 24 46  ......%...[f..$F
  E7D0: 42 00 3E 25 46 00 49 8E 05 4A 25 19 19 01 44 8E  B.>%F.I..J%...D.
  E7E0: 05 4A 25 1A 19 10 44 3F 08 5C E5 19 19 FE 02 5B  .J%...D?.\.....[
  E7F0: 4A 65 D0 05 02 44 5B 08 0D 25 21 19 01 66 06 56  Je...D[..%!..f.V
  E800: 00 41 03 0C 41 32 00 3E 0D 41 00 00 44 DD 08 03  .A..A2.>.A..D...
  E810: 05 46 00 36 6E 01 21 05 41 FF 0F 00 00 27 02 46  .F.6n.!.A....'.F
  E820: 40 3E 05 41 00 00 00 00 44 8E 08 2D 0D 40 01 00  @>.A....D..-.@..
  E830: 01 8A 1B 19 40 56 00 41 03 0C 41 32 00 21 02 40  ....@V.A..A2.!.@
  E840: 41 27 02 46 40 01 A5 20 19 0C 01 0A 20 19 40 15  A'.F@.. .... .@.
  E850: 05 40 04 56 00 41 03 28 41 CB 05 2D 0D 41 01 00  .@.V.A.(A..-.A..
  E860: 21 02 40 41 1B 05 40 08 01 0A 1E 19 40 0D E5 1E  !.@A..@.....@...
  E870: 19 C0 07 25 21 19 FE 4A 65 21 19 01 49 D5 08 5B  ...%!..Je!..I..[
  E880: 4A 25 19 19 01 44 F6 08 4A 25 19 19 10 49 8E 05  J%...D..J%...I..
  E890: 4A 25 1A 19 10 44 EE 08 07 E5 1D 19 FE 0D 25 19  J%...D........%.
  E8A0: 19 11 5B 4A 25 19 19 01 44 8E 05 4A 25 19 19 10  ..[J%...D..J%...
  E8B0: 44 8E 05 4A 25 1A 19 10 44 11 09 07 A5 19 19 FC  D..J%...D.......
  E8C0: 07 65 19 19 FC 5C 25 19 19 EF 01 5B 7A 2C 00 00  .e...\%....[z,..
  E8D0: 01 02 03 01 00 00 00 00 01 02 03 01 00 00 00 14  ................
  E8E0: 00 04 05 28 00 08 05 00 00 00 05 00 00 20 0A 00  ...(......... ..
  E8F0: 01 02 03 08 09 0A 10 11 18 FF FF 00 25 02 01 02  ............%...
  E900: 00 08 37 00 00 3D 0D 00 00 00 44 A7 01 56 00 41  ..7..=....D..V.A
  E910: 03 21 41 01 09 25 41 0F 15 0D 41 02 03 0A 40 42  .!A..%A...A...@B
  E920: 66 FF 2D 0D 42 0D 02 2D 0A 42 41 03 0C 48 02 00  f.-.B..-.BA..H..
  E930: 0D A5 4C 19 01 54 08 4C 19 03 0C 48 00 00 03 F9  ..L..T.L...H....
  E940: 41 01 15 3D 41 04 5C BA 80 18 8F 41 03 0A 42 40  A..=A.\....A..B@
  E950: 0D 0D 80 18 01 01 56 00 41 03 09 41 00 3B 02 41  ......V.A..A.;.A
  E960: 03 3B 41 00 1B 25 41 04 01 A2 81 18 41 03 69 41  .;A..%A.....A.iA
  E970: 01 15 2D 41 04 01 2A 81 18 41 56 00 40 0F E5 40  ..-A..*..AV.@..@
  E980: 80 03 73 40 00 01 02 86 18 40 56 00 40 03 6B 40  ..s@.....@V.@.k@
  E990: 00 01 02 86 18 40 03 63 40 00 01 02 86 18 40 03  .....@.c@.....@.
  E9A0: 7B 40 00 09 65 40 0F 01 02 86 18 40 3E 25 41 04  {@..e@.....@>%A.
  E9B0: 47 E9 00 33 25 41 04 2D 05 46 04 00 00 00 03 63  G..3%A.-.F.....c
  E9C0: 40 00 01 02 86 18 40 03 6B 40 00 01 02 86 18 40  @.....@.k@.....@
  E9D0: 03 73 40 00 01 02 86 18 40 03 7B 40 00 01 02 86  .s@.....@.{@....
  E9E0: 18 40 43 B0 00 0D 25 83 18 02 0D 25 81 18 01 03  .@C...%....%....
  E9F0: 29 40 01 21 25 40 0A 2D 25 40 32 4A 25 84 18 01  )@.!%@.-%@2J%...
  EA00: 49 1B 01 51 0A 33 25 40 01 3E 25 40 00 49 FF 00  I..Q.3%@.>%@.I..
  EA10: 02 65 01 01 43 A3 01 4A 05 84 18 F0 8F FF 00 44  .e..C..J.......D
  EA20: 2D 01 02 65 01 02 43 A3 01 01 05 86 18 01 00 00  -..e..C.........
  EA30: 80 03 00 40 86 18 02 6A 01 40 02 B8 01 84 18 08  ...@...j.@......
  EA40: A5 01 1F 3D A5 01 00 46 55 01 02 65 01 03 43 A3  ...=...FU..e..C.
  EA50: 01 32 A5 01 01 3D 8D 00 00 00 44 A3 01 3D A5 01  .2...=....D..=..
  EA60: 00 44 A3 01 03 31 41 01 03 19 40 00 56 18 40 3B  .D...1A...@.V.@;
  EA70: 02 40 03 28 40 86 18 03 68 40 86 18 03 A8 40 86  .@.(@...h@....@.
  EA80: 18 03 E8 40 86 18 04 02 00 40 3E 25 41 04 47 A3  ...@.....@>%A.G.
  EA90: 01 33 25 41 04 2D 05 46 04 00 00 00 43 76 01 3A  .3%A.-.F....Cv.:
  EAA0: 00 00 5B 66 FF 2D 0D 42 0D 02 03 0C 48 00 00 01  ..[f.-.B....H...
  EAB0: 8D 88 18 18 00 01 05 89 18 00 1C 02 00 01 05 8A  ................
  EAC0: 18 10 12 3D 12 2D 0D 42 04 00 2C 25 00 01 3D 25  ...=.-.B..,%..=%
  EAD0: 00 06 49 AE 01 56 08 48 03 25 41 10 0D 65 7F 19  ..I..V.H.%A..e..
  EAE0: 40 07 65 7F 19 BF 33 25 41 01 3E 25 41 00 49 E0  @.e...3%A.>%A.I.
  EAF0: 01 0D 25 0B 19 01 54 30 0B 19 0D 25 0C 19 01 54  ..%...T0...%...T
  EB00: 30 0C 19 51 32 5B 7A 18 00 00 00 00 00 14 00 04  0..Q2[z.........
  EB10: 00 28 00 08 00 40 00 0C 00 54 00 10 00 68 00 14  .(...@...T...h..
  EB20: 00 00 5C 00 01 02 00 04 02 25 01 04 03 31 41 00  ..\......%...1A.
  EB30: 09 0D 41 0F 00 15 0D 41 01 66 FF 2D 0D 42 50 00  ..A....A.f.-.BP.
  EB40: 2D 0A 42 41 03 0C 48 00 00 07 A5 4C 19 FE 01 0D  -.BA..H....L....
  EB50: 4C 19 11 11 50 02 4A 0D 4F 19 01 00 49 41 00 02  L...P.J.O...IA..
  EB60: 25 01 13 54 08 4C 19 54 00 4E 19 3A 00 00 5B 7A  %..T.L.T.N.:..[z
  EB70: 0C 00 00 00 04 00 08 00 0C 00 10 00 14 00 38 00  ..............8.
  EB80: 01 01 00 00 03 0C 41 00 00 2D 0D 42 02 00 03 31  ......A..-.B...1
  EB90: 43 00 03 A2 41 44 3D E4 00 02 00 49 30 00 4C A4  C...AD=....I0.L.
  EBA0: 41 03 00 44 30 00 3D 0C 00 00 00 47 37 00 2D 0A  A..D0.=....G7.-.
  EBB0: 42 41 43 18 00 5B FF FF FF FF FF FF FF FF FF FF  BAC..[..........
  EBC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  EBD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  EBE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  EBF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  EC00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  EC10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  EC20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  EC30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  EC40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  EC50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ................
  EC60: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  ................
  EC70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  EC80: 00 00 00 00                                      ....


XSDT
----
[000h 0000   4]                    Signature : "XSDT"    [Extended System Description Table]
[004h 0004   4]                 Table Length : 000000CC
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : FA
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   8]       ACPI Table Address   0 : 000000009FBFC000
[02Ch 0044   8]       ACPI Table Address   1 : 000000009FBFD000
[034h 0052   8]       ACPI Table Address   2 : 000000009FBFB000
[03Ch 0060   8]       ACPI Table Address   3 : 000000009FBFA000
[044h 0068   8]       ACPI Table Address   4 : 000000009FBF9000
[04Ch 0076   8]       ACPI Table Address   5 : 000000009FBF8000
[054h 0084   8]       ACPI Table Address   6 : 000000009FBF1000
[05Ch 0092   8]       ACPI Table Address   7 : 000000009FBF0000
[064h 0100   8]       ACPI Table Address   8 : 000000009FBEE000
[06Ch 0108   8]       ACPI Table Address   9 : 000000009FBED000
[074h 0116   8]       ACPI Table Address  10 : 000000009FBE6000
[07Ch 0124   8]       ACPI Table Address  11 : 000000009FBE5000
[084h 0132   8]       ACPI Table Address  12 : 000000009FBE0000
[08Ch 0140   8]       ACPI Table Address  13 : 000000009FBD1000
[094h 0148   8]       ACPI Table Address  14 : 000000009FBD0000
[09Ch 0156   8]       ACPI Table Address  15 : 000000009FBCF000
[0A4h 0164   8]       ACPI Table Address  16 : 000000009FBCD000
[0ACh 0172   8]       ACPI Table Address  17 : 000000009FBCC000
[0B4h 0180   8]       ACPI Table Address  18 : 000000009FBCA000
[0BCh 0188   8]       ACPI Table Address  19 : 000000009FBC8000
[0C4h 0196   8]       ACPI Table Address  20 : 000000009FBC9000

Raw Table Data: Length 204 (0xCC)

  0000: 58 53 44 54 CC 00 00 00 01 FA 54 4F 53 49 4E 56  XSDT......TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 20 20 20 20  TOSINV00....    
  0020: 13 00 00 01 00 C0 BF 9F 00 00 00 00 00 D0 BF 9F  ................
  0030: 00 00 00 00 00 B0 BF 9F 00 00 00 00 00 A0 BF 9F  ................
  0040: 00 00 00 00 00 90 BF 9F 00 00 00 00 00 80 BF 9F  ................
  0050: 00 00 00 00 00 10 BF 9F 00 00 00 00 00 00 BF 9F  ................
  0060: 00 00 00 00 00 E0 BE 9F 00 00 00 00 00 D0 BE 9F  ................
  0070: 00 00 00 00 00 60 BE 9F 00 00 00 00 00 50 BE 9F  .....`.......P..
  0080: 00 00 00 00 00 00 BE 9F 00 00 00 00 00 10 BD 9F  ................
  0090: 00 00 00 00 00 00 BD 9F 00 00 00 00 00 F0 BC 9F  ................
  00A0: 00 00 00 00 00 D0 BC 9F 00 00 00 00 00 C0 BC 9F  ................
  00B0: 00 00 00 00 00 A0 BC 9F 00 00 00 00 00 80 BC 9F  ................
  00C0: 00 00 00 00 00 90 BC 9F 00 00 00 00              ............


